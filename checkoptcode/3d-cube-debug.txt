Starting JetStream2
Running 3d-cube-SP:
assign 0 to v-1:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
assign 6 to v-7:0
------------------------
function: DrawLine
add v120->v26
add v122->v26
add v119->v122
add v114->v122
add v121->v122
add v72->v114
add v120->v27
add v118->v27
add v119->v118
add v112->v118
add v117->v118
add v106->v112
add v70->v114
add v109->v112
add v97->v96
add v95->v96
add v80->v95
add v92->v94
add v93->v92
add v1->v92
add v90->v1
add v91->v90
add v88->v90
add v18->v13
add v14->v16
add v12->v10
add v9->v10
add v8->v6
add v7->v6
add v2->v1
gap () () 
          [stack:-3|t] = ArchNop
gap (v27(-) = [stack:-3|t];) () 
          [stack:-1|t] = ArchNop
gap (v25(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v26(-) = [stack:-2|t];) () 
          [rsi|R|t] = ArchNop
gap (v28(-) = [rsi|R|t];) () 
          [constant:110] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:126] [immediate:127]
gap () () 
          [constant:126] = ArchNop
gap () () 
          [constant:125] = ArchNop
gap () () 
          v124(R) = ArchStackCheckOffset
gap () () 
          X64Push v124(-)
gap () ([rbx|R|w64] = v125(-); [rax|R|w64] = v110(-); [rsi|R|t] = v126(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:124] #-1 #21 [immediate:125] v25(S) v26(S) v27(S) v28(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:123]
gap () () 
          ArchJmp [immediate:122]
gap () () 
          [constant:40] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v26 #1 #20 [immediate:121] v25(-) v26(-) v27(-) v28(S)
gap () () 
          [constant:120] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v26(R) [immediate:119] v120(R) #19 [immediate:120] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v122(R) = X64MovqDecompressTaggedPointer : MRI v26(R) [immediate:118]
gap () () 
          [constant:119] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v122(R) [immediate:116] v119(R) #18 [immediate:117] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v114(R) = X64MovqDecompressTaggedPointer : MRI v122(R) [immediate:115]
gap () () 
          v121(R) = X64MovqDecompressTaggedSigned : MRI v122(R) [immediate:114]
gap () (v115(R) = v121(-);) 
          v115(1) = X64Sar32 v115(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #0 #17 [immediate:113] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v72(R) = X64Movsd : MRI v114(R) [immediate:112]
gap () () 
          X64Test32 && deoptimize if equal v27 #1 #16 [immediate:111] v25(-) v26(-) v27(-) v28(S)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v27(R) [immediate:109] v120(R) #15 [immediate:110] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v118(R) = X64MovqDecompressTaggedPointer : MRI v27(R) [immediate:108]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v118(R) [immediate:106] v119(R) #14 [immediate:107] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v112(R) = X64MovqDecompressTaggedPointer : MRI v118(R) [immediate:105]
gap () () 
          v117(R) = X64MovqDecompressTaggedSigned : MRI v118(R) [immediate:104]
gap () (v113(R) = v117(-);) 
          v113(1) = X64Sar32 v113(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #0 #13 [immediate:103] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v106(R) = X64Movsd : MRI v112(R) [immediate:102]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v106(R) v72 [immediate:100] [immediate:101]
gap () () 
          [constant:116] = ArchNop
gap () (v99 = v116(-);) 
          ArchJmp [immediate:99]
gap () (v99 = v110(-);) 
          ArchJmp [immediate:98]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #1 #12 [immediate:97] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v70(R) = X64Movsd : MRI v114(R) [immediate:96]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #1 #11 [immediate:95] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v109(R) = X64Movsd : MRI v112(R) [immediate:94]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v109(R) v70 [immediate:92] [immediate:93]
gap () () 
          [constant:111] = ArchNop
gap () (v98 = v111(-);) 
          ArchJmp [immediate:91]
gap () (v98 = v110(-);) 
          ArchJmp [immediate:90]
gap () () 
          [constant:86] = ArchNop
gap () () 
          v108(R) = AVXFloat64Sub v109(R) v70
gap () () 
          v100(R) = AVXFloat64Abs v108
gap () () 
          v105(R) = AVXFloat64Sub v106(R) v72
gap () () 
          v101(R) = AVXFloat64Abs v105
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v101(R) v100 [immediate:88] [immediate:89]
gap () () 
          v103(R) = AVXFloat64Mul v100(R) v86
gap () (v34 = v98(-); v32 = v40(-); v33 = v40(-); v31 = v99(-); v37 = v101(-); v76 = v103(-); v35 = v100(-);) 
          ArchJmp [immediate:87]
gap () () 
          v102(R) = AVXFloat64Mul v101(R) v86
gap () (v34 = v40(-); v32 = v98(-); v33 = v99(-); v31 = v40(-); v37 = v100(-); v76 = v102(-); v35 = v101(-);) 
          ArchJmp [immediate:86]
gap () () 
          [constant:96] = ArchNop
gap () () 
          [constant:97] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v96(R) [immediate:84] v97(R) #10 [immediate:85] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v95(R) = X64MovqDecompressTaggedPointer : MRI v96(R) [immediate:83]
gap () () 
          v80(R) = X64Movl : MRI v95(R) [immediate:82]
gap () () 
          [constant:94] = ArchNop
gap () () 
          v92(R) = X64MovqDecompressAnyTagged : MRI v94(R) [immediate:81]
gap () () 
          X64Test32 && deoptimize if equal v92 #1 #9 [immediate:80] v25(-) v26(-) v27(-) v28(S)
gap () () 
          [constant:93] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v92(R) [immediate:78] v93(R) #8 [immediate:79] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v1(R) = X64MovqDecompressTaggedPointer : MRI v92(R) [immediate:77]
gap () () 
          v90(R) = X64MovqDecompressAnyTagged : MRI v1(R) [immediate:76]
gap () (v67(R) = v90(-);) 
          v67(1) = X64Sar32 v67(R) #1
gap () () 
          v78(R) = X64Test32 && set if equal v90 #1
gap () () 
          X64Cmp32 && branch if not equal v78 #0 [immediate:74] [immediate:75]
gap () () 
          v91(R) = X64MovqDecompressTaggedPointer : MRI v90(R) [immediate:73]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v91(R) [immediate:71] [immediate:72]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v91(R) [immediate:69] #67 #7 [immediate:70] v25(-) v26(-) v27(-) v28(S)
gap () () 
          ArchJmp [immediate:68]
gap () () 
          ArchJmp [immediate:67]
gap () () 
          v88(R) = X64Movsd : MRI v90(R) [immediate:66]
gap () (v87 = v88(-);) 
          ArchJmp [immediate:65]
gap () () 
          v89(R) = SSEInt32ToFloat64 v67
gap () (v87 = v89(-);) 
          ArchJmp [immediate:64]
gap () () 
          v84(R) = AVXFloat64Add v87(R) v35
gap () () 
          v81(R) = SSEFloat64Round v84(R)
gap () () 
          v85(R) = AVXFloat64Sub v81(R) v86
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v84(R) v85 [immediate:62] [immediate:63]
gap () () 
          [constant:83] = ArchNop
gap () () 
          v82(R) = AVXFloat64Sub v81(R) v83
gap () (v7 = v82(-);) 
          ArchJmp [immediate:61]
gap () (v7 = v81(-);) 
          ArchJmp [immediate:60]
gap () () 
          v22(R) = SSEFloat64ToInt32 v7
gap () () 
          [constant:79] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v79(R) v80 #6 [immediate:59] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v77(R) = SSEInt32ToFloat64 v22
gap () () 
          X64Cmp32 && deoptimize if equal v78 #0 #5 [immediate:58] v25(-) v26(-) v27(-) v28(S)
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v77(R) v7 #4 [immediate:57] v25(-) v26(-) v27(-) v28(S)
gap () () 
          X64Cmp32 && branch if signed less than v67(R) v22 [immediate:55] [immediate:56]
gap () () 
          ArchJmp [immediate:54]
gap () () 
          v68(R) = AVXFloat64Add v76(R) v37
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v68(R) v35 [immediate:52] [immediate:53]
gap () (v58 = v68(-); v66 = v70(-); v65 = v72(-);) 
          ArchJmp [immediate:51]
gap () () 
          v75(R) = SSEInt32ToFloat64 v32
gap () () 
          v74(R) = SSEInt32ToFloat64 v31
gap () () 
          v69(R) = AVXFloat64Sub v68(R) v35
gap () () 
          v71(R) = AVXFloat64Add v75(R) v70
gap () () 
          v73(R) = AVXFloat64Add v74(R) v72
gap () (v58 = v69(-); v66 = v71(-); v65 = v73(-);) 
          ArchJmp [immediate:50]
gap () () 
          v45(R) = SSEInt32ToFloat64 v34
gap () () 
          v43(R) = SSEInt32ToFloat64 v33
gap () (v64(R) = v67(-);) 
          v64(1) = X64Add32 && deoptimize if overflow v64(R) #1 #3 [immediate:49] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v57(R) = AVXFloat64Add v66(R) v45
gap () () 
          v59(R) = AVXFloat64Add v65(R) v43
gap () (v60 = v64(-);) 
          v60(1) = ArchNop v60
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:47] [immediate:48]
gap () () 
          [constant:63] = ArchNop
gap () () 
          [constant:62] = ArchNop
gap () ([rbx|R|w64] = v62(-); [rax|R|w64] = v40(-); [rsi|R|t] = v63(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:45] #-1 #2 [immediate:46] v25(S) v26(S) v27(S) v28(S) v59(S) v57(S) v31(S) v32(S) v33(S) v34(S) v35(S) v58(S) v37(S) v7(S) v60(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:44]
gap () () 
          ArchJmp [immediate:43]
gap () (v49 = v57(-); v50 = v58(-); v48 = v59(-); v47 = v60(-);) 
          ArchJmp [immediate:42]
gap () () 
          X64Cmp32 && branch if signed less than v47(R) v22 [immediate:40] [immediate:41]
gap () () 
          v52(R) = AVXFloat64Add v50(R) v37
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v52(R) v35 [immediate:38] [immediate:39]
gap () (v46 = v49(-); v36 = v52(-); v44 = v48(-);) 
          ArchJmp [immediate:37]
gap () () 
          v56(R) = SSEInt32ToFloat64 v32
gap () () 
          v51(R) = AVXFloat64Add v56(R) v49
gap () () 
          v53(R) = AVXFloat64Sub v52(R) v35
gap () () 
          v55(R) = SSEInt32ToFloat64 v31
gap () () 
          v54(R) = AVXFloat64Add v55(R) v48
gap () (v46 = v51(-); v36 = v53(-); v44 = v54(-);) 
          ArchJmp [immediate:36]
gap () (v42(R) = v47(-);) 
          v42(1) = X64Add32 && deoptimize if overflow v42(R) #1 #1 [immediate:35] v25(-) v26(-) v27(-) v28(S) v48(-) v49(-) v31(-) v32(-) v33(-) v34(-) v35(-) v50(-) v37(-) v7(-) v47(-) v7(-)
gap () () 
          v30(R) = AVXFloat64Add v45(R) v46
gap () () 
          v29(R) = AVXFloat64Add v43(R) v44
gap () (v38 = v42(-);) 
          v38(1) = ArchNop v38
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:33] [immediate:34]
gap () () 
          [constant:41] = ArchNop
gap () () 
          [constant:39] = ArchNop
gap () ([rbx|R|w64] = v39(-); [rax|R|w64] = v40(-); [rsi|R|t] = v41(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:31] #-1 #0 [immediate:32] v25(S) v26(S) v27(S) v28(S) v29(S) v30(S) v31(S) v32(S) v33(S) v34(S) v35(S) v36(S) v37(S) v7(S) v38(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:30]
gap () () 
          ArchJmp [immediate:29]
gap () (v49 = v30(-); v50 = v36(-); v48 = v29(-); v47 = v38(-);) 
          ArchJmp [immediate:28]
gap () () 
          ArchJmp [immediate:27]
gap () () 
          X64Cmp32 && branch if equal v22 #0 [immediate:25] [immediate:26]
gap () () 
          ArchJmp [immediate:24]
gap () () 
          v23(R) = SSEFloat64ExtractHighWord32 v7
gap () () 
          X64Cmp32 && branch if signed less than v23 #0 [immediate:22] [immediate:23]
gap () () 
          ArchJmp [immediate:21]
gap () (v21(R) = v22(-);) 
          v21(1) = X64Add32 && branch if overflow v21(R) v22(R) [immediate:17] [immediate:18] [immediate:19] [immediate:20]
gap () (v20 = v21(-);) 
          v20(1) = ArchNop v20
gap () (v2 = v20(-);) 
          ArchJmp [immediate:16]
gap () () 
          ArchJmp [immediate:15]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          [constant:17] = ArchNop
gap () () 
          [constant:11] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () () 
          v13(R) = X64Movq : MR v11(R)
gap () () 
          [constant:19] = ArchNop
gap () () 
          v18(R) = X64Lea : MRI v13(R) [immediate:13]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v19(R) v18(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () ([rdx|R|w64] = v17(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:9] #-1 [rdx|R|w64]
gap (v16(-) = [rax|R|tp];) () 
          v14(R) = X64Lea : MRI v16(R) [immediate:8]
gap () (v10 = v14(-);) 
          ArchJmp [immediate:7]
gap () (v10 = v13(-);) 
          ArchJmp [immediate:6]
gap () () 
          v12(R) = X64Lea : MRI v10(R) [immediate:5]
gap () () 
          X64Movq : MR v11(R) v12(R)
gap () () 
          v9(R) = X64Lea : MRI v10(R) [immediate:4]
gap () (v6 = v9(-);) 
          v6(1) = ArchNop v6
gap () () 
          X64MovqCompressTagged : MRI v6(R) [immediate:3] v8(R)
gap () () 
          X64Movsd : MRI v6(R) [immediate:2] v7(R)
gap () (v2 = v6(-);) 
          ArchJmp [immediate:1]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1(R) [immediate:0] v2(R)
gap () () 
          [constant:0] = ArchNop
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
print modrm pairs
1, v2, v1
1, v8, v6
1, v9, v10
1, v1, v92
1, v88, v90
1, v91, v90
1, v12, v10
1, v70, v114
1, v92, v94
1, v18, v13
1, v97, v96
1, v93, v92
1, v109, v112
1, v106, v112
1, v95, v96
1, v112, v118
1, v72, v114
1, v117, v118
1, v118, v27
1, v7, v6
1, v90, v1
1, v121, v122
1, v114, v122
1, v120, v27
1, v120, v26
1, v14, v16
1, v80, v95
1, v119, v118
1, v119, v122
1, v122, v26
assign rcx to v124:0
assign 1 to v124:0
assign rax to v110:1
assign 0 to v110:1
assign rbx to v125:1
assign 3 to v125:1
assign rsi to v126:1
assign 6 to v126:1
assign rcx to v110:2
assign 1 to v110:2
assign rcx to v26:1
assign 1 to v26:1
assign rdi to v120:1
assign 7 to v120:1
assign r8 to v122:0
assign 8 to v122:0
assign r9 to v119:1
assign 9 to v119:1
assign r12 to v114:0
assign 12 to v114:0
assign r8 to v121:0
assign 8 to v121:0
assign r8 to v115:0
assign 8 to v115:0
assign r11 to v27:1
assign 11 to v27:1
assign rdi to v118:0
assign 7 to v118:0
assign r9 to v112:0
assign 9 to v112:0
assign rdi to v117:0
assign 7 to v117:0
assign rdi to v113:0
assign 7 to v113:0
assign r14 to v116:1
assign 14 to v116:1
assign r14 to v99:0
assign 14 to v99:0
assign rax to v111:1
assign 0 to v111:1
assign rax to v98:0
assign 0 to v98:0
assign rdi to v40:1
assign 7 to v40:1
assign rdi to v40:3
assign 7 to v40:3
assign r8 to v31:0
assign 8 to v31:0
assign rax to v32:0
assign 0 to v32:0
assign r14 to v33:0
assign 14 to v33:0
assign r9 to v34:0
assign 9 to v34:0
assign r12 to v96:1
assign 12 to v96:1
assign rdx to v97:1
assign 2 to v97:1
assign r12 to v95:0
assign 12 to v95:0
assign r12 to v80:0
assign 12 to v80:0
assign r15 to v94:1
assign 15 to v94:1
assign r15 to v92:0
assign 15 to v92:0
assign rdx to v93:1
assign 2 to v93:1
assign r15 to v1:0
assign 15 to v1:0
assign rdx to v90:0
assign 2 to v90:0
assign rbx to v67:0
assign 3 to v67:0
assign rsi to v78:0
assign 6 to v78:0
blocking v91 pick register r15
assign r15 to v91:0
assign 15 to v91:0
v1:0 not intersect with v92:0, removed
v1:0 not intersect with v2:0, removed
v1:1 intersect with v2:0, adding
v1:1 intersect with v90:0, adding
v1:1 not intersect with v2:0, removed
v1:3 intersect with v2:0, adding
assign r15 to v1:3
assign 15 to v1:3
assign rdx to v22:0
assign 2 to v22:0
blocking v79 pick register r15
assign r15 to v79:1
assign 15 to v79:1
v1:3 not intersect with v2:0, removed
v1:4 intersect with v2:0, adding
assign rbx to v64:0
assign 3 to v64:0
assign rbx to v60:0
assign 3 to v60:0
assign r12 to v62:1
assign 12 to v62:1
assign rsi to v63:1
assign 6 to v63:1
assign r12 to v32:1
assign 12 to v32:1
assign r15 to v60:1
assign 15 to v60:1
blocking v22 pick register rdx
assign rbx to v60:3
assign 3 to v60:3
assign r14 to v33:2
assign 14 to v33:2
assign r11 to v27:3
assign 11 to v27:3
assign r9 to v34:2
assign 9 to v34:2
assign r8 to v31:2
assign 8 to v31:2
assign rdi to v40:5
assign 7 to v40:5
assign rcx to v26:3
assign 1 to v26:3
assign rax to v32:3
assign 0 to v32:3
assign rdx to v22:3
assign 2 to v22:3
assign rbx to v47:0
assign 3 to v47:0
assign r12 to v42:0
assign 12 to v42:0
assign r12 to v38:0
assign 12 to v38:0
assign rbx to v39:1
assign 3 to v39:1
assign rsi to v41:1
assign 6 to v41:1
assign r15 to v32:4
assign 15 to v32:4
assign r12 to v38:2
assign 12 to v38:2
assign rdx to v22:5
assign 2 to v22:5
assign rax to v32:6
assign 0 to v32:6
assign rcx to v26:5
assign 1 to v26:5
assign rdi to v40:7
assign 7 to v40:7
assign r8 to v31:4
assign 8 to v31:4
assign r9 to v34:4
assign 9 to v34:4
assign r11 to v27:5
assign 11 to v27:5
assign r14 to v33:4
assign 14 to v33:4
assign rcx to v23:0
assign 1 to v23:0
assign rdx to v22:2
assign 2 to v22:2
assign rcx to v21:0
assign 1 to v21:0
assign rcx to v20:0
assign 1 to v20:0
assign rcx to v11:1
assign 1 to v11:1
assign rdi to v13:0
assign 7 to v13:0
assign r8 to v18:0
assign 8 to v18:0
assign r9 to v19:1
assign 9 to v19:1
assign rdx to v17:1
assign 2 to v17:1
blocking v11 pick register rcx
assign rax to v16:0
assign 0 to v16:0
assign rdi to v14:0
assign 7 to v14:0
assign rcx to v11:4
assign 1 to v11:4
assign rdi to v10:0
assign 7 to v10:0
assign rcx to v12:0
assign 1 to v12:0
assign r8 to v11:3
assign 8 to v11:3
assign rcx to v9:0
assign 1 to v9:0
assign rcx to v6:0
assign 1 to v6:0
assign rdi to v8:1
assign 7 to v8:1
assign rcx to v2:0
assign 1 to v2:0
assign rdi to v1:2
assign 7 to v1:2
assign r8 to v3:0
assign 8 to v3:0
assign r9 to v4:0
assign 9 to v4:0
assign rax to v0:1
assign 0 to v0:1
spill count : 22
add v120->v26
add v122->v26
add v119->v122
add v114->v122
add v121->v122
add v72->v114
add v120->v27
add v118->v27
add v119->v118
add v112->v118
add v117->v118
add v106->v112
add v70->v114
add v109->v112
add v97->v96
add v95->v96
add v80->v95
add v92->v94
add v93->v92
add v1->v92
add v90->v1
add v91->v90
add v88->v90
add v18->v13
add v14->v16
add v12->v10
add v9->v10
add v8->v6
add v7->v6
add v2->v1
gap () () 
          [stack:-3|t] = ArchNop
gap (v27(-) = [stack:-3|t];) () 
          [stack:-1|t] = ArchNop
gap (v25(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v26(-) = [stack:-2|t];) () 
          [rsi|R|t] = ArchNop
gap (v28(-) = [rsi|R|t];) () 
          [constant:110] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:126] [immediate:127]
gap () () 
          [constant:126] = ArchNop
gap () () 
          [constant:125] = ArchNop
gap () () 
          v124(R) = ArchStackCheckOffset
gap () () 
          X64Push v124(-)
gap () ([rbx|R|w64] = v125(-); [rax|R|w64] = v110(-); [rsi|R|t] = v126(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:124] #-1 #21 [immediate:125] v25(S) v26(S) v27(S) v28(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:123]
gap () () 
          ArchJmp [immediate:122]
gap () () 
          [constant:40] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v26 #1 #20 [immediate:121] v25(-) v26(-) v27(-) v28(S)
gap () () 
          [constant:120] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v26(R) [immediate:119] v120(R) #19 [immediate:120] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v122(R) = X64MovqDecompressTaggedPointer : MRI v26(R) [immediate:118]
gap () () 
          [constant:119] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v122(R) [immediate:116] v119(R) #18 [immediate:117] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v114(R) = X64MovqDecompressTaggedPointer : MRI v122(R) [immediate:115]
gap () () 
          v121(R) = X64MovqDecompressTaggedSigned : MRI v122(R) [immediate:114]
gap () (v115(R) = v121(-);) 
          v115(1) = X64Sar32 v115(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #0 #17 [immediate:113] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v72(R) = X64Movsd : MRI v114(R) [immediate:112]
gap () () 
          X64Test32 && deoptimize if equal v27 #1 #16 [immediate:111] v25(-) v26(-) v27(-) v28(S)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v27(R) [immediate:109] v120(R) #15 [immediate:110] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v118(R) = X64MovqDecompressTaggedPointer : MRI v27(R) [immediate:108]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v118(R) [immediate:106] v119(R) #14 [immediate:107] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v112(R) = X64MovqDecompressTaggedPointer : MRI v118(R) [immediate:105]
gap () () 
          v117(R) = X64MovqDecompressTaggedSigned : MRI v118(R) [immediate:104]
gap () (v113(R) = v117(-);) 
          v113(1) = X64Sar32 v113(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #0 #13 [immediate:103] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v106(R) = X64Movsd : MRI v112(R) [immediate:102]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v106(R) v72 [immediate:100] [immediate:101]
gap () () 
          [constant:116] = ArchNop
gap () (v99 = v116(-);) 
          ArchJmp [immediate:99]
gap () (v99 = v110(-);) 
          ArchJmp [immediate:98]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #1 #12 [immediate:97] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v70(R) = X64Movsd : MRI v114(R) [immediate:96]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #1 #11 [immediate:95] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v109(R) = X64Movsd : MRI v112(R) [immediate:94]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v109(R) v70 [immediate:92] [immediate:93]
gap () () 
          [constant:111] = ArchNop
gap () (v98 = v111(-);) 
          ArchJmp [immediate:91]
gap () (v98 = v110(-);) 
          ArchJmp [immediate:90]
gap () () 
          [constant:86] = ArchNop
gap () () 
          v108(R) = AVXFloat64Sub v109(R) v70
gap () () 
          v100(R) = AVXFloat64Abs v108
gap () () 
          v105(R) = AVXFloat64Sub v106(R) v72
gap () () 
          v101(R) = AVXFloat64Abs v105
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v101(R) v100 [immediate:88] [immediate:89]
gap () () 
          v103(R) = AVXFloat64Mul v100(R) v86
gap () (v34 = v98(-); v32 = v40(-); v33 = v40(-); v31 = v99(-); v37 = v101(-); v76 = v103(-); v35 = v100(-);) 
          ArchJmp [immediate:87]
gap () () 
          v102(R) = AVXFloat64Mul v101(R) v86
gap () (v34 = v40(-); v32 = v98(-); v33 = v99(-); v31 = v40(-); v37 = v100(-); v76 = v102(-); v35 = v101(-);) 
          ArchJmp [immediate:86]
gap () () 
          [constant:96] = ArchNop
gap () () 
          [constant:97] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v96(R) [immediate:84] v97(R) #10 [immediate:85] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v95(R) = X64MovqDecompressTaggedPointer : MRI v96(R) [immediate:83]
gap () () 
          v80(R) = X64Movl : MRI v95(R) [immediate:82]
gap () () 
          [constant:94] = ArchNop
gap () () 
          v92(R) = X64MovqDecompressAnyTagged : MRI v94(R) [immediate:81]
gap () () 
          X64Test32 && deoptimize if equal v92 #1 #9 [immediate:80] v25(-) v26(-) v27(-) v28(S)
gap () () 
          [constant:93] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v92(R) [immediate:78] v93(R) #8 [immediate:79] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v1(R) = X64MovqDecompressTaggedPointer : MRI v92(R) [immediate:77]
gap () () 
          v90(R) = X64MovqDecompressAnyTagged : MRI v1(R) [immediate:76]
gap () (v67(R) = v90(-);) 
          v67(1) = X64Sar32 v67(R) #1
gap () () 
          v78(R) = X64Test32 && set if equal v90 #1
gap () () 
          X64Cmp32 && branch if not equal v78 #0 [immediate:74] [immediate:75]
gap () () 
          v91(R) = X64MovqDecompressTaggedPointer : MRI v90(R) [immediate:73]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v91(R) [immediate:71] [immediate:72]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v91(R) [immediate:69] #67 #7 [immediate:70] v25(-) v26(-) v27(-) v28(S)
gap () () 
          ArchJmp [immediate:68]
gap () () 
          ArchJmp [immediate:67]
gap () () 
          v88(R) = X64Movsd : MRI v90(R) [immediate:66]
gap () (v87 = v88(-);) 
          ArchJmp [immediate:65]
gap () () 
          v89(R) = SSEInt32ToFloat64 v67
gap () (v87 = v89(-);) 
          ArchJmp [immediate:64]
gap () () 
          v84(R) = AVXFloat64Add v87(R) v35
gap () () 
          v81(R) = SSEFloat64Round v84(R)
gap () () 
          v85(R) = AVXFloat64Sub v81(R) v86
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v84(R) v85 [immediate:62] [immediate:63]
gap () () 
          [constant:83] = ArchNop
gap () () 
          v82(R) = AVXFloat64Sub v81(R) v83
gap () (v7 = v82(-);) 
          ArchJmp [immediate:61]
gap () (v7 = v81(-);) 
          ArchJmp [immediate:60]
gap () () 
          v22(R) = SSEFloat64ToInt32 v7
gap () () 
          [constant:79] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v79(R) v80 #6 [immediate:59] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v77(R) = SSEInt32ToFloat64 v22
gap () () 
          X64Cmp32 && deoptimize if equal v78 #0 #5 [immediate:58] v25(-) v26(-) v27(-) v28(S)
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v77(R) v7 #4 [immediate:57] v25(-) v26(-) v27(-) v28(S)
gap () () 
          X64Cmp32 && branch if signed less than v67(R) v22 [immediate:55] [immediate:56]
gap () () 
          ArchJmp [immediate:54]
gap () () 
          v68(R) = AVXFloat64Add v76(R) v37
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v68(R) v35 [immediate:52] [immediate:53]
gap () (v58 = v68(-); v66 = v70(-); v65 = v72(-);) 
          ArchJmp [immediate:51]
gap () () 
          v75(R) = SSEInt32ToFloat64 v32
gap () () 
          v74(R) = SSEInt32ToFloat64 v31
gap () () 
          v69(R) = AVXFloat64Sub v68(R) v35
gap () () 
          v71(R) = AVXFloat64Add v75(R) v70
gap () () 
          v73(R) = AVXFloat64Add v74(R) v72
gap () (v58 = v69(-); v66 = v71(-); v65 = v73(-);) 
          ArchJmp [immediate:50]
gap () () 
          v45(R) = SSEInt32ToFloat64 v34
gap () () 
          v43(R) = SSEInt32ToFloat64 v33
gap () (v64(R) = v67(-);) 
          v64(1) = X64Add32 && deoptimize if overflow v64(R) #1 #3 [immediate:49] v25(-) v26(-) v27(-) v28(S)
gap () () 
          v57(R) = AVXFloat64Add v66(R) v45
gap () () 
          v59(R) = AVXFloat64Add v65(R) v43
gap () (v60 = v64(-);) 
          v60(1) = ArchNop v60
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:47] [immediate:48]
gap () () 
          [constant:63] = ArchNop
gap () () 
          [constant:62] = ArchNop
gap () ([rbx|R|w64] = v62(-); [rax|R|w64] = v40(-); [rsi|R|t] = v63(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:45] #-1 #2 [immediate:46] v25(S) v26(S) v27(S) v28(S) v59(S) v57(S) v31(S) v32(S) v33(S) v34(S) v35(S) v58(S) v37(S) v7(S) v60(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:44]
gap () () 
          ArchJmp [immediate:43]
gap () (v49 = v57(-); v50 = v58(-); v48 = v59(-); v47 = v60(-);) 
          ArchJmp [immediate:42]
gap () () 
          X64Cmp32 && branch if signed less than v47(R) v22 [immediate:40] [immediate:41]
gap () () 
          v52(R) = AVXFloat64Add v50(R) v37
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v52(R) v35 [immediate:38] [immediate:39]
gap () (v46 = v49(-); v36 = v52(-); v44 = v48(-);) 
          ArchJmp [immediate:37]
gap () () 
          v56(R) = SSEInt32ToFloat64 v32
gap () () 
          v51(R) = AVXFloat64Add v56(R) v49
gap () () 
          v53(R) = AVXFloat64Sub v52(R) v35
gap () () 
          v55(R) = SSEInt32ToFloat64 v31
gap () () 
          v54(R) = AVXFloat64Add v55(R) v48
gap () (v46 = v51(-); v36 = v53(-); v44 = v54(-);) 
          ArchJmp [immediate:36]
gap () (v42(R) = v47(-);) 
          v42(1) = X64Add32 && deoptimize if overflow v42(R) #1 #1 [immediate:35] v25(-) v26(-) v27(-) v28(S) v48(-) v49(-) v31(-) v32(-) v33(-) v34(-) v35(-) v50(-) v37(-) v7(-) v47(-) v7(-)
gap () () 
          v30(R) = AVXFloat64Add v45(R) v46
gap () () 
          v29(R) = AVXFloat64Add v43(R) v44
gap () (v38 = v42(-);) 
          v38(1) = ArchNop v38
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:33] [immediate:34]
gap () () 
          [constant:41] = ArchNop
gap () () 
          [constant:39] = ArchNop
gap () ([rbx|R|w64] = v39(-); [rax|R|w64] = v40(-); [rsi|R|t] = v41(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:31] #-1 #0 [immediate:32] v25(S) v26(S) v27(S) v28(S) v29(S) v30(S) v31(S) v32(S) v33(S) v34(S) v35(S) v36(S) v37(S) v7(S) v38(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:30]
gap () () 
          ArchJmp [immediate:29]
gap () (v49 = v30(-); v50 = v36(-); v48 = v29(-); v47 = v38(-);) 
          ArchJmp [immediate:28]
gap () () 
          ArchJmp [immediate:27]
gap () () 
          X64Cmp32 && branch if equal v22 #0 [immediate:25] [immediate:26]
gap () () 
          ArchJmp [immediate:24]
gap () () 
          v23(R) = SSEFloat64ExtractHighWord32 v7
gap () () 
          X64Cmp32 && branch if signed less than v23 #0 [immediate:22] [immediate:23]
gap () () 
          ArchJmp [immediate:21]
gap () (v21(R) = v22(-);) 
          v21(1) = X64Add32 && branch if overflow v21(R) v22(R) [immediate:17] [immediate:18] [immediate:19] [immediate:20]
gap () (v20 = v21(-);) 
          v20(1) = ArchNop v20
gap () (v2 = v20(-);) 
          ArchJmp [immediate:16]
gap () () 
          ArchJmp [immediate:15]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          [constant:17] = ArchNop
gap () () 
          [constant:11] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () () 
          v13(R) = X64Movq : MR v11(R)
gap () () 
          [constant:19] = ArchNop
gap () () 
          v18(R) = X64Lea : MRI v13(R) [immediate:13]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v19(R) v18(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () ([rdx|R|w64] = v17(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:9] #-1 [rdx|R|w64]
gap (v16(-) = [rax|R|tp];) () 
          v14(R) = X64Lea : MRI v16(R) [immediate:8]
gap () (v10 = v14(-);) 
          ArchJmp [immediate:7]
gap () (v10 = v13(-);) 
          ArchJmp [immediate:6]
gap () () 
          v12(R) = X64Lea : MRI v10(R) [immediate:5]
gap () () 
          X64Movq : MR v11(R) v12(R)
gap () () 
          v9(R) = X64Lea : MRI v10(R) [immediate:4]
gap () (v6 = v9(-);) 
          v6(1) = ArchNop v6
gap () () 
          X64MovqCompressTagged : MRI v6(R) [immediate:3] v8(R)
gap () () 
          X64Movsd : MRI v6(R) [immediate:2] v7(R)
gap () (v2 = v6(-);) 
          ArchJmp [immediate:1]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1(R) [immediate:0] v2(R)
gap () () 
          [constant:0] = ArchNop
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
print modrm pairs
1, v2, v1
1, v8, v6
1, v9, v10
1, v1, v92
1, v88, v90
1, v91, v90
1, v12, v10
1, v70, v114
1, v92, v94
1, v18, v13
1, v97, v96
1, v93, v92
1, v109, v112
1, v106, v112
1, v95, v96
1, v112, v118
1, v72, v114
1, v117, v118
1, v118, v27
1, v7, v6
1, v90, v1
1, v121, v122
1, v114, v122
1, v120, v27
1, v120, v26
1, v14, v16
1, v80, v95
1, v119, v118
1, v119, v122
1, v122, v26
assign xmm0 to v72:0
assign 0 to v72:0
assign xmm1 to v106:0
assign 1 to v106:0
assign xmm2 to v70:0
assign 2 to v70:0
assign xmm4 to v109:0
assign 4 to v109:0
assign xmm3 to v108:0
assign 3 to v108:0
assign xmm4 to v100:0
assign 4 to v100:0
assign xmm5 to v107:0
assign 5 to v107:0
assign xmm1 to v105:0
assign 1 to v105:0
assign xmm3 to v101:0
assign 3 to v101:0
assign xmm5 to v104:0
assign 5 to v104:0
assign xmm1 to v86:1
assign 1 to v86:1
assign xmm5 to v103:0
assign 5 to v103:0
assign xmm1 to v86:2
assign 1 to v86:2
assign xmm5 to v102:0
assign 5 to v102:0
assign xmm3 to v35:0
assign 3 to v35:0
assign xmm4 to v37:0
assign 4 to v37:0
assign xmm5 to v76:0
assign 5 to v76:0
assign xmm6 to v88:0
assign 6 to v88:0
assign xmm6 to v89:0
assign 6 to v89:0
assign xmm6 to v87:0
assign 6 to v87:0
assign xmm6 to v84:0
assign 6 to v84:0
assign xmm7 to v81:0
assign 7 to v81:0
assign xmm1 to v85:0
assign 1 to v85:0
assign xmm1 to v83:1
assign 1 to v83:1
assign xmm7 to v82:0
assign 7 to v82:0
assign xmm7 to v7:0
assign 7 to v7:0
assign xmm1 to v77:0
assign 1 to v77:0
assign xmm1 to v68:0
assign 1 to v68:0
assign xmm5 to v75:0
assign 5 to v75:0
assign xmm6 to v74:0
assign 6 to v74:0
assign xmm1 to v69:0
assign 1 to v69:0
assign xmm2 to v71:0
assign 2 to v71:0
assign xmm0 to v73:0
assign 0 to v73:0
assign xmm1 to v58:0
assign 1 to v58:0
assign xmm0 to v65:0
assign 0 to v65:0
assign xmm2 to v66:0
assign 2 to v66:0
assign xmm5 to v45:0
assign 5 to v45:0
assign xmm6 to v43:0
assign 6 to v43:0
assign xmm2 to v57:0
assign 2 to v57:0
assign xmm0 to v59:0
assign 0 to v59:0
blocking v45 pick register xmm5
blocking v43 pick register xmm6
blocking v7 pick register xmm7
assign xmm0 to v59:2
assign 0 to v59:2
assign xmm2 to v57:2
assign 2 to v57:2
assign xmm6 to v43:3
assign 6 to v43:3
assign xmm5 to v45:3
assign 5 to v45:3
assign xmm1 to v58:2
assign 1 to v58:2
assign xmm4 to v37:2
assign 4 to v37:2
assign xmm3 to v35:2
assign 3 to v35:2
assign xmm7 to v7:3
assign 7 to v7:3
assign xmm5 to v45:2
assign 5 to v45:2
assign xmm6 to v43:2
assign 6 to v43:2
assign xmm0 to v48:0
assign 0 to v48:0
assign xmm2 to v49:0
assign 2 to v49:0
assign xmm1 to v50:0
assign 1 to v50:0
assign xmm8 to v52:0
assign 8 to v52:0
assign xmm9 to v56:0
assign 9 to v56:0
assign xmm9 to v51:0
assign 9 to v51:0
assign xmm8 to v53:0
assign 8 to v53:0
assign xmm10 to v55:0
assign 10 to v55:0
assign xmm10 to v54:0
assign 10 to v54:0
assign xmm8 to v36:0
assign 8 to v36:0
assign xmm9 to v44:0
assign 9 to v44:0
assign xmm10 to v46:0
assign 10 to v46:0
assign xmm2 to v30:0
assign 2 to v30:0
assign xmm0 to v29:0
assign 0 to v29:0
assign xmm0 to v29:2
assign 0 to v29:2
assign xmm2 to v30:2
assign 2 to v30:2
assign xmm8 to v36:2
assign 8 to v36:2
assign xmm6 to v43:5
assign 6 to v43:5
assign xmm5 to v45:5
assign 5 to v45:5
assign xmm7 to v7:5
assign 7 to v7:5
assign xmm3 to v35:4
assign 3 to v35:4
assign xmm4 to v37:4
assign 4 to v37:4
assign xmm7 to v7:7
assign 7 to v7:7
assign xmm7 to v7:2
assign 7 to v7:2
spill count : 17
--- Raw source ---
(From, To) {
      var x1 = From.V[0];
      var x2 = To.V[0];
      var y1 = From.V[1];
      var y2 = To.V[1];
      var dx = Math.abs(x2 - x1);
      var dy = Math.abs(y2 - y1);
      var x = x1;
      var y = y1;
      var IncX1, IncY1;
      var IncX2, IncY2;  
      var Den;
      var Num;
      var NumAdd;
      var NumPix;

      if (x2 >= x1) {  IncX1 = 1; IncX2 = 1;  }
      else { IncX1 = -1; IncX2 = -1; }
      if (y2 >= y1)  {  IncY1 = 1; IncY2 = 1; }
      else { IncY1 = -1; IncY2 = -1; }
      if (dx >= dy) {
        IncX1 = 0;
        IncY2 = 0;
        Den = dx;
        Num = dx / 2;
        NumAdd = dy;
        NumPix = dx;
      }
      else {
        IncX2 = 0;
        IncY1 = 0;
        Den = dy;
        Num = dy / 2;
        NumAdd = dx;
        NumPix = dy;
      }

      NumPix = Math.round(Q.LastPx + NumPix);

      var i = Q.LastPx;
      for (; i < NumPix; i++) {
        Num += NumAdd;
        if (Num >= Den) {
          Num -= Den;
          x += IncX1;
          y += IncY1;
        }
        x += IncX2;
        y += IncY2;
      }
      Q.LastPx = NumPix;
    }


--- Optimized code ---
optimization_id = 0
source_position = 647
kind = TURBOFAN
name = DrawLine
stack_slots = 21
compiler = turbofan
address = 0x19db00084001

Instructions (size = 1844)
0x19db00084040     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db00084047     7  483bd9         REX.W cmpq rbx,rcx
0x19db0008404a     a  7418           jz 0x19db00084064  <+0x24>
0x19db0008404c     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db00084056    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db00084060    20  41ffd2         call r10
0x19db00084063    23  cc             int3l
0x19db00084064    24  8b59d0         movl rbx,[rcx-0x30]
0x19db00084067    27  4903dd         REX.W addq rbx,r13
0x19db0008406a    2a  f6430701       testb [rbx+0x7],0x1
0x19db0008406e    2e  740d           jz 0x19db0008407d  <+0x3d>
0x19db00084070    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db0008407a    3a  41ffe2         jmp r10
0x19db0008407d    3d  55             push rbp
0x19db0008407e    3e  4889e5         REX.W movq rbp,rsp
0x19db00084081    41  56             push rsi
0x19db00084082    42  57             push rdi
0x19db00084083    43  50             push rax
0x19db00084084    44  4881ec80000000 REX.W subq rsp,0x80
0x19db0008408b    4b  488975c8       REX.W movq [rbp-0x38],rsi
0x19db0008408f    4f  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00084093    53  0f86aa030000   jna 0x19db00084443  <+0x403>
0x19db00084099    59  488b4d18       REX.W movq rcx,[rbp+0x18]
0x19db0008409d    5d  f6c101         testb rcx,0x1
0x19db000840a0    60  0f8433060000   jz 0x19db000846d9  <+0x699>
0x19db000840a6    66  bfa5db3008     movl rdi,0x830dba5      ;; (compressed) object: 0x19db0830dba5 <Map(HOLEY_ELEMENTS)>
0x19db000840ab    6b  3979ff         cmpl [rcx-0x1],rdi
0x19db000840ae    6e  0f852c060000   jnz 0x19db000846e0  <+0x6a0>
0x19db000840b4    74  448b410b       movl r8,[rcx+0xb]
0x19db000840b8    78  4d03c5         REX.W addq r8,r13
0x19db000840bb    7b  41b9559f3008   movl r9,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000840c1    81  453948ff       cmpl [r8-0x1],r9
0x19db000840c5    85  0f851c060000   jnz 0x19db000846e7  <+0x6a7>
0x19db000840cb    8b  458b6007       movl r12,[r8+0x7]
0x19db000840cf    8f  4d03e5         REX.W addq r12,r13
0x19db000840d2    92  458b400b       movl r8,[r8+0xb]
0x19db000840d6    96  41d1f8         sarl r8, 1
0x19db000840d9    99  4183f800       cmpl r8,0x0
0x19db000840dd    9d  0f860b060000   jna 0x19db000846ee  <+0x6ae>
0x19db000840e3    a3  c4c17b10442407 vmovsd xmm0,[r12+0x7]
0x19db000840ea    aa  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db000840ee    ae  41f6c301       testb r11,0x1
0x19db000840f2    b2  0f84fd050000   jz 0x19db000846f5  <+0x6b5>
0x19db000840f8    b8  41397bff       cmpl [r11-0x1],rdi
0x19db000840fc    bc  0f85fa050000   jnz 0x19db000846fc  <+0x6bc>
0x19db00084102    c2  418b7b0b       movl rdi,[r11+0xb]
0x19db00084106    c6  4903fd         REX.W addq rdi,r13
0x19db00084109    c9  44394fff       cmpl [rdi-0x1],r9
0x19db0008410d    cd  0f85f0050000   jnz 0x19db00084703  <+0x6c3>
0x19db00084113    d3  448b4f07       movl r9,[rdi+0x7]
0x19db00084117    d7  4d03cd         REX.W addq r9,r13
0x19db0008411a    da  8b7f0b         movl rdi,[rdi+0xb]
0x19db0008411d    dd  d1ff           sarl rdi, 1
0x19db0008411f    df  83ff00         cmpl rdi,0x0
0x19db00084122    e2  0f86e2050000   jna 0x19db0008470a  <+0x6ca>
0x19db00084128    e8  c4c17b104907   vmovsd xmm1,[r9+0x7]
0x19db0008412e    ee  c5f92ec8       vucomisd xmm1,xmm0
0x19db00084132    f2  0f830b000000   jnc 0x19db00084143  <+0x103>
0x19db00084138    f8  41beffffffff   movl r14,0xffffffff
0x19db0008413e    fe  e906000000     jmp 0x19db00084149  <+0x109>
0x19db00084143   103  41be01000000   movl r14,0x1
0x19db00084149   109  4183f801       cmpl r8,0x1
0x19db0008414d   10d  0f86be050000   jna 0x19db00084711  <+0x6d1>
0x19db00084153   113  c4c17b1054240f vmovsd xmm2,[r12+0xf]
0x19db0008415a   11a  83ff01         cmpl rdi,0x1
0x19db0008415d   11d  0f86b5050000   jna 0x19db00084718  <+0x6d8>
0x19db00084163   123  c4c17b10610f   vmovsd xmm4,[r9+0xf]
0x19db00084169   129  c5f92ee2       vucomisd xmm4,xmm2
0x19db0008416d   12d  0f830a000000   jnc 0x19db0008417d  <+0x13d>
0x19db00084173   133  b8ffffffff     movl rax,0xffffffff
0x19db00084178   138  e905000000     jmp 0x19db00084182  <+0x142>
0x19db0008417d   13d  b801000000     movl rax,0x1
0x19db00084182   142  c5db5cda       vsubsd xmm3,xmm4,xmm2
0x19db00084186   146  c5d176ed       vpcmpeqd xmm5,xmm5,xmm5
0x19db0008418a   14a  c5d173d501     vpsrlq xmm5,xmm5,1
0x19db0008418f   14f  c5d154e3       vandpd xmm4,xmm5,xmm3
0x19db00084193   153  c5f35cc8       vsubsd xmm1,xmm1,xmm0
0x19db00084197   157  c5d176ed       vpcmpeqd xmm5,xmm5,xmm5
0x19db0008419b   15b  c5d173d501     vpsrlq xmm5,xmm5,1
0x19db000841a0   160  c5d154d9       vandpd xmm3,xmm5,xmm1
0x19db000841a4   164  c5f92edc       vucomisd xmm3,xmm4
0x19db000841a8   168  0f832f000000   jnc 0x19db000841dd  <+0x19d>
0x19db000841ae   16e  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db000841b2   172  c5f173f137     vpsllq xmm1,xmm1,55
0x19db000841b7   177  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db000841bc   17c  c5db59e9       vmulsd xmm5,xmm4,xmm1
0x19db000841c0   180  c57928fb       vmovapd xmm15,xmm3
0x19db000841c4   184  c5f928dc       vmovapd xmm3,xmm4
0x19db000841c8   188  c4c17928e7     vmovapd xmm4,xmm15
0x19db000841cd   18d  4c8bc8         REX.W movq r9,rax
0x19db000841d0   190  33c0           xorl rax,rax
0x19db000841d2   192  4d8bc6         REX.W movq r8,r14
0x19db000841d5   195  4c8bf0         REX.W movq r14,rax
0x19db000841d8   198  e918000000     jmp 0x19db000841f5  <+0x1b5>
0x19db000841dd   19d  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db000841e1   1a1  c5f173f137     vpsllq xmm1,xmm1,55
0x19db000841e6   1a6  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db000841eb   1ab  c5e359e9       vmulsd xmm5,xmm3,xmm1
0x19db000841ef   1af  4533c0         xorl r8,r8
0x19db000841f2   1b2  4d8bc8         REX.W movq r9,r8
0x19db000841f5   1b5  ba39692e08     movl rdx,0x82e6939      ;; (compressed) object: 0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)>
0x19db000841fa   1ba  49bc09652e08db190000 REX.W movq r12,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db00084204   1c4  413954240b     cmpl [r12+0xb],rdx
0x19db00084209   1c9  0f8510050000   jnz 0x19db0008471f  <+0x6df>
0x19db0008420f   1cf  458b642403     movl r12,[r12+0x3]
0x19db00084214   1d4  4d03e5         REX.W addq r12,r13
0x19db00084217   1d7  458b642463     movl r12,[r12+0x63]
0x19db0008421c   1dc  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db00084226   1e6  4d39e2         REX.W cmpq r10,r12
0x19db00084229   1e9  7715           ja 0x19db00084240  <+0x200>
0x19db0008422b   1eb  48ba0200000000000000 REX.W movq rdx,0x2
0x19db00084235   1f5  4c8b151cfeffff REX.W movq r10,[rip+0xfffffe1c]
0x19db0008423c   1fc  41ffd2         call r10
0x19db0008423f   1ff  cc             int3l
0x19db00084240   200  49bf8d353408db190000 REX.W movq r15,0x19db0834358d    ;; object: 0x19db0834358d <FunctionContext[22]>
0x19db0008424a   20a  458b7f0f       movl r15,[r15+0xf]
0x19db0008424e   20e  4d03fd         REX.W addq r15,r13
0x19db00084251   211  41f6c701       testb r15,0x1
0x19db00084255   215  0f84cb040000   jz 0x19db00084726  <+0x6e6>
0x19db0008425b   21b  ba6ddc3008     movl rdx,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00084260   220  413957ff       cmpl [r15-0x1],rdx
0x19db00084264   224  0f85c3040000   jnz 0x19db0008472d  <+0x6ed>
0x19db0008426a   22a  458b7f03       movl r15,[r15+0x3]
0x19db0008426e   22e  4d03fd         REX.W addq r15,r13
0x19db00084271   231  418b5717       movl rdx,[r15+0x17]
0x19db00084275   235  4903d5         REX.W addq rdx,r13
0x19db00084278   238  488bda         REX.W movq rbx,rdx
0x19db0008427b   23b  d1fb           sarl rbx, 1
0x19db0008427d   23d  f6c201         testb rdx,0x1
0x19db00084280   240  400f94c6       setzl sil
0x19db00084284   244  400fb6f6       movzxbl rsi,rsi
0x19db00084288   248  33ff           xorl rdi,rdi
0x19db0008428a   24a  4c897de0       REX.W movq [rbp-0x20],r15
0x19db0008428e   24e  83fe00         cmpl rsi,0x0
0x19db00084291   251  0f852e000000   jnz 0x19db000842c5  <+0x285>
0x19db00084297   257  448b7aff       movl r15,[rdx-0x1]
0x19db0008429b   25b  4d03fd         REX.W addq r15,r13
0x19db0008429e   25e  4539bd30010000 cmpl [r13+0x130] (root (heap_number_map)),r15
0x19db000842a5   265  0f840c000000   jz 0x19db000842b7  <+0x277>
0x19db000842ab   26b  6641837f0743   cmpw [r15+0x7],0x43
0x19db000842b1   271  0f857d040000   jnz 0x19db00084734  <+0x6f4>
0x19db000842b7   277  c5fb107203     vmovsd xmm6,[rdx+0x3]
0x19db000842bc   27c  4c8b7de0       REX.W movq r15,[rbp-0x20]
0x19db000842c0   280  e904000000     jmp 0x19db000842c9  <+0x289>
0x19db000842c5   285  c5832af3       vcvtlsi2sd xmm6,xmm15,rbx
0x19db000842c9   289  c5cb58f3       vaddsd xmm6,xmm6,xmm3
0x19db000842cd   28d  c4e3410bfe0a   vroundsd xmm7,xmm7,xmm6,0xa
0x19db000842d3   293  c5c35cc9       vsubsd xmm1,xmm7,xmm1
0x19db000842d7   297  c5f92ef1       vucomisd xmm6,xmm1
0x19db000842db   29b  0f8312000000   jnc 0x19db000842f3  <+0x2b3>
0x19db000842e1   2a1  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db000842e5   2a5  c5f173f136     vpsllq xmm1,xmm1,54
0x19db000842ea   2aa  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db000842ef   2af  c5c35cf9       vsubsd xmm7,xmm7,xmm1
0x19db000842f3   2b3  c5fb2cd7       vcvttsd2si rdx,xmm7
0x19db000842f7   2b7  41bf59682e08   movl r15,0x82e6859      ;; (compressed) object: 0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)>
0x19db000842fd   2bd  4539e7         cmpl r15,r12
0x19db00084300   2c0  0f8535040000   jnz 0x19db0008473b  <+0x6fb>
0x19db00084306   2c6  c5832aca       vcvtlsi2sd xmm1,xmm15,rdx
0x19db0008430a   2ca  83fe00         cmpl rsi,0x0
0x19db0008430d   2cd  0f842f040000   jz 0x19db00084742  <+0x702>
0x19db00084313   2d3  c5f92ecf       vucomisd xmm1,xmm7
0x19db00084317   2d7  0f8a2c040000   jpe 0x19db00084749  <+0x709>
0x19db0008431d   2dd  0f8526040000   jnz 0x19db00084749  <+0x709>
0x19db00084323   2e3  3bda           cmpl rbx,rdx
0x19db00084325   2e5  0f8dc6000000   jge 0x19db000843f1  <+0x3b1>
0x19db0008432b   2eb  c5d358cc       vaddsd xmm1,xmm5,xmm4
0x19db0008432f   2ef  c5f92ecb       vucomisd xmm1,xmm3
0x19db00084333   2f3  0f8215000000   jc 0x19db0008434e  <+0x30e>
0x19db00084339   2f9  c5832ae8       vcvtlsi2sd xmm5,xmm15,rax
0x19db0008433d   2fd  c4c1032af0     vcvtlsi2sd xmm6,xmm15,r8
0x19db00084342   302  c5f35ccb       vsubsd xmm1,xmm1,xmm3
0x19db00084346   306  c5d358d2       vaddsd xmm2,xmm5,xmm2
0x19db0008434a   30a  c5cb58c0       vaddsd xmm0,xmm6,xmm0
0x19db0008434e   30e  c4c1032ae9     vcvtlsi2sd xmm5,xmm15,r9
0x19db00084353   313  c4c1032af6     vcvtlsi2sd xmm6,xmm15,r14
0x19db00084358   318  83c301         addl rbx,0x1
0x19db0008435b   31b  0f80ef030000   jo 0x19db00084750  <+0x710>
0x19db00084361   321  c5eb58d5       vaddsd xmm2,xmm2,xmm5
0x19db00084365   325  c5fb58c6       vaddsd xmm0,xmm0,xmm6
0x19db00084369   329  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008436d   32d  0f8715000000   ja 0x19db00084388  <+0x348>
0x19db00084373   333  e904010000     jmp 0x19db0008447c  <+0x43c>
0x19db00084378   338  0f1f840000000000 nop
0x19db00084380   340  4c89e3         REX.W movq rbx,r12
0x19db00084383   343  c4c17928c8     vmovapd xmm1,xmm8
0x19db00084388   348  3bda           cmpl rbx,rdx
0x19db0008438a   34a  0f8d61000000   jge 0x19db000843f1  <+0x3b1>
0x19db00084390   350  c57358c4       vaddsd xmm8,xmm1,xmm4
0x19db00084394   354  c5792ec3       vucomisd xmm8,xmm3
0x19db00084398   358  0f830d000000   jnc 0x19db000843ab  <+0x36b>
0x19db0008439e   35e  c57928d2       vmovapd xmm10,xmm2
0x19db000843a2   362  c57928c8       vmovapd xmm9,xmm0
0x19db000843a6   366  e924000000     jmp 0x19db000843cf  <+0x38f>
0x19db000843ab   36b  c5032ac8       vcvtlsi2sd xmm9,xmm15,rax
0x19db000843af   36f  c53358ca       vaddsd xmm9,xmm9,xmm2
0x19db000843b3   373  c53b5cc3       vsubsd xmm8,xmm8,xmm3
0x19db000843b7   377  c441032ad0     vcvtlsi2sd xmm10,xmm15,r8
0x19db000843bc   37c  c52b58d0       vaddsd xmm10,xmm10,xmm0
0x19db000843c0   380  c4417928fa     vmovapd xmm15,xmm10
0x19db000843c5   385  c4417928d1     vmovapd xmm10,xmm9
0x19db000843ca   38a  c4417928cf     vmovapd xmm9,xmm15
0x19db000843cf   38f  4c8be3         REX.W movq r12,rbx
0x19db000843d2   392  4183c401       addl r12,0x1
0x19db000843d6   396  0f807b030000   jo 0x19db00084757  <+0x717>
0x19db000843dc   39c  c4c15358d2     vaddsd xmm2,xmm5,xmm10
0x19db000843e1   3a1  c4c14b58c1     vaddsd xmm0,xmm6,xmm9
0x19db000843e6   3a6  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db000843ea   3aa  7794           ja 0x19db00084380  <+0x340>
0x19db000843ec   3ac  e953010000     jmp 0x19db00084544  <+0x504>
0x19db000843f1   3b1  83fa00         cmpl rdx,0x0
0x19db000843f4   3b4  0f840c020000   jz 0x19db00084606  <+0x5c6>
0x19db000843fa   3ba  488bca         REX.W movq rcx,rdx
0x19db000843fd   3bd  03ca           addl rcx,rdx
0x19db000843ff   3bf  0f801a020000   jo 0x19db0008461f  <+0x5df>
0x19db00084405   3c5  488b7de0       REX.W movq rdi,[rbp-0x20]
0x19db00084409   3c9  894f17         movl [rdi+0x17],rcx
0x19db0008440c   3cc  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db00084413   3d3  4c23c7         REX.W andq r8,rdi
0x19db00084416   3d6  41f6400804     testb [r8+0x8],0x4
0x19db0008441b   3db  0f8568020000   jnz 0x19db00084689  <+0x649>
0x19db00084421   3e1  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db00084428   3e8  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db0008442c   3ec  488be5         REX.W movq rsp,rbp
0x19db0008442f   3ef  5d             pop rbp
0x19db00084430   3f0  4883f902       REX.W cmpq rcx,0x2
0x19db00084434   3f4  7f03           jg 0x19db00084439  <+0x3f9>
0x19db00084436   3f6  c21800         ret 0x18
0x19db00084439   3f9  415a           pop r10
0x19db0008443b   3fb  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db00084440   400  4152           push r10
0x19db00084442   402  c3             retl
0x19db00084443   403  48b9a000000000000000 REX.W movq rcx,0xa0
0x19db0008444d   40d  51             push rcx
0x19db0008444e   40e  b801000000     movl rax,0x1
0x19db00084453   413  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db0008445d   41d  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00084467   427  488bc8         REX.W movq rcx,rax
0x19db0008446a   42a  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db00084474   434  41ffd2         call r10
0x19db00084477   437  e91dfcffff     jmp 0x19db00084099  <+0x59>
0x19db0008447c   43c  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db00084481   441  488955d0       REX.W movq [rbp-0x30],rdx
0x19db00084485   445  4c8945c0       REX.W movq [rbp-0x40],r8
0x19db00084489   449  488945b8       REX.W movq [rbp-0x48],rax
0x19db0008448d   44d  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db00084491   451  4c894da8       REX.W movq [rbp-0x58],r9
0x19db00084495   455  c5fb115da0     vmovsd [rbp-0x60],xmm3
0x19db0008449a   45a  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db0008449f   45f  c5fb117588     vmovsd [rbp-0x78],xmm6
0x19db000844a4   464  c5fb116d80     vmovsd [rbp-0x80],xmm5
0x19db000844a9   469  c5fb119578ffffff vmovsd [rbp-0x88],xmm2
0x19db000844b1   471  c5fb114d98     vmovsd [rbp-0x68],xmm1
0x19db000844b6   476  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db000844be   47e  48899d68ffffff REX.W movq [rbp-0x98],rbx
0x19db000844c5   485  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000844cf   48f  4c8bfb         REX.W movq r15,rbx
0x19db000844d2   492  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db000844dc   49c  4c8be0         REX.W movq r12,rax
0x19db000844df   49f  488bc7         REX.W movq rax,rdi
0x19db000844e2   4a2  4c8b1583ffffff REX.W movq r10,[rip+0xffffff83]
0x19db000844e9   4a9  41ffd2         call r10
0x19db000844ec   4ac  c5fb107dd8     vmovsd xmm7,[rbp-0x28]
0x19db000844f1   4b1  488b55d0       REX.W movq rdx,[rbp-0x30]
0x19db000844f5   4b5  488b4d18       REX.W movq rcx,[rbp+0x18]
0x19db000844f9   4b9  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db000844fd   4bd  4c8b45c0       REX.W movq r8,[rbp-0x40]
0x19db00084501   4c1  488b45b8       REX.W movq rax,[rbp-0x48]
0x19db00084505   4c5  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db00084509   4c9  4c8b4da8       REX.W movq r9,[rbp-0x58]
0x19db0008450d   4cd  c5fb105da0     vmovsd xmm3,[rbp-0x60]
0x19db00084512   4d2  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db00084517   4d7  33ff           xorl rdi,rdi
0x19db00084519   4d9  c5fb107588     vmovsd xmm6,[rbp-0x78]
0x19db0008451e   4de  c5fb106d80     vmovsd xmm5,[rbp-0x80]
0x19db00084523   4e3  c5fb109578ffffff vmovsd xmm2,[rbp-0x88]
0x19db0008452b   4eb  c5fb104d98     vmovsd xmm1,[rbp-0x68]
0x19db00084530   4f0  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db00084538   4f8  488b9d68ffffff REX.W movq rbx,[rbp-0x98]
0x19db0008453f   4ff  e944feffff     jmp 0x19db00084388  <+0x348>
0x19db00084544   504  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db00084549   509  488955d0       REX.W movq [rbp-0x30],rdx
0x19db0008454d   50d  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db00084555   515  c5fb119578ffffff vmovsd [rbp-0x88],xmm2
0x19db0008455d   51d  4c8945c0       REX.W movq [rbp-0x40],r8
0x19db00084561   521  488945b8       REX.W movq [rbp-0x48],rax
0x19db00084565   525  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db00084569   529  4c894da8       REX.W movq [rbp-0x58],r9
0x19db0008456d   52d  c5fb115da0     vmovsd [rbp-0x60],xmm3
0x19db00084572   532  c57b114598     vmovsd [rbp-0x68],xmm8
0x19db00084577   537  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db0008457c   53c  4c89a568ffffff REX.W movq [rbp-0x98],r12
0x19db00084583   543  c5fb117588     vmovsd [rbp-0x78],xmm6
0x19db00084588   548  c5fb116d80     vmovsd [rbp-0x80],xmm5
0x19db0008458d   54d  488b1d40ffffff REX.W movq rbx,[rip+0xffffff40]
0x19db00084594   554  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008459e   55e  4c8bf8         REX.W movq r15,rax
0x19db000845a1   561  488bc7         REX.W movq rax,rdi
0x19db000845a4   564  4c8b15c1feffff REX.W movq r10,[rip+0xfffffec1]
0x19db000845ab   56b  41ffd2         call r10
0x19db000845ae   56e  c5fb107dd8     vmovsd xmm7,[rbp-0x28]
0x19db000845b3   573  488b55d0       REX.W movq rdx,[rbp-0x30]
0x19db000845b7   577  488b4d18       REX.W movq rcx,[rbp+0x18]
0x19db000845bb   57b  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db000845bf   57f  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db000845c7   587  c5fb109578ffffff vmovsd xmm2,[rbp-0x88]
0x19db000845cf   58f  4c8b45c0       REX.W movq r8,[rbp-0x40]
0x19db000845d3   593  488b45b8       REX.W movq rax,[rbp-0x48]
0x19db000845d7   597  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db000845db   59b  4c8b4da8       REX.W movq r9,[rbp-0x58]
0x19db000845df   59f  c5fb105da0     vmovsd xmm3,[rbp-0x60]
0x19db000845e4   5a4  c57b104598     vmovsd xmm8,[rbp-0x68]
0x19db000845e9   5a9  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db000845ee   5ae  4c8ba568ffffff REX.W movq r12,[rbp-0x98]
0x19db000845f5   5b5  33ff           xorl rdi,rdi
0x19db000845f7   5b7  c5fb107588     vmovsd xmm6,[rbp-0x78]
0x19db000845fc   5bc  c5fb106d80     vmovsd xmm5,[rbp-0x80]
0x19db00084601   5c1  e97afdffff     jmp 0x19db00084380  <+0x340>
0x19db00084606   5c6  c4e37916f901   vpextrd rcx,xmm7,0x1,
0x19db0008460c   5cc  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db00084611   5d1  83f900         cmpl rcx,0x0
0x19db00084614   5d4  0f8c0a000000   jl 0x19db00084624  <+0x5e4>
0x19db0008461a   5da  e9dbfdffff     jmp 0x19db000843fa  <+0x3ba>
0x19db0008461f   5df  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db00084624   5e4  48b9f87d6d5555550000 REX.W movq rcx,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db0008462e   5ee  488b39         REX.W movq rdi,[rcx]
0x19db00084631   5f1  4c8d470c       REX.W leaq r8,[rdi+0xc]
0x19db00084635   5f5  49b9007e6d5555550000 REX.W movq r9,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db0008463f   5ff  4d3901         REX.W cmpq [r9],r8
0x19db00084642   602  0f8716000000   ja 0x19db0008465e  <+0x61e>
0x19db00084648   608  ba0c000000     movl rdx,0xc
0x19db0008464d   60d  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db00084657   617  41ffd2         call r10
0x19db0008465a   61a  488d78ff       REX.W leaq rdi,[rax-0x1]
0x19db0008465e   61e  488d4f0c       REX.W leaq rcx,[rdi+0xc]
0x19db00084662   622  4c8b05bdffffff REX.W movq r8,[rip+0xffffffbd]
0x19db00084669   629  498908         REX.W movq [r8],rcx
0x19db0008466c   62c  488d4f01       REX.W leaq rcx,[rdi+0x1]
0x19db00084670   630  498bbd30010000 REX.W movq rdi,[r13+0x130] (root (heap_number_map))
0x19db00084677   637  8979ff         movl [rcx-0x1],rdi
0x19db0008467a   63a  c5fb107dd8     vmovsd xmm7,[rbp-0x28]
0x19db0008467f   63f  c5fb117903     vmovsd [rcx+0x3],xmm7
0x19db00084684   644  e97cfdffff     jmp 0x19db00084405  <+0x3c5>
0x19db00084689   649  f6c101         testb rcx,0x1
0x19db0008468c   64c  0f848ffdffff   jz 0x19db00084421  <+0x3e1>
0x19db00084692   652  8bc9           movl rcx,rcx
0x19db00084694   654  4903cd         REX.W addq rcx,r13
0x19db00084697   657  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db0008469e   65e  4c23c1         REX.W andq r8,rcx
0x19db000846a1   661  41f6400802     testb [r8+0x8],0x2
0x19db000846a6   666  0f8475fdffff   jz 0x19db00084421  <+0x3e1>
0x19db000846ac   66c  4c8d4f17       REX.W leaq r9,[rdi+0x17]
0x19db000846b0   670  50             push rax
0x19db000846b1   671  51             push rcx
0x19db000846b2   672  52             push rdx
0x19db000846b3   673  56             push rsi
0x19db000846b4   674  57             push rdi
0x19db000846b5   675  498bf1         REX.W movq rsi,r9
0x19db000846b8   678  33d2           xorl rdx,rdx
0x19db000846ba   67a  488b0d6cfbffff REX.W movq rcx,[rip+0xfffffb6c]
0x19db000846c1   681  49bac065b8f5ff7f0000 REX.W movq r10,0x7ffff5b865c0  (RecordWrite)    ;; off heap target
0x19db000846cb   68b  41ffd2         call r10
0x19db000846ce   68e  5f             pop rdi
0x19db000846cf   68f  5e             pop rsi
0x19db000846d0   690  5a             pop rdx
0x19db000846d1   691  59             pop rcx
0x19db000846d2   692  58             pop rax
0x19db000846d3   693  e949fdffff     jmp 0x19db00084421  <+0x3e1>
0x19db000846d8   698  90             nop
0x19db000846d9   699  41ff95f8360000 call [r13+0x36f8]
0x19db000846e0   6a0  41ff95f8360000 call [r13+0x36f8]
0x19db000846e7   6a7  41ff95f8360000 call [r13+0x36f8]
0x19db000846ee   6ae  41ff95f8360000 call [r13+0x36f8]
0x19db000846f5   6b5  41ff95f8360000 call [r13+0x36f8]
0x19db000846fc   6bc  41ff95f8360000 call [r13+0x36f8]
0x19db00084703   6c3  41ff95f8360000 call [r13+0x36f8]
0x19db0008470a   6ca  41ff95f8360000 call [r13+0x36f8]
0x19db00084711   6d1  41ff95f8360000 call [r13+0x36f8]
0x19db00084718   6d8  41ff95f8360000 call [r13+0x36f8]
0x19db0008471f   6df  41ff95f8360000 call [r13+0x36f8]
0x19db00084726   6e6  41ff95f8360000 call [r13+0x36f8]
0x19db0008472d   6ed  41ff95f8360000 call [r13+0x36f8]
0x19db00084734   6f4  41ff95f8360000 call [r13+0x36f8]
0x19db0008473b   6fb  41ff95f8360000 call [r13+0x36f8]
0x19db00084742   702  41ff95f8360000 call [r13+0x36f8]
0x19db00084749   709  41ff95f8360000 call [r13+0x36f8]
0x19db00084750   710  41ff95f8360000 call [r13+0x36f8]
0x19db00084757   717  41ff95f8360000 call [r13+0x36f8]
0x19db0008475e   71e  41ff9510370000 call [r13+0x3710]
0x19db00084765   725  41ff9510370000 call [r13+0x3710]
0x19db0008476c   72c  41ff9510370000 call [r13+0x3710]
0x19db00084773   733  90             nop

Source positions:
 pc offset  position
       40e       647

Inlined functions (count = 0)

Deoptimization Input Data (deopt points = 22)
 index  bytecode-offset    pc
     0                0    NA 
     1                0    NA 
     2                0    NA 
     3                0    NA 
     4                0    NA 
     5                0    NA 
     6                0    NA 
     7                0    NA 
     8                0    NA 
     9                0    NA 
    10                0    NA 
    11                0    NA 
    12                0    NA 
    13                0    NA 
    14                0    NA 
    15                0    NA 
    16                0    NA 
    17                0    NA 
    18              260    NA 
    19               -1   437 
    20              338   4ac 
    21              338   56e 

Safepoints (size = 68)
0x19db00084477     437   71e  000000000000100000000 (sp -> fp)      19
0x19db000844ec     4ac   725  000000000000100100000 (sp -> fp)      20
0x19db000845ae     56e   72c  000000000000100100000 (sp -> fp)      21
0x19db0008465a     61a    NA  000000000000000100000 (sp -> fp)  <none>

RelocInfo (size = 49)
0x19db00084058  off heap target
0x19db00084072  off heap target
0x19db000840a7  compressed embedded object  (0x19db0830dba5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db000840bd  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db000841f6  compressed embedded object  (0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)> compressed)
0x19db000841fc  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db00084242  full embedded object  (0x19db0834358d <FunctionContext[22]>)
0x19db0008425c  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db000842f9  compressed embedded object  (0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)> compressed)
0x19db00084455  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db0008445f  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008446c  off heap target
0x19db000844c7  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000844d4  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db00084596  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00084626  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db00084637  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db0008464f  off heap target
0x19db000846c3  off heap target

--- End code ---
assign 0 to v-1:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
assign 6 to v-7:0
------------------------
function: MMulti
add v217->v212
add v213->v215
add v209->v211
add v210->v211
add v47->v200
add v192->v200
add v192->v200
add v207->v209
add v208->v209
add v47->v199
add v192->v199
add v192->v199
add v205->v207
add v206->v207
add v47->v198
add v192->v198
add v192->v198
add v203->v205
add v204->v205
add v47->v197
add v192->v197
add v192->v197
add v194->v203
add v202->v203
add v201->v191
add v200->v191
add v199->v191
add v198->v191
add v197->v191
add v196->v194
add v193->v194
add v180->v0
add v192->v0
add v191->v0
add v188->v0
add v190->v0
adding pairs 2, v10:0x7fffd4045298, v188:0x7fffd403e6b0
add v180->v3
add v155->v3
add v187->v3
adding pairs 2, v10:0x7fffd4045298, v155:0x7fffd403eac8
add v52->v182
add v47->v182
add v163->v182
add v181->v182
add v123->v163
add v180->v4
add v146->v4
add v179->v4
add v175->v146
add v52->v175
add v47->v175
add v172->v175
add v174->v175
add v122->v172
add v125->v163
add v168->v146
add v52->v168
add v47->v168
add v165->v168
add v167->v168
add v124->v165
add v121->v163
add v159->v146
add v52->v159
add v47->v159
add v156->v159
add v158->v159
add v120->v156
adding pairs 2, v10:0x7fffd4045298, v155:0x7fffd403eac8
add v52->v151
add v47->v151
add v148->v151
add v150->v151
add v117->v148
add v142->v146
add v52->v142
add v47->v142
add v139->v142
add v141->v142
add v116->v139
add v52->v126
add v47->v126
add v128->v126
add v135->v126
add v133->v128
add v134->v127
add v111->v109
add v102->v0
add v104->v0
adding pairs 2, v10:0x7fffd4045298, v102:0x7fffd40419a0
add v69->v3
add v101->v3
adding pairs 2, v10:0x7fffd4045298, v69:0x7fffd4041c20
add v52->v96
add v47->v96
add v78->v96
add v95->v96
add v30->v78
add v60->v4
add v94->v4
add v90->v60
add v52->v90
add v47->v90
add v87->v90
add v89->v90
adding pairs 3, v36:0x7fffd4045068, v87:0x7fffd4042700
add v32->v78
add v83->v60
add v52->v83
add v47->v83
add v80->v83
add v82->v83
adding pairs 3, v36:0x7fffd4045068, v80:0x7fffd4042c70
add v28->v78
add v74->v60
add v52->v74
add v47->v74
add v71->v74
add v73->v74
adding pairs 3, v36:0x7fffd4045068, v71:0x7fffd40431e0
adding pairs 2, v10:0x7fffd4045298, v69:0x7fffd4041c20
add v52->v65
add v47->v65
add v62->v65
add v64->v65
add v24->v62
add v56->v60
add v52->v56
add v47->v56
add v53->v56
add v55->v56
adding pairs 3, v36:0x7fffd4045068, v53:0x7fffd4043b80
add v52->v33
add v47->v33
add v38->v33
add v46->v33
add v45->v38
add v44->v37
add v12->v36
add v35->v33
adding pairs 3, v36:0x7fffd4045068, v15:0x7fffd4044f50
add v6->v10
gap () () 
          [stack:-1|t] = ArchNop
gap (v2(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v3(-) = [stack:-2|t];) () 
          [stack:-3|t] = ArchNop
gap (v4(-) = [stack:-3|t];) () 
          [rsi|R|t] = ArchNop
gap (v5(-) = [rsi|R|t];) () 
          [constant:130] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:433] [immediate:434]
gap () () 
          [constant:222] = ArchNop
gap () () 
          [constant:223] = ArchNop
gap () () 
          [constant:221] = ArchNop
gap () () 
          v220(R) = ArchStackCheckOffset
gap () () 
          X64Push v220(-)
gap () ([rbx|R|w64] = v221(-); [rax|R|w64] = v222(-); [rsi|R|t] = v223(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:431] #-1 #66 [immediate:432] v2(S) v3(S) v4(S) v5(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:430]
gap () () 
          ArchJmp [immediate:429]
gap () () 
          [constant:195] = ArchNop
gap () () 
          v212(R) = X64Movq : MR v195(R)
gap () () 
          [constant:218] = ArchNop
gap () () 
          [constant:216] = ArchNop
gap () () 
          v217(R) = X64Lea : MRI v212(R) [immediate:428]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v218(R) v217(R) [immediate:426] [immediate:427]
gap () () 
          ArchJmp [immediate:425]
gap () ([rdx|R|w64] = v216(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:424] #-1 [rdx|R|w64]
gap (v215(-) = [rax|R|tp];) () 
          v213(R) = X64Lea : MRI v215(R) [immediate:423]
gap () (v211 = v213(-);) 
          ArchJmp [immediate:422]
gap () (v211 = v212(-);) 
          ArchJmp [immediate:421]
gap () () 
          v209(R) = X64Lea : MRI v211(R) [immediate:420]
gap () () 
          X64Movq : MR v195(R) v209(R)
gap () () 
          v210(R) = X64Lea : MRI v211(R) [immediate:419]
gap () (v200 = v210(-);) 
          v200(1) = ArchNop v200
gap () () 
          [constant:47] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:418] v47(R)
gap () () 
          [constant:192] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:417] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:416] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:414] [immediate:415]
gap () () 
          v207(R) = X64Lea : MRI v209(R) [immediate:413]
gap () () 
          X64Movq : MR v195(R) v207(R)
gap () () 
          v208(R) = X64Lea : MRI v209(R) [immediate:412]
gap () (v199 = v208(-);) 
          v199(1) = ArchNop v199
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:411] v47(R)
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:410] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:409] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:407] [immediate:408]
gap () () 
          v205(R) = X64Lea : MRI v207(R) [immediate:406]
gap () () 
          X64Movq : MR v195(R) v205(R)
gap () () 
          v206(R) = X64Lea : MRI v207(R) [immediate:405]
gap () (v198 = v206(-);) 
          v198(1) = ArchNop v198
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:404] v47(R)
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:403] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:402] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:400] [immediate:401]
gap () () 
          v203(R) = X64Lea : MRI v205(R) [immediate:399]
gap () () 
          X64Movq : MR v195(R) v203(R)
gap () () 
          v204(R) = X64Lea : MRI v205(R) [immediate:398]
gap () (v197 = v204(-);) 
          v197(1) = ArchNop v197
gap () () 
          X64MovqCompressTagged : MRI v197(R) [immediate:397] v47(R)
gap () () 
          X64MovqCompressTagged : MRI v197(R) [immediate:396] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v197(R) [immediate:395] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v197(R) [immediate:393] [immediate:394]
gap () () 
          v194(R) = X64Lea : MRI v203(R) [immediate:392]
gap () () 
          X64Movq : MR v195(R) v194(R)
gap () () 
          v202(R) = X64Lea : MRI v203(R) [immediate:391]
gap () (v191 = v202(-);) 
          v191(1) = ArchNop v191
gap () () 
          [constant:201] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v191(R) [immediate:390] v201(R)
gap () () 
          X64MovqCompressTagged : MRI v191(R) [immediate:388] [immediate:389]
gap () () 
          X64MovqCompressTagged : MRI v191(R) [immediate:387] v200(R)
gap () () 
          X64MovqCompressTagged : MRI v191(R) [immediate:386] v199(R)
gap () () 
          X64MovqCompressTagged : MRI v191(R) [immediate:385] v198(R)
gap () () 
          X64MovqCompressTagged : MRI v191(R) [immediate:384] v197(R)
gap () () 
          v196(R) = X64Lea : MRI v194(R) [immediate:383]
gap () () 
          X64Movq : MR v195(R) v196(R)
gap () () 
          v193(R) = X64Lea : MRI v194(R) [immediate:382]
gap () (v0 = v193(-);) 
          v0(1) = ArchNop v0
gap () () 
          [constant:8] = ArchNop
gap () () 
          [constant:180] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:381] v180(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:380] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:379] v191(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:377] [immediate:378]
gap () (v10 = v8(-);) 
          ArchJmp [immediate:376]
gap () () 
          X64Cmp32 && branch if unsigned less than v10 #4 [immediate:374] [immediate:375]
gap () () 
          v188(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:373]
gap () () 
          v190(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:372]
gap () () 
          [constant:105] = ArchNop
gap () (v189(R) = v190(-);) 
          v189(1) = X64Sar32 v189(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v10(R) v189 #65 [immediate:370] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:371]
gap () () 
          v126(R) = X64MovqDecompressAnyTagged : MR4I v188(R) v10(R) [immediate:369]
gap () () 
          [constant:50] = ArchNop
gap () () 
          [constant:52] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v3 #1 #64 [immediate:367] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:368]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:364] v180(R) #63 [immediate:365] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:366]
gap () () 
          v155(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:363]
gap () () 
          v187(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:362]
gap () (v186(R) = v187(-);) 
          v186(1) = X64Sar32 v186(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v10(R) v186 #62 [immediate:360] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:361]
gap () () 
          v182(R) = X64MovqDecompressAnyTagged : MR4I v155(R) v10(R) [immediate:359]
gap () () 
          X64Test32 && deoptimize if equal v182 #1 #61 [immediate:357] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:358]
gap () () 
          X64Cmp32 : MRI && branch if equal v182(R) [immediate:354] v52(R) [immediate:355] [immediate:356]
gap () () 
          ArchJmp [immediate:353]
gap () () 
          [constant:185] = ArchNop
gap () () 
          [constant:184] = ArchNop
gap () () 
          X64Push v182(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v184(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v185(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:352] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:351]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v182(R) [immediate:347] v47(R) #60 [immediate:348] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:349] [immediate:350]
gap () () 
          v163(R) = X64MovqDecompressTaggedPointer : MRI v182(R) [immediate:346]
gap () () 
          v181(R) = X64MovqDecompressTaggedSigned : MRI v182(R) [immediate:345]
gap () (v164(R) = v181(-);) 
          v164(1) = X64Sar32 v164(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v164 #0 #59 [immediate:342] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:343] [immediate:344]
gap () () 
          v123(R) = X64Movsd : MRI v163(R) [immediate:341]
gap () () 
          X64Test32 && deoptimize if equal v4 #1 #58 [immediate:338] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:339] [immediate:340]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v4(R) [immediate:334] v180(R) #57 [immediate:335] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:336] [immediate:337]
gap () () 
          v146(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:333]
gap () () 
          v179(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:332]
gap () (v147(R) = v179(-);) 
          v147(1) = X64Sar32 v147(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #0 #56 [immediate:329] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:330] [immediate:331]
gap () () 
          v175(R) = X64MovqDecompressAnyTagged : MRI v146(R) [immediate:328]
gap () () 
          X64Test32 && deoptimize if equal v175 #1 #55 [immediate:325] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:326] [immediate:327]
gap () () 
          X64Cmp32 : MRI && branch if equal v175(R) [immediate:322] v52(R) [immediate:323] [immediate:324]
gap () () 
          ArchJmp [immediate:321]
gap () () 
          [constant:178] = ArchNop
gap () () 
          [constant:177] = ArchNop
gap () () 
          X64Push v175(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v177(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v178(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:320] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:319]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v175(R) [immediate:315] v47(R) #54 [immediate:316] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:317] [immediate:318]
gap () () 
          v172(R) = X64MovqDecompressTaggedPointer : MRI v175(R) [immediate:314]
gap () () 
          v174(R) = X64MovqDecompressTaggedSigned : MRI v175(R) [immediate:313]
gap () (v173(R) = v174(-);) 
          v173(1) = X64Sar32 v173(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v173 #0 #53 [immediate:310] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:311] [immediate:312]
gap () () 
          v122(R) = X64Movsd : MRI v172(R) [immediate:309]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v164 #1 #52 [immediate:306] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:307] [immediate:308]
gap () () 
          v125(R) = X64Movsd : MRI v163(R) [immediate:305]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #1 #51 [immediate:302] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:303] [immediate:304]
gap () () 
          v168(R) = X64MovqDecompressAnyTagged : MRI v146(R) [immediate:301]
gap () () 
          X64Test32 && deoptimize if equal v168 #1 #50 [immediate:298] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:299] [immediate:300]
gap () () 
          X64Cmp32 : MRI && branch if equal v168(R) [immediate:295] v52(R) [immediate:296] [immediate:297]
gap () () 
          ArchJmp [immediate:294]
gap () () 
          [constant:171] = ArchNop
gap () () 
          [constant:170] = ArchNop
gap () () 
          X64Push v168(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v170(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v171(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:293] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:292]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v168(R) [immediate:288] v47(R) #49 [immediate:289] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:290] [immediate:291]
gap () () 
          v165(R) = X64MovqDecompressTaggedPointer : MRI v168(R) [immediate:287]
gap () () 
          v167(R) = X64MovqDecompressTaggedSigned : MRI v168(R) [immediate:286]
gap () (v166(R) = v167(-);) 
          v166(1) = X64Sar32 v166(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v166 #0 #48 [immediate:283] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:284] [immediate:285]
gap () () 
          v124(R) = X64Movsd : MRI v165(R) [immediate:282]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v164 #2 #47 [immediate:279] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:280] [immediate:281]
gap () () 
          v121(R) = X64Movsd : MRI v163(R) [immediate:278]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #2 #46 [immediate:275] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:276] [immediate:277]
gap () () 
          v159(R) = X64MovqDecompressAnyTagged : MRI v146(R) [immediate:274]
gap () () 
          X64Test32 && deoptimize if equal v159 #1 #45 [immediate:271] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:272] [immediate:273]
gap () () 
          X64Cmp32 : MRI && branch if equal v159(R) [immediate:268] v52(R) [immediate:269] [immediate:270]
gap () () 
          ArchJmp [immediate:267]
gap () () 
          [constant:162] = ArchNop
gap () () 
          [constant:161] = ArchNop
gap () () 
          X64Push v159(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v161(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v162(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:266] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:265]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v159(R) [immediate:261] v47(R) #44 [immediate:262] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:263] [immediate:264]
gap () () 
          v156(R) = X64MovqDecompressTaggedPointer : MRI v159(R) [immediate:260]
gap () () 
          v158(R) = X64MovqDecompressTaggedSigned : MRI v159(R) [immediate:259]
gap () (v157(R) = v158(-);) 
          v157(1) = X64Sar32 v157(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v157 #0 #43 [immediate:256] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:257] [immediate:258]
gap () () 
          v120(R) = X64Movsd : MRI v156(R) [immediate:255]
gap () () 
          v151(R) = X64MovqDecompressAnyTagged : MR4I v155(R) v10(R) [immediate:254]
gap () () 
          X64Test32 && deoptimize if equal v151 #1 #42 [immediate:251] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:252] [immediate:253]
gap () () 
          X64Cmp32 : MRI && branch if equal v151(R) [immediate:248] v52(R) [immediate:249] [immediate:250]
gap () () 
          ArchJmp [immediate:247]
gap () () 
          [constant:154] = ArchNop
gap () () 
          [constant:153] = ArchNop
gap () () 
          X64Push v151(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v153(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v154(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:246] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:245]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v151(R) [immediate:241] v47(R) #41 [immediate:242] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:243] [immediate:244]
gap () () 
          v148(R) = X64MovqDecompressTaggedPointer : MRI v151(R) [immediate:240]
gap () () 
          v150(R) = X64MovqDecompressTaggedSigned : MRI v151(R) [immediate:239]
gap () (v149(R) = v150(-);) 
          v149(1) = X64Sar32 v149(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v149 #3 #40 [immediate:236] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:237] [immediate:238]
gap () () 
          v117(R) = X64Movsd : MRI v148(R) [immediate:235]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #3 #39 [immediate:232] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:233] [immediate:234]
gap () () 
          v142(R) = X64MovqDecompressAnyTagged : MRI v146(R) [immediate:231]
gap () () 
          X64Test32 && deoptimize if equal v142 #1 #38 [immediate:228] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:229] [immediate:230]
gap () () 
          X64Cmp32 : MRI && branch if equal v142(R) [immediate:225] v52(R) [immediate:226] [immediate:227]
gap () () 
          ArchJmp [immediate:224]
gap () () 
          [constant:145] = ArchNop
gap () () 
          [constant:144] = ArchNop
gap () () 
          X64Push v142(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v144(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v145(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:223] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:222]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v142(R) [immediate:218] v47(R) #37 [immediate:219] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:220] [immediate:221]
gap () () 
          v139(R) = X64MovqDecompressTaggedPointer : MRI v142(R) [immediate:217]
gap () () 
          v141(R) = X64MovqDecompressTaggedSigned : MRI v142(R) [immediate:216]
gap () (v140(R) = v141(-);) 
          v140(1) = X64Sar32 v140(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v140 #0 #36 [immediate:213] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:214] [immediate:215]
gap () () 
          v116(R) = X64Movsd : MRI v139(R) [immediate:212]
gap () () 
          X64Test32 && deoptimize if equal v126 #1 #35 [immediate:209] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:210] [immediate:211]
gap () () 
          X64Cmp32 : MRI && branch if equal v126(R) [immediate:206] v52(R) [immediate:207] [immediate:208]
gap () () 
          ArchJmp [immediate:205]
gap () () 
          [constant:138] = ArchNop
gap () () 
          [constant:137] = ArchNop
gap () () 
          X64Push v126(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v137(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v138(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:204] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:203]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v126(R) [immediate:199] v47(R) #34 [immediate:200] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:201] [immediate:202]
gap () () 
          v128(R) = X64MovqDecompressTaggedPointer : MRI v126(R) [immediate:198]
gap () () 
          v135(R) = X64MovqDecompressTaggedSigned : MRI v126(R) [immediate:197]
gap () () 
          v133(R) = X64MovqDecompressTaggedSigned : MRI v128(R) [immediate:196]
gap () (v127(R) = v135(-);) 
          v127(1) = X64Sar32 v127(R) #1
gap () () 
          v134(R) = X64Lea32 : MRI v127(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v134 #0 [immediate:194] [immediate:195]
gap () (v132(R) = v133(-);) 
          v132(1) = X64Sar32 v132(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v132 #0 [immediate:192] [immediate:193]
gap () () 
          [constant:131] = ArchNop
gap () ([rax|R|t] = v126(-); [rbx|R|w64] = v130(-); [rsi|R|w64] = v131(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:191] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v129(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v129 #1 #33 [immediate:188] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:189] [immediate:190]
gap () (v109 = v129(-);) 
          ArchJmp [immediate:187]
gap () (v109 = v128(-);) 
          ArchJmp [immediate:186]
gap () () 
          X64Cmp32 && branch if unsigned greater than v127 #0 [immediate:184] [immediate:185]
gap () () 
          X64MovqCompressTagged : MRI v126(R) [immediate:182] [immediate:183]
gap () () 
          ArchJmp [immediate:181]
gap () () 
          ArchJmp [immediate:180]
gap () () 
          v118(R) = AVXFloat64Mul v124(R) v125
gap () () 
          v119(R) = AVXFloat64Mul v122(R) v123
gap () () 
          v114(R) = AVXFloat64Mul v120(R) v121
gap () () 
          v115(R) = AVXFloat64Add v118(R) v119
gap () () 
          v112(R) = AVXFloat64Mul v116(R) v117
gap () () 
          v113(R) = AVXFloat64Add v114(R) v115
gap () () 
          v111(R) = AVXFloat64Add v112(R) v113
gap () () 
          X64Movsd : MRI v109(R) [immediate:179] v111(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:177] [immediate:178]
gap () () 
          [constant:108] = ArchNop
gap () () 
          [constant:107] = ArchNop
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v8(-); [rsi|R|t] = v108(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:175] #-1 #32 [immediate:176] v2(S) v3(S) v4(S) v5(S) v0(S) v10(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:174]
gap () () 
          ArchJmp [immediate:173]
gap () (v36 = v105(-);) 
          ArchJmp [immediate:172]
gap () () 
          X64Cmp32 && branch if unsigned less than v36 #4 [immediate:170] [immediate:171]
gap () () 
          v102(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:169]
gap () () 
          v104(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:168]
gap () (v103(R) = v104(-);) 
          v103(1) = X64Sar32 v103(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v10(R) v103 #31 [immediate:166] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:167]
gap () () 
          v33(R) = X64MovqDecompressAnyTagged : MR4I v102(R) v10(R) [immediate:165]
gap () () 
          v69(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:164]
gap () () 
          v101(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:163]
gap () (v100(R) = v101(-);) 
          v100(1) = X64Sar32 v100(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v10(R) v100 #30 [immediate:161] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:162]
gap () () 
          v96(R) = X64MovqDecompressAnyTagged : MR4I v69(R) v10(R) [immediate:160]
gap () () 
          X64Test32 && deoptimize if equal v96 #1 #29 [immediate:158] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:159]
gap () () 
          X64Cmp32 : MRI && branch if equal v96(R) [immediate:155] v52(R) [immediate:156] [immediate:157]
gap () () 
          ArchJmp [immediate:154]
gap () () 
          [constant:99] = ArchNop
gap () () 
          [constant:98] = ArchNop
gap () () 
          X64Push v96(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v98(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v99(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:153] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:152]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v96(R) [immediate:149] v47(R) #28 [immediate:150] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:151]
gap () () 
          v78(R) = X64MovqDecompressTaggedPointer : MRI v96(R) [immediate:148]
gap () () 
          v95(R) = X64MovqDecompressTaggedSigned : MRI v96(R) [immediate:147]
gap () (v79(R) = v95(-);) 
          v79(1) = X64Sar32 v79(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v79 #0 #27 [immediate:145] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:146]
gap () () 
          v30(R) = X64Movsd : MRI v78(R) [immediate:144]
gap () () 
          v60(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:143]
gap () () 
          v94(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:142]
gap () (v61(R) = v94(-);) 
          v61(1) = X64Sar32 v61(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v61 #0 #26 [immediate:140] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:141]
gap () () 
          v90(R) = X64MovqDecompressAnyTagged : MRI v60(R) [immediate:139]
gap () () 
          X64Test32 && deoptimize if equal v90 #1 #25 [immediate:137] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:138]
gap () () 
          X64Cmp32 : MRI && branch if equal v90(R) [immediate:134] v52(R) [immediate:135] [immediate:136]
gap () () 
          ArchJmp [immediate:133]
gap () () 
          [constant:93] = ArchNop
gap () () 
          [constant:92] = ArchNop
gap () () 
          X64Push v90(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v92(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v93(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:132] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:131]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v90(R) [immediate:128] v47(R) #24 [immediate:129] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:130]
gap () () 
          v87(R) = X64MovqDecompressTaggedPointer : MRI v90(R) [immediate:127]
gap () () 
          v89(R) = X64MovqDecompressTaggedSigned : MRI v90(R) [immediate:126]
gap () (v88(R) = v89(-);) 
          v88(1) = X64Sar32 v88(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v36(R) v88 #23 [immediate:124] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:125]
gap () () 
          v29(R) = X64Movsd : MR8I v87(R) v36(R) [immediate:123]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v79 #1 #22 [immediate:121] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:122]
gap () () 
          v32(R) = X64Movsd : MRI v78(R) [immediate:120]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v61 #1 #21 [immediate:118] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:119]
gap () () 
          v83(R) = X64MovqDecompressAnyTagged : MRI v60(R) [immediate:117]
gap () () 
          X64Test32 && deoptimize if equal v83 #1 #20 [immediate:115] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:116]
gap () () 
          X64Cmp32 : MRI && branch if equal v83(R) [immediate:112] v52(R) [immediate:113] [immediate:114]
gap () () 
          ArchJmp [immediate:111]
gap () () 
          [constant:86] = ArchNop
gap () () 
          [constant:85] = ArchNop
gap () () 
          X64Push v83(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v85(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v86(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:110] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:109]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v83(R) [immediate:106] v47(R) #19 [immediate:107] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:108]
gap () () 
          v80(R) = X64MovqDecompressTaggedPointer : MRI v83(R) [immediate:105]
gap () () 
          v82(R) = X64MovqDecompressTaggedSigned : MRI v83(R) [immediate:104]
gap () (v81(R) = v82(-);) 
          v81(1) = X64Sar32 v81(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v36(R) v81 #18 [immediate:102] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:103]
gap () () 
          v31(R) = X64Movsd : MR8I v80(R) v36(R) [immediate:101]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v79 #2 #17 [immediate:99] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:100]
gap () () 
          v28(R) = X64Movsd : MRI v78(R) [immediate:98]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v61 #2 #16 [immediate:96] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:97]
gap () () 
          v74(R) = X64MovqDecompressAnyTagged : MRI v60(R) [immediate:95]
gap () () 
          X64Test32 && deoptimize if equal v74 #1 #15 [immediate:93] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:94]
gap () () 
          X64Cmp32 : MRI && branch if equal v74(R) [immediate:90] v52(R) [immediate:91] [immediate:92]
gap () () 
          ArchJmp [immediate:89]
gap () () 
          [constant:77] = ArchNop
gap () () 
          [constant:76] = ArchNop
gap () () 
          X64Push v74(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v76(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v77(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:88] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:87]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v74(R) [immediate:84] v47(R) #14 [immediate:85] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:86]
gap () () 
          v71(R) = X64MovqDecompressTaggedPointer : MRI v74(R) [immediate:83]
gap () () 
          v73(R) = X64MovqDecompressTaggedSigned : MRI v74(R) [immediate:82]
gap () (v72(R) = v73(-);) 
          v72(1) = X64Sar32 v72(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v36(R) v72 #13 [immediate:80] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:81]
gap () () 
          v27(R) = X64Movsd : MR8I v71(R) v36(R) [immediate:79]
gap () () 
          v65(R) = X64MovqDecompressAnyTagged : MR4I v69(R) v10(R) [immediate:78]
gap () () 
          X64Test32 && deoptimize if equal v65 #1 #12 [immediate:76] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:77]
gap () () 
          X64Cmp32 : MRI && branch if equal v65(R) [immediate:73] v52(R) [immediate:74] [immediate:75]
gap () () 
          ArchJmp [immediate:72]
gap () () 
          [constant:68] = ArchNop
gap () () 
          [constant:67] = ArchNop
gap () () 
          X64Push v65(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v67(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v68(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:71] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:70]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v65(R) [immediate:67] v47(R) #11 [immediate:68] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:69]
gap () () 
          v62(R) = X64MovqDecompressTaggedPointer : MRI v65(R) [immediate:66]
gap () () 
          v64(R) = X64MovqDecompressTaggedSigned : MRI v65(R) [immediate:65]
gap () (v63(R) = v64(-);) 
          v63(1) = X64Sar32 v63(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v63 #3 #10 [immediate:63] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:64]
gap () () 
          v24(R) = X64Movsd : MRI v62(R) [immediate:62]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v61 #3 #9 [immediate:60] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:61]
gap () () 
          v56(R) = X64MovqDecompressAnyTagged : MRI v60(R) [immediate:59]
gap () () 
          X64Test32 && deoptimize if equal v56 #1 #8 [immediate:57] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:58]
gap () () 
          X64Cmp32 : MRI && branch if equal v56(R) [immediate:54] v52(R) [immediate:55] [immediate:56]
gap () () 
          ArchJmp [immediate:53]
gap () () 
          [constant:59] = ArchNop
gap () () 
          [constant:58] = ArchNop
gap () () 
          X64Push v56(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v58(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v59(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:52] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:51]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v56(R) [immediate:48] v47(R) #7 [immediate:49] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:50]
gap () () 
          v53(R) = X64MovqDecompressTaggedPointer : MRI v56(R) [immediate:47]
gap () () 
          v55(R) = X64MovqDecompressTaggedSigned : MRI v56(R) [immediate:46]
gap () (v54(R) = v55(-);) 
          v54(1) = X64Sar32 v54(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v36(R) v54 #6 [immediate:44] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:45]
gap () () 
          v23(R) = X64Movsd : MR8I v53(R) v36(R) [immediate:43]
gap () () 
          X64Test32 && deoptimize if equal v33 #1 #5 [immediate:41] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:42]
gap () () 
          X64Cmp32 : MRI && branch if equal v33(R) [immediate:38] v52(R) [immediate:39] [immediate:40]
gap () () 
          ArchJmp [immediate:37]
gap () () 
          [constant:51] = ArchNop
gap () () 
          [constant:49] = ArchNop
gap () () 
          X64Push v33(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v49(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v51(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:36] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:35]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v33(R) [immediate:32] v47(R) #4 [immediate:33] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:34]
gap () () 
          v38(R) = X64MovqDecompressTaggedPointer : MRI v33(R) [immediate:31]
gap () () 
          v46(R) = X64MovqDecompressTaggedSigned : MRI v33(R) [immediate:30]
gap () (v37(R) = v46(-);) 
          v37(1) = X64Sar32 v37(R) #1
gap () () 
          v45(R) = X64MovqDecompressTaggedSigned : MRI v38(R) [immediate:29]
gap () (v43(R) = v45(-);) 
          v43(1) = X64Sar32 v43(R) #1
gap () () 
          v44(R) = X64Lea32 : MRI v37(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v36(R) v44 #3 [immediate:27] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:28]
gap () () 
          X64Cmp32 && branch if unsigned less than v36(R) v43 [immediate:25] [immediate:26]
gap () () 
          v42(R) = X64Lea32 : MR1 v36(R) v36(R)
gap () () 
          [constant:41] = ArchNop
gap () ([rax|R|t] = v33(-); [rbx|R|w32] = v42(-); [rsi|R|w64] = v41(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:24] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v39(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v39 #1 #2 [immediate:22] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:23]
gap () (v15 = v39(-);) 
          ArchJmp [immediate:21]
gap () (v15 = v38(-);) 
          ArchJmp [immediate:20]
gap () () 
          v12(R) = X64Lea32 : MRI v36(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v36(R) v37 [immediate:18] [immediate:19]
gap () () 
          v35(R) = X64Lea32 : MR1 v12(R) v12(R)
gap () () 
          X64MovqCompressTagged : MRI v33(R) [immediate:17] v35(R)
gap () () 
          ArchJmp [immediate:16]
gap () () 
          ArchJmp [immediate:15]
gap () () 
          v25(R) = AVXFloat64Mul v31(R) v32
gap () () 
          v26(R) = AVXFloat64Mul v29(R) v30
gap () () 
          v21(R) = AVXFloat64Mul v27(R) v28
gap () () 
          v22(R) = AVXFloat64Add v25(R) v26
gap () () 
          v19(R) = AVXFloat64Mul v23(R) v24
gap () () 
          v20(R) = AVXFloat64Add v21(R) v22
gap () () 
          v18(R) = AVXFloat64Add v19(R) v20
gap () () 
          X64Movsd : MR8I v15(R) v36(R) [immediate:14] v18(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:12] [immediate:13]
gap () () 
          [constant:14] = ArchNop
gap () () 
          [constant:13] = ArchNop
gap () ([rbx|R|w64] = v13(-); [rax|R|w64] = v8(-); [rsi|R|t] = v14(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:10] #-1 #1 [immediate:11] v2(S) v3(S) v4(S) v5(S) v0(S) v10(S) v12(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:9]
gap () () 
          ArchJmp [immediate:8]
gap () (v36 = v12(-);) 
          ArchJmp [immediate:7]
gap () () 
          v6(R) = X64Lea32 : MRI v10(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:5] [immediate:6]
gap () () 
          [constant:9] = ArchNop
gap () () 
          [constant:7] = ArchNop
gap () ([rbx|R|w64] = v7(-); [rax|R|w64] = v8(-); [rsi|R|t] = v9(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:3] #-1 #0 [immediate:4] v2(S) v3(S) v4(S) v5(S) v0(S) v6(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:2]
gap () () 
          ArchJmp [immediate:1]
gap () (v10 = v6(-);) 
          ArchJmp [immediate:0]
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
gap () () 
          ArchDebugBreak
gap () () 
          ArchThrowTerminator
print sib pairs
2, v10, v69
2, v10, v102
2, v10, v155
2, v10, v188
3, v36, v15
3, v36, v53
3, v36, v71
3, v36, v80
3, v36, v87
print modrm pairs
1, v6, v10
1, v44, v37
1, v45, v38
1, v53, v56
1, v56, v60
1, v35, v33
1, v24, v62
1, v64, v65
1, v46, v33
1, v73, v74
1, v82, v83
1, v80, v83
1, v87, v90
1, v60, v4
1, v69, v3
1, v135, v126
1, v128, v126
1, v142, v146
1, v150, v151
1, v89, v90
1, v148, v151
1, v116, v139
1, v123, v163
1, v120, v156
1, v156, v159
1, v62, v65
1, v74, v60
1, v165, v168
1, v159, v146
1, v71, v74
1, v32, v78
1, v124, v165
1, v158, v159
1, v200, v191
1, v122, v172
1, v179, v4
1, v172, v175
1, v167, v168
1, v38, v33
1, v83, v60
1, v175, v146
1, v202, v203
1, v181, v182
1, v30, v78
1, v101, v3
1, v125, v163
1, v163, v182
1, v28, v78
1, v134, v127
1, v141, v142
1, v205, v207
1, v146, v4
1, v187, v3
1, v155, v3
1, v117, v148
1, v47, v33
1, v47, v65
1, v47, v74
1, v47, v56
1, v47, v83
1, v47, v96
1, v47, v199
1, v47, v126
1, v47, v168
1, v47, v151
1, v47, v175
1, v47, v182
1, v47, v159
1, v47, v142
1, v47, v90
1, v47, v197
1, v47, v198
1, v47, v200
1, v188, v0
1, v191, v0
1, v121, v163
1, v180, v4
1, v180, v3
1, v180, v0
1, v102, v0
1, v139, v142
1, v174, v175
1, v196, v194
1, v95, v96
1, v210, v211
1, v111, v109
1, v193, v194
1, v78, v96
1, v198, v191
1, v12, v36
1, v208, v209
1, v201, v191
1, v194, v203
1, v55, v56
1, v217, v212
1, v204, v205
1, v190, v0
1, v203, v205
1, v206, v207
1, v94, v4
1, v52, v33
1, v52, v65
1, v52, v74
1, v52, v168
1, v52, v126
1, v52, v56
1, v52, v83
1, v52, v159
1, v52, v142
1, v52, v96
1, v52, v175
1, v52, v151
1, v52, v90
1, v52, v182
1, v133, v128
1, v199, v191
1, v168, v146
1, v197, v191
1, v192, v197
1, v192, v199
1, v192, v0
1, v192, v198
1, v192, v200
1, v207, v209
1, v90, v60
1, v213, v215
1, v104, v0
1, v209, v211
assign rcx to v220:0
assign 1 to v220:0
assign rbx to v221:1
assign 3 to v221:1
assign rax to v222:1
assign 0 to v222:1
assign rsi to v223:1
assign 6 to v223:1
assign rcx to v195:1
assign 1 to v195:1
assign rdi to v212:0
assign 7 to v212:0
assign r8 to v217:0
assign 8 to v217:0
assign r9 to v218:1
assign 9 to v218:1
assign rdx to v216:1
assign 2 to v216:1
blocking v195 pick register rcx
assign rax to v215:0
assign 0 to v215:0
assign rdi to v213:0
assign 7 to v213:0
assign rcx to v195:4
assign 1 to v195:4
assign rdi to v211:0
assign 7 to v211:0
assign r8 to v209:0
assign 8 to v209:0
assign rcx to v195:3
assign 1 to v195:3
assign rdi to v210:0
assign 7 to v210:0
assign rdi to v200:0
assign 7 to v200:0
assign r9 to v47:1
assign 9 to v47:1
assign r12 to v192:1
assign 12 to v192:1
assign r14 to v207:0
assign 14 to v207:0
assign r8 to v208:0
assign 8 to v208:0
assign r8 to v199:0
assign 8 to v199:0
assign r15 to v205:0
assign 15 to v205:0
assign r14 to v206:0
assign 14 to v206:0
assign r14 to v198:0
assign 14 to v198:0
assign rax to v203:0
assign 0 to v203:0
assign r15 to v204:0
assign 15 to v204:0
assign r15 to v197:0
assign 15 to v197:0
assign rdx to v194:0
assign 2 to v194:0
assign rax to v202:0
assign 0 to v202:0
assign rax to v191:0
assign 0 to v191:0
assign rsi to v201:1
assign 6 to v201:1
assign rdi to v196:0
assign 7 to v196:0
assign rcx to v193:0
assign 1 to v193:0
assign rcx to v0:0
assign 1 to v0:0
assign rdi to v180:1
assign 7 to v180:1
assign rax to v8:1
assign 0 to v8:1
assign r8 to v10:0
assign 8 to v10:0
assign r11 to v3:1
assign 11 to v3:1
assign r14 to v4:1
assign 14 to v4:1
assign rbx to v130:1
assign 3 to v130:1
assign r12 to v188:0
assign 12 to v188:0
assign r15 to v190:0
assign 15 to v190:0
assign r15 to v189:0
assign 15 to v189:0
assign r12 to v126:0
assign 12 to v126:0
assign r15 to v155:0
assign 15 to v155:0
assign rdx to v187:0
assign 2 to v187:0
assign rdx to v186:0
assign 2 to v186:0
assign rdx to v182:0
assign 2 to v182:0
blocking v52 pick register rcx
assign rcx to v52:1
assign 1 to v52:1
v0:0 not intersect with v104:0, removed
v0:1 intersect with v104:0, adding
v0:0 not intersect with v102:0, removed
v0:1 intersect with v102:0, adding
v0:1 intersect with v180:1, adding
assign rsi to v50:1
assign 6 to v50:1
blocking v52 pick register rcx
blocking v182 pick register rdx
blocking v180 pick register rdi
blocking v10 pick register r8
blocking v47 pick register r9
blocking v3 pick register r11
blocking v126 pick register r12
blocking v4 pick register r14
blocking v155 pick register r15
assign rcx to v52:4
assign 1 to v52:4
assign rdx to v182:3
assign 2 to v182:3
assign r15 to v155:3
assign 15 to v155:3
assign r12 to v126:3
assign 12 to v126:3
assign rbx to v130:3
assign 3 to v130:3
assign r14 to v4:4
assign 14 to v4:4
assign r11 to v3:4
assign 11 to v3:4
assign r8 to v10:3
assign 8 to v10:3
assign rax to v8:3
assign 0 to v8:3
assign rdi to v180:4
assign 7 to v180:4
assign r9 to v47:4
assign 9 to v47:4
assign rdx to v182:2
assign 2 to v182:2
assign r9 to v47:3
assign 9 to v47:3
assign rsi to v163:0
assign 6 to v163:0
assign rdx to v181:0
assign 2 to v181:0
assign rdx to v164:0
assign 2 to v164:0
assign rdi to v180:3
assign 7 to v180:3
assign r14 to v4:3
assign 14 to v4:3
blocking v146 pick register rdi
assign rdi to v146:0
assign 7 to v146:0
blocking v179 pick register rax
assign rax to v179:0
assign 0 to v179:0
assign rax to v147:0
assign 0 to v147:0
blocking v175 pick register r14
assign r14 to v175:0
assign 14 to v175:0
assign rcx to v52:3
assign 1 to v52:3
blocking v163 pick register rcx
blocking v52 pick register rcx
blocking v146 pick register rdi
blocking v47 pick register r9
blocking v175 pick register r14
assign rcx to v52:7
assign 1 to v52:7
assign r14 to v175:3
assign 14 to v175:3
assign rax to v147:2
assign 0 to v147:2
assign rdi to v146:3
assign 7 to v146:3
assign rdx to v164:2
assign 2 to v164:2
assign rsi to v163:3
assign 6 to v163:3
assign r9 to v47:7
assign 9 to v47:7
assign r8 to v10:5
assign 8 to v10:5
assign r11 to v3:6
assign 11 to v3:6
assign rbx to v130:5
assign 3 to v130:5
assign r12 to v126:5
assign 12 to v126:5
assign r15 to v155:5
assign 15 to v155:5
assign r9 to v47:6
assign 9 to v47:6
assign r14 to v175:2
assign 14 to v175:2
blocking v172 pick register r12
assign r12 to v172:0
assign 12 to v172:0
assign r14 to v174:0
assign 14 to v174:0
assign r14 to v173:0
assign 14 to v173:0
assign rsi to v163:2
assign 6 to v163:2
assign rdi to v146:2
assign 7 to v146:2
assign r12 to v168:0
assign 12 to v168:0
assign rcx to v52:6
assign 1 to v52:6
assign r14 to v170:1
assign 14 to v170:1
assign r14 to v147:3
assign 14 to v147:3
blocking v163 pick register rcx
blocking v52 pick register rcx
blocking v146 pick register rdi
blocking v47 pick register r9
blocking v168 pick register r12
assign rcx to v52:10
assign 1 to v52:10
assign r12 to v168:3
assign 12 to v168:3
assign rdi to v146:6
assign 7 to v146:6
assign rsi to v163:6
assign 6 to v163:6
assign r9 to v47:10
assign 9 to v47:10
assign r15 to v155:7
assign 15 to v155:7
assign rbx to v130:7
assign 3 to v130:7
assign r11 to v3:8
assign 11 to v3:8
assign r8 to v10:7
assign 8 to v10:7
assign rdx to v164:4
assign 2 to v164:4
assign rax to v147:5
assign 0 to v147:5
assign r9 to v47:9
assign 9 to v47:9
assign r12 to v168:2
assign 12 to v168:2
blocking v165 pick register r8
assign r8 to v165:0
assign 8 to v165:0
assign r12 to v167:0
assign 12 to v167:0
assign r12 to v166:0
assign 12 to v166:0
assign rsi to v163:5
assign 6 to v163:5
assign rdi to v146:5
assign 7 to v146:5
assign r8 to v159:0
assign 8 to v159:0
assign rcx to v52:9
assign 1 to v52:9
assign r12 to v161:1
assign 12 to v161:1
assign rsi to v162:1
assign 6 to v162:1
assign r12 to v147:6
assign 12 to v147:6
assign r14 to v130:8
assign 14 to v130:8
blocking v52 pick register rcx
blocking v146 pick register rdi
blocking v159 pick register r8
blocking v47 pick register r9
assign rcx to v52:13
assign 1 to v52:13
assign r8 to v159:3
assign 8 to v159:3
assign rdi to v146:9
assign 7 to v146:9
assign r9 to v47:13
assign 9 to v47:13
assign rax to v147:8
assign 0 to v147:8
assign r11 to v3:10
assign 11 to v3:10
assign rbx to v130:10
assign 3 to v130:10
assign r15 to v155:9
assign 15 to v155:9
assign r8 to v159:2
assign 8 to v159:2
assign r9 to v47:12
assign 9 to v47:12
assign r12 to v156:0
assign 12 to v156:0
assign r8 to v158:0
assign 8 to v158:0
assign r8 to v157:0
assign 8 to v157:0
assign r8 to v10:2
assign 8 to v10:2
assign r15 to v155:2
assign 15 to v155:2
assign r12 to v151:0
assign 12 to v151:0
assign rcx to v52:12
assign 1 to v52:12
assign r14 to v153:1
assign 14 to v153:1
assign rsi to v154:1
assign 6 to v154:1
assign r14 to v147:9
assign 14 to v147:9
assign r15 to v130:11
assign 15 to v130:11
blocking v52 pick register rcx
blocking v10 pick register r8
blocking v47 pick register r9
blocking v151 pick register r12
assign rcx to v52:16
assign 1 to v52:16
assign r12 to v151:3
assign 12 to v151:3
assign r8 to v10:11
assign 8 to v10:11
assign r9 to v47:16
assign 9 to v47:16
assign rbx to v130:13
assign 3 to v130:13
assign r11 to v3:12
assign 11 to v3:12
assign rax to v147:11
assign 0 to v147:11
assign rdi to v146:11
assign 7 to v146:11
assign r9 to v47:15
assign 9 to v47:15
assign r12 to v151:2
assign 12 to v151:2
assign rdx to v148:0
assign 2 to v148:0
assign r12 to v150:0
assign 12 to v150:0
assign r12 to v149:0
assign 12 to v149:0
assign rdi to v146:8
assign 7 to v146:8
assign rdi to v142:0
assign 7 to v142:0
assign rcx to v52:15
assign 1 to v52:15
assign r12 to v144:1
assign 12 to v144:1
assign rsi to v145:1
assign 6 to v145:1
assign r12 to v130:14
assign 12 to v130:14
blocking v52 pick register rcx
blocking v142 pick register rdi
blocking v47 pick register r9
assign rcx to v52:19
assign 1 to v52:19
assign rdi to v142:3
assign 7 to v142:3
assign r9 to v47:19
assign 9 to v47:19
assign r11 to v3:14
assign 11 to v3:14
assign rbx to v130:16
assign 3 to v130:16
assign r8 to v10:13
assign 8 to v10:13
assign rdi to v142:2
assign 7 to v142:2
assign r9 to v47:18
assign 9 to v47:18
assign r12 to v139:0
assign 12 to v139:0
assign rdi to v141:0
assign 7 to v141:0
assign rdi to v140:0
assign 7 to v140:0
assign rcx to v52:18
assign 1 to v52:18
assign r12 to v126:2
assign 12 to v126:2
assign rdi to v137:1
assign 7 to v137:1
assign rsi to v138:1
assign 6 to v138:1
assign rdi to v130:17
assign 7 to v130:17
blocking v52 pick register rcx
blocking v47 pick register r9
blocking v126 pick register r12
assign r12 to v126:9
assign 12 to v126:9
assign rcx to v52:22
assign 1 to v52:22
assign r9 to v47:22
assign 9 to v47:22
assign r8 to v10:15
assign 8 to v10:15
assign rbx to v130:19
assign 3 to v130:19
assign r11 to v3:16
assign 11 to v3:16
assign r9 to v47:21
assign 9 to v47:21
assign r12 to v126:8
assign 12 to v126:8
assign rax to v128:0
assign 0 to v128:0
assign rdx to v135:0
assign 2 to v135:0
assign rdi to v133:0
assign 7 to v133:0
assign rdx to v127:0
assign 2 to v127:0
assign r14 to v134:0
assign 14 to v134:0
assign rdi to v132:0
assign 7 to v132:0
assign rsi to v131:1
assign 6 to v131:1
assign rdi to v130:20
assign 7 to v130:20
blocking v47 pick register r9
blocking v126 pick register r12
assign rax to v129:0
assign 0 to v129:0
assign rdx to v127:2
assign 2 to v127:2
assign r12 to v126:12
assign 12 to v126:12
assign r9 to v47:25
assign 9 to v47:25
assign r11 to v3:18
assign 11 to v3:18
assign rbx to v130:22
assign 3 to v130:22
assign r8 to v10:17
assign 8 to v10:17
assign rcx to v52:24
assign 1 to v52:24
assign rax to v109:0
assign 0 to v109:0
assign r12 to v126:11
assign 12 to v126:11
assign rdi to v107:1
assign 7 to v107:1
assign rsi to v108:1
assign 6 to v108:1
assign rdi to v130:23
assign 7 to v130:23
assign rcx to v52:26
assign 1 to v52:26
assign r8 to v10:19
assign 8 to v10:19
assign rbx to v130:25
assign 3 to v130:25
assign r11 to v3:20
assign 11 to v3:20
assign r9 to v47:27
assign 9 to v47:27
assign rdi to v105:1
assign 7 to v105:1
assign rcx to v52:21
assign 1 to v52:21
assign r8 to v10:10
assign 8 to v10:10
assign r9 to v47:24
assign 9 to v47:24
assign r11 to v3:3
assign 11 to v3:3
assign rdi to v36:0
assign 7 to v36:0
assign rax to v0:2
assign 0 to v0:2
assign r12 to v4:6
assign 12 to v4:6
assign r14 to v102:0
assign 14 to v102:0
assign r15 to v104:0
assign 15 to v104:0
assign r15 to v103:0
assign 15 to v103:0
assign rdx to v33:0
assign 2 to v33:0
assign r14 to v69:0
assign 14 to v69:0
assign r15 to v101:0
assign 15 to v101:0
assign r15 to v100:0
assign 15 to v100:0
blocking v96 pick register rax
assign rax to v96:0
assign 0 to v96:0
assign r15 to v98:1
assign 15 to v98:1
assign rsi to v99:1
assign 6 to v99:1
assign r15 to v96:1
assign 15 to v96:1
blocking v52 pick register rcx
blocking v33 pick register rdx
blocking v36 pick register rdi
blocking v10 pick register r8
blocking v47 pick register r9
blocking v4 pick register r12
blocking v69 pick register r14
blocking v96 pick register rcx
assign rax to v96:4
assign 0 to v96:4
assign r14 to v69:3
assign 14 to v69:3
assign rdx to v33:3
assign 2 to v33:3
assign r12 to v4:9
assign 12 to v4:9
assign rdi to v36:3
assign 7 to v36:3
assign r11 to v3:22
assign 11 to v3:22
assign r9 to v47:30
assign 9 to v47:30
assign r8 to v10:22
assign 8 to v10:22
assign rcx to v52:29
assign 1 to v52:29
assign rbx to v130:27
assign 3 to v130:27
assign r9 to v47:29
assign 9 to v47:29
assign r15 to v96:3
assign 15 to v96:3
assign rax to v78:0
assign 0 to v78:0
assign r15 to v95:0
assign 15 to v95:0
assign r15 to v79:0
assign 15 to v79:0
assign r12 to v4:8
assign 12 to v4:8
assign rsi to v60:0
assign 6 to v60:0
blocking v94 pick register rdx
assign rdx to v94:0
assign 2 to v94:0
assign rdx to v61:0
assign 2 to v61:0
blocking v90 pick register r12
assign r12 to v90:0
assign 12 to v90:0
assign rcx to v52:28
assign 1 to v52:28
blocking v78 pick register rcx
blocking v60 pick register rcx
blocking v52 pick register rcx
blocking v47 pick register r9
blocking v90 pick register r12
assign rcx to v52:32
assign 1 to v52:32
assign r12 to v90:3
assign 12 to v90:3
assign rdx to v61:2
assign 2 to v61:2
assign rsi to v60:3
assign 6 to v60:3
assign r15 to v79:2
assign 15 to v79:2
assign rax to v78:3
assign 0 to v78:3
assign r9 to v47:33
assign 9 to v47:33
assign rbx to v130:29
assign 3 to v130:29
assign r8 to v10:24
assign 8 to v10:24
assign r11 to v3:24
assign 11 to v3:24
assign rdi to v36:5
assign 7 to v36:5
assign r14 to v69:5
assign 14 to v69:5
assign r9 to v47:32
assign 9 to v47:32
assign r12 to v90:2
assign 12 to v90:2
blocking v87 pick register r8
assign r8 to v87:0
assign 8 to v87:0
assign r12 to v89:0
assign 12 to v89:0
assign r12 to v88:0
assign 12 to v88:0
assign rdi to v36:2
assign 7 to v36:2
assign rax to v78:2
assign 0 to v78:2
assign rsi to v60:2
assign 6 to v60:2
assign r8 to v83:0
assign 8 to v83:0
assign rcx to v52:31
assign 1 to v52:31
assign r12 to v85:1
assign 12 to v85:1
assign r12 to v78:4
assign 12 to v78:4
blocking v60 pick register rcx
blocking v52 pick register rcx
blocking v36 pick register rdi
blocking v83 pick register r8
blocking v47 pick register r9
blocking v78 pick register rcx
assign rcx to v52:35
assign 1 to v52:35
assign r8 to v83:3
assign 8 to v83:3
assign rsi to v60:6
assign 6 to v60:6
assign rax to v78:7
assign 0 to v78:7
assign rdi to v36:8
assign 7 to v36:8
assign r9 to v47:36
assign 9 to v47:36
assign r14 to v69:7
assign 14 to v69:7
assign r11 to v3:26
assign 11 to v3:26
assign rbx to v130:31
assign 3 to v130:31
assign r15 to v79:4
assign 15 to v79:4
assign rdx to v61:4
assign 2 to v61:4
assign r8 to v83:2
assign 8 to v83:2
assign r9 to v47:35
assign 9 to v47:35
assign r12 to v80:0
assign 12 to v80:0
assign r8 to v82:0
assign 8 to v82:0
assign r8 to v81:0
assign 8 to v81:0
assign rdi to v36:7
assign 7 to v36:7
assign r8 to v78:6
assign 8 to v78:6
assign rsi to v60:5
assign 6 to v60:5
assign r8 to v74:0
assign 8 to v74:0
assign rcx to v52:34
assign 1 to v52:34
assign r12 to v76:1
assign 12 to v76:1
assign r15 to v77:1
assign 15 to v77:1
assign r12 to v130:32
assign 12 to v130:32
assign r15 to v60:7
assign 15 to v60:7
blocking v52 pick register rcx
blocking v36 pick register rdi
blocking v74 pick register r8
blocking v47 pick register r9
blocking v60 pick register rcx
assign rcx to v52:38
assign 1 to v52:38
assign r8 to v74:3
assign 8 to v74:3
assign rsi to v60:10
assign 6 to v60:10
assign rdi to v36:11
assign 7 to v36:11
assign r9 to v47:39
assign 9 to v47:39
assign rdx to v61:6
assign 2 to v61:6
assign rbx to v130:34
assign 3 to v130:34
assign r11 to v3:28
assign 11 to v3:28
assign r14 to v69:9
assign 14 to v69:9
assign r8 to v74:2
assign 8 to v74:2
assign r9 to v47:38
assign 9 to v47:38
assign r12 to v71:0
assign 12 to v71:0
assign r8 to v73:0
assign 8 to v73:0
assign r8 to v72:0
assign 8 to v72:0
assign rdi to v36:10
assign 7 to v36:10
assign r8 to v10:21
assign 8 to v10:21
assign r14 to v69:2
assign 14 to v69:2
assign r12 to v65:0
assign 12 to v65:0
assign rcx to v52:37
assign 1 to v52:37
assign r14 to v67:1
assign 14 to v67:1
assign r15 to v68:1
assign 15 to v68:1
assign r14 to v130:35
assign 14 to v130:35
assign r15 to v60:11
assign 15 to v60:11
blocking v52 pick register rcx
blocking v36 pick register rdi
blocking v10 pick register r8
blocking v47 pick register r9
blocking v65 pick register r12
assign rcx to v52:41
assign 1 to v52:41
assign r12 to v65:3
assign 12 to v65:3
assign r8 to v10:28
assign 8 to v10:28
assign rdi to v36:14
assign 7 to v36:14
assign r9 to v47:42
assign 9 to v47:42
assign r11 to v3:30
assign 11 to v3:30
assign rbx to v130:37
assign 3 to v130:37
assign rdx to v61:8
assign 2 to v61:8
assign rsi to v60:13
assign 6 to v60:13
assign r9 to v47:41
assign 9 to v47:41
assign r12 to v65:2
assign 12 to v65:2
assign rax to v62:0
assign 0 to v62:0
assign r12 to v64:0
assign 12 to v64:0
assign r12 to v63:0
assign 12 to v63:0
assign r12 to v60:9
assign 12 to v60:9
assign r12 to v56:0
assign 12 to v56:0
assign rcx to v52:40
assign 1 to v52:40
assign r14 to v58:1
assign 14 to v58:1
assign rsi to v59:1
assign 6 to v59:1
assign r14 to v130:38
assign 14 to v130:38
blocking v52 pick register rcx
blocking v47 pick register r9
blocking v56 pick register r12
assign rcx to v52:44
assign 1 to v52:44
assign r12 to v56:3
assign 12 to v56:3
assign r9 to v47:45
assign 9 to v47:45
assign rbx to v130:40
assign 3 to v130:40
assign r11 to v3:32
assign 11 to v3:32
assign rdi to v36:16
assign 7 to v36:16
assign r8 to v10:30
assign 8 to v10:30
assign r9 to v47:44
assign 9 to v47:44
assign r12 to v56:2
assign 12 to v56:2
assign rax to v53:0
assign 0 to v53:0
assign r12 to v55:0
assign 12 to v55:0
assign r12 to v54:0
assign 12 to v54:0
assign rdi to v36:13
assign 7 to v36:13
assign rcx to v52:43
assign 1 to v52:43
assign rdx to v33:2
assign 2 to v33:2
assign r12 to v49:1
assign 12 to v49:1
assign rsi to v51:1
assign 6 to v51:1
assign r12 to v130:41
assign 12 to v130:41
blocking v33 pick register rdx
blocking v36 pick register rdi
blocking v47 pick register r9
assign rdx to v33:7
assign 2 to v33:7
assign rcx to v52:46
assign 1 to v52:46
assign rdi to v36:19
assign 7 to v36:19
assign r9 to v47:48
assign 9 to v47:48
assign r8 to v10:32
assign 8 to v10:32
assign r11 to v3:34
assign 11 to v3:34
assign rbx to v130:43
assign 3 to v130:43
assign rdx to v33:6
assign 2 to v33:6
assign r9 to v47:47
assign 9 to v47:47
assign r12 to v38:0
assign 12 to v38:0
assign r14 to v46:0
assign 14 to v46:0
assign r14 to v37:0
assign 14 to v37:0
assign rax to v45:0
assign 0 to v45:0
assign rax to v43:0
assign 0 to v43:0
assign r15 to v44:0
assign 15 to v44:0
assign rdi to v36:18
assign 7 to v36:18
assign r12 to v42:0
assign 12 to v42:0
assign rsi to v41:1
assign 6 to v41:1
assign r12 to v130:44
assign 12 to v130:44
blocking v33 pick register rdx
blocking v36 pick register rdi
assign rax to v39:0
assign 0 to v39:0
assign rdi to v36:22
assign 7 to v36:22
assign r14 to v37:2
assign 14 to v37:2
assign r9 to v47:50
assign 9 to v47:50
assign rdx to v33:10
assign 2 to v33:10
assign rbx to v130:46
assign 3 to v130:46
assign r11 to v3:36
assign 11 to v3:36
assign r8 to v10:34
assign 8 to v10:34
assign rcx to v52:48
assign 1 to v52:48
assign r12 to v15:0
assign 12 to v15:0
assign rdi to v36:21
assign 7 to v36:21
assign r15 to v12:0
assign 15 to v12:0
assign r14 to v35:0
assign 14 to v35:0
assign rdx to v33:9
assign 2 to v33:9
assign rdi to v13:1
assign 7 to v13:1
assign rsi to v14:1
assign 6 to v14:1
assign rdi to v130:47
assign 7 to v130:47
assign r15 to v12:2
assign 15 to v12:2
assign rcx to v52:50
assign 1 to v52:50
assign r8 to v10:36
assign 8 to v10:36
assign r11 to v3:38
assign 11 to v3:38
assign rbx to v130:49
assign 3 to v130:49
assign r9 to v47:52
assign 9 to v47:52
assign r12 to v4:11
assign 12 to v4:11
assign rax to v0:4
assign 0 to v0:4
assign r8 to v10:27
assign 8 to v10:27
assign r8 to v6:0
assign 8 to v6:0
assign rcx to v7:1
assign 1 to v7:1
assign rsi to v9:1
assign 6 to v9:1
assign rcx to v0:5
assign 1 to v0:5
assign rdi to v130:50
assign 7 to v130:50
assign r8 to v6:2
assign 8 to v6:2
assign rax to v0:7
assign 0 to v0:7
assign r12 to v4:13
assign 12 to v4:13
assign r9 to v47:54
assign 9 to v47:54
assign rbx to v130:52
assign 3 to v130:52
assign r11 to v3:40
assign 11 to v3:40
assign rcx to v0:8
assign 1 to v0:8
spill count : 179
add v217->v212
add v213->v215
add v209->v211
add v210->v211
add v47->v200
add v192->v200
add v192->v200
add v207->v209
add v208->v209
add v47->v199
add v192->v199
add v192->v199
add v205->v207
add v206->v207
add v47->v198
add v192->v198
add v192->v198
add v203->v205
add v204->v205
add v47->v197
add v192->v197
add v192->v197
add v194->v203
add v202->v203
add v201->v191
add v200->v191
add v199->v191
add v198->v191
add v197->v191
add v196->v194
add v193->v194
add v180->v0
add v192->v0
add v191->v0
add v188->v0
add v190->v0
adding pairs 2, v10:0x7fffd4045298, v188:0x7fffd403e6b0
add v180->v3
add v155->v3
add v187->v3
adding pairs 2, v10:0x7fffd4045298, v155:0x7fffd403eac8
add v52->v182
add v47->v182
add v163->v182
add v181->v182
add v123->v163
add v180->v4
add v146->v4
add v179->v4
add v175->v146
add v52->v175
add v47->v175
add v172->v175
add v174->v175
add v122->v172
add v125->v163
add v168->v146
add v52->v168
add v47->v168
add v165->v168
add v167->v168
add v124->v165
add v121->v163
add v159->v146
add v52->v159
add v47->v159
add v156->v159
add v158->v159
add v120->v156
adding pairs 2, v10:0x7fffd4012b68, v155:0x7fffd4012de0
add v52->v151
add v47->v151
add v148->v151
add v150->v151
add v117->v148
add v142->v146
add v52->v142
add v47->v142
add v139->v142
add v141->v142
add v116->v139
add v52->v126
add v47->v126
add v128->v126
add v135->v126
add v133->v128
add v134->v127
add v111->v109
add v102->v0
add v104->v0
adding pairs 2, v10:0x7fffd401c688, v102:0x7fffd40419a0
add v69->v3
add v101->v3
adding pairs 2, v10:0x7fffd401c688, v69:0x7fffd4041c20
add v52->v96
add v47->v96
add v78->v96
add v95->v96
add v30->v78
add v60->v4
add v94->v4
add v90->v60
add v52->v90
add v47->v90
add v87->v90
add v89->v90
adding pairs 3, v36:0x7fffd4077240, v87:0x7fffd4042700
add v32->v78
add v83->v60
add v52->v83
add v47->v83
add v80->v83
add v82->v83
adding pairs 3, v36:0x7fffd407a420, v80:0x7fffd4042c70
add v28->v78
add v74->v60
add v52->v74
add v47->v74
add v71->v74
add v73->v74
adding pairs 3, v36:0x7fffd407b9b0, v71:0x7fffd40431e0
adding pairs 2, v10:0x7fffd4077318, v69:0x7fffd4077450
add v52->v65
add v47->v65
add v62->v65
add v64->v65
add v24->v62
add v56->v60
add v52->v56
add v47->v56
add v53->v56
add v55->v56
adding pairs 3, v36:0x7fffd407ce30, v53:0x7fffd4043b80
add v52->v33
add v47->v33
add v38->v33
add v46->v33
add v45->v38
add v44->v37
add v12->v36
add v35->v33
adding pairs 3, v36:0x7fffd407ff50, v15:0x7fffd4044f50
add v6->v10
gap () () 
          [stack:-1|t] = ArchNop
gap (v2(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v3(-) = [stack:-2|t];) () 
          [stack:-3|t] = ArchNop
gap (v4(-) = [stack:-3|t];) () 
          [rsi|R|t] = ArchNop
gap (v5(-) = [rsi|R|t];) () 
          [constant:130] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:433] [immediate:434]
gap () () 
          [constant:222] = ArchNop
gap () () 
          [constant:223] = ArchNop
gap () () 
          [constant:221] = ArchNop
gap () () 
          v220(R) = ArchStackCheckOffset
gap () () 
          X64Push v220(-)
gap () ([rbx|R|w64] = v221(-); [rax|R|w64] = v222(-); [rsi|R|t] = v223(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:431] #-1 #66 [immediate:432] v2(S) v3(S) v4(S) v5(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:430]
gap () () 
          ArchJmp [immediate:429]
gap () () 
          [constant:195] = ArchNop
gap () () 
          v212(R) = X64Movq : MR v195(R)
gap () () 
          [constant:218] = ArchNop
gap () () 
          [constant:216] = ArchNop
gap () () 
          v217(R) = X64Lea : MRI v212(R) [immediate:428]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v218(R) v217(R) [immediate:426] [immediate:427]
gap () () 
          ArchJmp [immediate:425]
gap () ([rdx|R|w64] = v216(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:424] #-1 [rdx|R|w64]
gap (v215(-) = [rax|R|tp];) () 
          v213(R) = X64Lea : MRI v215(R) [immediate:423]
gap () (v211 = v213(-);) 
          ArchJmp [immediate:422]
gap () (v211 = v212(-);) 
          ArchJmp [immediate:421]
gap () () 
          v209(R) = X64Lea : MRI v211(R) [immediate:420]
gap () () 
          X64Movq : MR v195(R) v209(R)
gap () () 
          v210(R) = X64Lea : MRI v211(R) [immediate:419]
gap () (v200 = v210(-);) 
          v200(1) = ArchNop v200
gap () () 
          [constant:47] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:418] v47(R)
gap () () 
          [constant:192] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:417] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:416] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:414] [immediate:415]
gap () () 
          v207(R) = X64Lea : MRI v209(R) [immediate:413]
gap () () 
          X64Movq : MR v195(R) v207(R)
gap () () 
          v208(R) = X64Lea : MRI v209(R) [immediate:412]
gap () (v199 = v208(-);) 
          v199(1) = ArchNop v199
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:411] v47(R)
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:410] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:409] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:407] [immediate:408]
gap () () 
          v205(R) = X64Lea : MRI v207(R) [immediate:406]
gap () () 
          X64Movq : MR v195(R) v205(R)
gap () () 
          v206(R) = X64Lea : MRI v207(R) [immediate:405]
gap () (v198 = v206(-);) 
          v198(1) = ArchNop v198
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:404] v47(R)
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:403] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:402] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:400] [immediate:401]
gap () () 
          v203(R) = X64Lea : MRI v205(R) [immediate:399]
gap () () 
          X64Movq : MR v195(R) v203(R)
gap () () 
          v204(R) = X64Lea : MRI v205(R) [immediate:398]
gap () (v197 = v204(-);) 
          v197(1) = ArchNop v197
gap () () 
          X64MovqCompressTagged : MRI v197(R) [immediate:397] v47(R)
gap () () 
          X64MovqCompressTagged : MRI v197(R) [immediate:396] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v197(R) [immediate:395] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v197(R) [immediate:393] [immediate:394]
gap () () 
          v194(R) = X64Lea : MRI v203(R) [immediate:392]
gap () () 
          X64Movq : MR v195(R) v194(R)
gap () () 
          v202(R) = X64Lea : MRI v203(R) [immediate:391]
gap () (v191 = v202(-);) 
          v191(1) = ArchNop v191
gap () () 
          [constant:201] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v191(R) [immediate:390] v201(R)
gap () () 
          X64MovqCompressTagged : MRI v191(R) [immediate:388] [immediate:389]
gap () () 
          X64MovqCompressTagged : MRI v191(R) [immediate:387] v200(R)
gap () () 
          X64MovqCompressTagged : MRI v191(R) [immediate:386] v199(R)
gap () () 
          X64MovqCompressTagged : MRI v191(R) [immediate:385] v198(R)
gap () () 
          X64MovqCompressTagged : MRI v191(R) [immediate:384] v197(R)
gap () () 
          v196(R) = X64Lea : MRI v194(R) [immediate:383]
gap () () 
          X64Movq : MR v195(R) v196(R)
gap () () 
          v193(R) = X64Lea : MRI v194(R) [immediate:382]
gap () (v0 = v193(-);) 
          v0(1) = ArchNop v0
gap () () 
          [constant:8] = ArchNop
gap () () 
          [constant:180] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:381] v180(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:380] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:379] v191(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:377] [immediate:378]
gap () (v10 = v8(-);) 
          ArchJmp [immediate:376]
gap () () 
          X64Cmp32 && branch if unsigned less than v10 #4 [immediate:374] [immediate:375]
gap () () 
          v188(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:373]
gap () () 
          v190(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:372]
gap () () 
          [constant:105] = ArchNop
gap () (v189(R) = v190(-);) 
          v189(1) = X64Sar32 v189(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v10(R) v189 #65 [immediate:370] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:371]
gap () () 
          v126(R) = X64MovqDecompressAnyTagged : MR4I v188(R) v10(R) [immediate:369]
gap () () 
          [constant:50] = ArchNop
gap () () 
          [constant:52] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v3 #1 #64 [immediate:367] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:368]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:364] v180(R) #63 [immediate:365] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:366]
gap () () 
          v155(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:363]
gap () () 
          v187(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:362]
gap () (v186(R) = v187(-);) 
          v186(1) = X64Sar32 v186(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v10(R) v186 #62 [immediate:360] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:361]
gap () () 
          v182(R) = X64MovqDecompressAnyTagged : MR4I v155(R) v10(R) [immediate:359]
gap () () 
          X64Test32 && deoptimize if equal v182 #1 #61 [immediate:357] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:358]
gap () () 
          X64Cmp32 : MRI && branch if equal v182(R) [immediate:354] v52(R) [immediate:355] [immediate:356]
gap () () 
          ArchJmp [immediate:353]
gap () () 
          [constant:185] = ArchNop
gap () () 
          [constant:184] = ArchNop
gap () () 
          X64Push v182(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v184(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v185(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:352] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:351]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v182(R) [immediate:347] v47(R) #60 [immediate:348] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:349] [immediate:350]
gap () () 
          v163(R) = X64MovqDecompressTaggedPointer : MRI v182(R) [immediate:346]
gap () () 
          v181(R) = X64MovqDecompressTaggedSigned : MRI v182(R) [immediate:345]
gap () (v164(R) = v181(-);) 
          v164(1) = X64Sar32 v164(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v164 #0 #59 [immediate:342] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:343] [immediate:344]
gap () () 
          v123(R) = X64Movsd : MRI v163(R) [immediate:341]
gap () () 
          X64Test32 && deoptimize if equal v4 #1 #58 [immediate:338] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:339] [immediate:340]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v4(R) [immediate:334] v180(R) #57 [immediate:335] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:336] [immediate:337]
gap () () 
          v146(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:333]
gap () () 
          v179(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:332]
gap () (v147(R) = v179(-);) 
          v147(1) = X64Sar32 v147(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #0 #56 [immediate:329] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:330] [immediate:331]
gap () () 
          v175(R) = X64MovqDecompressAnyTagged : MRI v146(R) [immediate:328]
gap () () 
          X64Test32 && deoptimize if equal v175 #1 #55 [immediate:325] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:326] [immediate:327]
gap () () 
          X64Cmp32 : MRI && branch if equal v175(R) [immediate:322] v52(R) [immediate:323] [immediate:324]
gap () () 
          ArchJmp [immediate:321]
gap () () 
          [constant:178] = ArchNop
gap () () 
          [constant:177] = ArchNop
gap () () 
          X64Push v175(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v177(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v178(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:320] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:319]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v175(R) [immediate:315] v47(R) #54 [immediate:316] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:317] [immediate:318]
gap () () 
          v172(R) = X64MovqDecompressTaggedPointer : MRI v175(R) [immediate:314]
gap () () 
          v174(R) = X64MovqDecompressTaggedSigned : MRI v175(R) [immediate:313]
gap () (v173(R) = v174(-);) 
          v173(1) = X64Sar32 v173(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v173 #0 #53 [immediate:310] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:311] [immediate:312]
gap () () 
          v122(R) = X64Movsd : MRI v172(R) [immediate:309]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v164 #1 #52 [immediate:306] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:307] [immediate:308]
gap () () 
          v125(R) = X64Movsd : MRI v163(R) [immediate:305]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #1 #51 [immediate:302] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:303] [immediate:304]
gap () () 
          v168(R) = X64MovqDecompressAnyTagged : MRI v146(R) [immediate:301]
gap () () 
          X64Test32 && deoptimize if equal v168 #1 #50 [immediate:298] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:299] [immediate:300]
gap () () 
          X64Cmp32 : MRI && branch if equal v168(R) [immediate:295] v52(R) [immediate:296] [immediate:297]
gap () () 
          ArchJmp [immediate:294]
gap () () 
          [constant:171] = ArchNop
gap () () 
          [constant:170] = ArchNop
gap () () 
          X64Push v168(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v170(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v171(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:293] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:292]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v168(R) [immediate:288] v47(R) #49 [immediate:289] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:290] [immediate:291]
gap () () 
          v165(R) = X64MovqDecompressTaggedPointer : MRI v168(R) [immediate:287]
gap () () 
          v167(R) = X64MovqDecompressTaggedSigned : MRI v168(R) [immediate:286]
gap () (v166(R) = v167(-);) 
          v166(1) = X64Sar32 v166(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v166 #0 #48 [immediate:283] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:284] [immediate:285]
gap () () 
          v124(R) = X64Movsd : MRI v165(R) [immediate:282]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v164 #2 #47 [immediate:279] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:280] [immediate:281]
gap () () 
          v121(R) = X64Movsd : MRI v163(R) [immediate:278]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #2 #46 [immediate:275] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:276] [immediate:277]
gap () () 
          v159(R) = X64MovqDecompressAnyTagged : MRI v146(R) [immediate:274]
gap () () 
          X64Test32 && deoptimize if equal v159 #1 #45 [immediate:271] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:272] [immediate:273]
gap () () 
          X64Cmp32 : MRI && branch if equal v159(R) [immediate:268] v52(R) [immediate:269] [immediate:270]
gap () () 
          ArchJmp [immediate:267]
gap () () 
          [constant:162] = ArchNop
gap () () 
          [constant:161] = ArchNop
gap () () 
          X64Push v159(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v161(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v162(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:266] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:265]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v159(R) [immediate:261] v47(R) #44 [immediate:262] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:263] [immediate:264]
gap () () 
          v156(R) = X64MovqDecompressTaggedPointer : MRI v159(R) [immediate:260]
gap () () 
          v158(R) = X64MovqDecompressTaggedSigned : MRI v159(R) [immediate:259]
gap () (v157(R) = v158(-);) 
          v157(1) = X64Sar32 v157(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v157 #0 #43 [immediate:256] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:257] [immediate:258]
gap () () 
          v120(R) = X64Movsd : MRI v156(R) [immediate:255]
gap () () 
          v151(R) = X64MovqDecompressAnyTagged : MR4I v155(R) v10(R) [immediate:254]
gap () () 
          X64Test32 && deoptimize if equal v151 #1 #42 [immediate:251] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:252] [immediate:253]
gap () () 
          X64Cmp32 : MRI && branch if equal v151(R) [immediate:248] v52(R) [immediate:249] [immediate:250]
gap () () 
          ArchJmp [immediate:247]
gap () () 
          [constant:154] = ArchNop
gap () () 
          [constant:153] = ArchNop
gap () () 
          X64Push v151(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v153(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v154(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:246] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:245]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v151(R) [immediate:241] v47(R) #41 [immediate:242] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:243] [immediate:244]
gap () () 
          v148(R) = X64MovqDecompressTaggedPointer : MRI v151(R) [immediate:240]
gap () () 
          v150(R) = X64MovqDecompressTaggedSigned : MRI v151(R) [immediate:239]
gap () (v149(R) = v150(-);) 
          v149(1) = X64Sar32 v149(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v149 #3 #40 [immediate:236] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:237] [immediate:238]
gap () () 
          v117(R) = X64Movsd : MRI v148(R) [immediate:235]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #3 #39 [immediate:232] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:233] [immediate:234]
gap () () 
          v142(R) = X64MovqDecompressAnyTagged : MRI v146(R) [immediate:231]
gap () () 
          X64Test32 && deoptimize if equal v142 #1 #38 [immediate:228] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:229] [immediate:230]
gap () () 
          X64Cmp32 : MRI && branch if equal v142(R) [immediate:225] v52(R) [immediate:226] [immediate:227]
gap () () 
          ArchJmp [immediate:224]
gap () () 
          [constant:145] = ArchNop
gap () () 
          [constant:144] = ArchNop
gap () () 
          X64Push v142(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v144(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v145(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:223] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:222]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v142(R) [immediate:218] v47(R) #37 [immediate:219] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:220] [immediate:221]
gap () () 
          v139(R) = X64MovqDecompressTaggedPointer : MRI v142(R) [immediate:217]
gap () () 
          v141(R) = X64MovqDecompressTaggedSigned : MRI v142(R) [immediate:216]
gap () (v140(R) = v141(-);) 
          v140(1) = X64Sar32 v140(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v140 #0 #36 [immediate:213] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:214] [immediate:215]
gap () () 
          v116(R) = X64Movsd : MRI v139(R) [immediate:212]
gap () () 
          X64Test32 && deoptimize if equal v126 #1 #35 [immediate:209] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:210] [immediate:211]
gap () () 
          X64Cmp32 : MRI && branch if equal v126(R) [immediate:206] v52(R) [immediate:207] [immediate:208]
gap () () 
          ArchJmp [immediate:205]
gap () () 
          [constant:138] = ArchNop
gap () () 
          [constant:137] = ArchNop
gap () () 
          X64Push v126(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v137(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v138(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:204] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:203]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v126(R) [immediate:199] v47(R) #34 [immediate:200] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:201] [immediate:202]
gap () () 
          v128(R) = X64MovqDecompressTaggedPointer : MRI v126(R) [immediate:198]
gap () () 
          v135(R) = X64MovqDecompressTaggedSigned : MRI v126(R) [immediate:197]
gap () () 
          v133(R) = X64MovqDecompressTaggedSigned : MRI v128(R) [immediate:196]
gap () (v127(R) = v135(-);) 
          v127(1) = X64Sar32 v127(R) #1
gap () () 
          v134(R) = X64Lea32 : MRI v127(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v134 #0 [immediate:194] [immediate:195]
gap () (v132(R) = v133(-);) 
          v132(1) = X64Sar32 v132(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v132 #0 [immediate:192] [immediate:193]
gap () () 
          [constant:131] = ArchNop
gap () ([rax|R|t] = v126(-); [rbx|R|w64] = v130(-); [rsi|R|w64] = v131(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:191] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v129(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v129 #1 #33 [immediate:188] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) [immediate:189] [immediate:190]
gap () (v109 = v129(-);) 
          ArchJmp [immediate:187]
gap () (v109 = v128(-);) 
          ArchJmp [immediate:186]
gap () () 
          X64Cmp32 && branch if unsigned greater than v127 #0 [immediate:184] [immediate:185]
gap () () 
          X64MovqCompressTagged : MRI v126(R) [immediate:182] [immediate:183]
gap () () 
          ArchJmp [immediate:181]
gap () () 
          ArchJmp [immediate:180]
gap () () 
          v118(R) = AVXFloat64Mul v124(R) v125
gap () () 
          v119(R) = AVXFloat64Mul v122(R) v123
gap () () 
          v114(R) = AVXFloat64Mul v120(R) v121
gap () () 
          v115(R) = AVXFloat64Add v118(R) v119
gap () () 
          v112(R) = AVXFloat64Mul v116(R) v117
gap () () 
          v113(R) = AVXFloat64Add v114(R) v115
gap () () 
          v111(R) = AVXFloat64Add v112(R) v113
gap () () 
          X64Movsd : MRI v109(R) [immediate:179] v111(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:177] [immediate:178]
gap () () 
          [constant:108] = ArchNop
gap () () 
          [constant:107] = ArchNop
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v8(-); [rsi|R|t] = v108(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:175] #-1 #32 [immediate:176] v2(S) v3(S) v4(S) v5(S) v0(S) v10(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:174]
gap () () 
          ArchJmp [immediate:173]
gap () (v36 = v105(-);) 
          ArchJmp [immediate:172]
gap () () 
          X64Cmp32 && branch if unsigned less than v36 #4 [immediate:170] [immediate:171]
gap () () 
          v102(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:169]
gap () () 
          v104(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:168]
gap () (v103(R) = v104(-);) 
          v103(1) = X64Sar32 v103(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v10(R) v103 #31 [immediate:166] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:167]
gap () () 
          v33(R) = X64MovqDecompressAnyTagged : MR4I v102(R) v10(R) [immediate:165]
gap () () 
          v69(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:164]
gap () () 
          v101(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:163]
gap () (v100(R) = v101(-);) 
          v100(1) = X64Sar32 v100(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v10(R) v100 #30 [immediate:161] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:162]
gap () () 
          v96(R) = X64MovqDecompressAnyTagged : MR4I v69(R) v10(R) [immediate:160]
gap () () 
          X64Test32 && deoptimize if equal v96 #1 #29 [immediate:158] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:159]
gap () () 
          X64Cmp32 : MRI && branch if equal v96(R) [immediate:155] v52(R) [immediate:156] [immediate:157]
gap () () 
          ArchJmp [immediate:154]
gap () () 
          [constant:99] = ArchNop
gap () () 
          [constant:98] = ArchNop
gap () () 
          X64Push v96(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v98(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v99(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:153] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:152]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v96(R) [immediate:149] v47(R) #28 [immediate:150] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:151]
gap () () 
          v78(R) = X64MovqDecompressTaggedPointer : MRI v96(R) [immediate:148]
gap () () 
          v95(R) = X64MovqDecompressTaggedSigned : MRI v96(R) [immediate:147]
gap () (v79(R) = v95(-);) 
          v79(1) = X64Sar32 v79(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v79 #0 #27 [immediate:145] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:146]
gap () () 
          v30(R) = X64Movsd : MRI v78(R) [immediate:144]
gap () () 
          v60(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:143]
gap () () 
          v94(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:142]
gap () (v61(R) = v94(-);) 
          v61(1) = X64Sar32 v61(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v61 #0 #26 [immediate:140] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:141]
gap () () 
          v90(R) = X64MovqDecompressAnyTagged : MRI v60(R) [immediate:139]
gap () () 
          X64Test32 && deoptimize if equal v90 #1 #25 [immediate:137] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:138]
gap () () 
          X64Cmp32 : MRI && branch if equal v90(R) [immediate:134] v52(R) [immediate:135] [immediate:136]
gap () () 
          ArchJmp [immediate:133]
gap () () 
          [constant:93] = ArchNop
gap () () 
          [constant:92] = ArchNop
gap () () 
          X64Push v90(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v92(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v93(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:132] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:131]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v90(R) [immediate:128] v47(R) #24 [immediate:129] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:130]
gap () () 
          v87(R) = X64MovqDecompressTaggedPointer : MRI v90(R) [immediate:127]
gap () () 
          v89(R) = X64MovqDecompressTaggedSigned : MRI v90(R) [immediate:126]
gap () (v88(R) = v89(-);) 
          v88(1) = X64Sar32 v88(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v36(R) v88 #23 [immediate:124] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:125]
gap () () 
          v29(R) = X64Movsd : MR8I v87(R) v36(R) [immediate:123]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v79 #1 #22 [immediate:121] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:122]
gap () () 
          v32(R) = X64Movsd : MRI v78(R) [immediate:120]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v61 #1 #21 [immediate:118] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:119]
gap () () 
          v83(R) = X64MovqDecompressAnyTagged : MRI v60(R) [immediate:117]
gap () () 
          X64Test32 && deoptimize if equal v83 #1 #20 [immediate:115] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:116]
gap () () 
          X64Cmp32 : MRI && branch if equal v83(R) [immediate:112] v52(R) [immediate:113] [immediate:114]
gap () () 
          ArchJmp [immediate:111]
gap () () 
          [constant:86] = ArchNop
gap () () 
          [constant:85] = ArchNop
gap () () 
          X64Push v83(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v85(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v86(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:110] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:109]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v83(R) [immediate:106] v47(R) #19 [immediate:107] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:108]
gap () () 
          v80(R) = X64MovqDecompressTaggedPointer : MRI v83(R) [immediate:105]
gap () () 
          v82(R) = X64MovqDecompressTaggedSigned : MRI v83(R) [immediate:104]
gap () (v81(R) = v82(-);) 
          v81(1) = X64Sar32 v81(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v36(R) v81 #18 [immediate:102] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:103]
gap () () 
          v31(R) = X64Movsd : MR8I v80(R) v36(R) [immediate:101]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v79 #2 #17 [immediate:99] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:100]
gap () () 
          v28(R) = X64Movsd : MRI v78(R) [immediate:98]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v61 #2 #16 [immediate:96] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:97]
gap () () 
          v74(R) = X64MovqDecompressAnyTagged : MRI v60(R) [immediate:95]
gap () () 
          X64Test32 && deoptimize if equal v74 #1 #15 [immediate:93] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:94]
gap () () 
          X64Cmp32 : MRI && branch if equal v74(R) [immediate:90] v52(R) [immediate:91] [immediate:92]
gap () () 
          ArchJmp [immediate:89]
gap () () 
          [constant:77] = ArchNop
gap () () 
          [constant:76] = ArchNop
gap () () 
          X64Push v74(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v76(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v77(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:88] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:87]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v74(R) [immediate:84] v47(R) #14 [immediate:85] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:86]
gap () () 
          v71(R) = X64MovqDecompressTaggedPointer : MRI v74(R) [immediate:83]
gap () () 
          v73(R) = X64MovqDecompressTaggedSigned : MRI v74(R) [immediate:82]
gap () (v72(R) = v73(-);) 
          v72(1) = X64Sar32 v72(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v36(R) v72 #13 [immediate:80] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:81]
gap () () 
          v27(R) = X64Movsd : MR8I v71(R) v36(R) [immediate:79]
gap () () 
          v65(R) = X64MovqDecompressAnyTagged : MR4I v69(R) v10(R) [immediate:78]
gap () () 
          X64Test32 && deoptimize if equal v65 #1 #12 [immediate:76] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:77]
gap () () 
          X64Cmp32 : MRI && branch if equal v65(R) [immediate:73] v52(R) [immediate:74] [immediate:75]
gap () () 
          ArchJmp [immediate:72]
gap () () 
          [constant:68] = ArchNop
gap () () 
          [constant:67] = ArchNop
gap () () 
          X64Push v65(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v67(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v68(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:71] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:70]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v65(R) [immediate:67] v47(R) #11 [immediate:68] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:69]
gap () () 
          v62(R) = X64MovqDecompressTaggedPointer : MRI v65(R) [immediate:66]
gap () () 
          v64(R) = X64MovqDecompressTaggedSigned : MRI v65(R) [immediate:65]
gap () (v63(R) = v64(-);) 
          v63(1) = X64Sar32 v63(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v63 #3 #10 [immediate:63] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:64]
gap () () 
          v24(R) = X64Movsd : MRI v62(R) [immediate:62]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v61 #3 #9 [immediate:60] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:61]
gap () () 
          v56(R) = X64MovqDecompressAnyTagged : MRI v60(R) [immediate:59]
gap () () 
          X64Test32 && deoptimize if equal v56 #1 #8 [immediate:57] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:58]
gap () () 
          X64Cmp32 : MRI && branch if equal v56(R) [immediate:54] v52(R) [immediate:55] [immediate:56]
gap () () 
          ArchJmp [immediate:53]
gap () () 
          [constant:59] = ArchNop
gap () () 
          [constant:58] = ArchNop
gap () () 
          X64Push v56(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v58(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v59(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:52] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:51]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v56(R) [immediate:48] v47(R) #7 [immediate:49] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:50]
gap () () 
          v53(R) = X64MovqDecompressTaggedPointer : MRI v56(R) [immediate:47]
gap () () 
          v55(R) = X64MovqDecompressTaggedSigned : MRI v56(R) [immediate:46]
gap () (v54(R) = v55(-);) 
          v54(1) = X64Sar32 v54(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v36(R) v54 #6 [immediate:44] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:45]
gap () () 
          v23(R) = X64Movsd : MR8I v53(R) v36(R) [immediate:43]
gap () () 
          X64Test32 && deoptimize if equal v33 #1 #5 [immediate:41] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:42]
gap () () 
          X64Cmp32 : MRI && branch if equal v33(R) [immediate:38] v52(R) [immediate:39] [immediate:40]
gap () () 
          ArchJmp [immediate:37]
gap () () 
          [constant:51] = ArchNop
gap () () 
          [constant:49] = ArchNop
gap () () 
          X64Push v33(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v49(-); [rax|R|w64] = v50(-); [rsi|R|w64] = v51(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:36] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:35]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v33(R) [immediate:32] v47(R) #4 [immediate:33] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:34]
gap () () 
          v38(R) = X64MovqDecompressTaggedPointer : MRI v33(R) [immediate:31]
gap () () 
          v46(R) = X64MovqDecompressTaggedSigned : MRI v33(R) [immediate:30]
gap () (v37(R) = v46(-);) 
          v37(1) = X64Sar32 v37(R) #1
gap () () 
          v45(R) = X64MovqDecompressTaggedSigned : MRI v38(R) [immediate:29]
gap () (v43(R) = v45(-);) 
          v43(1) = X64Sar32 v43(R) #1
gap () () 
          v44(R) = X64Lea32 : MRI v37(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v36(R) v44 #3 [immediate:27] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:28]
gap () () 
          X64Cmp32 && branch if unsigned less than v36(R) v43 [immediate:25] [immediate:26]
gap () () 
          v42(R) = X64Lea32 : MR1 v36(R) v36(R)
gap () () 
          [constant:41] = ArchNop
gap () ([rax|R|t] = v33(-); [rbx|R|w32] = v42(-); [rsi|R|w64] = v41(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:24] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v39(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v39 #1 #2 [immediate:22] v2(-) v3(-) v4(-) v5(S) v0(-) v10(-) v36(-) [immediate:23]
gap () (v15 = v39(-);) 
          ArchJmp [immediate:21]
gap () (v15 = v38(-);) 
          ArchJmp [immediate:20]
gap () () 
          v12(R) = X64Lea32 : MRI v36(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v36(R) v37 [immediate:18] [immediate:19]
gap () () 
          v35(R) = X64Lea32 : MR1 v12(R) v12(R)
gap () () 
          X64MovqCompressTagged : MRI v33(R) [immediate:17] v35(R)
gap () () 
          ArchJmp [immediate:16]
gap () () 
          ArchJmp [immediate:15]
gap () () 
          v25(R) = AVXFloat64Mul v31(R) v32
gap () () 
          v26(R) = AVXFloat64Mul v29(R) v30
gap () () 
          v21(R) = AVXFloat64Mul v27(R) v28
gap () () 
          v22(R) = AVXFloat64Add v25(R) v26
gap () () 
          v19(R) = AVXFloat64Mul v23(R) v24
gap () () 
          v20(R) = AVXFloat64Add v21(R) v22
gap () () 
          v18(R) = AVXFloat64Add v19(R) v20
gap () () 
          X64Movsd : MR8I v15(R) v36(R) [immediate:14] v18(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:12] [immediate:13]
gap () () 
          [constant:14] = ArchNop
gap () () 
          [constant:13] = ArchNop
gap () ([rbx|R|w64] = v13(-); [rax|R|w64] = v8(-); [rsi|R|t] = v14(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:10] #-1 #1 [immediate:11] v2(S) v3(S) v4(S) v5(S) v0(S) v10(S) v12(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:9]
gap () () 
          ArchJmp [immediate:8]
gap () (v36 = v12(-);) 
          ArchJmp [immediate:7]
gap () () 
          v6(R) = X64Lea32 : MRI v10(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:5] [immediate:6]
gap () () 
          [constant:9] = ArchNop
gap () () 
          [constant:7] = ArchNop
gap () ([rbx|R|w64] = v7(-); [rax|R|w64] = v8(-); [rsi|R|t] = v9(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:3] #-1 #0 [immediate:4] v2(S) v3(S) v4(S) v5(S) v0(S) v6(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:2]
gap () () 
          ArchJmp [immediate:1]
gap () (v10 = v6(-);) 
          ArchJmp [immediate:0]
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
gap () () 
          ArchDebugBreak
gap () () 
          ArchThrowTerminator
print sib pairs
2, v10, v69
2, v10, v69
2, v10, v102
2, v10, v155
2, v10, v155
2, v10, v188
3, v36, v71
3, v36, v80
3, v36, v15
3, v36, v53
3, v36, v87
print modrm pairs
1, v35, v33
1, v38, v33
1, v52, v33
1, v55, v56
1, v47, v56
1, v56, v60
1, v64, v65
1, v47, v65
1, v52, v65
1, v73, v74
1, v71, v74
1, v82, v83
1, v74, v60
1, v80, v83
1, v87, v90
1, v12, v36
1, v47, v90
1, v46, v33
1, v60, v4
1, v47, v83
1, v52, v96
1, v135, v126
1, v187, v3
1, v128, v126
1, v47, v126
1, v52, v142
1, v52, v126
1, v142, v146
1, v47, v96
1, v52, v74
1, v101, v3
1, v150, v151
1, v52, v151
1, v167, v168
1, v47, v151
1, v158, v159
1, v44, v37
1, v52, v56
1, v156, v159
1, v47, v159
1, v32, v78
1, v124, v165
1, v213, v215
1, v159, v146
1, v196, v194
1, v165, v168
1, v200, v191
1, v122, v172
1, v69, v3
1, v47, v182
1, v47, v168
1, v179, v4
1, v172, v175
1, v83, v60
1, v175, v146
1, v116, v139
1, v120, v156
1, v47, v175
1, v123, v163
1, v202, v203
1, v181, v182
1, v47, v33
1, v209, v211
1, v30, v78
1, v125, v163
1, v163, v182
1, v28, v78
1, v134, v127
1, v141, v142
1, v205, v207
1, v146, v4
1, v24, v62
1, v192, v197
1, v192, v199
1, v192, v0
1, v192, v198
1, v192, v200
1, v155, v3
1, v117, v148
1, v47, v197
1, v47, v199
1, v47, v198
1, v47, v200
1, v190, v0
1, v188, v0
1, v191, v0
1, v52, v168
1, v52, v159
1, v52, v175
1, v203, v205
1, v121, v163
1, v180, v3
1, v180, v0
1, v89, v90
1, v148, v151
1, v52, v90
1, v102, v0
1, v6, v10
1, v139, v142
1, v47, v74
1, v174, v175
1, v95, v96
1, v210, v211
1, v111, v109
1, v193, v194
1, v78, v96
1, v198, v191
1, v208, v209
1, v201, v191
1, v180, v4
1, v47, v142
1, v194, v203
1, v217, v212
1, v204, v205
1, v52, v83
1, v53, v56
1, v207, v209
1, v206, v207
1, v94, v4
1, v52, v182
1, v62, v65
1, v133, v128
1, v199, v191
1, v168, v146
1, v45, v38
1, v197, v191
1, v90, v60
1, v104, v0
assign xmm0 to v123:0
assign 0 to v123:0
assign xmm0 to v123:2
assign 0 to v123:2
assign xmm1 to v122:0
assign 1 to v122:0
assign xmm2 to v125:0
assign 2 to v125:0
blocking v122 pick register xmm1
assign xmm2 to v125:2
assign 2 to v125:2
assign xmm1 to v122:3
assign 1 to v122:3
assign xmm0 to v123:4
assign 0 to v123:4
assign xmm4 to v124:0
assign 4 to v124:0
assign xmm5 to v121:0
assign 5 to v121:0
blocking v124 pick register xmm4
assign xmm5 to v121:2
assign 5 to v121:2
assign xmm4 to v124:3
assign 4 to v124:3
assign xmm0 to v123:6
assign 0 to v123:6
assign xmm1 to v122:5
assign 1 to v122:5
assign xmm2 to v125:4
assign 2 to v125:4
assign xmm8 to v120:0
assign 8 to v120:0
blocking v120 pick register xmm8
assign xmm8 to v120:3
assign 8 to v120:3
assign xmm2 to v125:6
assign 2 to v125:6
assign xmm1 to v122:7
assign 1 to v122:7
assign xmm0 to v123:8
assign 0 to v123:8
assign xmm4 to v124:5
assign 4 to v124:5
assign xmm5 to v121:4
assign 5 to v121:4
assign xmm6 to v117:0
assign 6 to v117:0
assign xmm6 to v117:2
assign 6 to v117:2
assign xmm5 to v121:6
assign 5 to v121:6
assign xmm4 to v124:7
assign 4 to v124:7
assign xmm0 to v123:10
assign 0 to v123:10
assign xmm1 to v122:9
assign 1 to v122:9
assign xmm2 to v125:8
assign 2 to v125:8
assign xmm8 to v120:5
assign 8 to v120:5
assign xmm9 to v116:0
assign 9 to v116:0
blocking v116 pick register xmm9
assign xmm9 to v116:3
assign 9 to v116:3
assign xmm8 to v120:7
assign 8 to v120:7
assign xmm2 to v125:10
assign 2 to v125:10
assign xmm1 to v122:11
assign 1 to v122:11
assign xmm0 to v123:12
assign 0 to v123:12
assign xmm4 to v124:9
assign 4 to v124:9
assign xmm5 to v121:8
assign 5 to v121:8
assign xmm6 to v117:4
assign 6 to v117:4
assign xmm6 to v117:6
assign 6 to v117:6
assign xmm5 to v121:10
assign 5 to v121:10
assign xmm4 to v124:11
assign 4 to v124:11
assign xmm0 to v123:14
assign 0 to v123:14
assign xmm1 to v122:13
assign 1 to v122:13
assign xmm2 to v125:12
assign 2 to v125:12
assign xmm8 to v120:9
assign 8 to v120:9
assign xmm9 to v116:5
assign 9 to v116:5
assign xmm4 to v124:2
assign 4 to v124:2
assign xmm2 to v118:0
assign 2 to v118:0
assign xmm1 to v122:2
assign 1 to v122:2
assign xmm0 to v119:0
assign 0 to v119:0
assign xmm8 to v120:2
assign 8 to v120:2
assign xmm1 to v114:0
assign 1 to v114:0
assign xmm0 to v115:0
assign 0 to v115:0
assign xmm9 to v116:2
assign 9 to v116:2
assign xmm2 to v112:0
assign 2 to v112:0
assign xmm0 to v113:0
assign 0 to v113:0
assign xmm0 to v111:0
assign 0 to v111:0
assign xmm0 to v30:0
assign 0 to v30:0
assign xmm0 to v30:2
assign 0 to v30:2
assign xmm1 to v29:0
assign 1 to v29:0
assign xmm2 to v32:0
assign 2 to v32:0
blocking v29 pick register xmm1
assign xmm2 to v32:2
assign 2 to v32:2
assign xmm1 to v29:3
assign 1 to v29:3
assign xmm0 to v30:4
assign 0 to v30:4
assign xmm4 to v31:0
assign 4 to v31:0
assign xmm5 to v28:0
assign 5 to v28:0
blocking v31 pick register xmm4
assign xmm5 to v28:2
assign 5 to v28:2
assign xmm4 to v31:3
assign 4 to v31:3
assign xmm0 to v30:6
assign 0 to v30:6
assign xmm1 to v29:5
assign 1 to v29:5
assign xmm2 to v32:4
assign 2 to v32:4
assign xmm8 to v27:0
assign 8 to v27:0
blocking v27 pick register xmm8
assign xmm8 to v27:3
assign 8 to v27:3
assign xmm2 to v32:6
assign 2 to v32:6
assign xmm1 to v29:7
assign 1 to v29:7
assign xmm0 to v30:8
assign 0 to v30:8
assign xmm4 to v31:5
assign 4 to v31:5
assign xmm5 to v28:4
assign 5 to v28:4
assign xmm6 to v24:0
assign 6 to v24:0
assign xmm6 to v24:2
assign 6 to v24:2
assign xmm5 to v28:6
assign 5 to v28:6
assign xmm4 to v31:7
assign 4 to v31:7
assign xmm0 to v30:10
assign 0 to v30:10
assign xmm1 to v29:9
assign 1 to v29:9
assign xmm2 to v32:8
assign 2 to v32:8
assign xmm8 to v27:5
assign 8 to v27:5
assign xmm9 to v23:0
assign 9 to v23:0
blocking v23 pick register xmm9
assign xmm9 to v23:3
assign 9 to v23:3
assign xmm8 to v27:7
assign 8 to v27:7
assign xmm2 to v32:10
assign 2 to v32:10
assign xmm1 to v29:11
assign 1 to v29:11
assign xmm0 to v30:12
assign 0 to v30:12
assign xmm4 to v31:9
assign 4 to v31:9
assign xmm5 to v28:8
assign 5 to v28:8
assign xmm6 to v24:4
assign 6 to v24:4
assign xmm6 to v24:6
assign 6 to v24:6
assign xmm5 to v28:10
assign 5 to v28:10
assign xmm4 to v31:11
assign 4 to v31:11
assign xmm0 to v30:14
assign 0 to v30:14
assign xmm1 to v29:13
assign 1 to v29:13
assign xmm2 to v32:12
assign 2 to v32:12
assign xmm8 to v27:9
assign 8 to v27:9
assign xmm9 to v23:5
assign 9 to v23:5
assign xmm4 to v31:2
assign 4 to v31:2
assign xmm2 to v25:0
assign 2 to v25:0
assign xmm1 to v29:2
assign 1 to v29:2
assign xmm0 to v26:0
assign 0 to v26:0
assign xmm8 to v27:2
assign 8 to v27:2
assign xmm1 to v21:0
assign 1 to v21:0
assign xmm0 to v22:0
assign 0 to v22:0
assign xmm9 to v23:2
assign 9 to v23:2
assign xmm2 to v19:0
assign 2 to v19:0
assign xmm0 to v20:0
assign 0 to v20:0
assign xmm0 to v18:0
assign 0 to v18:0
spill count : 76
--- Raw source ---
(M1, M2) {
      var M = [[],[],[],[]];
      var i = 0;
      var j = 0;
      for (; i < 4; i++) {
        j = 0;
        for (; j < 4; j++) M[i][j] = M1[i][0] * M2[0][j] + M1[i][1] * M2[1][j] + M1[i][2] * M2[2][j] + M1[i][3] * M2[3][j];
      }
      return M;
    }


--- Optimized code ---
optimization_id = 1
source_position = 2472
kind = TURBOFAN
name = MMulti
stack_slots = 20
compiler = turbofan
address = 0x19db000847c1

Instructions (size = 5116)
0x19db00084800     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db00084807     7  483bd9         REX.W cmpq rbx,rcx
0x19db0008480a     a  7418           jz 0x19db00084824  <+0x24>
0x19db0008480c     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db00084816    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db00084820    20  41ffd2         call r10
0x19db00084823    23  cc             int3l
0x19db00084824    24  8b59d0         movl rbx,[rcx-0x30]
0x19db00084827    27  4903dd         REX.W addq rbx,r13
0x19db0008482a    2a  f6430701       testb [rbx+0x7],0x1
0x19db0008482e    2e  740d           jz 0x19db0008483d  <+0x3d>
0x19db00084830    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db0008483a    3a  41ffe2         jmp r10
0x19db0008483d    3d  55             push rbp
0x19db0008483e    3e  4889e5         REX.W movq rbp,rsp
0x19db00084841    41  56             push rsi
0x19db00084842    42  57             push rdi
0x19db00084843    43  50             push rax
0x19db00084844    44  4883ec78       REX.W subq rsp,0x78
0x19db00084848    48  488975d8       REX.W movq [rbp-0x28],rsi
0x19db0008484c    4c  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00084850    50  0f86bd070000   jna 0x19db00085013  <+0x813>
0x19db00084856    56  48b9f87d6d5555550000 REX.W movq rcx,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db00084860    60  488b39         REX.W movq rdi,[rcx]
0x19db00084863    63  4c8d4768       REX.W leaq r8,[rdi+0x68]
0x19db00084867    67  49b9007e6d5555550000 REX.W movq r9,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db00084871    71  4d3901         REX.W cmpq [r9],r8
0x19db00084874    74  0f86cf070000   jna 0x19db00085049  <+0x849>
0x19db0008487a    7a  4c8d4710       REX.W leaq r8,[rdi+0x10]
0x19db0008487e    7e  4c8901         REX.W movq [rcx],r8
0x19db00084881    81  4883c701       REX.W addq rdi,0x1
0x19db00084885    85  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008488f    8f  44894fff       movl [rdi-0x1],r9
0x19db00084893    93  4d8ba558010000 REX.W movq r12,[r13+0x158] (root (empty_fixed_array))
0x19db0008489a    9a  44896703       movl [rdi+0x3],r12
0x19db0008489e    9e  44896707       movl [rdi+0x7],r12
0x19db000848a2    a2  c7470b00000000 movl [rdi+0xb],0x0
0x19db000848a9    a9  4d8d7010       REX.W leaq r14,[r8+0x10]
0x19db000848ad    ad  4c8931         REX.W movq [rcx],r14
0x19db000848b0    b0  4983c001       REX.W addq r8,0x1
0x19db000848b4    b4  458948ff       movl [r8-0x1],r9
0x19db000848b8    b8  45896003       movl [r8+0x3],r12
0x19db000848bc    bc  45896007       movl [r8+0x7],r12
0x19db000848c0    c0  41c7400b00000000 movl [r8+0xb],0x0
0x19db000848c8    c8  4d8d7e10       REX.W leaq r15,[r14+0x10]
0x19db000848cc    cc  4c8939         REX.W movq [rcx],r15
0x19db000848cf    cf  4983c601       REX.W addq r14,0x1
0x19db000848d3    d3  45894eff       movl [r14-0x1],r9
0x19db000848d7    d7  45896603       movl [r14+0x3],r12
0x19db000848db    db  45896607       movl [r14+0x7],r12
0x19db000848df    df  41c7460b00000000 movl [r14+0xb],0x0
0x19db000848e7    e7  498d4710       REX.W leaq rax,[r15+0x10]
0x19db000848eb    eb  488901         REX.W movq [rcx],rax
0x19db000848ee    ee  4983c701       REX.W addq r15,0x1
0x19db000848f2    f2  45894fff       movl [r15-0x1],r9
0x19db000848f6    f6  45896703       movl [r15+0x3],r12
0x19db000848fa    fa  45896707       movl [r15+0x7],r12
0x19db000848fe    fe  41c7470b00000000 movl [r15+0xb],0x0
0x19db00084906   106  488d5018       REX.W leaq rdx,[rax+0x18]
0x19db0008490a   10a  488911         REX.W movq [rcx],rdx
0x19db0008490d   10d  4883c001       REX.W addq rax,0x1
0x19db00084911   111  498bb5d0000000 REX.W movq rsi,[r13+0xd0] (root (fixed_array_map))
0x19db00084918   118  8970ff         movl [rax-0x1],rsi
0x19db0008491b   11b  c7400308000000 movl [rax+0x3],0x8
0x19db00084922   122  897807         movl [rax+0x7],rdi
0x19db00084925   125  4489400b       movl [rax+0xb],r8
0x19db00084929   129  4489700f       movl [rax+0xf],r14
0x19db0008492d   12d  44897813       movl [rax+0x13],r15
0x19db00084931   131  488d7a10       REX.W leaq rdi,[rdx+0x10]
0x19db00084935   135  488939         REX.W movq [rcx],rdi
0x19db00084938   138  488d4a01       REX.W leaq rcx,[rdx+0x1]
0x19db0008493c   13c  bfa59f3008     movl rdi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00084941   141  8979ff         movl [rcx-0x1],rdi
0x19db00084944   144  44896103       movl [rcx+0x3],r12
0x19db00084948   148  894107         movl [rcx+0x7],rax
0x19db0008494b   14b  c7410b08000000 movl [rcx+0xb],0x8
0x19db00084952   152  48894de0       REX.W movq [rbp-0x20],rcx
0x19db00084956   156  33c0           xorl rax,rax
0x19db00084958   158  33db           xorl rbx,rbx
0x19db0008495a   15a  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db0008495e   15e  4c8b7520       REX.W movq r14,[rbp+0x20]
0x19db00084962   162  4c8bc0         REX.W movq r8,rax
0x19db00084965   165  e911000000     jmp 0x19db0008497b  <+0x17b>
0x19db0008496a   16a  660f1f440000   nop
0x19db00084970   170  bfa59f3008     movl rdi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00084975   175  488bc8         REX.W movq rcx,rax
0x19db00084978   178  4d89e6         REX.W movq r14,r12
0x19db0008497b   17b  4183f804       cmpl r8,0x4
0x19db0008497f   17f  0f8370060000   jnc 0x19db00084ff5  <+0x7f5>
0x19db00084985   185  448b6107       movl r12,[rcx+0x7]
0x19db00084989   189  4d03e5         REX.W addq r12,r13
0x19db0008498c   18c  448b790b       movl r15,[rcx+0xb]
0x19db00084990   190  41d1ff         sarl r15, 1
0x19db00084993   193  453bc7         cmpl r8,r15
0x19db00084996   196  0f8389100000   jnc 0x19db00085a25  <+0x1225>
0x19db0008499c   19c  478b648407     movl r12,[r12+r8*4+0x7]
0x19db000849a1   1a1  4d03e5         REX.W addq r12,r13
0x19db000849a4   1a4  41f6c301       testb r11,0x1
0x19db000849a8   1a8  0f847e100000   jz 0x19db00085a2c  <+0x122c>
0x19db000849ae   1ae  41397bff       cmpl [r11-0x1],rdi
0x19db000849b2   1b2  0f857b100000   jnz 0x19db00085a33  <+0x1233>
0x19db000849b8   1b8  458b7b07       movl r15,[r11+0x7]
0x19db000849bc   1bc  4d03fd         REX.W addq r15,r13
0x19db000849bf   1bf  418b530b       movl rdx,[r11+0xb]
0x19db000849c3   1c3  d1fa           sarl rdx, 1
0x19db000849c5   1c5  443bc2         cmpl r8,rdx
0x19db000849c8   1c8  0f836c100000   jnc 0x19db00085a3a  <+0x123a>
0x19db000849ce   1ce  438b548707     movl rdx,[r15+r8*4+0x7]
0x19db000849d3   1d3  4903d5         REX.W addq rdx,r13
0x19db000849d6   1d6  f6c201         testb rdx,0x1
0x19db000849d9   1d9  0f8462100000   jz 0x19db00085a41  <+0x1241>
0x19db000849df   1df  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db000849e3   1e3  4c896588       REX.W movq [rbp-0x78],r12
0x19db000849e7   1e7  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000849ec   1ec  394aff         cmpl [rdx-0x1],rcx
0x19db000849ef   1ef  0f8476060000   jz 0x19db0008506b  <+0x86b>
0x19db000849f5   1f5  44394aff       cmpl [rdx-0x1],r9
0x19db000849f9   1f9  0f8549100000   jnz 0x19db00085a48  <+0x1248>
0x19db000849ff   1ff  8b7207         movl rsi,[rdx+0x7]
0x19db00084a02   202  4903f5         REX.W addq rsi,r13
0x19db00084a05   205  8b520b         movl rdx,[rdx+0xb]
0x19db00084a08   208  d1fa           sarl rdx, 1
0x19db00084a0a   20a  83fa00         cmpl rdx,0x0
0x19db00084a0d   20d  0f863c100000   jna 0x19db00085a4f  <+0x124f>
0x19db00084a13   213  c5fb104607     vmovsd xmm0,[rsi+0x7]
0x19db00084a18   218  41f6c601       testb r14,0x1
0x19db00084a1c   21c  0f8434100000   jz 0x19db00085a56  <+0x1256>
0x19db00084a22   222  41397eff       cmpl [r14-0x1],rdi
0x19db00084a26   226  0f8531100000   jnz 0x19db00085a5d  <+0x125d>
0x19db00084a2c   22c  418b7e07       movl rdi,[r14+0x7]
0x19db00084a30   230  4903fd         REX.W addq rdi,r13
0x19db00084a33   233  418b460b       movl rax,[r14+0xb]
0x19db00084a37   237  d1f8           sarl rax, 1
0x19db00084a39   239  83f800         cmpl rax,0x0
0x19db00084a3c   23c  0f8622100000   jna 0x19db00085a64  <+0x1264>
0x19db00084a42   242  448b7707       movl r14,[rdi+0x7]
0x19db00084a46   246  4d03f5         REX.W addq r14,r13
0x19db00084a49   249  41f6c601       testb r14,0x1
0x19db00084a4d   24d  0f8418100000   jz 0x19db00085a6b  <+0x126b>
0x19db00084a53   253  41394eff       cmpl [r14-0x1],rcx
0x19db00084a57   257  0f8467060000   jz 0x19db000850c4  <+0x8c4>
0x19db00084a5d   25d  45394eff       cmpl [r14-0x1],r9
0x19db00084a61   261  0f850b100000   jnz 0x19db00085a72  <+0x1272>
0x19db00084a67   267  458b6607       movl r12,[r14+0x7]
0x19db00084a6b   26b  4d03e5         REX.W addq r12,r13
0x19db00084a6e   26e  458b760b       movl r14,[r14+0xb]
0x19db00084a72   272  41d1fe         sarl r14, 1
0x19db00084a75   275  4183fe00       cmpl r14,0x0
0x19db00084a79   279  0f86fa0f0000   jna 0x19db00085a79  <+0x1279>
0x19db00084a7f   27f  c4c17b104c2407 vmovsd xmm1,[r12+0x7]
0x19db00084a86   286  83fa01         cmpl rdx,0x1
0x19db00084a89   289  0f86f10f0000   jna 0x19db00085a80  <+0x1280>
0x19db00084a8f   28f  c5fb10560f     vmovsd xmm2,[rsi+0xf]
0x19db00084a94   294  83f801         cmpl rax,0x1
0x19db00084a97   297  0f86ea0f0000   jna 0x19db00085a87  <+0x1287>
0x19db00084a9d   29d  448b670b       movl r12,[rdi+0xb]
0x19db00084aa1   2a1  4d03e5         REX.W addq r12,r13
0x19db00084aa4   2a4  41f6c401       testb r12,0x1
0x19db00084aa8   2a8  0f84e00f0000   jz 0x19db00085a8e  <+0x128e>
0x19db00084aae   2ae  41394c24ff     cmpl [r12-0x1],rcx
0x19db00084ab3   2b3  0f847f060000   jz 0x19db00085138  <+0x938>
0x19db00084ab9   2b9  45394c24ff     cmpl [r12-0x1],r9
0x19db00084abe   2be  0f85d10f0000   jnz 0x19db00085a95  <+0x1295>
0x19db00084ac4   2c4  458b442407     movl r8,[r12+0x7]
0x19db00084ac9   2c9  4d03c5         REX.W addq r8,r13
0x19db00084acc   2cc  458b64240b     movl r12,[r12+0xb]
0x19db00084ad1   2d1  41d1fc         sarl r12, 1
0x19db00084ad4   2d4  4183fc00       cmpl r12,0x0
0x19db00084ad8   2d8  0f86be0f0000   jna 0x19db00085a9c  <+0x129c>
0x19db00084ade   2de  c4c17b106007   vmovsd xmm4,[r8+0x7]
0x19db00084ae4   2e4  83fa02         cmpl rdx,0x2
0x19db00084ae7   2e7  0f86b60f0000   jna 0x19db00085aa3  <+0x12a3>
0x19db00084aed   2ed  c5fb106e17     vmovsd xmm5,[rsi+0x17]
0x19db00084af2   2f2  83f802         cmpl rax,0x2
0x19db00084af5   2f5  0f86af0f0000   jna 0x19db00085aaa  <+0x12aa>
0x19db00084afb   2fb  448b470f       movl r8,[rdi+0xf]
0x19db00084aff   2ff  4d03c5         REX.W addq r8,r13
0x19db00084b02   302  41f6c001       testb r8,0x1
0x19db00084b06   306  0f84a50f0000   jz 0x19db00085ab1  <+0x12b1>
0x19db00084b0c   30c  413948ff       cmpl [r8-0x1],rcx
0x19db00084b10   310  0f84ad060000   jz 0x19db000851c3  <+0x9c3>
0x19db00084b16   316  453948ff       cmpl [r8-0x1],r9
0x19db00084b1a   31a  0f85980f0000   jnz 0x19db00085ab8  <+0x12b8>
0x19db00084b20   320  458b6007       movl r12,[r8+0x7]
0x19db00084b24   324  4d03e5         REX.W addq r12,r13
0x19db00084b27   327  458b400b       movl r8,[r8+0xb]
0x19db00084b2b   32b  41d1f8         sarl r8, 1
0x19db00084b2e   32e  4183f800       cmpl r8,0x0
0x19db00084b32   332  0f86870f0000   jna 0x19db00085abf  <+0x12bf>
0x19db00084b38   338  c4417b10442407 vmovsd xmm8,[r12+0x7]
0x19db00084b3f   33f  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00084b43   343  478b648707     movl r12,[r15+r8*4+0x7]
0x19db00084b48   348  4d03e5         REX.W addq r12,r13
0x19db00084b4b   34b  41f6c401       testb r12,0x1
0x19db00084b4f   34f  0f84710f0000   jz 0x19db00085ac6  <+0x12c6>
0x19db00084b55   355  41394c24ff     cmpl [r12-0x1],rcx
0x19db00084b5a   35a  0f84f1060000   jz 0x19db00085251  <+0xa51>
0x19db00084b60   360  45394c24ff     cmpl [r12-0x1],r9
0x19db00084b65   365  0f85620f0000   jnz 0x19db00085acd  <+0x12cd>
0x19db00084b6b   36b  418b542407     movl rdx,[r12+0x7]
0x19db00084b70   370  4903d5         REX.W addq rdx,r13
0x19db00084b73   373  458b64240b     movl r12,[r12+0xb]
0x19db00084b78   378  41d1fc         sarl r12, 1
0x19db00084b7b   37b  4183fc03       cmpl r12,0x3
0x19db00084b7f   37f  0f864f0f0000   jna 0x19db00085ad4  <+0x12d4>
0x19db00084b85   385  c5fb10721f     vmovsd xmm6,[rdx+0x1f]
0x19db00084b8a   38a  83f803         cmpl rax,0x3
0x19db00084b8d   38d  0f86480f0000   jna 0x19db00085adb  <+0x12db>
0x19db00084b93   393  8b7f13         movl rdi,[rdi+0x13]
0x19db00084b96   396  4903fd         REX.W addq rdi,r13
0x19db00084b99   399  40f6c701       testb rdi,0x1
0x19db00084b9d   39d  0f843f0f0000   jz 0x19db00085ae2  <+0x12e2>
0x19db00084ba3   3a3  394fff         cmpl [rdi-0x1],rcx
0x19db00084ba6   3a6  0f8439070000   jz 0x19db000852e5  <+0xae5>
0x19db00084bac   3ac  44394fff       cmpl [rdi-0x1],r9
0x19db00084bb0   3b0  0f85330f0000   jnz 0x19db00085ae9  <+0x12e9>
0x19db00084bb6   3b6  448b6707       movl r12,[rdi+0x7]
0x19db00084bba   3ba  4d03e5         REX.W addq r12,r13
0x19db00084bbd   3bd  8b7f0b         movl rdi,[rdi+0xb]
0x19db00084bc0   3c0  d1ff           sarl rdi, 1
0x19db00084bc2   3c2  83ff00         cmpl rdi,0x0
0x19db00084bc5   3c5  0f86250f0000   jna 0x19db00085af0  <+0x12f0>
0x19db00084bcb   3cb  c4417b104c2407 vmovsd xmm9,[r12+0x7]
0x19db00084bd2   3d2  f6458801       testb [rbp-0x78],0x1
0x19db00084bd6   3d6  0f841b0f0000   jz 0x19db00085af7  <+0x12f7>
0x19db00084bdc   3dc  4c8b6588       REX.W movq r12,[rbp-0x78]
0x19db00084be0   3e0  41394c24ff     cmpl [r12-0x1],rcx
0x19db00084be5   3e5  0f8484070000   jz 0x19db0008536f  <+0xb6f>
0x19db00084beb   3eb  45394c24ff     cmpl [r12-0x1],r9
0x19db00084bf0   3f0  0f85080f0000   jnz 0x19db00085afe  <+0x12fe>
0x19db00084bf6   3f6  418b442407     movl rax,[r12+0x7]
0x19db00084bfb   3fb  4903c5         REX.W addq rax,r13
0x19db00084bfe   3fe  418b54240b     movl rdx,[r12+0xb]
0x19db00084c03   403  8b7803         movl rdi,[rax+0x3]
0x19db00084c06   406  d1fa           sarl rdx, 1
0x19db00084c08   408  448d7201       leal r14,[rdx+0x1]
0x19db00084c0c   40c  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db00084c16   416  4d3bd6         REX.W cmpq r10,r14
0x19db00084c19   419  7715           ja 0x19db00084c30  <+0x430>
0x19db00084c1b   41b  48ba0200000000000000 REX.W movq rdx,0x2
0x19db00084c25   425  4c8b15ecfbffff REX.W movq r10,[rip+0xfffffbec]
0x19db00084c2c   42c  41ffd2         call r10
0x19db00084c2f   42f  cc             int3l
0x19db00084c30   430  4183fe00       cmpl r14,0x0
0x19db00084c34   434  0f86e90d0000   jna 0x19db00085a23  <+0x1223>
0x19db00084c3a   43a  d1ff           sarl rdi, 1
0x19db00084c3c   43c  83ff00         cmpl rdi,0x0
0x19db00084c3f   43f  0f86bb070000   jna 0x19db00085400  <+0xc00>
0x19db00084c45   445  83fa00         cmpl rdx,0x0
0x19db00084c48   448  0f8709000000   ja 0x19db00084c57  <+0x457>
0x19db00084c4e   44e  41c744240b02000000 movl [r12+0xb],0x2
0x19db00084c57   457  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db00084c5b   45b  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db00084c5f   45f  c5bb59cd       vmulsd xmm1,xmm8,xmm5
0x19db00084c63   463  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00084c67   467  c5b359d6       vmulsd xmm2,xmm9,xmm6
0x19db00084c6b   46b  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db00084c6f   46f  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00084c73   473  c5fb114007     vmovsd [rax+0x7],xmm0
0x19db00084c78   478  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00084c7c   47c  0f8615080000   jna 0x19db00085497  <+0xc97>
0x19db00084c82   482  bf01000000     movl rdi,0x1
0x19db00084c87   487  e907000000     jmp 0x19db00084c93  <+0x493>
0x19db00084c8c   48c  0f1f4000       nop
0x19db00084c90   490  498bff         REX.W movq rdi,r15
0x19db00084c93   493  488b45e0       REX.W movq rax,[rbp-0x20]
0x19db00084c97   497  4c8b6520       REX.W movq r12,[rbp+0x20]
0x19db00084c9b   49b  83ff04         cmpl rdi,0x4
0x19db00084c9e   49e  0f8320030000   jnc 0x19db00084fc4  <+0x7c4>
0x19db00084ca4   4a4  448b7007       movl r14,[rax+0x7]
0x19db00084ca8   4a8  4d03f5         REX.W addq r14,r13
0x19db00084cab   4ab  448b780b       movl r15,[rax+0xb]
0x19db00084caf   4af  41d1ff         sarl r15, 1
0x19db00084cb2   4b2  453bc7         cmpl r8,r15
0x19db00084cb5   4b5  0f834a0e0000   jnc 0x19db00085b05  <+0x1305>
0x19db00084cbb   4bb  438b548607     movl rdx,[r14+r8*4+0x7]
0x19db00084cc0   4c0  4903d5         REX.W addq rdx,r13
0x19db00084cc3   4c3  458b7307       movl r14,[r11+0x7]
0x19db00084cc7   4c7  4d03f5         REX.W addq r14,r13
0x19db00084cca   4ca  458b7b0b       movl r15,[r11+0xb]
0x19db00084cce   4ce  41d1ff         sarl r15, 1
0x19db00084cd1   4d1  453bc7         cmpl r8,r15
0x19db00084cd4   4d4  0f83320e0000   jnc 0x19db00085b0c  <+0x130c>
0x19db00084cda   4da  438b448607     movl rax,[r14+r8*4+0x7]
0x19db00084cdf   4df  4903c5         REX.W addq rax,r13
0x19db00084ce2   4e2  a801           test al,0x1
0x19db00084ce4   4e4  0f84290e0000   jz 0x19db00085b13  <+0x1313>
0x19db00084cea   4ea  48895580       REX.W movq [rbp-0x80],rdx
0x19db00084cee   4ee  3948ff         cmpl [rax-0x1],rcx
0x19db00084cf1   4f1  0f84e1070000   jz 0x19db000854d8  <+0xcd8>
0x19db00084cf7   4f7  4c8bf8         REX.W movq r15,rax
0x19db00084cfa   4fa  45394fff       cmpl [r15-0x1],r9
0x19db00084cfe   4fe  0f85160e0000   jnz 0x19db00085b1a  <+0x131a>
0x19db00084d04   504  418b4707       movl rax,[r15+0x7]
0x19db00084d08   508  4903c5         REX.W addq rax,r13
0x19db00084d0b   50b  458b7f0b       movl r15,[r15+0xb]
0x19db00084d0f   50f  41d1ff         sarl r15, 1
0x19db00084d12   512  4183ff00       cmpl r15,0x0
0x19db00084d16   516  0f86050e0000   jna 0x19db00085b21  <+0x1321>
0x19db00084d1c   51c  c5fb104007     vmovsd xmm0,[rax+0x7]
0x19db00084d21   521  418b742407     movl rsi,[r12+0x7]
0x19db00084d26   526  4903f5         REX.W addq rsi,r13
0x19db00084d29   529  418b54240b     movl rdx,[r12+0xb]
0x19db00084d2e   52e  d1fa           sarl rdx, 1
0x19db00084d30   530  83fa00         cmpl rdx,0x0
0x19db00084d33   533  0f86ef0d0000   jna 0x19db00085b28  <+0x1328>
0x19db00084d39   539  448b6607       movl r12,[rsi+0x7]
0x19db00084d3d   53d  4d03e5         REX.W addq r12,r13
0x19db00084d40   540  41f6c401       testb r12,0x1
0x19db00084d44   544  0f84e50d0000   jz 0x19db00085b2f  <+0x132f>
0x19db00084d4a   54a  41394c24ff     cmpl [r12-0x1],rcx
0x19db00084d4f   54f  0f84e1070000   jz 0x19db00085536  <+0xd36>
0x19db00084d55   555  45394c24ff     cmpl [r12-0x1],r9
0x19db00084d5a   55a  0f85d60d0000   jnz 0x19db00085b36  <+0x1336>
0x19db00084d60   560  458b442407     movl r8,[r12+0x7]
0x19db00084d65   565  4d03c5         REX.W addq r8,r13
0x19db00084d68   568  458b64240b     movl r12,[r12+0xb]
0x19db00084d6d   56d  41d1fc         sarl r12, 1
0x19db00084d70   570  4439e7         cmpl rdi,r12
0x19db00084d73   573  0f83c40d0000   jnc 0x19db00085b3d  <+0x133d>
0x19db00084d79   579  c4c17b104cf807 vmovsd xmm1,[r8+rdi*8+0x7]
0x19db00084d80   580  4183ff01       cmpl r15,0x1
0x19db00084d84   584  0f86ba0d0000   jna 0x19db00085b44  <+0x1344>
0x19db00084d8a   58a  c5fb10500f     vmovsd xmm2,[rax+0xf]
0x19db00084d8f   58f  83fa01         cmpl rdx,0x1
0x19db00084d92   592  0f86b30d0000   jna 0x19db00085b4b  <+0x134b>
0x19db00084d98   598  448b460b       movl r8,[rsi+0xb]
0x19db00084d9c   59c  4d03c5         REX.W addq r8,r13
0x19db00084d9f   59f  41f6c001       testb r8,0x1
0x19db00084da3   5a3  0f84a90d0000   jz 0x19db00085b52  <+0x1352>
0x19db00084da9   5a9  413948ff       cmpl [r8-0x1],rcx
0x19db00084dad   5ad  0f8405080000   jz 0x19db000855b8  <+0xdb8>
0x19db00084db3   5b3  453948ff       cmpl [r8-0x1],r9
0x19db00084db7   5b7  0f859c0d0000   jnz 0x19db00085b59  <+0x1359>
0x19db00084dbd   5bd  458b6007       movl r12,[r8+0x7]
0x19db00084dc1   5c1  4d03e5         REX.W addq r12,r13
0x19db00084dc4   5c4  458b400b       movl r8,[r8+0xb]
0x19db00084dc8   5c8  41d1f8         sarl r8, 1
0x19db00084dcb   5cb  413bf8         cmpl rdi,r8
0x19db00084dce   5ce  0f838c0d0000   jnc 0x19db00085b60  <+0x1360>
0x19db00084dd4   5d4  c4c17b1064fc07 vmovsd xmm4,[r12+rdi*8+0x7]
0x19db00084ddb   5db  4183ff02       cmpl r15,0x2
0x19db00084ddf   5df  0f86820d0000   jna 0x19db00085b67  <+0x1367>
0x19db00084de5   5e5  4c8bc0         REX.W movq r8,rax
0x19db00084de8   5e8  c4c17b106817   vmovsd xmm5,[r8+0x17]
0x19db00084dee   5ee  83fa02         cmpl rdx,0x2
0x19db00084df1   5f1  0f86770d0000   jna 0x19db00085b6e  <+0x136e>
0x19db00084df7   5f7  448b460f       movl r8,[rsi+0xf]
0x19db00084dfb   5fb  4d03c5         REX.W addq r8,r13
0x19db00084dfe   5fe  41f6c001       testb r8,0x1
0x19db00084e02   602  0f846d0d0000   jz 0x19db00085b75  <+0x1375>
0x19db00084e08   608  413948ff       cmpl [r8-0x1],rcx
0x19db00084e0c   60c  0f843b080000   jz 0x19db0008564d  <+0xe4d>
0x19db00084e12   612  453948ff       cmpl [r8-0x1],r9
0x19db00084e16   616  0f85600d0000   jnz 0x19db00085b7c  <+0x137c>
0x19db00084e1c   61c  458b6007       movl r12,[r8+0x7]
0x19db00084e20   620  4d03e5         REX.W addq r12,r13
0x19db00084e23   623  458b400b       movl r8,[r8+0xb]
0x19db00084e27   627  41d1f8         sarl r8, 1
0x19db00084e2a   62a  413bf8         cmpl rdi,r8
0x19db00084e2d   62d  0f83500d0000   jnc 0x19db00085b83  <+0x1383>
0x19db00084e33   633  c4417b1044fc07 vmovsd xmm8,[r12+rdi*8+0x7]
0x19db00084e3a   63a  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00084e3e   63e  478b648607     movl r12,[r14+r8*4+0x7]
0x19db00084e43   643  4d03e5         REX.W addq r12,r13
0x19db00084e46   646  41f6c401       testb r12,0x1
0x19db00084e4a   64a  0f843a0d0000   jz 0x19db00085b8a  <+0x138a>
0x19db00084e50   650  41394c24ff     cmpl [r12-0x1],rcx
0x19db00084e55   655  0f848e080000   jz 0x19db000856e9  <+0xee9>
0x19db00084e5b   65b  45394c24ff     cmpl [r12-0x1],r9
0x19db00084e60   660  0f852b0d0000   jnz 0x19db00085b91  <+0x1391>
0x19db00084e66   666  418b442407     movl rax,[r12+0x7]
0x19db00084e6b   66b  4903c5         REX.W addq rax,r13
0x19db00084e6e   66e  458b64240b     movl r12,[r12+0xb]
0x19db00084e73   673  41d1fc         sarl r12, 1
0x19db00084e76   676  4183fc03       cmpl r12,0x3
0x19db00084e7a   67a  0f86180d0000   jna 0x19db00085b98  <+0x1398>
0x19db00084e80   680  c5fb10701f     vmovsd xmm6,[rax+0x1f]
0x19db00084e85   685  83fa03         cmpl rdx,0x3
0x19db00084e88   688  0f86110d0000   jna 0x19db00085b9f  <+0x139f>
0x19db00084e8e   68e  4c8be6         REX.W movq r12,rsi
0x19db00084e91   691  458b642413     movl r12,[r12+0x13]
0x19db00084e96   696  4d03e5         REX.W addq r12,r13
0x19db00084e99   699  41f6c401       testb r12,0x1
0x19db00084e9d   69d  0f84030d0000   jz 0x19db00085ba6  <+0x13a6>
0x19db00084ea3   6a3  41394c24ff     cmpl [r12-0x1],rcx
0x19db00084ea8   6a8  0f84dd080000   jz 0x19db0008578b  <+0xf8b>
0x19db00084eae   6ae  45394c24ff     cmpl [r12-0x1],r9
0x19db00084eb3   6b3  0f85f40c0000   jnz 0x19db00085bad  <+0x13ad>
0x19db00084eb9   6b9  418b442407     movl rax,[r12+0x7]
0x19db00084ebe   6be  4903c5         REX.W addq rax,r13
0x19db00084ec1   6c1  458b64240b     movl r12,[r12+0xb]
0x19db00084ec6   6c6  41d1fc         sarl r12, 1
0x19db00084ec9   6c9  4439e7         cmpl rdi,r12
0x19db00084ecc   6cc  0f83e20c0000   jnc 0x19db00085bb4  <+0x13b4>
0x19db00084ed2   6d2  c57b104cf807   vmovsd xmm9,[rax+rdi*8+0x7]
0x19db00084ed8   6d8  f6458001       testb [rbp-0x80],0x1
0x19db00084edc   6dc  0f84d90c0000   jz 0x19db00085bbb  <+0x13bb>
0x19db00084ee2   6e2  488b5580       REX.W movq rdx,[rbp-0x80]
0x19db00084ee6   6e6  394aff         cmpl [rdx-0x1],rcx
0x19db00084ee9   6e9  0f8435090000   jz 0x19db00085824  <+0x1024>
0x19db00084eef   6ef  44394aff       cmpl [rdx-0x1],r9
0x19db00084ef3   6f3  0f85c90c0000   jnz 0x19db00085bc2  <+0x13c2>
0x19db00084ef9   6f9  448b6207       movl r12,[rdx+0x7]
0x19db00084efd   6fd  4d03e5         REX.W addq r12,r13
0x19db00084f00   700  448b720b       movl r14,[rdx+0xb]
0x19db00084f04   704  41d1fe         sarl r14, 1
0x19db00084f07   707  418b442403     movl rax,[r12+0x3]
0x19db00084f0c   70c  d1f8           sarl rax, 1
0x19db00084f0e   70e  458d7e01       leal r15,[r14+0x1]
0x19db00084f12   712  4c8b15f5fcffff REX.W movq r10,[rip+0xfffffcf5]
0x19db00084f19   719  4d3bd7         REX.W cmpq r10,r15
0x19db00084f1c   71c  7712           ja 0x19db00084f30  <+0x730>
0x19db00084f1e   71e  488b15f8fcffff REX.W movq rdx,[rip+0xfffffcf8]
0x19db00084f25   725  4c8b15ecf8ffff REX.W movq r10,[rip+0xfffff8ec]
0x19db00084f2c   72c  41ffd2         call r10
0x19db00084f2f   72f  cc             int3l
0x19db00084f30   730  413bff         cmpl rdi,r15
0x19db00084f33   733  0f83900c0000   jnc 0x19db00085bc9  <+0x13c9>
0x19db00084f39   739  3bf8           cmpl rdi,rax
0x19db00084f3b   73b  0f8381090000   jnc 0x19db000858c2  <+0x10c2>
0x19db00084f41   741  448d7f01       leal r15,[rdi+0x1]
0x19db00084f45   745  4c8b15c2fcffff REX.W movq r10,[rip+0xfffffcc2]
0x19db00084f4c   74c  4d3bd7         REX.W cmpq r10,r15
0x19db00084f4f   74f  7712           ja 0x19db00084f63  <+0x763>
0x19db00084f51   751  488b15c5fcffff REX.W movq rdx,[rip+0xfffffcc5]
0x19db00084f58   758  4c8b15b9f8ffff REX.W movq r10,[rip+0xfffff8b9]
0x19db00084f5f   75f  41ffd2         call r10
0x19db00084f62   762  cc             int3l
0x19db00084f63   763  413bfe         cmpl rdi,r14
0x19db00084f66   766  0f8226000000   jc 0x19db00084f92  <+0x792>
0x19db00084f6c   76c  478d343f       leal r14,[r15+r15*1]
0x19db00084f70   770  4c8b1597fcffff REX.W movq r10,[rip+0xfffffc97]
0x19db00084f77   777  4d3bd6         REX.W cmpq r10,r14
0x19db00084f7a   77a  7712           ja 0x19db00084f8e  <+0x78e>
0x19db00084f7c   77c  488b159afcffff REX.W movq rdx,[rip+0xfffffc9a]
0x19db00084f83   783  4c8b158ef8ffff REX.W movq r10,[rip+0xfffff88e]
0x19db00084f8a   78a  41ffd2         call r10
0x19db00084f8d   78d  cc             int3l
0x19db00084f8e   78e  4489720b       movl [rdx+0xb],r14
0x19db00084f92   792  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db00084f96   796  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db00084f9a   79a  c5bb59cd       vmulsd xmm1,xmm8,xmm5
0x19db00084f9e   79e  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00084fa2   7a2  c5b359d6       vmulsd xmm2,xmm9,xmm6
0x19db00084fa6   7a6  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db00084faa   7aa  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00084fae   7ae  c4c17b1144fc07 vmovsd [r12+rdi*8+0x7],xmm0
0x19db00084fb5   7b5  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00084fb9   7b9  0f87d1fcffff   ja 0x19db00084c90  <+0x490>
0x19db00084fbf   7bf  e9d1090000     jmp 0x19db00085995  <+0x1195>
0x19db00084fc4   7c4  4183c001       addl r8,0x1
0x19db00084fc8   7c8  4c8b153ffcffff REX.W movq r10,[rip+0xfffffc3f]
0x19db00084fcf   7cf  4d3bd0         REX.W cmpq r10,r8
0x19db00084fd2   7d2  7712           ja 0x19db00084fe6  <+0x7e6>
0x19db00084fd4   7d4  488b1542fcffff REX.W movq rdx,[rip+0xfffffc42]
0x19db00084fdb   7db  4c8b1536f8ffff REX.W movq r10,[rip+0xfffff836]
0x19db00084fe2   7e2  41ffd2         call r10
0x19db00084fe5   7e5  cc             int3l
0x19db00084fe6   7e6  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00084fea   7ea  0f8780f9ffff   ja 0x19db00084970  <+0x170>
0x19db00084ff0   7f0  e9e6090000     jmp 0x19db000859db  <+0x11db>
0x19db00084ff5   7f5  488bc1         REX.W movq rax,rcx
0x19db00084ff8   7f8  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db00084ffc   7fc  488be5         REX.W movq rsp,rbp
0x19db00084fff   7ff  5d             pop rbp
0x19db00085000   800  4883f902       REX.W cmpq rcx,0x2
0x19db00085004   804  7f03           jg 0x19db00085009  <+0x809>
0x19db00085006   806  c21800         ret 0x18
0x19db00085009   809  415a           pop r10
0x19db0008500b   80b  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db00085010   810  4152           push r10
0x19db00085012   812  c3             retl
0x19db00085013   813  48b92000000000000000 REX.W movq rcx,0x20
0x19db0008501d   81d  51             push rcx
0x19db0008501e   81e  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db00085028   828  b801000000     movl rax,0x1
0x19db0008502d   82d  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00085037   837  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db00085041   841  41ffd2         call r10
0x19db00085044   844  e90df8ffff     jmp 0x19db00084856  <+0x56>
0x19db00085049   849  ba68000000     movl rdx,0x68
0x19db0008504e   84e  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db00085058   858  41ffd2         call r10
0x19db0008505b   85b  488d78ff       REX.W leaq rdi,[rax-0x1]
0x19db0008505f   85f  488b0df2f7ffff REX.W movq rcx,[rip+0xfffff7f2]
0x19db00085066   866  e90ff8ffff     jmp 0x19db0008487a  <+0x7a>
0x19db0008506b   86b  52             push rdx
0x19db0008506c   86c  4151           push r9
0x19db0008506e   86e  4c897dc0       REX.W movq [rbp-0x40],r15
0x19db00085072   872  488955c8       REX.W movq [rbp-0x38],rdx
0x19db00085076   876  48bb9061fef6ff7f0000 REX.W movq rbx,0x7ffff6fe6190    ;; external reference (Runtime::TransitionElementsKind)
0x19db00085080   880  b802000000     movl rax,0x2
0x19db00085085   885  33f6           xorl rsi,rsi
0x19db00085087   887  4c8b15abffffff REX.W movq r10,[rip+0xffffffab]
0x19db0008508e   88e  41ffd2         call r10
0x19db00085091   891  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00085095   895  4c8b7520       REX.W movq r14,[rbp+0x20]
0x19db00085099   899  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008509d   89d  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000850a7   8a7  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000850ac   8ac  4c8b6588       REX.W movq r12,[rbp-0x78]
0x19db000850b0   8b0  33db           xorl rbx,rbx
0x19db000850b2   8b2  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db000850b6   8b6  bfa59f3008     movl rdi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db000850bb   8bb  488b55c8       REX.W movq rdx,[rbp-0x38]
0x19db000850bf   8bf  e931f9ffff     jmp 0x19db000849f5  <+0x1f5>
0x19db000850c4   8c4  4156           push r14
0x19db000850c6   8c6  4151           push r9
0x19db000850c8   8c8  c5fb1145a0     vmovsd [rbp-0x60],xmm0
0x19db000850cd   8cd  48897dc8       REX.W movq [rbp-0x38],rdi
0x19db000850d1   8d1  48894580       REX.W movq [rbp-0x80],rax
0x19db000850d5   8d5  4c897dc0       REX.W movq [rbp-0x40],r15
0x19db000850d9   8d9  488975b8       REX.W movq [rbp-0x48],rsi
0x19db000850dd   8dd  488955b0       REX.W movq [rbp-0x50],rdx
0x19db000850e1   8e1  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db000850e5   8e5  488b1d8cffffff REX.W movq rbx,[rip+0xffffff8c]
0x19db000850ec   8ec  b802000000     movl rax,0x2
0x19db000850f1   8f1  33f6           xorl rsi,rsi
0x19db000850f3   8f3  4c8b153fffffff REX.W movq r10,[rip+0xffffff3f]
0x19db000850fa   8fa  41ffd2         call r10
0x19db000850fd   8fd  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00085101   901  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00085105   905  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008510f   90f  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00085114   914  c5fb1045a0     vmovsd xmm0,[rbp-0x60]
0x19db00085119   919  33db           xorl rbx,rbx
0x19db0008511b   91b  488b7dc8       REX.W movq rdi,[rbp-0x38]
0x19db0008511f   91f  488b4580       REX.W movq rax,[rbp-0x80]
0x19db00085123   923  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db00085127   927  488b75b8       REX.W movq rsi,[rbp-0x48]
0x19db0008512b   92b  488b55b0       REX.W movq rdx,[rbp-0x50]
0x19db0008512f   92f  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00085133   933  e925f9ffff     jmp 0x19db00084a5d  <+0x25d>
0x19db00085138   938  4154           push r12
0x19db0008513a   93a  4151           push r9
0x19db0008513c   93c  c5fb114da8     vmovsd [rbp-0x58],xmm1
0x19db00085141   941  c5fb1145a0     vmovsd [rbp-0x60],xmm0
0x19db00085146   946  c5fb115590     vmovsd [rbp-0x70],xmm2
0x19db0008514b   94b  48897dc8       REX.W movq [rbp-0x38],rdi
0x19db0008514f   94f  48894580       REX.W movq [rbp-0x80],rax
0x19db00085153   953  4c897dc0       REX.W movq [rbp-0x40],r15
0x19db00085157   957  488975b8       REX.W movq [rbp-0x48],rsi
0x19db0008515b   95b  488955b0       REX.W movq [rbp-0x50],rdx
0x19db0008515f   95f  4c896598       REX.W movq [rbp-0x68],r12
0x19db00085163   963  488b1d0effffff REX.W movq rbx,[rip+0xffffff0e]
0x19db0008516a   96a  4c8bf0         REX.W movq r14,rax
0x19db0008516d   96d  b802000000     movl rax,0x2
0x19db00085172   972  33f6           xorl rsi,rsi
0x19db00085174   974  4c8b15befeffff REX.W movq r10,[rip+0xfffffebe]
0x19db0008517b   97b  41ffd2         call r10
0x19db0008517e   97e  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00085182   982  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00085186   986  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00085190   990  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00085195   995  c5fb104da8     vmovsd xmm1,[rbp-0x58]
0x19db0008519a   99a  c5fb1045a0     vmovsd xmm0,[rbp-0x60]
0x19db0008519f   99f  c5fb105590     vmovsd xmm2,[rbp-0x70]
0x19db000851a4   9a4  33db           xorl rbx,rbx
0x19db000851a6   9a6  488b7dc8       REX.W movq rdi,[rbp-0x38]
0x19db000851aa   9aa  488b4580       REX.W movq rax,[rbp-0x80]
0x19db000851ae   9ae  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db000851b2   9b2  488b75b8       REX.W movq rsi,[rbp-0x48]
0x19db000851b6   9b6  488b55b0       REX.W movq rdx,[rbp-0x50]
0x19db000851ba   9ba  4c8b6598       REX.W movq r12,[rbp-0x68]
0x19db000851be   9be  e9f6f8ffff     jmp 0x19db00084ab9  <+0x2b9>
0x19db000851c3   9c3  4150           push r8
0x19db000851c5   9c5  4151           push r9
0x19db000851c7   9c7  c5fb116db0     vmovsd [rbp-0x50],xmm5
0x19db000851cc   9cc  c5fb114da8     vmovsd [rbp-0x58],xmm1
0x19db000851d1   9d1  c5fb1145a0     vmovsd [rbp-0x60],xmm0
0x19db000851d6   9d6  c5fb116598     vmovsd [rbp-0x68],xmm4
0x19db000851db   9db  c5fb115590     vmovsd [rbp-0x70],xmm2
0x19db000851e0   9e0  48897dc8       REX.W movq [rbp-0x38],rdi
0x19db000851e4   9e4  48894580       REX.W movq [rbp-0x80],rax
0x19db000851e8   9e8  4c897dc0       REX.W movq [rbp-0x40],r15
0x19db000851ec   9ec  4c8945b8       REX.W movq [rbp-0x48],r8
0x19db000851f0   9f0  33f6           xorl rsi,rsi
0x19db000851f2   9f2  4c8bf3         REX.W movq r14,rbx
0x19db000851f5   9f5  488b1d7cfeffff REX.W movq rbx,[rip+0xfffffe7c]
0x19db000851fc   9fc  4c8be0         REX.W movq r12,rax
0x19db000851ff   9ff  b802000000     movl rax,0x2
0x19db00085204   a04  4c8b152efeffff REX.W movq r10,[rip+0xfffffe2e]
0x19db0008520b   a0b  41ffd2         call r10
0x19db0008520e   a0e  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00085212   a12  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008521c   a1c  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00085221   a21  c5fb106db0     vmovsd xmm5,[rbp-0x50]
0x19db00085226   a26  c5fb104da8     vmovsd xmm1,[rbp-0x58]
0x19db0008522b   a2b  c5fb1045a0     vmovsd xmm0,[rbp-0x60]
0x19db00085230   a30  c5fb106598     vmovsd xmm4,[rbp-0x68]
0x19db00085235   a35  c5fb105590     vmovsd xmm2,[rbp-0x70]
0x19db0008523a   a3a  33db           xorl rbx,rbx
0x19db0008523c   a3c  488b7dc8       REX.W movq rdi,[rbp-0x38]
0x19db00085240   a40  488b4580       REX.W movq rax,[rbp-0x80]
0x19db00085244   a44  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db00085248   a48  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db0008524c   a4c  e9c5f8ffff     jmp 0x19db00084b16  <+0x316>
0x19db00085251   a51  4154           push r12
0x19db00085253   a53  4151           push r9
0x19db00085255   a55  c57b1145b8     vmovsd [rbp-0x48],xmm8
0x19db0008525a   a5a  c5fb116db0     vmovsd [rbp-0x50],xmm5
0x19db0008525f   a5f  c5fb114da8     vmovsd [rbp-0x58],xmm1
0x19db00085264   a64  c5fb1145a0     vmovsd [rbp-0x60],xmm0
0x19db00085269   a69  c5fb116598     vmovsd [rbp-0x68],xmm4
0x19db0008526e   a6e  c5fb115590     vmovsd [rbp-0x70],xmm2
0x19db00085273   a73  48897dc8       REX.W movq [rbp-0x38],rdi
0x19db00085277   a77  48894580       REX.W movq [rbp-0x80],rax
0x19db0008527b   a7b  4c8965c0       REX.W movq [rbp-0x40],r12
0x19db0008527f   a7f  33f6           xorl rsi,rsi
0x19db00085281   a81  4c8bfb         REX.W movq r15,rbx
0x19db00085284   a84  488b1dedfdffff REX.W movq rbx,[rip+0xfffffded]
0x19db0008528b   a8b  4c8bf0         REX.W movq r14,rax
0x19db0008528e   a8e  b802000000     movl rax,0x2
0x19db00085293   a93  4c8b159ffdffff REX.W movq r10,[rip+0xfffffd9f]
0x19db0008529a   a9a  41ffd2         call r10
0x19db0008529d   a9d  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db000852a1   aa1  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db000852a5   aa5  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000852af   aaf  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000852b4   ab4  c57b1045b8     vmovsd xmm8,[rbp-0x48]
0x19db000852b9   ab9  c5fb106db0     vmovsd xmm5,[rbp-0x50]
0x19db000852be   abe  c5fb104da8     vmovsd xmm1,[rbp-0x58]
0x19db000852c3   ac3  c5fb1045a0     vmovsd xmm0,[rbp-0x60]
0x19db000852c8   ac8  c5fb106598     vmovsd xmm4,[rbp-0x68]
0x19db000852cd   acd  c5fb105590     vmovsd xmm2,[rbp-0x70]
0x19db000852d2   ad2  33db           xorl rbx,rbx
0x19db000852d4   ad4  488b7dc8       REX.W movq rdi,[rbp-0x38]
0x19db000852d8   ad8  488b4580       REX.W movq rax,[rbp-0x80]
0x19db000852dc   adc  4c8b65c0       REX.W movq r12,[rbp-0x40]
0x19db000852e0   ae0  e97bf8ffff     jmp 0x19db00084b60  <+0x360>
0x19db000852e5   ae5  57             push rdi
0x19db000852e6   ae6  4151           push r9
0x19db000852e8   ae8  c5fb1175c0     vmovsd [rbp-0x40],xmm6
0x19db000852ed   aed  c57b1145b8     vmovsd [rbp-0x48],xmm8
0x19db000852f2   af2  c5fb116db0     vmovsd [rbp-0x50],xmm5
0x19db000852f7   af7  c5fb114da8     vmovsd [rbp-0x58],xmm1
0x19db000852fc   afc  c5fb1145a0     vmovsd [rbp-0x60],xmm0
0x19db00085301   b01  c5fb116598     vmovsd [rbp-0x68],xmm4
0x19db00085306   b06  c5fb115590     vmovsd [rbp-0x70],xmm2
0x19db0008530b   b0b  48897dc8       REX.W movq [rbp-0x38],rdi
0x19db0008530f   b0f  33f6           xorl rsi,rsi
0x19db00085311   b11  4c8be3         REX.W movq r12,rbx
0x19db00085314   b14  488b1d5dfdffff REX.W movq rbx,[rip+0xfffffd5d]
0x19db0008531b   b1b  b802000000     movl rax,0x2
0x19db00085320   b20  4c8b1512fdffff REX.W movq r10,[rip+0xfffffd12]
0x19db00085327   b27  41ffd2         call r10
0x19db0008532a   b2a  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db0008532e   b2e  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00085332   b32  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008533c   b3c  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00085341   b41  c5fb1075c0     vmovsd xmm6,[rbp-0x40]
0x19db00085346   b46  c57b1045b8     vmovsd xmm8,[rbp-0x48]
0x19db0008534b   b4b  c5fb106db0     vmovsd xmm5,[rbp-0x50]
0x19db00085350   b50  c5fb104da8     vmovsd xmm1,[rbp-0x58]
0x19db00085355   b55  c5fb1045a0     vmovsd xmm0,[rbp-0x60]
0x19db0008535a   b5a  c5fb106598     vmovsd xmm4,[rbp-0x68]
0x19db0008535f   b5f  c5fb105590     vmovsd xmm2,[rbp-0x70]
0x19db00085364   b64  33db           xorl rbx,rbx
0x19db00085366   b66  488b7dc8       REX.W movq rdi,[rbp-0x38]
0x19db0008536a   b6a  e93df8ffff     jmp 0x19db00084bac  <+0x3ac>
0x19db0008536f   b6f  4154           push r12
0x19db00085371   b71  4151           push r9
0x19db00085373   b73  c57b114dc8     vmovsd [rbp-0x38],xmm9
0x19db00085378   b78  c5fb1175c0     vmovsd [rbp-0x40],xmm6
0x19db0008537d   b7d  c57b1145b8     vmovsd [rbp-0x48],xmm8
0x19db00085382   b82  c5fb116db0     vmovsd [rbp-0x50],xmm5
0x19db00085387   b87  c5fb114da8     vmovsd [rbp-0x58],xmm1
0x19db0008538c   b8c  c5fb1145a0     vmovsd [rbp-0x60],xmm0
0x19db00085391   b91  c5fb116598     vmovsd [rbp-0x68],xmm4
0x19db00085396   b96  c5fb115590     vmovsd [rbp-0x70],xmm2
0x19db0008539b   b9b  33f6           xorl rsi,rsi
0x19db0008539d   b9d  488bfb         REX.W movq rdi,rbx
0x19db000853a0   ba0  488b1dd1fcffff REX.W movq rbx,[rip+0xfffffcd1]
0x19db000853a7   ba7  b802000000     movl rax,0x2
0x19db000853ac   bac  4c8b1586fcffff REX.W movq r10,[rip+0xfffffc86]
0x19db000853b3   bb3  41ffd2         call r10
0x19db000853b6   bb6  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db000853ba   bba  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db000853be   bbe  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000853c8   bc8  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000853cd   bcd  c57b104dc8     vmovsd xmm9,[rbp-0x38]
0x19db000853d2   bd2  c5fb1075c0     vmovsd xmm6,[rbp-0x40]
0x19db000853d7   bd7  c57b1045b8     vmovsd xmm8,[rbp-0x48]
0x19db000853dc   bdc  c5fb106db0     vmovsd xmm5,[rbp-0x50]
0x19db000853e1   be1  c5fb104da8     vmovsd xmm1,[rbp-0x58]
0x19db000853e6   be6  c5fb1045a0     vmovsd xmm0,[rbp-0x60]
0x19db000853eb   beb  c5fb106598     vmovsd xmm4,[rbp-0x68]
0x19db000853f0   bf0  c5fb105590     vmovsd xmm2,[rbp-0x70]
0x19db000853f5   bf5  4c8b6588       REX.W movq r12,[rbp-0x78]
0x19db000853f9   bf9  33db           xorl rbx,rbx
0x19db000853fb   bfb  e9ebf7ffff     jmp 0x19db00084beb  <+0x3eb>
0x19db00085400   c00  c57b114dc8     vmovsd [rbp-0x38],xmm9
0x19db00085405   c05  c5fb1175c0     vmovsd [rbp-0x40],xmm6
0x19db0008540a   c0a  c57b1145b8     vmovsd [rbp-0x48],xmm8
0x19db0008540f   c0f  c5fb116db0     vmovsd [rbp-0x50],xmm5
0x19db00085414   c14  c5fb114da8     vmovsd [rbp-0x58],xmm1
0x19db00085419   c19  c5fb1145a0     vmovsd [rbp-0x60],xmm0
0x19db0008541e   c1e  c5fb116598     vmovsd [rbp-0x68],xmm4
0x19db00085423   c23  c5fb115590     vmovsd [rbp-0x70],xmm2
0x19db00085428   c28  48895580       REX.W movq [rbp-0x80],rdx
0x19db0008542c   c2c  33f6           xorl rsi,rsi
0x19db0008542e   c2e  4c89e0         REX.W movq rax,r12
0x19db00085431   c31  488bfb         REX.W movq rdi,rbx
0x19db00085434   c34  49ba20e7baf5ff7f0000 REX.W movq r10,0x7ffff5bae720  (GrowFastDoubleElements)    ;; off heap target
0x19db0008543e   c3e  41ffd2         call r10
0x19db00085441   c41  a801           test al,0x1
0x19db00085443   c43  0f848e070000   jz 0x19db00085bd7  <+0x13d7>
0x19db00085449   c49  33db           xorl rbx,rbx
0x19db0008544b   c4b  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db0008544f   c4f  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00085453   c53  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008545d   c5d  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00085462   c62  c57b104dc8     vmovsd xmm9,[rbp-0x38]
0x19db00085467   c67  c5fb1075c0     vmovsd xmm6,[rbp-0x40]
0x19db0008546c   c6c  c57b1045b8     vmovsd xmm8,[rbp-0x48]
0x19db00085471   c71  c5fb106db0     vmovsd xmm5,[rbp-0x50]
0x19db00085476   c76  c5fb104da8     vmovsd xmm1,[rbp-0x58]
0x19db0008547b   c7b  c5fb1045a0     vmovsd xmm0,[rbp-0x60]
0x19db00085480   c80  c5fb106598     vmovsd xmm4,[rbp-0x68]
0x19db00085485   c85  c5fb105590     vmovsd xmm2,[rbp-0x70]
0x19db0008548a   c8a  4c8b6588       REX.W movq r12,[rbp-0x78]
0x19db0008548e   c8e  488b5580       REX.W movq rdx,[rbp-0x80]
0x19db00085492   c92  e9aef7ffff     jmp 0x19db00084c45  <+0x445>
0x19db00085497   c97  488bfb         REX.W movq rdi,rbx
0x19db0008549a   c9a  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000854a4   ca4  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db000854ae   cae  33c0           xorl rax,rax
0x19db000854b0   cb0  4c8b1582fbffff REX.W movq r10,[rip+0xfffffb82]
0x19db000854b7   cb7  41ffd2         call r10
0x19db000854ba   cba  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db000854be   cbe  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db000854c2   cc2  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000854cc   ccc  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000854d1   cd1  33db           xorl rbx,rbx
0x19db000854d3   cd3  e9aaf7ffff     jmp 0x19db00084c82  <+0x482>
0x19db000854d8   cd8  50             push rax
0x19db000854d9   cd9  4151           push r9
0x19db000854db   cdb  4889bd78ffffff REX.W movq [rbp-0x88],rdi
0x19db000854e2   ce2  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db000854e6   ce6  488945c8       REX.W movq [rbp-0x38],rax
0x19db000854ea   cea  33f6           xorl rsi,rsi
0x19db000854ec   cec  488b1d85fbffff REX.W movq rbx,[rip+0xfffffb85]
0x19db000854f3   cf3  4c8bf8         REX.W movq r15,rax
0x19db000854f6   cf6  b802000000     movl rax,0x2
0x19db000854fb   cfb  4c8b1537fbffff REX.W movq r10,[rip+0xfffffb37]
0x19db00085502   d02  41ffd2         call r10
0x19db00085505   d05  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00085509   d09  4c8b6520       REX.W movq r12,[rbp+0x20]
0x19db0008550d   d0d  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00085511   d11  488bbd78ffffff REX.W movq rdi,[rbp-0x88]
0x19db00085518   d18  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00085522   d22  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00085527   d27  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db0008552b   d2b  488b45c8       REX.W movq rax,[rbp-0x38]
0x19db0008552f   d2f  33db           xorl rbx,rbx
0x19db00085531   d31  e9c1f7ffff     jmp 0x19db00084cf7  <+0x4f7>
0x19db00085536   d36  4154           push r12
0x19db00085538   d38  4151           push r9
0x19db0008553a   d3a  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db0008553f   d3f  4889bd78ffffff REX.W movq [rbp-0x88],rdi
0x19db00085546   d46  488975c8       REX.W movq [rbp-0x38],rsi
0x19db0008554a   d4a  488955c0       REX.W movq [rbp-0x40],rdx
0x19db0008554e   d4e  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db00085552   d52  488945b0       REX.W movq [rbp-0x50],rax
0x19db00085556   d56  4c897da8       REX.W movq [rbp-0x58],r15
0x19db0008555a   d5a  4c8965a0       REX.W movq [rbp-0x60],r12
0x19db0008555e   d5e  488b1d13fbffff REX.W movq rbx,[rip+0xfffffb13]
0x19db00085565   d65  b802000000     movl rax,0x2
0x19db0008556a   d6a  33f6           xorl rsi,rsi
0x19db0008556c   d6c  4c8b15c6faffff REX.W movq r10,[rip+0xfffffac6]
0x19db00085573   d73  41ffd2         call r10
0x19db00085576   d76  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db0008557a   d7a  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008557e   d7e  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db00085583   d83  488bbd78ffffff REX.W movq rdi,[rbp-0x88]
0x19db0008558a   d8a  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00085594   d94  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00085599   d99  488b75c8       REX.W movq rsi,[rbp-0x38]
0x19db0008559d   d9d  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db000855a1   da1  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db000855a5   da5  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db000855a9   da9  4c8b7da8       REX.W movq r15,[rbp-0x58]
0x19db000855ad   dad  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db000855b1   db1  33db           xorl rbx,rbx
0x19db000855b3   db3  e99df7ffff     jmp 0x19db00084d55  <+0x555>
0x19db000855b8   db8  4150           push r8
0x19db000855ba   dba  4151           push r9
0x19db000855bc   dbc  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db000855c1   dc1  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db000855c6   dc6  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db000855cb   dcb  4889bd78ffffff REX.W movq [rbp-0x88],rdi
0x19db000855d2   dd2  488975c8       REX.W movq [rbp-0x38],rsi
0x19db000855d6   dd6  488955c0       REX.W movq [rbp-0x40],rdx
0x19db000855da   dda  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db000855de   dde  488945b0       REX.W movq [rbp-0x50],rax
0x19db000855e2   de2  4c897da8       REX.W movq [rbp-0x58],r15
0x19db000855e6   de6  4c894590       REX.W movq [rbp-0x70],r8
0x19db000855ea   dea  488b1d87faffff REX.W movq rbx,[rip+0xfffffa87]
0x19db000855f1   df1  4c8be0         REX.W movq r12,rax
0x19db000855f4   df4  b802000000     movl rax,0x2
0x19db000855f9   df9  33f6           xorl rsi,rsi
0x19db000855fb   dfb  4c8b1537faffff REX.W movq r10,[rip+0xfffffa37]
0x19db00085602   e02  41ffd2         call r10
0x19db00085605   e05  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00085609   e09  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db0008560e   e0e  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db00085613   e13  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db00085618   e18  488bbd78ffffff REX.W movq rdi,[rbp-0x88]
0x19db0008561f   e1f  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00085629   e29  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0008562e   e2e  488b75c8       REX.W movq rsi,[rbp-0x38]
0x19db00085632   e32  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db00085636   e36  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db0008563a   e3a  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db0008563e   e3e  4c8b7da8       REX.W movq r15,[rbp-0x58]
0x19db00085642   e42  4c8b4590       REX.W movq r8,[rbp-0x70]
0x19db00085646   e46  33db           xorl rbx,rbx
0x19db00085648   e48  e966f7ffff     jmp 0x19db00084db3  <+0x5b3>
0x19db0008564d   e4d  4150           push r8
0x19db0008564f   e4f  4151           push r9
0x19db00085651   e51  c5fb116da8     vmovsd [rbp-0x58],xmm5
0x19db00085656   e56  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db0008565b   e5b  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db00085660   e60  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db00085665   e65  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db0008566a   e6a  4889bd78ffffff REX.W movq [rbp-0x88],rdi
0x19db00085671   e71  488975c8       REX.W movq [rbp-0x38],rsi
0x19db00085675   e75  488955c0       REX.W movq [rbp-0x40],rdx
0x19db00085679   e79  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db0008567d   e7d  4c8945b0       REX.W movq [rbp-0x50],r8
0x19db00085681   e81  4c8be3         REX.W movq r12,rbx
0x19db00085684   e84  488b1dedf9ffff REX.W movq rbx,[rip+0xfffff9ed]
0x19db0008568b   e8b  b802000000     movl rax,0x2
0x19db00085690   e90  4c8bfe         REX.W movq r15,rsi
0x19db00085693   e93  33f6           xorl rsi,rsi
0x19db00085695   e95  4c8b159df9ffff REX.W movq r10,[rip+0xfffff99d]
0x19db0008569c   e9c  41ffd2         call r10
0x19db0008569f   e9f  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db000856a3   ea3  c5fb106da8     vmovsd xmm5,[rbp-0x58]
0x19db000856a8   ea8  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db000856ad   ead  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db000856b2   eb2  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db000856b7   eb7  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db000856bc   ebc  488bbd78ffffff REX.W movq rdi,[rbp-0x88]
0x19db000856c3   ec3  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000856cd   ecd  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000856d2   ed2  488b75c8       REX.W movq rsi,[rbp-0x38]
0x19db000856d6   ed6  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db000856da   eda  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db000856de   ede  4c8b45b0       REX.W movq r8,[rbp-0x50]
0x19db000856e2   ee2  33db           xorl rbx,rbx
0x19db000856e4   ee4  e929f7ffff     jmp 0x19db00084e12  <+0x612>
0x19db000856e9   ee9  4154           push r12
0x19db000856eb   eeb  4151           push r9
0x19db000856ed   eed  c57b1145b0     vmovsd [rbp-0x50],xmm8
0x19db000856f2   ef2  c5fb116da8     vmovsd [rbp-0x58],xmm5
0x19db000856f7   ef7  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db000856fc   efc  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db00085701   f01  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db00085706   f06  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db0008570b   f0b  4889bd78ffffff REX.W movq [rbp-0x88],rdi
0x19db00085712   f12  488975c8       REX.W movq [rbp-0x38],rsi
0x19db00085716   f16  488955c0       REX.W movq [rbp-0x40],rdx
0x19db0008571a   f1a  4c8965b8       REX.W movq [rbp-0x48],r12
0x19db0008571e   f1e  4c8bf3         REX.W movq r14,rbx
0x19db00085721   f21  488b1d50f9ffff REX.W movq rbx,[rip+0xfffff950]
0x19db00085728   f28  b802000000     movl rax,0x2
0x19db0008572d   f2d  4c8bfe         REX.W movq r15,rsi
0x19db00085730   f30  33f6           xorl rsi,rsi
0x19db00085732   f32  4c8b1500f9ffff REX.W movq r10,[rip+0xfffff900]
0x19db00085739   f39  41ffd2         call r10
0x19db0008573c   f3c  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00085740   f40  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00085744   f44  c57b1045b0     vmovsd xmm8,[rbp-0x50]
0x19db00085749   f49  c5fb106da8     vmovsd xmm5,[rbp-0x58]
0x19db0008574e   f4e  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db00085753   f53  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db00085758   f58  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db0008575d   f5d  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db00085762   f62  488bbd78ffffff REX.W movq rdi,[rbp-0x88]
0x19db00085769   f69  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00085773   f73  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00085778   f78  488b75c8       REX.W movq rsi,[rbp-0x38]
0x19db0008577c   f7c  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db00085780   f80  4c8b65b8       REX.W movq r12,[rbp-0x48]
0x19db00085784   f84  33db           xorl rbx,rbx
0x19db00085786   f86  e9d0f6ffff     jmp 0x19db00084e5b  <+0x65b>
0x19db0008578b   f8b  4154           push r12
0x19db0008578d   f8d  4151           push r9
0x19db0008578f   f8f  c5fb1175b8     vmovsd [rbp-0x48],xmm6
0x19db00085794   f94  c57b1145b0     vmovsd [rbp-0x50],xmm8
0x19db00085799   f99  c5fb116da8     vmovsd [rbp-0x58],xmm5
0x19db0008579e   f9e  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db000857a3   fa3  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db000857a8   fa8  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db000857ad   fad  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db000857b2   fb2  4889bd78ffffff REX.W movq [rbp-0x88],rdi
0x19db000857b9   fb9  4c8965c8       REX.W movq [rbp-0x38],r12
0x19db000857bd   fbd  33f6           xorl rsi,rsi
0x19db000857bf   fbf  4c8bf3         REX.W movq r14,rbx
0x19db000857c2   fc2  488b1daff8ffff REX.W movq rbx,[rip+0xfffff8af]
0x19db000857c9   fc9  b802000000     movl rax,0x2
0x19db000857ce   fce  4c8b1564f8ffff REX.W movq r10,[rip+0xfffff864]
0x19db000857d5   fd5  41ffd2         call r10
0x19db000857d8   fd8  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db000857dc   fdc  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db000857e0   fe0  c5fb1075b8     vmovsd xmm6,[rbp-0x48]
0x19db000857e5   fe5  c57b1045b0     vmovsd xmm8,[rbp-0x50]
0x19db000857ea   fea  c5fb106da8     vmovsd xmm5,[rbp-0x58]
0x19db000857ef   fef  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db000857f4   ff4  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db000857f9   ff9  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db000857fe   ffe  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db00085803  1003  488bbd78ffffff REX.W movq rdi,[rbp-0x88]
0x19db0008580a  100a  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00085814  1014  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00085819  1019  4c8b65c8       REX.W movq r12,[rbp-0x38]
0x19db0008581d  101d  33db           xorl rbx,rbx
0x19db0008581f  101f  e98af6ffff     jmp 0x19db00084eae  <+0x6ae>
0x19db00085824  1024  52             push rdx
0x19db00085825  1025  4151           push r9
0x19db00085827  1027  c57b114dc0     vmovsd [rbp-0x40],xmm9
0x19db0008582c  102c  c5fb1175b8     vmovsd [rbp-0x48],xmm6
0x19db00085831  1031  c57b1145b0     vmovsd [rbp-0x50],xmm8
0x19db00085836  1036  c5fb116da8     vmovsd [rbp-0x58],xmm5
0x19db0008583b  103b  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db00085840  1040  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db00085845  1045  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db0008584a  104a  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db0008584f  104f  4889bd78ffffff REX.W movq [rbp-0x88],rdi
0x19db00085856  1056  33f6           xorl rsi,rsi
0x19db00085858  1058  4c8be3         REX.W movq r12,rbx
0x19db0008585b  105b  488b1d16f8ffff REX.W movq rbx,[rip+0xfffff816]
0x19db00085862  1062  b802000000     movl rax,0x2
0x19db00085867  1067  4c8b15cbf7ffff REX.W movq r10,[rip+0xfffff7cb]
0x19db0008586e  106e  41ffd2         call r10
0x19db00085871  1071  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00085875  1075  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00085879  1079  c57b104dc0     vmovsd xmm9,[rbp-0x40]
0x19db0008587e  107e  c5fb1075b8     vmovsd xmm6,[rbp-0x48]
0x19db00085883  1083  c57b1045b0     vmovsd xmm8,[rbp-0x50]
0x19db00085888  1088  c5fb106da8     vmovsd xmm5,[rbp-0x58]
0x19db0008588d  108d  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db00085892  1092  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db00085897  1097  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db0008589c  109c  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db000858a1  10a1  488b5580       REX.W movq rdx,[rbp-0x80]
0x19db000858a5  10a5  488bbd78ffffff REX.W movq rdi,[rbp-0x88]
0x19db000858ac  10ac  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000858b6  10b6  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000858bb  10bb  33db           xorl rbx,rbx
0x19db000858bd  10bd  e92df6ffff     jmp 0x19db00084eef  <+0x6ef>
0x19db000858c2  10c2  448d243f       leal r12,[rdi+rdi*1]
0x19db000858c6  10c6  4c8b1541f3ffff REX.W movq r10,[rip+0xfffff341]
0x19db000858cd  10cd  4d39e2         REX.W cmpq r10,r12
0x19db000858d0  10d0  7712           ja 0x19db000858e4  <+0x10e4>
0x19db000858d2  10d2  488b1544f3ffff REX.W movq rdx,[rip+0xfffff344]
0x19db000858d9  10d9  4c8b1538efffff REX.W movq r10,[rip+0xffffef38]
0x19db000858e0  10e0  41ffd2         call r10
0x19db000858e3  10e3  cc             int3l
0x19db000858e4  10e4  c57b114dc0     vmovsd [rbp-0x40],xmm9
0x19db000858e9  10e9  c5fb1175b8     vmovsd [rbp-0x48],xmm6
0x19db000858ee  10ee  c57b1145b0     vmovsd [rbp-0x50],xmm8
0x19db000858f3  10f3  c5fb116da8     vmovsd [rbp-0x58],xmm5
0x19db000858f8  10f8  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db000858fd  10fd  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db00085902  1102  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db00085907  1107  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db0008590c  110c  4889bd78ffffff REX.W movq [rbp-0x88],rdi
0x19db00085913  1113  4c89b570ffffff REX.W movq [rbp-0x90],r14
0x19db0008591a  111a  33f6           xorl rsi,rsi
0x19db0008591c  111c  488bc2         REX.W movq rax,rdx
0x19db0008591f  111f  4c8bd3         REX.W movq r10,rbx
0x19db00085922  1122  4c89e3         REX.W movq rbx,r12
0x19db00085925  1125  4d8be2         REX.W movq r12,r10
0x19db00085928  1128  4c8b1507fbffff REX.W movq r10,[rip+0xfffffb07]
0x19db0008592f  112f  41ffd2         call r10
0x19db00085932  1132  a801           test al,0x1
0x19db00085934  1134  0f8496020000   jz 0x19db00085bd0  <+0x13d0>
0x19db0008593a  113a  4c8be0         REX.W movq r12,rax
0x19db0008593d  113d  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00085941  1141  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00085945  1145  c57b104dc0     vmovsd xmm9,[rbp-0x40]
0x19db0008594a  114a  c5fb1075b8     vmovsd xmm6,[rbp-0x48]
0x19db0008594f  114f  c57b1045b0     vmovsd xmm8,[rbp-0x50]
0x19db00085954  1154  c5fb106da8     vmovsd xmm5,[rbp-0x58]
0x19db00085959  1159  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db0008595e  115e  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db00085963  1163  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db00085968  1168  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db0008596d  116d  488b5580       REX.W movq rdx,[rbp-0x80]
0x19db00085971  1171  488bbd78ffffff REX.W movq rdi,[rbp-0x88]
0x19db00085978  1178  4c8bb570ffffff REX.W movq r14,[rbp-0x90]
0x19db0008597f  117f  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00085989  1189  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0008598e  118e  33db           xorl rbx,rbx
0x19db00085990  1190  e9acf5ffff     jmp 0x19db00084f41  <+0x741>
0x19db00085995  1195  4c897dc8       REX.W movq [rbp-0x38],r15
0x19db00085999  1199  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000859a3  11a3  488bfb         REX.W movq rdi,rbx
0x19db000859a6  11a6  488b1df9faffff REX.W movq rbx,[rip+0xfffffaf9]
0x19db000859ad  11ad  33c0           xorl rax,rax
0x19db000859af  11af  4c8b1583f6ffff REX.W movq r10,[rip+0xfffff683]
0x19db000859b6  11b6  41ffd2         call r10
0x19db000859b9  11b9  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db000859bd  11bd  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db000859c1  11c1  4c8b7dc8       REX.W movq r15,[rbp-0x38]
0x19db000859c5  11c5  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000859cf  11cf  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000859d4  11d4  33db           xorl rbx,rbx
0x19db000859d6  11d6  e9b5f2ffff     jmp 0x19db00084c90  <+0x490>
0x19db000859db  11db  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db000859df  11df  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000859e9  11e9  488bfb         REX.W movq rdi,rbx
0x19db000859ec  11ec  488b1db3faffff REX.W movq rbx,[rip+0xfffffab3]
0x19db000859f3  11f3  488bc8         REX.W movq rcx,rax
0x19db000859f6  11f6  33c0           xorl rax,rax
0x19db000859f8  11f8  4c8b153af6ffff REX.W movq r10,[rip+0xfffff63a]
0x19db000859ff  11ff  41ffd2         call r10
0x19db00085a02  1202  488b45e0       REX.W movq rax,[rbp-0x20]
0x19db00085a06  1206  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00085a0a  120a  4c8b6520       REX.W movq r12,[rbp+0x20]
0x19db00085a0e  120e  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00085a12  1212  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00085a1c  121c  33db           xorl rbx,rbx
0x19db00085a1e  121e  e94defffff     jmp 0x19db00084970  <+0x170>
0x19db00085a23  1223  cc             int3l
0x19db00085a24  1224  90             nop
0x19db00085a25  1225  41ff95f8360000 call [r13+0x36f8]
0x19db00085a2c  122c  41ff95f8360000 call [r13+0x36f8]
0x19db00085a33  1233  41ff95f8360000 call [r13+0x36f8]
0x19db00085a3a  123a  41ff95f8360000 call [r13+0x36f8]
0x19db00085a41  1241  41ff95f8360000 call [r13+0x36f8]
0x19db00085a48  1248  41ff95f8360000 call [r13+0x36f8]
0x19db00085a4f  124f  41ff95f8360000 call [r13+0x36f8]
0x19db00085a56  1256  41ff95f8360000 call [r13+0x36f8]
0x19db00085a5d  125d  41ff95f8360000 call [r13+0x36f8]
0x19db00085a64  1264  41ff95f8360000 call [r13+0x36f8]
0x19db00085a6b  126b  41ff95f8360000 call [r13+0x36f8]
0x19db00085a72  1272  41ff95f8360000 call [r13+0x36f8]
0x19db00085a79  1279  41ff95f8360000 call [r13+0x36f8]
0x19db00085a80  1280  41ff95f8360000 call [r13+0x36f8]
0x19db00085a87  1287  41ff95f8360000 call [r13+0x36f8]
0x19db00085a8e  128e  41ff95f8360000 call [r13+0x36f8]
0x19db00085a95  1295  41ff95f8360000 call [r13+0x36f8]
0x19db00085a9c  129c  41ff95f8360000 call [r13+0x36f8]
0x19db00085aa3  12a3  41ff95f8360000 call [r13+0x36f8]
0x19db00085aaa  12aa  41ff95f8360000 call [r13+0x36f8]
0x19db00085ab1  12b1  41ff95f8360000 call [r13+0x36f8]
0x19db00085ab8  12b8  41ff95f8360000 call [r13+0x36f8]
0x19db00085abf  12bf  41ff95f8360000 call [r13+0x36f8]
0x19db00085ac6  12c6  41ff95f8360000 call [r13+0x36f8]
0x19db00085acd  12cd  41ff95f8360000 call [r13+0x36f8]
0x19db00085ad4  12d4  41ff95f8360000 call [r13+0x36f8]
0x19db00085adb  12db  41ff95f8360000 call [r13+0x36f8]
0x19db00085ae2  12e2  41ff95f8360000 call [r13+0x36f8]
0x19db00085ae9  12e9  41ff95f8360000 call [r13+0x36f8]
0x19db00085af0  12f0  41ff95f8360000 call [r13+0x36f8]
0x19db00085af7  12f7  41ff95f8360000 call [r13+0x36f8]
0x19db00085afe  12fe  41ff95f8360000 call [r13+0x36f8]
0x19db00085b05  1305  41ff95f8360000 call [r13+0x36f8]
0x19db00085b0c  130c  41ff95f8360000 call [r13+0x36f8]
0x19db00085b13  1313  41ff95f8360000 call [r13+0x36f8]
0x19db00085b1a  131a  41ff95f8360000 call [r13+0x36f8]
0x19db00085b21  1321  41ff95f8360000 call [r13+0x36f8]
0x19db00085b28  1328  41ff95f8360000 call [r13+0x36f8]
0x19db00085b2f  132f  41ff95f8360000 call [r13+0x36f8]
0x19db00085b36  1336  41ff95f8360000 call [r13+0x36f8]
0x19db00085b3d  133d  41ff95f8360000 call [r13+0x36f8]
0x19db00085b44  1344  41ff95f8360000 call [r13+0x36f8]
0x19db00085b4b  134b  41ff95f8360000 call [r13+0x36f8]
0x19db00085b52  1352  41ff95f8360000 call [r13+0x36f8]
0x19db00085b59  1359  41ff95f8360000 call [r13+0x36f8]
0x19db00085b60  1360  41ff95f8360000 call [r13+0x36f8]
0x19db00085b67  1367  41ff95f8360000 call [r13+0x36f8]
0x19db00085b6e  136e  41ff95f8360000 call [r13+0x36f8]
0x19db00085b75  1375  41ff95f8360000 call [r13+0x36f8]
0x19db00085b7c  137c  41ff95f8360000 call [r13+0x36f8]
0x19db00085b83  1383  41ff95f8360000 call [r13+0x36f8]
0x19db00085b8a  138a  41ff95f8360000 call [r13+0x36f8]
0x19db00085b91  1391  41ff95f8360000 call [r13+0x36f8]
0x19db00085b98  1398  41ff95f8360000 call [r13+0x36f8]
0x19db00085b9f  139f  41ff95f8360000 call [r13+0x36f8]
0x19db00085ba6  13a6  41ff95f8360000 call [r13+0x36f8]
0x19db00085bad  13ad  41ff95f8360000 call [r13+0x36f8]
0x19db00085bb4  13b4  41ff95f8360000 call [r13+0x36f8]
0x19db00085bbb  13bb  41ff95f8360000 call [r13+0x36f8]
0x19db00085bc2  13c2  41ff95f8360000 call [r13+0x36f8]
0x19db00085bc9  13c9  41ff95f8360000 call [r13+0x36f8]
0x19db00085bd0  13d0  41ff95f8360000 call [r13+0x36f8]
0x19db00085bd7  13d7  41ff95f8360000 call [r13+0x36f8]
0x19db00085bde  13de  41ff9510370000 call [r13+0x3710]
0x19db00085be5  13e5  41ff9510370000 call [r13+0x3710]
0x19db00085bec  13ec  41ff9510370000 call [r13+0x3710]
0x19db00085bf3  13f3  41ff9510370000 call [r13+0x3710]
0x19db00085bfa  13fa  6690           nop

Source positions:
 pc offset  position
       81e      2472

Inlined functions (count = 0)

Deoptimization Input Data (deopt points = 67)
 index  bytecode-offset    pc
     0               14    NA 
     1               14    NA 
     2               14    NA 
     3               14    NA 
     4               14    NA 
     5               24    NA 
     6               24    NA 
     7               24    NA 
     8               24    NA 
     9               24    NA 
    10               24    NA 
    11               24    NA 
    12               24    NA 
    13               24    NA 
    14               24    NA 
    15               24    NA 
    16               24    NA 
    17               24    NA 
    18               24    NA 
    19               24    NA 
    20               24    NA 
    21               24    NA 
    22               24    NA 
    23               24    NA 
    24               24    NA 
    25               24    NA 
    26               24    NA 
    27               24    NA 
    28               24    NA 
    29               24    NA 
    30               24    NA 
    31               24    NA 
    32               24    NA 
    33               24    NA 
    34               24    NA 
    35               24    NA 
    36               24    NA 
    37               24    NA 
    38               24    NA 
    39               24    NA 
    40               24    NA 
    41               24    NA 
    42               24    NA 
    43               24    NA 
    44               24    NA 
    45               24    NA 
    46               24    NA 
    47               24    NA 
    48               24    NA 
    49               24    NA 
    50               24    NA 
    51               24    NA 
    52               24    NA 
    53               24    NA 
    54               24    NA 
    55               24    NA 
    56               24    NA 
    57               24    NA 
    58               24    NA 
    59               24    NA 
    60               24    NA 
    61               24    NA 
    62               24    NA 
    63               -1   844 
    64              175   cba 
    65              175  11b9 
    66              184  1202 

Safepoints (size = 323)
0x19db00085044     844  13de  00000000000001000000 (sp -> fp)      63
0x19db0008505b     85b    NA  00000000000001000000 (sp -> fp)  <none>
0x19db00085091     891    NA  00010000001101100000 (sp -> fp)  <none>
0x19db000850fd     8fd    NA  00010001011101100000 (sp -> fp)  <none>
0x19db0008517e     97e    NA  00010100011101100000 (sp -> fp)  <none>
0x19db0008520e     a0e    NA  00010000011101100000 (sp -> fp)  <none>
0x19db0008529d     a9d    NA  00010000001101100000 (sp -> fp)  <none>
0x19db0008532a     b2a    NA  00010000000101100000 (sp -> fp)  <none>
0x19db000853b6     bb6    NA  00010000000001100000 (sp -> fp)  <none>
0x19db00085441     c41    NA  00010000000001100000 (sp -> fp)  <none>
0x19db000854ba     cba  13e5  00000000000001100000 (sp -> fp)      64
0x19db00085505     d05    NA  00100000010101100000 (sp -> fp)  <none>
0x19db00085576     d76    NA  00100010110101100000 (sp -> fp)  <none>
0x19db00085605     e05    NA  00101000110101100000 (sp -> fp)  <none>
0x19db0008569f     e9f    NA  00100000110101100000 (sp -> fp)  <none>
0x19db0008573c     f3c    NA  00100000010101100000 (sp -> fp)  <none>
0x19db000857d8     fd8    NA  00100000000101100000 (sp -> fp)  <none>
0x19db00085871    1071    NA  00100000000001100000 (sp -> fp)  <none>
0x19db00085932    1132    NA  00100000000001100000 (sp -> fp)  <none>
0x19db000859b9    11b9  13ec  00000000000001100000 (sp -> fp)      65
0x19db00085a02    1202  13f3  00000000000001100000 (sp -> fp)      66

RelocInfo (size = 124)
0x19db00084818  off heap target
0x19db00084832  off heap target
0x19db00084858  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db00084869  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db00084887  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0008493d  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00084971  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000849e8  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00085020  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db0008502f  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00085039  off heap target
0x19db00085050  off heap target
0x19db00085078  external reference (Runtime::TransitionElementsKind)  (0x7ffff6fe6190)
0x19db0008509f  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000850a8  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000850b7  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00085107  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00085110  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00085188  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00085191  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00085214  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0008521d  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000852a7  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000852b0  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00085334  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0008533d  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000853c0  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000853c9  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00085436  off heap target
0x19db00085455  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0008545e  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0008549c  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000854a6  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db000854c4  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000854cd  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0008551a  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00085523  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0008558c  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00085595  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00085621  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0008562a  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000856c5  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000856ce  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0008576b  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00085774  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0008580c  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00085815  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000858ae  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000858b7  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00085981  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0008598a  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0008599b  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000859c7  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000859d0  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000859e1  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00085a14  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)

--- End code ---
assign 0 to v-1:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
assign 6 to v-7:0
------------------------
function: VMulti
add v96->v98
add v93->v88
add v89->v91
add v81->v87
add v86->v87
add v85->v53
add v84->v53
add v84->v53
add v84->v53
add v84->v53
add v83->v81
add v80->v81
add v46->v0
add v79->v0
add v53->v0
add v78->v3
add v47->v3
add v77->v3
add v76->v47
add v46->v76
add v67->v76
add v75->v76
add v64->v67
add v74->v4
add v46->v4
add v41->v4
add v69->v4
add v65->v67
add v63->v67
add v60->v67
add v55->v53
adding pairs 2, v30:0x7fffc400fac0, v47:0x7fffc400d348
add v46->v45
add v42->v45
add v44->v45
add v25->v42
add v24->v41
add v27->v42
add v26->v41
add v23->v42
add v22->v41
add v19->v42
add v18->v41
add v32->v0
add v39->v0
add v40->v32
add v38->v31
add v6->v30
add v29->v0
adding pairs 3, v30:0x7fffc400fac0, v10:0x7fffc400f9a8
gap () () 
          [stack:-1|t] = ArchNop
gap (v2(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v3(-) = [stack:-2|t];) () 
          [stack:-3|t] = ArchNop
gap (v4(-) = [stack:-3|t];) () 
          [rsi|R|t] = ArchNop
gap (v5(-) = [rsi|R|t];) () 
          [constant:49] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:165] [immediate:166]
gap () () 
          [constant:102] = ArchNop
gap () () 
          [constant:101] = ArchNop
gap () () 
          v100(R) = ArchStackCheckOffset
gap () () 
          X64Push v100(-)
gap () ([rbx|R|w64] = v101(-); [rax|R|w64] = v49(-); [rsi|R|t] = v102(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:163] #-1 #26 [immediate:164] v2(S) v3(S) v4(S) v5(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:162]
gap () () 
          ArchJmp [immediate:161]
gap () () 
          [constant:8] = ArchNop
gap () () 
          [constant:98] = ArchNop
gap () () 
          X64Test32 && branch if equal v98 #1 [immediate:159] [immediate:160]
gap () () 
          v96(R) = X64Movsd : MRI v98(R) [immediate:158]
gap () (v84 = v96(-);) 
          ArchJmp [immediate:157]
gap () (v97(R) = v98(-);) 
          v97(1) = X64Sar32 v97(R) #1
gap () () 
          v95(R) = SSEInt32ToFloat64 v97
gap () (v84 = v95(-);) 
          ArchJmp [immediate:156]
gap () () 
          [constant:82] = ArchNop
gap () () 
          v88(R) = X64Movq : MR v82(R)
gap () () 
          [constant:94] = ArchNop
gap () () 
          [constant:92] = ArchNop
gap () () 
          v93(R) = X64Lea : MRI v88(R) [immediate:155]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v94(R) v93(R) [immediate:153] [immediate:154]
gap () () 
          ArchJmp [immediate:152]
gap () ([rdx|R|w64] = v92(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:151] #-1 [rdx|R|w64]
gap (v91(-) = [rax|R|tp];) () 
          v89(R) = X64Lea : MRI v91(R) [immediate:150]
gap () (v87 = v89(-);) 
          ArchJmp [immediate:149]
gap () (v87 = v88(-);) 
          ArchJmp [immediate:148]
gap () () 
          v81(R) = X64Lea : MRI v87(R) [immediate:147]
gap () () 
          X64Movq : MR v82(R) v81(R)
gap () () 
          v86(R) = X64Lea : MRI v87(R) [immediate:146]
gap () (v53 = v86(-);) 
          v53(1) = ArchNop v53
gap () () 
          [constant:85] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v53(R) [immediate:145] v85(R)
gap () () 
          X64MovqCompressTagged : MRI v53(R) [immediate:143] [immediate:144]
gap () () 
          X64Movsd : MRI v53(R) [immediate:142] v84(R)
gap () () 
          X64Movsd : MRI v53(R) [immediate:141] v84(R)
gap () () 
          X64Movsd : MRI v53(R) [immediate:140] v84(R)
gap () () 
          X64Movsd : MRI v53(R) [immediate:139] v84(R)
gap () () 
          v83(R) = X64Lea : MRI v81(R) [immediate:138]
gap () () 
          X64Movq : MR v82(R) v83(R)
gap () () 
          v80(R) = X64Lea : MRI v81(R) [immediate:137]
gap () (v0 = v80(-);) 
          v0(1) = ArchNop v0
gap () () 
          [constant:46] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:136] v46(R)
gap () () 
          [constant:79] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:135] v79(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:134] v53(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:132] [immediate:133]
gap () () 
          X64Test32 && deoptimize if equal v3 #1 #25 [immediate:129] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:130] [immediate:131]
gap () () 
          [constant:78] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:125] v78(R) #24 [immediate:126] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:127] [immediate:128]
gap () () 
          v47(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:124]
gap () () 
          v77(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:123]
gap () (v48(R) = v77(-);) 
          v48(1) = X64Sar32 v48(R) #1
gap () () 
          [constant:72] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v48 #0 #23 [immediate:120] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:121] [immediate:122]
gap () () 
          v76(R) = X64MovqDecompressAnyTagged : MRI v47(R) [immediate:119]
gap () () 
          X64Test32 && deoptimize if equal v76 #1 #22 [immediate:116] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:117] [immediate:118]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v76(R) [immediate:112] v46(R) #21 [immediate:113] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:114] [immediate:115]
gap () () 
          v67(R) = X64MovqDecompressTaggedPointer : MRI v76(R) [immediate:111]
gap () () 
          v75(R) = X64MovqDecompressTaggedSigned : MRI v76(R) [immediate:110]
gap () (v68(R) = v75(-);) 
          v68(1) = X64Sar32 v68(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v68 #0 #20 [immediate:107] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:108] [immediate:109]
gap () () 
          v64(R) = X64Movsd : MRI v67(R) [immediate:106]
gap () () 
          X64Test32 && deoptimize if equal v4 #1 #19 [immediate:103] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:104] [immediate:105]
gap () () 
          [constant:74] = ArchNop
gap () () 
          X64Cmp32 : MRI && branch if equal v4(R) [immediate:100] v74(R) [immediate:101] [immediate:102]
gap () () 
          ArchJmp [immediate:99]
gap () () 
          [constant:73] = ArchNop
gap () () 
          [constant:71] = ArchNop
gap () () 
          X64Push v4(-)
gap () () 
          X64Push v46(-)
gap () ([rbx|R|w64] = v71(-); [rax|R|w64] = v72(-); [rsi|R|w64] = v73(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:98] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:97]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v4(R) [immediate:93] v46(R) #18 [immediate:94] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:95] [immediate:96]
gap () () 
          v41(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:92]
gap () () 
          v69(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:91]
gap () (v66(R) = v69(-);) 
          v66(1) = X64Sar32 v66(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v66 #0 #17 [immediate:88] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:89] [immediate:90]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v68 #1 #16 [immediate:85] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:86] [immediate:87]
gap () () 
          v65(R) = X64Movsd : MRI v67(R) [immediate:84]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v66 #1 #15 [immediate:81] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:82] [immediate:83]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v68 #2 #14 [immediate:78] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:79] [immediate:80]
gap () () 
          v63(R) = X64Movsd : MRI v67(R) [immediate:77]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v66 #2 #13 [immediate:74] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:75] [immediate:76]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v68 #3 #12 [immediate:71] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:72] [immediate:73]
gap () () 
          v60(R) = X64Movsd : MRI v67(R) [immediate:70]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v66 #3 #11 [immediate:67] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:68] [immediate:69]
gap () () 
          v61(R) = AVXFloat64Mul : MRI v65(R) v41(R) [immediate:66]
gap () () 
          v62(R) = AVXFloat64Mul : MRI v64(R) v41(R) [immediate:65]
gap () () 
          v58(R) = AVXFloat64Mul : MRI v63(R) v41(R) [immediate:64]
gap () () 
          v59(R) = AVXFloat64Add v61(R) v62
gap () () 
          v56(R) = AVXFloat64Mul : MRI v60(R) v41(R) [immediate:63]
gap () () 
          v57(R) = AVXFloat64Add v58(R) v59
gap () () 
          v55(R) = AVXFloat64Add v56(R) v57
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:61] [immediate:62]
gap () () 
          X64Movsd : MRI v53(R) [immediate:60] v55(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:58] [immediate:59]
gap () () 
          [constant:52] = ArchNop
gap () () 
          [constant:51] = ArchNop
gap () ([rbx|R|w64] = v51(-); [rax|R|w64] = v8(-); [rsi|R|t] = v52(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:56] #-1 #10 [immediate:57] v2(S) v3(S) v4(S) v5(S) v0(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:55]
gap () () 
          ArchJmp [immediate:54]
gap () (v30 = v49(-);) 
          ArchJmp [immediate:53]
gap () () 
          X64Cmp32 && branch if unsigned less than v30 #4 [immediate:51] [immediate:52]
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v30(R) v48 #9 [immediate:49] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:50]
gap () () 
          v45(R) = X64MovqDecompressAnyTagged : MR4I v47(R) v30(R) [immediate:48]
gap () () 
          X64Test32 && deoptimize if equal v45 #1 #8 [immediate:46] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:47]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v45(R) [immediate:43] v46(R) #7 [immediate:44] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:45]
gap () () 
          v42(R) = X64MovqDecompressTaggedPointer : MRI v45(R) [immediate:42]
gap () () 
          v44(R) = X64MovqDecompressTaggedSigned : MRI v45(R) [immediate:41]
gap () (v43(R) = v44(-);) 
          v43(1) = X64Sar32 v43(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v43 #0 #6 [immediate:39] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:40]
gap () () 
          v25(R) = X64Movsd : MRI v42(R) [immediate:38]
gap () () 
          v24(R) = X64Movsd : MRI v41(R) [immediate:37]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v43 #1 #5 [immediate:35] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:36]
gap () () 
          v27(R) = X64Movsd : MRI v42(R) [immediate:34]
gap () () 
          v26(R) = X64Movsd : MRI v41(R) [immediate:33]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v43 #2 #4 [immediate:31] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:32]
gap () () 
          v23(R) = X64Movsd : MRI v42(R) [immediate:30]
gap () () 
          v22(R) = X64Movsd : MRI v41(R) [immediate:29]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v43 #3 #3 [immediate:27] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:28]
gap () () 
          v19(R) = X64Movsd : MRI v42(R) [immediate:26]
gap () () 
          v18(R) = X64Movsd : MRI v41(R) [immediate:25]
gap () () 
          v32(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:24]
gap () () 
          v39(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:23]
gap () () 
          v40(R) = X64MovqDecompressTaggedSigned : MRI v32(R) [immediate:22]
gap () (v37(R) = v40(-);) 
          v37(1) = X64Sar32 v37(R) #1
gap () (v31(R) = v39(-);) 
          v31(1) = X64Sar32 v31(R) #1
gap () () 
          v38(R) = X64Lea32 : MRI v31(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v30(R) v38 #2 [immediate:20] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:21]
gap () () 
          X64Cmp32 && branch if unsigned less than v30(R) v37 [immediate:18] [immediate:19]
gap () () 
          v36(R) = X64Lea32 : MR1 v30(R) v30(R)
gap () () 
          [constant:35] = ArchNop
gap () ([rax|R|t] = v0(-); [rbx|R|w32] = v36(-); [rsi|R|w64] = v35(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:17] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v33(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v33 #1 #1 [immediate:15] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:16]
gap () (v10 = v33(-);) 
          ArchJmp [immediate:14]
gap () (v10 = v32(-);) 
          ArchJmp [immediate:13]
gap () () 
          v6(R) = X64Lea32 : MRI v30(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v30(R) v31 [immediate:11] [immediate:12]
gap () () 
          v29(R) = X64Lea32 : MR1 v6(R) v6(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:10] v29(R)
gap () () 
          ArchJmp [immediate:9]
gap () () 
          ArchJmp [immediate:8]
gap () () 
          v20(R) = AVXFloat64Mul v26(R) v27
gap () () 
          v21(R) = AVXFloat64Mul v24(R) v25
gap () () 
          v16(R) = AVXFloat64Mul v22(R) v23
gap () () 
          v17(R) = AVXFloat64Add v20(R) v21
gap () () 
          v14(R) = AVXFloat64Mul v18(R) v19
gap () () 
          v15(R) = AVXFloat64Add v16(R) v17
gap () () 
          v13(R) = AVXFloat64Add v14(R) v15
gap () () 
          X64Movsd : MR8I v10(R) v30(R) [immediate:7] v13(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:5] [immediate:6]
gap () () 
          [constant:9] = ArchNop
gap () () 
          [constant:7] = ArchNop
gap () ([rbx|R|w64] = v7(-); [rax|R|w64] = v8(-); [rsi|R|t] = v9(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:3] #-1 #0 [immediate:4] v2(S) v3(S) v4(S) v5(S) v0(S) v6(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:2]
gap () () 
          ArchJmp [immediate:1]
gap () (v30 = v6(-);) 
          ArchJmp [immediate:0]
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
2, v30, v47
3, v30, v10
print modrm pairs
1, v29, v0
1, v6, v30
1, v38, v31
1, v39, v0
1, v32, v0
1, v22, v41
1, v26, v41
1, v24, v41
1, v44, v45
1, v60, v67
1, v69, v4
1, v25, v42
1, v74, v4
1, v18, v41
1, v23, v42
1, v41, v4
1, v67, v76
1, v83, v81
1, v77, v3
1, v19, v42
1, v78, v3
1, v55, v53
1, v75, v76
1, v84, v53
1, v46, v4
1, v46, v45
1, v46, v76
1, v46, v0
1, v85, v53
1, v64, v67
1, v80, v81
1, v76, v47
1, v40, v32
1, v53, v0
1, v86, v87
1, v27, v42
1, v65, v67
1, v42, v45
1, v81, v87
1, v47, v3
1, v89, v91
1, v79, v0
1, v63, v67
1, v93, v88
1, v96, v98
assign rcx to v100:0
assign 1 to v100:0
assign rax to v49:1
assign 0 to v49:1
assign rbx to v101:1
assign 3 to v101:1
assign rsi to v102:1
assign 6 to v102:1
assign rcx to v49:2
assign 1 to v49:2
assign rcx to v98:1
assign 1 to v98:1
assign rcx to v97:0
assign 1 to v97:0
assign rcx to v82:1
assign 1 to v82:1
assign rdi to v88:0
assign 7 to v88:0
assign r8 to v93:0
assign 8 to v93:0
assign r9 to v94:1
assign 9 to v94:1
assign rdx to v92:1
assign 2 to v92:1
blocking v82 pick register rcx
assign rax to v91:0
assign 0 to v91:0
assign rdi to v89:0
assign 7 to v89:0
assign rcx to v82:4
assign 1 to v82:4
assign rdi to v87:0
assign 7 to v87:0
assign r8 to v81:0
assign 8 to v81:0
assign rcx to v82:3
assign 1 to v82:3
assign rdi to v86:0
assign 7 to v86:0
assign rdi to v53:0
assign 7 to v53:0
assign r9 to v85:1
assign 9 to v85:1
assign r9 to v83:0
assign 9 to v83:0
assign rcx to v80:0
assign 1 to v80:0
assign rcx to v0:0
assign 1 to v0:0
assign r8 to v46:1
assign 8 to v46:1
assign r9 to v79:1
assign 9 to v79:1
assign r9 to v3:1
assign 9 to v3:1
assign r12 to v78:1
assign 12 to v78:1
assign r12 to v47:0
assign 12 to v47:0
assign r14 to v77:0
assign 14 to v77:0
assign r14 to v48:0
assign 14 to v48:0
assign rax to v76:0
assign 0 to v76:0
assign r15 to v67:0
assign 15 to v67:0
assign rax to v75:0
assign 0 to v75:0
assign rax to v68:0
assign 0 to v68:0
assign r11 to v4:1
assign 11 to v4:1
assign rdx to v74:1
assign 2 to v74:1
assign rbx to v71:1
assign 3 to v71:1
assign rdx to v72:1
assign 2 to v72:1
assign rsi to v73:1
assign 6 to v73:1
assign rdx to v68:1
assign 2 to v68:1
blocking v0 pick register rcx
blocking v53 pick register rdi
blocking v46 pick register r8
blocking v4 pick register r11
blocking v47 pick register r12
blocking v67 pick register r15
assign r11 to v4:4
assign 11 to v4:4
assign rax to v68:3
assign 0 to v68:3
assign r15 to v67:3
assign 15 to v67:3
assign r14 to v48:2
assign 14 to v48:2
assign r12 to v47:3
assign 12 to v47:3
assign r9 to v3:3
assign 9 to v3:3
assign r8 to v46:4
assign 8 to v46:4
assign rcx to v0:3
assign 1 to v0:3
assign rdi to v53:3
assign 7 to v53:3
assign r8 to v46:3
assign 8 to v46:3
assign r11 to v4:3
assign 11 to v4:3
assign rdx to v41:0
assign 2 to v41:0
assign rsi to v69:0
assign 6 to v69:0
assign rsi to v66:0
assign 6 to v66:0
assign r15 to v67:2
assign 15 to v67:2
assign rcx to v0:2
assign 1 to v0:2
assign rdi to v53:2
assign 7 to v53:2
assign rax to v8:1
assign 0 to v8:1
assign rbx to v51:1
assign 3 to v51:1
assign rsi to v52:1
assign 6 to v52:1
assign rdi to v8:2
assign 7 to v8:2
blocking v0 pick register rcx
blocking v41 pick register rdx
blocking v46 pick register r8
assign rcx to v0:6
assign 1 to v0:6
assign rdx to v41:3
assign 2 to v41:3
assign r11 to v4:6
assign 11 to v4:6
assign r8 to v46:7
assign 8 to v46:7
assign r9 to v3:5
assign 9 to v3:5
assign r12 to v47:5
assign 12 to v47:5
assign r14 to v48:4
assign 14 to v48:4
assign rcx to v0:5
assign 1 to v0:5
assign rdx to v41:2
assign 2 to v41:2
assign r8 to v46:6
assign 8 to v46:6
assign r12 to v47:2
assign 12 to v47:2
assign rax to v30:0
assign 0 to v30:0
blocking v45 pick register r9
assign r9 to v45:0
assign 9 to v45:0
assign rdi to v42:0
assign 7 to v42:0
assign r9 to v44:0
assign 9 to v44:0
assign r9 to v43:0
assign 9 to v43:0
assign rdi to v32:0
assign 7 to v32:0
assign r9 to v39:0
assign 9 to v39:0
assign r15 to v40:0
assign 15 to v40:0
assign r15 to v37:0
assign 15 to v37:0
assign r9 to v31:0
assign 9 to v31:0
assign rsi to v38:0
assign 6 to v38:0
assign rbx to v36:0
assign 3 to v36:0
assign rsi to v35:1
assign 6 to v35:1
assign rdi to v30:1
assign 7 to v30:1
blocking v0 pick register rcx
blocking v30 pick register rax
assign rax to v33:0
assign 0 to v33:0
assign r9 to v31:2
assign 9 to v31:2
assign rax to v30:4
assign 0 to v30:4
assign r12 to v47:7
assign 12 to v47:7
assign r8 to v46:9
assign 8 to v46:9
assign rdx to v41:5
assign 2 to v41:5
assign rcx to v0:9
assign 1 to v0:9
assign r14 to v48:6
assign 14 to v48:6
assign r11 to v4:8
assign 11 to v4:8
assign rdi to v10:0
assign 7 to v10:0
assign rax to v30:3
assign 0 to v30:3
assign r15 to v6:0
assign 15 to v6:0
assign r9 to v29:0
assign 9 to v29:0
assign rcx to v0:8
assign 1 to v0:8
assign rbx to v7:1
assign 3 to v7:1
assign rsi to v9:1
assign 6 to v9:1
assign rcx to v0:11
assign 1 to v0:11
assign r15 to v6:2
assign 15 to v6:2
assign r11 to v4:10
assign 11 to v4:10
assign r14 to v48:8
assign 14 to v48:8
assign rdx to v41:7
assign 2 to v41:7
assign r8 to v46:11
assign 8 to v46:11
assign r12 to v47:9
assign 12 to v47:9
spill count : 35
add v96->v98
add v93->v88
add v89->v91
add v81->v87
add v86->v87
add v85->v53
add v84->v53
add v84->v53
add v84->v53
add v84->v53
add v83->v81
add v80->v81
add v46->v0
add v79->v0
add v53->v0
add v78->v3
add v47->v3
add v77->v3
add v76->v47
add v46->v76
add v67->v76
add v75->v76
add v64->v67
add v74->v4
add v46->v4
add v41->v4
add v69->v4
add v65->v67
add v63->v67
add v60->v67
add v55->v53
adding pairs 2, v30:0x7fffc400fac0, v47:0x7fffc4020388
add v46->v45
add v42->v45
add v44->v45
add v25->v42
add v24->v41
add v27->v42
add v26->v41
add v23->v42
add v22->v41
add v19->v42
add v18->v41
add v32->v0
add v39->v0
add v40->v32
add v38->v31
add v6->v30
add v29->v0
adding pairs 3, v30:0x7fffc4035f20, v10:0x7fffc400f9a8
gap () () 
          [stack:-1|t] = ArchNop
gap (v2(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v3(-) = [stack:-2|t];) () 
          [stack:-3|t] = ArchNop
gap (v4(-) = [stack:-3|t];) () 
          [rsi|R|t] = ArchNop
gap (v5(-) = [rsi|R|t];) () 
          [constant:49] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:165] [immediate:166]
gap () () 
          [constant:102] = ArchNop
gap () () 
          [constant:101] = ArchNop
gap () () 
          v100(R) = ArchStackCheckOffset
gap () () 
          X64Push v100(-)
gap () ([rbx|R|w64] = v101(-); [rax|R|w64] = v49(-); [rsi|R|t] = v102(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:163] #-1 #26 [immediate:164] v2(S) v3(S) v4(S) v5(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:162]
gap () () 
          ArchJmp [immediate:161]
gap () () 
          [constant:8] = ArchNop
gap () () 
          [constant:98] = ArchNop
gap () () 
          X64Test32 && branch if equal v98 #1 [immediate:159] [immediate:160]
gap () () 
          v96(R) = X64Movsd : MRI v98(R) [immediate:158]
gap () (v84 = v96(-);) 
          ArchJmp [immediate:157]
gap () (v97(R) = v98(-);) 
          v97(1) = X64Sar32 v97(R) #1
gap () () 
          v95(R) = SSEInt32ToFloat64 v97
gap () (v84 = v95(-);) 
          ArchJmp [immediate:156]
gap () () 
          [constant:82] = ArchNop
gap () () 
          v88(R) = X64Movq : MR v82(R)
gap () () 
          [constant:94] = ArchNop
gap () () 
          [constant:92] = ArchNop
gap () () 
          v93(R) = X64Lea : MRI v88(R) [immediate:155]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v94(R) v93(R) [immediate:153] [immediate:154]
gap () () 
          ArchJmp [immediate:152]
gap () ([rdx|R|w64] = v92(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:151] #-1 [rdx|R|w64]
gap (v91(-) = [rax|R|tp];) () 
          v89(R) = X64Lea : MRI v91(R) [immediate:150]
gap () (v87 = v89(-);) 
          ArchJmp [immediate:149]
gap () (v87 = v88(-);) 
          ArchJmp [immediate:148]
gap () () 
          v81(R) = X64Lea : MRI v87(R) [immediate:147]
gap () () 
          X64Movq : MR v82(R) v81(R)
gap () () 
          v86(R) = X64Lea : MRI v87(R) [immediate:146]
gap () (v53 = v86(-);) 
          v53(1) = ArchNop v53
gap () () 
          [constant:85] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v53(R) [immediate:145] v85(R)
gap () () 
          X64MovqCompressTagged : MRI v53(R) [immediate:143] [immediate:144]
gap () () 
          X64Movsd : MRI v53(R) [immediate:142] v84(R)
gap () () 
          X64Movsd : MRI v53(R) [immediate:141] v84(R)
gap () () 
          X64Movsd : MRI v53(R) [immediate:140] v84(R)
gap () () 
          X64Movsd : MRI v53(R) [immediate:139] v84(R)
gap () () 
          v83(R) = X64Lea : MRI v81(R) [immediate:138]
gap () () 
          X64Movq : MR v82(R) v83(R)
gap () () 
          v80(R) = X64Lea : MRI v81(R) [immediate:137]
gap () (v0 = v80(-);) 
          v0(1) = ArchNop v0
gap () () 
          [constant:46] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:136] v46(R)
gap () () 
          [constant:79] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:135] v79(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:134] v53(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:132] [immediate:133]
gap () () 
          X64Test32 && deoptimize if equal v3 #1 #25 [immediate:129] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:130] [immediate:131]
gap () () 
          [constant:78] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:125] v78(R) #24 [immediate:126] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:127] [immediate:128]
gap () () 
          v47(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:124]
gap () () 
          v77(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:123]
gap () (v48(R) = v77(-);) 
          v48(1) = X64Sar32 v48(R) #1
gap () () 
          [constant:72] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v48 #0 #23 [immediate:120] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:121] [immediate:122]
gap () () 
          v76(R) = X64MovqDecompressAnyTagged : MRI v47(R) [immediate:119]
gap () () 
          X64Test32 && deoptimize if equal v76 #1 #22 [immediate:116] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:117] [immediate:118]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v76(R) [immediate:112] v46(R) #21 [immediate:113] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:114] [immediate:115]
gap () () 
          v67(R) = X64MovqDecompressTaggedPointer : MRI v76(R) [immediate:111]
gap () () 
          v75(R) = X64MovqDecompressTaggedSigned : MRI v76(R) [immediate:110]
gap () (v68(R) = v75(-);) 
          v68(1) = X64Sar32 v68(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v68 #0 #20 [immediate:107] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:108] [immediate:109]
gap () () 
          v64(R) = X64Movsd : MRI v67(R) [immediate:106]
gap () () 
          X64Test32 && deoptimize if equal v4 #1 #19 [immediate:103] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:104] [immediate:105]
gap () () 
          [constant:74] = ArchNop
gap () () 
          X64Cmp32 : MRI && branch if equal v4(R) [immediate:100] v74(R) [immediate:101] [immediate:102]
gap () () 
          ArchJmp [immediate:99]
gap () () 
          [constant:73] = ArchNop
gap () () 
          [constant:71] = ArchNop
gap () () 
          X64Push v4(-)
gap () () 
          X64Push v46(-)
gap () ([rbx|R|w64] = v71(-); [rax|R|w64] = v72(-); [rsi|R|w64] = v73(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:98] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:97]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v4(R) [immediate:93] v46(R) #18 [immediate:94] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:95] [immediate:96]
gap () () 
          v41(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:92]
gap () () 
          v69(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:91]
gap () (v66(R) = v69(-);) 
          v66(1) = X64Sar32 v66(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v66 #0 #17 [immediate:88] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:89] [immediate:90]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v68 #1 #16 [immediate:85] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:86] [immediate:87]
gap () () 
          v65(R) = X64Movsd : MRI v67(R) [immediate:84]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v66 #1 #15 [immediate:81] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:82] [immediate:83]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v68 #2 #14 [immediate:78] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:79] [immediate:80]
gap () () 
          v63(R) = X64Movsd : MRI v67(R) [immediate:77]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v66 #2 #13 [immediate:74] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:75] [immediate:76]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v68 #3 #12 [immediate:71] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:72] [immediate:73]
gap () () 
          v60(R) = X64Movsd : MRI v67(R) [immediate:70]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v66 #3 #11 [immediate:67] v2(-) v3(-) v4(-) v5(S) v0(-) [immediate:68] [immediate:69]
gap () () 
          v61(R) = AVXFloat64Mul : MRI v65(R) v41(R) [immediate:66]
gap () () 
          v62(R) = AVXFloat64Mul : MRI v64(R) v41(R) [immediate:65]
gap () () 
          v58(R) = AVXFloat64Mul : MRI v63(R) v41(R) [immediate:64]
gap () () 
          v59(R) = AVXFloat64Add v61(R) v62
gap () () 
          v56(R) = AVXFloat64Mul : MRI v60(R) v41(R) [immediate:63]
gap () () 
          v57(R) = AVXFloat64Add v58(R) v59
gap () () 
          v55(R) = AVXFloat64Add v56(R) v57
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:61] [immediate:62]
gap () () 
          X64Movsd : MRI v53(R) [immediate:60] v55(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:58] [immediate:59]
gap () () 
          [constant:52] = ArchNop
gap () () 
          [constant:51] = ArchNop
gap () ([rbx|R|w64] = v51(-); [rax|R|w64] = v8(-); [rsi|R|t] = v52(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:56] #-1 #10 [immediate:57] v2(S) v3(S) v4(S) v5(S) v0(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:55]
gap () () 
          ArchJmp [immediate:54]
gap () (v30 = v49(-);) 
          ArchJmp [immediate:53]
gap () () 
          X64Cmp32 && branch if unsigned less than v30 #4 [immediate:51] [immediate:52]
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v30(R) v48 #9 [immediate:49] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:50]
gap () () 
          v45(R) = X64MovqDecompressAnyTagged : MR4I v47(R) v30(R) [immediate:48]
gap () () 
          X64Test32 && deoptimize if equal v45 #1 #8 [immediate:46] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:47]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v45(R) [immediate:43] v46(R) #7 [immediate:44] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:45]
gap () () 
          v42(R) = X64MovqDecompressTaggedPointer : MRI v45(R) [immediate:42]
gap () () 
          v44(R) = X64MovqDecompressTaggedSigned : MRI v45(R) [immediate:41]
gap () (v43(R) = v44(-);) 
          v43(1) = X64Sar32 v43(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v43 #0 #6 [immediate:39] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:40]
gap () () 
          v25(R) = X64Movsd : MRI v42(R) [immediate:38]
gap () () 
          v24(R) = X64Movsd : MRI v41(R) [immediate:37]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v43 #1 #5 [immediate:35] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:36]
gap () () 
          v27(R) = X64Movsd : MRI v42(R) [immediate:34]
gap () () 
          v26(R) = X64Movsd : MRI v41(R) [immediate:33]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v43 #2 #4 [immediate:31] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:32]
gap () () 
          v23(R) = X64Movsd : MRI v42(R) [immediate:30]
gap () () 
          v22(R) = X64Movsd : MRI v41(R) [immediate:29]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v43 #3 #3 [immediate:27] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:28]
gap () () 
          v19(R) = X64Movsd : MRI v42(R) [immediate:26]
gap () () 
          v18(R) = X64Movsd : MRI v41(R) [immediate:25]
gap () () 
          v32(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:24]
gap () () 
          v39(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:23]
gap () () 
          v40(R) = X64MovqDecompressTaggedSigned : MRI v32(R) [immediate:22]
gap () (v37(R) = v40(-);) 
          v37(1) = X64Sar32 v37(R) #1
gap () (v31(R) = v39(-);) 
          v31(1) = X64Sar32 v31(R) #1
gap () () 
          v38(R) = X64Lea32 : MRI v31(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v30(R) v38 #2 [immediate:20] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:21]
gap () () 
          X64Cmp32 && branch if unsigned less than v30(R) v37 [immediate:18] [immediate:19]
gap () () 
          v36(R) = X64Lea32 : MR1 v30(R) v30(R)
gap () () 
          [constant:35] = ArchNop
gap () ([rax|R|t] = v0(-); [rbx|R|w32] = v36(-); [rsi|R|w64] = v35(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:17] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v33(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v33 #1 #1 [immediate:15] v2(-) v3(-) v4(-) v5(S) v0(-) v30(-) [immediate:16]
gap () (v10 = v33(-);) 
          ArchJmp [immediate:14]
gap () (v10 = v32(-);) 
          ArchJmp [immediate:13]
gap () () 
          v6(R) = X64Lea32 : MRI v30(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v30(R) v31 [immediate:11] [immediate:12]
gap () () 
          v29(R) = X64Lea32 : MR1 v6(R) v6(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:10] v29(R)
gap () () 
          ArchJmp [immediate:9]
gap () () 
          ArchJmp [immediate:8]
gap () () 
          v20(R) = AVXFloat64Mul v26(R) v27
gap () () 
          v21(R) = AVXFloat64Mul v24(R) v25
gap () () 
          v16(R) = AVXFloat64Mul v22(R) v23
gap () () 
          v17(R) = AVXFloat64Add v20(R) v21
gap () () 
          v14(R) = AVXFloat64Mul v18(R) v19
gap () () 
          v15(R) = AVXFloat64Add v16(R) v17
gap () () 
          v13(R) = AVXFloat64Add v14(R) v15
gap () () 
          X64Movsd : MR8I v10(R) v30(R) [immediate:7] v13(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:5] [immediate:6]
gap () () 
          [constant:9] = ArchNop
gap () () 
          [constant:7] = ArchNop
gap () ([rbx|R|w64] = v7(-); [rax|R|w64] = v8(-); [rsi|R|t] = v9(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:3] #-1 #0 [immediate:4] v2(S) v3(S) v4(S) v5(S) v0(S) v6(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:2]
gap () () 
          ArchJmp [immediate:1]
gap () (v30 = v6(-);) 
          ArchJmp [immediate:0]
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
2, v30, v47
3, v30, v10
print modrm pairs
1, v29, v0
1, v6, v30
1, v38, v31
1, v39, v0
1, v32, v0
1, v22, v41
1, v26, v41
1, v24, v41
1, v44, v45
1, v60, v67
1, v27, v42
1, v65, v67
1, v69, v4
1, v96, v98
1, v46, v4
1, v25, v42
1, v46, v45
1, v74, v4
1, v18, v41
1, v23, v42
1, v41, v4
1, v67, v76
1, v83, v81
1, v77, v3
1, v19, v42
1, v78, v3
1, v55, v53
1, v75, v76
1, v84, v53
1, v46, v76
1, v46, v0
1, v85, v53
1, v64, v67
1, v80, v81
1, v76, v47
1, v40, v32
1, v53, v0
1, v86, v87
1, v42, v45
1, v81, v87
1, v47, v3
1, v89, v91
1, v79, v0
1, v63, v67
1, v93, v88
assign xmm0 to v96:0
assign 0 to v96:0
assign xmm0 to v95:0
assign 0 to v95:0
assign xmm0 to v84:0
assign 0 to v84:0
blocking v84 pick register xmm0
assign xmm0 to v84:3
assign 0 to v84:3
assign xmm0 to v84:2
assign 0 to v84:2
assign xmm0 to v64:0
assign 0 to v64:0
blocking v64 pick register xmm0
assign xmm0 to v64:3
assign 0 to v64:3
assign xmm1 to v65:0
assign 1 to v65:0
assign xmm2 to v63:0
assign 2 to v63:0
assign xmm4 to v60:0
assign 4 to v60:0
assign xmm1 to v61:0
assign 1 to v61:0
assign xmm0 to v64:2
assign 0 to v64:2
assign xmm0 to v62:0
assign 0 to v62:0
assign xmm2 to v58:0
assign 2 to v58:0
assign xmm0 to v59:0
assign 0 to v59:0
assign xmm1 to v56:0
assign 1 to v56:0
assign xmm0 to v57:0
assign 0 to v57:0
assign xmm0 to v55:0
assign 0 to v55:0
assign xmm0 to v25:0
assign 0 to v25:0
assign xmm1 to v24:0
assign 1 to v24:0
assign xmm2 to v27:0
assign 2 to v27:0
assign xmm4 to v26:0
assign 4 to v26:0
assign xmm5 to v23:0
assign 5 to v23:0
assign xmm6 to v22:0
assign 6 to v22:0
assign xmm7 to v19:0
assign 7 to v19:0
assign xmm8 to v18:0
assign 8 to v18:0
blocking v24 pick register xmm1
blocking v26 pick register xmm4
blocking v22 pick register xmm6
blocking v18 pick register xmm8
assign xmm8 to v18:3
assign 8 to v18:3
assign xmm7 to v19:2
assign 7 to v19:2
assign xmm6 to v22:3
assign 6 to v22:3
assign xmm5 to v23:2
assign 5 to v23:2
assign xmm4 to v26:3
assign 4 to v26:3
assign xmm2 to v27:2
assign 2 to v27:2
assign xmm1 to v24:3
assign 1 to v24:3
assign xmm0 to v25:2
assign 0 to v25:2
assign xmm4 to v26:2
assign 4 to v26:2
assign xmm2 to v20:0
assign 2 to v20:0
assign xmm1 to v24:2
assign 1 to v24:2
assign xmm0 to v21:0
assign 0 to v21:0
assign xmm6 to v22:2
assign 6 to v22:2
assign xmm1 to v16:0
assign 1 to v16:0
assign xmm0 to v17:0
assign 0 to v17:0
assign xmm8 to v18:2
assign 8 to v18:2
assign xmm2 to v14:0
assign 2 to v14:0
assign xmm0 to v15:0
assign 0 to v15:0
assign xmm0 to v13:0
assign 0 to v13:0
spill count : 10
--- Raw source ---
(M, V) {
      var Vect = new Array();
      var i = 0;
      for (;i < 4; i++) Vect[i] = M[i][0] * V[0] + M[i][1] * V[1] + M[i][2] * V[2] + M[i][3] * V[3];
      return Vect;
    }


--- Optimized code ---
optimization_id = 2
source_position = 2798
kind = TURBOFAN
name = VMulti
stack_slots = 21
compiler = turbofan
address = 0x19db00085d41

Instructions (size = 1812)
0x19db00085d80     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db00085d87     7  483bd9         REX.W cmpq rbx,rcx
0x19db00085d8a     a  7418           jz 0x19db00085da4  <+0x24>
0x19db00085d8c     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db00085d96    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db00085da0    20  41ffd2         call r10
0x19db00085da3    23  cc             int3l
0x19db00085da4    24  8b59d0         movl rbx,[rcx-0x30]
0x19db00085da7    27  4903dd         REX.W addq rbx,r13
0x19db00085daa    2a  f6430701       testb [rbx+0x7],0x1
0x19db00085dae    2e  740d           jz 0x19db00085dbd  <+0x3d>
0x19db00085db0    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db00085dba    3a  41ffe2         jmp r10
0x19db00085dbd    3d  55             push rbp
0x19db00085dbe    3e  4889e5         REX.W movq rbp,rsp
0x19db00085dc1    41  56             push rsi
0x19db00085dc2    42  57             push rdi
0x19db00085dc3    43  50             push rax
0x19db00085dc4    44  4881ec80000000 REX.W subq rsp,0x80
0x19db00085dcb    4b  488975d8       REX.W movq [rbp-0x28],rsi
0x19db00085dcf    4f  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00085dd3    53  0f8653030000   jna 0x19db0008612c  <+0x3ac>
0x19db00085dd9    59  498b8d98000000 REX.W movq rcx,[r13+0x98] (root (the_hole_value))
0x19db00085de0    60  f6c101         testb rcx,0x1
0x19db00085de3    63  0f857c030000   jnz 0x19db00086165  <+0x3e5>
0x19db00085de9    69  d1f9           sarl rcx, 1
0x19db00085deb    6b  c5832ac1       vcvtlsi2sd xmm0,xmm15,rcx
0x19db00085def    6f  48b9f87d6d5555550000 REX.W movq rcx,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db00085df9    79  488b39         REX.W movq rdi,[rcx]
0x19db00085dfc    7c  4c8d4738       REX.W leaq r8,[rdi+0x38]
0x19db00085e00    80  49b9007e6d5555550000 REX.W movq r9,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db00085e0a    8a  4d3901         REX.W cmpq [r9],r8
0x19db00085e0d    8d  0f865c030000   jna 0x19db0008616f  <+0x3ef>
0x19db00085e13    93  4c8d4728       REX.W leaq r8,[rdi+0x28]
0x19db00085e17    97  4c8901         REX.W movq [rcx],r8
0x19db00085e1a    9a  4883c701       REX.W addq rdi,0x1
0x19db00085e1e    9e  4d8b8dd8010000 REX.W movq r9,[r13+0x1d8] (root (fixed_double_array_map))
0x19db00085e25    a5  44894fff       movl [rdi-0x1],r9
0x19db00085e29    a9  c7470308000000 movl [rdi+0x3],0x8
0x19db00085e30    b0  c5fb114707     vmovsd [rdi+0x7],xmm0
0x19db00085e35    b5  c5fb11470f     vmovsd [rdi+0xf],xmm0
0x19db00085e3a    ba  c5fb114717     vmovsd [rdi+0x17],xmm0
0x19db00085e3f    bf  c5fb11471f     vmovsd [rdi+0x1f],xmm0
0x19db00085e44    c4  4d8d4810       REX.W leaq r9,[r8+0x10]
0x19db00085e48    c8  4c8909         REX.W movq [rcx],r9
0x19db00085e4b    cb  498d4801       REX.W leaq rcx,[r8+0x1]
0x19db00085e4f    cf  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00085e59    d9  448941ff       movl [rcx-0x1],r8
0x19db00085e5d    dd  4d8b8d58010000 REX.W movq r9,[r13+0x158] (root (empty_fixed_array))
0x19db00085e64    e4  44894903       movl [rcx+0x3],r9
0x19db00085e68    e8  897907         movl [rcx+0x7],rdi
0x19db00085e6b    eb  c7410b00000000 movl [rcx+0xb],0x0
0x19db00085e72    f2  4c8b4d18       REX.W movq r9,[rbp+0x18]
0x19db00085e76    f6  41f6c101       testb r9,0x1
0x19db00085e7a    fa  0f8457050000   jz 0x19db000863d7  <+0x657>
0x19db00085e80   100  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00085e86   106  453961ff       cmpl [r9-0x1],r12
0x19db00085e8a   10a  0f854e050000   jnz 0x19db000863de  <+0x65e>
0x19db00085e90   110  458b6107       movl r12,[r9+0x7]
0x19db00085e94   114  4d03e5         REX.W addq r12,r13
0x19db00085e97   117  458b710b       movl r14,[r9+0xb]
0x19db00085e9b   11b  41d1fe         sarl r14, 1
0x19db00085e9e   11e  4183fe00       cmpl r14,0x0
0x19db00085ea2   122  0f863d050000   jna 0x19db000863e5  <+0x665>
0x19db00085ea8   128  418b442407     movl rax,[r12+0x7]
0x19db00085ead   12d  4903c5         REX.W addq rax,r13
0x19db00085eb0   130  a801           test al,0x1
0x19db00085eb2   132  0f8434050000   jz 0x19db000863ec  <+0x66c>
0x19db00085eb8   138  443940ff       cmpl [rax-0x1],r8
0x19db00085ebc   13c  0f8531050000   jnz 0x19db000863f3  <+0x673>
0x19db00085ec2   142  448b7807       movl r15,[rax+0x7]
0x19db00085ec6   146  4d03fd         REX.W addq r15,r13
0x19db00085ec9   149  8b400b         movl rax,[rax+0xb]
0x19db00085ecc   14c  d1f8           sarl rax, 1
0x19db00085ece   14e  83f800         cmpl rax,0x0
0x19db00085ed1   151  0f8623050000   jna 0x19db000863fa  <+0x67a>
0x19db00085ed7   157  c4c17b104707   vmovsd xmm0,[r15+0x7]
0x19db00085edd   15d  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00085ee1   161  41f6c301       testb r11,0x1
0x19db00085ee5   165  0f8416050000   jz 0x19db00086401  <+0x681>
0x19db00085eeb   16b  bab59e3008     movl rdx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00085ef0   170  413953ff       cmpl [r11-0x1],rdx
0x19db00085ef4   174  0f84a1020000   jz 0x19db0008619b  <+0x41b>
0x19db00085efa   17a  453943ff       cmpl [r11-0x1],r8
0x19db00085efe   17e  0f8504050000   jnz 0x19db00086408  <+0x688>
0x19db00085f04   184  418b5307       movl rdx,[r11+0x7]
0x19db00085f08   188  4903d5         REX.W addq rdx,r13
0x19db00085f0b   18b  418b730b       movl rsi,[r11+0xb]
0x19db00085f0f   18f  d1fe           sarl rsi, 1
0x19db00085f11   191  83fe00         cmpl rsi,0x0
0x19db00085f14   194  0f86f5040000   jna 0x19db0008640f  <+0x68f>
0x19db00085f1a   19a  83f801         cmpl rax,0x1
0x19db00085f1d   19d  0f86f3040000   jna 0x19db00086416  <+0x696>
0x19db00085f23   1a3  c4c17b104f0f   vmovsd xmm1,[r15+0xf]
0x19db00085f29   1a9  83fe01         cmpl rsi,0x1
0x19db00085f2c   1ac  0f86eb040000   jna 0x19db0008641d  <+0x69d>
0x19db00085f32   1b2  83f802         cmpl rax,0x2
0x19db00085f35   1b5  0f86e9040000   jna 0x19db00086424  <+0x6a4>
0x19db00085f3b   1bb  c4c17b105717   vmovsd xmm2,[r15+0x17]
0x19db00085f41   1c1  83fe02         cmpl rsi,0x2
0x19db00085f44   1c4  0f86e1040000   jna 0x19db0008642b  <+0x6ab>
0x19db00085f4a   1ca  83f803         cmpl rax,0x3
0x19db00085f4d   1cd  0f86df040000   jna 0x19db00086432  <+0x6b2>
0x19db00085f53   1d3  c4c17b10671f   vmovsd xmm4,[r15+0x1f]
0x19db00085f59   1d9  83fe03         cmpl rsi,0x3
0x19db00085f5c   1dc  0f86d7040000   jna 0x19db00086439  <+0x6b9>
0x19db00085f62   1e2  c5f3594a0f     vmulsd xmm1,xmm1,[rdx+0xf]
0x19db00085f67   1e7  c5fb594207     vmulsd xmm0,xmm0,[rdx+0x7]
0x19db00085f6c   1ec  c5eb595217     vmulsd xmm2,xmm2,[rdx+0x17]
0x19db00085f71   1f1  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db00085f75   1f5  c5db594a1f     vmulsd xmm1,xmm4,[rdx+0x1f]
0x19db00085f7a   1fa  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00085f7e   1fe  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db00085f82   202  c7410b02000000 movl [rcx+0xb],0x2
0x19db00085f89   209  c5fb114707     vmovsd [rdi+0x7],xmm0
0x19db00085f8e   20e  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00085f92   212  0f8682020000   jna 0x19db0008621a  <+0x49a>
0x19db00085f98   218  b801000000     movl rax,0x1
0x19db00085f9d   21d  e911000000     jmp 0x19db00085fb3  <+0x233>
0x19db00085fa2   222  660f1f840000000000 nop
0x19db00085fab   22b  0f1f440000     nop
0x19db00085fb0   230  498bc7         REX.W movq rax,r15
0x19db00085fb3   233  83f804         cmpl rax,0x4
0x19db00085fb6   236  0f8352010000   jnc 0x19db0008610e  <+0x38e>
0x19db00085fbc   23c  413bc6         cmpl rax,r14
0x19db00085fbf   23f  0f837b040000   jnc 0x19db00086440  <+0x6c0>
0x19db00085fc5   245  458b4c8407     movl r9,[r12+rax*4+0x7]
0x19db00085fca   24a  4d03cd         REX.W addq r9,r13
0x19db00085fcd   24d  41f6c101       testb r9,0x1
0x19db00085fd1   251  0f8470040000   jz 0x19db00086447  <+0x6c7>
0x19db00085fd7   257  453941ff       cmpl [r9-0x1],r8
0x19db00085fdb   25b  0f856d040000   jnz 0x19db0008644e  <+0x6ce>
0x19db00085fe1   261  418b7907       movl rdi,[r9+0x7]
0x19db00085fe5   265  4903fd         REX.W addq rdi,r13
0x19db00085fe8   268  458b490b       movl r9,[r9+0xb]
0x19db00085fec   26c  41d1f9         sarl r9, 1
0x19db00085fef   26f  4183f900       cmpl r9,0x0
0x19db00085ff3   273  0f865c040000   jna 0x19db00086455  <+0x6d5>
0x19db00085ff9   279  c5fb104707     vmovsd xmm0,[rdi+0x7]
0x19db00085ffe   27e  c5fb104a07     vmovsd xmm1,[rdx+0x7]
0x19db00086003   283  4183f901       cmpl r9,0x1
0x19db00086007   287  0f864f040000   jna 0x19db0008645c  <+0x6dc>
0x19db0008600d   28d  c5fb10570f     vmovsd xmm2,[rdi+0xf]
0x19db00086012   292  c5fb10620f     vmovsd xmm4,[rdx+0xf]
0x19db00086017   297  4183f902       cmpl r9,0x2
0x19db0008601b   29b  0f8642040000   jna 0x19db00086463  <+0x6e3>
0x19db00086021   2a1  c5fb106f17     vmovsd xmm5,[rdi+0x17]
0x19db00086026   2a6  c5fb107217     vmovsd xmm6,[rdx+0x17]
0x19db0008602b   2ab  4183f903       cmpl r9,0x3
0x19db0008602f   2af  0f8635040000   jna 0x19db0008646a  <+0x6ea>
0x19db00086035   2b5  c5fb107f1f     vmovsd xmm7,[rdi+0x1f]
0x19db0008603a   2ba  c57b10421f     vmovsd xmm8,[rdx+0x1f]
0x19db0008603f   2bf  8b7907         movl rdi,[rcx+0x7]
0x19db00086042   2c2  4903fd         REX.W addq rdi,r13
0x19db00086045   2c5  448b490b       movl r9,[rcx+0xb]
0x19db00086049   2c9  448b7f03       movl r15,[rdi+0x3]
0x19db0008604d   2cd  41d1ff         sarl r15, 1
0x19db00086050   2d0  41d1f9         sarl r9, 1
0x19db00086053   2d3  418d7101       leal rsi,[r9+0x1]
0x19db00086057   2d7  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db00086061   2e1  4c3bd6         REX.W cmpq r10,rsi
0x19db00086064   2e4  7715           ja 0x19db0008607b  <+0x2fb>
0x19db00086066   2e6  48ba0200000000000000 REX.W movq rdx,0x2
0x19db00086070   2f0  4c8b1521fdffff REX.W movq r10,[rip+0xfffffd21]
0x19db00086077   2f7  41ffd2         call r10
0x19db0008607a   2fa  cc             int3l
0x19db0008607b   2fb  3bc6           cmpl rax,rsi
0x19db0008607d   2fd  0f83ee030000   jnc 0x19db00086471  <+0x6f1>
0x19db00086083   303  413bc7         cmpl rax,r15
0x19db00086086   306  0f83fa010000   jnc 0x19db00086286  <+0x506>
0x19db0008608c   30c  448d7801       leal r15,[rax+0x1]
0x19db00086090   310  4c8b15c2ffffff REX.W movq r10,[rip+0xffffffc2]
0x19db00086097   317  4d3bd7         REX.W cmpq r10,r15
0x19db0008609a   31a  7712           ja 0x19db000860ae  <+0x32e>
0x19db0008609c   31c  488b15c5ffffff REX.W movq rdx,[rip+0xffffffc5]
0x19db000860a3   323  4c8b15eefcffff REX.W movq r10,[rip+0xfffffcee]
0x19db000860aa   32a  41ffd2         call r10
0x19db000860ad   32d  cc             int3l
0x19db000860ae   32e  413bc1         cmpl rax,r9
0x19db000860b1   331  0f8226000000   jc 0x19db000860dd  <+0x35d>
0x19db000860b7   337  478d0c3f       leal r9,[r15+r15*1]
0x19db000860bb   33b  4c8b1597ffffff REX.W movq r10,[rip+0xffffff97]
0x19db000860c2   342  4d3bd1         REX.W cmpq r10,r9
0x19db000860c5   345  7712           ja 0x19db000860d9  <+0x359>
0x19db000860c7   347  488b159affffff REX.W movq rdx,[rip+0xffffff9a]
0x19db000860ce   34e  4c8b15c3fcffff REX.W movq r10,[rip+0xfffffcc3]
0x19db000860d5   355  41ffd2         call r10
0x19db000860d8   358  cc             int3l
0x19db000860d9   359  4489490b       movl [rcx+0xb],r9
0x19db000860dd   35d  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db000860e1   361  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db000860e5   365  c5cb59cd       vmulsd xmm1,xmm6,xmm5
0x19db000860e9   369  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db000860ed   36d  c5bb59d7       vmulsd xmm2,xmm8,xmm7
0x19db000860f1   371  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db000860f5   375  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db000860f9   379  c5fb1144c707   vmovsd [rdi+rax*8+0x7],xmm0
0x19db000860ff   37f  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00086103   383  0f87a7feffff   ja 0x19db00085fb0  <+0x230>
0x19db00086109   389  e95e020000     jmp 0x19db0008636c  <+0x5ec>
0x19db0008610e   38e  488bc1         REX.W movq rax,rcx
0x19db00086111   391  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db00086115   395  488be5         REX.W movq rsp,rbp
0x19db00086118   398  5d             pop rbp
0x19db00086119   399  4883f902       REX.W cmpq rcx,0x2
0x19db0008611d   39d  7f03           jg 0x19db00086122  <+0x3a2>
0x19db0008611f   39f  c21800         ret 0x18
0x19db00086122   3a2  415a           pop r10
0x19db00086124   3a4  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db00086129   3a9  4152           push r10
0x19db0008612b   3ab  c3             retl
0x19db0008612c   3ac  48b92000000000000000 REX.W movq rcx,0x20
0x19db00086136   3b6  51             push rcx
0x19db00086137   3b7  b801000000     movl rax,0x1
0x19db0008613c   3bc  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db00086146   3c6  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00086150   3d0  488bc8         REX.W movq rcx,rax
0x19db00086153   3d3  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db0008615d   3dd  41ffd2         call r10
0x19db00086160   3e0  e974fcffff     jmp 0x19db00085dd9  <+0x59>
0x19db00086165   3e5  c5fb104103     vmovsd xmm0,[rcx+0x3]
0x19db0008616a   3ea  e980fcffff     jmp 0x19db00085def  <+0x6f>
0x19db0008616f   3ef  c5fb1145e0     vmovsd [rbp-0x20],xmm0
0x19db00086174   3f4  ba38000000     movl rdx,0x38
0x19db00086179   3f9  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db00086183   403  41ffd2         call r10
0x19db00086186   406  488d78ff       REX.W leaq rdi,[rax-0x1]
0x19db0008618a   40a  c5fb1045e0     vmovsd xmm0,[rbp-0x20]
0x19db0008618f   40f  488b0d5bfcffff REX.W movq rcx,[rip+0xfffffc5b]
0x19db00086196   416  e978fcffff     jmp 0x19db00085e13  <+0x93>
0x19db0008619b   41b  4153           push r11
0x19db0008619d   41d  4150           push r8
0x19db0008619f   41f  48894de0       REX.W movq [rbp-0x20],rcx
0x19db000861a3   423  4c89a570ffffff REX.W movq [rbp-0x90],r12
0x19db000861aa   42a  4c89b568ffffff REX.W movq [rbp-0x98],r14
0x19db000861b1   431  48897dd0       REX.W movq [rbp-0x30],rdi
0x19db000861b5   435  c5fb1145c8     vmovsd [rbp-0x38],xmm0
0x19db000861ba   43a  4c897dc0       REX.W movq [rbp-0x40],r15
0x19db000861be   43e  488945b8       REX.W movq [rbp-0x48],rax
0x19db000861c2   442  48bb9061fef6ff7f0000 REX.W movq rbx,0x7ffff6fe6190    ;; external reference (Runtime::TransitionElementsKind)
0x19db000861cc   44c  33f6           xorl rsi,rsi
0x19db000861ce   44e  488bd0         REX.W movq rdx,rax
0x19db000861d1   451  b802000000     movl rax,0x2
0x19db000861d6   456  4c8b1578ffffff REX.W movq r10,[rip+0xffffff78]
0x19db000861dd   45d  41ffd2         call r10
0x19db000861e0   460  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db000861e4   464  4c8b4d18       REX.W movq r9,[rbp+0x18]
0x19db000861e8   468  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db000861ec   46c  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000861f6   476  4c8ba570ffffff REX.W movq r12,[rbp-0x90]
0x19db000861fd   47d  4c8bb568ffffff REX.W movq r14,[rbp-0x98]
0x19db00086204   484  488b7dd0       REX.W movq rdi,[rbp-0x30]
0x19db00086208   488  c5fb1045c8     vmovsd xmm0,[rbp-0x38]
0x19db0008620d   48d  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db00086211   491  488b45b8       REX.W movq rax,[rbp-0x48]
0x19db00086215   495  e9e0fcffff     jmp 0x19db00085efa  <+0x17a>
0x19db0008621a   49a  48894de0       REX.W movq [rbp-0x20],rcx
0x19db0008621e   49e  48899578ffffff REX.W movq [rbp-0x88],rdx
0x19db00086225   4a5  4c89a570ffffff REX.W movq [rbp-0x90],r12
0x19db0008622c   4ac  4c89b568ffffff REX.W movq [rbp-0x98],r14
0x19db00086233   4b3  33c0           xorl rax,rax
0x19db00086235   4b5  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db0008623f   4bf  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00086249   4c9  488bf8         REX.W movq rdi,rax
0x19db0008624c   4cc  4c8b1502ffffff REX.W movq r10,[rip+0xffffff02]
0x19db00086253   4d3  41ffd2         call r10
0x19db00086256   4d6  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db0008625a   4da  4c8b4d18       REX.W movq r9,[rbp+0x18]
0x19db0008625e   4de  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00086262   4e2  488b9578ffffff REX.W movq rdx,[rbp-0x88]
0x19db00086269   4e9  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00086273   4f3  4c8ba570ffffff REX.W movq r12,[rbp-0x90]
0x19db0008627a   4fa  4c8bb568ffffff REX.W movq r14,[rbp-0x98]
0x19db00086281   501  e912fdffff     jmp 0x19db00085f98  <+0x218>
0x19db00086286   506  8d1c00         leal rbx,[rax+rax*1]
0x19db00086289   509  4c8b15c9fdffff REX.W movq r10,[rip+0xfffffdc9]
0x19db00086290   510  4c3bd3         REX.W cmpq r10,rbx
0x19db00086293   513  7712           ja 0x19db000862a7  <+0x527>
0x19db00086295   515  488b15ccfdffff REX.W movq rdx,[rip+0xfffffdcc]
0x19db0008629c   51c  4c8b15f5faffff REX.W movq r10,[rip+0xfffffaf5]
0x19db000862a3   523  41ffd2         call r10
0x19db000862a6   526  cc             int3l
0x19db000862a7   527  48894de0       REX.W movq [rbp-0x20],rcx
0x19db000862ab   52b  c57b1145c8     vmovsd [rbp-0x38],xmm8
0x19db000862b0   530  c5fb117dc0     vmovsd [rbp-0x40],xmm7
0x19db000862b5   535  c5fb1175b8     vmovsd [rbp-0x48],xmm6
0x19db000862ba   53a  c5fb116db0     vmovsd [rbp-0x50],xmm5
0x19db000862bf   53f  c5fb114da8     vmovsd [rbp-0x58],xmm1
0x19db000862c4   544  c5fb1145a0     vmovsd [rbp-0x60],xmm0
0x19db000862c9   549  c5fb116598     vmovsd [rbp-0x68],xmm4
0x19db000862ce   54e  c5fb115590     vmovsd [rbp-0x70],xmm2
0x19db000862d3   553  48894588       REX.W movq [rbp-0x78],rax
0x19db000862d7   557  4c894d80       REX.W movq [rbp-0x80],r9
0x19db000862db   55b  48899578ffffff REX.W movq [rbp-0x88],rdx
0x19db000862e2   562  4c89a570ffffff REX.W movq [rbp-0x90],r12
0x19db000862e9   569  4c89b568ffffff REX.W movq [rbp-0x98],r14
0x19db000862f0   570  33f6           xorl rsi,rsi
0x19db000862f2   572  488bf8         REX.W movq rdi,rax
0x19db000862f5   575  488bc1         REX.W movq rax,rcx
0x19db000862f8   578  49ba20e7baf5ff7f0000 REX.W movq r10,0x7ffff5bae720  (GrowFastDoubleElements)    ;; off heap target
0x19db00086302   582  41ffd2         call r10
0x19db00086305   585  a801           test al,0x1
0x19db00086307   587  0f846b010000   jz 0x19db00086478  <+0x6f8>
0x19db0008630d   58d  488bf8         REX.W movq rdi,rax
0x19db00086310   590  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db00086314   594  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00086318   598  c57b1045c8     vmovsd xmm8,[rbp-0x38]
0x19db0008631d   59d  c5fb107dc0     vmovsd xmm7,[rbp-0x40]
0x19db00086322   5a2  c5fb1075b8     vmovsd xmm6,[rbp-0x48]
0x19db00086327   5a7  c5fb106db0     vmovsd xmm5,[rbp-0x50]
0x19db0008632c   5ac  c5fb104da8     vmovsd xmm1,[rbp-0x58]
0x19db00086331   5b1  c5fb1045a0     vmovsd xmm0,[rbp-0x60]
0x19db00086336   5b6  c5fb106598     vmovsd xmm4,[rbp-0x68]
0x19db0008633b   5bb  c5fb105590     vmovsd xmm2,[rbp-0x70]
0x19db00086340   5c0  488b4588       REX.W movq rax,[rbp-0x78]
0x19db00086344   5c4  4c8b4d80       REX.W movq r9,[rbp-0x80]
0x19db00086348   5c8  488b9578ffffff REX.W movq rdx,[rbp-0x88]
0x19db0008634f   5cf  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00086359   5d9  4c8ba570ffffff REX.W movq r12,[rbp-0x90]
0x19db00086360   5e0  4c8bb568ffffff REX.W movq r14,[rbp-0x98]
0x19db00086367   5e7  e920fdffff     jmp 0x19db0008608c  <+0x30c>
0x19db0008636c   5ec  48894de0       REX.W movq [rbp-0x20],rcx
0x19db00086370   5f0  4c897dd0       REX.W movq [rbp-0x30],r15
0x19db00086374   5f4  48899578ffffff REX.W movq [rbp-0x88],rdx
0x19db0008637b   5fb  4c89a570ffffff REX.W movq [rbp-0x90],r12
0x19db00086382   602  4c89b568ffffff REX.W movq [rbp-0x98],r14
0x19db00086389   609  488b1da7feffff REX.W movq rbx,[rip+0xfffffea7]
0x19db00086390   610  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008639a   61a  33c0           xorl rax,rax
0x19db0008639c   61c  4c8b15b2fdffff REX.W movq r10,[rip+0xfffffdb2]
0x19db000863a3   623  41ffd2         call r10
0x19db000863a6   626  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db000863aa   62a  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db000863ae   62e  4c8b7dd0       REX.W movq r15,[rbp-0x30]
0x19db000863b2   632  488b9578ffffff REX.W movq rdx,[rbp-0x88]
0x19db000863b9   639  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000863c3   643  4c8ba570ffffff REX.W movq r12,[rbp-0x90]
0x19db000863ca   64a  4c8bb568ffffff REX.W movq r14,[rbp-0x98]
0x19db000863d1   651  e9dafbffff     jmp 0x19db00085fb0  <+0x230>
0x19db000863d6   656  90             nop
0x19db000863d7   657  41ff95f8360000 call [r13+0x36f8]
0x19db000863de   65e  41ff95f8360000 call [r13+0x36f8]
0x19db000863e5   665  41ff95f8360000 call [r13+0x36f8]
0x19db000863ec   66c  41ff95f8360000 call [r13+0x36f8]
0x19db000863f3   673  41ff95f8360000 call [r13+0x36f8]
0x19db000863fa   67a  41ff95f8360000 call [r13+0x36f8]
0x19db00086401   681  41ff95f8360000 call [r13+0x36f8]
0x19db00086408   688  41ff95f8360000 call [r13+0x36f8]
0x19db0008640f   68f  41ff95f8360000 call [r13+0x36f8]
0x19db00086416   696  41ff95f8360000 call [r13+0x36f8]
0x19db0008641d   69d  41ff95f8360000 call [r13+0x36f8]
0x19db00086424   6a4  41ff95f8360000 call [r13+0x36f8]
0x19db0008642b   6ab  41ff95f8360000 call [r13+0x36f8]
0x19db00086432   6b2  41ff95f8360000 call [r13+0x36f8]
0x19db00086439   6b9  41ff95f8360000 call [r13+0x36f8]
0x19db00086440   6c0  41ff95f8360000 call [r13+0x36f8]
0x19db00086447   6c7  41ff95f8360000 call [r13+0x36f8]
0x19db0008644e   6ce  41ff95f8360000 call [r13+0x36f8]
0x19db00086455   6d5  41ff95f8360000 call [r13+0x36f8]
0x19db0008645c   6dc  41ff95f8360000 call [r13+0x36f8]
0x19db00086463   6e3  41ff95f8360000 call [r13+0x36f8]
0x19db0008646a   6ea  41ff95f8360000 call [r13+0x36f8]
0x19db00086471   6f1  41ff95f8360000 call [r13+0x36f8]
0x19db00086478   6f8  41ff95f8360000 call [r13+0x36f8]
0x19db0008647f   6ff  41ff9510370000 call [r13+0x3710]
0x19db00086486   706  41ff9510370000 call [r13+0x3710]
0x19db0008648d   70d  41ff9510370000 call [r13+0x3710]

Source positions:
 pc offset  position
       3b7      2798

Inlined functions (count = 0)

Deoptimization Input Data (deopt points = 27)
 index  bytecode-offset    pc
     0               17    NA 
     1               17    NA 
     2               17    NA 
     3               17    NA 
     4               17    NA 
     5               17    NA 
     6               17    NA 
     7               17    NA 
     8               17    NA 
     9               17    NA 
    10               17    NA 
    11               17    NA 
    12               17    NA 
    13               17    NA 
    14               17    NA 
    15               17    NA 
    16               17    NA 
    17               17    NA 
    18               17    NA 
    19               17    NA 
    20               17    NA 
    21               17    NA 
    22               17    NA 
    23               17    NA 
    24               -1   3e0 
    25              133   4d6 
    26              133   626 

Safepoints (size = 98)
0x19db00086160     3e0   6ff  000000000000001000000 (sp -> fp)      24
0x19db00086186     406    NA  000000000000001000000 (sp -> fp)  <none>
0x19db000861e0     460    NA  010000000001011100000 (sp -> fp)  <none>
0x19db00086256     4d6   706  011000000000001100000 (sp -> fp)      25
0x19db00086305     585    NA  011000000000001100000 (sp -> fp)  <none>
0x19db000863a6     626   70d  011000000000001100000 (sp -> fp)      26

RelocInfo (size = 48)
0x19db00085d98  off heap target
0x19db00085db2  off heap target
0x19db00085df1  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db00085e02  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db00085e51  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00085e82  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00085eec  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0008613e  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db00086148  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00086155  off heap target
0x19db0008617b  off heap target
0x19db000861c4  external reference (Runtime::TransitionElementsKind)  (0x7ffff6fe6190)
0x19db000861ee  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00086237  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db00086241  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008626b  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000862fa  off heap target
0x19db00086351  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00086392  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000863bb  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)

--- End code ---
assign 0 to v-1:0
assign 3 to v-4:0
assign 2 to v-3:0
assign 1 to v-2:0
assign 6 to v-7:0
assign 7 to v-8:0
assign 8 to v-9:0
assign 9 to v-10:0
assign 11 to v-12:0
assign 12 to v-13:0
assign 14 to v-15:0
assign 15 to v-16:0
assign 0 to v-33:0
assign 1 to v-34:0
assign 2 to v-35:0
assign 3 to v-36:0
assign 4 to v-37:0
assign 5 to v-38:0
assign 6 to v-39:0
assign 7 to v-40:0
assign 8 to v-41:0
assign 9 to v-42:0
assign 10 to v-43:0
assign 11 to v-44:0
assign 12 to v-45:0
assign 13 to v-46:0
assign 14 to v-47:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
------------------------
function: CreateP
add v25->v20
add v21->v23
add v14->v19
add v18->v19
add v17->v10
add v16->v14
add v13->v14
add v12->v8
add v11->v8
add v10->v8
add v3->v10
add v4->v10
add v5->v10
gap () () 
          [stack:-1|t] = ArchNop
gap (v2(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v3(-) = [stack:-2|t];) () 
          [stack:-3|t] = ArchNop
gap (v4(-) = [stack:-3|t];) () 
          [stack:-4|t] = ArchNop
gap (v5(-) = [stack:-4|t];) () 
          [rsi|R|t] = ArchNop
gap (v6(-) = [rsi|R|t];) () 
          [constant:30] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:43] [immediate:44]
gap () () 
          [constant:31] = ArchNop
gap () () 
          [constant:29] = ArchNop
gap () () 
          v28(R) = ArchStackCheckOffset
gap () () 
          X64Push v28(-)
gap () ([rbx|R|w64] = v29(-); [rax|R|w64] = v30(-); [rsi|R|t] = v31(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:41] #-1 #4 [immediate:42] v2(S) v3(S) v4(S) v5(S) v6(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:40]
gap () () 
          ArchJmp [immediate:39]
gap () () 
          [constant:15] = ArchNop
gap () () 
          v20(R) = X64Movq : MR v15(R)
gap () () 
          [constant:26] = ArchNop
gap () () 
          [constant:24] = ArchNop
gap () () 
          v25(R) = X64Lea : MRI v20(R) [immediate:38]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v26(R) v25(R) [immediate:36] [immediate:37]
gap () () 
          ArchJmp [immediate:35]
gap () ([rdx|R|w64] = v24(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:34] #-1 [rdx|R|w64]
gap (v23(-) = [rax|R|tp];) () 
          v21(R) = X64Lea : MRI v23(R) [immediate:33]
gap () (v19 = v21(-);) 
          ArchJmp [immediate:32]
gap () (v19 = v20(-);) 
          ArchJmp [immediate:31]
gap () () 
          v14(R) = X64Lea : MRI v19(R) [immediate:30]
gap () () 
          X64Movq : MR v15(R) v14(R)
gap () () 
          v18(R) = X64Lea : MRI v19(R) [immediate:29]
gap () (v10 = v18(-);) 
          v10(1) = ArchNop v10
gap () () 
          [constant:17] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v10(R) [immediate:28] v17(R)
gap () () 
          X64MovqCompressTagged : MRI v10(R) [immediate:26] [immediate:27]
gap () () 
          X64MovqCompressTagged : MRI v10(R) [immediate:24] [immediate:25]
gap () () 
          X64MovqCompressTagged : MRI v10(R) [immediate:22] [immediate:23]
gap () () 
          X64MovqCompressTagged : MRI v10(R) [immediate:20] [immediate:21]
gap () () 
          X64MovqCompressTagged : MRI v10(R) [immediate:18] [immediate:19]
gap () () 
          v16(R) = X64Lea : MRI v14(R) [immediate:17]
gap () () 
          X64Movq : MR v15(R) v16(R)
gap () () 
          v13(R) = X64Lea : MRI v14(R) [immediate:16]
gap () (v8 = v13(-);) 
          v8(1) = ArchNop v8
gap () () 
          [constant:12] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v8(R) [immediate:15] v12(R)
gap () () 
          [constant:11] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v8(R) [immediate:14] v11(R)
gap () () 
          X64MovqCompressTagged : MRI v8(R) [immediate:13] v10(R)
gap () () 
          X64MovqCompressTagged : MRI v8(R) [immediate:11] [immediate:12]
gap () () 
          X64Test32 && deoptimize if not equal v3 #1 #3 [immediate:9] v2(-) v3(-) v4(-) v5(-) v6(S) [immediate:10] v8(-) v3(-)
gap () () 
          X64MovqCompressTagged : MRI v10(R) [immediate:8] v3(R)
gap () () 
          X64Test32 && deoptimize if not equal v4 #1 #2 [immediate:6] v2(-) v3(-) v4(-) v5(-) v6(S) [immediate:7] v8(-) v4(-)
gap () () 
          X64MovqCompressTagged : MRI v10(R) [immediate:5] v4(R)
gap () () 
          X64Test32 && deoptimize if not equal v5 #1 #1 [immediate:3] v2(-) v3(-) v4(-) v5(-) v6(S) [immediate:4] v8(-) v5(-)
gap () () 
          X64MovqCompressTagged : MRI v10(R) [immediate:2] v5(R)
gap () () 
          [constant:9] = ArchNop
gap () () 
          [constant:7] = ArchNop
gap () ([rdx|R|t] = v2(-); [rcx|R|t] = v7(-); [rax|R|t] = v8(-); [rdi|R|w64] = v9(-); [rsi|R|t] = v6(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:0] #-1 #0 [immediate:1] v2(S) v3(S) v4(S) v5(S) v6(S) [rdx|R|t] [rcx|R|t] [rax|R|t] [rdi|R|w64] [rsi|R|t]
gap () () 
          [constant:0] = ArchNop
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
print modrm pairs
1, v5, v10
1, v4, v10
1, v10, v8
1, v12, v8
1, v13, v14
1, v3, v10
1, v17, v10
1, v14, v19
1, v11, v8
1, v18, v19
1, v21, v23
1, v16, v14
1, v25, v20
assign r8 to v28:0
assign 8 to v28:0
assign rbx to v29:1
assign 3 to v29:1
assign rax to v30:1
assign 0 to v30:1
assign rsi to v31:1
assign 6 to v31:1
assign r8 to v15:1
assign 8 to v15:1
assign r9 to v20:0
assign 9 to v20:0
assign r12 to v25:0
assign 12 to v25:0
assign r11 to v26:1
assign 11 to v26:1
assign rdx to v24:1
assign 2 to v24:1
blocking v15 pick register r8
assign rax to v23:0
assign 0 to v23:0
assign r9 to v21:0
assign 9 to v21:0
assign r8 to v15:4
assign 8 to v15:4
assign r9 to v19:0
assign 9 to v19:0
assign r12 to v14:0
assign 12 to v14:0
assign r8 to v15:3
assign 8 to v15:3
assign r9 to v18:0
assign 9 to v18:0
assign r9 to v10:0
assign 9 to v10:0
assign r14 to v17:1
assign 14 to v17:1
assign rax to v16:0
assign 0 to v16:0
assign r8 to v13:0
assign 8 to v13:0
assign r8 to v8:0
assign 8 to v8:0
assign r12 to v12:1
assign 12 to v12:1
assign r12 to v11:1
assign 12 to v11:1
assign r12 to v3:1
assign 12 to v3:1
assign r14 to v4:1
assign 14 to v4:1
assign r15 to v5:1
assign 15 to v5:1
assign rcx to v7:1
assign 1 to v7:1
assign rdi to v9:1
assign 7 to v9:1
assign rax to v0:1
assign 0 to v0:1
spill count : 4
--- Raw source ---
(X,Y,Z) {
      this.V = [X,Y,Z,1];
    }


--- Optimized code ---
optimization_id = 3
source_position = 2379
kind = TURBOFAN
name = CreateP
stack_slots = 6
compiler = turbofan
address = 0x19db00086501

Instructions (size = 484)
0x19db00086540     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db00086547     7  483bd9         REX.W cmpq rbx,rcx
0x19db0008654a     a  7418           jz 0x19db00086564  <+0x24>
0x19db0008654c     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db00086556    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db00086560    20  41ffd2         call r10
0x19db00086563    23  cc             int3l
0x19db00086564    24  8b59d0         movl rbx,[rcx-0x30]
0x19db00086567    27  4903dd         REX.W addq rbx,r13
0x19db0008656a    2a  f6430701       testb [rbx+0x7],0x1
0x19db0008656e    2e  740d           jz 0x19db0008657d  <+0x3d>
0x19db00086570    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db0008657a    3a  41ffe2         jmp r10
0x19db0008657d    3d  55             push rbp
0x19db0008657e    3e  4889e5         REX.W movq rbp,rsp
0x19db00086581    41  56             push rsi
0x19db00086582    42  57             push rdi
0x19db00086583    43  50             push rax
0x19db00086584    44  4883ec08       REX.W subq rsp,0x8
0x19db00086588    48  488975e0       REX.W movq [rbp-0x20],rsi
0x19db0008658c    4c  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00086590    50  0f860f010000   jna 0x19db000866a5  <+0x165>
0x19db00086596    56  49b8f87d6d5555550000 REX.W movq r8,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db000865a0    60  4d8b08         REX.W movq r9,[r8]
0x19db000865a3    63  4d8d6128       REX.W leaq r12,[r9+0x28]
0x19db000865a7    67  49bb007e6d5555550000 REX.W movq r11,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db000865b1    71  4d3923         REX.W cmpq [r11],r12
0x19db000865b4    74  0f8622010000   jna 0x19db000866dc  <+0x19c>
0x19db000865ba    7a  4d8d6118       REX.W leaq r12,[r9+0x18]
0x19db000865be    7e  4d8920         REX.W movq [r8],r12
0x19db000865c1    81  4983c101       REX.W addq r9,0x1
0x19db000865c5    85  4d8bb5d0000000 REX.W movq r14,[r13+0xd0] (root (fixed_array_map))
0x19db000865cc    8c  458971ff       movl [r9-0x1],r14
0x19db000865d0    90  41c7410308000000 movl [r9+0x3],0x8
0x19db000865d8    98  41c7410700000000 movl [r9+0x7],0x0
0x19db000865e0    a0  41c7410b00000000 movl [r9+0xb],0x0
0x19db000865e8    a8  41c7410f00000000 movl [r9+0xf],0x0
0x19db000865f0    b0  41c7411302000000 movl [r9+0x13],0x2
0x19db000865f8    b8  498d442410     REX.W leaq rax,[r12+0x10]
0x19db000865fd    bd  498900         REX.W movq [r8],rax
0x19db00086600    c0  4d8d442401     REX.W leaq r8,[r12+0x1]
0x19db00086605    c5  41bcb59e3008   movl r12,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0008660b    cb  458960ff       movl [r8-0x1],r12
0x19db0008660f    cf  4d8ba558010000 REX.W movq r12,[r13+0x158] (root (empty_fixed_array))
0x19db00086616    d6  45896003       movl [r8+0x3],r12
0x19db0008661a    da  45894807       movl [r8+0x7],r9
0x19db0008661e    de  41c7400b08000000 movl [r8+0xb],0x8
0x19db00086626    e6  4c8b6518       REX.W movq r12,[rbp+0x18]
0x19db0008662a    ea  41f6c401       testb r12,0x1
0x19db0008662e    ee  0f85cb000000   jnz 0x19db000866ff  <+0x1bf>
0x19db00086634    f4  45896107       movl [r9+0x7],r12
0x19db00086638    f8  4c8b7520       REX.W movq r14,[rbp+0x20]
0x19db0008663c    fc  41f6c601       testb r14,0x1
0x19db00086640   100  0f85c0000000   jnz 0x19db00086706  <+0x1c6>
0x19db00086646   106  4589710b       movl [r9+0xb],r14
0x19db0008664a   10a  4c8b7d28       REX.W movq r15,[rbp+0x28]
0x19db0008664e   10e  41f6c701       testb r15,0x1
0x19db00086652   112  0f85b5000000   jnz 0x19db0008670d  <+0x1cd>
0x19db00086658   118  4589790f       movl [r9+0xf],r15
0x19db0008665c   11c  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db00086666   126  bf06000000     movl rdi,0x6
0x19db0008666b   12b  488b5510       REX.W movq rdx,[rbp+0x10]
0x19db0008666f   12f  498bc0         REX.W movq rax,r8
0x19db00086672   132  488b75e0       REX.W movq rsi,[rbp-0x20]
0x19db00086676   136  49bae0e6d1f5ff7f0000 REX.W movq r10,0x7ffff5d1e6e0  (StoreICTrampoline)    ;; off heap target
0x19db00086680   140  41ffd2         call r10
0x19db00086683   143  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db0008668a   14a  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db0008668e   14e  488be5         REX.W movq rsp,rbp
0x19db00086691   151  5d             pop rbp
0x19db00086692   152  4883f903       REX.W cmpq rcx,0x3
0x19db00086696   156  7f03           jg 0x19db0008669b  <+0x15b>
0x19db00086698   158  c22000         ret 0x20
0x19db0008669b   15b  415a           pop r10
0x19db0008669d   15d  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db000866a2   162  4152           push r10
0x19db000866a4   164  c3             retl
0x19db000866a5   165  49b89000000000000000 REX.W movq r8,0x90
0x19db000866af   16f  4150           push r8
0x19db000866b1   171  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db000866bb   17b  b801000000     movl rax,0x1
0x19db000866c0   180  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000866ca   18a  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db000866d4   194  41ffd2         call r10
0x19db000866d7   197  e9bafeffff     jmp 0x19db00086596  <+0x56>
0x19db000866dc   19c  ba28000000     movl rdx,0x28
0x19db000866e1   1a1  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db000866eb   1ab  41ffd2         call r10
0x19db000866ee   1ae  4c8d48ff       REX.W leaq r9,[rax-0x1]
0x19db000866f2   1b2  4c8b059ffeffff REX.W movq r8,[rip+0xfffffe9f]
0x19db000866f9   1b9  e9bcfeffff     jmp 0x19db000865ba  <+0x7a>
0x19db000866fe   1be  90             nop
0x19db000866ff   1bf  41ff95f8360000 call [r13+0x36f8]
0x19db00086706   1c6  41ff95f8360000 call [r13+0x36f8]
0x19db0008670d   1cd  41ff95f8360000 call [r13+0x36f8]
0x19db00086714   1d4  41ff9510370000 call [r13+0x3710]
0x19db0008671b   1db  41ff9510370000 call [r13+0x3710]
0x19db00086722   1e2  6690           nop

Source positions:
 pc offset  position
       11c      2379

Inlined functions (count = 0)

Deoptimization Input Data (deopt points = 5)
 index  bytecode-offset    pc
     0               11    NA 
     1               21    NA 
     2               31    NA 
     3               37   143 
     4               -1   197 

Safepoints (size = 47)
0x19db00086683     143   1d4  100000 (sp -> fp)       3
0x19db000866d7     197   1db  100000 (sp -> fp)       4
0x19db000866ee     1ae    NA  100000 (sp -> fp)  <none>

RelocInfo (size = 24)
0x19db00086558  off heap target
0x19db00086572  off heap target
0x19db00086598  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db000865a9  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db00086607  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0008665e  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db00086678  off heap target
0x19db000866b3  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db000866c2  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000866cc  off heap target
0x19db000866e3  off heap target

--- End code ---
assign 0 to v-1:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
assign 7 to v-8:0
assign 6 to v-7:0
------------------------
function: DrawLine
add v126->v27
add v124->v27
add v119->v124
add v114->v124
add v123->v124
add v73->v114
add v121->v28
add v118->v28
add v119->v118
add v112->v118
add v117->v118
add v106->v112
add v71->v114
add v109->v112
add v97->v96
add v95->v96
add v81->v95
add v93->v29
add v94->v93
add v1->v93
add v91->v1
add v92->v91
add v89->v91
add v18->v13
add v14->v16
add v12->v10
add v9->v10
add v8->v6
add v7->v6
add v2->v1
gap () () 
          [rsi|R|t] = ArchNop
gap (v29(-) = [rsi|R|t];) () 
          [stack:-3|t] = ArchNop
gap (v28(-) = [stack:-3|t];) () 
          [stack:-1|t] = ArchNop
gap (v26(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v27(-) = [stack:-2|t];) () 
          [rdi|R|t] = ArchNop
gap (v25(-) = [rdi|R|t];) () 
          [constant:110] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:112] [immediate:113]
gap () () 
          [constant:130] = ArchNop
gap () () 
          [constant:129] = ArchNop
gap () () 
          v128(R) = ArchStackCheckOffset
gap () () 
          X64Push v128(-)
gap () ([rbx|R|w64] = v129(-); [rax|R|w64] = v110(-); [rsi|R|t] = v130(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:111] #-1 #21 v25(S) v26(S) v27(S) v28(S) v29(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:110]
gap () () 
          ArchJmp [immediate:109]
gap () () 
          [constant:41] = ArchNop
gap () () 
          [constant:122] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v27 #1 #20 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v126(R) = X64Movl : MRI v27(R) [immediate:108]
gap () () 
          X64Cmp32 && branch if equal v126(R) v122 [immediate:106] [immediate:107]
gap () () 
          [constant:125] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v125(R) v126 #19 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:105]
gap () () 
          ArchJmp [immediate:104]
gap () () 
          [constant:119] = ArchNop
gap () () 
          v124(R) = X64MovqDecompressTaggedPointer : MRI v27(R) [immediate:103]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v124(R) [immediate:102] v119(R) #18 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v114(R) = X64MovqDecompressTaggedPointer : MRI v124(R) [immediate:101]
gap () () 
          v123(R) = X64MovqDecompressTaggedSigned : MRI v124(R) [immediate:100]
gap () (v115(R) = v123(-);) 
          v115(1) = X64Sar32 v115(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #0 #17 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v73(R) = X64Movsd : MRI v114(R) [immediate:99]
gap () () 
          X64Test32 && deoptimize if equal v28 #1 #16 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v121(R) = X64Movl : MRI v28(R) [immediate:98]
gap () () 
          X64Cmp32 && branch if equal v122(R) v121 [immediate:96] [immediate:97]
gap () () 
          [constant:120] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v120(R) v121 #15 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:95]
gap () () 
          ArchJmp [immediate:94]
gap () () 
          v118(R) = X64MovqDecompressTaggedPointer : MRI v28(R) [immediate:93]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v118(R) [immediate:92] v119(R) #14 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v112(R) = X64MovqDecompressTaggedPointer : MRI v118(R) [immediate:91]
gap () () 
          v117(R) = X64MovqDecompressTaggedSigned : MRI v118(R) [immediate:90]
gap () (v113(R) = v117(-);) 
          v113(1) = X64Sar32 v113(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #0 #13 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v106(R) = X64Movsd : MRI v112(R) [immediate:89]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v106(R) v73 [immediate:87] [immediate:88]
gap () () 
          [constant:116] = ArchNop
gap () (v99 = v116(-);) 
          ArchJmp [immediate:86]
gap () (v99 = v110(-);) 
          ArchJmp [immediate:85]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #1 #12 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v71(R) = X64Movsd : MRI v114(R) [immediate:84]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #1 #11 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v109(R) = X64Movsd : MRI v112(R) [immediate:83]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v109(R) v71 [immediate:81] [immediate:82]
gap () () 
          [constant:111] = ArchNop
gap () (v98 = v111(-);) 
          ArchJmp [immediate:80]
gap () (v98 = v110(-);) 
          ArchJmp [immediate:79]
gap () () 
          [constant:87] = ArchNop
gap () () 
          v108(R) = AVXFloat64Sub v109(R) v71
gap () () 
          v100(R) = AVXFloat64Abs v108
gap () () 
          v105(R) = AVXFloat64Sub v106(R) v73
gap () () 
          v101(R) = AVXFloat64Abs v105
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v101(R) v100 [immediate:77] [immediate:78]
gap () () 
          v103(R) = AVXFloat64Mul v100(R) v87
gap () (v35 = v98(-); v33 = v41(-); v34 = v41(-); v32 = v99(-); v38 = v101(-); v77 = v103(-); v36 = v100(-);) 
          ArchJmp [immediate:76]
gap () () 
          v102(R) = AVXFloat64Mul v101(R) v87
gap () (v35 = v41(-); v33 = v98(-); v34 = v99(-); v32 = v41(-); v38 = v100(-); v77 = v102(-); v36 = v101(-);) 
          ArchJmp [immediate:75]
gap () () 
          [constant:96] = ArchNop
gap () () 
          [constant:97] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v96(R) [immediate:74] v97(R) #10 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v95(R) = X64MovqDecompressTaggedPointer : MRI v96(R) [immediate:73]
gap () () 
          v81(R) = X64Movl : MRI v95(R) [immediate:72]
gap () () 
          v93(R) = X64MovqDecompressAnyTagged : MRI v29(R) [immediate:71]
gap () () 
          X64Test32 && deoptimize if equal v93 #1 #9 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          [constant:94] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v93(R) [immediate:70] v94(R) #8 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v1(R) = X64MovqDecompressTaggedPointer : MRI v93(R) [immediate:69]
gap () () 
          v91(R) = X64MovqDecompressAnyTagged : MRI v1(R) [immediate:68]
gap () (v68(R) = v91(-);) 
          v68(1) = X64Sar32 v68(R) #1
gap () () 
          v79(R) = X64Test32 && set if equal v91 #1
gap () () 
          X64Cmp32 && branch if not equal v79 #0 [immediate:66] [immediate:67]
gap () () 
          v92(R) = X64MovqDecompressTaggedPointer : MRI v91(R) [immediate:65]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v92(R) [immediate:63] [immediate:64]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v92(R) [immediate:62] #67 #7 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:61]
gap () () 
          ArchJmp [immediate:60]
gap () () 
          v89(R) = X64Movsd : MRI v91(R) [immediate:59]
gap () (v88 = v89(-);) 
          ArchJmp [immediate:58]
gap () () 
          v90(R) = SSEInt32ToFloat64 v68
gap () (v88 = v90(-);) 
          ArchJmp [immediate:57]
gap () () 
          v85(R) = AVXFloat64Add v88(R) v36
gap () () 
          v82(R) = SSEFloat64Round v85(R)
gap () () 
          v86(R) = AVXFloat64Sub v82(R) v87
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v85(R) v86 [immediate:55] [immediate:56]
gap () () 
          [constant:84] = ArchNop
gap () () 
          v83(R) = AVXFloat64Sub v82(R) v84
gap () (v7 = v83(-);) 
          ArchJmp [immediate:54]
gap () (v7 = v82(-);) 
          ArchJmp [immediate:53]
gap () () 
          v22(R) = SSEFloat64ToInt32 v7
gap () () 
          [constant:80] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v80(R) v81 #6 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v78(R) = SSEInt32ToFloat64 v22
gap () () 
          X64Cmp32 && deoptimize if equal v79 #0 #5 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v78(R) v7 #4 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          X64Cmp32 && branch if signed less than v68(R) v22 [immediate:51] [immediate:52]
gap () () 
          ArchJmp [immediate:50]
gap () () 
          v69(R) = AVXFloat64Add v77(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v69(R) v36 [immediate:48] [immediate:49]
gap () (v59 = v69(-); v67 = v71(-); v66 = v73(-);) 
          ArchJmp [immediate:47]
gap () () 
          v76(R) = SSEInt32ToFloat64 v33
gap () () 
          v75(R) = SSEInt32ToFloat64 v32
gap () () 
          v70(R) = AVXFloat64Sub v69(R) v36
gap () () 
          v72(R) = AVXFloat64Add v76(R) v71
gap () () 
          v74(R) = AVXFloat64Add v75(R) v73
gap () (v59 = v70(-); v67 = v72(-); v66 = v74(-);) 
          ArchJmp [immediate:46]
gap () () 
          v46(R) = SSEInt32ToFloat64 v35
gap () () 
          v44(R) = SSEInt32ToFloat64 v34
gap () (v65(R) = v68(-);) 
          v65(1) = X64Add32 && deoptimize if overflow v65(R) #1 #3 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v58(R) = AVXFloat64Add v67(R) v46
gap () () 
          v60(R) = AVXFloat64Add v66(R) v44
gap () (v61 = v65(-);) 
          v61(1) = ArchNop v61
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:44] [immediate:45]
gap () () 
          [constant:64] = ArchNop
gap () () 
          [constant:63] = ArchNop
gap () ([rbx|R|w64] = v63(-); [rax|R|w64] = v41(-); [rsi|R|t] = v64(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:43] #-1 #2 v25(S) v26(S) v27(S) v28(S) v29(S) v60(S) v58(S) v32(S) v33(S) v34(S) v35(S) v36(S) v59(S) v38(S) v7(S) v61(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:42]
gap () () 
          ArchJmp [immediate:41]
gap () (v50 = v58(-); v51 = v59(-); v49 = v60(-); v48 = v61(-);) 
          ArchJmp [immediate:40]
gap () () 
          X64Cmp32 && branch if signed less than v48(R) v22 [immediate:38] [immediate:39]
gap () () 
          v53(R) = AVXFloat64Add v51(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v53(R) v36 [immediate:36] [immediate:37]
gap () (v47 = v50(-); v37 = v53(-); v45 = v49(-);) 
          ArchJmp [immediate:35]
gap () () 
          v57(R) = SSEInt32ToFloat64 v33
gap () () 
          v52(R) = AVXFloat64Add v57(R) v50
gap () () 
          v54(R) = AVXFloat64Sub v53(R) v36
gap () () 
          v56(R) = SSEInt32ToFloat64 v32
gap () () 
          v55(R) = AVXFloat64Add v56(R) v49
gap () (v47 = v52(-); v37 = v54(-); v45 = v55(-);) 
          ArchJmp [immediate:34]
gap () (v43(R) = v48(-);) 
          v43(1) = X64Add32 && deoptimize if overflow v43(R) #1 #1 v25(S) v26(-) v27(-) v28(-) v29(S) v49(-) v50(-) v32(-) v33(-) v34(-) v35(-) v36(-) v51(-) v38(-) v7(-) v48(-) v7(-)
gap () () 
          v31(R) = AVXFloat64Add v46(R) v47
gap () () 
          v30(R) = AVXFloat64Add v44(R) v45
gap () (v39 = v43(-);) 
          v39(1) = ArchNop v39
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:32] [immediate:33]
gap () () 
          [constant:42] = ArchNop
gap () () 
          [constant:40] = ArchNop
gap () ([rbx|R|w64] = v40(-); [rax|R|w64] = v41(-); [rsi|R|t] = v42(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:31] #-1 #0 v25(S) v26(S) v27(S) v28(S) v29(S) v30(S) v31(S) v32(S) v33(S) v34(S) v35(S) v36(S) v37(S) v38(S) v7(S) v39(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:30]
gap () () 
          ArchJmp [immediate:29]
gap () (v50 = v31(-); v51 = v37(-); v49 = v30(-); v48 = v39(-);) 
          ArchJmp [immediate:28]
gap () () 
          ArchJmp [immediate:27]
gap () () 
          X64Cmp32 && branch if equal v22 #0 [immediate:25] [immediate:26]
gap () () 
          ArchJmp [immediate:24]
gap () () 
          v23(R) = SSEFloat64ExtractHighWord32 v7
gap () () 
          X64Cmp32 && branch if signed less than v23 #0 [immediate:22] [immediate:23]
gap () () 
          ArchJmp [immediate:21]
gap () (v21(R) = v22(-);) 
          v21(1) = X64Add32 && branch if overflow v21(R) v22(R) [immediate:17] [immediate:18] [immediate:19] [immediate:20]
gap () (v20 = v21(-);) 
          v20(1) = ArchNop v20
gap () (v2 = v20(-);) 
          ArchJmp [immediate:16]
gap () () 
          ArchJmp [immediate:15]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          [constant:17] = ArchNop
gap () () 
          [constant:11] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () () 
          v13(R) = X64Movq : MR v11(R)
gap () () 
          [constant:19] = ArchNop
gap () () 
          v18(R) = X64Lea : MRI v13(R) [immediate:13]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v19(R) v18(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () ([rdx|R|w64] = v17(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:9] #-1 [rdx|R|w64]
gap (v16(-) = [rax|R|tp];) () 
          v14(R) = X64Lea : MRI v16(R) [immediate:8]
gap () (v10 = v14(-);) 
          ArchJmp [immediate:7]
gap () (v10 = v13(-);) 
          ArchJmp [immediate:6]
gap () () 
          v12(R) = X64Lea : MRI v10(R) [immediate:5]
gap () () 
          X64Movq : MR v11(R) v12(R)
gap () () 
          v9(R) = X64Lea : MRI v10(R) [immediate:4]
gap () (v6 = v9(-);) 
          v6(1) = ArchNop v6
gap () () 
          X64MovqCompressTagged : MRI v6(R) [immediate:3] v8(R)
gap () () 
          X64Movsd : MRI v6(R) [immediate:2] v7(R)
gap () (v2 = v6(-);) 
          ArchJmp [immediate:1]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1(R) [immediate:0] v2(R)
gap () () 
          [constant:0] = ArchNop
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
print modrm pairs
1, v7, v6
1, v8, v6
1, v9, v10
1, v12, v10
1, v14, v16
1, v18, v13
1, v2, v1
1, v109, v112
1, v89, v91
1, v94, v93
1, v81, v95
1, v97, v96
1, v93, v29
1, v92, v91
1, v123, v124
1, v106, v112
1, v91, v1
1, v112, v118
1, v95, v96
1, v124, v27
1, v118, v28
1, v71, v114
1, v121, v28
1, v126, v27
1, v119, v118
1, v119, v124
1, v73, v114
1, v117, v118
1, v114, v124
1, v1, v93
assign rcx to v128:0
assign 1 to v128:0
assign rax to v110:1
assign 0 to v110:1
assign rbx to v129:1
assign 3 to v129:1
assign rsi to v130:1
assign 6 to v130:1
assign rcx to v110:2
assign 1 to v110:2
assign rcx to v27:1
assign 1 to v27:1
assign rdi to v126:0
assign 7 to v126:0
assign r8 to v122:1
assign 8 to v122:1
assign r9 to v125:1
assign 9 to v125:1
assign rdi to v124:0
assign 7 to v124:0
assign r9 to v119:1
assign 9 to v119:1
assign r12 to v114:0
assign 12 to v114:0
assign rdi to v123:0
assign 7 to v123:0
assign rdi to v115:0
assign 7 to v115:0
assign r11 to v28:1
assign 11 to v28:1
assign r14 to v121:0
assign 14 to v121:0
assign r8 to v120:1
assign 8 to v120:1
assign r8 to v118:0
assign 8 to v118:0
assign r9 to v112:0
assign 9 to v112:0
assign r8 to v117:0
assign 8 to v117:0
assign r8 to v113:0
assign 8 to v113:0
assign r14 to v116:1
assign 14 to v116:1
assign r14 to v99:0
assign 14 to v99:0
assign rax to v111:1
assign 0 to v111:1
assign rax to v98:0
assign 0 to v98:0
assign rdi to v41:1
assign 7 to v41:1
assign rdi to v41:3
assign 7 to v41:3
assign r8 to v32:0
assign 8 to v32:0
assign rax to v33:0
assign 0 to v33:0
assign r14 to v34:0
assign 14 to v34:0
assign r9 to v35:0
assign 9 to v35:0
assign r12 to v96:1
assign 12 to v96:1
assign rdx to v97:1
assign 2 to v97:1
assign r12 to v95:0
assign 12 to v95:0
assign r12 to v81:0
assign 12 to v81:0
assign r15 to v29:1
assign 15 to v29:1
assign rdx to v93:0
assign 2 to v93:0
assign rsi to v94:1
assign 6 to v94:1
assign rdx to v1:0
assign 2 to v1:0
assign rsi to v91:0
assign 6 to v91:0
assign rbx to v68:0
assign 3 to v68:0
blocking v79 pick register rdx
assign rdx to v79:0
assign 2 to v79:0
v1:0 not intersect with v93:0, removed
v1:0 not intersect with v2:0, removed
v1:1 intersect with v2:0, adding
v1:1 intersect with v91:0, adding
blocking v92 pick register rcx
assign rcx to v92:0
assign 1 to v92:0
assign rcx to v27:3
assign 1 to v27:3
assign rsi to v22:0
assign 6 to v22:0
blocking v80 pick register rcx
assign rcx to v80:1
assign 1 to v80:1
assign rbx to v65:0
assign 3 to v65:0
assign rbx to v61:0
assign 3 to v61:0
assign rcx to v63:1
assign 1 to v63:1
assign r12 to v64:1
assign 12 to v64:1
assign rcx to v33:1
assign 1 to v33:1
assign r12 to v61:1
assign 12 to v61:1
assign rdx to v22:1
assign 2 to v22:1
blocking v22 pick register rcx
assign rbx to v61:3
assign 3 to v61:3
assign r15 to v29:3
assign 15 to v29:3
assign r14 to v34:2
assign 14 to v34:2
assign r11 to v28:3
assign 11 to v28:3
assign r9 to v35:2
assign 9 to v35:2
assign r8 to v32:2
assign 8 to v32:2
assign rdi to v41:5
assign 7 to v41:5
assign rax to v33:3
assign 0 to v33:3
assign rsi to v22:4
assign 6 to v22:4
assign rbx to v48:0
assign 3 to v48:0
assign rcx to v43:0
assign 1 to v43:0
assign rcx to v39:0
assign 1 to v39:0
assign rbx to v40:1
assign 3 to v40:1
assign r12 to v42:1
assign 12 to v42:1
assign r12 to v33:4
assign 12 to v33:4
assign rdx to v22:5
assign 2 to v22:5
assign rcx to v39:2
assign 1 to v39:2
assign rsi to v22:7
assign 6 to v22:7
assign rax to v33:6
assign 0 to v33:6
assign rdi to v41:7
assign 7 to v41:7
assign r8 to v32:4
assign 8 to v32:4
assign r9 to v35:4
assign 9 to v35:4
assign r11 to v28:5
assign 11 to v28:5
assign r14 to v34:4
assign 14 to v34:4
assign r15 to v29:5
assign 15 to v29:5
assign rcx to v23:0
assign 1 to v23:0
assign rsi to v21:0
assign 6 to v21:0
assign rcx to v22:3
assign 1 to v22:3
assign rsi to v20:0
assign 6 to v20:0
assign rcx to v11:1
assign 1 to v11:1
assign rdi to v13:0
assign 7 to v13:0
assign r8 to v18:0
assign 8 to v18:0
assign r9 to v19:1
assign 9 to v19:1
assign rdx to v17:1
assign 2 to v17:1
blocking v11 pick register rcx
assign rax to v16:0
assign 0 to v16:0
assign rdi to v14:0
assign 7 to v14:0
assign rcx to v11:4
assign 1 to v11:4
assign rdi to v10:0
assign 7 to v10:0
assign rcx to v12:0
assign 1 to v12:0
assign r8 to v11:3
assign 8 to v11:3
assign rcx to v9:0
assign 1 to v9:0
assign rcx to v6:0
assign 1 to v6:0
assign rdi to v8:1
assign 7 to v8:1
assign rsi to v2:0
assign 6 to v2:0
assign rcx to v1:2
assign 1 to v1:2
assign rdi to v3:0
assign 7 to v3:0
assign r8 to v4:0
assign 8 to v4:0
assign rax to v0:1
assign 0 to v0:1
spill count : 23
add v126->v27
add v124->v27
add v119->v124
add v114->v124
add v123->v124
add v73->v114
add v121->v28
add v118->v28
add v119->v118
add v112->v118
add v117->v118
add v106->v112
add v71->v114
add v109->v112
add v97->v96
add v95->v96
add v81->v95
add v93->v29
add v94->v93
add v1->v93
add v91->v1
add v92->v91
add v89->v91
add v18->v13
add v14->v16
add v12->v10
add v9->v10
add v8->v6
add v7->v6
add v2->v1
gap () () 
          [rsi|R|t] = ArchNop
gap (v29(-) = [rsi|R|t];) () 
          [stack:-3|t] = ArchNop
gap (v28(-) = [stack:-3|t];) () 
          [stack:-1|t] = ArchNop
gap (v26(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v27(-) = [stack:-2|t];) () 
          [rdi|R|t] = ArchNop
gap (v25(-) = [rdi|R|t];) () 
          [constant:110] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:112] [immediate:113]
gap () () 
          [constant:130] = ArchNop
gap () () 
          [constant:129] = ArchNop
gap () () 
          v128(R) = ArchStackCheckOffset
gap () () 
          X64Push v128(-)
gap () ([rbx|R|w64] = v129(-); [rax|R|w64] = v110(-); [rsi|R|t] = v130(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:111] #-1 #21 v25(S) v26(S) v27(S) v28(S) v29(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:110]
gap () () 
          ArchJmp [immediate:109]
gap () () 
          [constant:41] = ArchNop
gap () () 
          [constant:122] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v27 #1 #20 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v126(R) = X64Movl : MRI v27(R) [immediate:108]
gap () () 
          X64Cmp32 && branch if equal v126(R) v122 [immediate:106] [immediate:107]
gap () () 
          [constant:125] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v125(R) v126 #19 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:105]
gap () () 
          ArchJmp [immediate:104]
gap () () 
          [constant:119] = ArchNop
gap () () 
          v124(R) = X64MovqDecompressTaggedPointer : MRI v27(R) [immediate:103]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v124(R) [immediate:102] v119(R) #18 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v114(R) = X64MovqDecompressTaggedPointer : MRI v124(R) [immediate:101]
gap () () 
          v123(R) = X64MovqDecompressTaggedSigned : MRI v124(R) [immediate:100]
gap () (v115(R) = v123(-);) 
          v115(1) = X64Sar32 v115(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #0 #17 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v73(R) = X64Movsd : MRI v114(R) [immediate:99]
gap () () 
          X64Test32 && deoptimize if equal v28 #1 #16 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v121(R) = X64Movl : MRI v28(R) [immediate:98]
gap () () 
          X64Cmp32 && branch if equal v122(R) v121 [immediate:96] [immediate:97]
gap () () 
          [constant:120] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v120(R) v121 #15 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:95]
gap () () 
          ArchJmp [immediate:94]
gap () () 
          v118(R) = X64MovqDecompressTaggedPointer : MRI v28(R) [immediate:93]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v118(R) [immediate:92] v119(R) #14 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v112(R) = X64MovqDecompressTaggedPointer : MRI v118(R) [immediate:91]
gap () () 
          v117(R) = X64MovqDecompressTaggedSigned : MRI v118(R) [immediate:90]
gap () (v113(R) = v117(-);) 
          v113(1) = X64Sar32 v113(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #0 #13 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v106(R) = X64Movsd : MRI v112(R) [immediate:89]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v106(R) v73 [immediate:87] [immediate:88]
gap () () 
          [constant:116] = ArchNop
gap () (v99 = v116(-);) 
          ArchJmp [immediate:86]
gap () (v99 = v110(-);) 
          ArchJmp [immediate:85]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #1 #12 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v71(R) = X64Movsd : MRI v114(R) [immediate:84]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #1 #11 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v109(R) = X64Movsd : MRI v112(R) [immediate:83]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v109(R) v71 [immediate:81] [immediate:82]
gap () () 
          [constant:111] = ArchNop
gap () (v98 = v111(-);) 
          ArchJmp [immediate:80]
gap () (v98 = v110(-);) 
          ArchJmp [immediate:79]
gap () () 
          [constant:87] = ArchNop
gap () () 
          v108(R) = AVXFloat64Sub v109(R) v71
gap () () 
          v100(R) = AVXFloat64Abs v108
gap () () 
          v105(R) = AVXFloat64Sub v106(R) v73
gap () () 
          v101(R) = AVXFloat64Abs v105
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v101(R) v100 [immediate:77] [immediate:78]
gap () () 
          v103(R) = AVXFloat64Mul v100(R) v87
gap () (v35 = v98(-); v33 = v41(-); v34 = v41(-); v32 = v99(-); v38 = v101(-); v77 = v103(-); v36 = v100(-);) 
          ArchJmp [immediate:76]
gap () () 
          v102(R) = AVXFloat64Mul v101(R) v87
gap () (v35 = v41(-); v33 = v98(-); v34 = v99(-); v32 = v41(-); v38 = v100(-); v77 = v102(-); v36 = v101(-);) 
          ArchJmp [immediate:75]
gap () () 
          [constant:96] = ArchNop
gap () () 
          [constant:97] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v96(R) [immediate:74] v97(R) #10 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v95(R) = X64MovqDecompressTaggedPointer : MRI v96(R) [immediate:73]
gap () () 
          v81(R) = X64Movl : MRI v95(R) [immediate:72]
gap () () 
          v93(R) = X64MovqDecompressAnyTagged : MRI v29(R) [immediate:71]
gap () () 
          X64Test32 && deoptimize if equal v93 #1 #9 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          [constant:94] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v93(R) [immediate:70] v94(R) #8 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v1(R) = X64MovqDecompressTaggedPointer : MRI v93(R) [immediate:69]
gap () () 
          v91(R) = X64MovqDecompressAnyTagged : MRI v1(R) [immediate:68]
gap () (v68(R) = v91(-);) 
          v68(1) = X64Sar32 v68(R) #1
gap () () 
          v79(R) = X64Test32 && set if equal v91 #1
gap () () 
          X64Cmp32 && branch if not equal v79 #0 [immediate:66] [immediate:67]
gap () () 
          v92(R) = X64MovqDecompressTaggedPointer : MRI v91(R) [immediate:65]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v92(R) [immediate:63] [immediate:64]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v92(R) [immediate:62] #67 #7 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:61]
gap () () 
          ArchJmp [immediate:60]
gap () () 
          v89(R) = X64Movsd : MRI v91(R) [immediate:59]
gap () (v88 = v89(-);) 
          ArchJmp [immediate:58]
gap () () 
          v90(R) = SSEInt32ToFloat64 v68
gap () (v88 = v90(-);) 
          ArchJmp [immediate:57]
gap () () 
          v85(R) = AVXFloat64Add v88(R) v36
gap () () 
          v82(R) = SSEFloat64Round v85(R)
gap () () 
          v86(R) = AVXFloat64Sub v82(R) v87
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v85(R) v86 [immediate:55] [immediate:56]
gap () () 
          [constant:84] = ArchNop
gap () () 
          v83(R) = AVXFloat64Sub v82(R) v84
gap () (v7 = v83(-);) 
          ArchJmp [immediate:54]
gap () (v7 = v82(-);) 
          ArchJmp [immediate:53]
gap () () 
          v22(R) = SSEFloat64ToInt32 v7
gap () () 
          [constant:80] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v80(R) v81 #6 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v78(R) = SSEInt32ToFloat64 v22
gap () () 
          X64Cmp32 && deoptimize if equal v79 #0 #5 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v78(R) v7 #4 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          X64Cmp32 && branch if signed less than v68(R) v22 [immediate:51] [immediate:52]
gap () () 
          ArchJmp [immediate:50]
gap () () 
          v69(R) = AVXFloat64Add v77(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v69(R) v36 [immediate:48] [immediate:49]
gap () (v59 = v69(-); v67 = v71(-); v66 = v73(-);) 
          ArchJmp [immediate:47]
gap () () 
          v76(R) = SSEInt32ToFloat64 v33
gap () () 
          v75(R) = SSEInt32ToFloat64 v32
gap () () 
          v70(R) = AVXFloat64Sub v69(R) v36
gap () () 
          v72(R) = AVXFloat64Add v76(R) v71
gap () () 
          v74(R) = AVXFloat64Add v75(R) v73
gap () (v59 = v70(-); v67 = v72(-); v66 = v74(-);) 
          ArchJmp [immediate:46]
gap () () 
          v46(R) = SSEInt32ToFloat64 v35
gap () () 
          v44(R) = SSEInt32ToFloat64 v34
gap () (v65(R) = v68(-);) 
          v65(1) = X64Add32 && deoptimize if overflow v65(R) #1 #3 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v58(R) = AVXFloat64Add v67(R) v46
gap () () 
          v60(R) = AVXFloat64Add v66(R) v44
gap () (v61 = v65(-);) 
          v61(1) = ArchNop v61
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:44] [immediate:45]
gap () () 
          [constant:64] = ArchNop
gap () () 
          [constant:63] = ArchNop
gap () ([rbx|R|w64] = v63(-); [rax|R|w64] = v41(-); [rsi|R|t] = v64(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:43] #-1 #2 v25(S) v26(S) v27(S) v28(S) v29(S) v60(S) v58(S) v32(S) v33(S) v34(S) v35(S) v36(S) v59(S) v38(S) v7(S) v61(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:42]
gap () () 
          ArchJmp [immediate:41]
gap () (v50 = v58(-); v51 = v59(-); v49 = v60(-); v48 = v61(-);) 
          ArchJmp [immediate:40]
gap () () 
          X64Cmp32 && branch if signed less than v48(R) v22 [immediate:38] [immediate:39]
gap () () 
          v53(R) = AVXFloat64Add v51(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v53(R) v36 [immediate:36] [immediate:37]
gap () (v47 = v50(-); v37 = v53(-); v45 = v49(-);) 
          ArchJmp [immediate:35]
gap () () 
          v57(R) = SSEInt32ToFloat64 v33
gap () () 
          v52(R) = AVXFloat64Add v57(R) v50
gap () () 
          v54(R) = AVXFloat64Sub v53(R) v36
gap () () 
          v56(R) = SSEInt32ToFloat64 v32
gap () () 
          v55(R) = AVXFloat64Add v56(R) v49
gap () (v47 = v52(-); v37 = v54(-); v45 = v55(-);) 
          ArchJmp [immediate:34]
gap () (v43(R) = v48(-);) 
          v43(1) = X64Add32 && deoptimize if overflow v43(R) #1 #1 v25(S) v26(-) v27(-) v28(-) v29(S) v49(-) v50(-) v32(-) v33(-) v34(-) v35(-) v36(-) v51(-) v38(-) v7(-) v48(-) v7(-)
gap () () 
          v31(R) = AVXFloat64Add v46(R) v47
gap () () 
          v30(R) = AVXFloat64Add v44(R) v45
gap () (v39 = v43(-);) 
          v39(1) = ArchNop v39
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:32] [immediate:33]
gap () () 
          [constant:42] = ArchNop
gap () () 
          [constant:40] = ArchNop
gap () ([rbx|R|w64] = v40(-); [rax|R|w64] = v41(-); [rsi|R|t] = v42(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:31] #-1 #0 v25(S) v26(S) v27(S) v28(S) v29(S) v30(S) v31(S) v32(S) v33(S) v34(S) v35(S) v36(S) v37(S) v38(S) v7(S) v39(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:30]
gap () () 
          ArchJmp [immediate:29]
gap () (v50 = v31(-); v51 = v37(-); v49 = v30(-); v48 = v39(-);) 
          ArchJmp [immediate:28]
gap () () 
          ArchJmp [immediate:27]
gap () () 
          X64Cmp32 && branch if equal v22 #0 [immediate:25] [immediate:26]
gap () () 
          ArchJmp [immediate:24]
gap () () 
          v23(R) = SSEFloat64ExtractHighWord32 v7
gap () () 
          X64Cmp32 && branch if signed less than v23 #0 [immediate:22] [immediate:23]
gap () () 
          ArchJmp [immediate:21]
gap () (v21(R) = v22(-);) 
          v21(1) = X64Add32 && branch if overflow v21(R) v22(R) [immediate:17] [immediate:18] [immediate:19] [immediate:20]
gap () (v20 = v21(-);) 
          v20(1) = ArchNop v20
gap () (v2 = v20(-);) 
          ArchJmp [immediate:16]
gap () () 
          ArchJmp [immediate:15]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          [constant:17] = ArchNop
gap () () 
          [constant:11] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () () 
          v13(R) = X64Movq : MR v11(R)
gap () () 
          [constant:19] = ArchNop
gap () () 
          v18(R) = X64Lea : MRI v13(R) [immediate:13]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v19(R) v18(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () ([rdx|R|w64] = v17(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:9] #-1 [rdx|R|w64]
gap (v16(-) = [rax|R|tp];) () 
          v14(R) = X64Lea : MRI v16(R) [immediate:8]
gap () (v10 = v14(-);) 
          ArchJmp [immediate:7]
gap () (v10 = v13(-);) 
          ArchJmp [immediate:6]
gap () () 
          v12(R) = X64Lea : MRI v10(R) [immediate:5]
gap () () 
          X64Movq : MR v11(R) v12(R)
gap () () 
          v9(R) = X64Lea : MRI v10(R) [immediate:4]
gap () (v6 = v9(-);) 
          v6(1) = ArchNop v6
gap () () 
          X64MovqCompressTagged : MRI v6(R) [immediate:3] v8(R)
gap () () 
          X64Movsd : MRI v6(R) [immediate:2] v7(R)
gap () (v2 = v6(-);) 
          ArchJmp [immediate:1]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1(R) [immediate:0] v2(R)
gap () () 
          [constant:0] = ArchNop
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
print modrm pairs
1, v7, v6
1, v8, v6
1, v9, v10
1, v12, v10
1, v14, v16
1, v18, v13
1, v2, v1
1, v109, v112
1, v89, v91
1, v94, v93
1, v81, v95
1, v97, v96
1, v93, v29
1, v92, v91
1, v123, v124
1, v106, v112
1, v91, v1
1, v112, v118
1, v95, v96
1, v124, v27
1, v118, v28
1, v71, v114
1, v121, v28
1, v126, v27
1, v119, v118
1, v119, v124
1, v73, v114
1, v117, v118
1, v114, v124
1, v1, v93
assign xmm0 to v73:0
assign 0 to v73:0
assign xmm1 to v106:0
assign 1 to v106:0
assign xmm2 to v71:0
assign 2 to v71:0
assign xmm4 to v109:0
assign 4 to v109:0
assign xmm3 to v108:0
assign 3 to v108:0
assign xmm4 to v100:0
assign 4 to v100:0
assign xmm5 to v107:0
assign 5 to v107:0
assign xmm1 to v105:0
assign 1 to v105:0
assign xmm3 to v101:0
assign 3 to v101:0
assign xmm5 to v104:0
assign 5 to v104:0
assign xmm1 to v87:1
assign 1 to v87:1
assign xmm5 to v103:0
assign 5 to v103:0
assign xmm1 to v87:2
assign 1 to v87:2
assign xmm5 to v102:0
assign 5 to v102:0
assign xmm3 to v36:0
assign 3 to v36:0
assign xmm4 to v38:0
assign 4 to v38:0
assign xmm5 to v77:0
assign 5 to v77:0
assign xmm6 to v89:0
assign 6 to v89:0
assign xmm6 to v90:0
assign 6 to v90:0
assign xmm6 to v88:0
assign 6 to v88:0
assign xmm6 to v85:0
assign 6 to v85:0
assign xmm7 to v82:0
assign 7 to v82:0
assign xmm1 to v86:0
assign 1 to v86:0
assign xmm1 to v84:1
assign 1 to v84:1
assign xmm7 to v83:0
assign 7 to v83:0
assign xmm7 to v7:0
assign 7 to v7:0
assign xmm1 to v78:0
assign 1 to v78:0
assign xmm1 to v69:0
assign 1 to v69:0
assign xmm5 to v76:0
assign 5 to v76:0
assign xmm6 to v75:0
assign 6 to v75:0
assign xmm1 to v70:0
assign 1 to v70:0
assign xmm2 to v72:0
assign 2 to v72:0
assign xmm0 to v74:0
assign 0 to v74:0
assign xmm1 to v59:0
assign 1 to v59:0
assign xmm0 to v66:0
assign 0 to v66:0
assign xmm2 to v67:0
assign 2 to v67:0
assign xmm5 to v46:0
assign 5 to v46:0
assign xmm6 to v44:0
assign 6 to v44:0
assign xmm2 to v58:0
assign 2 to v58:0
assign xmm0 to v60:0
assign 0 to v60:0
blocking v46 pick register xmm5
blocking v44 pick register xmm6
blocking v7 pick register xmm7
assign xmm0 to v60:2
assign 0 to v60:2
assign xmm2 to v58:2
assign 2 to v58:2
assign xmm6 to v44:3
assign 6 to v44:3
assign xmm5 to v46:3
assign 5 to v46:3
assign xmm1 to v59:2
assign 1 to v59:2
assign xmm4 to v38:2
assign 4 to v38:2
assign xmm3 to v36:2
assign 3 to v36:2
assign xmm7 to v7:3
assign 7 to v7:3
assign xmm5 to v46:2
assign 5 to v46:2
assign xmm6 to v44:2
assign 6 to v44:2
assign xmm0 to v49:0
assign 0 to v49:0
assign xmm2 to v50:0
assign 2 to v50:0
assign xmm1 to v51:0
assign 1 to v51:0
assign xmm8 to v53:0
assign 8 to v53:0
assign xmm9 to v57:0
assign 9 to v57:0
assign xmm9 to v52:0
assign 9 to v52:0
assign xmm8 to v54:0
assign 8 to v54:0
assign xmm10 to v56:0
assign 10 to v56:0
assign xmm10 to v55:0
assign 10 to v55:0
assign xmm8 to v37:0
assign 8 to v37:0
assign xmm9 to v45:0
assign 9 to v45:0
assign xmm10 to v47:0
assign 10 to v47:0
assign xmm2 to v31:0
assign 2 to v31:0
assign xmm0 to v30:0
assign 0 to v30:0
assign xmm0 to v30:2
assign 0 to v30:2
assign xmm2 to v31:2
assign 2 to v31:2
assign xmm8 to v37:2
assign 8 to v37:2
assign xmm6 to v44:5
assign 6 to v44:5
assign xmm5 to v46:5
assign 5 to v46:5
assign xmm7 to v7:5
assign 7 to v7:5
assign xmm3 to v36:4
assign 3 to v36:4
assign xmm4 to v38:4
assign 4 to v38:4
assign xmm7 to v7:7
assign 7 to v7:7
assign xmm7 to v7:2
assign 7 to v7:2
spill count : 17
--- Raw source ---
(From, To) {
      var x1 = From.V[0];
      var x2 = To.V[0];
      var y1 = From.V[1];
      var y2 = To.V[1];
      var dx = Math.abs(x2 - x1);
      var dy = Math.abs(y2 - y1);
      var x = x1;
      var y = y1;
      var IncX1, IncY1;
      var IncX2, IncY2;  
      var Den;
      var Num;
      var NumAdd;
      var NumPix;

      if (x2 >= x1) {  IncX1 = 1; IncX2 = 1;  }
      else { IncX1 = -1; IncX2 = -1; }
      if (y2 >= y1)  {  IncY1 = 1; IncY2 = 1; }
      else { IncY1 = -1; IncY2 = -1; }
      if (dx >= dy) {
        IncX1 = 0;
        IncY2 = 0;
        Den = dx;
        Num = dx / 2;
        NumAdd = dy;
        NumPix = dx;
      }
      else {
        IncX2 = 0;
        IncY1 = 0;
        Den = dy;
        Num = dy / 2;
        NumAdd = dx;
        NumPix = dy;
      }

      NumPix = Math.round(Q.LastPx + NumPix);

      var i = Q.LastPx;
      for (; i < NumPix; i++) {
        Num += NumAdd;
        if (Num >= Den) {
          Num -= Den;
          x += IncX1;
          y += IncY1;
        }
        x += IncX2;
        y += IncY2;
      }
      Q.LastPx = NumPix;
    }


--- Optimized code ---
optimization_id = 4
source_position = 647
kind = TURBOFAN
name = DrawLine
stack_slots = 22
compiler = turbofan
address = 0x19db00086761

Instructions (size = 1948)
0x19db000867a0     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db000867a7     7  483bd9         REX.W cmpq rbx,rcx
0x19db000867aa     a  7418           jz 0x19db000867c4  <+0x24>
0x19db000867ac     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db000867b6    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db000867c0    20  41ffd2         call r10
0x19db000867c3    23  cc             int3l
0x19db000867c4    24  8b59d0         movl rbx,[rcx-0x30]
0x19db000867c7    27  4903dd         REX.W addq rbx,r13
0x19db000867ca    2a  f6430701       testb [rbx+0x7],0x1
0x19db000867ce    2e  740d           jz 0x19db000867dd  <+0x3d>
0x19db000867d0    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db000867da    3a  41ffe2         jmp r10
0x19db000867dd    3d  55             push rbp
0x19db000867de    3e  4889e5         REX.W movq rbp,rsp
0x19db000867e1    41  56             push rsi
0x19db000867e2    42  57             push rdi
0x19db000867e3    43  50             push rax
0x19db000867e4    44  4881ec88000000 REX.W subq rsp,0x88
0x19db000867eb    4b  488975c0       REX.W movq [rbp-0x40],rsi
0x19db000867ef    4f  48897dc8       REX.W movq [rbp-0x38],rdi
0x19db000867f3    53  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db000867f7    57  0f86f4030000   jna 0x19db00086bf1  <+0x451>
0x19db000867fd    5d  488b4d18       REX.W movq rcx,[rbp+0x18]
0x19db00086801    61  f6c101         testb rcx,0x1
0x19db00086804    64  0f8495060000   jz 0x19db00086e9f  <+0x6ff>
0x19db0008680a    6a  8b79ff         movl rdi,[rcx-0x1]
0x19db0008680d    6d  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db00086817    77  4c3bd7         REX.W cmpq r10,rdi
0x19db0008681a    7a  7715           ja 0x19db00086831  <+0x91>
0x19db0008681c    7c  48ba0200000000000000 REX.W movq rdx,0x2
0x19db00086826    86  4c8b158bffffff REX.W movq r10,[rip+0xffffff8b]
0x19db0008682d    8d  41ffd2         call r10
0x19db00086830    90  cc             int3l
0x19db00086831    91  41b8a5db3008   movl r8,0x830dba5       ;; (compressed) object: 0x19db0830dba5 <Map(HOLEY_ELEMENTS)>
0x19db00086837    97  413bf8         cmpl rdi,r8
0x19db0008683a    9a  0f840f000000   jz 0x19db0008684f  <+0xaf>
0x19db00086840    a0  41b95ddd3008   movl r9,0x830dd5d       ;; (compressed) object: 0x19db0830dd5d <Map(HOLEY_ELEMENTS)>
0x19db00086846    a6  443bcf         cmpl r9,rdi
0x19db00086849    a9  0f8557060000   jnz 0x19db00086ea6  <+0x706>
0x19db0008684f    af  8b790b         movl rdi,[rcx+0xb]
0x19db00086852    b2  4903fd         REX.W addq rdi,r13
0x19db00086855    b5  41b9559f3008   movl r9,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008685b    bb  44394fff       cmpl [rdi-0x1],r9
0x19db0008685f    bf  0f8548060000   jnz 0x19db00086ead  <+0x70d>
0x19db00086865    c5  448b6707       movl r12,[rdi+0x7]
0x19db00086869    c9  4d03e5         REX.W addq r12,r13
0x19db0008686c    cc  8b7f0b         movl rdi,[rdi+0xb]
0x19db0008686f    cf  d1ff           sarl rdi, 1
0x19db00086871    d1  83ff00         cmpl rdi,0x0
0x19db00086874    d4  0f863a060000   jna 0x19db00086eb4  <+0x714>
0x19db0008687a    da  c4c17b10442407 vmovsd xmm0,[r12+0x7]
0x19db00086881    e1  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00086885    e5  41f6c301       testb r11,0x1
0x19db00086889    e9  0f842c060000   jz 0x19db00086ebb  <+0x71b>
0x19db0008688f    ef  458b73ff       movl r14,[r11-0x1]
0x19db00086893    f3  4c8b1575ffffff REX.W movq r10,[rip+0xffffff75]
0x19db0008689a    fa  4d3bd6         REX.W cmpq r10,r14
0x19db0008689d    fd  7712           ja 0x19db000868b1  <+0x111>
0x19db0008689f    ff  488b1578ffffff REX.W movq rdx,[rip+0xffffff78]
0x19db000868a6   106  4c8b150bffffff REX.W movq r10,[rip+0xffffff0b]
0x19db000868ad   10d  41ffd2         call r10
0x19db000868b0   110  cc             int3l
0x19db000868b1   111  453bc6         cmpl r8,r14
0x19db000868b4   114  0f840f000000   jz 0x19db000868c9  <+0x129>
0x19db000868ba   11a  41b85ddd3008   movl r8,0x830dd5d       ;; (compressed) object: 0x19db0830dd5d <Map(HOLEY_ELEMENTS)>
0x19db000868c0   120  453bc6         cmpl r8,r14
0x19db000868c3   123  0f85f9050000   jnz 0x19db00086ec2  <+0x722>
0x19db000868c9   129  458b430b       movl r8,[r11+0xb]
0x19db000868cd   12d  4d03c5         REX.W addq r8,r13
0x19db000868d0   130  453948ff       cmpl [r8-0x1],r9
0x19db000868d4   134  0f85ef050000   jnz 0x19db00086ec9  <+0x729>
0x19db000868da   13a  458b4807       movl r9,[r8+0x7]
0x19db000868de   13e  4d03cd         REX.W addq r9,r13
0x19db000868e1   141  458b400b       movl r8,[r8+0xb]
0x19db000868e5   145  41d1f8         sarl r8, 1
0x19db000868e8   148  4183f800       cmpl r8,0x0
0x19db000868ec   14c  0f86de050000   jna 0x19db00086ed0  <+0x730>
0x19db000868f2   152  c4c17b104907   vmovsd xmm1,[r9+0x7]
0x19db000868f8   158  c5f92ec8       vucomisd xmm1,xmm0
0x19db000868fc   15c  0f830b000000   jnc 0x19db0008690d  <+0x16d>
0x19db00086902   162  41beffffffff   movl r14,0xffffffff
0x19db00086908   168  e906000000     jmp 0x19db00086913  <+0x173>
0x19db0008690d   16d  41be01000000   movl r14,0x1
0x19db00086913   173  83ff01         cmpl rdi,0x1
0x19db00086916   176  0f86bb050000   jna 0x19db00086ed7  <+0x737>
0x19db0008691c   17c  c4c17b1054240f vmovsd xmm2,[r12+0xf]
0x19db00086923   183  4183f801       cmpl r8,0x1
0x19db00086927   187  0f86b1050000   jna 0x19db00086ede  <+0x73e>
0x19db0008692d   18d  c4c17b10610f   vmovsd xmm4,[r9+0xf]
0x19db00086933   193  c5f92ee2       vucomisd xmm4,xmm2
0x19db00086937   197  0f830a000000   jnc 0x19db00086947  <+0x1a7>
0x19db0008693d   19d  b8ffffffff     movl rax,0xffffffff
0x19db00086942   1a2  e905000000     jmp 0x19db0008694c  <+0x1ac>
0x19db00086947   1a7  b801000000     movl rax,0x1
0x19db0008694c   1ac  c5db5cda       vsubsd xmm3,xmm4,xmm2
0x19db00086950   1b0  c5d176ed       vpcmpeqd xmm5,xmm5,xmm5
0x19db00086954   1b4  c5d173d501     vpsrlq xmm5,xmm5,1
0x19db00086959   1b9  c5d154e3       vandpd xmm4,xmm5,xmm3
0x19db0008695d   1bd  c5f35cc8       vsubsd xmm1,xmm1,xmm0
0x19db00086961   1c1  c5d176ed       vpcmpeqd xmm5,xmm5,xmm5
0x19db00086965   1c5  c5d173d501     vpsrlq xmm5,xmm5,1
0x19db0008696a   1ca  c5d154d9       vandpd xmm3,xmm5,xmm1
0x19db0008696e   1ce  c5f92edc       vucomisd xmm3,xmm4
0x19db00086972   1d2  0f832f000000   jnc 0x19db000869a7  <+0x207>
0x19db00086978   1d8  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008697c   1dc  c5f173f137     vpsllq xmm1,xmm1,55
0x19db00086981   1e1  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db00086986   1e6  c5db59e9       vmulsd xmm5,xmm4,xmm1
0x19db0008698a   1ea  c57928fb       vmovapd xmm15,xmm3
0x19db0008698e   1ee  c5f928dc       vmovapd xmm3,xmm4
0x19db00086992   1f2  c4c17928e7     vmovapd xmm4,xmm15
0x19db00086997   1f7  4c8bc8         REX.W movq r9,rax
0x19db0008699a   1fa  33c0           xorl rax,rax
0x19db0008699c   1fc  4d8bc6         REX.W movq r8,r14
0x19db0008699f   1ff  4c8bf0         REX.W movq r14,rax
0x19db000869a2   202  e918000000     jmp 0x19db000869bf  <+0x21f>
0x19db000869a7   207  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db000869ab   20b  c5f173f137     vpsllq xmm1,xmm1,55
0x19db000869b0   210  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db000869b5   215  c5e359e9       vmulsd xmm5,xmm3,xmm1
0x19db000869b9   219  4533c0         xorl r8,r8
0x19db000869bc   21c  4d8bc8         REX.W movq r9,r8
0x19db000869bf   21f  ba39692e08     movl rdx,0x82e6939      ;; (compressed) object: 0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)>
0x19db000869c4   224  49bc09652e08db190000 REX.W movq r12,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db000869ce   22e  413954240b     cmpl [r12+0xb],rdx
0x19db000869d3   233  0f850c050000   jnz 0x19db00086ee5  <+0x745>
0x19db000869d9   239  458b642403     movl r12,[r12+0x3]
0x19db000869de   23e  4d03e5         REX.W addq r12,r13
0x19db000869e1   241  458b642463     movl r12,[r12+0x63]
0x19db000869e6   246  4c8b1522feffff REX.W movq r10,[rip+0xfffffe22]
0x19db000869ed   24d  4d39e2         REX.W cmpq r10,r12
0x19db000869f0   250  7712           ja 0x19db00086a04  <+0x264>
0x19db000869f2   252  488b1525feffff REX.W movq rdx,[rip+0xfffffe25]
0x19db000869f9   259  4c8b15b8fdffff REX.W movq r10,[rip+0xfffffdb8]
0x19db00086a00   260  41ffd2         call r10
0x19db00086a03   263  cc             int3l
0x19db00086a04   264  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db00086a08   268  418b570f       movl rdx,[r15+0xf]
0x19db00086a0c   26c  4903d5         REX.W addq rdx,r13
0x19db00086a0f   26f  f6c201         testb rdx,0x1
0x19db00086a12   272  0f84d4040000   jz 0x19db00086eec  <+0x74c>
0x19db00086a18   278  be6ddc3008     movl rsi,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00086a1d   27d  3972ff         cmpl [rdx-0x1],rsi
0x19db00086a20   280  0f85cd040000   jnz 0x19db00086ef3  <+0x753>
0x19db00086a26   286  8b5203         movl rdx,[rdx+0x3]
0x19db00086a29   289  4903d5         REX.W addq rdx,r13
0x19db00086a2c   28c  8b7217         movl rsi,[rdx+0x17]
0x19db00086a2f   28f  4903f5         REX.W addq rsi,r13
0x19db00086a32   292  488bde         REX.W movq rbx,rsi
0x19db00086a35   295  d1fb           sarl rbx, 1
0x19db00086a37   297  488955e0       REX.W movq [rbp-0x20],rdx
0x19db00086a3b   29b  40f6c601       testb rsi,0x1
0x19db00086a3f   29f  0f94c2         setzl dl
0x19db00086a42   2a2  0fb6d2         movzxbl rdx,rdx
0x19db00086a45   2a5  33ff           xorl rdi,rdi
0x19db00086a47   2a7  83fa00         cmpl rdx,0x0
0x19db00086a4a   2aa  0f852c000000   jnz 0x19db00086a7c  <+0x2dc>
0x19db00086a50   2b0  8b4eff         movl rcx,[rsi-0x1]
0x19db00086a53   2b3  4903cd         REX.W addq rcx,r13
0x19db00086a56   2b6  41398d30010000 cmpl [r13+0x130] (root (heap_number_map)),rcx
0x19db00086a5d   2bd  0f840b000000   jz 0x19db00086a6e  <+0x2ce>
0x19db00086a63   2c3  6683790743     cmpw [rcx+0x7],0x43
0x19db00086a68   2c8  0f858c040000   jnz 0x19db00086efa  <+0x75a>
0x19db00086a6e   2ce  c5fb107603     vmovsd xmm6,[rsi+0x3]
0x19db00086a73   2d3  488b4d18       REX.W movq rcx,[rbp+0x18]
0x19db00086a77   2d7  e904000000     jmp 0x19db00086a80  <+0x2e0>
0x19db00086a7c   2dc  c5832af3       vcvtlsi2sd xmm6,xmm15,rbx
0x19db00086a80   2e0  c5cb58f3       vaddsd xmm6,xmm6,xmm3
0x19db00086a84   2e4  c4e3410bfe0a   vroundsd xmm7,xmm7,xmm6,0xa
0x19db00086a8a   2ea  c5c35cc9       vsubsd xmm1,xmm7,xmm1
0x19db00086a8e   2ee  c5f92ef1       vucomisd xmm6,xmm1
0x19db00086a92   2f2  0f8312000000   jnc 0x19db00086aaa  <+0x30a>
0x19db00086a98   2f8  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db00086a9c   2fc  c5f173f136     vpsllq xmm1,xmm1,54
0x19db00086aa1   301  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db00086aa6   306  c5c35cf9       vsubsd xmm7,xmm7,xmm1
0x19db00086aaa   30a  c5fb2cf7       vcvttsd2si rsi,xmm7
0x19db00086aae   30e  b959682e08     movl rcx,0x82e6859      ;; (compressed) object: 0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)>
0x19db00086ab3   313  4439e1         cmpl rcx,r12
0x19db00086ab6   316  0f8545040000   jnz 0x19db00086f01  <+0x761>
0x19db00086abc   31c  c5832ace       vcvtlsi2sd xmm1,xmm15,rsi
0x19db00086ac0   320  83fa00         cmpl rdx,0x0
0x19db00086ac3   323  0f843f040000   jz 0x19db00086f08  <+0x768>
0x19db00086ac9   329  c5f92ecf       vucomisd xmm1,xmm7
0x19db00086acd   32d  0f8a3c040000   jpe 0x19db00086f0f  <+0x76f>
0x19db00086ad3   333  0f8536040000   jnz 0x19db00086f0f  <+0x76f>
0x19db00086ad9   339  3bde           cmpl rbx,rsi
0x19db00086adb   33b  0f8dbf000000   jge 0x19db00086ba0  <+0x400>
0x19db00086ae1   341  c5d358cc       vaddsd xmm1,xmm5,xmm4
0x19db00086ae5   345  c5f92ecb       vucomisd xmm1,xmm3
0x19db00086ae9   349  0f8215000000   jc 0x19db00086b04  <+0x364>
0x19db00086aef   34f  c5832ae8       vcvtlsi2sd xmm5,xmm15,rax
0x19db00086af3   353  c4c1032af0     vcvtlsi2sd xmm6,xmm15,r8
0x19db00086af8   358  c5f35ccb       vsubsd xmm1,xmm1,xmm3
0x19db00086afc   35c  c5d358d2       vaddsd xmm2,xmm5,xmm2
0x19db00086b00   360  c5cb58c0       vaddsd xmm0,xmm6,xmm0
0x19db00086b04   364  c4c1032ae9     vcvtlsi2sd xmm5,xmm15,r9
0x19db00086b09   369  c4c1032af6     vcvtlsi2sd xmm6,xmm15,r14
0x19db00086b0e   36e  83c301         addl rbx,0x1
0x19db00086b11   371  0f80ff030000   jo 0x19db00086f16  <+0x776>
0x19db00086b17   377  c5eb58d5       vaddsd xmm2,xmm2,xmm5
0x19db00086b1b   37b  c5fb58c6       vaddsd xmm0,xmm0,xmm6
0x19db00086b1f   37f  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00086b23   383  0f870f000000   ja 0x19db00086b38  <+0x398>
0x19db00086b29   389  e9fc000000     jmp 0x19db00086c2a  <+0x48a>
0x19db00086b2e   38e  6690           nop
0x19db00086b30   390  488bd9         REX.W movq rbx,rcx
0x19db00086b33   393  c4c17928c8     vmovapd xmm1,xmm8
0x19db00086b38   398  3bde           cmpl rbx,rsi
0x19db00086b3a   39a  0f8d60000000   jge 0x19db00086ba0  <+0x400>
0x19db00086b40   3a0  c57358c4       vaddsd xmm8,xmm1,xmm4
0x19db00086b44   3a4  c5792ec3       vucomisd xmm8,xmm3
0x19db00086b48   3a8  0f830d000000   jnc 0x19db00086b5b  <+0x3bb>
0x19db00086b4e   3ae  c57928d2       vmovapd xmm10,xmm2
0x19db00086b52   3b2  c57928c8       vmovapd xmm9,xmm0
0x19db00086b56   3b6  e924000000     jmp 0x19db00086b7f  <+0x3df>
0x19db00086b5b   3bb  c5032ac8       vcvtlsi2sd xmm9,xmm15,rax
0x19db00086b5f   3bf  c53358ca       vaddsd xmm9,xmm9,xmm2
0x19db00086b63   3c3  c53b5cc3       vsubsd xmm8,xmm8,xmm3
0x19db00086b67   3c7  c441032ad0     vcvtlsi2sd xmm10,xmm15,r8
0x19db00086b6c   3cc  c52b58d0       vaddsd xmm10,xmm10,xmm0
0x19db00086b70   3d0  c4417928fa     vmovapd xmm15,xmm10
0x19db00086b75   3d5  c4417928d1     vmovapd xmm10,xmm9
0x19db00086b7a   3da  c4417928cf     vmovapd xmm9,xmm15
0x19db00086b7f   3df  488bcb         REX.W movq rcx,rbx
0x19db00086b82   3e2  83c101         addl rcx,0x1
0x19db00086b85   3e5  0f8092030000   jo 0x19db00086f1d  <+0x77d>
0x19db00086b8b   3eb  c4c15358d2     vaddsd xmm2,xmm5,xmm10
0x19db00086b90   3f0  c4c14b58c1     vaddsd xmm0,xmm6,xmm9
0x19db00086b95   3f5  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00086b99   3f9  7795           ja 0x19db00086b30  <+0x390>
0x19db00086b9b   3fb  e95b010000     jmp 0x19db00086cfb  <+0x55b>
0x19db00086ba0   400  83fe00         cmpl rsi,0x0
0x19db00086ba3   403  0f841d020000   jz 0x19db00086dc6  <+0x626>
0x19db00086ba9   409  488bce         REX.W movq rcx,rsi
0x19db00086bac   40c  03f1           addl rsi,rcx
0x19db00086bae   40e  0f802b020000   jo 0x19db00086ddf  <+0x63f>
0x19db00086bb4   414  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db00086bb8   418  897117         movl [rcx+0x17],rsi
0x19db00086bbb   41b  48c7c70000fcff REX.W movq rdi,0xfffc0000
0x19db00086bc2   422  4823f9         REX.W andq rdi,rcx
0x19db00086bc5   425  f6470804       testb [rdi+0x8],0x4
0x19db00086bc9   429  0f857d020000   jnz 0x19db00086e4c  <+0x6ac>
0x19db00086bcf   42f  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db00086bd6   436  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db00086bda   43a  488be5         REX.W movq rsp,rbp
0x19db00086bdd   43d  5d             pop rbp
0x19db00086bde   43e  4883f902       REX.W cmpq rcx,0x2
0x19db00086be2   442  7f03           jg 0x19db00086be7  <+0x447>
0x19db00086be4   444  c21800         ret 0x18
0x19db00086be7   447  415a           pop r10
0x19db00086be9   449  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db00086bee   44e  4152           push r10
0x19db00086bf0   450  c3             retl
0x19db00086bf1   451  48b99000000000000000 REX.W movq rcx,0x90
0x19db00086bfb   45b  51             push rcx
0x19db00086bfc   45c  b801000000     movl rax,0x1
0x19db00086c01   461  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db00086c0b   46b  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00086c15   475  488bc8         REX.W movq rcx,rax
0x19db00086c18   478  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db00086c22   482  41ffd2         call r10
0x19db00086c25   485  e9d3fbffff     jmp 0x19db000867fd  <+0x5d>
0x19db00086c2a   48a  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db00086c2f   48f  488975d0       REX.W movq [rbp-0x30],rsi
0x19db00086c33   493  4c8945b8       REX.W movq [rbp-0x48],r8
0x19db00086c37   497  488945b0       REX.W movq [rbp-0x50],rax
0x19db00086c3b   49b  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db00086c3f   49f  4c894da0       REX.W movq [rbp-0x60],r9
0x19db00086c43   4a3  c5fb115d98     vmovsd [rbp-0x68],xmm3
0x19db00086c48   4a8  c5fb116588     vmovsd [rbp-0x78],xmm4
0x19db00086c4d   4ad  c5fb117580     vmovsd [rbp-0x80],xmm6
0x19db00086c52   4b2  c5fb11ad78ffffff vmovsd [rbp-0x88],xmm5
0x19db00086c5a   4ba  c5fb119570ffffff vmovsd [rbp-0x90],xmm2
0x19db00086c62   4c2  c5fb114d90     vmovsd [rbp-0x70],xmm1
0x19db00086c67   4c7  c5fb118568ffffff vmovsd [rbp-0x98],xmm0
0x19db00086c6f   4cf  48899d60ffffff REX.W movq [rbp-0xa0],rbx
0x19db00086c76   4d6  4c8be3         REX.W movq r12,rbx
0x19db00086c79   4d9  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db00086c83   4e3  488bc8         REX.W movq rcx,rax
0x19db00086c86   4e6  488bc7         REX.W movq rax,rdi
0x19db00086c89   4e9  488bd6         REX.W movq rdx,rsi
0x19db00086c8c   4ec  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00086c96   4f6  4c8b157dffffff REX.W movq r10,[rip+0xffffff7d]
0x19db00086c9d   4fd  41ffd2         call r10
0x19db00086ca0   500  c5fb107dd8     vmovsd xmm7,[rbp-0x28]
0x19db00086ca5   505  488b75d0       REX.W movq rsi,[rbp-0x30]
0x19db00086ca9   509  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00086cad   50d  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db00086cb1   511  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db00086cb5   515  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db00086cb9   519  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00086cbd   51d  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db00086cc1   521  c5fb105d98     vmovsd xmm3,[rbp-0x68]
0x19db00086cc6   526  c5fb106588     vmovsd xmm4,[rbp-0x78]
0x19db00086ccb   52b  33ff           xorl rdi,rdi
0x19db00086ccd   52d  c5fb107580     vmovsd xmm6,[rbp-0x80]
0x19db00086cd2   532  c5fb10ad78ffffff vmovsd xmm5,[rbp-0x88]
0x19db00086cda   53a  c5fb109570ffffff vmovsd xmm2,[rbp-0x90]
0x19db00086ce2   542  c5fb104d90     vmovsd xmm1,[rbp-0x70]
0x19db00086ce7   547  c5fb108568ffffff vmovsd xmm0,[rbp-0x98]
0x19db00086cef   54f  488b9d60ffffff REX.W movq rbx,[rbp-0xa0]
0x19db00086cf6   556  e93dfeffff     jmp 0x19db00086b38  <+0x398>
0x19db00086cfb   55b  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db00086d00   560  488975d0       REX.W movq [rbp-0x30],rsi
0x19db00086d04   564  c5fb118568ffffff vmovsd [rbp-0x98],xmm0
0x19db00086d0c   56c  c5fb119570ffffff vmovsd [rbp-0x90],xmm2
0x19db00086d14   574  4c8945b8       REX.W movq [rbp-0x48],r8
0x19db00086d18   578  488945b0       REX.W movq [rbp-0x50],rax
0x19db00086d1c   57c  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db00086d20   580  4c894da0       REX.W movq [rbp-0x60],r9
0x19db00086d24   584  c5fb115d98     vmovsd [rbp-0x68],xmm3
0x19db00086d29   589  c57b114590     vmovsd [rbp-0x70],xmm8
0x19db00086d2e   58e  c5fb116588     vmovsd [rbp-0x78],xmm4
0x19db00086d33   593  48898d60ffffff REX.W movq [rbp-0xa0],rcx
0x19db00086d3a   59a  c5fb117580     vmovsd [rbp-0x80],xmm6
0x19db00086d3f   59f  c5fb11ad78ffffff vmovsd [rbp-0x88],xmm5
0x19db00086d47   5a7  488b1d2dffffff REX.W movq rbx,[rip+0xffffff2d]
0x19db00086d4e   5ae  4c8be0         REX.W movq r12,rax
0x19db00086d51   5b1  488bc7         REX.W movq rax,rdi
0x19db00086d54   5b4  488bd6         REX.W movq rdx,rsi
0x19db00086d57   5b7  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00086d61   5c1  4c8b15b2feffff REX.W movq r10,[rip+0xfffffeb2]
0x19db00086d68   5c8  41ffd2         call r10
0x19db00086d6b   5cb  c5fb107dd8     vmovsd xmm7,[rbp-0x28]
0x19db00086d70   5d0  488b75d0       REX.W movq rsi,[rbp-0x30]
0x19db00086d74   5d4  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00086d78   5d8  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db00086d7c   5dc  c5fb108568ffffff vmovsd xmm0,[rbp-0x98]
0x19db00086d84   5e4  c5fb109570ffffff vmovsd xmm2,[rbp-0x90]
0x19db00086d8c   5ec  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db00086d90   5f0  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db00086d94   5f4  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00086d98   5f8  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db00086d9c   5fc  c5fb105d98     vmovsd xmm3,[rbp-0x68]
0x19db00086da1   601  c57b104590     vmovsd xmm8,[rbp-0x70]
0x19db00086da6   606  c5fb106588     vmovsd xmm4,[rbp-0x78]
0x19db00086dab   60b  488b8d60ffffff REX.W movq rcx,[rbp-0xa0]
0x19db00086db2   612  33ff           xorl rdi,rdi
0x19db00086db4   614  c5fb107580     vmovsd xmm6,[rbp-0x80]
0x19db00086db9   619  c5fb10ad78ffffff vmovsd xmm5,[rbp-0x88]
0x19db00086dc1   621  e96afdffff     jmp 0x19db00086b30  <+0x390>
0x19db00086dc6   626  c4e37916f901   vpextrd rcx,xmm7,0x1,
0x19db00086dcc   62c  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db00086dd1   631  83f900         cmpl rcx,0x0
0x19db00086dd4   634  0f8c0a000000   jl 0x19db00086de4  <+0x644>
0x19db00086dda   63a  e9cafdffff     jmp 0x19db00086ba9  <+0x409>
0x19db00086ddf   63f  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db00086de4   644  48b9f87d6d5555550000 REX.W movq rcx,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db00086dee   64e  488b39         REX.W movq rdi,[rcx]
0x19db00086df1   651  4c8d470c       REX.W leaq r8,[rdi+0xc]
0x19db00086df5   655  49b9007e6d5555550000 REX.W movq r9,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db00086dff   65f  4d3901         REX.W cmpq [r9],r8
0x19db00086e02   662  0f8716000000   ja 0x19db00086e1e  <+0x67e>
0x19db00086e08   668  ba0c000000     movl rdx,0xc
0x19db00086e0d   66d  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db00086e17   677  41ffd2         call r10
0x19db00086e1a   67a  488d78ff       REX.W leaq rdi,[rax-0x1]
0x19db00086e1e   67e  488d4f0c       REX.W leaq rcx,[rdi+0xc]
0x19db00086e22   682  4c8b05bdffffff REX.W movq r8,[rip+0xffffffbd]
0x19db00086e29   689  498908         REX.W movq [r8],rcx
0x19db00086e2c   68c  488d4f01       REX.W leaq rcx,[rdi+0x1]
0x19db00086e30   690  498bbd30010000 REX.W movq rdi,[r13+0x130] (root (heap_number_map))
0x19db00086e37   697  8979ff         movl [rcx-0x1],rdi
0x19db00086e3a   69a  c5fb107dd8     vmovsd xmm7,[rbp-0x28]
0x19db00086e3f   69f  c5fb117903     vmovsd [rcx+0x3],xmm7
0x19db00086e44   6a4  488bf1         REX.W movq rsi,rcx
0x19db00086e47   6a7  e968fdffff     jmp 0x19db00086bb4  <+0x414>
0x19db00086e4c   6ac  40f6c601       testb rsi,0x1
0x19db00086e50   6b0  0f8479fdffff   jz 0x19db00086bcf  <+0x42f>
0x19db00086e56   6b6  8bf6           movl rsi,rsi
0x19db00086e58   6b8  4903f5         REX.W addq rsi,r13
0x19db00086e5b   6bb  48c7c70000fcff REX.W movq rdi,0xfffc0000
0x19db00086e62   6c2  4823fe         REX.W andq rdi,rsi
0x19db00086e65   6c5  f6470802       testb [rdi+0x8],0x2
0x19db00086e69   6c9  0f8460fdffff   jz 0x19db00086bcf  <+0x42f>
0x19db00086e6f   6cf  4c8d4117       REX.W leaq r8,[rcx+0x17]
0x19db00086e73   6d3  50             push rax
0x19db00086e74   6d4  51             push rcx
0x19db00086e75   6d5  52             push rdx
0x19db00086e76   6d6  56             push rsi
0x19db00086e77   6d7  57             push rdi
0x19db00086e78   6d8  498bf0         REX.W movq rsi,r8
0x19db00086e7b   6db  488bf9         REX.W movq rdi,rcx
0x19db00086e7e   6de  33d2           xorl rdx,rdx
0x19db00086e80   6e0  488b0d97f9ffff REX.W movq rcx,[rip+0xfffff997]
0x19db00086e87   6e7  49bac065b8f5ff7f0000 REX.W movq r10,0x7ffff5b865c0  (RecordWrite)    ;; off heap target
0x19db00086e91   6f1  41ffd2         call r10
0x19db00086e94   6f4  5f             pop rdi
0x19db00086e95   6f5  5e             pop rsi
0x19db00086e96   6f6  5a             pop rdx
0x19db00086e97   6f7  59             pop rcx
0x19db00086e98   6f8  58             pop rax
0x19db00086e99   6f9  e931fdffff     jmp 0x19db00086bcf  <+0x42f>
0x19db00086e9e   6fe  90             nop
0x19db00086e9f   6ff  41ff95f8360000 call [r13+0x36f8]
0x19db00086ea6   706  41ff95f8360000 call [r13+0x36f8]
0x19db00086ead   70d  41ff95f8360000 call [r13+0x36f8]
0x19db00086eb4   714  41ff95f8360000 call [r13+0x36f8]
0x19db00086ebb   71b  41ff95f8360000 call [r13+0x36f8]
0x19db00086ec2   722  41ff95f8360000 call [r13+0x36f8]
0x19db00086ec9   729  41ff95f8360000 call [r13+0x36f8]
0x19db00086ed0   730  41ff95f8360000 call [r13+0x36f8]
0x19db00086ed7   737  41ff95f8360000 call [r13+0x36f8]
0x19db00086ede   73e  41ff95f8360000 call [r13+0x36f8]
0x19db00086ee5   745  41ff95f8360000 call [r13+0x36f8]
0x19db00086eec   74c  41ff95f8360000 call [r13+0x36f8]
0x19db00086ef3   753  41ff95f8360000 call [r13+0x36f8]
0x19db00086efa   75a  41ff95f8360000 call [r13+0x36f8]
0x19db00086f01   761  41ff95f8360000 call [r13+0x36f8]
0x19db00086f08   768  41ff95f8360000 call [r13+0x36f8]
0x19db00086f0f   76f  41ff95f8360000 call [r13+0x36f8]
0x19db00086f16   776  41ff95f8360000 call [r13+0x36f8]
0x19db00086f1d   77d  41ff95f8360000 call [r13+0x36f8]
0x19db00086f24   784  41ff9510370000 call [r13+0x3710]
0x19db00086f2b   78b  41ff9510370000 call [r13+0x3710]
0x19db00086f32   792  41ff9510370000 call [r13+0x3710]
0x19db00086f39   799  0f1f00         nop

Source positions:
 pc offset  position
       45c       647

Inlined functions (count = 0)

Deoptimization Input Data (deopt points = 22)
 index  bytecode-offset    pc
     0                0    NA 
     1                0    NA 
     2                0    NA 
     3                0    NA 
     4                0    NA 
     5                0    NA 
     6                0    NA 
     7                0    NA 
     8                0    NA 
     9                0    NA 
    10                0    NA 
    11                0    NA 
    12                0    NA 
    13                0    NA 
    14                0    NA 
    15                0    NA 
    16                0    NA 
    17                0    NA 
    18              260    NA 
    19               -1   485 
    20              338   500 
    21              338   5cb 

Safepoints (size = 68)
0x19db00086c25     485   784  0000000000001100000000 (sp -> fp)      19
0x19db00086ca0     500   78b  0000000000001100100000 (sp -> fp)      20
0x19db00086d6b     5cb   792  0000000000001100100000 (sp -> fp)      21
0x19db00086e1a     67a    NA  0000000000000000100000 (sp -> fp)  <none>

RelocInfo (size = 56)
0x19db000867b8  off heap target
0x19db000867d2  off heap target
0x19db00086833  compressed embedded object  (0x19db0830dba5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00086842  compressed embedded object  (0x19db0830dd5d <Map(HOLEY_ELEMENTS)> compressed)
0x19db00086857  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db000868bc  compressed embedded object  (0x19db0830dd5d <Map(HOLEY_ELEMENTS)> compressed)
0x19db000869c0  compressed embedded object  (0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)> compressed)
0x19db000869c6  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db00086a19  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00086aaf  compressed embedded object  (0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)> compressed)
0x19db00086c03  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db00086c0d  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00086c1a  off heap target
0x19db00086c7b  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db00086c8e  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00086d59  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00086de6  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db00086df7  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db00086e0f  off heap target
0x19db00086e89  off heap target

--- End code ---
assign 0 to v-1:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
assign 7 to v-8:0
assign 6 to v-7:0
------------------------
function: MMulti
add v218->v213
add v214->v216
add v210->v212
add v211->v212
add v48->v201
add v193->v201
add v193->v201
add v208->v210
add v209->v210
add v48->v200
add v193->v200
add v193->v200
add v206->v208
add v207->v208
add v48->v199
add v193->v199
add v193->v199
add v204->v206
add v205->v206
add v48->v198
add v193->v198
add v193->v198
add v195->v204
add v203->v204
add v202->v192
add v201->v192
add v200->v192
add v199->v192
add v198->v192
add v197->v195
add v194->v195
add v181->v0
add v193->v0
add v192->v0
add v189->v0
add v191->v0
adding pairs 2, v11:0x7fffd4059cc8, v189:0x7fffd4004f60
add v181->v4
add v156->v4
add v188->v4
adding pairs 2, v11:0x7fffd4059cc8, v156:0x7fffd4005378
add v53->v183
add v48->v183
add v164->v183
add v182->v183
add v124->v164
add v181->v5
add v147->v5
add v180->v5
add v176->v147
add v53->v176
add v48->v176
add v173->v176
add v175->v176
add v123->v173
add v126->v164
add v169->v147
add v53->v169
add v48->v169
add v166->v169
add v168->v169
add v125->v166
add v122->v164
add v160->v147
add v53->v160
add v48->v160
add v157->v160
add v159->v160
add v121->v157
adding pairs 2, v11:0x7fffd4059cc8, v156:0x7fffd4005378
add v53->v152
add v48->v152
add v149->v152
add v151->v152
add v118->v149
add v143->v147
add v53->v143
add v48->v143
add v140->v143
add v142->v143
add v117->v140
add v53->v127
add v48->v127
add v129->v127
add v136->v127
add v134->v129
add v135->v128
add v112->v110
add v103->v0
add v105->v0
adding pairs 2, v11:0x7fffd4059cc8, v103:0x7fffd40563d0
add v70->v4
add v102->v4
adding pairs 2, v11:0x7fffd4059cc8, v70:0x7fffd4056650
add v53->v97
add v48->v97
add v79->v97
add v96->v97
add v31->v79
add v61->v5
add v95->v5
add v91->v61
add v53->v91
add v48->v91
add v88->v91
add v90->v91
adding pairs 3, v37:0x7fffd4059a98, v88:0x7fffd4057130
add v33->v79
add v84->v61
add v53->v84
add v48->v84
add v81->v84
add v83->v84
adding pairs 3, v37:0x7fffd4059a98, v81:0x7fffd40576a0
add v29->v79
add v75->v61
add v53->v75
add v48->v75
add v72->v75
add v74->v75
adding pairs 3, v37:0x7fffd4059a98, v72:0x7fffd4057c10
adding pairs 2, v11:0x7fffd4059cc8, v70:0x7fffd4056650
add v53->v66
add v48->v66
add v63->v66
add v65->v66
add v25->v63
add v57->v61
add v53->v57
add v48->v57
add v54->v57
add v56->v57
adding pairs 3, v37:0x7fffd4059a98, v54:0x7fffd40585b0
add v53->v34
add v48->v34
add v39->v34
add v47->v34
add v46->v39
add v45->v38
add v13->v37
add v36->v34
adding pairs 3, v37:0x7fffd4059a98, v16:0x7fffd4059980
add v7->v11
gap () () 
          [stack:-1|t] = ArchNop
gap (v3(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v4(-) = [stack:-2|t];) () 
          [stack:-3|t] = ArchNop
gap (v5(-) = [stack:-3|t];) () 
          [rsi|R|t] = ArchNop
gap (v6(-) = [rsi|R|t];) () 
          [rdi|R|t] = ArchNop
gap (v2(-) = [rdi|R|t];) () 
          [constant:131] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:366] [immediate:367]
gap () () 
          [constant:223] = ArchNop
gap () () 
          [constant:224] = ArchNop
gap () () 
          [constant:222] = ArchNop
gap () () 
          v221(R) = ArchStackCheckOffset
gap () () 
          X64Push v221(-)
gap () ([rbx|R|w64] = v222(-); [rax|R|w64] = v223(-); [rsi|R|t] = v224(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:365] #-1 #66 v2(S) v3(S) v4(S) v5(S) v6(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:364]
gap () () 
          ArchJmp [immediate:363]
gap () () 
          [constant:196] = ArchNop
gap () () 
          v213(R) = X64Movq : MR v196(R)
gap () () 
          [constant:219] = ArchNop
gap () () 
          [constant:217] = ArchNop
gap () () 
          v218(R) = X64Lea : MRI v213(R) [immediate:362]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v219(R) v218(R) [immediate:360] [immediate:361]
gap () () 
          ArchJmp [immediate:359]
gap () ([rdx|R|w64] = v217(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:358] #-1 [rdx|R|w64]
gap (v216(-) = [rax|R|tp];) () 
          v214(R) = X64Lea : MRI v216(R) [immediate:357]
gap () (v212 = v214(-);) 
          ArchJmp [immediate:356]
gap () (v212 = v213(-);) 
          ArchJmp [immediate:355]
gap () () 
          v210(R) = X64Lea : MRI v212(R) [immediate:354]
gap () () 
          X64Movq : MR v196(R) v210(R)
gap () () 
          v211(R) = X64Lea : MRI v212(R) [immediate:353]
gap () (v201 = v211(-);) 
          v201(1) = ArchNop v201
gap () () 
          [constant:48] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v201(R) [immediate:352] v48(R)
gap () () 
          [constant:193] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v201(R) [immediate:351] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v201(R) [immediate:350] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v201(R) [immediate:348] [immediate:349]
gap () () 
          v208(R) = X64Lea : MRI v210(R) [immediate:347]
gap () () 
          X64Movq : MR v196(R) v208(R)
gap () () 
          v209(R) = X64Lea : MRI v210(R) [immediate:346]
gap () (v200 = v209(-);) 
          v200(1) = ArchNop v200
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:345] v48(R)
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:344] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:343] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:341] [immediate:342]
gap () () 
          v206(R) = X64Lea : MRI v208(R) [immediate:340]
gap () () 
          X64Movq : MR v196(R) v206(R)
gap () () 
          v207(R) = X64Lea : MRI v208(R) [immediate:339]
gap () (v199 = v207(-);) 
          v199(1) = ArchNop v199
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:338] v48(R)
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:337] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:336] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:334] [immediate:335]
gap () () 
          v204(R) = X64Lea : MRI v206(R) [immediate:333]
gap () () 
          X64Movq : MR v196(R) v204(R)
gap () () 
          v205(R) = X64Lea : MRI v206(R) [immediate:332]
gap () (v198 = v205(-);) 
          v198(1) = ArchNop v198
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:331] v48(R)
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:330] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:329] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:327] [immediate:328]
gap () () 
          v195(R) = X64Lea : MRI v204(R) [immediate:326]
gap () () 
          X64Movq : MR v196(R) v195(R)
gap () () 
          v203(R) = X64Lea : MRI v204(R) [immediate:325]
gap () (v192 = v203(-);) 
          v192(1) = ArchNop v192
gap () () 
          [constant:202] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v192(R) [immediate:324] v202(R)
gap () () 
          X64MovqCompressTagged : MRI v192(R) [immediate:322] [immediate:323]
gap () () 
          X64MovqCompressTagged : MRI v192(R) [immediate:321] v201(R)
gap () () 
          X64MovqCompressTagged : MRI v192(R) [immediate:320] v200(R)
gap () () 
          X64MovqCompressTagged : MRI v192(R) [immediate:319] v199(R)
gap () () 
          X64MovqCompressTagged : MRI v192(R) [immediate:318] v198(R)
gap () () 
          v197(R) = X64Lea : MRI v195(R) [immediate:317]
gap () () 
          X64Movq : MR v196(R) v197(R)
gap () () 
          v194(R) = X64Lea : MRI v195(R) [immediate:316]
gap () (v0 = v194(-);) 
          v0(1) = ArchNop v0
gap () () 
          [constant:9] = ArchNop
gap () () 
          [constant:181] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:315] v181(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:314] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:313] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:311] [immediate:312]
gap () (v11 = v9(-);) 
          ArchJmp [immediate:310]
gap () () 
          X64Cmp32 && branch if unsigned less than v11 #4 [immediate:308] [immediate:309]
gap () () 
          v189(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:307]
gap () () 
          v191(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:306]
gap () () 
          [constant:106] = ArchNop
gap () (v190(R) = v191(-);) 
          v190(1) = X64Sar32 v190(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v11(R) v190 #65 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:305]
gap () () 
          v127(R) = X64MovqDecompressAnyTagged : MR4I v189(R) v11(R) [immediate:304]
gap () () 
          [constant:51] = ArchNop
gap () () 
          [constant:53] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v4 #1 #64 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:303]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v4(R) [immediate:301] v181(R) #63 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:302]
gap () () 
          v156(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:300]
gap () () 
          v188(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:299]
gap () (v187(R) = v188(-);) 
          v187(1) = X64Sar32 v187(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v11(R) v187 #62 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:298]
gap () () 
          v183(R) = X64MovqDecompressAnyTagged : MR4I v156(R) v11(R) [immediate:297]
gap () () 
          X64Test32 && deoptimize if equal v183 #1 #61 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:296]
gap () () 
          X64Cmp32 : MRI && branch if equal v183(R) [immediate:293] v53(R) [immediate:294] [immediate:295]
gap () () 
          ArchJmp [immediate:292]
gap () () 
          [constant:186] = ArchNop
gap () () 
          [constant:185] = ArchNop
gap () () 
          X64Push v183(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v185(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v186(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:291] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:290]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v183(R) [immediate:287] v48(R) #60 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:288] [immediate:289]
gap () () 
          v164(R) = X64MovqDecompressTaggedPointer : MRI v183(R) [immediate:286]
gap () () 
          v182(R) = X64MovqDecompressTaggedSigned : MRI v183(R) [immediate:285]
gap () (v165(R) = v182(-);) 
          v165(1) = X64Sar32 v165(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v165 #0 #59 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:283] [immediate:284]
gap () () 
          v124(R) = X64Movsd : MRI v164(R) [immediate:282]
gap () () 
          X64Test32 && deoptimize if equal v5 #1 #58 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:280] [immediate:281]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v5(R) [immediate:277] v181(R) #57 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:278] [immediate:279]
gap () () 
          v147(R) = X64MovqDecompressTaggedPointer : MRI v5(R) [immediate:276]
gap () () 
          v180(R) = X64MovqDecompressTaggedSigned : MRI v5(R) [immediate:275]
gap () (v148(R) = v180(-);) 
          v148(1) = X64Sar32 v148(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v148 #0 #56 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:273] [immediate:274]
gap () () 
          v176(R) = X64MovqDecompressAnyTagged : MRI v147(R) [immediate:272]
gap () () 
          X64Test32 && deoptimize if equal v176 #1 #55 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:270] [immediate:271]
gap () () 
          X64Cmp32 : MRI && branch if equal v176(R) [immediate:267] v53(R) [immediate:268] [immediate:269]
gap () () 
          ArchJmp [immediate:266]
gap () () 
          [constant:179] = ArchNop
gap () () 
          [constant:178] = ArchNop
gap () () 
          X64Push v176(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v178(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v179(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:265] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:264]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v176(R) [immediate:261] v48(R) #54 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:262] [immediate:263]
gap () () 
          v173(R) = X64MovqDecompressTaggedPointer : MRI v176(R) [immediate:260]
gap () () 
          v175(R) = X64MovqDecompressTaggedSigned : MRI v176(R) [immediate:259]
gap () (v174(R) = v175(-);) 
          v174(1) = X64Sar32 v174(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v174 #0 #53 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:257] [immediate:258]
gap () () 
          v123(R) = X64Movsd : MRI v173(R) [immediate:256]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v165 #1 #52 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:254] [immediate:255]
gap () () 
          v126(R) = X64Movsd : MRI v164(R) [immediate:253]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v148 #1 #51 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:251] [immediate:252]
gap () () 
          v169(R) = X64MovqDecompressAnyTagged : MRI v147(R) [immediate:250]
gap () () 
          X64Test32 && deoptimize if equal v169 #1 #50 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:248] [immediate:249]
gap () () 
          X64Cmp32 : MRI && branch if equal v169(R) [immediate:245] v53(R) [immediate:246] [immediate:247]
gap () () 
          ArchJmp [immediate:244]
gap () () 
          [constant:172] = ArchNop
gap () () 
          [constant:171] = ArchNop
gap () () 
          X64Push v169(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v171(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v172(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:243] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:242]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v169(R) [immediate:239] v48(R) #49 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:240] [immediate:241]
gap () () 
          v166(R) = X64MovqDecompressTaggedPointer : MRI v169(R) [immediate:238]
gap () () 
          v168(R) = X64MovqDecompressTaggedSigned : MRI v169(R) [immediate:237]
gap () (v167(R) = v168(-);) 
          v167(1) = X64Sar32 v167(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v167 #0 #48 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:235] [immediate:236]
gap () () 
          v125(R) = X64Movsd : MRI v166(R) [immediate:234]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v165 #2 #47 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:232] [immediate:233]
gap () () 
          v122(R) = X64Movsd : MRI v164(R) [immediate:231]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v148 #2 #46 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:229] [immediate:230]
gap () () 
          v160(R) = X64MovqDecompressAnyTagged : MRI v147(R) [immediate:228]
gap () () 
          X64Test32 && deoptimize if equal v160 #1 #45 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:226] [immediate:227]
gap () () 
          X64Cmp32 : MRI && branch if equal v160(R) [immediate:223] v53(R) [immediate:224] [immediate:225]
gap () () 
          ArchJmp [immediate:222]
gap () () 
          [constant:163] = ArchNop
gap () () 
          [constant:162] = ArchNop
gap () () 
          X64Push v160(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v162(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v163(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:221] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:220]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v160(R) [immediate:217] v48(R) #44 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:218] [immediate:219]
gap () () 
          v157(R) = X64MovqDecompressTaggedPointer : MRI v160(R) [immediate:216]
gap () () 
          v159(R) = X64MovqDecompressTaggedSigned : MRI v160(R) [immediate:215]
gap () (v158(R) = v159(-);) 
          v158(1) = X64Sar32 v158(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v158 #0 #43 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:213] [immediate:214]
gap () () 
          v121(R) = X64Movsd : MRI v157(R) [immediate:212]
gap () () 
          v152(R) = X64MovqDecompressAnyTagged : MR4I v156(R) v11(R) [immediate:211]
gap () () 
          X64Test32 && deoptimize if equal v152 #1 #42 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:209] [immediate:210]
gap () () 
          X64Cmp32 : MRI && branch if equal v152(R) [immediate:206] v53(R) [immediate:207] [immediate:208]
gap () () 
          ArchJmp [immediate:205]
gap () () 
          [constant:155] = ArchNop
gap () () 
          [constant:154] = ArchNop
gap () () 
          X64Push v152(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v154(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v155(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:204] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:203]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v152(R) [immediate:200] v48(R) #41 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:201] [immediate:202]
gap () () 
          v149(R) = X64MovqDecompressTaggedPointer : MRI v152(R) [immediate:199]
gap () () 
          v151(R) = X64MovqDecompressTaggedSigned : MRI v152(R) [immediate:198]
gap () (v150(R) = v151(-);) 
          v150(1) = X64Sar32 v150(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v150 #3 #40 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:196] [immediate:197]
gap () () 
          v118(R) = X64Movsd : MRI v149(R) [immediate:195]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v148 #3 #39 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:193] [immediate:194]
gap () () 
          v143(R) = X64MovqDecompressAnyTagged : MRI v147(R) [immediate:192]
gap () () 
          X64Test32 && deoptimize if equal v143 #1 #38 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:190] [immediate:191]
gap () () 
          X64Cmp32 : MRI && branch if equal v143(R) [immediate:187] v53(R) [immediate:188] [immediate:189]
gap () () 
          ArchJmp [immediate:186]
gap () () 
          [constant:146] = ArchNop
gap () () 
          [constant:145] = ArchNop
gap () () 
          X64Push v143(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v145(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v146(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:185] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:184]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v143(R) [immediate:181] v48(R) #37 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:182] [immediate:183]
gap () () 
          v140(R) = X64MovqDecompressTaggedPointer : MRI v143(R) [immediate:180]
gap () () 
          v142(R) = X64MovqDecompressTaggedSigned : MRI v143(R) [immediate:179]
gap () (v141(R) = v142(-);) 
          v141(1) = X64Sar32 v141(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v141 #0 #36 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:177] [immediate:178]
gap () () 
          v117(R) = X64Movsd : MRI v140(R) [immediate:176]
gap () () 
          X64Test32 && deoptimize if equal v127 #1 #35 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:174] [immediate:175]
gap () () 
          X64Cmp32 : MRI && branch if equal v127(R) [immediate:171] v53(R) [immediate:172] [immediate:173]
gap () () 
          ArchJmp [immediate:170]
gap () () 
          [constant:139] = ArchNop
gap () () 
          [constant:138] = ArchNop
gap () () 
          X64Push v127(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v138(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v139(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:169] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:168]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v127(R) [immediate:165] v48(R) #34 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:166] [immediate:167]
gap () () 
          v129(R) = X64MovqDecompressTaggedPointer : MRI v127(R) [immediate:164]
gap () () 
          v136(R) = X64MovqDecompressTaggedSigned : MRI v127(R) [immediate:163]
gap () () 
          v134(R) = X64MovqDecompressTaggedSigned : MRI v129(R) [immediate:162]
gap () (v128(R) = v136(-);) 
          v128(1) = X64Sar32 v128(R) #1
gap () () 
          v135(R) = X64Lea32 : MRI v128(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v135 #0 [immediate:160] [immediate:161]
gap () (v133(R) = v134(-);) 
          v133(1) = X64Sar32 v133(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v133 #0 [immediate:158] [immediate:159]
gap () () 
          [constant:132] = ArchNop
gap () ([rax|R|t] = v127(-); [rbx|R|w64] = v131(-); [rsi|R|w64] = v132(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:157] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v130(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v130 #1 #33 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:155] [immediate:156]
gap () (v110 = v130(-);) 
          ArchJmp [immediate:154]
gap () (v110 = v129(-);) 
          ArchJmp [immediate:153]
gap () () 
          X64Cmp32 && branch if unsigned greater than v128 #0 [immediate:151] [immediate:152]
gap () () 
          X64MovqCompressTagged : MRI v127(R) [immediate:149] [immediate:150]
gap () () 
          ArchJmp [immediate:148]
gap () () 
          ArchJmp [immediate:147]
gap () () 
          v119(R) = AVXFloat64Mul v125(R) v126
gap () () 
          v120(R) = AVXFloat64Mul v123(R) v124
gap () () 
          v115(R) = AVXFloat64Mul v121(R) v122
gap () () 
          v116(R) = AVXFloat64Add v119(R) v120
gap () () 
          v113(R) = AVXFloat64Mul v117(R) v118
gap () () 
          v114(R) = AVXFloat64Add v115(R) v116
gap () () 
          v112(R) = AVXFloat64Add v113(R) v114
gap () () 
          X64Movsd : MRI v110(R) [immediate:146] v112(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:144] [immediate:145]
gap () () 
          [constant:109] = ArchNop
gap () () 
          [constant:108] = ArchNop
gap () ([rbx|R|w64] = v108(-); [rax|R|w64] = v9(-); [rsi|R|t] = v109(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:143] #-1 #32 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) v11(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:142]
gap () () 
          ArchJmp [immediate:141]
gap () (v37 = v106(-);) 
          ArchJmp [immediate:140]
gap () () 
          X64Cmp32 && branch if unsigned less than v37 #4 [immediate:138] [immediate:139]
gap () () 
          v103(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:137]
gap () () 
          v105(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:136]
gap () (v104(R) = v105(-);) 
          v104(1) = X64Sar32 v104(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v11(R) v104 #31 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:135]
gap () () 
          v34(R) = X64MovqDecompressAnyTagged : MR4I v103(R) v11(R) [immediate:134]
gap () () 
          v70(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:133]
gap () () 
          v102(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:132]
gap () (v101(R) = v102(-);) 
          v101(1) = X64Sar32 v101(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v11(R) v101 #30 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:131]
gap () () 
          v97(R) = X64MovqDecompressAnyTagged : MR4I v70(R) v11(R) [immediate:130]
gap () () 
          X64Test32 && deoptimize if equal v97 #1 #29 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:129]
gap () () 
          X64Cmp32 : MRI && branch if equal v97(R) [immediate:126] v53(R) [immediate:127] [immediate:128]
gap () () 
          ArchJmp [immediate:125]
gap () () 
          [constant:100] = ArchNop
gap () () 
          [constant:99] = ArchNop
gap () () 
          X64Push v97(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v99(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v100(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:124] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:123]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v97(R) [immediate:121] v48(R) #28 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:122]
gap () () 
          v79(R) = X64MovqDecompressTaggedPointer : MRI v97(R) [immediate:120]
gap () () 
          v96(R) = X64MovqDecompressTaggedSigned : MRI v97(R) [immediate:119]
gap () (v80(R) = v96(-);) 
          v80(1) = X64Sar32 v80(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #0 #27 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:118]
gap () () 
          v31(R) = X64Movsd : MRI v79(R) [immediate:117]
gap () () 
          v61(R) = X64MovqDecompressTaggedPointer : MRI v5(R) [immediate:116]
gap () () 
          v95(R) = X64MovqDecompressTaggedSigned : MRI v5(R) [immediate:115]
gap () (v62(R) = v95(-);) 
          v62(1) = X64Sar32 v62(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #0 #26 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:114]
gap () () 
          v91(R) = X64MovqDecompressAnyTagged : MRI v61(R) [immediate:113]
gap () () 
          X64Test32 && deoptimize if equal v91 #1 #25 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:112]
gap () () 
          X64Cmp32 : MRI && branch if equal v91(R) [immediate:109] v53(R) [immediate:110] [immediate:111]
gap () () 
          ArchJmp [immediate:108]
gap () () 
          [constant:94] = ArchNop
gap () () 
          [constant:93] = ArchNop
gap () () 
          X64Push v91(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v93(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v94(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:107] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:106]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v91(R) [immediate:104] v48(R) #24 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:105]
gap () () 
          v88(R) = X64MovqDecompressTaggedPointer : MRI v91(R) [immediate:103]
gap () () 
          v90(R) = X64MovqDecompressTaggedSigned : MRI v91(R) [immediate:102]
gap () (v89(R) = v90(-);) 
          v89(1) = X64Sar32 v89(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v37(R) v89 #23 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:101]
gap () () 
          v30(R) = X64Movsd : MR8I v88(R) v37(R) [immediate:100]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #1 #22 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:99]
gap () () 
          v33(R) = X64Movsd : MRI v79(R) [immediate:98]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #1 #21 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:97]
gap () () 
          v84(R) = X64MovqDecompressAnyTagged : MRI v61(R) [immediate:96]
gap () () 
          X64Test32 && deoptimize if equal v84 #1 #20 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:95]
gap () () 
          X64Cmp32 : MRI && branch if equal v84(R) [immediate:92] v53(R) [immediate:93] [immediate:94]
gap () () 
          ArchJmp [immediate:91]
gap () () 
          [constant:87] = ArchNop
gap () () 
          [constant:86] = ArchNop
gap () () 
          X64Push v84(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v86(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v87(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:90] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:89]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v84(R) [immediate:87] v48(R) #19 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:88]
gap () () 
          v81(R) = X64MovqDecompressTaggedPointer : MRI v84(R) [immediate:86]
gap () () 
          v83(R) = X64MovqDecompressTaggedSigned : MRI v84(R) [immediate:85]
gap () (v82(R) = v83(-);) 
          v82(1) = X64Sar32 v82(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v37(R) v82 #18 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:84]
gap () () 
          v32(R) = X64Movsd : MR8I v81(R) v37(R) [immediate:83]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #2 #17 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:82]
gap () () 
          v29(R) = X64Movsd : MRI v79(R) [immediate:81]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #2 #16 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:80]
gap () () 
          v75(R) = X64MovqDecompressAnyTagged : MRI v61(R) [immediate:79]
gap () () 
          X64Test32 && deoptimize if equal v75 #1 #15 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:78]
gap () () 
          X64Cmp32 : MRI && branch if equal v75(R) [immediate:75] v53(R) [immediate:76] [immediate:77]
gap () () 
          ArchJmp [immediate:74]
gap () () 
          [constant:78] = ArchNop
gap () () 
          [constant:77] = ArchNop
gap () () 
          X64Push v75(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v77(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v78(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:73] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:72]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v75(R) [immediate:70] v48(R) #14 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:71]
gap () () 
          v72(R) = X64MovqDecompressTaggedPointer : MRI v75(R) [immediate:69]
gap () () 
          v74(R) = X64MovqDecompressTaggedSigned : MRI v75(R) [immediate:68]
gap () (v73(R) = v74(-);) 
          v73(1) = X64Sar32 v73(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v37(R) v73 #13 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:67]
gap () () 
          v28(R) = X64Movsd : MR8I v72(R) v37(R) [immediate:66]
gap () () 
          v66(R) = X64MovqDecompressAnyTagged : MR4I v70(R) v11(R) [immediate:65]
gap () () 
          X64Test32 && deoptimize if equal v66 #1 #12 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:64]
gap () () 
          X64Cmp32 : MRI && branch if equal v66(R) [immediate:61] v53(R) [immediate:62] [immediate:63]
gap () () 
          ArchJmp [immediate:60]
gap () () 
          [constant:69] = ArchNop
gap () () 
          [constant:68] = ArchNop
gap () () 
          X64Push v66(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v68(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v69(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:59] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:58]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v66(R) [immediate:56] v48(R) #11 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:57]
gap () () 
          v63(R) = X64MovqDecompressTaggedPointer : MRI v66(R) [immediate:55]
gap () () 
          v65(R) = X64MovqDecompressTaggedSigned : MRI v66(R) [immediate:54]
gap () (v64(R) = v65(-);) 
          v64(1) = X64Sar32 v64(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v64 #3 #10 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:53]
gap () () 
          v25(R) = X64Movsd : MRI v63(R) [immediate:52]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #3 #9 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:51]
gap () () 
          v57(R) = X64MovqDecompressAnyTagged : MRI v61(R) [immediate:50]
gap () () 
          X64Test32 && deoptimize if equal v57 #1 #8 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:49]
gap () () 
          X64Cmp32 : MRI && branch if equal v57(R) [immediate:46] v53(R) [immediate:47] [immediate:48]
gap () () 
          ArchJmp [immediate:45]
gap () () 
          [constant:60] = ArchNop
gap () () 
          [constant:59] = ArchNop
gap () () 
          X64Push v57(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v59(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v60(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:44] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:43]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v57(R) [immediate:41] v48(R) #7 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:42]
gap () () 
          v54(R) = X64MovqDecompressTaggedPointer : MRI v57(R) [immediate:40]
gap () () 
          v56(R) = X64MovqDecompressTaggedSigned : MRI v57(R) [immediate:39]
gap () (v55(R) = v56(-);) 
          v55(1) = X64Sar32 v55(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v37(R) v55 #6 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:38]
gap () () 
          v24(R) = X64Movsd : MR8I v54(R) v37(R) [immediate:37]
gap () () 
          X64Test32 && deoptimize if equal v34 #1 #5 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:36]
gap () () 
          X64Cmp32 : MRI && branch if equal v34(R) [immediate:33] v53(R) [immediate:34] [immediate:35]
gap () () 
          ArchJmp [immediate:32]
gap () () 
          [constant:52] = ArchNop
gap () () 
          [constant:50] = ArchNop
gap () () 
          X64Push v34(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v50(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v52(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:31] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:30]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v34(R) [immediate:28] v48(R) #4 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:29]
gap () () 
          v39(R) = X64MovqDecompressTaggedPointer : MRI v34(R) [immediate:27]
gap () () 
          v47(R) = X64MovqDecompressTaggedSigned : MRI v34(R) [immediate:26]
gap () (v38(R) = v47(-);) 
          v38(1) = X64Sar32 v38(R) #1
gap () () 
          v46(R) = X64MovqDecompressTaggedSigned : MRI v39(R) [immediate:25]
gap () (v44(R) = v46(-);) 
          v44(1) = X64Sar32 v44(R) #1
gap () () 
          v45(R) = X64Lea32 : MRI v38(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v37(R) v45 #3 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:24]
gap () () 
          X64Cmp32 && branch if unsigned less than v37(R) v44 [immediate:22] [immediate:23]
gap () () 
          v43(R) = X64Lea32 : MR1 v37(R) v37(R)
gap () () 
          [constant:42] = ArchNop
gap () ([rax|R|t] = v34(-); [rbx|R|w32] = v43(-); [rsi|R|w64] = v42(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:21] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v40(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v40 #1 #2 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:20]
gap () (v16 = v40(-);) 
          ArchJmp [immediate:19]
gap () (v16 = v39(-);) 
          ArchJmp [immediate:18]
gap () () 
          v13(R) = X64Lea32 : MRI v37(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v37(R) v38 [immediate:16] [immediate:17]
gap () () 
          v36(R) = X64Lea32 : MR1 v13(R) v13(R)
gap () () 
          X64MovqCompressTagged : MRI v34(R) [immediate:15] v36(R)
gap () () 
          ArchJmp [immediate:14]
gap () () 
          ArchJmp [immediate:13]
gap () () 
          v26(R) = AVXFloat64Mul v32(R) v33
gap () () 
          v27(R) = AVXFloat64Mul v30(R) v31
gap () () 
          v22(R) = AVXFloat64Mul v28(R) v29
gap () () 
          v23(R) = AVXFloat64Add v26(R) v27
gap () () 
          v20(R) = AVXFloat64Mul v24(R) v25
gap () () 
          v21(R) = AVXFloat64Add v22(R) v23
gap () () 
          v19(R) = AVXFloat64Add v20(R) v21
gap () () 
          X64Movsd : MR8I v16(R) v37(R) [immediate:12] v19(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:10] [immediate:11]
gap () () 
          [constant:15] = ArchNop
gap () () 
          [constant:14] = ArchNop
gap () ([rbx|R|w64] = v14(-); [rax|R|w64] = v9(-); [rsi|R|t] = v15(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:9] #-1 #1 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) v11(S) v13(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:8]
gap () () 
          ArchJmp [immediate:7]
gap () (v37 = v13(-);) 
          ArchJmp [immediate:6]
gap () () 
          v7(R) = X64Lea32 : MRI v11(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:4] [immediate:5]
gap () () 
          [constant:10] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () ([rbx|R|w64] = v8(-); [rax|R|w64] = v9(-); [rsi|R|t] = v10(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:3] #-1 #0 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) v7(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:2]
gap () () 
          ArchJmp [immediate:1]
gap () (v11 = v7(-);) 
          ArchJmp [immediate:0]
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
gap () () 
          ArchDebugBreak
gap () () 
          ArchThrowTerminator
print sib pairs
2, v11, v70
2, v11, v103
2, v11, v156
2, v11, v189
3, v37, v16
3, v37, v54
3, v37, v72
3, v37, v81
3, v37, v88
print modrm pairs
1, v7, v11
1, v13, v37
1, v47, v34
1, v54, v57
1, v25, v63
1, v63, v66
1, v72, v75
1, v75, v61
1, v29, v79
1, v83, v84
1, v74, v75
1, v81, v84
1, v84, v61
1, v90, v91
1, v88, v91
1, v31, v79
1, v61, v5
1, v79, v97
1, v105, v0
1, v46, v39
1, v135, v128
1, v136, v127
1, v129, v127
1, v117, v140
1, v142, v143
1, v140, v143
1, v143, v147
1, v36, v34
1, v56, v57
1, v151, v152
1, v121, v157
1, v189, v0
1, v157, v160
1, v194, v195
1, v175, v176
1, v122, v164
1, v149, v152
1, v125, v166
1, v208, v210
1, v169, v147
1, v112, v110
1, v126, v164
1, v166, v169
1, v95, v5
1, v176, v147
1, v96, v97
1, v147, v5
1, v182, v183
1, v173, v176
1, v39, v34
1, v124, v164
1, v209, v210
1, v195, v204
1, v164, v183
1, v188, v4
1, v70, v4
1, v192, v0
1, v33, v79
1, v206, v208
1, v181, v4
1, v181, v5
1, v181, v0
1, v202, v192
1, v91, v61
1, v197, v195
1, v200, v192
1, v199, v192
1, v48, v66
1, v48, v91
1, v48, v75
1, v48, v176
1, v48, v143
1, v48, v34
1, v48, v57
1, v48, v160
1, v48, v84
1, v48, v169
1, v48, v152
1, v48, v201
1, v48, v183
1, v48, v198
1, v48, v199
1, v48, v97
1, v48, v127
1, v48, v200
1, v103, v0
1, v214, v216
1, v203, v204
1, v160, v147
1, v123, v173
1, v205, v206
1, v53, v66
1, v53, v127
1, v53, v97
1, v53, v176
1, v53, v143
1, v53, v75
1, v53, v91
1, v53, v84
1, v53, v169
1, v53, v34
1, v53, v57
1, v53, v160
1, v53, v152
1, v53, v183
1, v198, v192
1, v45, v38
1, v207, v208
1, v118, v149
1, v180, v5
1, v134, v129
1, v156, v4
1, v57, v61
1, v65, v66
1, v193, v198
1, v193, v199
1, v193, v200
1, v193, v0
1, v193, v201
1, v211, v212
1, v159, v160
1, v201, v192
1, v168, v169
1, v210, v212
1, v102, v4
1, v204, v206
1, v191, v0
1, v218, v213
assign rcx to v221:0
assign 1 to v221:0
assign rbx to v222:1
assign 3 to v222:1
assign rax to v223:1
assign 0 to v223:1
assign rsi to v224:1
assign 6 to v224:1
assign rcx to v196:1
assign 1 to v196:1
assign rdi to v213:0
assign 7 to v213:0
assign r8 to v218:0
assign 8 to v218:0
assign r9 to v219:1
assign 9 to v219:1
assign rdx to v217:1
assign 2 to v217:1
blocking v196 pick register rcx
assign rax to v216:0
assign 0 to v216:0
assign rdi to v214:0
assign 7 to v214:0
assign rcx to v196:4
assign 1 to v196:4
assign rdi to v212:0
assign 7 to v212:0
assign r8 to v210:0
assign 8 to v210:0
assign rcx to v196:3
assign 1 to v196:3
assign rdi to v211:0
assign 7 to v211:0
assign rdi to v201:0
assign 7 to v201:0
assign r9 to v48:1
assign 9 to v48:1
assign r12 to v193:1
assign 12 to v193:1
assign r14 to v208:0
assign 14 to v208:0
assign r8 to v209:0
assign 8 to v209:0
assign r8 to v200:0
assign 8 to v200:0
assign r15 to v206:0
assign 15 to v206:0
assign r14 to v207:0
assign 14 to v207:0
assign r14 to v199:0
assign 14 to v199:0
assign rax to v204:0
assign 0 to v204:0
assign r15 to v205:0
assign 15 to v205:0
assign r15 to v198:0
assign 15 to v198:0
assign rdx to v195:0
assign 2 to v195:0
assign rax to v203:0
assign 0 to v203:0
assign rax to v192:0
assign 0 to v192:0
assign rsi to v202:1
assign 6 to v202:1
assign rdi to v197:0
assign 7 to v197:0
assign rcx to v194:0
assign 1 to v194:0
assign rcx to v0:0
assign 1 to v0:0
assign rdi to v181:1
assign 7 to v181:1
assign rax to v9:1
assign 0 to v9:1
assign r8 to v11:0
assign 8 to v11:0
assign r11 to v4:1
assign 11 to v4:1
assign r14 to v5:1
assign 14 to v5:1
assign rbx to v131:1
assign 3 to v131:1
assign r12 to v189:0
assign 12 to v189:0
assign r15 to v191:0
assign 15 to v191:0
assign r15 to v190:0
assign 15 to v190:0
assign r12 to v127:0
assign 12 to v127:0
assign r15 to v156:0
assign 15 to v156:0
assign rdx to v188:0
assign 2 to v188:0
assign rdx to v187:0
assign 2 to v187:0
assign rdx to v183:0
assign 2 to v183:0
blocking v53 pick register rcx
assign rcx to v53:1
assign 1 to v53:1
v0:0 not intersect with v105:0, removed
v0:1 intersect with v105:0, adding
v0:0 not intersect with v103:0, removed
v0:1 intersect with v103:0, adding
v0:1 intersect with v181:1, adding
assign rsi to v51:1
assign 6 to v51:1
blocking v53 pick register rcx
blocking v183 pick register rdx
blocking v181 pick register rdi
blocking v11 pick register r8
blocking v48 pick register r9
blocking v4 pick register r11
blocking v127 pick register r12
blocking v5 pick register r14
blocking v156 pick register r15
assign rcx to v53:4
assign 1 to v53:4
assign rdx to v183:3
assign 2 to v183:3
assign r15 to v156:3
assign 15 to v156:3
assign r12 to v127:3
assign 12 to v127:3
assign rbx to v131:3
assign 3 to v131:3
assign r14 to v5:4
assign 14 to v5:4
assign r11 to v4:4
assign 11 to v4:4
assign r8 to v11:3
assign 8 to v11:3
assign rax to v9:3
assign 0 to v9:3
assign rdi to v181:4
assign 7 to v181:4
assign r9 to v48:4
assign 9 to v48:4
assign rdx to v183:2
assign 2 to v183:2
assign r9 to v48:3
assign 9 to v48:3
assign rsi to v164:0
assign 6 to v164:0
assign rdx to v182:0
assign 2 to v182:0
assign rdx to v165:0
assign 2 to v165:0
assign rdi to v181:3
assign 7 to v181:3
assign r14 to v5:3
assign 14 to v5:3
blocking v147 pick register rdi
assign rdi to v147:0
assign 7 to v147:0
blocking v180 pick register rax
assign rax to v180:0
assign 0 to v180:0
assign rax to v148:0
assign 0 to v148:0
blocking v176 pick register r14
assign r14 to v176:0
assign 14 to v176:0
assign rcx to v53:3
assign 1 to v53:3
blocking v164 pick register rcx
blocking v53 pick register rcx
blocking v147 pick register rdi
blocking v48 pick register r9
blocking v176 pick register r14
assign rcx to v53:7
assign 1 to v53:7
assign r14 to v176:3
assign 14 to v176:3
assign rax to v148:2
assign 0 to v148:2
assign rdi to v147:3
assign 7 to v147:3
assign rdx to v165:2
assign 2 to v165:2
assign rsi to v164:3
assign 6 to v164:3
assign r9 to v48:7
assign 9 to v48:7
assign r8 to v11:5
assign 8 to v11:5
assign r11 to v4:6
assign 11 to v4:6
assign rbx to v131:5
assign 3 to v131:5
assign r12 to v127:5
assign 12 to v127:5
assign r15 to v156:5
assign 15 to v156:5
assign r9 to v48:6
assign 9 to v48:6
assign r14 to v176:2
assign 14 to v176:2
blocking v173 pick register r12
assign r12 to v173:0
assign 12 to v173:0
assign r14 to v175:0
assign 14 to v175:0
assign r14 to v174:0
assign 14 to v174:0
assign rsi to v164:2
assign 6 to v164:2
assign rdi to v147:2
assign 7 to v147:2
assign r12 to v169:0
assign 12 to v169:0
assign rcx to v53:6
assign 1 to v53:6
assign r14 to v171:1
assign 14 to v171:1
assign r14 to v148:3
assign 14 to v148:3
blocking v164 pick register rcx
blocking v53 pick register rcx
blocking v147 pick register rdi
blocking v48 pick register r9
blocking v169 pick register r12
assign rcx to v53:10
assign 1 to v53:10
assign r12 to v169:3
assign 12 to v169:3
assign rdi to v147:6
assign 7 to v147:6
assign rsi to v164:6
assign 6 to v164:6
assign r9 to v48:10
assign 9 to v48:10
assign r15 to v156:7
assign 15 to v156:7
assign rbx to v131:7
assign 3 to v131:7
assign r11 to v4:8
assign 11 to v4:8
assign r8 to v11:7
assign 8 to v11:7
assign rdx to v165:4
assign 2 to v165:4
assign rax to v148:5
assign 0 to v148:5
assign r9 to v48:9
assign 9 to v48:9
assign r12 to v169:2
assign 12 to v169:2
blocking v166 pick register r8
assign r8 to v166:0
assign 8 to v166:0
assign r12 to v168:0
assign 12 to v168:0
assign r12 to v167:0
assign 12 to v167:0
assign rsi to v164:5
assign 6 to v164:5
assign rdi to v147:5
assign 7 to v147:5
assign r8 to v160:0
assign 8 to v160:0
assign rcx to v53:9
assign 1 to v53:9
assign r12 to v162:1
assign 12 to v162:1
assign rsi to v163:1
assign 6 to v163:1
assign r12 to v148:6
assign 12 to v148:6
assign r14 to v131:8
assign 14 to v131:8
blocking v53 pick register rcx
blocking v147 pick register rdi
blocking v160 pick register r8
blocking v48 pick register r9
assign rcx to v53:13
assign 1 to v53:13
assign r8 to v160:3
assign 8 to v160:3
assign rdi to v147:9
assign 7 to v147:9
assign r9 to v48:13
assign 9 to v48:13
assign rax to v148:8
assign 0 to v148:8
assign r11 to v4:10
assign 11 to v4:10
assign rbx to v131:10
assign 3 to v131:10
assign r15 to v156:9
assign 15 to v156:9
assign r8 to v160:2
assign 8 to v160:2
assign r9 to v48:12
assign 9 to v48:12
assign r12 to v157:0
assign 12 to v157:0
assign r8 to v159:0
assign 8 to v159:0
assign r8 to v158:0
assign 8 to v158:0
assign r8 to v11:2
assign 8 to v11:2
assign r15 to v156:2
assign 15 to v156:2
assign r12 to v152:0
assign 12 to v152:0
assign rcx to v53:12
assign 1 to v53:12
assign r14 to v154:1
assign 14 to v154:1
assign rsi to v155:1
assign 6 to v155:1
assign r14 to v148:9
assign 14 to v148:9
assign r15 to v131:11
assign 15 to v131:11
blocking v53 pick register rcx
blocking v11 pick register r8
blocking v48 pick register r9
blocking v152 pick register r12
assign rcx to v53:16
assign 1 to v53:16
assign r12 to v152:3
assign 12 to v152:3
assign r8 to v11:11
assign 8 to v11:11
assign r9 to v48:16
assign 9 to v48:16
assign rbx to v131:13
assign 3 to v131:13
assign r11 to v4:12
assign 11 to v4:12
assign rax to v148:11
assign 0 to v148:11
assign rdi to v147:11
assign 7 to v147:11
assign r9 to v48:15
assign 9 to v48:15
assign r12 to v152:2
assign 12 to v152:2
assign rdx to v149:0
assign 2 to v149:0
assign r12 to v151:0
assign 12 to v151:0
assign r12 to v150:0
assign 12 to v150:0
assign rdi to v147:8
assign 7 to v147:8
assign rdi to v143:0
assign 7 to v143:0
assign rcx to v53:15
assign 1 to v53:15
assign r12 to v145:1
assign 12 to v145:1
assign rsi to v146:1
assign 6 to v146:1
assign r12 to v131:14
assign 12 to v131:14
blocking v53 pick register rcx
blocking v143 pick register rdi
blocking v48 pick register r9
assign rcx to v53:19
assign 1 to v53:19
assign rdi to v143:3
assign 7 to v143:3
assign r9 to v48:19
assign 9 to v48:19
assign r11 to v4:14
assign 11 to v4:14
assign rbx to v131:16
assign 3 to v131:16
assign r8 to v11:13
assign 8 to v11:13
assign rdi to v143:2
assign 7 to v143:2
assign r9 to v48:18
assign 9 to v48:18
assign r12 to v140:0
assign 12 to v140:0
assign rdi to v142:0
assign 7 to v142:0
assign rdi to v141:0
assign 7 to v141:0
assign rcx to v53:18
assign 1 to v53:18
assign r12 to v127:2
assign 12 to v127:2
assign rdi to v138:1
assign 7 to v138:1
assign rsi to v139:1
assign 6 to v139:1
assign rdi to v131:17
assign 7 to v131:17
blocking v53 pick register rcx
blocking v48 pick register r9
blocking v127 pick register r12
assign r12 to v127:9
assign 12 to v127:9
assign rcx to v53:22
assign 1 to v53:22
assign r9 to v48:22
assign 9 to v48:22
assign r8 to v11:15
assign 8 to v11:15
assign rbx to v131:19
assign 3 to v131:19
assign r11 to v4:16
assign 11 to v4:16
assign r9 to v48:21
assign 9 to v48:21
assign r12 to v127:8
assign 12 to v127:8
assign rax to v129:0
assign 0 to v129:0
assign rdx to v136:0
assign 2 to v136:0
assign rdi to v134:0
assign 7 to v134:0
assign rdx to v128:0
assign 2 to v128:0
assign r14 to v135:0
assign 14 to v135:0
assign rdi to v133:0
assign 7 to v133:0
assign rsi to v132:1
assign 6 to v132:1
assign rdi to v131:20
assign 7 to v131:20
blocking v48 pick register r9
blocking v127 pick register r12
assign rax to v130:0
assign 0 to v130:0
assign rdx to v128:2
assign 2 to v128:2
assign r12 to v127:12
assign 12 to v127:12
assign r9 to v48:25
assign 9 to v48:25
assign r11 to v4:18
assign 11 to v4:18
assign rbx to v131:22
assign 3 to v131:22
assign r8 to v11:17
assign 8 to v11:17
assign rcx to v53:24
assign 1 to v53:24
assign rax to v110:0
assign 0 to v110:0
assign r12 to v127:11
assign 12 to v127:11
assign rdi to v108:1
assign 7 to v108:1
assign rsi to v109:1
assign 6 to v109:1
assign rdi to v131:23
assign 7 to v131:23
assign rcx to v53:26
assign 1 to v53:26
assign r8 to v11:19
assign 8 to v11:19
assign rbx to v131:25
assign 3 to v131:25
assign r11 to v4:20
assign 11 to v4:20
assign r9 to v48:27
assign 9 to v48:27
assign rdi to v106:1
assign 7 to v106:1
assign rcx to v53:21
assign 1 to v53:21
assign r8 to v11:10
assign 8 to v11:10
assign r9 to v48:24
assign 9 to v48:24
assign r11 to v4:3
assign 11 to v4:3
assign rdi to v37:0
assign 7 to v37:0
assign rax to v0:2
assign 0 to v0:2
assign r12 to v5:6
assign 12 to v5:6
assign r14 to v103:0
assign 14 to v103:0
assign r15 to v105:0
assign 15 to v105:0
assign r15 to v104:0
assign 15 to v104:0
assign rdx to v34:0
assign 2 to v34:0
assign r14 to v70:0
assign 14 to v70:0
assign r15 to v102:0
assign 15 to v102:0
assign r15 to v101:0
assign 15 to v101:0
blocking v97 pick register rax
assign rax to v97:0
assign 0 to v97:0
assign r15 to v99:1
assign 15 to v99:1
assign rsi to v100:1
assign 6 to v100:1
assign r15 to v97:1
assign 15 to v97:1
blocking v53 pick register rcx
blocking v34 pick register rdx
blocking v37 pick register rdi
blocking v11 pick register r8
blocking v48 pick register r9
blocking v5 pick register r12
blocking v70 pick register r14
blocking v97 pick register rcx
assign rax to v97:4
assign 0 to v97:4
assign r14 to v70:3
assign 14 to v70:3
assign rdx to v34:3
assign 2 to v34:3
assign r12 to v5:9
assign 12 to v5:9
assign rdi to v37:3
assign 7 to v37:3
assign r11 to v4:22
assign 11 to v4:22
assign r9 to v48:30
assign 9 to v48:30
assign r8 to v11:22
assign 8 to v11:22
assign rcx to v53:29
assign 1 to v53:29
assign rbx to v131:27
assign 3 to v131:27
assign r9 to v48:29
assign 9 to v48:29
assign r15 to v97:3
assign 15 to v97:3
assign rax to v79:0
assign 0 to v79:0
assign r15 to v96:0
assign 15 to v96:0
assign r15 to v80:0
assign 15 to v80:0
assign r12 to v5:8
assign 12 to v5:8
assign rsi to v61:0
assign 6 to v61:0
blocking v95 pick register rdx
assign rdx to v95:0
assign 2 to v95:0
assign rdx to v62:0
assign 2 to v62:0
blocking v91 pick register r12
assign r12 to v91:0
assign 12 to v91:0
assign rcx to v53:28
assign 1 to v53:28
blocking v79 pick register rcx
blocking v61 pick register rcx
blocking v53 pick register rcx
blocking v48 pick register r9
blocking v91 pick register r12
assign rcx to v53:32
assign 1 to v53:32
assign r12 to v91:3
assign 12 to v91:3
assign rdx to v62:2
assign 2 to v62:2
assign rsi to v61:3
assign 6 to v61:3
assign r15 to v80:2
assign 15 to v80:2
assign rax to v79:3
assign 0 to v79:3
assign r9 to v48:33
assign 9 to v48:33
assign rbx to v131:29
assign 3 to v131:29
assign r8 to v11:24
assign 8 to v11:24
assign r11 to v4:24
assign 11 to v4:24
assign rdi to v37:5
assign 7 to v37:5
assign r14 to v70:5
assign 14 to v70:5
assign r9 to v48:32
assign 9 to v48:32
assign r12 to v91:2
assign 12 to v91:2
blocking v88 pick register r8
assign r8 to v88:0
assign 8 to v88:0
assign r12 to v90:0
assign 12 to v90:0
assign r12 to v89:0
assign 12 to v89:0
assign rdi to v37:2
assign 7 to v37:2
assign rax to v79:2
assign 0 to v79:2
assign rsi to v61:2
assign 6 to v61:2
assign r8 to v84:0
assign 8 to v84:0
assign rcx to v53:31
assign 1 to v53:31
assign r12 to v86:1
assign 12 to v86:1
assign r12 to v79:4
assign 12 to v79:4
blocking v61 pick register rcx
blocking v53 pick register rcx
blocking v37 pick register rdi
blocking v84 pick register r8
blocking v48 pick register r9
blocking v79 pick register rcx
assign rcx to v53:35
assign 1 to v53:35
assign r8 to v84:3
assign 8 to v84:3
assign rsi to v61:6
assign 6 to v61:6
assign rax to v79:7
assign 0 to v79:7
assign rdi to v37:8
assign 7 to v37:8
assign r9 to v48:36
assign 9 to v48:36
assign r14 to v70:7
assign 14 to v70:7
assign r11 to v4:26
assign 11 to v4:26
assign rbx to v131:31
assign 3 to v131:31
assign r15 to v80:4
assign 15 to v80:4
assign rdx to v62:4
assign 2 to v62:4
assign r8 to v84:2
assign 8 to v84:2
assign r9 to v48:35
assign 9 to v48:35
assign r12 to v81:0
assign 12 to v81:0
assign r8 to v83:0
assign 8 to v83:0
assign r8 to v82:0
assign 8 to v82:0
assign rdi to v37:7
assign 7 to v37:7
assign r8 to v79:6
assign 8 to v79:6
assign rsi to v61:5
assign 6 to v61:5
assign r8 to v75:0
assign 8 to v75:0
assign rcx to v53:34
assign 1 to v53:34
assign r12 to v77:1
assign 12 to v77:1
assign r15 to v78:1
assign 15 to v78:1
assign r12 to v131:32
assign 12 to v131:32
assign r15 to v61:7
assign 15 to v61:7
blocking v53 pick register rcx
blocking v37 pick register rdi
blocking v75 pick register r8
blocking v48 pick register r9
blocking v61 pick register rcx
assign rcx to v53:38
assign 1 to v53:38
assign r8 to v75:3
assign 8 to v75:3
assign rsi to v61:10
assign 6 to v61:10
assign rdi to v37:11
assign 7 to v37:11
assign r9 to v48:39
assign 9 to v48:39
assign rdx to v62:6
assign 2 to v62:6
assign rbx to v131:34
assign 3 to v131:34
assign r11 to v4:28
assign 11 to v4:28
assign r14 to v70:9
assign 14 to v70:9
assign r8 to v75:2
assign 8 to v75:2
assign r9 to v48:38
assign 9 to v48:38
assign r12 to v72:0
assign 12 to v72:0
assign r8 to v74:0
assign 8 to v74:0
assign r8 to v73:0
assign 8 to v73:0
assign rdi to v37:10
assign 7 to v37:10
assign r8 to v11:21
assign 8 to v11:21
assign r14 to v70:2
assign 14 to v70:2
assign r12 to v66:0
assign 12 to v66:0
assign rcx to v53:37
assign 1 to v53:37
assign r14 to v68:1
assign 14 to v68:1
assign r15 to v69:1
assign 15 to v69:1
assign r14 to v131:35
assign 14 to v131:35
assign r15 to v61:11
assign 15 to v61:11
blocking v53 pick register rcx
blocking v37 pick register rdi
blocking v11 pick register r8
blocking v48 pick register r9
blocking v66 pick register r12
assign rcx to v53:41
assign 1 to v53:41
assign r12 to v66:3
assign 12 to v66:3
assign r8 to v11:28
assign 8 to v11:28
assign rdi to v37:14
assign 7 to v37:14
assign r9 to v48:42
assign 9 to v48:42
assign r11 to v4:30
assign 11 to v4:30
assign rbx to v131:37
assign 3 to v131:37
assign rdx to v62:8
assign 2 to v62:8
assign rsi to v61:13
assign 6 to v61:13
assign r9 to v48:41
assign 9 to v48:41
assign r12 to v66:2
assign 12 to v66:2
assign rax to v63:0
assign 0 to v63:0
assign r12 to v65:0
assign 12 to v65:0
assign r12 to v64:0
assign 12 to v64:0
assign r12 to v61:9
assign 12 to v61:9
assign r12 to v57:0
assign 12 to v57:0
assign rcx to v53:40
assign 1 to v53:40
assign r14 to v59:1
assign 14 to v59:1
assign rsi to v60:1
assign 6 to v60:1
assign r14 to v131:38
assign 14 to v131:38
blocking v53 pick register rcx
blocking v48 pick register r9
blocking v57 pick register r12
assign rcx to v53:44
assign 1 to v53:44
assign r12 to v57:3
assign 12 to v57:3
assign r9 to v48:45
assign 9 to v48:45
assign rbx to v131:40
assign 3 to v131:40
assign r11 to v4:32
assign 11 to v4:32
assign rdi to v37:16
assign 7 to v37:16
assign r8 to v11:30
assign 8 to v11:30
assign r9 to v48:44
assign 9 to v48:44
assign r12 to v57:2
assign 12 to v57:2
assign rax to v54:0
assign 0 to v54:0
assign r12 to v56:0
assign 12 to v56:0
assign r12 to v55:0
assign 12 to v55:0
assign rdi to v37:13
assign 7 to v37:13
assign rcx to v53:43
assign 1 to v53:43
assign rdx to v34:2
assign 2 to v34:2
assign r12 to v50:1
assign 12 to v50:1
assign rsi to v52:1
assign 6 to v52:1
assign r12 to v131:41
assign 12 to v131:41
blocking v34 pick register rdx
blocking v37 pick register rdi
blocking v48 pick register r9
assign rdx to v34:7
assign 2 to v34:7
assign rcx to v53:46
assign 1 to v53:46
assign rdi to v37:19
assign 7 to v37:19
assign r9 to v48:48
assign 9 to v48:48
assign r8 to v11:32
assign 8 to v11:32
assign r11 to v4:34
assign 11 to v4:34
assign rbx to v131:43
assign 3 to v131:43
assign rdx to v34:6
assign 2 to v34:6
assign r9 to v48:47
assign 9 to v48:47
assign r12 to v39:0
assign 12 to v39:0
assign r14 to v47:0
assign 14 to v47:0
assign r14 to v38:0
assign 14 to v38:0
assign rax to v46:0
assign 0 to v46:0
assign rax to v44:0
assign 0 to v44:0
assign r15 to v45:0
assign 15 to v45:0
assign rdi to v37:18
assign 7 to v37:18
assign r12 to v43:0
assign 12 to v43:0
assign rsi to v42:1
assign 6 to v42:1
assign r12 to v131:44
assign 12 to v131:44
blocking v34 pick register rdx
blocking v37 pick register rdi
assign rax to v40:0
assign 0 to v40:0
assign rdi to v37:22
assign 7 to v37:22
assign r14 to v38:2
assign 14 to v38:2
assign r9 to v48:50
assign 9 to v48:50
assign rdx to v34:10
assign 2 to v34:10
assign rbx to v131:46
assign 3 to v131:46
assign r11 to v4:36
assign 11 to v4:36
assign r8 to v11:34
assign 8 to v11:34
assign rcx to v53:48
assign 1 to v53:48
assign r12 to v16:0
assign 12 to v16:0
assign rdi to v37:21
assign 7 to v37:21
assign r15 to v13:0
assign 15 to v13:0
assign r14 to v36:0
assign 14 to v36:0
assign rdx to v34:9
assign 2 to v34:9
assign rdi to v14:1
assign 7 to v14:1
assign rsi to v15:1
assign 6 to v15:1
assign rdi to v131:47
assign 7 to v131:47
assign r15 to v13:2
assign 15 to v13:2
assign rcx to v53:50
assign 1 to v53:50
assign r8 to v11:36
assign 8 to v11:36
assign r11 to v4:38
assign 11 to v4:38
assign rbx to v131:49
assign 3 to v131:49
assign r9 to v48:52
assign 9 to v48:52
assign r12 to v5:11
assign 12 to v5:11
assign rax to v0:4
assign 0 to v0:4
assign r8 to v11:27
assign 8 to v11:27
assign r8 to v7:0
assign 8 to v7:0
assign rcx to v8:1
assign 1 to v8:1
assign rsi to v10:1
assign 6 to v10:1
assign rcx to v0:5
assign 1 to v0:5
assign rdi to v131:50
assign 7 to v131:50
assign r8 to v7:2
assign 8 to v7:2
assign rax to v0:7
assign 0 to v0:7
assign r12 to v5:13
assign 12 to v5:13
assign r9 to v48:54
assign 9 to v48:54
assign rbx to v131:52
assign 3 to v131:52
assign r11 to v4:40
assign 11 to v4:40
assign rcx to v0:8
assign 1 to v0:8
spill count : 179
add v218->v213
add v214->v216
add v210->v212
add v211->v212
add v48->v201
add v193->v201
add v193->v201
add v208->v210
add v209->v210
add v48->v200
add v193->v200
add v193->v200
add v206->v208
add v207->v208
add v48->v199
add v193->v199
add v193->v199
add v204->v206
add v205->v206
add v48->v198
add v193->v198
add v193->v198
add v195->v204
add v203->v204
add v202->v192
add v201->v192
add v200->v192
add v199->v192
add v198->v192
add v197->v195
add v194->v195
add v181->v0
add v193->v0
add v192->v0
add v189->v0
add v191->v0
adding pairs 2, v11:0x7fffd4059cc8, v189:0x7fffd4004f60
add v181->v4
add v156->v4
add v188->v4
adding pairs 2, v11:0x7fffd4059cc8, v156:0x7fffd4005378
add v53->v183
add v48->v183
add v164->v183
add v182->v183
add v124->v164
add v181->v5
add v147->v5
add v180->v5
add v176->v147
add v53->v176
add v48->v176
add v173->v176
add v175->v176
add v123->v173
add v126->v164
add v169->v147
add v53->v169
add v48->v169
add v166->v169
add v168->v169
add v125->v166
add v122->v164
add v160->v147
add v53->v160
add v48->v160
add v157->v160
add v159->v160
add v121->v157
adding pairs 2, v11:0x7fffd40249d0, v156:0x7fffd4024c48
add v53->v152
add v48->v152
add v149->v152
add v151->v152
add v118->v149
add v143->v147
add v53->v143
add v48->v143
add v140->v143
add v142->v143
add v117->v140
add v53->v127
add v48->v127
add v129->v127
add v136->v127
add v134->v129
add v135->v128
add v112->v110
add v103->v0
add v105->v0
adding pairs 2, v11:0x7fffd402a4b8, v103:0x7fffd40563d0
add v70->v4
add v102->v4
adding pairs 2, v11:0x7fffd402a4b8, v70:0x7fffd4056650
add v53->v97
add v48->v97
add v79->v97
add v96->v97
add v31->v79
add v61->v5
add v95->v5
add v91->v61
add v53->v91
add v48->v91
add v88->v91
add v90->v91
adding pairs 3, v37:0x7fffd40382d8, v88:0x7fffd4057130
add v33->v79
add v84->v61
add v53->v84
add v48->v84
add v81->v84
add v83->v84
adding pairs 3, v37:0x7fffd403b4b8, v81:0x7fffd40576a0
add v29->v79
add v75->v61
add v53->v75
add v48->v75
add v72->v75
add v74->v75
adding pairs 3, v37:0x7fffd403ca48, v72:0x7fffd4057c10
adding pairs 2, v11:0x7fffd40383b0, v70:0x7fffd40384e8
add v53->v66
add v48->v66
add v63->v66
add v65->v66
add v25->v63
add v57->v61
add v53->v57
add v48->v57
add v54->v57
add v56->v57
adding pairs 3, v37:0x7fffd403dec8, v54:0x7fffd40585b0
add v53->v34
add v48->v34
add v39->v34
add v47->v34
add v46->v39
add v45->v38
add v13->v37
add v36->v34
adding pairs 3, v37:0x7fffd4080280, v16:0x7fffd4059980
add v7->v11
gap () () 
          [stack:-1|t] = ArchNop
gap (v3(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v4(-) = [stack:-2|t];) () 
          [stack:-3|t] = ArchNop
gap (v5(-) = [stack:-3|t];) () 
          [rsi|R|t] = ArchNop
gap (v6(-) = [rsi|R|t];) () 
          [rdi|R|t] = ArchNop
gap (v2(-) = [rdi|R|t];) () 
          [constant:131] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:366] [immediate:367]
gap () () 
          [constant:223] = ArchNop
gap () () 
          [constant:224] = ArchNop
gap () () 
          [constant:222] = ArchNop
gap () () 
          v221(R) = ArchStackCheckOffset
gap () () 
          X64Push v221(-)
gap () ([rbx|R|w64] = v222(-); [rax|R|w64] = v223(-); [rsi|R|t] = v224(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:365] #-1 #66 v2(S) v3(S) v4(S) v5(S) v6(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:364]
gap () () 
          ArchJmp [immediate:363]
gap () () 
          [constant:196] = ArchNop
gap () () 
          v213(R) = X64Movq : MR v196(R)
gap () () 
          [constant:219] = ArchNop
gap () () 
          [constant:217] = ArchNop
gap () () 
          v218(R) = X64Lea : MRI v213(R) [immediate:362]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v219(R) v218(R) [immediate:360] [immediate:361]
gap () () 
          ArchJmp [immediate:359]
gap () ([rdx|R|w64] = v217(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:358] #-1 [rdx|R|w64]
gap (v216(-) = [rax|R|tp];) () 
          v214(R) = X64Lea : MRI v216(R) [immediate:357]
gap () (v212 = v214(-);) 
          ArchJmp [immediate:356]
gap () (v212 = v213(-);) 
          ArchJmp [immediate:355]
gap () () 
          v210(R) = X64Lea : MRI v212(R) [immediate:354]
gap () () 
          X64Movq : MR v196(R) v210(R)
gap () () 
          v211(R) = X64Lea : MRI v212(R) [immediate:353]
gap () (v201 = v211(-);) 
          v201(1) = ArchNop v201
gap () () 
          [constant:48] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v201(R) [immediate:352] v48(R)
gap () () 
          [constant:193] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v201(R) [immediate:351] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v201(R) [immediate:350] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v201(R) [immediate:348] [immediate:349]
gap () () 
          v208(R) = X64Lea : MRI v210(R) [immediate:347]
gap () () 
          X64Movq : MR v196(R) v208(R)
gap () () 
          v209(R) = X64Lea : MRI v210(R) [immediate:346]
gap () (v200 = v209(-);) 
          v200(1) = ArchNop v200
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:345] v48(R)
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:344] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:343] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v200(R) [immediate:341] [immediate:342]
gap () () 
          v206(R) = X64Lea : MRI v208(R) [immediate:340]
gap () () 
          X64Movq : MR v196(R) v206(R)
gap () () 
          v207(R) = X64Lea : MRI v208(R) [immediate:339]
gap () (v199 = v207(-);) 
          v199(1) = ArchNop v199
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:338] v48(R)
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:337] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:336] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v199(R) [immediate:334] [immediate:335]
gap () () 
          v204(R) = X64Lea : MRI v206(R) [immediate:333]
gap () () 
          X64Movq : MR v196(R) v204(R)
gap () () 
          v205(R) = X64Lea : MRI v206(R) [immediate:332]
gap () (v198 = v205(-);) 
          v198(1) = ArchNop v198
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:331] v48(R)
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:330] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:329] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v198(R) [immediate:327] [immediate:328]
gap () () 
          v195(R) = X64Lea : MRI v204(R) [immediate:326]
gap () () 
          X64Movq : MR v196(R) v195(R)
gap () () 
          v203(R) = X64Lea : MRI v204(R) [immediate:325]
gap () (v192 = v203(-);) 
          v192(1) = ArchNop v192
gap () () 
          [constant:202] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v192(R) [immediate:324] v202(R)
gap () () 
          X64MovqCompressTagged : MRI v192(R) [immediate:322] [immediate:323]
gap () () 
          X64MovqCompressTagged : MRI v192(R) [immediate:321] v201(R)
gap () () 
          X64MovqCompressTagged : MRI v192(R) [immediate:320] v200(R)
gap () () 
          X64MovqCompressTagged : MRI v192(R) [immediate:319] v199(R)
gap () () 
          X64MovqCompressTagged : MRI v192(R) [immediate:318] v198(R)
gap () () 
          v197(R) = X64Lea : MRI v195(R) [immediate:317]
gap () () 
          X64Movq : MR v196(R) v197(R)
gap () () 
          v194(R) = X64Lea : MRI v195(R) [immediate:316]
gap () (v0 = v194(-);) 
          v0(1) = ArchNop v0
gap () () 
          [constant:9] = ArchNop
gap () () 
          [constant:181] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:315] v181(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:314] v193(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:313] v192(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:311] [immediate:312]
gap () (v11 = v9(-);) 
          ArchJmp [immediate:310]
gap () () 
          X64Cmp32 && branch if unsigned less than v11 #4 [immediate:308] [immediate:309]
gap () () 
          v189(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:307]
gap () () 
          v191(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:306]
gap () () 
          [constant:106] = ArchNop
gap () (v190(R) = v191(-);) 
          v190(1) = X64Sar32 v190(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v11(R) v190 #65 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:305]
gap () () 
          v127(R) = X64MovqDecompressAnyTagged : MR4I v189(R) v11(R) [immediate:304]
gap () () 
          [constant:51] = ArchNop
gap () () 
          [constant:53] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v4 #1 #64 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:303]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v4(R) [immediate:301] v181(R) #63 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:302]
gap () () 
          v156(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:300]
gap () () 
          v188(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:299]
gap () (v187(R) = v188(-);) 
          v187(1) = X64Sar32 v187(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v11(R) v187 #62 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:298]
gap () () 
          v183(R) = X64MovqDecompressAnyTagged : MR4I v156(R) v11(R) [immediate:297]
gap () () 
          X64Test32 && deoptimize if equal v183 #1 #61 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:296]
gap () () 
          X64Cmp32 : MRI && branch if equal v183(R) [immediate:293] v53(R) [immediate:294] [immediate:295]
gap () () 
          ArchJmp [immediate:292]
gap () () 
          [constant:186] = ArchNop
gap () () 
          [constant:185] = ArchNop
gap () () 
          X64Push v183(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v185(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v186(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:291] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:290]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v183(R) [immediate:287] v48(R) #60 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:288] [immediate:289]
gap () () 
          v164(R) = X64MovqDecompressTaggedPointer : MRI v183(R) [immediate:286]
gap () () 
          v182(R) = X64MovqDecompressTaggedSigned : MRI v183(R) [immediate:285]
gap () (v165(R) = v182(-);) 
          v165(1) = X64Sar32 v165(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v165 #0 #59 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:283] [immediate:284]
gap () () 
          v124(R) = X64Movsd : MRI v164(R) [immediate:282]
gap () () 
          X64Test32 && deoptimize if equal v5 #1 #58 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:280] [immediate:281]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v5(R) [immediate:277] v181(R) #57 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:278] [immediate:279]
gap () () 
          v147(R) = X64MovqDecompressTaggedPointer : MRI v5(R) [immediate:276]
gap () () 
          v180(R) = X64MovqDecompressTaggedSigned : MRI v5(R) [immediate:275]
gap () (v148(R) = v180(-);) 
          v148(1) = X64Sar32 v148(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v148 #0 #56 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:273] [immediate:274]
gap () () 
          v176(R) = X64MovqDecompressAnyTagged : MRI v147(R) [immediate:272]
gap () () 
          X64Test32 && deoptimize if equal v176 #1 #55 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:270] [immediate:271]
gap () () 
          X64Cmp32 : MRI && branch if equal v176(R) [immediate:267] v53(R) [immediate:268] [immediate:269]
gap () () 
          ArchJmp [immediate:266]
gap () () 
          [constant:179] = ArchNop
gap () () 
          [constant:178] = ArchNop
gap () () 
          X64Push v176(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v178(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v179(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:265] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:264]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v176(R) [immediate:261] v48(R) #54 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:262] [immediate:263]
gap () () 
          v173(R) = X64MovqDecompressTaggedPointer : MRI v176(R) [immediate:260]
gap () () 
          v175(R) = X64MovqDecompressTaggedSigned : MRI v176(R) [immediate:259]
gap () (v174(R) = v175(-);) 
          v174(1) = X64Sar32 v174(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v174 #0 #53 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:257] [immediate:258]
gap () () 
          v123(R) = X64Movsd : MRI v173(R) [immediate:256]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v165 #1 #52 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:254] [immediate:255]
gap () () 
          v126(R) = X64Movsd : MRI v164(R) [immediate:253]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v148 #1 #51 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:251] [immediate:252]
gap () () 
          v169(R) = X64MovqDecompressAnyTagged : MRI v147(R) [immediate:250]
gap () () 
          X64Test32 && deoptimize if equal v169 #1 #50 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:248] [immediate:249]
gap () () 
          X64Cmp32 : MRI && branch if equal v169(R) [immediate:245] v53(R) [immediate:246] [immediate:247]
gap () () 
          ArchJmp [immediate:244]
gap () () 
          [constant:172] = ArchNop
gap () () 
          [constant:171] = ArchNop
gap () () 
          X64Push v169(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v171(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v172(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:243] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:242]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v169(R) [immediate:239] v48(R) #49 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:240] [immediate:241]
gap () () 
          v166(R) = X64MovqDecompressTaggedPointer : MRI v169(R) [immediate:238]
gap () () 
          v168(R) = X64MovqDecompressTaggedSigned : MRI v169(R) [immediate:237]
gap () (v167(R) = v168(-);) 
          v167(1) = X64Sar32 v167(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v167 #0 #48 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:235] [immediate:236]
gap () () 
          v125(R) = X64Movsd : MRI v166(R) [immediate:234]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v165 #2 #47 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:232] [immediate:233]
gap () () 
          v122(R) = X64Movsd : MRI v164(R) [immediate:231]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v148 #2 #46 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:229] [immediate:230]
gap () () 
          v160(R) = X64MovqDecompressAnyTagged : MRI v147(R) [immediate:228]
gap () () 
          X64Test32 && deoptimize if equal v160 #1 #45 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:226] [immediate:227]
gap () () 
          X64Cmp32 : MRI && branch if equal v160(R) [immediate:223] v53(R) [immediate:224] [immediate:225]
gap () () 
          ArchJmp [immediate:222]
gap () () 
          [constant:163] = ArchNop
gap () () 
          [constant:162] = ArchNop
gap () () 
          X64Push v160(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v162(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v163(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:221] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:220]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v160(R) [immediate:217] v48(R) #44 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:218] [immediate:219]
gap () () 
          v157(R) = X64MovqDecompressTaggedPointer : MRI v160(R) [immediate:216]
gap () () 
          v159(R) = X64MovqDecompressTaggedSigned : MRI v160(R) [immediate:215]
gap () (v158(R) = v159(-);) 
          v158(1) = X64Sar32 v158(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v158 #0 #43 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:213] [immediate:214]
gap () () 
          v121(R) = X64Movsd : MRI v157(R) [immediate:212]
gap () () 
          v152(R) = X64MovqDecompressAnyTagged : MR4I v156(R) v11(R) [immediate:211]
gap () () 
          X64Test32 && deoptimize if equal v152 #1 #42 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:209] [immediate:210]
gap () () 
          X64Cmp32 : MRI && branch if equal v152(R) [immediate:206] v53(R) [immediate:207] [immediate:208]
gap () () 
          ArchJmp [immediate:205]
gap () () 
          [constant:155] = ArchNop
gap () () 
          [constant:154] = ArchNop
gap () () 
          X64Push v152(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v154(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v155(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:204] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:203]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v152(R) [immediate:200] v48(R) #41 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:201] [immediate:202]
gap () () 
          v149(R) = X64MovqDecompressTaggedPointer : MRI v152(R) [immediate:199]
gap () () 
          v151(R) = X64MovqDecompressTaggedSigned : MRI v152(R) [immediate:198]
gap () (v150(R) = v151(-);) 
          v150(1) = X64Sar32 v150(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v150 #3 #40 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:196] [immediate:197]
gap () () 
          v118(R) = X64Movsd : MRI v149(R) [immediate:195]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v148 #3 #39 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:193] [immediate:194]
gap () () 
          v143(R) = X64MovqDecompressAnyTagged : MRI v147(R) [immediate:192]
gap () () 
          X64Test32 && deoptimize if equal v143 #1 #38 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:190] [immediate:191]
gap () () 
          X64Cmp32 : MRI && branch if equal v143(R) [immediate:187] v53(R) [immediate:188] [immediate:189]
gap () () 
          ArchJmp [immediate:186]
gap () () 
          [constant:146] = ArchNop
gap () () 
          [constant:145] = ArchNop
gap () () 
          X64Push v143(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v145(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v146(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:185] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:184]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v143(R) [immediate:181] v48(R) #37 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:182] [immediate:183]
gap () () 
          v140(R) = X64MovqDecompressTaggedPointer : MRI v143(R) [immediate:180]
gap () () 
          v142(R) = X64MovqDecompressTaggedSigned : MRI v143(R) [immediate:179]
gap () (v141(R) = v142(-);) 
          v141(1) = X64Sar32 v141(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v141 #0 #36 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:177] [immediate:178]
gap () () 
          v117(R) = X64Movsd : MRI v140(R) [immediate:176]
gap () () 
          X64Test32 && deoptimize if equal v127 #1 #35 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:174] [immediate:175]
gap () () 
          X64Cmp32 : MRI && branch if equal v127(R) [immediate:171] v53(R) [immediate:172] [immediate:173]
gap () () 
          ArchJmp [immediate:170]
gap () () 
          [constant:139] = ArchNop
gap () () 
          [constant:138] = ArchNop
gap () () 
          X64Push v127(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v138(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v139(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:169] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:168]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v127(R) [immediate:165] v48(R) #34 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:166] [immediate:167]
gap () () 
          v129(R) = X64MovqDecompressTaggedPointer : MRI v127(R) [immediate:164]
gap () () 
          v136(R) = X64MovqDecompressTaggedSigned : MRI v127(R) [immediate:163]
gap () () 
          v134(R) = X64MovqDecompressTaggedSigned : MRI v129(R) [immediate:162]
gap () (v128(R) = v136(-);) 
          v128(1) = X64Sar32 v128(R) #1
gap () () 
          v135(R) = X64Lea32 : MRI v128(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v135 #0 [immediate:160] [immediate:161]
gap () (v133(R) = v134(-);) 
          v133(1) = X64Sar32 v133(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v133 #0 [immediate:158] [immediate:159]
gap () () 
          [constant:132] = ArchNop
gap () ([rax|R|t] = v127(-); [rbx|R|w64] = v131(-); [rsi|R|w64] = v132(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:157] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v130(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v130 #1 #33 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) [immediate:155] [immediate:156]
gap () (v110 = v130(-);) 
          ArchJmp [immediate:154]
gap () (v110 = v129(-);) 
          ArchJmp [immediate:153]
gap () () 
          X64Cmp32 && branch if unsigned greater than v128 #0 [immediate:151] [immediate:152]
gap () () 
          X64MovqCompressTagged : MRI v127(R) [immediate:149] [immediate:150]
gap () () 
          ArchJmp [immediate:148]
gap () () 
          ArchJmp [immediate:147]
gap () () 
          v119(R) = AVXFloat64Mul v125(R) v126
gap () () 
          v120(R) = AVXFloat64Mul v123(R) v124
gap () () 
          v115(R) = AVXFloat64Mul v121(R) v122
gap () () 
          v116(R) = AVXFloat64Add v119(R) v120
gap () () 
          v113(R) = AVXFloat64Mul v117(R) v118
gap () () 
          v114(R) = AVXFloat64Add v115(R) v116
gap () () 
          v112(R) = AVXFloat64Add v113(R) v114
gap () () 
          X64Movsd : MRI v110(R) [immediate:146] v112(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:144] [immediate:145]
gap () () 
          [constant:109] = ArchNop
gap () () 
          [constant:108] = ArchNop
gap () ([rbx|R|w64] = v108(-); [rax|R|w64] = v9(-); [rsi|R|t] = v109(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:143] #-1 #32 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) v11(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:142]
gap () () 
          ArchJmp [immediate:141]
gap () (v37 = v106(-);) 
          ArchJmp [immediate:140]
gap () () 
          X64Cmp32 && branch if unsigned less than v37 #4 [immediate:138] [immediate:139]
gap () () 
          v103(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:137]
gap () () 
          v105(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:136]
gap () (v104(R) = v105(-);) 
          v104(1) = X64Sar32 v104(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v11(R) v104 #31 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:135]
gap () () 
          v34(R) = X64MovqDecompressAnyTagged : MR4I v103(R) v11(R) [immediate:134]
gap () () 
          v70(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:133]
gap () () 
          v102(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:132]
gap () (v101(R) = v102(-);) 
          v101(1) = X64Sar32 v101(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v11(R) v101 #30 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:131]
gap () () 
          v97(R) = X64MovqDecompressAnyTagged : MR4I v70(R) v11(R) [immediate:130]
gap () () 
          X64Test32 && deoptimize if equal v97 #1 #29 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:129]
gap () () 
          X64Cmp32 : MRI && branch if equal v97(R) [immediate:126] v53(R) [immediate:127] [immediate:128]
gap () () 
          ArchJmp [immediate:125]
gap () () 
          [constant:100] = ArchNop
gap () () 
          [constant:99] = ArchNop
gap () () 
          X64Push v97(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v99(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v100(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:124] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:123]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v97(R) [immediate:121] v48(R) #28 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:122]
gap () () 
          v79(R) = X64MovqDecompressTaggedPointer : MRI v97(R) [immediate:120]
gap () () 
          v96(R) = X64MovqDecompressTaggedSigned : MRI v97(R) [immediate:119]
gap () (v80(R) = v96(-);) 
          v80(1) = X64Sar32 v80(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #0 #27 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:118]
gap () () 
          v31(R) = X64Movsd : MRI v79(R) [immediate:117]
gap () () 
          v61(R) = X64MovqDecompressTaggedPointer : MRI v5(R) [immediate:116]
gap () () 
          v95(R) = X64MovqDecompressTaggedSigned : MRI v5(R) [immediate:115]
gap () (v62(R) = v95(-);) 
          v62(1) = X64Sar32 v62(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #0 #26 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:114]
gap () () 
          v91(R) = X64MovqDecompressAnyTagged : MRI v61(R) [immediate:113]
gap () () 
          X64Test32 && deoptimize if equal v91 #1 #25 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:112]
gap () () 
          X64Cmp32 : MRI && branch if equal v91(R) [immediate:109] v53(R) [immediate:110] [immediate:111]
gap () () 
          ArchJmp [immediate:108]
gap () () 
          [constant:94] = ArchNop
gap () () 
          [constant:93] = ArchNop
gap () () 
          X64Push v91(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v93(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v94(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:107] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:106]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v91(R) [immediate:104] v48(R) #24 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:105]
gap () () 
          v88(R) = X64MovqDecompressTaggedPointer : MRI v91(R) [immediate:103]
gap () () 
          v90(R) = X64MovqDecompressTaggedSigned : MRI v91(R) [immediate:102]
gap () (v89(R) = v90(-);) 
          v89(1) = X64Sar32 v89(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v37(R) v89 #23 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:101]
gap () () 
          v30(R) = X64Movsd : MR8I v88(R) v37(R) [immediate:100]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #1 #22 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:99]
gap () () 
          v33(R) = X64Movsd : MRI v79(R) [immediate:98]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #1 #21 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:97]
gap () () 
          v84(R) = X64MovqDecompressAnyTagged : MRI v61(R) [immediate:96]
gap () () 
          X64Test32 && deoptimize if equal v84 #1 #20 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:95]
gap () () 
          X64Cmp32 : MRI && branch if equal v84(R) [immediate:92] v53(R) [immediate:93] [immediate:94]
gap () () 
          ArchJmp [immediate:91]
gap () () 
          [constant:87] = ArchNop
gap () () 
          [constant:86] = ArchNop
gap () () 
          X64Push v84(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v86(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v87(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:90] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:89]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v84(R) [immediate:87] v48(R) #19 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:88]
gap () () 
          v81(R) = X64MovqDecompressTaggedPointer : MRI v84(R) [immediate:86]
gap () () 
          v83(R) = X64MovqDecompressTaggedSigned : MRI v84(R) [immediate:85]
gap () (v82(R) = v83(-);) 
          v82(1) = X64Sar32 v82(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v37(R) v82 #18 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:84]
gap () () 
          v32(R) = X64Movsd : MR8I v81(R) v37(R) [immediate:83]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #2 #17 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:82]
gap () () 
          v29(R) = X64Movsd : MRI v79(R) [immediate:81]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #2 #16 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:80]
gap () () 
          v75(R) = X64MovqDecompressAnyTagged : MRI v61(R) [immediate:79]
gap () () 
          X64Test32 && deoptimize if equal v75 #1 #15 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:78]
gap () () 
          X64Cmp32 : MRI && branch if equal v75(R) [immediate:75] v53(R) [immediate:76] [immediate:77]
gap () () 
          ArchJmp [immediate:74]
gap () () 
          [constant:78] = ArchNop
gap () () 
          [constant:77] = ArchNop
gap () () 
          X64Push v75(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v77(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v78(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:73] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:72]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v75(R) [immediate:70] v48(R) #14 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:71]
gap () () 
          v72(R) = X64MovqDecompressTaggedPointer : MRI v75(R) [immediate:69]
gap () () 
          v74(R) = X64MovqDecompressTaggedSigned : MRI v75(R) [immediate:68]
gap () (v73(R) = v74(-);) 
          v73(1) = X64Sar32 v73(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v37(R) v73 #13 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:67]
gap () () 
          v28(R) = X64Movsd : MR8I v72(R) v37(R) [immediate:66]
gap () () 
          v66(R) = X64MovqDecompressAnyTagged : MR4I v70(R) v11(R) [immediate:65]
gap () () 
          X64Test32 && deoptimize if equal v66 #1 #12 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:64]
gap () () 
          X64Cmp32 : MRI && branch if equal v66(R) [immediate:61] v53(R) [immediate:62] [immediate:63]
gap () () 
          ArchJmp [immediate:60]
gap () () 
          [constant:69] = ArchNop
gap () () 
          [constant:68] = ArchNop
gap () () 
          X64Push v66(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v68(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v69(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:59] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:58]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v66(R) [immediate:56] v48(R) #11 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:57]
gap () () 
          v63(R) = X64MovqDecompressTaggedPointer : MRI v66(R) [immediate:55]
gap () () 
          v65(R) = X64MovqDecompressTaggedSigned : MRI v66(R) [immediate:54]
gap () (v64(R) = v65(-);) 
          v64(1) = X64Sar32 v64(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v64 #3 #10 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:53]
gap () () 
          v25(R) = X64Movsd : MRI v63(R) [immediate:52]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #3 #9 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:51]
gap () () 
          v57(R) = X64MovqDecompressAnyTagged : MRI v61(R) [immediate:50]
gap () () 
          X64Test32 && deoptimize if equal v57 #1 #8 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:49]
gap () () 
          X64Cmp32 : MRI && branch if equal v57(R) [immediate:46] v53(R) [immediate:47] [immediate:48]
gap () () 
          ArchJmp [immediate:45]
gap () () 
          [constant:60] = ArchNop
gap () () 
          [constant:59] = ArchNop
gap () () 
          X64Push v57(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v59(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v60(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:44] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:43]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v57(R) [immediate:41] v48(R) #7 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:42]
gap () () 
          v54(R) = X64MovqDecompressTaggedPointer : MRI v57(R) [immediate:40]
gap () () 
          v56(R) = X64MovqDecompressTaggedSigned : MRI v57(R) [immediate:39]
gap () (v55(R) = v56(-);) 
          v55(1) = X64Sar32 v55(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v37(R) v55 #6 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:38]
gap () () 
          v24(R) = X64Movsd : MR8I v54(R) v37(R) [immediate:37]
gap () () 
          X64Test32 && deoptimize if equal v34 #1 #5 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:36]
gap () () 
          X64Cmp32 : MRI && branch if equal v34(R) [immediate:33] v53(R) [immediate:34] [immediate:35]
gap () () 
          ArchJmp [immediate:32]
gap () () 
          [constant:52] = ArchNop
gap () () 
          [constant:50] = ArchNop
gap () () 
          X64Push v34(-)
gap () () 
          X64Push v48(-)
gap () ([rbx|R|w64] = v50(-); [rax|R|w64] = v51(-); [rsi|R|w64] = v52(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:31] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:30]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v34(R) [immediate:28] v48(R) #4 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:29]
gap () () 
          v39(R) = X64MovqDecompressTaggedPointer : MRI v34(R) [immediate:27]
gap () () 
          v47(R) = X64MovqDecompressTaggedSigned : MRI v34(R) [immediate:26]
gap () (v38(R) = v47(-);) 
          v38(1) = X64Sar32 v38(R) #1
gap () () 
          v46(R) = X64MovqDecompressTaggedSigned : MRI v39(R) [immediate:25]
gap () (v44(R) = v46(-);) 
          v44(1) = X64Sar32 v44(R) #1
gap () () 
          v45(R) = X64Lea32 : MRI v38(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v37(R) v45 #3 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:24]
gap () () 
          X64Cmp32 && branch if unsigned less than v37(R) v44 [immediate:22] [immediate:23]
gap () () 
          v43(R) = X64Lea32 : MR1 v37(R) v37(R)
gap () () 
          [constant:42] = ArchNop
gap () ([rax|R|t] = v34(-); [rbx|R|w32] = v43(-); [rsi|R|w64] = v42(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:21] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v40(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v40 #1 #2 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v11(-) v37(-) [immediate:20]
gap () (v16 = v40(-);) 
          ArchJmp [immediate:19]
gap () (v16 = v39(-);) 
          ArchJmp [immediate:18]
gap () () 
          v13(R) = X64Lea32 : MRI v37(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v37(R) v38 [immediate:16] [immediate:17]
gap () () 
          v36(R) = X64Lea32 : MR1 v13(R) v13(R)
gap () () 
          X64MovqCompressTagged : MRI v34(R) [immediate:15] v36(R)
gap () () 
          ArchJmp [immediate:14]
gap () () 
          ArchJmp [immediate:13]
gap () () 
          v26(R) = AVXFloat64Mul v32(R) v33
gap () () 
          v27(R) = AVXFloat64Mul v30(R) v31
gap () () 
          v22(R) = AVXFloat64Mul v28(R) v29
gap () () 
          v23(R) = AVXFloat64Add v26(R) v27
gap () () 
          v20(R) = AVXFloat64Mul v24(R) v25
gap () () 
          v21(R) = AVXFloat64Add v22(R) v23
gap () () 
          v19(R) = AVXFloat64Add v20(R) v21
gap () () 
          X64Movsd : MR8I v16(R) v37(R) [immediate:12] v19(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:10] [immediate:11]
gap () () 
          [constant:15] = ArchNop
gap () () 
          [constant:14] = ArchNop
gap () ([rbx|R|w64] = v14(-); [rax|R|w64] = v9(-); [rsi|R|t] = v15(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:9] #-1 #1 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) v11(S) v13(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:8]
gap () () 
          ArchJmp [immediate:7]
gap () (v37 = v13(-);) 
          ArchJmp [immediate:6]
gap () () 
          v7(R) = X64Lea32 : MRI v11(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:4] [immediate:5]
gap () () 
          [constant:10] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () ([rbx|R|w64] = v8(-); [rax|R|w64] = v9(-); [rsi|R|t] = v10(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:3] #-1 #0 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) v7(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:2]
gap () () 
          ArchJmp [immediate:1]
gap () (v11 = v7(-);) 
          ArchJmp [immediate:0]
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
gap () () 
          ArchDebugBreak
gap () () 
          ArchThrowTerminator
print sib pairs
2, v11, v70
2, v11, v70
2, v11, v103
2, v11, v156
2, v11, v156
2, v11, v189
3, v37, v72
3, v37, v16
3, v37, v54
3, v37, v81
3, v37, v88
print modrm pairs
1, v13, v37
1, v45, v38
1, v46, v39
1, v47, v34
1, v39, v34
1, v53, v34
1, v56, v57
1, v48, v57
1, v53, v57
1, v25, v63
1, v65, v66
1, v63, v66
1, v48, v66
1, v53, v66
1, v72, v75
1, v123, v173
1, v197, v195
1, v75, v61
1, v124, v164
1, v83, v84
1, v81, v84
1, v84, v61
1, v90, v91
1, v88, v91
1, v48, v91
1, v207, v208
1, v53, v91
1, v61, v5
1, v53, v127
1, v202, v192
1, v79, v97
1, v105, v0
1, v135, v128
1, v48, v169
1, v136, v127
1, v129, v127
1, v182, v183
1, v117, v140
1, v31, v79
1, v142, v143
1, v140, v143
1, v29, v79
1, v36, v34
1, v48, v127
1, v48, v143
1, v103, v0
1, v53, v143
1, v143, v147
1, v151, v152
1, v195, v204
1, v125, v166
1, v53, v152
1, v121, v157
1, v48, v75
1, v159, v160
1, v48, v160
1, v160, v147
1, v48, v84
1, v194, v195
1, v149, v152
1, v48, v152
1, v33, v79
1, v53, v169
1, v57, v61
1, v157, v160
1, v208, v210
1, v191, v0
1, v169, v147
1, v112, v110
1, v126, v164
1, v200, v192
1, v166, v169
1, v122, v164
1, v175, v176
1, v74, v75
1, v203, v204
1, v54, v57
1, v204, v206
1, v53, v176
1, v181, v5
1, v95, v5
1, v176, v147
1, v96, v97
1, v147, v5
1, v173, v176
1, v209, v210
1, v164, v183
1, v53, v97
1, v48, v183
1, v188, v4
1, v189, v0
1, v7, v11
1, v53, v75
1, v70, v4
1, v192, v0
1, v206, v208
1, v181, v4
1, v181, v0
1, v91, v61
1, v48, v97
1, v211, v212
1, v199, v192
1, v48, v198
1, v48, v199
1, v48, v200
1, v48, v201
1, v214, v216
1, v48, v34
1, v53, v160
1, v48, v176
1, v53, v84
1, v134, v129
1, v205, v206
1, v156, v4
1, v53, v183
1, v198, v192
1, v118, v149
1, v180, v5
1, v193, v198
1, v193, v199
1, v193, v200
1, v193, v0
1, v193, v201
1, v201, v192
1, v168, v169
1, v210, v212
1, v102, v4
1, v218, v213
assign xmm0 to v124:0
assign 0 to v124:0
assign xmm0 to v124:2
assign 0 to v124:2
assign xmm1 to v123:0
assign 1 to v123:0
assign xmm2 to v126:0
assign 2 to v126:0
blocking v123 pick register xmm1
assign xmm2 to v126:2
assign 2 to v126:2
assign xmm1 to v123:3
assign 1 to v123:3
assign xmm0 to v124:4
assign 0 to v124:4
assign xmm4 to v125:0
assign 4 to v125:0
assign xmm5 to v122:0
assign 5 to v122:0
blocking v125 pick register xmm4
assign xmm5 to v122:2
assign 5 to v122:2
assign xmm4 to v125:3
assign 4 to v125:3
assign xmm0 to v124:6
assign 0 to v124:6
assign xmm1 to v123:5
assign 1 to v123:5
assign xmm2 to v126:4
assign 2 to v126:4
assign xmm8 to v121:0
assign 8 to v121:0
blocking v121 pick register xmm8
assign xmm8 to v121:3
assign 8 to v121:3
assign xmm2 to v126:6
assign 2 to v126:6
assign xmm1 to v123:7
assign 1 to v123:7
assign xmm0 to v124:8
assign 0 to v124:8
assign xmm4 to v125:5
assign 4 to v125:5
assign xmm5 to v122:4
assign 5 to v122:4
assign xmm6 to v118:0
assign 6 to v118:0
assign xmm6 to v118:2
assign 6 to v118:2
assign xmm5 to v122:6
assign 5 to v122:6
assign xmm4 to v125:7
assign 4 to v125:7
assign xmm0 to v124:10
assign 0 to v124:10
assign xmm1 to v123:9
assign 1 to v123:9
assign xmm2 to v126:8
assign 2 to v126:8
assign xmm8 to v121:5
assign 8 to v121:5
assign xmm9 to v117:0
assign 9 to v117:0
blocking v117 pick register xmm9
assign xmm9 to v117:3
assign 9 to v117:3
assign xmm8 to v121:7
assign 8 to v121:7
assign xmm2 to v126:10
assign 2 to v126:10
assign xmm1 to v123:11
assign 1 to v123:11
assign xmm0 to v124:12
assign 0 to v124:12
assign xmm4 to v125:9
assign 4 to v125:9
assign xmm5 to v122:8
assign 5 to v122:8
assign xmm6 to v118:4
assign 6 to v118:4
assign xmm6 to v118:6
assign 6 to v118:6
assign xmm5 to v122:10
assign 5 to v122:10
assign xmm4 to v125:11
assign 4 to v125:11
assign xmm0 to v124:14
assign 0 to v124:14
assign xmm1 to v123:13
assign 1 to v123:13
assign xmm2 to v126:12
assign 2 to v126:12
assign xmm8 to v121:9
assign 8 to v121:9
assign xmm9 to v117:5
assign 9 to v117:5
assign xmm4 to v125:2
assign 4 to v125:2
assign xmm2 to v119:0
assign 2 to v119:0
assign xmm1 to v123:2
assign 1 to v123:2
assign xmm0 to v120:0
assign 0 to v120:0
assign xmm8 to v121:2
assign 8 to v121:2
assign xmm1 to v115:0
assign 1 to v115:0
assign xmm0 to v116:0
assign 0 to v116:0
assign xmm9 to v117:2
assign 9 to v117:2
assign xmm2 to v113:0
assign 2 to v113:0
assign xmm0 to v114:0
assign 0 to v114:0
assign xmm0 to v112:0
assign 0 to v112:0
assign xmm0 to v31:0
assign 0 to v31:0
assign xmm0 to v31:2
assign 0 to v31:2
assign xmm1 to v30:0
assign 1 to v30:0
assign xmm2 to v33:0
assign 2 to v33:0
blocking v30 pick register xmm1
assign xmm2 to v33:2
assign 2 to v33:2
assign xmm1 to v30:3
assign 1 to v30:3
assign xmm0 to v31:4
assign 0 to v31:4
assign xmm4 to v32:0
assign 4 to v32:0
assign xmm5 to v29:0
assign 5 to v29:0
blocking v32 pick register xmm4
assign xmm5 to v29:2
assign 5 to v29:2
assign xmm4 to v32:3
assign 4 to v32:3
assign xmm0 to v31:6
assign 0 to v31:6
assign xmm1 to v30:5
assign 1 to v30:5
assign xmm2 to v33:4
assign 2 to v33:4
assign xmm8 to v28:0
assign 8 to v28:0
blocking v28 pick register xmm8
assign xmm8 to v28:3
assign 8 to v28:3
assign xmm2 to v33:6
assign 2 to v33:6
assign xmm1 to v30:7
assign 1 to v30:7
assign xmm0 to v31:8
assign 0 to v31:8
assign xmm4 to v32:5
assign 4 to v32:5
assign xmm5 to v29:4
assign 5 to v29:4
assign xmm6 to v25:0
assign 6 to v25:0
assign xmm6 to v25:2
assign 6 to v25:2
assign xmm5 to v29:6
assign 5 to v29:6
assign xmm4 to v32:7
assign 4 to v32:7
assign xmm0 to v31:10
assign 0 to v31:10
assign xmm1 to v30:9
assign 1 to v30:9
assign xmm2 to v33:8
assign 2 to v33:8
assign xmm8 to v28:5
assign 8 to v28:5
assign xmm9 to v24:0
assign 9 to v24:0
blocking v24 pick register xmm9
assign xmm9 to v24:3
assign 9 to v24:3
assign xmm8 to v28:7
assign 8 to v28:7
assign xmm2 to v33:10
assign 2 to v33:10
assign xmm1 to v30:11
assign 1 to v30:11
assign xmm0 to v31:12
assign 0 to v31:12
assign xmm4 to v32:9
assign 4 to v32:9
assign xmm5 to v29:8
assign 5 to v29:8
assign xmm6 to v25:4
assign 6 to v25:4
assign xmm6 to v25:6
assign 6 to v25:6
assign xmm5 to v29:10
assign 5 to v29:10
assign xmm4 to v32:11
assign 4 to v32:11
assign xmm0 to v31:14
assign 0 to v31:14
assign xmm1 to v30:13
assign 1 to v30:13
assign xmm2 to v33:12
assign 2 to v33:12
assign xmm8 to v28:9
assign 8 to v28:9
assign xmm9 to v24:5
assign 9 to v24:5
assign xmm4 to v32:2
assign 4 to v32:2
assign xmm2 to v26:0
assign 2 to v26:0
assign xmm1 to v30:2
assign 1 to v30:2
assign xmm0 to v27:0
assign 0 to v27:0
assign xmm8 to v28:2
assign 8 to v28:2
assign xmm1 to v22:0
assign 1 to v22:0
assign xmm0 to v23:0
assign 0 to v23:0
assign xmm9 to v24:2
assign 9 to v24:2
assign xmm2 to v20:0
assign 2 to v20:0
assign xmm0 to v21:0
assign 0 to v21:0
assign xmm0 to v19:0
assign 0 to v19:0
spill count : 76
--- Raw source ---
(M1, M2) {
      var M = [[],[],[],[]];
      var i = 0;
      var j = 0;
      for (; i < 4; i++) {
        j = 0;
        for (; j < 4; j++) M[i][j] = M1[i][0] * M2[0][j] + M1[i][1] * M2[1][j] + M1[i][2] * M2[2][j] + M1[i][3] * M2[3][j];
      }
      return M;
    }


--- Optimized code ---
optimization_id = 5
source_position = 2472
kind = TURBOFAN
name = MMulti
stack_slots = 21
compiler = turbofan
address = 0x19db00086f81

Instructions (size = 5176)
0x19db00086fc0     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db00086fc7     7  483bd9         REX.W cmpq rbx,rcx
0x19db00086fca     a  7418           jz 0x19db00086fe4  <+0x24>
0x19db00086fcc     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db00086fd6    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db00086fe0    20  41ffd2         call r10
0x19db00086fe3    23  cc             int3l
0x19db00086fe4    24  8b59d0         movl rbx,[rcx-0x30]
0x19db00086fe7    27  4903dd         REX.W addq rbx,r13
0x19db00086fea    2a  f6430701       testb [rbx+0x7],0x1
0x19db00086fee    2e  740d           jz 0x19db00086ffd  <+0x3d>
0x19db00086ff0    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db00086ffa    3a  41ffe2         jmp r10
0x19db00086ffd    3d  55             push rbp
0x19db00086ffe    3e  4889e5         REX.W movq rbp,rsp
0x19db00087001    41  56             push rsi
0x19db00087002    42  57             push rdi
0x19db00087003    43  50             push rax
0x19db00087004    44  4881ec80000000 REX.W subq rsp,0x80
0x19db0008700b    4b  488975d0       REX.W movq [rbp-0x30],rsi
0x19db0008700f    4f  48897dd8       REX.W movq [rbp-0x28],rdi
0x19db00087013    53  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00087017    57  0f86cf070000   jna 0x19db000877ec  <+0x82c>
0x19db0008701d    5d  48b9f87d6d5555550000 REX.W movq rcx,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db00087027    67  488b39         REX.W movq rdi,[rcx]
0x19db0008702a    6a  4c8d4768       REX.W leaq r8,[rdi+0x68]
0x19db0008702e    6e  49b9007e6d5555550000 REX.W movq r9,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db00087038    78  4d3901         REX.W cmpq [r9],r8
0x19db0008703b    7b  0f86e1070000   jna 0x19db00087822  <+0x862>
0x19db00087041    81  4c8d4710       REX.W leaq r8,[rdi+0x10]
0x19db00087045    85  4c8901         REX.W movq [rcx],r8
0x19db00087048    88  4883c701       REX.W addq rdi,0x1
0x19db0008704c    8c  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087056    96  44894fff       movl [rdi-0x1],r9
0x19db0008705a    9a  4d8ba558010000 REX.W movq r12,[r13+0x158] (root (empty_fixed_array))
0x19db00087061    a1  44896703       movl [rdi+0x3],r12
0x19db00087065    a5  44896707       movl [rdi+0x7],r12
0x19db00087069    a9  c7470b00000000 movl [rdi+0xb],0x0
0x19db00087070    b0  4d8d7010       REX.W leaq r14,[r8+0x10]
0x19db00087074    b4  4c8931         REX.W movq [rcx],r14
0x19db00087077    b7  4983c001       REX.W addq r8,0x1
0x19db0008707b    bb  458948ff       movl [r8-0x1],r9
0x19db0008707f    bf  45896003       movl [r8+0x3],r12
0x19db00087083    c3  45896007       movl [r8+0x7],r12
0x19db00087087    c7  41c7400b00000000 movl [r8+0xb],0x0
0x19db0008708f    cf  4d8d7e10       REX.W leaq r15,[r14+0x10]
0x19db00087093    d3  4c8939         REX.W movq [rcx],r15
0x19db00087096    d6  4983c601       REX.W addq r14,0x1
0x19db0008709a    da  45894eff       movl [r14-0x1],r9
0x19db0008709e    de  45896603       movl [r14+0x3],r12
0x19db000870a2    e2  45896607       movl [r14+0x7],r12
0x19db000870a6    e6  41c7460b00000000 movl [r14+0xb],0x0
0x19db000870ae    ee  498d4710       REX.W leaq rax,[r15+0x10]
0x19db000870b2    f2  488901         REX.W movq [rcx],rax
0x19db000870b5    f5  4983c701       REX.W addq r15,0x1
0x19db000870b9    f9  45894fff       movl [r15-0x1],r9
0x19db000870bd    fd  45896703       movl [r15+0x3],r12
0x19db000870c1   101  45896707       movl [r15+0x7],r12
0x19db000870c5   105  41c7470b00000000 movl [r15+0xb],0x0
0x19db000870cd   10d  488d5018       REX.W leaq rdx,[rax+0x18]
0x19db000870d1   111  488911         REX.W movq [rcx],rdx
0x19db000870d4   114  4883c001       REX.W addq rax,0x1
0x19db000870d8   118  498bb5d0000000 REX.W movq rsi,[r13+0xd0] (root (fixed_array_map))
0x19db000870df   11f  8970ff         movl [rax-0x1],rsi
0x19db000870e2   122  c7400308000000 movl [rax+0x3],0x8
0x19db000870e9   129  897807         movl [rax+0x7],rdi
0x19db000870ec   12c  4489400b       movl [rax+0xb],r8
0x19db000870f0   130  4489700f       movl [rax+0xf],r14
0x19db000870f4   134  44897813       movl [rax+0x13],r15
0x19db000870f8   138  488d7a10       REX.W leaq rdi,[rdx+0x10]
0x19db000870fc   13c  488939         REX.W movq [rcx],rdi
0x19db000870ff   13f  488d4a01       REX.W leaq rcx,[rdx+0x1]
0x19db00087103   143  bfa59f3008     movl rdi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00087108   148  8979ff         movl [rcx-0x1],rdi
0x19db0008710b   14b  44896103       movl [rcx+0x3],r12
0x19db0008710f   14f  894107         movl [rcx+0x7],rax
0x19db00087112   152  c7410b08000000 movl [rcx+0xb],0x8
0x19db00087119   159  48894de0       REX.W movq [rbp-0x20],rcx
0x19db0008711d   15d  33c0           xorl rax,rax
0x19db0008711f   15f  33db           xorl rbx,rbx
0x19db00087121   161  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087125   165  4c8b7520       REX.W movq r14,[rbp+0x20]
0x19db00087129   169  4c8bc0         REX.W movq r8,rax
0x19db0008712c   16c  e91a000000     jmp 0x19db0008714b  <+0x18b>
0x19db00087131   171  660f1f840000000000 nop
0x19db0008713a   17a  660f1f440000   nop
0x19db00087140   180  bfa59f3008     movl rdi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00087145   185  488bc8         REX.W movq rcx,rax
0x19db00087148   188  4d89e6         REX.W movq r14,r12
0x19db0008714b   18b  4183f804       cmpl r8,0x4
0x19db0008714f   18f  0f8379060000   jnc 0x19db000877ce  <+0x80e>
0x19db00087155   195  448b6107       movl r12,[rcx+0x7]
0x19db00087159   199  4d03e5         REX.W addq r12,r13
0x19db0008715c   19c  448b790b       movl r15,[rcx+0xb]
0x19db00087160   1a0  41d1ff         sarl r15, 1
0x19db00087163   1a3  453bc7         cmpl r8,r15
0x19db00087166   1a6  0f83b6100000   jnc 0x19db00088222  <+0x1262>
0x19db0008716c   1ac  478b648407     movl r12,[r12+r8*4+0x7]
0x19db00087171   1b1  4d03e5         REX.W addq r12,r13
0x19db00087174   1b4  41f6c301       testb r11,0x1
0x19db00087178   1b8  0f84ab100000   jz 0x19db00088229  <+0x1269>
0x19db0008717e   1be  41397bff       cmpl [r11-0x1],rdi
0x19db00087182   1c2  0f85a8100000   jnz 0x19db00088230  <+0x1270>
0x19db00087188   1c8  458b7b07       movl r15,[r11+0x7]
0x19db0008718c   1cc  4d03fd         REX.W addq r15,r13
0x19db0008718f   1cf  418b530b       movl rdx,[r11+0xb]
0x19db00087193   1d3  d1fa           sarl rdx, 1
0x19db00087195   1d5  443bc2         cmpl r8,rdx
0x19db00087198   1d8  0f8399100000   jnc 0x19db00088237  <+0x1277>
0x19db0008719e   1de  438b548707     movl rdx,[r15+r8*4+0x7]
0x19db000871a3   1e3  4903d5         REX.W addq rdx,r13
0x19db000871a6   1e6  f6c201         testb rdx,0x1
0x19db000871a9   1e9  0f848f100000   jz 0x19db0008823e  <+0x127e>
0x19db000871af   1ef  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db000871b3   1f3  4c896580       REX.W movq [rbp-0x80],r12
0x19db000871b7   1f7  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000871bc   1fc  394aff         cmpl [rdx-0x1],rcx
0x19db000871bf   1ff  0f847f060000   jz 0x19db00087844  <+0x884>
0x19db000871c5   205  44394aff       cmpl [rdx-0x1],r9
0x19db000871c9   209  0f8576100000   jnz 0x19db00088245  <+0x1285>
0x19db000871cf   20f  8b7207         movl rsi,[rdx+0x7]
0x19db000871d2   212  4903f5         REX.W addq rsi,r13
0x19db000871d5   215  8b520b         movl rdx,[rdx+0xb]
0x19db000871d8   218  d1fa           sarl rdx, 1
0x19db000871da   21a  83fa00         cmpl rdx,0x0
0x19db000871dd   21d  0f8669100000   jna 0x19db0008824c  <+0x128c>
0x19db000871e3   223  c5fb104607     vmovsd xmm0,[rsi+0x7]
0x19db000871e8   228  41f6c601       testb r14,0x1
0x19db000871ec   22c  0f8461100000   jz 0x19db00088253  <+0x1293>
0x19db000871f2   232  41397eff       cmpl [r14-0x1],rdi
0x19db000871f6   236  0f855e100000   jnz 0x19db0008825a  <+0x129a>
0x19db000871fc   23c  418b7e07       movl rdi,[r14+0x7]
0x19db00087200   240  4903fd         REX.W addq rdi,r13
0x19db00087203   243  418b460b       movl rax,[r14+0xb]
0x19db00087207   247  d1f8           sarl rax, 1
0x19db00087209   249  83f800         cmpl rax,0x0
0x19db0008720c   24c  0f864f100000   jna 0x19db00088261  <+0x12a1>
0x19db00087212   252  448b7707       movl r14,[rdi+0x7]
0x19db00087216   256  4d03f5         REX.W addq r14,r13
0x19db00087219   259  41f6c601       testb r14,0x1
0x19db0008721d   25d  0f8445100000   jz 0x19db00088268  <+0x12a8>
0x19db00087223   263  41394eff       cmpl [r14-0x1],rcx
0x19db00087227   267  0f8470060000   jz 0x19db0008789d  <+0x8dd>
0x19db0008722d   26d  45394eff       cmpl [r14-0x1],r9
0x19db00087231   271  0f8538100000   jnz 0x19db0008826f  <+0x12af>
0x19db00087237   277  458b6607       movl r12,[r14+0x7]
0x19db0008723b   27b  4d03e5         REX.W addq r12,r13
0x19db0008723e   27e  458b760b       movl r14,[r14+0xb]
0x19db00087242   282  41d1fe         sarl r14, 1
0x19db00087245   285  4183fe00       cmpl r14,0x0
0x19db00087249   289  0f8627100000   jna 0x19db00088276  <+0x12b6>
0x19db0008724f   28f  c4c17b104c2407 vmovsd xmm1,[r12+0x7]
0x19db00087256   296  83fa01         cmpl rdx,0x1
0x19db00087259   299  0f861e100000   jna 0x19db0008827d  <+0x12bd>
0x19db0008725f   29f  c5fb10560f     vmovsd xmm2,[rsi+0xf]
0x19db00087264   2a4  83f801         cmpl rax,0x1
0x19db00087267   2a7  0f8617100000   jna 0x19db00088284  <+0x12c4>
0x19db0008726d   2ad  448b670b       movl r12,[rdi+0xb]
0x19db00087271   2b1  4d03e5         REX.W addq r12,r13
0x19db00087274   2b4  41f6c401       testb r12,0x1
0x19db00087278   2b8  0f840d100000   jz 0x19db0008828b  <+0x12cb>
0x19db0008727e   2be  41394c24ff     cmpl [r12-0x1],rcx
0x19db00087283   2c3  0f848e060000   jz 0x19db00087917  <+0x957>
0x19db00087289   2c9  45394c24ff     cmpl [r12-0x1],r9
0x19db0008728e   2ce  0f85fe0f0000   jnz 0x19db00088292  <+0x12d2>
0x19db00087294   2d4  458b442407     movl r8,[r12+0x7]
0x19db00087299   2d9  4d03c5         REX.W addq r8,r13
0x19db0008729c   2dc  458b64240b     movl r12,[r12+0xb]
0x19db000872a1   2e1  41d1fc         sarl r12, 1
0x19db000872a4   2e4  4183fc00       cmpl r12,0x0
0x19db000872a8   2e8  0f86eb0f0000   jna 0x19db00088299  <+0x12d9>
0x19db000872ae   2ee  c4c17b106007   vmovsd xmm4,[r8+0x7]
0x19db000872b4   2f4  83fa02         cmpl rdx,0x2
0x19db000872b7   2f7  0f86e30f0000   jna 0x19db000882a0  <+0x12e0>
0x19db000872bd   2fd  c5fb106e17     vmovsd xmm5,[rsi+0x17]
0x19db000872c2   302  83f802         cmpl rax,0x2
0x19db000872c5   305  0f86dc0f0000   jna 0x19db000882a7  <+0x12e7>
0x19db000872cb   30b  448b470f       movl r8,[rdi+0xf]
0x19db000872cf   30f  4d03c5         REX.W addq r8,r13
0x19db000872d2   312  41f6c001       testb r8,0x1
0x19db000872d6   316  0f84d20f0000   jz 0x19db000882ae  <+0x12ee>
0x19db000872dc   31c  413948ff       cmpl [r8-0x1],rcx
0x19db000872e0   320  0f84c2060000   jz 0x19db000879a8  <+0x9e8>
0x19db000872e6   326  453948ff       cmpl [r8-0x1],r9
0x19db000872ea   32a  0f85c50f0000   jnz 0x19db000882b5  <+0x12f5>
0x19db000872f0   330  458b6007       movl r12,[r8+0x7]
0x19db000872f4   334  4d03e5         REX.W addq r12,r13
0x19db000872f7   337  458b400b       movl r8,[r8+0xb]
0x19db000872fb   33b  41d1f8         sarl r8, 1
0x19db000872fe   33e  4183f800       cmpl r8,0x0
0x19db00087302   342  0f86b40f0000   jna 0x19db000882bc  <+0x12fc>
0x19db00087308   348  c4417b10442407 vmovsd xmm8,[r12+0x7]
0x19db0008730f   34f  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087313   353  478b648707     movl r12,[r15+r8*4+0x7]
0x19db00087318   358  4d03e5         REX.W addq r12,r13
0x19db0008731b   35b  41f6c401       testb r12,0x1
0x19db0008731f   35f  0f849e0f0000   jz 0x19db000882c3  <+0x1303>
0x19db00087325   365  41394c24ff     cmpl [r12-0x1],rcx
0x19db0008732a   36a  0f840c070000   jz 0x19db00087a3c  <+0xa7c>
0x19db00087330   370  45394c24ff     cmpl [r12-0x1],r9
0x19db00087335   375  0f858f0f0000   jnz 0x19db000882ca  <+0x130a>
0x19db0008733b   37b  418b542407     movl rdx,[r12+0x7]
0x19db00087340   380  4903d5         REX.W addq rdx,r13
0x19db00087343   383  458b64240b     movl r12,[r12+0xb]
0x19db00087348   388  41d1fc         sarl r12, 1
0x19db0008734b   38b  4183fc03       cmpl r12,0x3
0x19db0008734f   38f  0f867c0f0000   jna 0x19db000882d1  <+0x1311>
0x19db00087355   395  c5fb10721f     vmovsd xmm6,[rdx+0x1f]
0x19db0008735a   39a  83f803         cmpl rax,0x3
0x19db0008735d   39d  0f86750f0000   jna 0x19db000882d8  <+0x1318>
0x19db00087363   3a3  8b7f13         movl rdi,[rdi+0x13]
0x19db00087366   3a6  4903fd         REX.W addq rdi,r13
0x19db00087369   3a9  40f6c701       testb rdi,0x1
0x19db0008736d   3ad  0f846c0f0000   jz 0x19db000882df  <+0x131f>
0x19db00087373   3b3  394fff         cmpl [rdi-0x1],rcx
0x19db00087376   3b6  0f845a070000   jz 0x19db00087ad6  <+0xb16>
0x19db0008737c   3bc  44394fff       cmpl [rdi-0x1],r9
0x19db00087380   3c0  0f85600f0000   jnz 0x19db000882e6  <+0x1326>
0x19db00087386   3c6  448b6707       movl r12,[rdi+0x7]
0x19db0008738a   3ca  4d03e5         REX.W addq r12,r13
0x19db0008738d   3cd  8b7f0b         movl rdi,[rdi+0xb]
0x19db00087390   3d0  d1ff           sarl rdi, 1
0x19db00087392   3d2  83ff00         cmpl rdi,0x0
0x19db00087395   3d5  0f86520f0000   jna 0x19db000882ed  <+0x132d>
0x19db0008739b   3db  c4417b104c2407 vmovsd xmm9,[r12+0x7]
0x19db000873a2   3e2  f6458001       testb [rbp-0x80],0x1
0x19db000873a6   3e6  0f84480f0000   jz 0x19db000882f4  <+0x1334>
0x19db000873ac   3ec  4c8b6580       REX.W movq r12,[rbp-0x80]
0x19db000873b0   3f0  41394c24ff     cmpl [r12-0x1],rcx
0x19db000873b5   3f5  0f84a5070000   jz 0x19db00087b60  <+0xba0>
0x19db000873bb   3fb  45394c24ff     cmpl [r12-0x1],r9
0x19db000873c0   400  0f85350f0000   jnz 0x19db000882fb  <+0x133b>
0x19db000873c6   406  418b442407     movl rax,[r12+0x7]
0x19db000873cb   40b  4903c5         REX.W addq rax,r13
0x19db000873ce   40e  418b54240b     movl rdx,[r12+0xb]
0x19db000873d3   413  8b7803         movl rdi,[rax+0x3]
0x19db000873d6   416  d1fa           sarl rdx, 1
0x19db000873d8   418  448d7201       leal r14,[rdx+0x1]
0x19db000873dc   41c  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db000873e6   426  4d3bd6         REX.W cmpq r10,r14
0x19db000873e9   429  7715           ja 0x19db00087400  <+0x440>
0x19db000873eb   42b  48ba0200000000000000 REX.W movq rdx,0x2
0x19db000873f5   435  4c8b15dcfbffff REX.W movq r10,[rip+0xfffffbdc]
0x19db000873fc   43c  41ffd2         call r10
0x19db000873ff   43f  cc             int3l
0x19db00087400   440  4183fe00       cmpl r14,0x0
0x19db00087404   444  0f86160e0000   jna 0x19db00088220  <+0x1260>
0x19db0008740a   44a  d1ff           sarl rdi, 1
0x19db0008740c   44c  83ff00         cmpl rdi,0x0
0x19db0008740f   44f  0f86dc070000   jna 0x19db00087bf1  <+0xc31>
0x19db00087415   455  83fa00         cmpl rdx,0x0
0x19db00087418   458  0f8709000000   ja 0x19db00087427  <+0x467>
0x19db0008741e   45e  41c744240b02000000 movl [r12+0xb],0x2
0x19db00087427   467  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db0008742b   46b  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db0008742f   46f  c5bb59cd       vmulsd xmm1,xmm8,xmm5
0x19db00087433   473  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00087437   477  c5b359d6       vmulsd xmm2,xmm9,xmm6
0x19db0008743b   47b  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db0008743f   47f  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00087443   483  c5fb114007     vmovsd [rax+0x7],xmm0
0x19db00087448   488  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008744c   48c  0f863c080000   jna 0x19db00087c8e  <+0xcce>
0x19db00087452   492  bf01000000     movl rdi,0x1
0x19db00087457   497  e907000000     jmp 0x19db00087463  <+0x4a3>
0x19db0008745c   49c  0f1f4000       nop
0x19db00087460   4a0  498bff         REX.W movq rdi,r15
0x19db00087463   4a3  488b45e0       REX.W movq rax,[rbp-0x20]
0x19db00087467   4a7  4c8b6520       REX.W movq r12,[rbp+0x20]
0x19db0008746b   4ab  83ff04         cmpl rdi,0x4
0x19db0008746e   4ae  0f8329030000   jnc 0x19db0008779d  <+0x7dd>
0x19db00087474   4b4  448b7007       movl r14,[rax+0x7]
0x19db00087478   4b8  4d03f5         REX.W addq r14,r13
0x19db0008747b   4bb  448b780b       movl r15,[rax+0xb]
0x19db0008747f   4bf  41d1ff         sarl r15, 1
0x19db00087482   4c2  453bc7         cmpl r8,r15
0x19db00087485   4c5  0f83770e0000   jnc 0x19db00088302  <+0x1342>
0x19db0008748b   4cb  438b548607     movl rdx,[r14+r8*4+0x7]
0x19db00087490   4d0  4903d5         REX.W addq rdx,r13
0x19db00087493   4d3  458b7307       movl r14,[r11+0x7]
0x19db00087497   4d7  4d03f5         REX.W addq r14,r13
0x19db0008749a   4da  458b7b0b       movl r15,[r11+0xb]
0x19db0008749e   4de  41d1ff         sarl r15, 1
0x19db000874a1   4e1  453bc7         cmpl r8,r15
0x19db000874a4   4e4  0f835f0e0000   jnc 0x19db00088309  <+0x1349>
0x19db000874aa   4ea  438b448607     movl rax,[r14+r8*4+0x7]
0x19db000874af   4ef  4903c5         REX.W addq rax,r13
0x19db000874b2   4f2  a801           test al,0x1
0x19db000874b4   4f4  0f84560e0000   jz 0x19db00088310  <+0x1350>
0x19db000874ba   4fa  48899578ffffff REX.W movq [rbp-0x88],rdx
0x19db000874c1   501  3948ff         cmpl [rax-0x1],rcx
0x19db000874c4   504  0f8405080000   jz 0x19db00087ccf  <+0xd0f>
0x19db000874ca   50a  4c8bf8         REX.W movq r15,rax
0x19db000874cd   50d  45394fff       cmpl [r15-0x1],r9
0x19db000874d1   511  0f85400e0000   jnz 0x19db00088317  <+0x1357>
0x19db000874d7   517  418b4707       movl rax,[r15+0x7]
0x19db000874db   51b  4903c5         REX.W addq rax,r13
0x19db000874de   51e  458b7f0b       movl r15,[r15+0xb]
0x19db000874e2   522  41d1ff         sarl r15, 1
0x19db000874e5   525  4183ff00       cmpl r15,0x0
0x19db000874e9   529  0f862f0e0000   jna 0x19db0008831e  <+0x135e>
0x19db000874ef   52f  c5fb104007     vmovsd xmm0,[rax+0x7]
0x19db000874f4   534  418b742407     movl rsi,[r12+0x7]
0x19db000874f9   539  4903f5         REX.W addq rsi,r13
0x19db000874fc   53c  418b54240b     movl rdx,[r12+0xb]
0x19db00087501   541  d1fa           sarl rdx, 1
0x19db00087503   543  83fa00         cmpl rdx,0x0
0x19db00087506   546  0f86190e0000   jna 0x19db00088325  <+0x1365>
0x19db0008750c   54c  448b6607       movl r12,[rsi+0x7]
0x19db00087510   550  4d03e5         REX.W addq r12,r13
0x19db00087513   553  41f6c401       testb r12,0x1
0x19db00087517   557  0f840f0e0000   jz 0x19db0008832c  <+0x136c>
0x19db0008751d   55d  41394c24ff     cmpl [r12-0x1],rcx
0x19db00087522   562  0f8405080000   jz 0x19db00087d2d  <+0xd6d>
0x19db00087528   568  45394c24ff     cmpl [r12-0x1],r9
0x19db0008752d   56d  0f85000e0000   jnz 0x19db00088333  <+0x1373>
0x19db00087533   573  458b442407     movl r8,[r12+0x7]
0x19db00087538   578  4d03c5         REX.W addq r8,r13
0x19db0008753b   57b  458b64240b     movl r12,[r12+0xb]
0x19db00087540   580  41d1fc         sarl r12, 1
0x19db00087543   583  4439e7         cmpl rdi,r12
0x19db00087546   586  0f83ee0d0000   jnc 0x19db0008833a  <+0x137a>
0x19db0008754c   58c  c4c17b104cf807 vmovsd xmm1,[r8+rdi*8+0x7]
0x19db00087553   593  4183ff01       cmpl r15,0x1
0x19db00087557   597  0f86e40d0000   jna 0x19db00088341  <+0x1381>
0x19db0008755d   59d  c5fb10500f     vmovsd xmm2,[rax+0xf]
0x19db00087562   5a2  83fa01         cmpl rdx,0x1
0x19db00087565   5a5  0f86dd0d0000   jna 0x19db00088348  <+0x1388>
0x19db0008756b   5ab  448b460b       movl r8,[rsi+0xb]
0x19db0008756f   5af  4d03c5         REX.W addq r8,r13
0x19db00087572   5b2  41f6c001       testb r8,0x1
0x19db00087576   5b6  0f84d30d0000   jz 0x19db0008834f  <+0x138f>
0x19db0008757c   5bc  413948ff       cmpl [r8-0x1],rcx
0x19db00087580   5c0  0f8429080000   jz 0x19db00087daf  <+0xdef>
0x19db00087586   5c6  453948ff       cmpl [r8-0x1],r9
0x19db0008758a   5ca  0f85c60d0000   jnz 0x19db00088356  <+0x1396>
0x19db00087590   5d0  458b6007       movl r12,[r8+0x7]
0x19db00087594   5d4  4d03e5         REX.W addq r12,r13
0x19db00087597   5d7  458b400b       movl r8,[r8+0xb]
0x19db0008759b   5db  41d1f8         sarl r8, 1
0x19db0008759e   5de  413bf8         cmpl rdi,r8
0x19db000875a1   5e1  0f83b60d0000   jnc 0x19db0008835d  <+0x139d>
0x19db000875a7   5e7  c4c17b1064fc07 vmovsd xmm4,[r12+rdi*8+0x7]
0x19db000875ae   5ee  4183ff02       cmpl r15,0x2
0x19db000875b2   5f2  0f86ac0d0000   jna 0x19db00088364  <+0x13a4>
0x19db000875b8   5f8  4c8bc0         REX.W movq r8,rax
0x19db000875bb   5fb  c4c17b106817   vmovsd xmm5,[r8+0x17]
0x19db000875c1   601  83fa02         cmpl rdx,0x2
0x19db000875c4   604  0f86a10d0000   jna 0x19db0008836b  <+0x13ab>
0x19db000875ca   60a  448b460f       movl r8,[rsi+0xf]
0x19db000875ce   60e  4d03c5         REX.W addq r8,r13
0x19db000875d1   611  41f6c001       testb r8,0x1
0x19db000875d5   615  0f84970d0000   jz 0x19db00088372  <+0x13b2>
0x19db000875db   61b  413948ff       cmpl [r8-0x1],rcx
0x19db000875df   61f  0f845f080000   jz 0x19db00087e44  <+0xe84>
0x19db000875e5   625  453948ff       cmpl [r8-0x1],r9
0x19db000875e9   629  0f858a0d0000   jnz 0x19db00088379  <+0x13b9>
0x19db000875ef   62f  458b6007       movl r12,[r8+0x7]
0x19db000875f3   633  4d03e5         REX.W addq r12,r13
0x19db000875f6   636  458b400b       movl r8,[r8+0xb]
0x19db000875fa   63a  41d1f8         sarl r8, 1
0x19db000875fd   63d  413bf8         cmpl rdi,r8
0x19db00087600   640  0f837a0d0000   jnc 0x19db00088380  <+0x13c0>
0x19db00087606   646  c4417b1044fc07 vmovsd xmm8,[r12+rdi*8+0x7]
0x19db0008760d   64d  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087611   651  478b648607     movl r12,[r14+r8*4+0x7]
0x19db00087616   656  4d03e5         REX.W addq r12,r13
0x19db00087619   659  41f6c401       testb r12,0x1
0x19db0008761d   65d  0f84640d0000   jz 0x19db00088387  <+0x13c7>
0x19db00087623   663  41394c24ff     cmpl [r12-0x1],rcx
0x19db00087628   668  0f84b2080000   jz 0x19db00087ee0  <+0xf20>
0x19db0008762e   66e  45394c24ff     cmpl [r12-0x1],r9
0x19db00087633   673  0f85550d0000   jnz 0x19db0008838e  <+0x13ce>
0x19db00087639   679  418b442407     movl rax,[r12+0x7]
0x19db0008763e   67e  4903c5         REX.W addq rax,r13
0x19db00087641   681  458b64240b     movl r12,[r12+0xb]
0x19db00087646   686  41d1fc         sarl r12, 1
0x19db00087649   689  4183fc03       cmpl r12,0x3
0x19db0008764d   68d  0f86420d0000   jna 0x19db00088395  <+0x13d5>
0x19db00087653   693  c5fb10701f     vmovsd xmm6,[rax+0x1f]
0x19db00087658   698  83fa03         cmpl rdx,0x3
0x19db0008765b   69b  0f863b0d0000   jna 0x19db0008839c  <+0x13dc>
0x19db00087661   6a1  4c8be6         REX.W movq r12,rsi
0x19db00087664   6a4  458b642413     movl r12,[r12+0x13]
0x19db00087669   6a9  4d03e5         REX.W addq r12,r13
0x19db0008766c   6ac  41f6c401       testb r12,0x1
0x19db00087670   6b0  0f842d0d0000   jz 0x19db000883a3  <+0x13e3>
0x19db00087676   6b6  41394c24ff     cmpl [r12-0x1],rcx
0x19db0008767b   6bb  0f8401090000   jz 0x19db00087f82  <+0xfc2>
0x19db00087681   6c1  45394c24ff     cmpl [r12-0x1],r9
0x19db00087686   6c6  0f851e0d0000   jnz 0x19db000883aa  <+0x13ea>
0x19db0008768c   6cc  418b442407     movl rax,[r12+0x7]
0x19db00087691   6d1  4903c5         REX.W addq rax,r13
0x19db00087694   6d4  458b64240b     movl r12,[r12+0xb]
0x19db00087699   6d9  41d1fc         sarl r12, 1
0x19db0008769c   6dc  4439e7         cmpl rdi,r12
0x19db0008769f   6df  0f830c0d0000   jnc 0x19db000883b1  <+0x13f1>
0x19db000876a5   6e5  c57b104cf807   vmovsd xmm9,[rax+rdi*8+0x7]
0x19db000876ab   6eb  f68578ffffff01 testb [rbp-0x88],0x1
0x19db000876b2   6f2  0f84000d0000   jz 0x19db000883b8  <+0x13f8>
0x19db000876b8   6f8  488b9578ffffff REX.W movq rdx,[rbp-0x88]
0x19db000876bf   6ff  394aff         cmpl [rdx-0x1],rcx
0x19db000876c2   702  0f8453090000   jz 0x19db0008801b  <+0x105b>
0x19db000876c8   708  44394aff       cmpl [rdx-0x1],r9
0x19db000876cc   70c  0f85ed0c0000   jnz 0x19db000883bf  <+0x13ff>
0x19db000876d2   712  448b6207       movl r12,[rdx+0x7]
0x19db000876d6   716  4d03e5         REX.W addq r12,r13
0x19db000876d9   719  448b720b       movl r14,[rdx+0xb]
0x19db000876dd   71d  41d1fe         sarl r14, 1
0x19db000876e0   720  418b442403     movl rax,[r12+0x3]
0x19db000876e5   725  d1f8           sarl rax, 1
0x19db000876e7   727  458d7e01       leal r15,[r14+0x1]
0x19db000876eb   72b  4c8b15ecfcffff REX.W movq r10,[rip+0xfffffcec]
0x19db000876f2   732  4d3bd7         REX.W cmpq r10,r15
0x19db000876f5   735  7712           ja 0x19db00087709  <+0x749>
0x19db000876f7   737  488b15effcffff REX.W movq rdx,[rip+0xfffffcef]
0x19db000876fe   73e  4c8b15d3f8ffff REX.W movq r10,[rip+0xfffff8d3]
0x19db00087705   745  41ffd2         call r10
0x19db00087708   748  cc             int3l
0x19db00087709   749  413bff         cmpl rdi,r15
0x19db0008770c   74c  0f83b40c0000   jnc 0x19db000883c6  <+0x1406>
0x19db00087712   752  3bf8           cmpl rdi,rax
0x19db00087714   754  0f83a2090000   jnc 0x19db000880bc  <+0x10fc>
0x19db0008771a   75a  448d7f01       leal r15,[rdi+0x1]
0x19db0008771e   75e  4c8b15b9fcffff REX.W movq r10,[rip+0xfffffcb9]
0x19db00087725   765  4d3bd7         REX.W cmpq r10,r15
0x19db00087728   768  7712           ja 0x19db0008773c  <+0x77c>
0x19db0008772a   76a  488b15bcfcffff REX.W movq rdx,[rip+0xfffffcbc]
0x19db00087731   771  4c8b15a0f8ffff REX.W movq r10,[rip+0xfffff8a0]
0x19db00087738   778  41ffd2         call r10
0x19db0008773b   77b  cc             int3l
0x19db0008773c   77c  413bfe         cmpl rdi,r14
0x19db0008773f   77f  0f8226000000   jc 0x19db0008776b  <+0x7ab>
0x19db00087745   785  478d343f       leal r14,[r15+r15*1]
0x19db00087749   789  4c8b158efcffff REX.W movq r10,[rip+0xfffffc8e]
0x19db00087750   790  4d3bd6         REX.W cmpq r10,r14
0x19db00087753   793  7712           ja 0x19db00087767  <+0x7a7>
0x19db00087755   795  488b1591fcffff REX.W movq rdx,[rip+0xfffffc91]
0x19db0008775c   79c  4c8b1575f8ffff REX.W movq r10,[rip+0xfffff875]
0x19db00087763   7a3  41ffd2         call r10
0x19db00087766   7a6  cc             int3l
0x19db00087767   7a7  4489720b       movl [rdx+0xb],r14
0x19db0008776b   7ab  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db0008776f   7af  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db00087773   7b3  c5bb59cd       vmulsd xmm1,xmm8,xmm5
0x19db00087777   7b7  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db0008777b   7bb  c5b359d6       vmulsd xmm2,xmm9,xmm6
0x19db0008777f   7bf  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db00087783   7c3  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00087787   7c7  c4c17b1144fc07 vmovsd [r12+rdi*8+0x7],xmm0
0x19db0008778e   7ce  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00087792   7d2  0f87c8fcffff   ja 0x19db00087460  <+0x4a0>
0x19db00087798   7d8  e9f5090000     jmp 0x19db00088192  <+0x11d2>
0x19db0008779d   7dd  4183c001       addl r8,0x1
0x19db000877a1   7e1  4c8b1536fcffff REX.W movq r10,[rip+0xfffffc36]
0x19db000877a8   7e8  4d3bd0         REX.W cmpq r10,r8
0x19db000877ab   7eb  7712           ja 0x19db000877bf  <+0x7ff>
0x19db000877ad   7ed  488b1539fcffff REX.W movq rdx,[rip+0xfffffc39]
0x19db000877b4   7f4  4c8b151df8ffff REX.W movq r10,[rip+0xfffff81d]
0x19db000877bb   7fb  41ffd2         call r10
0x19db000877be   7fe  cc             int3l
0x19db000877bf   7ff  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db000877c3   803  0f8777f9ffff   ja 0x19db00087140  <+0x180>
0x19db000877c9   809  e90a0a0000     jmp 0x19db000881d8  <+0x1218>
0x19db000877ce   80e  488bc1         REX.W movq rax,rcx
0x19db000877d1   811  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db000877d5   815  488be5         REX.W movq rsp,rbp
0x19db000877d8   818  5d             pop rbp
0x19db000877d9   819  4883f902       REX.W cmpq rcx,0x2
0x19db000877dd   81d  7f03           jg 0x19db000877e2  <+0x822>
0x19db000877df   81f  c21800         ret 0x18
0x19db000877e2   822  415a           pop r10
0x19db000877e4   824  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db000877e9   829  4152           push r10
0x19db000877eb   82b  c3             retl
0x19db000877ec   82c  48b92000000000000000 REX.W movq rcx,0x20
0x19db000877f6   836  51             push rcx
0x19db000877f7   837  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db00087801   841  b801000000     movl rax,0x1
0x19db00087806   846  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00087810   850  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db0008781a   85a  41ffd2         call r10
0x19db0008781d   85d  e9fbf7ffff     jmp 0x19db0008701d  <+0x5d>
0x19db00087822   862  ba68000000     movl rdx,0x68
0x19db00087827   867  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db00087831   871  41ffd2         call r10
0x19db00087834   874  488d78ff       REX.W leaq rdi,[rax-0x1]
0x19db00087838   878  488b0de0f7ffff REX.W movq rcx,[rip+0xfffff7e0]
0x19db0008783f   87f  e9fdf7ffff     jmp 0x19db00087041  <+0x81>
0x19db00087844   884  52             push rdx
0x19db00087845   885  4151           push r9
0x19db00087847   887  4c897db8       REX.W movq [rbp-0x48],r15
0x19db0008784b   88b  488955c0       REX.W movq [rbp-0x40],rdx
0x19db0008784f   88f  48bb9061fef6ff7f0000 REX.W movq rbx,0x7ffff6fe6190    ;; external reference (Runtime::TransitionElementsKind)
0x19db00087859   899  b802000000     movl rax,0x2
0x19db0008785e   89e  33f6           xorl rsi,rsi
0x19db00087860   8a0  4c8b15abffffff REX.W movq r10,[rip+0xffffffab]
0x19db00087867   8a7  41ffd2         call r10
0x19db0008786a   8aa  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db0008786e   8ae  4c8b7520       REX.W movq r14,[rbp+0x20]
0x19db00087872   8b2  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087876   8b6  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087880   8c0  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087885   8c5  4c8b6580       REX.W movq r12,[rbp-0x80]
0x19db00087889   8c9  33db           xorl rbx,rbx
0x19db0008788b   8cb  4c8b7db8       REX.W movq r15,[rbp-0x48]
0x19db0008788f   8cf  bfa59f3008     movl rdi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00087894   8d4  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db00087898   8d8  e928f9ffff     jmp 0x19db000871c5  <+0x205>
0x19db0008789d   8dd  4156           push r14
0x19db0008789f   8df  4151           push r9
0x19db000878a1   8e1  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db000878a6   8e6  48897dc0       REX.W movq [rbp-0x40],rdi
0x19db000878aa   8ea  48898578ffffff REX.W movq [rbp-0x88],rax
0x19db000878b1   8f1  4c897db8       REX.W movq [rbp-0x48],r15
0x19db000878b5   8f5  488975b0       REX.W movq [rbp-0x50],rsi
0x19db000878b9   8f9  488955a8       REX.W movq [rbp-0x58],rdx
0x19db000878bd   8fd  4c8975a0       REX.W movq [rbp-0x60],r14
0x19db000878c1   901  488b1d89ffffff REX.W movq rbx,[rip+0xffffff89]
0x19db000878c8   908  b802000000     movl rax,0x2
0x19db000878cd   90d  33f6           xorl rsi,rsi
0x19db000878cf   90f  4c8b153cffffff REX.W movq r10,[rip+0xffffff3c]
0x19db000878d6   916  41ffd2         call r10
0x19db000878d9   919  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db000878dd   91d  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db000878e1   921  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000878eb   92b  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000878f0   930  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db000878f5   935  33db           xorl rbx,rbx
0x19db000878f7   937  488b7dc0       REX.W movq rdi,[rbp-0x40]
0x19db000878fb   93b  488b8578ffffff REX.W movq rax,[rbp-0x88]
0x19db00087902   942  4c8b7db8       REX.W movq r15,[rbp-0x48]
0x19db00087906   946  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db0008790a   94a  488b55a8       REX.W movq rdx,[rbp-0x58]
0x19db0008790e   94e  4c8b75a0       REX.W movq r14,[rbp-0x60]
0x19db00087912   952  e916f9ffff     jmp 0x19db0008722d  <+0x26d>
0x19db00087917   957  4154           push r12
0x19db00087919   959  4151           push r9
0x19db0008791b   95b  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db00087920   960  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db00087925   965  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db0008792a   96a  48897dc0       REX.W movq [rbp-0x40],rdi
0x19db0008792e   96e  48898578ffffff REX.W movq [rbp-0x88],rax
0x19db00087935   975  4c897db8       REX.W movq [rbp-0x48],r15
0x19db00087939   979  488975b0       REX.W movq [rbp-0x50],rsi
0x19db0008793d   97d  488955a8       REX.W movq [rbp-0x58],rdx
0x19db00087941   981  4c896590       REX.W movq [rbp-0x70],r12
0x19db00087945   985  488b1d05ffffff REX.W movq rbx,[rip+0xffffff05]
0x19db0008794c   98c  4c8bf0         REX.W movq r14,rax
0x19db0008794f   98f  b802000000     movl rax,0x2
0x19db00087954   994  33f6           xorl rsi,rsi
0x19db00087956   996  4c8b15b5feffff REX.W movq r10,[rip+0xfffffeb5]
0x19db0008795d   99d  41ffd2         call r10
0x19db00087960   9a0  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087964   9a4  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087968   9a8  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087972   9b2  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087977   9b7  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db0008797c   9bc  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db00087981   9c1  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db00087986   9c6  33db           xorl rbx,rbx
0x19db00087988   9c8  488b7dc0       REX.W movq rdi,[rbp-0x40]
0x19db0008798c   9cc  488b8578ffffff REX.W movq rax,[rbp-0x88]
0x19db00087993   9d3  4c8b7db8       REX.W movq r15,[rbp-0x48]
0x19db00087997   9d7  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db0008799b   9db  488b55a8       REX.W movq rdx,[rbp-0x58]
0x19db0008799f   9df  4c8b6590       REX.W movq r12,[rbp-0x70]
0x19db000879a3   9e3  e9e1f8ffff     jmp 0x19db00087289  <+0x2c9>
0x19db000879a8   9e8  4150           push r8
0x19db000879aa   9ea  4151           push r9
0x19db000879ac   9ec  c5fb116da8     vmovsd [rbp-0x58],xmm5
0x19db000879b1   9f1  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db000879b6   9f6  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db000879bb   9fb  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db000879c0   a00  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db000879c5   a05  48897dc0       REX.W movq [rbp-0x40],rdi
0x19db000879c9   a09  48898578ffffff REX.W movq [rbp-0x88],rax
0x19db000879d0   a10  4c897db8       REX.W movq [rbp-0x48],r15
0x19db000879d4   a14  4c8945b0       REX.W movq [rbp-0x50],r8
0x19db000879d8   a18  33f6           xorl rsi,rsi
0x19db000879da   a1a  4c8bf3         REX.W movq r14,rbx
0x19db000879dd   a1d  488b1d6dfeffff REX.W movq rbx,[rip+0xfffffe6d]
0x19db000879e4   a24  4c8be0         REX.W movq r12,rax
0x19db000879e7   a27  b802000000     movl rax,0x2
0x19db000879ec   a2c  4c8b151ffeffff REX.W movq r10,[rip+0xfffffe1f]
0x19db000879f3   a33  41ffd2         call r10
0x19db000879f6   a36  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db000879fa   a3a  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087a04   a44  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087a09   a49  c5fb106da8     vmovsd xmm5,[rbp-0x58]
0x19db00087a0e   a4e  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db00087a13   a53  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db00087a18   a58  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db00087a1d   a5d  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db00087a22   a62  33db           xorl rbx,rbx
0x19db00087a24   a64  488b7dc0       REX.W movq rdi,[rbp-0x40]
0x19db00087a28   a68  488b8578ffffff REX.W movq rax,[rbp-0x88]
0x19db00087a2f   a6f  4c8b7db8       REX.W movq r15,[rbp-0x48]
0x19db00087a33   a73  4c8b45b0       REX.W movq r8,[rbp-0x50]
0x19db00087a37   a77  e9aaf8ffff     jmp 0x19db000872e6  <+0x326>
0x19db00087a3c   a7c  4154           push r12
0x19db00087a3e   a7e  4151           push r9
0x19db00087a40   a80  c57b1145b0     vmovsd [rbp-0x50],xmm8
0x19db00087a45   a85  c5fb116da8     vmovsd [rbp-0x58],xmm5
0x19db00087a4a   a8a  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db00087a4f   a8f  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db00087a54   a94  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db00087a59   a99  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db00087a5e   a9e  48897dc0       REX.W movq [rbp-0x40],rdi
0x19db00087a62   aa2  48898578ffffff REX.W movq [rbp-0x88],rax
0x19db00087a69   aa9  4c8965b8       REX.W movq [rbp-0x48],r12
0x19db00087a6d   aad  33f6           xorl rsi,rsi
0x19db00087a6f   aaf  4c8bfb         REX.W movq r15,rbx
0x19db00087a72   ab2  488b1dd8fdffff REX.W movq rbx,[rip+0xfffffdd8]
0x19db00087a79   ab9  4c8bf0         REX.W movq r14,rax
0x19db00087a7c   abc  b802000000     movl rax,0x2
0x19db00087a81   ac1  4c8b158afdffff REX.W movq r10,[rip+0xfffffd8a]
0x19db00087a88   ac8  41ffd2         call r10
0x19db00087a8b   acb  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087a8f   acf  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087a93   ad3  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087a9d   add  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087aa2   ae2  c57b1045b0     vmovsd xmm8,[rbp-0x50]
0x19db00087aa7   ae7  c5fb106da8     vmovsd xmm5,[rbp-0x58]
0x19db00087aac   aec  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db00087ab1   af1  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db00087ab6   af6  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db00087abb   afb  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db00087ac0   b00  33db           xorl rbx,rbx
0x19db00087ac2   b02  488b7dc0       REX.W movq rdi,[rbp-0x40]
0x19db00087ac6   b06  488b8578ffffff REX.W movq rax,[rbp-0x88]
0x19db00087acd   b0d  4c8b65b8       REX.W movq r12,[rbp-0x48]
0x19db00087ad1   b11  e95af8ffff     jmp 0x19db00087330  <+0x370>
0x19db00087ad6   b16  57             push rdi
0x19db00087ad7   b17  4151           push r9
0x19db00087ad9   b19  c5fb1175b8     vmovsd [rbp-0x48],xmm6
0x19db00087ade   b1e  c57b1145b0     vmovsd [rbp-0x50],xmm8
0x19db00087ae3   b23  c5fb116da8     vmovsd [rbp-0x58],xmm5
0x19db00087ae8   b28  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db00087aed   b2d  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db00087af2   b32  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db00087af7   b37  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db00087afc   b3c  48897dc0       REX.W movq [rbp-0x40],rdi
0x19db00087b00   b40  33f6           xorl rsi,rsi
0x19db00087b02   b42  4c8be3         REX.W movq r12,rbx
0x19db00087b05   b45  488b1d45fdffff REX.W movq rbx,[rip+0xfffffd45]
0x19db00087b0c   b4c  b802000000     movl rax,0x2
0x19db00087b11   b51  4c8b15fafcffff REX.W movq r10,[rip+0xfffffcfa]
0x19db00087b18   b58  41ffd2         call r10
0x19db00087b1b   b5b  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087b1f   b5f  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087b23   b63  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087b2d   b6d  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087b32   b72  c5fb1075b8     vmovsd xmm6,[rbp-0x48]
0x19db00087b37   b77  c57b1045b0     vmovsd xmm8,[rbp-0x50]
0x19db00087b3c   b7c  c5fb106da8     vmovsd xmm5,[rbp-0x58]
0x19db00087b41   b81  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db00087b46   b86  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db00087b4b   b8b  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db00087b50   b90  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db00087b55   b95  33db           xorl rbx,rbx
0x19db00087b57   b97  488b7dc0       REX.W movq rdi,[rbp-0x40]
0x19db00087b5b   b9b  e91cf8ffff     jmp 0x19db0008737c  <+0x3bc>
0x19db00087b60   ba0  4154           push r12
0x19db00087b62   ba2  4151           push r9
0x19db00087b64   ba4  c57b114dc0     vmovsd [rbp-0x40],xmm9
0x19db00087b69   ba9  c5fb1175b8     vmovsd [rbp-0x48],xmm6
0x19db00087b6e   bae  c57b1145b0     vmovsd [rbp-0x50],xmm8
0x19db00087b73   bb3  c5fb116da8     vmovsd [rbp-0x58],xmm5
0x19db00087b78   bb8  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db00087b7d   bbd  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db00087b82   bc2  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db00087b87   bc7  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db00087b8c   bcc  33f6           xorl rsi,rsi
0x19db00087b8e   bce  488bfb         REX.W movq rdi,rbx
0x19db00087b91   bd1  488b1db9fcffff REX.W movq rbx,[rip+0xfffffcb9]
0x19db00087b98   bd8  b802000000     movl rax,0x2
0x19db00087b9d   bdd  4c8b156efcffff REX.W movq r10,[rip+0xfffffc6e]
0x19db00087ba4   be4  41ffd2         call r10
0x19db00087ba7   be7  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087bab   beb  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087baf   bef  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087bb9   bf9  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087bbe   bfe  c57b104dc0     vmovsd xmm9,[rbp-0x40]
0x19db00087bc3   c03  c5fb1075b8     vmovsd xmm6,[rbp-0x48]
0x19db00087bc8   c08  c57b1045b0     vmovsd xmm8,[rbp-0x50]
0x19db00087bcd   c0d  c5fb106da8     vmovsd xmm5,[rbp-0x58]
0x19db00087bd2   c12  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db00087bd7   c17  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db00087bdc   c1c  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db00087be1   c21  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db00087be6   c26  4c8b6580       REX.W movq r12,[rbp-0x80]
0x19db00087bea   c2a  33db           xorl rbx,rbx
0x19db00087bec   c2c  e9caf7ffff     jmp 0x19db000873bb  <+0x3fb>
0x19db00087bf1   c31  c57b114dc0     vmovsd [rbp-0x40],xmm9
0x19db00087bf6   c36  c5fb1175b8     vmovsd [rbp-0x48],xmm6
0x19db00087bfb   c3b  c57b1145b0     vmovsd [rbp-0x50],xmm8
0x19db00087c00   c40  c5fb116da8     vmovsd [rbp-0x58],xmm5
0x19db00087c05   c45  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db00087c0a   c4a  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db00087c0f   c4f  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db00087c14   c54  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db00087c19   c59  48899578ffffff REX.W movq [rbp-0x88],rdx
0x19db00087c20   c60  33f6           xorl rsi,rsi
0x19db00087c22   c62  4c89e0         REX.W movq rax,r12
0x19db00087c25   c65  488bfb         REX.W movq rdi,rbx
0x19db00087c28   c68  49ba20e7baf5ff7f0000 REX.W movq r10,0x7ffff5bae720  (GrowFastDoubleElements)    ;; off heap target
0x19db00087c32   c72  41ffd2         call r10
0x19db00087c35   c75  a801           test al,0x1
0x19db00087c37   c77  0f8497070000   jz 0x19db000883d4  <+0x1414>
0x19db00087c3d   c7d  33db           xorl rbx,rbx
0x19db00087c3f   c7f  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087c43   c83  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087c47   c87  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087c51   c91  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087c56   c96  c57b104dc0     vmovsd xmm9,[rbp-0x40]
0x19db00087c5b   c9b  c5fb1075b8     vmovsd xmm6,[rbp-0x48]
0x19db00087c60   ca0  c57b1045b0     vmovsd xmm8,[rbp-0x50]
0x19db00087c65   ca5  c5fb106da8     vmovsd xmm5,[rbp-0x58]
0x19db00087c6a   caa  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db00087c6f   caf  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db00087c74   cb4  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db00087c79   cb9  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db00087c7e   cbe  4c8b6580       REX.W movq r12,[rbp-0x80]
0x19db00087c82   cc2  488b9578ffffff REX.W movq rdx,[rbp-0x88]
0x19db00087c89   cc9  e987f7ffff     jmp 0x19db00087415  <+0x455>
0x19db00087c8e   cce  488bfb         REX.W movq rdi,rbx
0x19db00087c91   cd1  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00087c9b   cdb  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db00087ca5   ce5  33c0           xorl rax,rax
0x19db00087ca7   ce7  4c8b1564fbffff REX.W movq r10,[rip+0xfffffb64]
0x19db00087cae   cee  41ffd2         call r10
0x19db00087cb1   cf1  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087cb5   cf5  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087cb9   cf9  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087cc3   d03  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087cc8   d08  33db           xorl rbx,rbx
0x19db00087cca   d0a  e983f7ffff     jmp 0x19db00087452  <+0x492>
0x19db00087ccf   d0f  50             push rax
0x19db00087cd0   d10  4151           push r9
0x19db00087cd2   d12  4889bd70ffffff REX.W movq [rbp-0x90],rdi
0x19db00087cd9   d19  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db00087cdd   d1d  488945c0       REX.W movq [rbp-0x40],rax
0x19db00087ce1   d21  33f6           xorl rsi,rsi
0x19db00087ce3   d23  488b1d67fbffff REX.W movq rbx,[rip+0xfffffb67]
0x19db00087cea   d2a  4c8bf8         REX.W movq r15,rax
0x19db00087ced   d2d  b802000000     movl rax,0x2
0x19db00087cf2   d32  4c8b1519fbffff REX.W movq r10,[rip+0xfffffb19]
0x19db00087cf9   d39  41ffd2         call r10
0x19db00087cfc   d3c  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087d00   d40  4c8b6520       REX.W movq r12,[rbp+0x20]
0x19db00087d04   d44  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087d08   d48  488bbd70ffffff REX.W movq rdi,[rbp-0x90]
0x19db00087d0f   d4f  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087d19   d59  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087d1e   d5e  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db00087d22   d62  488b45c0       REX.W movq rax,[rbp-0x40]
0x19db00087d26   d66  33db           xorl rbx,rbx
0x19db00087d28   d68  e99df7ffff     jmp 0x19db000874ca  <+0x50a>
0x19db00087d2d   d6d  4154           push r12
0x19db00087d2f   d6f  4151           push r9
0x19db00087d31   d71  c5fb114590     vmovsd [rbp-0x70],xmm0
0x19db00087d36   d76  4889bd70ffffff REX.W movq [rbp-0x90],rdi
0x19db00087d3d   d7d  488975c0       REX.W movq [rbp-0x40],rsi
0x19db00087d41   d81  488955b8       REX.W movq [rbp-0x48],rdx
0x19db00087d45   d85  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db00087d49   d89  488945a8       REX.W movq [rbp-0x58],rax
0x19db00087d4d   d8d  4c897da0       REX.W movq [rbp-0x60],r15
0x19db00087d51   d91  4c896598       REX.W movq [rbp-0x68],r12
0x19db00087d55   d95  488b1df5faffff REX.W movq rbx,[rip+0xfffffaf5]
0x19db00087d5c   d9c  b802000000     movl rax,0x2
0x19db00087d61   da1  33f6           xorl rsi,rsi
0x19db00087d63   da3  4c8b15a8faffff REX.W movq r10,[rip+0xfffffaa8]
0x19db00087d6a   daa  41ffd2         call r10
0x19db00087d6d   dad  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087d71   db1  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087d75   db5  c5fb104590     vmovsd xmm0,[rbp-0x70]
0x19db00087d7a   dba  488bbd70ffffff REX.W movq rdi,[rbp-0x90]
0x19db00087d81   dc1  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087d8b   dcb  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087d90   dd0  488b75c0       REX.W movq rsi,[rbp-0x40]
0x19db00087d94   dd4  488b55b8       REX.W movq rdx,[rbp-0x48]
0x19db00087d98   dd8  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db00087d9c   ddc  488b45a8       REX.W movq rax,[rbp-0x58]
0x19db00087da0   de0  4c8b7da0       REX.W movq r15,[rbp-0x60]
0x19db00087da4   de4  4c8b6598       REX.W movq r12,[rbp-0x68]
0x19db00087da8   de8  33db           xorl rbx,rbx
0x19db00087daa   dea  e979f7ffff     jmp 0x19db00087528  <+0x568>
0x19db00087daf   def  4150           push r8
0x19db00087db1   df1  4151           push r9
0x19db00087db3   df3  c5fb114d98     vmovsd [rbp-0x68],xmm1
0x19db00087db8   df8  c5fb114590     vmovsd [rbp-0x70],xmm0
0x19db00087dbd   dfd  c5fb115580     vmovsd [rbp-0x80],xmm2
0x19db00087dc2   e02  4889bd70ffffff REX.W movq [rbp-0x90],rdi
0x19db00087dc9   e09  488975c0       REX.W movq [rbp-0x40],rsi
0x19db00087dcd   e0d  488955b8       REX.W movq [rbp-0x48],rdx
0x19db00087dd1   e11  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db00087dd5   e15  488945a8       REX.W movq [rbp-0x58],rax
0x19db00087dd9   e19  4c897da0       REX.W movq [rbp-0x60],r15
0x19db00087ddd   e1d  4c894588       REX.W movq [rbp-0x78],r8
0x19db00087de1   e21  488b1d69faffff REX.W movq rbx,[rip+0xfffffa69]
0x19db00087de8   e28  4c8be0         REX.W movq r12,rax
0x19db00087deb   e2b  b802000000     movl rax,0x2
0x19db00087df0   e30  33f6           xorl rsi,rsi
0x19db00087df2   e32  4c8b1519faffff REX.W movq r10,[rip+0xfffffa19]
0x19db00087df9   e39  41ffd2         call r10
0x19db00087dfc   e3c  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087e00   e40  c5fb104d98     vmovsd xmm1,[rbp-0x68]
0x19db00087e05   e45  c5fb104590     vmovsd xmm0,[rbp-0x70]
0x19db00087e0a   e4a  c5fb105580     vmovsd xmm2,[rbp-0x80]
0x19db00087e0f   e4f  488bbd70ffffff REX.W movq rdi,[rbp-0x90]
0x19db00087e16   e56  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087e20   e60  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087e25   e65  488b75c0       REX.W movq rsi,[rbp-0x40]
0x19db00087e29   e69  488b55b8       REX.W movq rdx,[rbp-0x48]
0x19db00087e2d   e6d  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db00087e31   e71  488b45a8       REX.W movq rax,[rbp-0x58]
0x19db00087e35   e75  4c8b7da0       REX.W movq r15,[rbp-0x60]
0x19db00087e39   e79  4c8b4588       REX.W movq r8,[rbp-0x78]
0x19db00087e3d   e7d  33db           xorl rbx,rbx
0x19db00087e3f   e7f  e942f7ffff     jmp 0x19db00087586  <+0x5c6>
0x19db00087e44   e84  4150           push r8
0x19db00087e46   e86  4151           push r9
0x19db00087e48   e88  c5fb116da0     vmovsd [rbp-0x60],xmm5
0x19db00087e4d   e8d  c5fb114d98     vmovsd [rbp-0x68],xmm1
0x19db00087e52   e92  c5fb114590     vmovsd [rbp-0x70],xmm0
0x19db00087e57   e97  c5fb116588     vmovsd [rbp-0x78],xmm4
0x19db00087e5c   e9c  c5fb115580     vmovsd [rbp-0x80],xmm2
0x19db00087e61   ea1  4889bd70ffffff REX.W movq [rbp-0x90],rdi
0x19db00087e68   ea8  488975c0       REX.W movq [rbp-0x40],rsi
0x19db00087e6c   eac  488955b8       REX.W movq [rbp-0x48],rdx
0x19db00087e70   eb0  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db00087e74   eb4  4c8945a8       REX.W movq [rbp-0x58],r8
0x19db00087e78   eb8  4c8be3         REX.W movq r12,rbx
0x19db00087e7b   ebb  488b1dcff9ffff REX.W movq rbx,[rip+0xfffff9cf]
0x19db00087e82   ec2  b802000000     movl rax,0x2
0x19db00087e87   ec7  4c8bfe         REX.W movq r15,rsi
0x19db00087e8a   eca  33f6           xorl rsi,rsi
0x19db00087e8c   ecc  4c8b157ff9ffff REX.W movq r10,[rip+0xfffff97f]
0x19db00087e93   ed3  41ffd2         call r10
0x19db00087e96   ed6  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087e9a   eda  c5fb106da0     vmovsd xmm5,[rbp-0x60]
0x19db00087e9f   edf  c5fb104d98     vmovsd xmm1,[rbp-0x68]
0x19db00087ea4   ee4  c5fb104590     vmovsd xmm0,[rbp-0x70]
0x19db00087ea9   ee9  c5fb106588     vmovsd xmm4,[rbp-0x78]
0x19db00087eae   eee  c5fb105580     vmovsd xmm2,[rbp-0x80]
0x19db00087eb3   ef3  488bbd70ffffff REX.W movq rdi,[rbp-0x90]
0x19db00087eba   efa  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087ec4   f04  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087ec9   f09  488b75c0       REX.W movq rsi,[rbp-0x40]
0x19db00087ecd   f0d  488b55b8       REX.W movq rdx,[rbp-0x48]
0x19db00087ed1   f11  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db00087ed5   f15  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db00087ed9   f19  33db           xorl rbx,rbx
0x19db00087edb   f1b  e905f7ffff     jmp 0x19db000875e5  <+0x625>
0x19db00087ee0   f20  4154           push r12
0x19db00087ee2   f22  4151           push r9
0x19db00087ee4   f24  c57b1145a8     vmovsd [rbp-0x58],xmm8
0x19db00087ee9   f29  c5fb116da0     vmovsd [rbp-0x60],xmm5
0x19db00087eee   f2e  c5fb114d98     vmovsd [rbp-0x68],xmm1
0x19db00087ef3   f33  c5fb114590     vmovsd [rbp-0x70],xmm0
0x19db00087ef8   f38  c5fb116588     vmovsd [rbp-0x78],xmm4
0x19db00087efd   f3d  c5fb115580     vmovsd [rbp-0x80],xmm2
0x19db00087f02   f42  4889bd70ffffff REX.W movq [rbp-0x90],rdi
0x19db00087f09   f49  488975c0       REX.W movq [rbp-0x40],rsi
0x19db00087f0d   f4d  488955b8       REX.W movq [rbp-0x48],rdx
0x19db00087f11   f51  4c8965b0       REX.W movq [rbp-0x50],r12
0x19db00087f15   f55  4c8bf3         REX.W movq r14,rbx
0x19db00087f18   f58  488b1d32f9ffff REX.W movq rbx,[rip+0xfffff932]
0x19db00087f1f   f5f  b802000000     movl rax,0x2
0x19db00087f24   f64  4c8bfe         REX.W movq r15,rsi
0x19db00087f27   f67  33f6           xorl rsi,rsi
0x19db00087f29   f69  4c8b15e2f8ffff REX.W movq r10,[rip+0xfffff8e2]
0x19db00087f30   f70  41ffd2         call r10
0x19db00087f33   f73  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087f37   f77  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087f3b   f7b  c57b1045a8     vmovsd xmm8,[rbp-0x58]
0x19db00087f40   f80  c5fb106da0     vmovsd xmm5,[rbp-0x60]
0x19db00087f45   f85  c5fb104d98     vmovsd xmm1,[rbp-0x68]
0x19db00087f4a   f8a  c5fb104590     vmovsd xmm0,[rbp-0x70]
0x19db00087f4f   f8f  c5fb106588     vmovsd xmm4,[rbp-0x78]
0x19db00087f54   f94  c5fb105580     vmovsd xmm2,[rbp-0x80]
0x19db00087f59   f99  488bbd70ffffff REX.W movq rdi,[rbp-0x90]
0x19db00087f60   fa0  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00087f6a   faa  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00087f6f   faf  488b75c0       REX.W movq rsi,[rbp-0x40]
0x19db00087f73   fb3  488b55b8       REX.W movq rdx,[rbp-0x48]
0x19db00087f77   fb7  4c8b65b0       REX.W movq r12,[rbp-0x50]
0x19db00087f7b   fbb  33db           xorl rbx,rbx
0x19db00087f7d   fbd  e9acf6ffff     jmp 0x19db0008762e  <+0x66e>
0x19db00087f82   fc2  4154           push r12
0x19db00087f84   fc4  4151           push r9
0x19db00087f86   fc6  c5fb1175b0     vmovsd [rbp-0x50],xmm6
0x19db00087f8b   fcb  c57b1145a8     vmovsd [rbp-0x58],xmm8
0x19db00087f90   fd0  c5fb116da0     vmovsd [rbp-0x60],xmm5
0x19db00087f95   fd5  c5fb114d98     vmovsd [rbp-0x68],xmm1
0x19db00087f9a   fda  c5fb114590     vmovsd [rbp-0x70],xmm0
0x19db00087f9f   fdf  c5fb116588     vmovsd [rbp-0x78],xmm4
0x19db00087fa4   fe4  c5fb115580     vmovsd [rbp-0x80],xmm2
0x19db00087fa9   fe9  4889bd70ffffff REX.W movq [rbp-0x90],rdi
0x19db00087fb0   ff0  4c8965c0       REX.W movq [rbp-0x40],r12
0x19db00087fb4   ff4  33f6           xorl rsi,rsi
0x19db00087fb6   ff6  4c8bf3         REX.W movq r14,rbx
0x19db00087fb9   ff9  488b1d91f8ffff REX.W movq rbx,[rip+0xfffff891]
0x19db00087fc0  1000  b802000000     movl rax,0x2
0x19db00087fc5  1005  4c8b1546f8ffff REX.W movq r10,[rip+0xfffff846]
0x19db00087fcc  100c  41ffd2         call r10
0x19db00087fcf  100f  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00087fd3  1013  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00087fd7  1017  c5fb1075b0     vmovsd xmm6,[rbp-0x50]
0x19db00087fdc  101c  c57b1045a8     vmovsd xmm8,[rbp-0x58]
0x19db00087fe1  1021  c5fb106da0     vmovsd xmm5,[rbp-0x60]
0x19db00087fe6  1026  c5fb104d98     vmovsd xmm1,[rbp-0x68]
0x19db00087feb  102b  c5fb104590     vmovsd xmm0,[rbp-0x70]
0x19db00087ff0  1030  c5fb106588     vmovsd xmm4,[rbp-0x78]
0x19db00087ff5  1035  c5fb105580     vmovsd xmm2,[rbp-0x80]
0x19db00087ffa  103a  488bbd70ffffff REX.W movq rdi,[rbp-0x90]
0x19db00088001  1041  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008800b  104b  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00088010  1050  4c8b65c0       REX.W movq r12,[rbp-0x40]
0x19db00088014  1054  33db           xorl rbx,rbx
0x19db00088016  1056  e966f6ffff     jmp 0x19db00087681  <+0x6c1>
0x19db0008801b  105b  52             push rdx
0x19db0008801c  105c  4151           push r9
0x19db0008801e  105e  c57b114db8     vmovsd [rbp-0x48],xmm9
0x19db00088023  1063  c5fb1175b0     vmovsd [rbp-0x50],xmm6
0x19db00088028  1068  c57b1145a8     vmovsd [rbp-0x58],xmm8
0x19db0008802d  106d  c5fb116da0     vmovsd [rbp-0x60],xmm5
0x19db00088032  1072  c5fb114d98     vmovsd [rbp-0x68],xmm1
0x19db00088037  1077  c5fb114590     vmovsd [rbp-0x70],xmm0
0x19db0008803c  107c  c5fb116588     vmovsd [rbp-0x78],xmm4
0x19db00088041  1081  c5fb115580     vmovsd [rbp-0x80],xmm2
0x19db00088046  1086  4889bd70ffffff REX.W movq [rbp-0x90],rdi
0x19db0008804d  108d  33f6           xorl rsi,rsi
0x19db0008804f  108f  4c8be3         REX.W movq r12,rbx
0x19db00088052  1092  488b1df8f7ffff REX.W movq rbx,[rip+0xfffff7f8]
0x19db00088059  1099  b802000000     movl rax,0x2
0x19db0008805e  109e  4c8b15adf7ffff REX.W movq r10,[rip+0xfffff7ad]
0x19db00088065  10a5  41ffd2         call r10
0x19db00088068  10a8  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db0008806c  10ac  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db00088070  10b0  c57b104db8     vmovsd xmm9,[rbp-0x48]
0x19db00088075  10b5  c5fb1075b0     vmovsd xmm6,[rbp-0x50]
0x19db0008807a  10ba  c57b1045a8     vmovsd xmm8,[rbp-0x58]
0x19db0008807f  10bf  c5fb106da0     vmovsd xmm5,[rbp-0x60]
0x19db00088084  10c4  c5fb104d98     vmovsd xmm1,[rbp-0x68]
0x19db00088089  10c9  c5fb104590     vmovsd xmm0,[rbp-0x70]
0x19db0008808e  10ce  c5fb106588     vmovsd xmm4,[rbp-0x78]
0x19db00088093  10d3  c5fb105580     vmovsd xmm2,[rbp-0x80]
0x19db00088098  10d8  488b9578ffffff REX.W movq rdx,[rbp-0x88]
0x19db0008809f  10df  488bbd70ffffff REX.W movq rdi,[rbp-0x90]
0x19db000880a6  10e6  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000880b0  10f0  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000880b5  10f5  33db           xorl rbx,rbx
0x19db000880b7  10f7  e90cf6ffff     jmp 0x19db000876c8  <+0x708>
0x19db000880bc  10fc  448d243f       leal r12,[rdi+rdi*1]
0x19db000880c0  1100  4c8b1517f3ffff REX.W movq r10,[rip+0xfffff317]
0x19db000880c7  1107  4d39e2         REX.W cmpq r10,r12
0x19db000880ca  110a  7712           ja 0x19db000880de  <+0x111e>
0x19db000880cc  110c  488b151af3ffff REX.W movq rdx,[rip+0xfffff31a]
0x19db000880d3  1113  4c8b15feeeffff REX.W movq r10,[rip+0xffffeefe]
0x19db000880da  111a  41ffd2         call r10
0x19db000880dd  111d  cc             int3l
0x19db000880de  111e  c57b114db8     vmovsd [rbp-0x48],xmm9
0x19db000880e3  1123  c5fb1175b0     vmovsd [rbp-0x50],xmm6
0x19db000880e8  1128  c57b1145a8     vmovsd [rbp-0x58],xmm8
0x19db000880ed  112d  c5fb116da0     vmovsd [rbp-0x60],xmm5
0x19db000880f2  1132  c5fb114d98     vmovsd [rbp-0x68],xmm1
0x19db000880f7  1137  c5fb114590     vmovsd [rbp-0x70],xmm0
0x19db000880fc  113c  c5fb116588     vmovsd [rbp-0x78],xmm4
0x19db00088101  1141  c5fb115580     vmovsd [rbp-0x80],xmm2
0x19db00088106  1146  4889bd70ffffff REX.W movq [rbp-0x90],rdi
0x19db0008810d  114d  4c89b568ffffff REX.W movq [rbp-0x98],r14
0x19db00088114  1154  33f6           xorl rsi,rsi
0x19db00088116  1156  488bc2         REX.W movq rax,rdx
0x19db00088119  1159  4c8bd3         REX.W movq r10,rbx
0x19db0008811c  115c  4c89e3         REX.W movq rbx,r12
0x19db0008811f  115f  4d8be2         REX.W movq r12,r10
0x19db00088122  1162  4c8b1501fbffff REX.W movq r10,[rip+0xfffffb01]
0x19db00088129  1169  41ffd2         call r10
0x19db0008812c  116c  a801           test al,0x1
0x19db0008812e  116e  0f8499020000   jz 0x19db000883cd  <+0x140d>
0x19db00088134  1174  4c8be0         REX.W movq r12,rax
0x19db00088137  1177  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db0008813b  117b  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db0008813f  117f  c57b104db8     vmovsd xmm9,[rbp-0x48]
0x19db00088144  1184  c5fb1075b0     vmovsd xmm6,[rbp-0x50]
0x19db00088149  1189  c57b1045a8     vmovsd xmm8,[rbp-0x58]
0x19db0008814e  118e  c5fb106da0     vmovsd xmm5,[rbp-0x60]
0x19db00088153  1193  c5fb104d98     vmovsd xmm1,[rbp-0x68]
0x19db00088158  1198  c5fb104590     vmovsd xmm0,[rbp-0x70]
0x19db0008815d  119d  c5fb106588     vmovsd xmm4,[rbp-0x78]
0x19db00088162  11a2  c5fb105580     vmovsd xmm2,[rbp-0x80]
0x19db00088167  11a7  488b9578ffffff REX.W movq rdx,[rbp-0x88]
0x19db0008816e  11ae  488bbd70ffffff REX.W movq rdi,[rbp-0x90]
0x19db00088175  11b5  4c8bb568ffffff REX.W movq r14,[rbp-0x98]
0x19db0008817c  11bc  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00088186  11c6  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0008818b  11cb  33db           xorl rbx,rbx
0x19db0008818d  11cd  e988f5ffff     jmp 0x19db0008771a  <+0x75a>
0x19db00088192  11d2  4c897dc0       REX.W movq [rbp-0x40],r15
0x19db00088196  11d6  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000881a0  11e0  488bfb         REX.W movq rdi,rbx
0x19db000881a3  11e3  488b1df3faffff REX.W movq rbx,[rip+0xfffffaf3]
0x19db000881aa  11ea  33c0           xorl rax,rax
0x19db000881ac  11ec  4c8b155ff6ffff REX.W movq r10,[rip+0xfffff65f]
0x19db000881b3  11f3  41ffd2         call r10
0x19db000881b6  11f6  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db000881ba  11fa  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db000881be  11fe  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db000881c2  1202  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000881cc  120c  b9b59e3008     movl rcx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000881d1  1211  33db           xorl rbx,rbx
0x19db000881d3  1213  e988f2ffff     jmp 0x19db00087460  <+0x4a0>
0x19db000881d8  1218  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db000881dc  121c  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000881e6  1226  488bfb         REX.W movq rdi,rbx
0x19db000881e9  1229  488b1dadfaffff REX.W movq rbx,[rip+0xfffffaad]
0x19db000881f0  1230  488bc8         REX.W movq rcx,rax
0x19db000881f3  1233  33c0           xorl rax,rax
0x19db000881f5  1235  4c8b1516f6ffff REX.W movq r10,[rip+0xfffff616]
0x19db000881fc  123c  41ffd2         call r10
0x19db000881ff  123f  488b45e0       REX.W movq rax,[rbp-0x20]
0x19db00088203  1243  4c8b5d18       REX.W movq r11,[rbp+0x18]
0x19db00088207  1247  4c8b6520       REX.W movq r12,[rbp+0x20]
0x19db0008820b  124b  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db0008820f  124f  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00088219  1259  33db           xorl rbx,rbx
0x19db0008821b  125b  e920efffff     jmp 0x19db00087140  <+0x180>
0x19db00088220  1260  cc             int3l
0x19db00088221  1261  90             nop
0x19db00088222  1262  41ff95f8360000 call [r13+0x36f8]
0x19db00088229  1269  41ff95f8360000 call [r13+0x36f8]
0x19db00088230  1270  41ff95f8360000 call [r13+0x36f8]
0x19db00088237  1277  41ff95f8360000 call [r13+0x36f8]
0x19db0008823e  127e  41ff95f8360000 call [r13+0x36f8]
0x19db00088245  1285  41ff95f8360000 call [r13+0x36f8]
0x19db0008824c  128c  41ff95f8360000 call [r13+0x36f8]
0x19db00088253  1293  41ff95f8360000 call [r13+0x36f8]
0x19db0008825a  129a  41ff95f8360000 call [r13+0x36f8]
0x19db00088261  12a1  41ff95f8360000 call [r13+0x36f8]
0x19db00088268  12a8  41ff95f8360000 call [r13+0x36f8]
0x19db0008826f  12af  41ff95f8360000 call [r13+0x36f8]
0x19db00088276  12b6  41ff95f8360000 call [r13+0x36f8]
0x19db0008827d  12bd  41ff95f8360000 call [r13+0x36f8]
0x19db00088284  12c4  41ff95f8360000 call [r13+0x36f8]
0x19db0008828b  12cb  41ff95f8360000 call [r13+0x36f8]
0x19db00088292  12d2  41ff95f8360000 call [r13+0x36f8]
0x19db00088299  12d9  41ff95f8360000 call [r13+0x36f8]
0x19db000882a0  12e0  41ff95f8360000 call [r13+0x36f8]
0x19db000882a7  12e7  41ff95f8360000 call [r13+0x36f8]
0x19db000882ae  12ee  41ff95f8360000 call [r13+0x36f8]
0x19db000882b5  12f5  41ff95f8360000 call [r13+0x36f8]
0x19db000882bc  12fc  41ff95f8360000 call [r13+0x36f8]
0x19db000882c3  1303  41ff95f8360000 call [r13+0x36f8]
0x19db000882ca  130a  41ff95f8360000 call [r13+0x36f8]
0x19db000882d1  1311  41ff95f8360000 call [r13+0x36f8]
0x19db000882d8  1318  41ff95f8360000 call [r13+0x36f8]
0x19db000882df  131f  41ff95f8360000 call [r13+0x36f8]
0x19db000882e6  1326  41ff95f8360000 call [r13+0x36f8]
0x19db000882ed  132d  41ff95f8360000 call [r13+0x36f8]
0x19db000882f4  1334  41ff95f8360000 call [r13+0x36f8]
0x19db000882fb  133b  41ff95f8360000 call [r13+0x36f8]
0x19db00088302  1342  41ff95f8360000 call [r13+0x36f8]
0x19db00088309  1349  41ff95f8360000 call [r13+0x36f8]
0x19db00088310  1350  41ff95f8360000 call [r13+0x36f8]
0x19db00088317  1357  41ff95f8360000 call [r13+0x36f8]
0x19db0008831e  135e  41ff95f8360000 call [r13+0x36f8]
0x19db00088325  1365  41ff95f8360000 call [r13+0x36f8]
0x19db0008832c  136c  41ff95f8360000 call [r13+0x36f8]
0x19db00088333  1373  41ff95f8360000 call [r13+0x36f8]
0x19db0008833a  137a  41ff95f8360000 call [r13+0x36f8]
0x19db00088341  1381  41ff95f8360000 call [r13+0x36f8]
0x19db00088348  1388  41ff95f8360000 call [r13+0x36f8]
0x19db0008834f  138f  41ff95f8360000 call [r13+0x36f8]
0x19db00088356  1396  41ff95f8360000 call [r13+0x36f8]
0x19db0008835d  139d  41ff95f8360000 call [r13+0x36f8]
0x19db00088364  13a4  41ff95f8360000 call [r13+0x36f8]
0x19db0008836b  13ab  41ff95f8360000 call [r13+0x36f8]
0x19db00088372  13b2  41ff95f8360000 call [r13+0x36f8]
0x19db00088379  13b9  41ff95f8360000 call [r13+0x36f8]
0x19db00088380  13c0  41ff95f8360000 call [r13+0x36f8]
0x19db00088387  13c7  41ff95f8360000 call [r13+0x36f8]
0x19db0008838e  13ce  41ff95f8360000 call [r13+0x36f8]
0x19db00088395  13d5  41ff95f8360000 call [r13+0x36f8]
0x19db0008839c  13dc  41ff95f8360000 call [r13+0x36f8]
0x19db000883a3  13e3  41ff95f8360000 call [r13+0x36f8]
0x19db000883aa  13ea  41ff95f8360000 call [r13+0x36f8]
0x19db000883b1  13f1  41ff95f8360000 call [r13+0x36f8]
0x19db000883b8  13f8  41ff95f8360000 call [r13+0x36f8]
0x19db000883bf  13ff  41ff95f8360000 call [r13+0x36f8]
0x19db000883c6  1406  41ff95f8360000 call [r13+0x36f8]
0x19db000883cd  140d  41ff95f8360000 call [r13+0x36f8]
0x19db000883d4  1414  41ff95f8360000 call [r13+0x36f8]
0x19db000883db  141b  41ff9510370000 call [r13+0x3710]
0x19db000883e2  1422  41ff9510370000 call [r13+0x3710]
0x19db000883e9  1429  41ff9510370000 call [r13+0x3710]
0x19db000883f0  1430  41ff9510370000 call [r13+0x3710]
0x19db000883f7  1437  90             nop

Source positions:
 pc offset  position
       837      2472

Inlined functions (count = 0)

Deoptimization Input Data (deopt points = 67)
 index  bytecode-offset    pc
     0               14    NA 
     1               14    NA 
     2               14    NA 
     3               14    NA 
     4               14    NA 
     5               24    NA 
     6               24    NA 
     7               24    NA 
     8               24    NA 
     9               24    NA 
    10               24    NA 
    11               24    NA 
    12               24    NA 
    13               24    NA 
    14               24    NA 
    15               24    NA 
    16               24    NA 
    17               24    NA 
    18               24    NA 
    19               24    NA 
    20               24    NA 
    21               24    NA 
    22               24    NA 
    23               24    NA 
    24               24    NA 
    25               24    NA 
    26               24    NA 
    27               24    NA 
    28               24    NA 
    29               24    NA 
    30               24    NA 
    31               24    NA 
    32               24    NA 
    33               24    NA 
    34               24    NA 
    35               24    NA 
    36               24    NA 
    37               24    NA 
    38               24    NA 
    39               24    NA 
    40               24    NA 
    41               24    NA 
    42               24    NA 
    43               24    NA 
    44               24    NA 
    45               24    NA 
    46               24    NA 
    47               24    NA 
    48               24    NA 
    49               24    NA 
    50               24    NA 
    51               24    NA 
    52               24    NA 
    53               24    NA 
    54               24    NA 
    55               24    NA 
    56               24    NA 
    57               24    NA 
    58               24    NA 
    59               24    NA 
    60               24    NA 
    61               24    NA 
    62               24    NA 
    63               -1   85d 
    64              175   cf1 
    65              175  11f6 
    66              184  123f 

Safepoints (size = 323)
0x19db0008781d     85d  141b  000000000000011000000 (sp -> fp)      63
0x19db00087834     874    NA  000000000000011000000 (sp -> fp)  <none>
0x19db0008786a     8aa    NA  000100000011011100000 (sp -> fp)  <none>
0x19db000878d9     919    NA  000100010111011100000 (sp -> fp)  <none>
0x19db00087960     9a0    NA  000101000111011100000 (sp -> fp)  <none>
0x19db000879f6     a36    NA  000100000111011100000 (sp -> fp)  <none>
0x19db00087a8b     acb    NA  000100000011011100000 (sp -> fp)  <none>
0x19db00087b1b     b5b    NA  000100000001011100000 (sp -> fp)  <none>
0x19db00087ba7     be7    NA  000100000000011100000 (sp -> fp)  <none>
0x19db00087c35     c75    NA  000100000000011100000 (sp -> fp)  <none>
0x19db00087cb1     cf1  1422  000000000000011100000 (sp -> fp)      64
0x19db00087cfc     d3c    NA  001000000101011100000 (sp -> fp)  <none>
0x19db00087d6d     dad    NA  001000101101011100000 (sp -> fp)  <none>
0x19db00087dfc     e3c    NA  001010001101011100000 (sp -> fp)  <none>
0x19db00087e96     ed6    NA  001000001101011100000 (sp -> fp)  <none>
0x19db00087f33     f73    NA  001000000101011100000 (sp -> fp)  <none>
0x19db00087fcf    100f    NA  001000000001011100000 (sp -> fp)  <none>
0x19db00088068    10a8    NA  001000000000011100000 (sp -> fp)  <none>
0x19db0008812c    116c    NA  001000000000011100000 (sp -> fp)  <none>
0x19db000881b6    11f6  1429  000000000000011100000 (sp -> fp)      65
0x19db000881ff    123f  1430  000000000000011100000 (sp -> fp)      66

RelocInfo (size = 126)
0x19db00086fd8  off heap target
0x19db00086ff2  off heap target
0x19db0008701f  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db00087030  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db0008704e  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087104  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00087141  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000871b8  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000877f9  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db00087808  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00087812  off heap target
0x19db00087829  off heap target
0x19db00087851  external reference (Runtime::TransitionElementsKind)  (0x7ffff6fe6190)
0x19db00087878  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087881  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00087890  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000878e3  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000878ec  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0008796a  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087973  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000879fc  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087a05  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00087a95  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087a9e  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00087b25  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087b2e  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00087bb1  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087bba  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00087c2a  off heap target
0x19db00087c49  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087c52  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00087c93  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00087c9d  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db00087cbb  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087cc4  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00087d11  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087d1a  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00087d83  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087d8c  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00087e18  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087e21  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00087ebc  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087ec5  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00087f62  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00087f6b  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00088003  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0008800c  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000880a8  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000880b1  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0008817e  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00088187  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00088198  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000881c4  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000881cd  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000881de  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00088211  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)

--- End code ---
assign 0 to v-1:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
assign 7 to v-8:0
assign 6 to v-7:0
------------------------
function: VMulti2
add v85->v87
add v82->v77
add v78->v80
add v70->v76
add v75->v76
add v74->v50
add v73->v50
add v73->v50
add v73->v50
add v73->v50
add v72->v70
add v69->v70
add v43->v0
add v68->v0
add v50->v0
add v67->v4
add v44->v4
add v66->v4
add v65->v44
add v43->v65
add v61->v65
add v64->v65
add v58->v61
add v43->v5
add v38->v5
add v63->v5
add v59->v61
add v57->v61
add v52->v50
adding pairs 2, v27:0x7fffd800d370, v44:0x7fffd800b318
add v43->v42
add v39->v42
add v41->v42
add v22->v39
add v21->v38
add v24->v39
add v23->v38
add v20->v39
add v19->v38
add v29->v0
add v36->v0
add v37->v29
add v35->v28
add v7->v27
add v26->v0
adding pairs 3, v27:0x7fffd800d370, v11:0x7fffd800d258
gap () () 
          [stack:-1|t] = ArchNop
gap (v3(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v4(-) = [stack:-2|t];) () 
          [stack:-3|t] = ArchNop
gap (v5(-) = [stack:-3|t];) () 
          [rsi|R|t] = ArchNop
gap (v6(-) = [rsi|R|t];) () 
          [rdi|R|t] = ArchNop
gap (v2(-) = [rdi|R|t];) () 
          [constant:46] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:123] [immediate:124]
gap () () 
          [constant:91] = ArchNop
gap () () 
          [constant:90] = ArchNop
gap () () 
          v89(R) = ArchStackCheckOffset
gap () () 
          X64Push v89(-)
gap () ([rbx|R|w64] = v90(-); [rax|R|w64] = v46(-); [rsi|R|t] = v91(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:122] #-1 #23 v2(S) v3(S) v4(S) v5(S) v6(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:121]
gap () () 
          ArchJmp [immediate:120]
gap () () 
          [constant:9] = ArchNop
gap () () 
          [constant:87] = ArchNop
gap () () 
          X64Test32 && branch if equal v87 #1 [immediate:118] [immediate:119]
gap () () 
          v85(R) = X64Movsd : MRI v87(R) [immediate:117]
gap () (v73 = v85(-);) 
          ArchJmp [immediate:116]
gap () (v86(R) = v87(-);) 
          v86(1) = X64Sar32 v86(R) #1
gap () () 
          v84(R) = SSEInt32ToFloat64 v86
gap () (v73 = v84(-);) 
          ArchJmp [immediate:115]
gap () () 
          [constant:71] = ArchNop
gap () () 
          v77(R) = X64Movq : MR v71(R)
gap () () 
          [constant:83] = ArchNop
gap () () 
          [constant:81] = ArchNop
gap () () 
          v82(R) = X64Lea : MRI v77(R) [immediate:114]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v83(R) v82(R) [immediate:112] [immediate:113]
gap () () 
          ArchJmp [immediate:111]
gap () ([rdx|R|w64] = v81(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:110] #-1 [rdx|R|w64]
gap (v80(-) = [rax|R|tp];) () 
          v78(R) = X64Lea : MRI v80(R) [immediate:109]
gap () (v76 = v78(-);) 
          ArchJmp [immediate:108]
gap () (v76 = v77(-);) 
          ArchJmp [immediate:107]
gap () () 
          v70(R) = X64Lea : MRI v76(R) [immediate:106]
gap () () 
          X64Movq : MR v71(R) v70(R)
gap () () 
          v75(R) = X64Lea : MRI v76(R) [immediate:105]
gap () (v50 = v75(-);) 
          v50(1) = ArchNop v50
gap () () 
          [constant:74] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v50(R) [immediate:104] v74(R)
gap () () 
          X64MovqCompressTagged : MRI v50(R) [immediate:102] [immediate:103]
gap () () 
          X64Movsd : MRI v50(R) [immediate:101] v73(R)
gap () () 
          X64Movsd : MRI v50(R) [immediate:100] v73(R)
gap () () 
          X64Movsd : MRI v50(R) [immediate:99] v73(R)
gap () () 
          X64Movsd : MRI v50(R) [immediate:98] v73(R)
gap () () 
          v72(R) = X64Lea : MRI v70(R) [immediate:97]
gap () () 
          X64Movq : MR v71(R) v72(R)
gap () () 
          v69(R) = X64Lea : MRI v70(R) [immediate:96]
gap () (v0 = v69(-);) 
          v0(1) = ArchNop v0
gap () () 
          [constant:43] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:95] v43(R)
gap () () 
          [constant:68] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:94] v68(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:93] v50(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:91] [immediate:92]
gap () () 
          X64Test32 && deoptimize if equal v4 #1 #22 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:89] [immediate:90]
gap () () 
          [constant:67] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v4(R) [immediate:86] v67(R) #21 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:87] [immediate:88]
gap () () 
          v44(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:85]
gap () () 
          v66(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:84]
gap () (v45(R) = v66(-);) 
          v45(1) = X64Sar32 v45(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v45 #0 #20 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:82] [immediate:83]
gap () () 
          v65(R) = X64MovqDecompressAnyTagged : MRI v44(R) [immediate:81]
gap () () 
          X64Test32 && deoptimize if equal v65 #1 #19 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:79] [immediate:80]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v65(R) [immediate:76] v43(R) #18 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:77] [immediate:78]
gap () () 
          v61(R) = X64MovqDecompressTaggedPointer : MRI v65(R) [immediate:75]
gap () () 
          v64(R) = X64MovqDecompressTaggedSigned : MRI v65(R) [immediate:74]
gap () (v62(R) = v64(-);) 
          v62(1) = X64Sar32 v62(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #0 #17 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:72] [immediate:73]
gap () () 
          v58(R) = X64Movsd : MRI v61(R) [immediate:71]
gap () () 
          X64Test32 && deoptimize if equal v5 #1 #16 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:69] [immediate:70]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v5(R) [immediate:66] v43(R) #15 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:67] [immediate:68]
gap () () 
          v38(R) = X64MovqDecompressTaggedPointer : MRI v5(R) [immediate:65]
gap () () 
          v63(R) = X64MovqDecompressTaggedSigned : MRI v5(R) [immediate:64]
gap () (v60(R) = v63(-);) 
          v60(1) = X64Sar32 v60(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v60 #0 #14 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:62] [immediate:63]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #1 #13 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:60] [immediate:61]
gap () () 
          v59(R) = X64Movsd : MRI v61(R) [immediate:59]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v60 #1 #12 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:57] [immediate:58]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #2 #11 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:55] [immediate:56]
gap () () 
          v57(R) = X64Movsd : MRI v61(R) [immediate:54]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v60 #2 #10 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:52] [immediate:53]
gap () () 
          v55(R) = AVXFloat64Mul : MRI v59(R) v38(R) [immediate:51]
gap () () 
          v56(R) = AVXFloat64Mul : MRI v58(R) v38(R) [immediate:50]
gap () () 
          v53(R) = AVXFloat64Mul : MRI v57(R) v38(R) [immediate:49]
gap () () 
          v54(R) = AVXFloat64Add v55(R) v56
gap () () 
          v52(R) = AVXFloat64Add v53(R) v54
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:47] [immediate:48]
gap () () 
          X64Movsd : MRI v50(R) [immediate:46] v52(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:44] [immediate:45]
gap () () 
          [constant:49] = ArchNop
gap () () 
          [constant:48] = ArchNop
gap () ([rbx|R|w64] = v48(-); [rax|R|w64] = v9(-); [rsi|R|t] = v49(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:43] #-1 #9 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:42]
gap () () 
          ArchJmp [immediate:41]
gap () (v27 = v46(-);) 
          ArchJmp [immediate:40]
gap () () 
          X64Cmp32 && branch if unsigned less than v27 #3 [immediate:38] [immediate:39]
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v27(R) v45 #8 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:37]
gap () () 
          v42(R) = X64MovqDecompressAnyTagged : MR4I v44(R) v27(R) [immediate:36]
gap () () 
          X64Test32 && deoptimize if equal v42 #1 #7 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:35]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v42(R) [immediate:33] v43(R) #6 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:34]
gap () () 
          v39(R) = X64MovqDecompressTaggedPointer : MRI v42(R) [immediate:32]
gap () () 
          v41(R) = X64MovqDecompressTaggedSigned : MRI v42(R) [immediate:31]
gap () (v40(R) = v41(-);) 
          v40(1) = X64Sar32 v40(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v40 #0 #5 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:30]
gap () () 
          v22(R) = X64Movsd : MRI v39(R) [immediate:29]
gap () () 
          v21(R) = X64Movsd : MRI v38(R) [immediate:28]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v40 #1 #4 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:27]
gap () () 
          v24(R) = X64Movsd : MRI v39(R) [immediate:26]
gap () () 
          v23(R) = X64Movsd : MRI v38(R) [immediate:25]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v40 #2 #3 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:24]
gap () () 
          v20(R) = X64Movsd : MRI v39(R) [immediate:23]
gap () () 
          v19(R) = X64Movsd : MRI v38(R) [immediate:22]
gap () () 
          v29(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:21]
gap () () 
          v36(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:20]
gap () () 
          v37(R) = X64MovqDecompressTaggedSigned : MRI v29(R) [immediate:19]
gap () (v34(R) = v37(-);) 
          v34(1) = X64Sar32 v34(R) #1
gap () (v28(R) = v36(-);) 
          v28(1) = X64Sar32 v28(R) #1
gap () () 
          v35(R) = X64Lea32 : MRI v28(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v27(R) v35 #2 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:18]
gap () () 
          X64Cmp32 && branch if unsigned less than v27(R) v34 [immediate:16] [immediate:17]
gap () () 
          v33(R) = X64Lea32 : MR1 v27(R) v27(R)
gap () () 
          [constant:32] = ArchNop
gap () ([rax|R|t] = v0(-); [rbx|R|w32] = v33(-); [rsi|R|w64] = v32(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:15] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v30(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v30 #1 #1 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:14]
gap () (v11 = v30(-);) 
          ArchJmp [immediate:13]
gap () (v11 = v29(-);) 
          ArchJmp [immediate:12]
gap () () 
          v7(R) = X64Lea32 : MRI v27(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v27(R) v28 [immediate:10] [immediate:11]
gap () () 
          v26(R) = X64Lea32 : MR1 v7(R) v7(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:9] v26(R)
gap () () 
          ArchJmp [immediate:8]
gap () () 
          ArchJmp [immediate:7]
gap () () 
          v17(R) = AVXFloat64Mul v23(R) v24
gap () () 
          v18(R) = AVXFloat64Mul v21(R) v22
gap () () 
          v15(R) = AVXFloat64Mul v19(R) v20
gap () () 
          v16(R) = AVXFloat64Add v17(R) v18
gap () () 
          v14(R) = AVXFloat64Add v15(R) v16
gap () () 
          X64Movsd : MR8I v11(R) v27(R) [immediate:6] v14(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:4] [immediate:5]
gap () () 
          [constant:10] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () ([rbx|R|w64] = v8(-); [rax|R|w64] = v9(-); [rsi|R|t] = v10(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:3] #-1 #0 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) v7(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:2]
gap () () 
          ArchJmp [immediate:1]
gap () (v27 = v7(-);) 
          ArchJmp [immediate:0]
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
2, v27, v44
3, v27, v11
print modrm pairs
1, v7, v27
1, v35, v28
1, v37, v29
1, v36, v0
1, v29, v0
1, v20, v39
1, v24, v39
1, v52, v50
1, v63, v5
1, v57, v61
1, v65, v44
1, v43, v42
1, v43, v5
1, v43, v65
1, v43, v0
1, v66, v4
1, v19, v38
1, v61, v65
1, v26, v0
1, v22, v39
1, v44, v4
1, v67, v4
1, v74, v50
1, v38, v5
1, v69, v70
1, v59, v61
1, v58, v61
1, v72, v70
1, v70, v76
1, v73, v50
1, v41, v42
1, v39, v42
1, v75, v76
1, v64, v65
1, v23, v38
1, v50, v0
1, v82, v77
1, v68, v0
1, v21, v38
1, v78, v80
1, v85, v87
assign rcx to v89:0
assign 1 to v89:0
assign rax to v46:1
assign 0 to v46:1
assign rbx to v90:1
assign 3 to v90:1
assign rsi to v91:1
assign 6 to v91:1
assign rcx to v46:2
assign 1 to v46:2
assign rcx to v87:1
assign 1 to v87:1
assign rcx to v86:0
assign 1 to v86:0
assign rcx to v71:1
assign 1 to v71:1
assign rdi to v77:0
assign 7 to v77:0
assign r8 to v82:0
assign 8 to v82:0
assign r9 to v83:1
assign 9 to v83:1
assign rdx to v81:1
assign 2 to v81:1
blocking v71 pick register rcx
assign rax to v80:0
assign 0 to v80:0
assign rdi to v78:0
assign 7 to v78:0
assign rcx to v71:4
assign 1 to v71:4
assign rdi to v76:0
assign 7 to v76:0
assign r8 to v70:0
assign 8 to v70:0
assign rcx to v71:3
assign 1 to v71:3
assign rdi to v75:0
assign 7 to v75:0
assign rdi to v50:0
assign 7 to v50:0
assign r9 to v74:1
assign 9 to v74:1
assign r9 to v72:0
assign 9 to v72:0
assign rcx to v69:0
assign 1 to v69:0
assign rcx to v0:0
assign 1 to v0:0
assign r8 to v43:1
assign 8 to v43:1
assign r9 to v68:1
assign 9 to v68:1
assign r9 to v4:1
assign 9 to v4:1
assign r12 to v67:1
assign 12 to v67:1
assign r12 to v44:0
assign 12 to v44:0
assign r14 to v66:0
assign 14 to v66:0
assign r14 to v45:0
assign 14 to v45:0
assign rax to v65:0
assign 0 to v65:0
assign r15 to v61:0
assign 15 to v61:0
assign rax to v64:0
assign 0 to v64:0
assign rax to v62:0
assign 0 to v62:0
assign r11 to v5:1
assign 11 to v5:1
assign rdx to v38:0
assign 2 to v38:0
assign rsi to v63:0
assign 6 to v63:0
assign rsi to v60:0
assign 6 to v60:0
assign rax to v9:1
assign 0 to v9:1
assign rbx to v48:1
assign 3 to v48:1
assign rsi to v49:1
assign 6 to v49:1
assign rdi to v9:2
assign 7 to v9:2
blocking v0 pick register rcx
blocking v38 pick register rdx
blocking v43 pick register r8
blocking v44 pick register r12
assign rdx to v38:3
assign 2 to v38:3
assign r11 to v5:3
assign 11 to v5:3
assign r14 to v45:2
assign 14 to v45:2
assign r12 to v44:3
assign 12 to v44:3
assign r9 to v4:3
assign 9 to v4:3
assign r8 to v43:4
assign 8 to v43:4
assign rcx to v0:3
assign 1 to v0:3
assign rcx to v0:2
assign 1 to v0:2
assign rdx to v38:2
assign 2 to v38:2
assign r8 to v43:3
assign 8 to v43:3
assign r12 to v44:2
assign 12 to v44:2
assign rax to v27:0
assign 0 to v27:0
blocking v42 pick register r9
assign r9 to v42:0
assign 9 to v42:0
assign rdi to v39:0
assign 7 to v39:0
assign r9 to v41:0
assign 9 to v41:0
assign r9 to v40:0
assign 9 to v40:0
assign rdi to v29:0
assign 7 to v29:0
assign r9 to v36:0
assign 9 to v36:0
assign r15 to v37:0
assign 15 to v37:0
assign r15 to v34:0
assign 15 to v34:0
assign r9 to v28:0
assign 9 to v28:0
assign rsi to v35:0
assign 6 to v35:0
assign rbx to v33:0
assign 3 to v33:0
assign rsi to v32:1
assign 6 to v32:1
assign rdi to v27:1
assign 7 to v27:1
blocking v0 pick register rcx
blocking v27 pick register rax
assign rax to v30:0
assign 0 to v30:0
assign r9 to v28:2
assign 9 to v28:2
assign rax to v27:4
assign 0 to v27:4
assign r12 to v44:5
assign 12 to v44:5
assign r8 to v43:6
assign 8 to v43:6
assign rdx to v38:5
assign 2 to v38:5
assign rcx to v0:6
assign 1 to v0:6
assign r14 to v45:4
assign 14 to v45:4
assign r11 to v5:5
assign 11 to v5:5
assign rdi to v11:0
assign 7 to v11:0
assign rax to v27:3
assign 0 to v27:3
assign r15 to v7:0
assign 15 to v7:0
assign r9 to v26:0
assign 9 to v26:0
assign rcx to v0:5
assign 1 to v0:5
assign rbx to v8:1
assign 3 to v8:1
assign rsi to v10:1
assign 6 to v10:1
assign rcx to v0:8
assign 1 to v0:8
assign r15 to v7:2
assign 15 to v7:2
assign r11 to v5:7
assign 11 to v5:7
assign r14 to v45:6
assign 14 to v45:6
assign rdx to v38:7
assign 2 to v38:7
assign r8 to v43:8
assign 8 to v43:8
assign r12 to v44:7
assign 12 to v44:7
spill count : 26
add v85->v87
add v82->v77
add v78->v80
add v70->v76
add v75->v76
add v74->v50
add v73->v50
add v73->v50
add v73->v50
add v73->v50
add v72->v70
add v69->v70
add v43->v0
add v68->v0
add v50->v0
add v67->v4
add v44->v4
add v66->v4
add v65->v44
add v43->v65
add v61->v65
add v64->v65
add v58->v61
add v43->v5
add v38->v5
add v63->v5
add v59->v61
add v57->v61
add v52->v50
adding pairs 2, v27:0x7fffd800d370, v44:0x7fffd801b450
add v43->v42
add v39->v42
add v41->v42
add v22->v39
add v21->v38
add v24->v39
add v23->v38
add v20->v39
add v19->v38
add v29->v0
add v36->v0
add v37->v29
add v35->v28
add v7->v27
add v26->v0
adding pairs 3, v27:0x7fffd801c978, v11:0x7fffd800d258
gap () () 
          [stack:-1|t] = ArchNop
gap (v3(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v4(-) = [stack:-2|t];) () 
          [stack:-3|t] = ArchNop
gap (v5(-) = [stack:-3|t];) () 
          [rsi|R|t] = ArchNop
gap (v6(-) = [rsi|R|t];) () 
          [rdi|R|t] = ArchNop
gap (v2(-) = [rdi|R|t];) () 
          [constant:46] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:123] [immediate:124]
gap () () 
          [constant:91] = ArchNop
gap () () 
          [constant:90] = ArchNop
gap () () 
          v89(R) = ArchStackCheckOffset
gap () () 
          X64Push v89(-)
gap () ([rbx|R|w64] = v90(-); [rax|R|w64] = v46(-); [rsi|R|t] = v91(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:122] #-1 #23 v2(S) v3(S) v4(S) v5(S) v6(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:121]
gap () () 
          ArchJmp [immediate:120]
gap () () 
          [constant:9] = ArchNop
gap () () 
          [constant:87] = ArchNop
gap () () 
          X64Test32 && branch if equal v87 #1 [immediate:118] [immediate:119]
gap () () 
          v85(R) = X64Movsd : MRI v87(R) [immediate:117]
gap () (v73 = v85(-);) 
          ArchJmp [immediate:116]
gap () (v86(R) = v87(-);) 
          v86(1) = X64Sar32 v86(R) #1
gap () () 
          v84(R) = SSEInt32ToFloat64 v86
gap () (v73 = v84(-);) 
          ArchJmp [immediate:115]
gap () () 
          [constant:71] = ArchNop
gap () () 
          v77(R) = X64Movq : MR v71(R)
gap () () 
          [constant:83] = ArchNop
gap () () 
          [constant:81] = ArchNop
gap () () 
          v82(R) = X64Lea : MRI v77(R) [immediate:114]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v83(R) v82(R) [immediate:112] [immediate:113]
gap () () 
          ArchJmp [immediate:111]
gap () ([rdx|R|w64] = v81(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:110] #-1 [rdx|R|w64]
gap (v80(-) = [rax|R|tp];) () 
          v78(R) = X64Lea : MRI v80(R) [immediate:109]
gap () (v76 = v78(-);) 
          ArchJmp [immediate:108]
gap () (v76 = v77(-);) 
          ArchJmp [immediate:107]
gap () () 
          v70(R) = X64Lea : MRI v76(R) [immediate:106]
gap () () 
          X64Movq : MR v71(R) v70(R)
gap () () 
          v75(R) = X64Lea : MRI v76(R) [immediate:105]
gap () (v50 = v75(-);) 
          v50(1) = ArchNop v50
gap () () 
          [constant:74] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v50(R) [immediate:104] v74(R)
gap () () 
          X64MovqCompressTagged : MRI v50(R) [immediate:102] [immediate:103]
gap () () 
          X64Movsd : MRI v50(R) [immediate:101] v73(R)
gap () () 
          X64Movsd : MRI v50(R) [immediate:100] v73(R)
gap () () 
          X64Movsd : MRI v50(R) [immediate:99] v73(R)
gap () () 
          X64Movsd : MRI v50(R) [immediate:98] v73(R)
gap () () 
          v72(R) = X64Lea : MRI v70(R) [immediate:97]
gap () () 
          X64Movq : MR v71(R) v72(R)
gap () () 
          v69(R) = X64Lea : MRI v70(R) [immediate:96]
gap () (v0 = v69(-);) 
          v0(1) = ArchNop v0
gap () () 
          [constant:43] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:95] v43(R)
gap () () 
          [constant:68] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:94] v68(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:93] v50(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:91] [immediate:92]
gap () () 
          X64Test32 && deoptimize if equal v4 #1 #22 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:89] [immediate:90]
gap () () 
          [constant:67] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v4(R) [immediate:86] v67(R) #21 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:87] [immediate:88]
gap () () 
          v44(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:85]
gap () () 
          v66(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:84]
gap () (v45(R) = v66(-);) 
          v45(1) = X64Sar32 v45(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v45 #0 #20 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:82] [immediate:83]
gap () () 
          v65(R) = X64MovqDecompressAnyTagged : MRI v44(R) [immediate:81]
gap () () 
          X64Test32 && deoptimize if equal v65 #1 #19 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:79] [immediate:80]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v65(R) [immediate:76] v43(R) #18 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:77] [immediate:78]
gap () () 
          v61(R) = X64MovqDecompressTaggedPointer : MRI v65(R) [immediate:75]
gap () () 
          v64(R) = X64MovqDecompressTaggedSigned : MRI v65(R) [immediate:74]
gap () (v62(R) = v64(-);) 
          v62(1) = X64Sar32 v62(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #0 #17 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:72] [immediate:73]
gap () () 
          v58(R) = X64Movsd : MRI v61(R) [immediate:71]
gap () () 
          X64Test32 && deoptimize if equal v5 #1 #16 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:69] [immediate:70]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v5(R) [immediate:66] v43(R) #15 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:67] [immediate:68]
gap () () 
          v38(R) = X64MovqDecompressTaggedPointer : MRI v5(R) [immediate:65]
gap () () 
          v63(R) = X64MovqDecompressTaggedSigned : MRI v5(R) [immediate:64]
gap () (v60(R) = v63(-);) 
          v60(1) = X64Sar32 v60(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v60 #0 #14 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:62] [immediate:63]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #1 #13 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:60] [immediate:61]
gap () () 
          v59(R) = X64Movsd : MRI v61(R) [immediate:59]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v60 #1 #12 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:57] [immediate:58]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #2 #11 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:55] [immediate:56]
gap () () 
          v57(R) = X64Movsd : MRI v61(R) [immediate:54]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v60 #2 #10 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:52] [immediate:53]
gap () () 
          v55(R) = AVXFloat64Mul : MRI v59(R) v38(R) [immediate:51]
gap () () 
          v56(R) = AVXFloat64Mul : MRI v58(R) v38(R) [immediate:50]
gap () () 
          v53(R) = AVXFloat64Mul : MRI v57(R) v38(R) [immediate:49]
gap () () 
          v54(R) = AVXFloat64Add v55(R) v56
gap () () 
          v52(R) = AVXFloat64Add v53(R) v54
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:47] [immediate:48]
gap () () 
          X64Movsd : MRI v50(R) [immediate:46] v52(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:44] [immediate:45]
gap () () 
          [constant:49] = ArchNop
gap () () 
          [constant:48] = ArchNop
gap () ([rbx|R|w64] = v48(-); [rax|R|w64] = v9(-); [rsi|R|t] = v49(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:43] #-1 #9 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:42]
gap () () 
          ArchJmp [immediate:41]
gap () (v27 = v46(-);) 
          ArchJmp [immediate:40]
gap () () 
          X64Cmp32 && branch if unsigned less than v27 #3 [immediate:38] [immediate:39]
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v27(R) v45 #8 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:37]
gap () () 
          v42(R) = X64MovqDecompressAnyTagged : MR4I v44(R) v27(R) [immediate:36]
gap () () 
          X64Test32 && deoptimize if equal v42 #1 #7 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:35]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v42(R) [immediate:33] v43(R) #6 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:34]
gap () () 
          v39(R) = X64MovqDecompressTaggedPointer : MRI v42(R) [immediate:32]
gap () () 
          v41(R) = X64MovqDecompressTaggedSigned : MRI v42(R) [immediate:31]
gap () (v40(R) = v41(-);) 
          v40(1) = X64Sar32 v40(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v40 #0 #5 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:30]
gap () () 
          v22(R) = X64Movsd : MRI v39(R) [immediate:29]
gap () () 
          v21(R) = X64Movsd : MRI v38(R) [immediate:28]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v40 #1 #4 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:27]
gap () () 
          v24(R) = X64Movsd : MRI v39(R) [immediate:26]
gap () () 
          v23(R) = X64Movsd : MRI v38(R) [immediate:25]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v40 #2 #3 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:24]
gap () () 
          v20(R) = X64Movsd : MRI v39(R) [immediate:23]
gap () () 
          v19(R) = X64Movsd : MRI v38(R) [immediate:22]
gap () () 
          v29(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:21]
gap () () 
          v36(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:20]
gap () () 
          v37(R) = X64MovqDecompressTaggedSigned : MRI v29(R) [immediate:19]
gap () (v34(R) = v37(-);) 
          v34(1) = X64Sar32 v34(R) #1
gap () (v28(R) = v36(-);) 
          v28(1) = X64Sar32 v28(R) #1
gap () () 
          v35(R) = X64Lea32 : MRI v28(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v27(R) v35 #2 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:18]
gap () () 
          X64Cmp32 && branch if unsigned less than v27(R) v34 [immediate:16] [immediate:17]
gap () () 
          v33(R) = X64Lea32 : MR1 v27(R) v27(R)
gap () () 
          [constant:32] = ArchNop
gap () ([rax|R|t] = v0(-); [rbx|R|w32] = v33(-); [rsi|R|w64] = v32(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:15] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v30(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v30 #1 #1 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v27(-) [immediate:14]
gap () (v11 = v30(-);) 
          ArchJmp [immediate:13]
gap () (v11 = v29(-);) 
          ArchJmp [immediate:12]
gap () () 
          v7(R) = X64Lea32 : MRI v27(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v27(R) v28 [immediate:10] [immediate:11]
gap () () 
          v26(R) = X64Lea32 : MR1 v7(R) v7(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:9] v26(R)
gap () () 
          ArchJmp [immediate:8]
gap () () 
          ArchJmp [immediate:7]
gap () () 
          v17(R) = AVXFloat64Mul v23(R) v24
gap () () 
          v18(R) = AVXFloat64Mul v21(R) v22
gap () () 
          v15(R) = AVXFloat64Mul v19(R) v20
gap () () 
          v16(R) = AVXFloat64Add v17(R) v18
gap () () 
          v14(R) = AVXFloat64Add v15(R) v16
gap () () 
          X64Movsd : MR8I v11(R) v27(R) [immediate:6] v14(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:4] [immediate:5]
gap () () 
          [constant:10] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () ([rbx|R|w64] = v8(-); [rax|R|w64] = v9(-); [rsi|R|t] = v10(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:3] #-1 #0 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) v7(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:2]
gap () () 
          ArchJmp [immediate:1]
gap () (v27 = v7(-);) 
          ArchJmp [immediate:0]
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
2, v27, v44
3, v27, v11
print modrm pairs
1, v7, v27
1, v35, v28
1, v37, v29
1, v36, v0
1, v29, v0
1, v20, v39
1, v24, v39
1, v52, v50
1, v63, v5
1, v57, v61
1, v65, v44
1, v43, v5
1, v43, v65
1, v43, v0
1, v66, v4
1, v19, v38
1, v61, v65
1, v26, v0
1, v22, v39
1, v44, v4
1, v43, v42
1, v67, v4
1, v74, v50
1, v38, v5
1, v69, v70
1, v59, v61
1, v58, v61
1, v72, v70
1, v70, v76
1, v73, v50
1, v41, v42
1, v39, v42
1, v75, v76
1, v64, v65
1, v23, v38
1, v50, v0
1, v82, v77
1, v68, v0
1, v21, v38
1, v78, v80
1, v85, v87
assign xmm0 to v85:0
assign 0 to v85:0
assign xmm0 to v84:0
assign 0 to v84:0
assign xmm0 to v73:0
assign 0 to v73:0
blocking v73 pick register xmm0
assign xmm0 to v73:3
assign 0 to v73:3
assign xmm0 to v73:2
assign 0 to v73:2
assign xmm0 to v58:0
assign 0 to v58:0
assign xmm1 to v59:0
assign 1 to v59:0
assign xmm2 to v57:0
assign 2 to v57:0
assign xmm1 to v55:0
assign 1 to v55:0
assign xmm0 to v56:0
assign 0 to v56:0
assign xmm2 to v53:0
assign 2 to v53:0
assign xmm0 to v54:0
assign 0 to v54:0
assign xmm0 to v52:0
assign 0 to v52:0
assign xmm0 to v22:0
assign 0 to v22:0
assign xmm1 to v21:0
assign 1 to v21:0
assign xmm2 to v24:0
assign 2 to v24:0
assign xmm4 to v23:0
assign 4 to v23:0
assign xmm5 to v20:0
assign 5 to v20:0
assign xmm6 to v19:0
assign 6 to v19:0
blocking v21 pick register xmm1
blocking v23 pick register xmm4
blocking v19 pick register xmm6
assign xmm6 to v19:3
assign 6 to v19:3
assign xmm5 to v20:2
assign 5 to v20:2
assign xmm4 to v23:3
assign 4 to v23:3
assign xmm2 to v24:2
assign 2 to v24:2
assign xmm1 to v21:3
assign 1 to v21:3
assign xmm0 to v22:2
assign 0 to v22:2
assign xmm4 to v23:2
assign 4 to v23:2
assign xmm2 to v17:0
assign 2 to v17:0
assign xmm1 to v21:2
assign 1 to v21:2
assign xmm0 to v18:0
assign 0 to v18:0
assign xmm6 to v19:2
assign 6 to v19:2
assign xmm1 to v15:0
assign 1 to v15:0
assign xmm0 to v16:0
assign 0 to v16:0
assign xmm0 to v14:0
assign 0 to v14:0
spill count : 7
--- Raw source ---
(M, V) {
      var Vect = new Array();
      var i = 0;
      for (;i < 3; i++) Vect[i] = M[i][0] * V[0] + M[i][1] * V[1] + M[i][2] * V[2];
      return Vect;
    }


--- Optimized code ---
optimization_id = 6
source_position = 3001
kind = TURBOFAN
name = VMulti2
stack_slots = 20
compiler = turbofan
address = 0x19db00088541

Instructions (size = 1524)
0x19db00088580     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db00088587     7  483bd9         REX.W cmpq rbx,rcx
0x19db0008858a     a  7418           jz 0x19db000885a4  <+0x24>
0x19db0008858c     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db00088596    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db000885a0    20  41ffd2         call r10
0x19db000885a3    23  cc             int3l
0x19db000885a4    24  8b59d0         movl rbx,[rcx-0x30]
0x19db000885a7    27  4903dd         REX.W addq rbx,r13
0x19db000885aa    2a  f6430701       testb [rbx+0x7],0x1
0x19db000885ae    2e  740d           jz 0x19db000885bd  <+0x3d>
0x19db000885b0    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db000885ba    3a  41ffe2         jmp r10
0x19db000885bd    3d  55             push rbp
0x19db000885be    3e  4889e5         REX.W movq rbp,rsp
0x19db000885c1    41  56             push rsi
0x19db000885c2    42  57             push rdi
0x19db000885c3    43  50             push rax
0x19db000885c4    44  4883ec78       REX.W subq rsp,0x78
0x19db000885c8    48  488975d0       REX.W movq [rbp-0x30],rsi
0x19db000885cc    4c  48897dd8       REX.W movq [rbp-0x28],rdi
0x19db000885d0    50  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db000885d4    54  0f86f6020000   jna 0x19db000888d0  <+0x350>
0x19db000885da    5a  498b8d98000000 REX.W movq rcx,[r13+0x98] (root (the_hole_value))
0x19db000885e1    61  f6c101         testb rcx,0x1
0x19db000885e4    64  0f851f030000   jnz 0x19db00088909  <+0x389>
0x19db000885ea    6a  d1f9           sarl rcx, 1
0x19db000885ec    6c  c5832ac1       vcvtlsi2sd xmm0,xmm15,rcx
0x19db000885f0    70  48b9f87d6d5555550000 REX.W movq rcx,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db000885fa    7a  488b39         REX.W movq rdi,[rcx]
0x19db000885fd    7d  4c8d4738       REX.W leaq r8,[rdi+0x38]
0x19db00088601    81  49b9007e6d5555550000 REX.W movq r9,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db0008860b    8b  4d3901         REX.W cmpq [r9],r8
0x19db0008860e    8e  0f86ff020000   jna 0x19db00088913  <+0x393>
0x19db00088614    94  4c8d4728       REX.W leaq r8,[rdi+0x28]
0x19db00088618    98  4c8901         REX.W movq [rcx],r8
0x19db0008861b    9b  4883c701       REX.W addq rdi,0x1
0x19db0008861f    9f  4d8b8dd8010000 REX.W movq r9,[r13+0x1d8] (root (fixed_double_array_map))
0x19db00088626    a6  44894fff       movl [rdi-0x1],r9
0x19db0008862a    aa  c7470308000000 movl [rdi+0x3],0x8
0x19db00088631    b1  c5fb114707     vmovsd [rdi+0x7],xmm0
0x19db00088636    b6  c5fb11470f     vmovsd [rdi+0xf],xmm0
0x19db0008863b    bb  c5fb114717     vmovsd [rdi+0x17],xmm0
0x19db00088640    c0  c5fb11471f     vmovsd [rdi+0x1f],xmm0
0x19db00088645    c5  4d8d4810       REX.W leaq r9,[r8+0x10]
0x19db00088649    c9  4c8909         REX.W movq [rcx],r9
0x19db0008864c    cc  498d4801       REX.W leaq rcx,[r8+0x1]
0x19db00088650    d0  41b8559f3008   movl r8,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00088656    d6  448941ff       movl [rcx-0x1],r8
0x19db0008865a    da  4d8b8d58010000 REX.W movq r9,[r13+0x158] (root (empty_fixed_array))
0x19db00088661    e1  44894903       movl [rcx+0x3],r9
0x19db00088665    e5  897907         movl [rcx+0x7],rdi
0x19db00088668    e8  c7410b00000000 movl [rcx+0xb],0x0
0x19db0008866f    ef  4c8b4d18       REX.W movq r9,[rbp+0x18]
0x19db00088673    f3  41f6c101       testb r9,0x1
0x19db00088677    f7  0f844d040000   jz 0x19db00088aca  <+0x54a>
0x19db0008867d    fd  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00088683   103  453961ff       cmpl [r9-0x1],r12
0x19db00088687   107  0f8544040000   jnz 0x19db00088ad1  <+0x551>
0x19db0008868d   10d  458b6107       movl r12,[r9+0x7]
0x19db00088691   111  4d03e5         REX.W addq r12,r13
0x19db00088694   114  458b710b       movl r14,[r9+0xb]
0x19db00088698   118  41d1fe         sarl r14, 1
0x19db0008869b   11b  4183fe00       cmpl r14,0x0
0x19db0008869f   11f  0f8633040000   jna 0x19db00088ad8  <+0x558>
0x19db000886a5   125  418b442407     movl rax,[r12+0x7]
0x19db000886aa   12a  4903c5         REX.W addq rax,r13
0x19db000886ad   12d  a801           test al,0x1
0x19db000886af   12f  0f842a040000   jz 0x19db00088adf  <+0x55f>
0x19db000886b5   135  443940ff       cmpl [rax-0x1],r8
0x19db000886b9   139  0f8527040000   jnz 0x19db00088ae6  <+0x566>
0x19db000886bf   13f  448b7807       movl r15,[rax+0x7]
0x19db000886c3   143  4d03fd         REX.W addq r15,r13
0x19db000886c6   146  8b400b         movl rax,[rax+0xb]
0x19db000886c9   149  d1f8           sarl rax, 1
0x19db000886cb   14b  83f800         cmpl rax,0x0
0x19db000886ce   14e  0f8619040000   jna 0x19db00088aed  <+0x56d>
0x19db000886d4   154  c4c17b104707   vmovsd xmm0,[r15+0x7]
0x19db000886da   15a  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db000886de   15e  41f6c301       testb r11,0x1
0x19db000886e2   162  0f840c040000   jz 0x19db00088af4  <+0x574>
0x19db000886e8   168  453943ff       cmpl [r11-0x1],r8
0x19db000886ec   16c  0f8509040000   jnz 0x19db00088afb  <+0x57b>
0x19db000886f2   172  418b5307       movl rdx,[r11+0x7]
0x19db000886f6   176  4903d5         REX.W addq rdx,r13
0x19db000886f9   179  418b730b       movl rsi,[r11+0xb]
0x19db000886fd   17d  d1fe           sarl rsi, 1
0x19db000886ff   17f  83fe00         cmpl rsi,0x0
0x19db00088702   182  0f86fa030000   jna 0x19db00088b02  <+0x582>
0x19db00088708   188  83f801         cmpl rax,0x1
0x19db0008870b   18b  0f86f8030000   jna 0x19db00088b09  <+0x589>
0x19db00088711   191  c4c17b104f0f   vmovsd xmm1,[r15+0xf]
0x19db00088717   197  83fe01         cmpl rsi,0x1
0x19db0008871a   19a  0f86f0030000   jna 0x19db00088b10  <+0x590>
0x19db00088720   1a0  83f802         cmpl rax,0x2
0x19db00088723   1a3  0f86ee030000   jna 0x19db00088b17  <+0x597>
0x19db00088729   1a9  c4c17b105717   vmovsd xmm2,[r15+0x17]
0x19db0008872f   1af  83fe02         cmpl rsi,0x2
0x19db00088732   1b2  0f86e6030000   jna 0x19db00088b1e  <+0x59e>
0x19db00088738   1b8  c5f3594a0f     vmulsd xmm1,xmm1,[rdx+0xf]
0x19db0008873d   1bd  c5fb594207     vmulsd xmm0,xmm0,[rdx+0x7]
0x19db00088742   1c2  c5eb595217     vmulsd xmm2,xmm2,[rdx+0x17]
0x19db00088747   1c7  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db0008874b   1cb  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db0008874f   1cf  c7410b02000000 movl [rcx+0xb],0x2
0x19db00088756   1d6  c5fb114707     vmovsd [rdi+0x7],xmm0
0x19db0008875b   1db  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008875f   1df  0f86da010000   jna 0x19db0008893f  <+0x3bf>
0x19db00088765   1e5  b801000000     movl rax,0x1
0x19db0008876a   1ea  e904000000     jmp 0x19db00088773  <+0x1f3>
0x19db0008876f   1ef  90             nop
0x19db00088770   1f0  498bc7         REX.W movq rax,r15
0x19db00088773   1f3  83f803         cmpl rax,0x3
0x19db00088776   1f6  0f8336010000   jnc 0x19db000888b2  <+0x332>
0x19db0008877c   1fc  413bc6         cmpl rax,r14
0x19db0008877f   1ff  0f83a0030000   jnc 0x19db00088b25  <+0x5a5>
0x19db00088785   205  458b4c8407     movl r9,[r12+rax*4+0x7]
0x19db0008878a   20a  4d03cd         REX.W addq r9,r13
0x19db0008878d   20d  41f6c101       testb r9,0x1
0x19db00088791   211  0f8495030000   jz 0x19db00088b2c  <+0x5ac>
0x19db00088797   217  453941ff       cmpl [r9-0x1],r8
0x19db0008879b   21b  0f8592030000   jnz 0x19db00088b33  <+0x5b3>
0x19db000887a1   221  418b7907       movl rdi,[r9+0x7]
0x19db000887a5   225  4903fd         REX.W addq rdi,r13
0x19db000887a8   228  458b490b       movl r9,[r9+0xb]
0x19db000887ac   22c  41d1f9         sarl r9, 1
0x19db000887af   22f  4183f900       cmpl r9,0x0
0x19db000887b3   233  0f8681030000   jna 0x19db00088b3a  <+0x5ba>
0x19db000887b9   239  c5fb104707     vmovsd xmm0,[rdi+0x7]
0x19db000887be   23e  c5fb104a07     vmovsd xmm1,[rdx+0x7]
0x19db000887c3   243  4183f901       cmpl r9,0x1
0x19db000887c7   247  0f8674030000   jna 0x19db00088b41  <+0x5c1>
0x19db000887cd   24d  c5fb10570f     vmovsd xmm2,[rdi+0xf]
0x19db000887d2   252  c5fb10620f     vmovsd xmm4,[rdx+0xf]
0x19db000887d7   257  4183f902       cmpl r9,0x2
0x19db000887db   25b  0f8667030000   jna 0x19db00088b48  <+0x5c8>
0x19db000887e1   261  c5fb106f17     vmovsd xmm5,[rdi+0x17]
0x19db000887e6   266  c5fb107217     vmovsd xmm6,[rdx+0x17]
0x19db000887eb   26b  8b7907         movl rdi,[rcx+0x7]
0x19db000887ee   26e  4903fd         REX.W addq rdi,r13
0x19db000887f1   271  448b490b       movl r9,[rcx+0xb]
0x19db000887f5   275  448b7f03       movl r15,[rdi+0x3]
0x19db000887f9   279  41d1ff         sarl r15, 1
0x19db000887fc   27c  41d1f9         sarl r9, 1
0x19db000887ff   27f  418d7101       leal rsi,[r9+0x1]
0x19db00088803   283  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db0008880d   28d  4c3bd6         REX.W cmpq r10,rsi
0x19db00088810   290  7715           ja 0x19db00088827  <+0x2a7>
0x19db00088812   292  48ba0200000000000000 REX.W movq rdx,0x2
0x19db0008881c   29c  4c8b1575fdffff REX.W movq r10,[rip+0xfffffd75]
0x19db00088823   2a3  41ffd2         call r10
0x19db00088826   2a6  cc             int3l
0x19db00088827   2a7  3bc6           cmpl rax,rsi
0x19db00088829   2a9  0f8320030000   jnc 0x19db00088b4f  <+0x5cf>
0x19db0008882f   2af  413bc7         cmpl rax,r15
0x19db00088832   2b2  0f8369010000   jnc 0x19db000889a1  <+0x421>
0x19db00088838   2b8  448d7801       leal r15,[rax+0x1]
0x19db0008883c   2bc  4c8b15c2ffffff REX.W movq r10,[rip+0xffffffc2]
0x19db00088843   2c3  4d3bd7         REX.W cmpq r10,r15
0x19db00088846   2c6  7712           ja 0x19db0008885a  <+0x2da>
0x19db00088848   2c8  488b15c5ffffff REX.W movq rdx,[rip+0xffffffc5]
0x19db0008884f   2cf  4c8b1542fdffff REX.W movq r10,[rip+0xfffffd42]
0x19db00088856   2d6  41ffd2         call r10
0x19db00088859   2d9  cc             int3l
0x19db0008885a   2da  413bc1         cmpl rax,r9
0x19db0008885d   2dd  0f8226000000   jc 0x19db00088889  <+0x309>
0x19db00088863   2e3  478d0c3f       leal r9,[r15+r15*1]
0x19db00088867   2e7  4c8b1597ffffff REX.W movq r10,[rip+0xffffff97]
0x19db0008886e   2ee  4d3bd1         REX.W cmpq r10,r9
0x19db00088871   2f1  7712           ja 0x19db00088885  <+0x305>
0x19db00088873   2f3  488b159affffff REX.W movq rdx,[rip+0xffffff9a]
0x19db0008887a   2fa  4c8b1517fdffff REX.W movq r10,[rip+0xfffffd17]
0x19db00088881   301  41ffd2         call r10
0x19db00088884   304  cc             int3l
0x19db00088885   305  4489490b       movl [rcx+0xb],r9
0x19db00088889   309  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db0008888d   30d  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db00088891   311  c5cb59cd       vmulsd xmm1,xmm6,xmm5
0x19db00088895   315  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00088899   319  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db0008889d   31d  c5fb1144c707   vmovsd [rdi+rax*8+0x7],xmm0
0x19db000888a3   323  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db000888a7   327  0f87c3feffff   ja 0x19db00088770  <+0x1f0>
0x19db000888ad   32d  e9b7010000     jmp 0x19db00088a69  <+0x4e9>
0x19db000888b2   332  488bc1         REX.W movq rax,rcx
0x19db000888b5   335  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db000888b9   339  488be5         REX.W movq rsp,rbp
0x19db000888bc   33c  5d             pop rbp
0x19db000888bd   33d  4883f902       REX.W cmpq rcx,0x2
0x19db000888c1   341  7f03           jg 0x19db000888c6  <+0x346>
0x19db000888c3   343  c21800         ret 0x18
0x19db000888c6   346  415a           pop r10
0x19db000888c8   348  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db000888cd   34d  4152           push r10
0x19db000888cf   34f  c3             retl
0x19db000888d0   350  48b91000000000000000 REX.W movq rcx,0x10
0x19db000888da   35a  51             push rcx
0x19db000888db   35b  b801000000     movl rax,0x1
0x19db000888e0   360  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db000888ea   36a  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000888f4   374  488bc8         REX.W movq rcx,rax
0x19db000888f7   377  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db00088901   381  41ffd2         call r10
0x19db00088904   384  e9d1fcffff     jmp 0x19db000885da  <+0x5a>
0x19db00088909   389  c5fb104103     vmovsd xmm0,[rcx+0x3]
0x19db0008890e   38e  e9ddfcffff     jmp 0x19db000885f0  <+0x70>
0x19db00088913   393  c5fb1145e0     vmovsd [rbp-0x20],xmm0
0x19db00088918   398  ba38000000     movl rdx,0x38
0x19db0008891d   39d  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db00088927   3a7  41ffd2         call r10
0x19db0008892a   3aa  488d78ff       REX.W leaq rdi,[rax-0x1]
0x19db0008892e   3ae  c5fb1045e0     vmovsd xmm0,[rbp-0x20]
0x19db00088933   3b3  488b0db8fcffff REX.W movq rcx,[rip+0xfffffcb8]
0x19db0008893a   3ba  e9d5fcffff     jmp 0x19db00088614  <+0x94>
0x19db0008893f   3bf  48894de0       REX.W movq [rbp-0x20],rcx
0x19db00088943   3c3  48895580       REX.W movq [rbp-0x80],rdx
0x19db00088947   3c7  4c89a578ffffff REX.W movq [rbp-0x88],r12
0x19db0008894e   3ce  4c89b570ffffff REX.W movq [rbp-0x90],r14
0x19db00088955   3d5  33c0           xorl rax,rax
0x19db00088957   3d7  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db00088961   3e1  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008896b   3eb  488bf8         REX.W movq rdi,rax
0x19db0008896e   3ee  4c8b1584ffffff REX.W movq r10,[rip+0xffffff84]
0x19db00088975   3f5  41ffd2         call r10
0x19db00088978   3f8  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db0008897c   3fc  4c8b4d18       REX.W movq r9,[rbp+0x18]
0x19db00088980   400  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00088984   404  488b5580       REX.W movq rdx,[rbp-0x80]
0x19db00088988   408  41b8559f3008   movl r8,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008898e   40e  4c8ba578ffffff REX.W movq r12,[rbp-0x88]
0x19db00088995   415  4c8bb570ffffff REX.W movq r14,[rbp-0x90]
0x19db0008899c   41c  e9c4fdffff     jmp 0x19db00088765  <+0x1e5>
0x19db000889a1   421  8d1c00         leal rbx,[rax+rax*1]
0x19db000889a4   424  4c8b155afeffff REX.W movq r10,[rip+0xfffffe5a]
0x19db000889ab   42b  4c3bd3         REX.W cmpq r10,rbx
0x19db000889ae   42e  7712           ja 0x19db000889c2  <+0x442>
0x19db000889b0   430  488b155dfeffff REX.W movq rdx,[rip+0xfffffe5d]
0x19db000889b7   437  4c8b15dafbffff REX.W movq r10,[rip+0xfffffbda]
0x19db000889be   43e  41ffd2         call r10
0x19db000889c1   441  cc             int3l
0x19db000889c2   442  48894de0       REX.W movq [rbp-0x20],rcx
0x19db000889c6   446  c5fb1175c0     vmovsd [rbp-0x40],xmm6
0x19db000889cb   44b  c5fb116db8     vmovsd [rbp-0x48],xmm5
0x19db000889d0   450  c5fb114db0     vmovsd [rbp-0x50],xmm1
0x19db000889d5   455  c5fb1145a8     vmovsd [rbp-0x58],xmm0
0x19db000889da   45a  c5fb1165a0     vmovsd [rbp-0x60],xmm4
0x19db000889df   45f  c5fb115598     vmovsd [rbp-0x68],xmm2
0x19db000889e4   464  48894590       REX.W movq [rbp-0x70],rax
0x19db000889e8   468  4c894d88       REX.W movq [rbp-0x78],r9
0x19db000889ec   46c  48895580       REX.W movq [rbp-0x80],rdx
0x19db000889f0   470  4c89a578ffffff REX.W movq [rbp-0x88],r12
0x19db000889f7   477  4c89b570ffffff REX.W movq [rbp-0x90],r14
0x19db000889fe   47e  33f6           xorl rsi,rsi
0x19db00088a00   480  488bf8         REX.W movq rdi,rax
0x19db00088a03   483  488bc1         REX.W movq rax,rcx
0x19db00088a06   486  49ba20e7baf5ff7f0000 REX.W movq r10,0x7ffff5bae720  (GrowFastDoubleElements)    ;; off heap target
0x19db00088a10   490  41ffd2         call r10
0x19db00088a13   493  a801           test al,0x1
0x19db00088a15   495  0f843b010000   jz 0x19db00088b56  <+0x5d6>
0x19db00088a1b   49b  488bf8         REX.W movq rdi,rax
0x19db00088a1e   49e  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db00088a22   4a2  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00088a26   4a6  c5fb1075c0     vmovsd xmm6,[rbp-0x40]
0x19db00088a2b   4ab  c5fb106db8     vmovsd xmm5,[rbp-0x48]
0x19db00088a30   4b0  c5fb104db0     vmovsd xmm1,[rbp-0x50]
0x19db00088a35   4b5  c5fb1045a8     vmovsd xmm0,[rbp-0x58]
0x19db00088a3a   4ba  c5fb1065a0     vmovsd xmm4,[rbp-0x60]
0x19db00088a3f   4bf  c5fb105598     vmovsd xmm2,[rbp-0x68]
0x19db00088a44   4c4  488b4590       REX.W movq rax,[rbp-0x70]
0x19db00088a48   4c8  4c8b4d88       REX.W movq r9,[rbp-0x78]
0x19db00088a4c   4cc  488b5580       REX.W movq rdx,[rbp-0x80]
0x19db00088a50   4d0  41b8559f3008   movl r8,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00088a56   4d6  4c8ba578ffffff REX.W movq r12,[rbp-0x88]
0x19db00088a5d   4dd  4c8bb570ffffff REX.W movq r14,[rbp-0x90]
0x19db00088a64   4e4  e9cffdffff     jmp 0x19db00088838  <+0x2b8>
0x19db00088a69   4e9  48894de0       REX.W movq [rbp-0x20],rcx
0x19db00088a6d   4ed  4c897dc8       REX.W movq [rbp-0x38],r15
0x19db00088a71   4f1  48895580       REX.W movq [rbp-0x80],rdx
0x19db00088a75   4f5  4c89a578ffffff REX.W movq [rbp-0x88],r12
0x19db00088a7c   4fc  4c89b570ffffff REX.W movq [rbp-0x90],r14
0x19db00088a83   503  488b1dcffeffff REX.W movq rbx,[rip+0xfffffecf]
0x19db00088a8a   50a  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00088a94   514  33c0           xorl rax,rax
0x19db00088a96   516  4c8b155cfeffff REX.W movq r10,[rip+0xfffffe5c]
0x19db00088a9d   51d  41ffd2         call r10
0x19db00088aa0   520  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db00088aa4   524  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00088aa8   528  4c8b7dc8       REX.W movq r15,[rbp-0x38]
0x19db00088aac   52c  488b5580       REX.W movq rdx,[rbp-0x80]
0x19db00088ab0   530  41b8559f3008   movl r8,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00088ab6   536  4c8ba578ffffff REX.W movq r12,[rbp-0x88]
0x19db00088abd   53d  4c8bb570ffffff REX.W movq r14,[rbp-0x90]
0x19db00088ac4   544  e9a7fcffff     jmp 0x19db00088770  <+0x1f0>
0x19db00088ac9   549  90             nop
0x19db00088aca   54a  41ff95f8360000 call [r13+0x36f8]
0x19db00088ad1   551  41ff95f8360000 call [r13+0x36f8]
0x19db00088ad8   558  41ff95f8360000 call [r13+0x36f8]
0x19db00088adf   55f  41ff95f8360000 call [r13+0x36f8]
0x19db00088ae6   566  41ff95f8360000 call [r13+0x36f8]
0x19db00088aed   56d  41ff95f8360000 call [r13+0x36f8]
0x19db00088af4   574  41ff95f8360000 call [r13+0x36f8]
0x19db00088afb   57b  41ff95f8360000 call [r13+0x36f8]
0x19db00088b02   582  41ff95f8360000 call [r13+0x36f8]
0x19db00088b09   589  41ff95f8360000 call [r13+0x36f8]
0x19db00088b10   590  41ff95f8360000 call [r13+0x36f8]
0x19db00088b17   597  41ff95f8360000 call [r13+0x36f8]
0x19db00088b1e   59e  41ff95f8360000 call [r13+0x36f8]
0x19db00088b25   5a5  41ff95f8360000 call [r13+0x36f8]
0x19db00088b2c   5ac  41ff95f8360000 call [r13+0x36f8]
0x19db00088b33   5b3  41ff95f8360000 call [r13+0x36f8]
0x19db00088b3a   5ba  41ff95f8360000 call [r13+0x36f8]
0x19db00088b41   5c1  41ff95f8360000 call [r13+0x36f8]
0x19db00088b48   5c8  41ff95f8360000 call [r13+0x36f8]
0x19db00088b4f   5cf  41ff95f8360000 call [r13+0x36f8]
0x19db00088b56   5d6  41ff95f8360000 call [r13+0x36f8]
0x19db00088b5d   5dd  41ff9510370000 call [r13+0x3710]
0x19db00088b64   5e4  41ff9510370000 call [r13+0x3710]
0x19db00088b6b   5eb  41ff9510370000 call [r13+0x3710]
0x19db00088b72   5f2  6690           nop

Source positions:
 pc offset  position
       35b      3001

Inlined functions (count = 0)

Deoptimization Input Data (deopt points = 24)
 index  bytecode-offset    pc
     0               17    NA 
     1               17    NA 
     2               17    NA 
     3               17    NA 
     4               17    NA 
     5               17    NA 
     6               17    NA 
     7               17    NA 
     8               17    NA 
     9               17    NA 
    10               17    NA 
    11               17    NA 
    12               17    NA 
    13               17    NA 
    14               17    NA 
    15               17    NA 
    16               17    NA 
    17               17    NA 
    18               17    NA 
    19               17    NA 
    20               17    NA 
    21               -1   384 
    22              106   3f8 
    23              106   520 

Safepoints (size = 83)
0x19db00088904     384   5dd  00000000000011000000 (sp -> fp)      21
0x19db0008892a     3aa    NA  00000000000011000000 (sp -> fp)  <none>
0x19db00088978     3f8   5e4  01100000000011100000 (sp -> fp)      22
0x19db00088a13     493    NA  01100000000011100000 (sp -> fp)  <none>
0x19db00088aa0     520   5eb  01100000000011100000 (sp -> fp)      23

RelocInfo (size = 41)
0x19db00088598  off heap target
0x19db000885b2  off heap target
0x19db000885f2  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db00088603  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db00088652  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008867f  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000888e2  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db000888ec  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000888f9  off heap target
0x19db0008891f  off heap target
0x19db00088959  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db00088963  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008898a  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00088a08  off heap target
0x19db00088a52  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00088a8c  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00088ab2  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)

--- End code ---
assign 0 to v-1:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
assign 7 to v-8:0
assign 6 to v-7:0
------------------------
function: VMulti
add v97->v99
add v94->v89
add v90->v92
add v82->v88
add v87->v88
add v86->v54
add v85->v54
add v85->v54
add v85->v54
add v85->v54
add v84->v82
add v81->v82
add v47->v0
add v80->v0
add v54->v0
add v79->v4
add v48->v4
add v78->v4
add v77->v48
add v47->v77
add v68->v77
add v76->v77
add v65->v68
add v75->v5
add v47->v5
add v42->v5
add v70->v5
add v66->v68
add v64->v68
add v61->v68
add v56->v54
adding pairs 2, v31:0x7fffc800fc08, v48:0x7fffc800d490
add v47->v46
add v43->v46
add v45->v46
add v26->v43
add v25->v42
add v28->v43
add v27->v42
add v24->v43
add v23->v42
add v20->v43
add v19->v42
add v33->v0
add v40->v0
add v41->v33
add v39->v32
add v7->v31
add v30->v0
adding pairs 3, v31:0x7fffc800fc08, v11:0x7fffc800faf0
gap () () 
          [stack:-1|t] = ArchNop
gap (v3(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v4(-) = [stack:-2|t];) () 
          [stack:-3|t] = ArchNop
gap (v5(-) = [stack:-3|t];) () 
          [rsi|R|t] = ArchNop
gap (v6(-) = [rsi|R|t];) () 
          [rdi|R|t] = ArchNop
gap (v2(-) = [rdi|R|t];) () 
          [constant:50] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:138] [immediate:139]
gap () () 
          [constant:103] = ArchNop
gap () () 
          [constant:102] = ArchNop
gap () () 
          v101(R) = ArchStackCheckOffset
gap () () 
          X64Push v101(-)
gap () ([rbx|R|w64] = v102(-); [rax|R|w64] = v50(-); [rsi|R|t] = v103(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:137] #-1 #26 v2(S) v3(S) v4(S) v5(S) v6(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:136]
gap () () 
          ArchJmp [immediate:135]
gap () () 
          [constant:9] = ArchNop
gap () () 
          [constant:99] = ArchNop
gap () () 
          X64Test32 && branch if equal v99 #1 [immediate:133] [immediate:134]
gap () () 
          v97(R) = X64Movsd : MRI v99(R) [immediate:132]
gap () (v85 = v97(-);) 
          ArchJmp [immediate:131]
gap () (v98(R) = v99(-);) 
          v98(1) = X64Sar32 v98(R) #1
gap () () 
          v96(R) = SSEInt32ToFloat64 v98
gap () (v85 = v96(-);) 
          ArchJmp [immediate:130]
gap () () 
          [constant:83] = ArchNop
gap () () 
          v89(R) = X64Movq : MR v83(R)
gap () () 
          [constant:95] = ArchNop
gap () () 
          [constant:93] = ArchNop
gap () () 
          v94(R) = X64Lea : MRI v89(R) [immediate:129]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v95(R) v94(R) [immediate:127] [immediate:128]
gap () () 
          ArchJmp [immediate:126]
gap () ([rdx|R|w64] = v93(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:125] #-1 [rdx|R|w64]
gap (v92(-) = [rax|R|tp];) () 
          v90(R) = X64Lea : MRI v92(R) [immediate:124]
gap () (v88 = v90(-);) 
          ArchJmp [immediate:123]
gap () (v88 = v89(-);) 
          ArchJmp [immediate:122]
gap () () 
          v82(R) = X64Lea : MRI v88(R) [immediate:121]
gap () () 
          X64Movq : MR v83(R) v82(R)
gap () () 
          v87(R) = X64Lea : MRI v88(R) [immediate:120]
gap () (v54 = v87(-);) 
          v54(1) = ArchNop v54
gap () () 
          [constant:86] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v54(R) [immediate:119] v86(R)
gap () () 
          X64MovqCompressTagged : MRI v54(R) [immediate:117] [immediate:118]
gap () () 
          X64Movsd : MRI v54(R) [immediate:116] v85(R)
gap () () 
          X64Movsd : MRI v54(R) [immediate:115] v85(R)
gap () () 
          X64Movsd : MRI v54(R) [immediate:114] v85(R)
gap () () 
          X64Movsd : MRI v54(R) [immediate:113] v85(R)
gap () () 
          v84(R) = X64Lea : MRI v82(R) [immediate:112]
gap () () 
          X64Movq : MR v83(R) v84(R)
gap () () 
          v81(R) = X64Lea : MRI v82(R) [immediate:111]
gap () (v0 = v81(-);) 
          v0(1) = ArchNop v0
gap () () 
          [constant:47] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:110] v47(R)
gap () () 
          [constant:80] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:109] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:108] v54(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:106] [immediate:107]
gap () () 
          X64Test32 && deoptimize if equal v4 #1 #25 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:104] [immediate:105]
gap () () 
          [constant:79] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v4(R) [immediate:101] v79(R) #24 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:102] [immediate:103]
gap () () 
          v48(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:100]
gap () () 
          v78(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:99]
gap () (v49(R) = v78(-);) 
          v49(1) = X64Sar32 v49(R) #1
gap () () 
          [constant:73] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v49 #0 #23 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:97] [immediate:98]
gap () () 
          v77(R) = X64MovqDecompressAnyTagged : MRI v48(R) [immediate:96]
gap () () 
          X64Test32 && deoptimize if equal v77 #1 #22 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:94] [immediate:95]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v77(R) [immediate:91] v47(R) #21 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:92] [immediate:93]
gap () () 
          v68(R) = X64MovqDecompressTaggedPointer : MRI v77(R) [immediate:90]
gap () () 
          v76(R) = X64MovqDecompressTaggedSigned : MRI v77(R) [immediate:89]
gap () (v69(R) = v76(-);) 
          v69(1) = X64Sar32 v69(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v69 #0 #20 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:87] [immediate:88]
gap () () 
          v65(R) = X64Movsd : MRI v68(R) [immediate:86]
gap () () 
          X64Test32 && deoptimize if equal v5 #1 #19 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:84] [immediate:85]
gap () () 
          [constant:75] = ArchNop
gap () () 
          X64Cmp32 : MRI && branch if equal v5(R) [immediate:81] v75(R) [immediate:82] [immediate:83]
gap () () 
          ArchJmp [immediate:80]
gap () () 
          [constant:74] = ArchNop
gap () () 
          [constant:72] = ArchNop
gap () () 
          X64Push v5(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v72(-); [rax|R|w64] = v73(-); [rsi|R|w64] = v74(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:79] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:78]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v5(R) [immediate:75] v47(R) #18 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:76] [immediate:77]
gap () () 
          v42(R) = X64MovqDecompressTaggedPointer : MRI v5(R) [immediate:74]
gap () () 
          v70(R) = X64MovqDecompressTaggedSigned : MRI v5(R) [immediate:73]
gap () (v67(R) = v70(-);) 
          v67(1) = X64Sar32 v67(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v67 #0 #17 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:71] [immediate:72]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v69 #1 #16 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:69] [immediate:70]
gap () () 
          v66(R) = X64Movsd : MRI v68(R) [immediate:68]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v67 #1 #15 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:66] [immediate:67]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v69 #2 #14 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:64] [immediate:65]
gap () () 
          v64(R) = X64Movsd : MRI v68(R) [immediate:63]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v67 #2 #13 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:61] [immediate:62]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v69 #3 #12 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:59] [immediate:60]
gap () () 
          v61(R) = X64Movsd : MRI v68(R) [immediate:58]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v67 #3 #11 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:56] [immediate:57]
gap () () 
          v62(R) = AVXFloat64Mul : MRI v66(R) v42(R) [immediate:55]
gap () () 
          v63(R) = AVXFloat64Mul : MRI v65(R) v42(R) [immediate:54]
gap () () 
          v59(R) = AVXFloat64Mul : MRI v64(R) v42(R) [immediate:53]
gap () () 
          v60(R) = AVXFloat64Add v62(R) v63
gap () () 
          v57(R) = AVXFloat64Mul : MRI v61(R) v42(R) [immediate:52]
gap () () 
          v58(R) = AVXFloat64Add v59(R) v60
gap () () 
          v56(R) = AVXFloat64Add v57(R) v58
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:50] [immediate:51]
gap () () 
          X64Movsd : MRI v54(R) [immediate:49] v56(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:47] [immediate:48]
gap () () 
          [constant:53] = ArchNop
gap () () 
          [constant:52] = ArchNop
gap () ([rbx|R|w64] = v52(-); [rax|R|w64] = v9(-); [rsi|R|t] = v53(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:46] #-1 #10 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:45]
gap () () 
          ArchJmp [immediate:44]
gap () (v31 = v50(-);) 
          ArchJmp [immediate:43]
gap () () 
          X64Cmp32 && branch if unsigned less than v31 #4 [immediate:41] [immediate:42]
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v31(R) v49 #9 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:40]
gap () () 
          v46(R) = X64MovqDecompressAnyTagged : MR4I v48(R) v31(R) [immediate:39]
gap () () 
          X64Test32 && deoptimize if equal v46 #1 #8 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:38]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v46(R) [immediate:36] v47(R) #7 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:37]
gap () () 
          v43(R) = X64MovqDecompressTaggedPointer : MRI v46(R) [immediate:35]
gap () () 
          v45(R) = X64MovqDecompressTaggedSigned : MRI v46(R) [immediate:34]
gap () (v44(R) = v45(-);) 
          v44(1) = X64Sar32 v44(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v44 #0 #6 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:33]
gap () () 
          v26(R) = X64Movsd : MRI v43(R) [immediate:32]
gap () () 
          v25(R) = X64Movsd : MRI v42(R) [immediate:31]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v44 #1 #5 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:30]
gap () () 
          v28(R) = X64Movsd : MRI v43(R) [immediate:29]
gap () () 
          v27(R) = X64Movsd : MRI v42(R) [immediate:28]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v44 #2 #4 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:27]
gap () () 
          v24(R) = X64Movsd : MRI v43(R) [immediate:26]
gap () () 
          v23(R) = X64Movsd : MRI v42(R) [immediate:25]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v44 #3 #3 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:24]
gap () () 
          v20(R) = X64Movsd : MRI v43(R) [immediate:23]
gap () () 
          v19(R) = X64Movsd : MRI v42(R) [immediate:22]
gap () () 
          v33(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:21]
gap () () 
          v40(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:20]
gap () () 
          v41(R) = X64MovqDecompressTaggedSigned : MRI v33(R) [immediate:19]
gap () (v38(R) = v41(-);) 
          v38(1) = X64Sar32 v38(R) #1
gap () (v32(R) = v40(-);) 
          v32(1) = X64Sar32 v32(R) #1
gap () () 
          v39(R) = X64Lea32 : MRI v32(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v31(R) v39 #2 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:18]
gap () () 
          X64Cmp32 && branch if unsigned less than v31(R) v38 [immediate:16] [immediate:17]
gap () () 
          v37(R) = X64Lea32 : MR1 v31(R) v31(R)
gap () () 
          [constant:36] = ArchNop
gap () ([rax|R|t] = v0(-); [rbx|R|w32] = v37(-); [rsi|R|w64] = v36(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:15] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v34(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v34 #1 #1 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:14]
gap () (v11 = v34(-);) 
          ArchJmp [immediate:13]
gap () (v11 = v33(-);) 
          ArchJmp [immediate:12]
gap () () 
          v7(R) = X64Lea32 : MRI v31(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v31(R) v32 [immediate:10] [immediate:11]
gap () () 
          v30(R) = X64Lea32 : MR1 v7(R) v7(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:9] v30(R)
gap () () 
          ArchJmp [immediate:8]
gap () () 
          ArchJmp [immediate:7]
gap () () 
          v21(R) = AVXFloat64Mul v27(R) v28
gap () () 
          v22(R) = AVXFloat64Mul v25(R) v26
gap () () 
          v17(R) = AVXFloat64Mul v23(R) v24
gap () () 
          v18(R) = AVXFloat64Add v21(R) v22
gap () () 
          v15(R) = AVXFloat64Mul v19(R) v20
gap () () 
          v16(R) = AVXFloat64Add v17(R) v18
gap () () 
          v14(R) = AVXFloat64Add v15(R) v16
gap () () 
          X64Movsd : MR8I v11(R) v31(R) [immediate:6] v14(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:4] [immediate:5]
gap () () 
          [constant:10] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () ([rbx|R|w64] = v8(-); [rax|R|w64] = v9(-); [rsi|R|t] = v10(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:3] #-1 #0 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) v7(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:2]
gap () () 
          ArchJmp [immediate:1]
gap () (v31 = v7(-);) 
          ArchJmp [immediate:0]
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
2, v31, v48
3, v31, v11
print modrm pairs
1, v39, v32
1, v41, v33
1, v40, v0
1, v33, v0
1, v20, v43
1, v24, v43
1, v27, v42
1, v28, v43
1, v26, v43
1, v45, v46
1, v43, v46
1, v56, v54
1, v23, v42
1, v64, v68
1, v70, v5
1, v76, v77
1, v19, v42
1, v84, v82
1, v65, v68
1, v77, v48
1, v61, v68
1, v78, v4
1, v48, v4
1, v66, v68
1, v80, v0
1, v54, v0
1, v82, v88
1, v47, v46
1, v47, v5
1, v47, v77
1, v47, v0
1, v79, v4
1, v81, v82
1, v85, v54
1, v7, v31
1, v86, v54
1, v30, v0
1, v87, v88
1, v90, v92
1, v25, v42
1, v42, v5
1, v75, v5
1, v68, v77
1, v94, v89
1, v97, v99
assign rcx to v101:0
assign 1 to v101:0
assign rax to v50:1
assign 0 to v50:1
assign rbx to v102:1
assign 3 to v102:1
assign rsi to v103:1
assign 6 to v103:1
assign rcx to v50:2
assign 1 to v50:2
assign rcx to v99:1
assign 1 to v99:1
assign rcx to v98:0
assign 1 to v98:0
assign rcx to v83:1
assign 1 to v83:1
assign rdi to v89:0
assign 7 to v89:0
assign r8 to v94:0
assign 8 to v94:0
assign r9 to v95:1
assign 9 to v95:1
assign rdx to v93:1
assign 2 to v93:1
blocking v83 pick register rcx
assign rax to v92:0
assign 0 to v92:0
assign rdi to v90:0
assign 7 to v90:0
assign rcx to v83:4
assign 1 to v83:4
assign rdi to v88:0
assign 7 to v88:0
assign r8 to v82:0
assign 8 to v82:0
assign rcx to v83:3
assign 1 to v83:3
assign rdi to v87:0
assign 7 to v87:0
assign rdi to v54:0
assign 7 to v54:0
assign r9 to v86:1
assign 9 to v86:1
assign r9 to v84:0
assign 9 to v84:0
assign rcx to v81:0
assign 1 to v81:0
assign rcx to v0:0
assign 1 to v0:0
assign r8 to v47:1
assign 8 to v47:1
assign r9 to v80:1
assign 9 to v80:1
assign r9 to v4:1
assign 9 to v4:1
assign r12 to v79:1
assign 12 to v79:1
assign r12 to v48:0
assign 12 to v48:0
assign r14 to v78:0
assign 14 to v78:0
assign r14 to v49:0
assign 14 to v49:0
assign rax to v77:0
assign 0 to v77:0
assign r15 to v68:0
assign 15 to v68:0
assign rax to v76:0
assign 0 to v76:0
assign rax to v69:0
assign 0 to v69:0
assign r11 to v5:1
assign 11 to v5:1
assign rdx to v75:1
assign 2 to v75:1
assign rbx to v72:1
assign 3 to v72:1
assign rdx to v73:1
assign 2 to v73:1
assign rsi to v74:1
assign 6 to v74:1
assign rdx to v69:1
assign 2 to v69:1
blocking v0 pick register rcx
blocking v54 pick register rdi
blocking v47 pick register r8
blocking v5 pick register r11
blocking v48 pick register r12
blocking v68 pick register r15
assign r11 to v5:4
assign 11 to v5:4
assign rax to v69:3
assign 0 to v69:3
assign r15 to v68:3
assign 15 to v68:3
assign r14 to v49:2
assign 14 to v49:2
assign r12 to v48:3
assign 12 to v48:3
assign r9 to v4:3
assign 9 to v4:3
assign r8 to v47:4
assign 8 to v47:4
assign rcx to v0:3
assign 1 to v0:3
assign rdi to v54:3
assign 7 to v54:3
assign r8 to v47:3
assign 8 to v47:3
assign r11 to v5:3
assign 11 to v5:3
assign rdx to v42:0
assign 2 to v42:0
assign rsi to v70:0
assign 6 to v70:0
assign rsi to v67:0
assign 6 to v67:0
assign r15 to v68:2
assign 15 to v68:2
assign rcx to v0:2
assign 1 to v0:2
assign rdi to v54:2
assign 7 to v54:2
assign rax to v9:1
assign 0 to v9:1
assign rbx to v52:1
assign 3 to v52:1
assign rsi to v53:1
assign 6 to v53:1
assign rdi to v9:2
assign 7 to v9:2
blocking v0 pick register rcx
blocking v42 pick register rdx
blocking v47 pick register r8
assign rcx to v0:6
assign 1 to v0:6
assign rdx to v42:3
assign 2 to v42:3
assign r11 to v5:6
assign 11 to v5:6
assign r8 to v47:7
assign 8 to v47:7
assign r9 to v4:5
assign 9 to v4:5
assign r12 to v48:5
assign 12 to v48:5
assign r14 to v49:4
assign 14 to v49:4
assign rcx to v0:5
assign 1 to v0:5
assign rdx to v42:2
assign 2 to v42:2
assign r8 to v47:6
assign 8 to v47:6
assign r12 to v48:2
assign 12 to v48:2
assign rax to v31:0
assign 0 to v31:0
blocking v46 pick register r9
assign r9 to v46:0
assign 9 to v46:0
assign rdi to v43:0
assign 7 to v43:0
assign r9 to v45:0
assign 9 to v45:0
assign r9 to v44:0
assign 9 to v44:0
assign rdi to v33:0
assign 7 to v33:0
assign r9 to v40:0
assign 9 to v40:0
assign r15 to v41:0
assign 15 to v41:0
assign r15 to v38:0
assign 15 to v38:0
assign r9 to v32:0
assign 9 to v32:0
assign rsi to v39:0
assign 6 to v39:0
assign rbx to v37:0
assign 3 to v37:0
assign rsi to v36:1
assign 6 to v36:1
assign rdi to v31:1
assign 7 to v31:1
blocking v0 pick register rcx
blocking v31 pick register rax
assign rax to v34:0
assign 0 to v34:0
assign r9 to v32:2
assign 9 to v32:2
assign rax to v31:4
assign 0 to v31:4
assign r12 to v48:7
assign 12 to v48:7
assign r8 to v47:9
assign 8 to v47:9
assign rdx to v42:5
assign 2 to v42:5
assign rcx to v0:9
assign 1 to v0:9
assign r14 to v49:6
assign 14 to v49:6
assign r11 to v5:8
assign 11 to v5:8
assign rdi to v11:0
assign 7 to v11:0
assign rax to v31:3
assign 0 to v31:3
assign r15 to v7:0
assign 15 to v7:0
assign r9 to v30:0
assign 9 to v30:0
assign rcx to v0:8
assign 1 to v0:8
assign rbx to v8:1
assign 3 to v8:1
assign rsi to v10:1
assign 6 to v10:1
assign rcx to v0:11
assign 1 to v0:11
assign r15 to v7:2
assign 15 to v7:2
assign r11 to v5:10
assign 11 to v5:10
assign r14 to v49:8
assign 14 to v49:8
assign rdx to v42:7
assign 2 to v42:7
assign r8 to v47:11
assign 8 to v47:11
assign r12 to v48:9
assign 12 to v48:9
spill count : 35
add v97->v99
add v94->v89
add v90->v92
add v82->v88
add v87->v88
add v86->v54
add v85->v54
add v85->v54
add v85->v54
add v85->v54
add v84->v82
add v81->v82
add v47->v0
add v80->v0
add v54->v0
add v79->v4
add v48->v4
add v78->v4
add v77->v48
add v47->v77
add v68->v77
add v76->v77
add v65->v68
add v75->v5
add v47->v5
add v42->v5
add v70->v5
add v66->v68
add v64->v68
add v61->v68
add v56->v54
adding pairs 2, v31:0x7fffc800fc08, v48:0x7fffc8034038
add v47->v46
add v43->v46
add v45->v46
add v26->v43
add v25->v42
add v28->v43
add v27->v42
add v24->v43
add v23->v42
add v20->v43
add v19->v42
add v33->v0
add v40->v0
add v41->v33
add v39->v32
add v7->v31
add v30->v0
adding pairs 3, v31:0x7fffc80364e8, v11:0x7fffc800faf0
gap () () 
          [stack:-1|t] = ArchNop
gap (v3(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v4(-) = [stack:-2|t];) () 
          [stack:-3|t] = ArchNop
gap (v5(-) = [stack:-3|t];) () 
          [rsi|R|t] = ArchNop
gap (v6(-) = [rsi|R|t];) () 
          [rdi|R|t] = ArchNop
gap (v2(-) = [rdi|R|t];) () 
          [constant:50] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:138] [immediate:139]
gap () () 
          [constant:103] = ArchNop
gap () () 
          [constant:102] = ArchNop
gap () () 
          v101(R) = ArchStackCheckOffset
gap () () 
          X64Push v101(-)
gap () ([rbx|R|w64] = v102(-); [rax|R|w64] = v50(-); [rsi|R|t] = v103(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:137] #-1 #26 v2(S) v3(S) v4(S) v5(S) v6(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:136]
gap () () 
          ArchJmp [immediate:135]
gap () () 
          [constant:9] = ArchNop
gap () () 
          [constant:99] = ArchNop
gap () () 
          X64Test32 && branch if equal v99 #1 [immediate:133] [immediate:134]
gap () () 
          v97(R) = X64Movsd : MRI v99(R) [immediate:132]
gap () (v85 = v97(-);) 
          ArchJmp [immediate:131]
gap () (v98(R) = v99(-);) 
          v98(1) = X64Sar32 v98(R) #1
gap () () 
          v96(R) = SSEInt32ToFloat64 v98
gap () (v85 = v96(-);) 
          ArchJmp [immediate:130]
gap () () 
          [constant:83] = ArchNop
gap () () 
          v89(R) = X64Movq : MR v83(R)
gap () () 
          [constant:95] = ArchNop
gap () () 
          [constant:93] = ArchNop
gap () () 
          v94(R) = X64Lea : MRI v89(R) [immediate:129]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v95(R) v94(R) [immediate:127] [immediate:128]
gap () () 
          ArchJmp [immediate:126]
gap () ([rdx|R|w64] = v93(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:125] #-1 [rdx|R|w64]
gap (v92(-) = [rax|R|tp];) () 
          v90(R) = X64Lea : MRI v92(R) [immediate:124]
gap () (v88 = v90(-);) 
          ArchJmp [immediate:123]
gap () (v88 = v89(-);) 
          ArchJmp [immediate:122]
gap () () 
          v82(R) = X64Lea : MRI v88(R) [immediate:121]
gap () () 
          X64Movq : MR v83(R) v82(R)
gap () () 
          v87(R) = X64Lea : MRI v88(R) [immediate:120]
gap () (v54 = v87(-);) 
          v54(1) = ArchNop v54
gap () () 
          [constant:86] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v54(R) [immediate:119] v86(R)
gap () () 
          X64MovqCompressTagged : MRI v54(R) [immediate:117] [immediate:118]
gap () () 
          X64Movsd : MRI v54(R) [immediate:116] v85(R)
gap () () 
          X64Movsd : MRI v54(R) [immediate:115] v85(R)
gap () () 
          X64Movsd : MRI v54(R) [immediate:114] v85(R)
gap () () 
          X64Movsd : MRI v54(R) [immediate:113] v85(R)
gap () () 
          v84(R) = X64Lea : MRI v82(R) [immediate:112]
gap () () 
          X64Movq : MR v83(R) v84(R)
gap () () 
          v81(R) = X64Lea : MRI v82(R) [immediate:111]
gap () (v0 = v81(-);) 
          v0(1) = ArchNop v0
gap () () 
          [constant:47] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:110] v47(R)
gap () () 
          [constant:80] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:109] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:108] v54(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:106] [immediate:107]
gap () () 
          X64Test32 && deoptimize if equal v4 #1 #25 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:104] [immediate:105]
gap () () 
          [constant:79] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v4(R) [immediate:101] v79(R) #24 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:102] [immediate:103]
gap () () 
          v48(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:100]
gap () () 
          v78(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:99]
gap () (v49(R) = v78(-);) 
          v49(1) = X64Sar32 v49(R) #1
gap () () 
          [constant:73] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v49 #0 #23 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:97] [immediate:98]
gap () () 
          v77(R) = X64MovqDecompressAnyTagged : MRI v48(R) [immediate:96]
gap () () 
          X64Test32 && deoptimize if equal v77 #1 #22 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:94] [immediate:95]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v77(R) [immediate:91] v47(R) #21 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:92] [immediate:93]
gap () () 
          v68(R) = X64MovqDecompressTaggedPointer : MRI v77(R) [immediate:90]
gap () () 
          v76(R) = X64MovqDecompressTaggedSigned : MRI v77(R) [immediate:89]
gap () (v69(R) = v76(-);) 
          v69(1) = X64Sar32 v69(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v69 #0 #20 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:87] [immediate:88]
gap () () 
          v65(R) = X64Movsd : MRI v68(R) [immediate:86]
gap () () 
          X64Test32 && deoptimize if equal v5 #1 #19 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:84] [immediate:85]
gap () () 
          [constant:75] = ArchNop
gap () () 
          X64Cmp32 : MRI && branch if equal v5(R) [immediate:81] v75(R) [immediate:82] [immediate:83]
gap () () 
          ArchJmp [immediate:80]
gap () () 
          [constant:74] = ArchNop
gap () () 
          [constant:72] = ArchNop
gap () () 
          X64Push v5(-)
gap () () 
          X64Push v47(-)
gap () ([rbx|R|w64] = v72(-); [rax|R|w64] = v73(-); [rsi|R|w64] = v74(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:79] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:78]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v5(R) [immediate:75] v47(R) #18 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:76] [immediate:77]
gap () () 
          v42(R) = X64MovqDecompressTaggedPointer : MRI v5(R) [immediate:74]
gap () () 
          v70(R) = X64MovqDecompressTaggedSigned : MRI v5(R) [immediate:73]
gap () (v67(R) = v70(-);) 
          v67(1) = X64Sar32 v67(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v67 #0 #17 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:71] [immediate:72]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v69 #1 #16 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:69] [immediate:70]
gap () () 
          v66(R) = X64Movsd : MRI v68(R) [immediate:68]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v67 #1 #15 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:66] [immediate:67]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v69 #2 #14 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:64] [immediate:65]
gap () () 
          v64(R) = X64Movsd : MRI v68(R) [immediate:63]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v67 #2 #13 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:61] [immediate:62]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v69 #3 #12 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:59] [immediate:60]
gap () () 
          v61(R) = X64Movsd : MRI v68(R) [immediate:58]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v67 #3 #11 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) [immediate:56] [immediate:57]
gap () () 
          v62(R) = AVXFloat64Mul : MRI v66(R) v42(R) [immediate:55]
gap () () 
          v63(R) = AVXFloat64Mul : MRI v65(R) v42(R) [immediate:54]
gap () () 
          v59(R) = AVXFloat64Mul : MRI v64(R) v42(R) [immediate:53]
gap () () 
          v60(R) = AVXFloat64Add v62(R) v63
gap () () 
          v57(R) = AVXFloat64Mul : MRI v61(R) v42(R) [immediate:52]
gap () () 
          v58(R) = AVXFloat64Add v59(R) v60
gap () () 
          v56(R) = AVXFloat64Add v57(R) v58
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:50] [immediate:51]
gap () () 
          X64Movsd : MRI v54(R) [immediate:49] v56(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:47] [immediate:48]
gap () () 
          [constant:53] = ArchNop
gap () () 
          [constant:52] = ArchNop
gap () ([rbx|R|w64] = v52(-); [rax|R|w64] = v9(-); [rsi|R|t] = v53(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:46] #-1 #10 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:45]
gap () () 
          ArchJmp [immediate:44]
gap () (v31 = v50(-);) 
          ArchJmp [immediate:43]
gap () () 
          X64Cmp32 && branch if unsigned less than v31 #4 [immediate:41] [immediate:42]
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v31(R) v49 #9 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:40]
gap () () 
          v46(R) = X64MovqDecompressAnyTagged : MR4I v48(R) v31(R) [immediate:39]
gap () () 
          X64Test32 && deoptimize if equal v46 #1 #8 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:38]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v46(R) [immediate:36] v47(R) #7 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:37]
gap () () 
          v43(R) = X64MovqDecompressTaggedPointer : MRI v46(R) [immediate:35]
gap () () 
          v45(R) = X64MovqDecompressTaggedSigned : MRI v46(R) [immediate:34]
gap () (v44(R) = v45(-);) 
          v44(1) = X64Sar32 v44(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v44 #0 #6 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:33]
gap () () 
          v26(R) = X64Movsd : MRI v43(R) [immediate:32]
gap () () 
          v25(R) = X64Movsd : MRI v42(R) [immediate:31]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v44 #1 #5 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:30]
gap () () 
          v28(R) = X64Movsd : MRI v43(R) [immediate:29]
gap () () 
          v27(R) = X64Movsd : MRI v42(R) [immediate:28]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v44 #2 #4 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:27]
gap () () 
          v24(R) = X64Movsd : MRI v43(R) [immediate:26]
gap () () 
          v23(R) = X64Movsd : MRI v42(R) [immediate:25]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v44 #3 #3 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:24]
gap () () 
          v20(R) = X64Movsd : MRI v43(R) [immediate:23]
gap () () 
          v19(R) = X64Movsd : MRI v42(R) [immediate:22]
gap () () 
          v33(R) = X64MovqDecompressTaggedPointer : MRI v0(R) [immediate:21]
gap () () 
          v40(R) = X64MovqDecompressTaggedSigned : MRI v0(R) [immediate:20]
gap () () 
          v41(R) = X64MovqDecompressTaggedSigned : MRI v33(R) [immediate:19]
gap () (v38(R) = v41(-);) 
          v38(1) = X64Sar32 v38(R) #1
gap () (v32(R) = v40(-);) 
          v32(1) = X64Sar32 v32(R) #1
gap () () 
          v39(R) = X64Lea32 : MRI v32(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v31(R) v39 #2 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:18]
gap () () 
          X64Cmp32 && branch if unsigned less than v31(R) v38 [immediate:16] [immediate:17]
gap () () 
          v37(R) = X64Lea32 : MR1 v31(R) v31(R)
gap () () 
          [constant:36] = ArchNop
gap () ([rax|R|t] = v0(-); [rbx|R|w32] = v37(-); [rsi|R|w64] = v36(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:15] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v34(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v34 #1 #1 v2(S) v3(-) v4(-) v5(-) v6(S) v0(-) v31(-) [immediate:14]
gap () (v11 = v34(-);) 
          ArchJmp [immediate:13]
gap () (v11 = v33(-);) 
          ArchJmp [immediate:12]
gap () () 
          v7(R) = X64Lea32 : MRI v31(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v31(R) v32 [immediate:10] [immediate:11]
gap () () 
          v30(R) = X64Lea32 : MR1 v7(R) v7(R)
gap () () 
          X64MovqCompressTagged : MRI v0(R) [immediate:9] v30(R)
gap () () 
          ArchJmp [immediate:8]
gap () () 
          ArchJmp [immediate:7]
gap () () 
          v21(R) = AVXFloat64Mul v27(R) v28
gap () () 
          v22(R) = AVXFloat64Mul v25(R) v26
gap () () 
          v17(R) = AVXFloat64Mul v23(R) v24
gap () () 
          v18(R) = AVXFloat64Add v21(R) v22
gap () () 
          v15(R) = AVXFloat64Mul v19(R) v20
gap () () 
          v16(R) = AVXFloat64Add v17(R) v18
gap () () 
          v14(R) = AVXFloat64Add v15(R) v16
gap () () 
          X64Movsd : MR8I v11(R) v31(R) [immediate:6] v14(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:4] [immediate:5]
gap () () 
          [constant:10] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () ([rbx|R|w64] = v8(-); [rax|R|w64] = v9(-); [rsi|R|t] = v10(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:3] #-1 #0 v2(S) v3(S) v4(S) v5(S) v6(S) v0(S) v7(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:2]
gap () () 
          ArchJmp [immediate:1]
gap () (v31 = v7(-);) 
          ArchJmp [immediate:0]
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
2, v31, v48
3, v31, v11
print modrm pairs
1, v39, v32
1, v41, v33
1, v40, v0
1, v33, v0
1, v20, v43
1, v24, v43
1, v27, v42
1, v28, v43
1, v26, v43
1, v45, v46
1, v43, v46
1, v47, v46
1, v56, v54
1, v23, v42
1, v64, v68
1, v66, v68
1, v70, v5
1, v47, v5
1, v76, v77
1, v19, v42
1, v84, v82
1, v65, v68
1, v77, v48
1, v61, v68
1, v78, v4
1, v48, v4
1, v80, v0
1, v54, v0
1, v82, v88
1, v47, v77
1, v47, v0
1, v79, v4
1, v81, v82
1, v85, v54
1, v7, v31
1, v86, v54
1, v30, v0
1, v87, v88
1, v90, v92
1, v25, v42
1, v42, v5
1, v75, v5
1, v68, v77
1, v94, v89
1, v97, v99
assign xmm0 to v97:0
assign 0 to v97:0
assign xmm0 to v96:0
assign 0 to v96:0
assign xmm0 to v85:0
assign 0 to v85:0
blocking v85 pick register xmm0
assign xmm0 to v85:3
assign 0 to v85:3
assign xmm0 to v85:2
assign 0 to v85:2
assign xmm0 to v65:0
assign 0 to v65:0
blocking v65 pick register xmm0
assign xmm0 to v65:3
assign 0 to v65:3
assign xmm1 to v66:0
assign 1 to v66:0
assign xmm2 to v64:0
assign 2 to v64:0
assign xmm4 to v61:0
assign 4 to v61:0
assign xmm1 to v62:0
assign 1 to v62:0
assign xmm0 to v65:2
assign 0 to v65:2
assign xmm0 to v63:0
assign 0 to v63:0
assign xmm2 to v59:0
assign 2 to v59:0
assign xmm0 to v60:0
assign 0 to v60:0
assign xmm1 to v57:0
assign 1 to v57:0
assign xmm0 to v58:0
assign 0 to v58:0
assign xmm0 to v56:0
assign 0 to v56:0
assign xmm0 to v26:0
assign 0 to v26:0
assign xmm1 to v25:0
assign 1 to v25:0
assign xmm2 to v28:0
assign 2 to v28:0
assign xmm4 to v27:0
assign 4 to v27:0
assign xmm5 to v24:0
assign 5 to v24:0
assign xmm6 to v23:0
assign 6 to v23:0
assign xmm7 to v20:0
assign 7 to v20:0
assign xmm8 to v19:0
assign 8 to v19:0
blocking v25 pick register xmm1
blocking v27 pick register xmm4
blocking v23 pick register xmm6
blocking v19 pick register xmm8
assign xmm8 to v19:3
assign 8 to v19:3
assign xmm7 to v20:2
assign 7 to v20:2
assign xmm6 to v23:3
assign 6 to v23:3
assign xmm5 to v24:2
assign 5 to v24:2
assign xmm4 to v27:3
assign 4 to v27:3
assign xmm2 to v28:2
assign 2 to v28:2
assign xmm1 to v25:3
assign 1 to v25:3
assign xmm0 to v26:2
assign 0 to v26:2
assign xmm4 to v27:2
assign 4 to v27:2
assign xmm2 to v21:0
assign 2 to v21:0
assign xmm1 to v25:2
assign 1 to v25:2
assign xmm0 to v22:0
assign 0 to v22:0
assign xmm6 to v23:2
assign 6 to v23:2
assign xmm1 to v17:0
assign 1 to v17:0
assign xmm0 to v18:0
assign 0 to v18:0
assign xmm8 to v19:2
assign 8 to v19:2
assign xmm2 to v15:0
assign 2 to v15:0
assign xmm0 to v16:0
assign 0 to v16:0
assign xmm0 to v14:0
assign 0 to v14:0
spill count : 10
--- Raw source ---
(M, V) {
      var Vect = new Array();
      var i = 0;
      for (;i < 4; i++) Vect[i] = M[i][0] * V[0] + M[i][1] * V[1] + M[i][2] * V[2] + M[i][3] * V[3];
      return Vect;
    }


--- Optimized code ---
optimization_id = 7
source_position = 2798
kind = TURBOFAN
name = VMulti
stack_slots = 22
compiler = turbofan
address = 0x19db00088be1

Instructions (size = 1820)
0x19db00088c20     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db00088c27     7  483bd9         REX.W cmpq rbx,rcx
0x19db00088c2a     a  7418           jz 0x19db00088c44  <+0x24>
0x19db00088c2c     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db00088c36    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db00088c40    20  41ffd2         call r10
0x19db00088c43    23  cc             int3l
0x19db00088c44    24  8b59d0         movl rbx,[rcx-0x30]
0x19db00088c47    27  4903dd         REX.W addq rbx,r13
0x19db00088c4a    2a  f6430701       testb [rbx+0x7],0x1
0x19db00088c4e    2e  740d           jz 0x19db00088c5d  <+0x3d>
0x19db00088c50    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db00088c5a    3a  41ffe2         jmp r10
0x19db00088c5d    3d  55             push rbp
0x19db00088c5e    3e  4889e5         REX.W movq rbp,rsp
0x19db00088c61    41  56             push rsi
0x19db00088c62    42  57             push rdi
0x19db00088c63    43  50             push rax
0x19db00088c64    44  4881ec88000000 REX.W subq rsp,0x88
0x19db00088c6b    4b  488975d0       REX.W movq [rbp-0x30],rsi
0x19db00088c6f    4f  48897dd8       REX.W movq [rbp-0x28],rdi
0x19db00088c73    53  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00088c77    57  0f864f030000   jna 0x19db00088fcc  <+0x3ac>
0x19db00088c7d    5d  498b8d98000000 REX.W movq rcx,[r13+0x98] (root (the_hole_value))
0x19db00088c84    64  f6c101         testb rcx,0x1
0x19db00088c87    67  0f8578030000   jnz 0x19db00089005  <+0x3e5>
0x19db00088c8d    6d  d1f9           sarl rcx, 1
0x19db00088c8f    6f  c5832ac1       vcvtlsi2sd xmm0,xmm15,rcx
0x19db00088c93    73  48b9f87d6d5555550000 REX.W movq rcx,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db00088c9d    7d  488b39         REX.W movq rdi,[rcx]
0x19db00088ca0    80  4c8d4738       REX.W leaq r8,[rdi+0x38]
0x19db00088ca4    84  49b9007e6d5555550000 REX.W movq r9,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db00088cae    8e  4d3901         REX.W cmpq [r9],r8
0x19db00088cb1    91  0f8658030000   jna 0x19db0008900f  <+0x3ef>
0x19db00088cb7    97  4c8d4728       REX.W leaq r8,[rdi+0x28]
0x19db00088cbb    9b  4c8901         REX.W movq [rcx],r8
0x19db00088cbe    9e  4883c701       REX.W addq rdi,0x1
0x19db00088cc2    a2  4d8b8dd8010000 REX.W movq r9,[r13+0x1d8] (root (fixed_double_array_map))
0x19db00088cc9    a9  44894fff       movl [rdi-0x1],r9
0x19db00088ccd    ad  c7470308000000 movl [rdi+0x3],0x8
0x19db00088cd4    b4  c5fb114707     vmovsd [rdi+0x7],xmm0
0x19db00088cd9    b9  c5fb11470f     vmovsd [rdi+0xf],xmm0
0x19db00088cde    be  c5fb114717     vmovsd [rdi+0x17],xmm0
0x19db00088ce3    c3  c5fb11471f     vmovsd [rdi+0x1f],xmm0
0x19db00088ce8    c8  4d8d4810       REX.W leaq r9,[r8+0x10]
0x19db00088cec    cc  4c8909         REX.W movq [rcx],r9
0x19db00088cef    cf  498d4801       REX.W leaq rcx,[r8+0x1]
0x19db00088cf3    d3  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00088cfd    dd  448941ff       movl [rcx-0x1],r8
0x19db00088d01    e1  4d8b8d58010000 REX.W movq r9,[r13+0x158] (root (empty_fixed_array))
0x19db00088d08    e8  44894903       movl [rcx+0x3],r9
0x19db00088d0c    ec  897907         movl [rcx+0x7],rdi
0x19db00088d0f    ef  c7410b00000000 movl [rcx+0xb],0x0
0x19db00088d16    f6  4c8b4d18       REX.W movq r9,[rbp+0x18]
0x19db00088d1a    fa  41f6c101       testb r9,0x1
0x19db00088d1e    fe  0f8459050000   jz 0x19db0008927d  <+0x65d>
0x19db00088d24   104  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00088d2a   10a  453961ff       cmpl [r9-0x1],r12
0x19db00088d2e   10e  0f8550050000   jnz 0x19db00089284  <+0x664>
0x19db00088d34   114  458b6107       movl r12,[r9+0x7]
0x19db00088d38   118  4d03e5         REX.W addq r12,r13
0x19db00088d3b   11b  458b710b       movl r14,[r9+0xb]
0x19db00088d3f   11f  41d1fe         sarl r14, 1
0x19db00088d42   122  4183fe00       cmpl r14,0x0
0x19db00088d46   126  0f863f050000   jna 0x19db0008928b  <+0x66b>
0x19db00088d4c   12c  418b442407     movl rax,[r12+0x7]
0x19db00088d51   131  4903c5         REX.W addq rax,r13
0x19db00088d54   134  a801           test al,0x1
0x19db00088d56   136  0f8436050000   jz 0x19db00089292  <+0x672>
0x19db00088d5c   13c  443940ff       cmpl [rax-0x1],r8
0x19db00088d60   140  0f8533050000   jnz 0x19db00089299  <+0x679>
0x19db00088d66   146  448b7807       movl r15,[rax+0x7]
0x19db00088d6a   14a  4d03fd         REX.W addq r15,r13
0x19db00088d6d   14d  8b400b         movl rax,[rax+0xb]
0x19db00088d70   150  d1f8           sarl rax, 1
0x19db00088d72   152  83f800         cmpl rax,0x0
0x19db00088d75   155  0f8625050000   jna 0x19db000892a0  <+0x680>
0x19db00088d7b   15b  c4c17b104707   vmovsd xmm0,[r15+0x7]
0x19db00088d81   161  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00088d85   165  41f6c301       testb r11,0x1
0x19db00088d89   169  0f8418050000   jz 0x19db000892a7  <+0x687>
0x19db00088d8f   16f  bab59e3008     movl rdx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00088d94   174  413953ff       cmpl [r11-0x1],rdx
0x19db00088d98   178  0f849d020000   jz 0x19db0008903b  <+0x41b>
0x19db00088d9e   17e  453943ff       cmpl [r11-0x1],r8
0x19db00088da2   182  0f8506050000   jnz 0x19db000892ae  <+0x68e>
0x19db00088da8   188  418b5307       movl rdx,[r11+0x7]
0x19db00088dac   18c  4903d5         REX.W addq rdx,r13
0x19db00088daf   18f  418b730b       movl rsi,[r11+0xb]
0x19db00088db3   193  d1fe           sarl rsi, 1
0x19db00088db5   195  83fe00         cmpl rsi,0x0
0x19db00088db8   198  0f86f7040000   jna 0x19db000892b5  <+0x695>
0x19db00088dbe   19e  83f801         cmpl rax,0x1
0x19db00088dc1   1a1  0f86f5040000   jna 0x19db000892bc  <+0x69c>
0x19db00088dc7   1a7  c4c17b104f0f   vmovsd xmm1,[r15+0xf]
0x19db00088dcd   1ad  83fe01         cmpl rsi,0x1
0x19db00088dd0   1b0  0f86ed040000   jna 0x19db000892c3  <+0x6a3>
0x19db00088dd6   1b6  83f802         cmpl rax,0x2
0x19db00088dd9   1b9  0f86eb040000   jna 0x19db000892ca  <+0x6aa>
0x19db00088ddf   1bf  c4c17b105717   vmovsd xmm2,[r15+0x17]
0x19db00088de5   1c5  83fe02         cmpl rsi,0x2
0x19db00088de8   1c8  0f86e3040000   jna 0x19db000892d1  <+0x6b1>
0x19db00088dee   1ce  83f803         cmpl rax,0x3
0x19db00088df1   1d1  0f86e1040000   jna 0x19db000892d8  <+0x6b8>
0x19db00088df7   1d7  c4c17b10671f   vmovsd xmm4,[r15+0x1f]
0x19db00088dfd   1dd  83fe03         cmpl rsi,0x3
0x19db00088e00   1e0  0f86d9040000   jna 0x19db000892df  <+0x6bf>
0x19db00088e06   1e6  c5f3594a0f     vmulsd xmm1,xmm1,[rdx+0xf]
0x19db00088e0b   1eb  c5fb594207     vmulsd xmm0,xmm0,[rdx+0x7]
0x19db00088e10   1f0  c5eb595217     vmulsd xmm2,xmm2,[rdx+0x17]
0x19db00088e15   1f5  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db00088e19   1f9  c5db594a1f     vmulsd xmm1,xmm4,[rdx+0x1f]
0x19db00088e1e   1fe  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00088e22   202  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db00088e26   206  c7410b02000000 movl [rcx+0xb],0x2
0x19db00088e2d   20d  c5fb114707     vmovsd [rdi+0x7],xmm0
0x19db00088e32   212  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00088e36   216  0f867e020000   jna 0x19db000890ba  <+0x49a>
0x19db00088e3c   21c  b801000000     movl rax,0x1
0x19db00088e41   221  e90d000000     jmp 0x19db00088e53  <+0x233>
0x19db00088e46   226  660f1f840000000000 nop
0x19db00088e4f   22f  90             nop
0x19db00088e50   230  498bc7         REX.W movq rax,r15
0x19db00088e53   233  83f804         cmpl rax,0x4
0x19db00088e56   236  0f8352010000   jnc 0x19db00088fae  <+0x38e>
0x19db00088e5c   23c  413bc6         cmpl rax,r14
0x19db00088e5f   23f  0f8381040000   jnc 0x19db000892e6  <+0x6c6>
0x19db00088e65   245  458b4c8407     movl r9,[r12+rax*4+0x7]
0x19db00088e6a   24a  4d03cd         REX.W addq r9,r13
0x19db00088e6d   24d  41f6c101       testb r9,0x1
0x19db00088e71   251  0f8476040000   jz 0x19db000892ed  <+0x6cd>
0x19db00088e77   257  453941ff       cmpl [r9-0x1],r8
0x19db00088e7b   25b  0f8573040000   jnz 0x19db000892f4  <+0x6d4>
0x19db00088e81   261  418b7907       movl rdi,[r9+0x7]
0x19db00088e85   265  4903fd         REX.W addq rdi,r13
0x19db00088e88   268  458b490b       movl r9,[r9+0xb]
0x19db00088e8c   26c  41d1f9         sarl r9, 1
0x19db00088e8f   26f  4183f900       cmpl r9,0x0
0x19db00088e93   273  0f8662040000   jna 0x19db000892fb  <+0x6db>
0x19db00088e99   279  c5fb104707     vmovsd xmm0,[rdi+0x7]
0x19db00088e9e   27e  c5fb104a07     vmovsd xmm1,[rdx+0x7]
0x19db00088ea3   283  4183f901       cmpl r9,0x1
0x19db00088ea7   287  0f8655040000   jna 0x19db00089302  <+0x6e2>
0x19db00088ead   28d  c5fb10570f     vmovsd xmm2,[rdi+0xf]
0x19db00088eb2   292  c5fb10620f     vmovsd xmm4,[rdx+0xf]
0x19db00088eb7   297  4183f902       cmpl r9,0x2
0x19db00088ebb   29b  0f8648040000   jna 0x19db00089309  <+0x6e9>
0x19db00088ec1   2a1  c5fb106f17     vmovsd xmm5,[rdi+0x17]
0x19db00088ec6   2a6  c5fb107217     vmovsd xmm6,[rdx+0x17]
0x19db00088ecb   2ab  4183f903       cmpl r9,0x3
0x19db00088ecf   2af  0f863b040000   jna 0x19db00089310  <+0x6f0>
0x19db00088ed5   2b5  c5fb107f1f     vmovsd xmm7,[rdi+0x1f]
0x19db00088eda   2ba  c57b10421f     vmovsd xmm8,[rdx+0x1f]
0x19db00088edf   2bf  8b7907         movl rdi,[rcx+0x7]
0x19db00088ee2   2c2  4903fd         REX.W addq rdi,r13
0x19db00088ee5   2c5  448b490b       movl r9,[rcx+0xb]
0x19db00088ee9   2c9  448b7f03       movl r15,[rdi+0x3]
0x19db00088eed   2cd  41d1ff         sarl r15, 1
0x19db00088ef0   2d0  41d1f9         sarl r9, 1
0x19db00088ef3   2d3  418d7101       leal rsi,[r9+0x1]
0x19db00088ef7   2d7  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db00088f01   2e1  4c3bd6         REX.W cmpq r10,rsi
0x19db00088f04   2e4  7715           ja 0x19db00088f1b  <+0x2fb>
0x19db00088f06   2e6  48ba0200000000000000 REX.W movq rdx,0x2
0x19db00088f10   2f0  4c8b1521fdffff REX.W movq r10,[rip+0xfffffd21]
0x19db00088f17   2f7  41ffd2         call r10
0x19db00088f1a   2fa  cc             int3l
0x19db00088f1b   2fb  3bc6           cmpl rax,rsi
0x19db00088f1d   2fd  0f83f4030000   jnc 0x19db00089317  <+0x6f7>
0x19db00088f23   303  413bc7         cmpl rax,r15
0x19db00088f26   306  0f83fa010000   jnc 0x19db00089126  <+0x506>
0x19db00088f2c   30c  448d7801       leal r15,[rax+0x1]
0x19db00088f30   310  4c8b15c2ffffff REX.W movq r10,[rip+0xffffffc2]
0x19db00088f37   317  4d3bd7         REX.W cmpq r10,r15
0x19db00088f3a   31a  7712           ja 0x19db00088f4e  <+0x32e>
0x19db00088f3c   31c  488b15c5ffffff REX.W movq rdx,[rip+0xffffffc5]
0x19db00088f43   323  4c8b15eefcffff REX.W movq r10,[rip+0xfffffcee]
0x19db00088f4a   32a  41ffd2         call r10
0x19db00088f4d   32d  cc             int3l
0x19db00088f4e   32e  413bc1         cmpl rax,r9
0x19db00088f51   331  0f8226000000   jc 0x19db00088f7d  <+0x35d>
0x19db00088f57   337  478d0c3f       leal r9,[r15+r15*1]
0x19db00088f5b   33b  4c8b1597ffffff REX.W movq r10,[rip+0xffffff97]
0x19db00088f62   342  4d3bd1         REX.W cmpq r10,r9
0x19db00088f65   345  7712           ja 0x19db00088f79  <+0x359>
0x19db00088f67   347  488b159affffff REX.W movq rdx,[rip+0xffffff9a]
0x19db00088f6e   34e  4c8b15c3fcffff REX.W movq r10,[rip+0xfffffcc3]
0x19db00088f75   355  41ffd2         call r10
0x19db00088f78   358  cc             int3l
0x19db00088f79   359  4489490b       movl [rcx+0xb],r9
0x19db00088f7d   35d  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db00088f81   361  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db00088f85   365  c5cb59cd       vmulsd xmm1,xmm6,xmm5
0x19db00088f89   369  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00088f8d   36d  c5bb59d7       vmulsd xmm2,xmm8,xmm7
0x19db00088f91   371  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db00088f95   375  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00088f99   379  c5fb1144c707   vmovsd [rdi+rax*8+0x7],xmm0
0x19db00088f9f   37f  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00088fa3   383  0f87a7feffff   ja 0x19db00088e50  <+0x230>
0x19db00088fa9   389  e964020000     jmp 0x19db00089212  <+0x5f2>
0x19db00088fae   38e  488bc1         REX.W movq rax,rcx
0x19db00088fb1   391  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db00088fb5   395  488be5         REX.W movq rsp,rbp
0x19db00088fb8   398  5d             pop rbp
0x19db00088fb9   399  4883f902       REX.W cmpq rcx,0x2
0x19db00088fbd   39d  7f03           jg 0x19db00088fc2  <+0x3a2>
0x19db00088fbf   39f  c21800         ret 0x18
0x19db00088fc2   3a2  415a           pop r10
0x19db00088fc4   3a4  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db00088fc9   3a9  4152           push r10
0x19db00088fcb   3ab  c3             retl
0x19db00088fcc   3ac  48b92000000000000000 REX.W movq rcx,0x20
0x19db00088fd6   3b6  51             push rcx
0x19db00088fd7   3b7  b801000000     movl rax,0x1
0x19db00088fdc   3bc  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db00088fe6   3c6  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00088ff0   3d0  488bc8         REX.W movq rcx,rax
0x19db00088ff3   3d3  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db00088ffd   3dd  41ffd2         call r10
0x19db00089000   3e0  e978fcffff     jmp 0x19db00088c7d  <+0x5d>
0x19db00089005   3e5  c5fb104103     vmovsd xmm0,[rcx+0x3]
0x19db0008900a   3ea  e984fcffff     jmp 0x19db00088c93  <+0x73>
0x19db0008900f   3ef  c5fb1145e0     vmovsd [rbp-0x20],xmm0
0x19db00089014   3f4  ba38000000     movl rdx,0x38
0x19db00089019   3f9  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db00089023   403  41ffd2         call r10
0x19db00089026   406  488d78ff       REX.W leaq rdi,[rax-0x1]
0x19db0008902a   40a  c5fb1045e0     vmovsd xmm0,[rbp-0x20]
0x19db0008902f   40f  488b0d5ffcffff REX.W movq rcx,[rip+0xfffffc5f]
0x19db00089036   416  e97cfcffff     jmp 0x19db00088cb7  <+0x97>
0x19db0008903b   41b  4153           push r11
0x19db0008903d   41d  4150           push r8
0x19db0008903f   41f  48894de0       REX.W movq [rbp-0x20],rcx
0x19db00089043   423  4c89a568ffffff REX.W movq [rbp-0x98],r12
0x19db0008904a   42a  4c89b560ffffff REX.W movq [rbp-0xa0],r14
0x19db00089051   431  48897dc8       REX.W movq [rbp-0x38],rdi
0x19db00089055   435  c5fb1145c0     vmovsd [rbp-0x40],xmm0
0x19db0008905a   43a  4c897db8       REX.W movq [rbp-0x48],r15
0x19db0008905e   43e  488945b0       REX.W movq [rbp-0x50],rax
0x19db00089062   442  48bb9061fef6ff7f0000 REX.W movq rbx,0x7ffff6fe6190    ;; external reference (Runtime::TransitionElementsKind)
0x19db0008906c   44c  33f6           xorl rsi,rsi
0x19db0008906e   44e  488bd0         REX.W movq rdx,rax
0x19db00089071   451  b802000000     movl rax,0x2
0x19db00089076   456  4c8b1578ffffff REX.W movq r10,[rip+0xffffff78]
0x19db0008907d   45d  41ffd2         call r10
0x19db00089080   460  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db00089084   464  4c8b4d18       REX.W movq r9,[rbp+0x18]
0x19db00089088   468  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db0008908c   46c  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00089096   476  4c8ba568ffffff REX.W movq r12,[rbp-0x98]
0x19db0008909d   47d  4c8bb560ffffff REX.W movq r14,[rbp-0xa0]
0x19db000890a4   484  488b7dc8       REX.W movq rdi,[rbp-0x38]
0x19db000890a8   488  c5fb1045c0     vmovsd xmm0,[rbp-0x40]
0x19db000890ad   48d  4c8b7db8       REX.W movq r15,[rbp-0x48]
0x19db000890b1   491  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db000890b5   495  e9e4fcffff     jmp 0x19db00088d9e  <+0x17e>
0x19db000890ba   49a  48894de0       REX.W movq [rbp-0x20],rcx
0x19db000890be   49e  48899570ffffff REX.W movq [rbp-0x90],rdx
0x19db000890c5   4a5  4c89a568ffffff REX.W movq [rbp-0x98],r12
0x19db000890cc   4ac  4c89b560ffffff REX.W movq [rbp-0xa0],r14
0x19db000890d3   4b3  33c0           xorl rax,rax
0x19db000890d5   4b5  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db000890df   4bf  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000890e9   4c9  488bf8         REX.W movq rdi,rax
0x19db000890ec   4cc  4c8b1502ffffff REX.W movq r10,[rip+0xffffff02]
0x19db000890f3   4d3  41ffd2         call r10
0x19db000890f6   4d6  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db000890fa   4da  4c8b4d18       REX.W movq r9,[rbp+0x18]
0x19db000890fe   4de  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00089102   4e2  488b9570ffffff REX.W movq rdx,[rbp-0x90]
0x19db00089109   4e9  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00089113   4f3  4c8ba568ffffff REX.W movq r12,[rbp-0x98]
0x19db0008911a   4fa  4c8bb560ffffff REX.W movq r14,[rbp-0xa0]
0x19db00089121   501  e916fdffff     jmp 0x19db00088e3c  <+0x21c>
0x19db00089126   506  8d1c00         leal rbx,[rax+rax*1]
0x19db00089129   509  4c8b15c9fdffff REX.W movq r10,[rip+0xfffffdc9]
0x19db00089130   510  4c3bd3         REX.W cmpq r10,rbx
0x19db00089133   513  7712           ja 0x19db00089147  <+0x527>
0x19db00089135   515  488b15ccfdffff REX.W movq rdx,[rip+0xfffffdcc]
0x19db0008913c   51c  4c8b15f5faffff REX.W movq r10,[rip+0xfffffaf5]
0x19db00089143   523  41ffd2         call r10
0x19db00089146   526  cc             int3l
0x19db00089147   527  48894de0       REX.W movq [rbp-0x20],rcx
0x19db0008914b   52b  c57b1145c0     vmovsd [rbp-0x40],xmm8
0x19db00089150   530  c5fb117db8     vmovsd [rbp-0x48],xmm7
0x19db00089155   535  c5fb1175b0     vmovsd [rbp-0x50],xmm6
0x19db0008915a   53a  c5fb116da8     vmovsd [rbp-0x58],xmm5
0x19db0008915f   53f  c5fb114da0     vmovsd [rbp-0x60],xmm1
0x19db00089164   544  c5fb114598     vmovsd [rbp-0x68],xmm0
0x19db00089169   549  c5fb116590     vmovsd [rbp-0x70],xmm4
0x19db0008916e   54e  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db00089173   553  48894580       REX.W movq [rbp-0x80],rax
0x19db00089177   557  4c898d78ffffff REX.W movq [rbp-0x88],r9
0x19db0008917e   55e  48899570ffffff REX.W movq [rbp-0x90],rdx
0x19db00089185   565  4c89a568ffffff REX.W movq [rbp-0x98],r12
0x19db0008918c   56c  4c89b560ffffff REX.W movq [rbp-0xa0],r14
0x19db00089193   573  33f6           xorl rsi,rsi
0x19db00089195   575  488bf8         REX.W movq rdi,rax
0x19db00089198   578  488bc1         REX.W movq rax,rcx
0x19db0008919b   57b  49ba20e7baf5ff7f0000 REX.W movq r10,0x7ffff5bae720  (GrowFastDoubleElements)    ;; off heap target
0x19db000891a5   585  41ffd2         call r10
0x19db000891a8   588  a801           test al,0x1
0x19db000891aa   58a  0f846e010000   jz 0x19db0008931e  <+0x6fe>
0x19db000891b0   590  488bf8         REX.W movq rdi,rax
0x19db000891b3   593  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db000891b7   597  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db000891bb   59b  c57b1045c0     vmovsd xmm8,[rbp-0x40]
0x19db000891c0   5a0  c5fb107db8     vmovsd xmm7,[rbp-0x48]
0x19db000891c5   5a5  c5fb1075b0     vmovsd xmm6,[rbp-0x50]
0x19db000891ca   5aa  c5fb106da8     vmovsd xmm5,[rbp-0x58]
0x19db000891cf   5af  c5fb104da0     vmovsd xmm1,[rbp-0x60]
0x19db000891d4   5b4  c5fb104598     vmovsd xmm0,[rbp-0x68]
0x19db000891d9   5b9  c5fb106590     vmovsd xmm4,[rbp-0x70]
0x19db000891de   5be  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db000891e3   5c3  488b4580       REX.W movq rax,[rbp-0x80]
0x19db000891e7   5c7  4c8b8d78ffffff REX.W movq r9,[rbp-0x88]
0x19db000891ee   5ce  488b9570ffffff REX.W movq rdx,[rbp-0x90]
0x19db000891f5   5d5  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000891ff   5df  4c8ba568ffffff REX.W movq r12,[rbp-0x98]
0x19db00089206   5e6  4c8bb560ffffff REX.W movq r14,[rbp-0xa0]
0x19db0008920d   5ed  e91afdffff     jmp 0x19db00088f2c  <+0x30c>
0x19db00089212   5f2  48894de0       REX.W movq [rbp-0x20],rcx
0x19db00089216   5f6  4c897dc8       REX.W movq [rbp-0x38],r15
0x19db0008921a   5fa  48899570ffffff REX.W movq [rbp-0x90],rdx
0x19db00089221   601  4c89a568ffffff REX.W movq [rbp-0x98],r12
0x19db00089228   608  4c89b560ffffff REX.W movq [rbp-0xa0],r14
0x19db0008922f   60f  488b1da1feffff REX.W movq rbx,[rip+0xfffffea1]
0x19db00089236   616  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00089240   620  33c0           xorl rax,rax
0x19db00089242   622  4c8b15acfdffff REX.W movq r10,[rip+0xfffffdac]
0x19db00089249   629  41ffd2         call r10
0x19db0008924c   62c  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db00089250   630  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00089254   634  4c8b7dc8       REX.W movq r15,[rbp-0x38]
0x19db00089258   638  488b9570ffffff REX.W movq rdx,[rbp-0x90]
0x19db0008925f   63f  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00089269   649  4c8ba568ffffff REX.W movq r12,[rbp-0x98]
0x19db00089270   650  4c8bb560ffffff REX.W movq r14,[rbp-0xa0]
0x19db00089277   657  e9d4fbffff     jmp 0x19db00088e50  <+0x230>
0x19db0008927c   65c  90             nop
0x19db0008927d   65d  41ff95f8360000 call [r13+0x36f8]
0x19db00089284   664  41ff95f8360000 call [r13+0x36f8]
0x19db0008928b   66b  41ff95f8360000 call [r13+0x36f8]
0x19db00089292   672  41ff95f8360000 call [r13+0x36f8]
0x19db00089299   679  41ff95f8360000 call [r13+0x36f8]
0x19db000892a0   680  41ff95f8360000 call [r13+0x36f8]
0x19db000892a7   687  41ff95f8360000 call [r13+0x36f8]
0x19db000892ae   68e  41ff95f8360000 call [r13+0x36f8]
0x19db000892b5   695  41ff95f8360000 call [r13+0x36f8]
0x19db000892bc   69c  41ff95f8360000 call [r13+0x36f8]
0x19db000892c3   6a3  41ff95f8360000 call [r13+0x36f8]
0x19db000892ca   6aa  41ff95f8360000 call [r13+0x36f8]
0x19db000892d1   6b1  41ff95f8360000 call [r13+0x36f8]
0x19db000892d8   6b8  41ff95f8360000 call [r13+0x36f8]
0x19db000892df   6bf  41ff95f8360000 call [r13+0x36f8]
0x19db000892e6   6c6  41ff95f8360000 call [r13+0x36f8]
0x19db000892ed   6cd  41ff95f8360000 call [r13+0x36f8]
0x19db000892f4   6d4  41ff95f8360000 call [r13+0x36f8]
0x19db000892fb   6db  41ff95f8360000 call [r13+0x36f8]
0x19db00089302   6e2  41ff95f8360000 call [r13+0x36f8]
0x19db00089309   6e9  41ff95f8360000 call [r13+0x36f8]
0x19db00089310   6f0  41ff95f8360000 call [r13+0x36f8]
0x19db00089317   6f7  41ff95f8360000 call [r13+0x36f8]
0x19db0008931e   6fe  41ff95f8360000 call [r13+0x36f8]
0x19db00089325   705  41ff9510370000 call [r13+0x3710]
0x19db0008932c   70c  41ff9510370000 call [r13+0x3710]
0x19db00089333   713  41ff9510370000 call [r13+0x3710]
0x19db0008933a   71a  6690           nop

Source positions:
 pc offset  position
       3b7      2798

Inlined functions (count = 0)

Deoptimization Input Data (deopt points = 27)
 index  bytecode-offset    pc
     0               17    NA 
     1               17    NA 
     2               17    NA 
     3               17    NA 
     4               17    NA 
     5               17    NA 
     6               17    NA 
     7               17    NA 
     8               17    NA 
     9               17    NA 
    10               17    NA 
    11               17    NA 
    12               17    NA 
    13               17    NA 
    14               17    NA 
    15               17    NA 
    16               17    NA 
    17               17    NA 
    18               17    NA 
    19               17    NA 
    20               17    NA 
    21               17    NA 
    22               17    NA 
    23               17    NA 
    24               -1   3e0 
    25              133   4d6 
    26              133   62c 

Safepoints (size = 98)
0x19db00089000     3e0   705  0000000000000011000000 (sp -> fp)      24
0x19db00089026     406    NA  0000000000000011000000 (sp -> fp)  <none>
0x19db00089080     460    NA  0100000000010111100000 (sp -> fp)  <none>
0x19db000890f6     4d6   70c  0110000000000011100000 (sp -> fp)      25
0x19db000891a8     588    NA  0110000000000011100000 (sp -> fp)  <none>
0x19db0008924c     62c   713  0110000000000011100000 (sp -> fp)      26

RelocInfo (size = 50)
0x19db00088c38  off heap target
0x19db00088c52  off heap target
0x19db00088c95  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db00088ca6  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db00088cf5  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00088d26  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00088d90  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00088fde  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db00088fe8  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00088ff5  off heap target
0x19db0008901b  off heap target
0x19db00089064  external reference (Runtime::TransitionElementsKind)  (0x7ffff6fe6190)
0x19db0008908e  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000890d7  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db000890e1  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008910b  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0008919d  off heap target
0x19db000891f7  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00089238  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00089261  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)

--- End code ---
assign 0 to v-1:0
assign 3 to v-4:0
assign 2 to v-3:0
assign 1 to v-2:0
assign 6 to v-7:0
assign 7 to v-8:0
assign 8 to v-9:0
assign 9 to v-10:0
assign 11 to v-12:0
assign 12 to v-13:0
assign 14 to v-15:0
assign 15 to v-16:0
assign 0 to v-33:0
assign 1 to v-34:0
assign 2 to v-35:0
assign 3 to v-36:0
assign 4 to v-37:0
assign 5 to v-38:0
assign 6 to v-39:0
assign 7 to v-40:0
assign 8 to v-41:0
assign 9 to v-42:0
assign 10 to v-43:0
assign 11 to v-44:0
assign 12 to v-45:0
assign 13 to v-46:0
assign 14 to v-47:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
------------------------
function: CreateP
add v26->v21
add v22->v24
add v15->v20
add v19->v20
add v18->v11
add v17->v15
add v14->v15
add v13->v9
add v12->v9
add v11->v9
add v4->v11
add v5->v11
add v6->v11
gap () () 
          [stack:-1|t] = ArchNop
gap (v3(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v4(-) = [stack:-2|t];) () 
          [stack:-3|t] = ArchNop
gap (v5(-) = [stack:-3|t];) () 
          [stack:-4|t] = ArchNop
gap (v6(-) = [stack:-4|t];) () 
          [rsi|R|t] = ArchNop
gap (v7(-) = [rsi|R|t];) () 
          [rdi|R|t] = ArchNop
gap (v2(-) = [rdi|R|t];) () 
          [constant:31] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:38] [immediate:39]
gap () () 
          [constant:32] = ArchNop
gap () () 
          [constant:30] = ArchNop
gap () () 
          v29(R) = ArchStackCheckOffset
gap () () 
          X64Push v29(-)
gap () ([rbx|R|w64] = v30(-); [rax|R|w64] = v31(-); [rsi|R|t] = v32(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:37] #-1 #4 v2(S) v3(S) v4(S) v5(S) v6(S) v7(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:36]
gap () () 
          ArchJmp [immediate:35]
gap () () 
          [constant:16] = ArchNop
gap () () 
          v21(R) = X64Movq : MR v16(R)
gap () () 
          [constant:27] = ArchNop
gap () () 
          [constant:25] = ArchNop
gap () () 
          v26(R) = X64Lea : MRI v21(R) [immediate:34]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v27(R) v26(R) [immediate:32] [immediate:33]
gap () () 
          ArchJmp [immediate:31]
gap () ([rdx|R|w64] = v25(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:30] #-1 [rdx|R|w64]
gap (v24(-) = [rax|R|tp];) () 
          v22(R) = X64Lea : MRI v24(R) [immediate:29]
gap () (v20 = v22(-);) 
          ArchJmp [immediate:28]
gap () (v20 = v21(-);) 
          ArchJmp [immediate:27]
gap () () 
          v15(R) = X64Lea : MRI v20(R) [immediate:26]
gap () () 
          X64Movq : MR v16(R) v15(R)
gap () () 
          v19(R) = X64Lea : MRI v20(R) [immediate:25]
gap () (v11 = v19(-);) 
          v11(1) = ArchNop v11
gap () () 
          [constant:18] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v11(R) [immediate:24] v18(R)
gap () () 
          X64MovqCompressTagged : MRI v11(R) [immediate:22] [immediate:23]
gap () () 
          X64MovqCompressTagged : MRI v11(R) [immediate:20] [immediate:21]
gap () () 
          X64MovqCompressTagged : MRI v11(R) [immediate:18] [immediate:19]
gap () () 
          X64MovqCompressTagged : MRI v11(R) [immediate:16] [immediate:17]
gap () () 
          X64MovqCompressTagged : MRI v11(R) [immediate:14] [immediate:15]
gap () () 
          v17(R) = X64Lea : MRI v15(R) [immediate:13]
gap () () 
          X64Movq : MR v16(R) v17(R)
gap () () 
          v14(R) = X64Lea : MRI v15(R) [immediate:12]
gap () (v9 = v14(-);) 
          v9(1) = ArchNop v9
gap () () 
          [constant:13] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v9(R) [immediate:11] v13(R)
gap () () 
          [constant:12] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v9(R) [immediate:10] v12(R)
gap () () 
          X64MovqCompressTagged : MRI v9(R) [immediate:9] v11(R)
gap () () 
          X64MovqCompressTagged : MRI v9(R) [immediate:7] [immediate:8]
gap () () 
          X64Test32 && deoptimize if not equal v4 #1 #3 v2(S) v3(-) v4(-) v5(-) v6(-) v7(S) [immediate:6] v9(-) v4(-)
gap () () 
          X64MovqCompressTagged : MRI v11(R) [immediate:5] v4(R)
gap () () 
          X64Test32 && deoptimize if not equal v5 #1 #2 v2(S) v3(-) v4(-) v5(-) v6(-) v7(S) [immediate:4] v9(-) v5(-)
gap () () 
          X64MovqCompressTagged : MRI v11(R) [immediate:3] v5(R)
gap () () 
          X64Test32 && deoptimize if not equal v6 #1 #1 v2(S) v3(-) v4(-) v5(-) v6(-) v7(S) [immediate:2] v9(-) v6(-)
gap () () 
          X64MovqCompressTagged : MRI v11(R) [immediate:1] v6(R)
gap () () 
          [constant:10] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () ([rdx|R|t] = v3(-); [rcx|R|t] = v8(-); [rax|R|t] = v9(-); [rdi|R|w64] = v10(-); [rsi|R|t] = v7(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:0] #-1 #0 v2(S) v3(S) v4(S) v5(S) v6(S) v7(S) [rdx|R|t] [rcx|R|t] [rax|R|t] [rdi|R|w64] [rsi|R|t]
gap () () 
          [constant:0] = ArchNop
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
print modrm pairs
1, v6, v11
1, v5, v11
1, v4, v11
1, v12, v9
1, v14, v15
1, v11, v9
1, v17, v15
1, v19, v20
1, v15, v20
1, v18, v11
1, v13, v9
1, v22, v24
1, v26, v21
assign r8 to v29:0
assign 8 to v29:0
assign rbx to v30:1
assign 3 to v30:1
assign rax to v31:1
assign 0 to v31:1
assign rsi to v32:1
assign 6 to v32:1
assign r8 to v16:1
assign 8 to v16:1
assign r9 to v21:0
assign 9 to v21:0
assign r12 to v26:0
assign 12 to v26:0
assign r11 to v27:1
assign 11 to v27:1
assign rdx to v25:1
assign 2 to v25:1
blocking v16 pick register r8
assign rax to v24:0
assign 0 to v24:0
assign r9 to v22:0
assign 9 to v22:0
assign r8 to v16:4
assign 8 to v16:4
assign r9 to v20:0
assign 9 to v20:0
assign r12 to v15:0
assign 12 to v15:0
assign r8 to v16:3
assign 8 to v16:3
assign r9 to v19:0
assign 9 to v19:0
assign r9 to v11:0
assign 9 to v11:0
assign r14 to v18:1
assign 14 to v18:1
assign rax to v17:0
assign 0 to v17:0
assign r8 to v14:0
assign 8 to v14:0
assign r8 to v9:0
assign 8 to v9:0
assign r12 to v13:1
assign 12 to v13:1
assign r12 to v12:1
assign 12 to v12:1
assign r12 to v4:1
assign 12 to v4:1
assign r14 to v5:1
assign 14 to v5:1
assign r15 to v6:1
assign 15 to v6:1
assign rcx to v8:1
assign 1 to v8:1
assign rdi to v10:1
assign 7 to v10:1
assign rax to v0:1
assign 0 to v0:1
spill count : 4
--- Raw source ---
(X,Y,Z) {
      this.V = [X,Y,Z,1];
    }


--- Optimized code ---
optimization_id = 8
source_position = 2379
kind = TURBOFAN
name = CreateP
stack_slots = 7
compiler = turbofan
address = 0x19db000893a1

Instructions (size = 488)
0x19db000893e0     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db000893e7     7  483bd9         REX.W cmpq rbx,rcx
0x19db000893ea     a  7418           jz 0x19db00089404  <+0x24>
0x19db000893ec     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db000893f6    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db00089400    20  41ffd2         call r10
0x19db00089403    23  cc             int3l
0x19db00089404    24  8b59d0         movl rbx,[rcx-0x30]
0x19db00089407    27  4903dd         REX.W addq rbx,r13
0x19db0008940a    2a  f6430701       testb [rbx+0x7],0x1
0x19db0008940e    2e  740d           jz 0x19db0008941d  <+0x3d>
0x19db00089410    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db0008941a    3a  41ffe2         jmp r10
0x19db0008941d    3d  55             push rbp
0x19db0008941e    3e  4889e5         REX.W movq rbp,rsp
0x19db00089421    41  56             push rsi
0x19db00089422    42  57             push rdi
0x19db00089423    43  50             push rax
0x19db00089424    44  4883ec10       REX.W subq rsp,0x10
0x19db00089428    48  488975d8       REX.W movq [rbp-0x28],rsi
0x19db0008942c    4c  48897de0       REX.W movq [rbp-0x20],rdi
0x19db00089430    50  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00089434    54  0f860f010000   jna 0x19db00089549  <+0x169>
0x19db0008943a    5a  49b8f87d6d5555550000 REX.W movq r8,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db00089444    64  4d8b08         REX.W movq r9,[r8]
0x19db00089447    67  4d8d6128       REX.W leaq r12,[r9+0x28]
0x19db0008944b    6b  49bb007e6d5555550000 REX.W movq r11,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db00089455    75  4d3923         REX.W cmpq [r11],r12
0x19db00089458    78  0f8622010000   jna 0x19db00089580  <+0x1a0>
0x19db0008945e    7e  4d8d6118       REX.W leaq r12,[r9+0x18]
0x19db00089462    82  4d8920         REX.W movq [r8],r12
0x19db00089465    85  4983c101       REX.W addq r9,0x1
0x19db00089469    89  4d8bb5d0000000 REX.W movq r14,[r13+0xd0] (root (fixed_array_map))
0x19db00089470    90  458971ff       movl [r9-0x1],r14
0x19db00089474    94  41c7410308000000 movl [r9+0x3],0x8
0x19db0008947c    9c  41c7410700000000 movl [r9+0x7],0x0
0x19db00089484    a4  41c7410b00000000 movl [r9+0xb],0x0
0x19db0008948c    ac  41c7410f00000000 movl [r9+0xf],0x0
0x19db00089494    b4  41c7411302000000 movl [r9+0x13],0x2
0x19db0008949c    bc  498d442410     REX.W leaq rax,[r12+0x10]
0x19db000894a1    c1  498900         REX.W movq [r8],rax
0x19db000894a4    c4  4d8d442401     REX.W leaq r8,[r12+0x1]
0x19db000894a9    c9  41bcb59e3008   movl r12,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000894af    cf  458960ff       movl [r8-0x1],r12
0x19db000894b3    d3  4d8ba558010000 REX.W movq r12,[r13+0x158] (root (empty_fixed_array))
0x19db000894ba    da  45896003       movl [r8+0x3],r12
0x19db000894be    de  45894807       movl [r8+0x7],r9
0x19db000894c2    e2  41c7400b08000000 movl [r8+0xb],0x8
0x19db000894ca    ea  4c8b6518       REX.W movq r12,[rbp+0x18]
0x19db000894ce    ee  41f6c401       testb r12,0x1
0x19db000894d2    f2  0f85cb000000   jnz 0x19db000895a3  <+0x1c3>
0x19db000894d8    f8  45896107       movl [r9+0x7],r12
0x19db000894dc    fc  4c8b7520       REX.W movq r14,[rbp+0x20]
0x19db000894e0   100  41f6c601       testb r14,0x1
0x19db000894e4   104  0f85c0000000   jnz 0x19db000895aa  <+0x1ca>
0x19db000894ea   10a  4589710b       movl [r9+0xb],r14
0x19db000894ee   10e  4c8b7d28       REX.W movq r15,[rbp+0x28]
0x19db000894f2   112  41f6c701       testb r15,0x1
0x19db000894f6   116  0f85b5000000   jnz 0x19db000895b1  <+0x1d1>
0x19db000894fc   11c  4589790f       movl [r9+0xf],r15
0x19db00089500   120  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0008950a   12a  bf06000000     movl rdi,0x6
0x19db0008950f   12f  488b5510       REX.W movq rdx,[rbp+0x10]
0x19db00089513   133  498bc0         REX.W movq rax,r8
0x19db00089516   136  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0008951a   13a  49bae0e6d1f5ff7f0000 REX.W movq r10,0x7ffff5d1e6e0  (StoreICTrampoline)    ;; off heap target
0x19db00089524   144  41ffd2         call r10
0x19db00089527   147  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db0008952e   14e  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db00089532   152  488be5         REX.W movq rsp,rbp
0x19db00089535   155  5d             pop rbp
0x19db00089536   156  4883f903       REX.W cmpq rcx,0x3
0x19db0008953a   15a  7f03           jg 0x19db0008953f  <+0x15f>
0x19db0008953c   15c  c22000         ret 0x20
0x19db0008953f   15f  415a           pop r10
0x19db00089541   161  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db00089546   166  4152           push r10
0x19db00089548   168  c3             retl
0x19db00089549   169  49b88000000000000000 REX.W movq r8,0x80
0x19db00089553   173  4150           push r8
0x19db00089555   175  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db0008955f   17f  b801000000     movl rax,0x1
0x19db00089564   184  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008956e   18e  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db00089578   198  41ffd2         call r10
0x19db0008957b   19b  e9bafeffff     jmp 0x19db0008943a  <+0x5a>
0x19db00089580   1a0  ba28000000     movl rdx,0x28
0x19db00089585   1a5  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db0008958f   1af  41ffd2         call r10
0x19db00089592   1b2  4c8d48ff       REX.W leaq r9,[rax-0x1]
0x19db00089596   1b6  4c8b059ffeffff REX.W movq r8,[rip+0xfffffe9f]
0x19db0008959d   1bd  e9bcfeffff     jmp 0x19db0008945e  <+0x7e>
0x19db000895a2   1c2  90             nop
0x19db000895a3   1c3  41ff95f8360000 call [r13+0x36f8]
0x19db000895aa   1ca  41ff95f8360000 call [r13+0x36f8]
0x19db000895b1   1d1  41ff95f8360000 call [r13+0x36f8]
0x19db000895b8   1d8  41ff9510370000 call [r13+0x3710]
0x19db000895bf   1df  41ff9510370000 call [r13+0x3710]
0x19db000895c6   1e6  6690           nop

Source positions:
 pc offset  position
       120      2379

Inlined functions (count = 0)

Deoptimization Input Data (deopt points = 5)
 index  bytecode-offset    pc
     0               11    NA 
     1               21    NA 
     2               31    NA 
     3               37   147 
     4               -1   19b 

Safepoints (size = 47)
0x19db00089527     147   1d8  1100000 (sp -> fp)       3
0x19db0008957b     19b   1df  1100000 (sp -> fp)       4
0x19db00089592     1b2    NA  1100000 (sp -> fp)  <none>

RelocInfo (size = 24)
0x19db000893f8  off heap target
0x19db00089412  off heap target
0x19db0008943c  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db0008944d  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db000894ab  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00089502  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0008951c  off heap target
0x19db00089557  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db00089566  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00089570  off heap target
0x19db00089587  off heap target

--- End code ---
assign 0 to v-1:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
assign 7 to v-8:0
assign 6 to v-7:0
------------------------
function: DrawLine
add v127->v27
add v125->v27
add v119->v125
add v114->v125
add v124->v125
add v73->v114
add v121->v28
add v118->v28
add v119->v118
add v112->v118
add v117->v118
add v106->v112
add v71->v114
add v109->v112
add v97->v96
add v95->v96
add v81->v95
add v93->v29
add v94->v93
add v1->v93
add v91->v1
add v92->v91
add v89->v91
add v18->v13
add v14->v16
add v12->v10
add v9->v10
add v8->v6
add v7->v6
add v2->v1
gap () () 
          [rsi|R|t] = ArchNop
gap (v29(-) = [rsi|R|t];) () 
          [stack:-3|t] = ArchNop
gap (v28(-) = [stack:-3|t];) () 
          [stack:-1|t] = ArchNop
gap (v26(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v27(-) = [stack:-2|t];) () 
          [rdi|R|t] = ArchNop
gap (v25(-) = [rdi|R|t];) () 
          [constant:110] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:118] [immediate:119]
gap () () 
          [constant:132] = ArchNop
gap () () 
          [constant:131] = ArchNop
gap () () 
          v130(R) = ArchStackCheckOffset
gap () () 
          X64Push v130(-)
gap () ([rbx|R|w64] = v131(-); [rax|R|w64] = v110(-); [rsi|R|t] = v132(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:117] #-1 #21 v25(S) v26(S) v27(S) v28(S) v29(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:116]
gap () () 
          ArchJmp [immediate:115]
gap () () 
          [constant:41] = ArchNop
gap () () 
          [constant:123] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v27 #1 #20 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v127(R) = X64Movl : MRI v27(R) [immediate:114]
gap () () 
          X64Cmp32 && branch if equal v127(R) v123 [immediate:112] [immediate:113]
gap () () 
          [constant:128] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v128(R) v127 [immediate:110] [immediate:111]
gap () () 
          [constant:126] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v126(R) v127 #19 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:109]
gap () () 
          ArchJmp [immediate:108]
gap () () 
          ArchJmp [immediate:107]
gap () () 
          [constant:119] = ArchNop
gap () () 
          v125(R) = X64MovqDecompressTaggedPointer : MRI v27(R) [immediate:106]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v125(R) [immediate:105] v119(R) #18 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v114(R) = X64MovqDecompressTaggedPointer : MRI v125(R) [immediate:104]
gap () () 
          v124(R) = X64MovqDecompressTaggedSigned : MRI v125(R) [immediate:103]
gap () (v115(R) = v124(-);) 
          v115(1) = X64Sar32 v115(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #0 #17 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v73(R) = X64Movsd : MRI v114(R) [immediate:102]
gap () () 
          X64Test32 && deoptimize if equal v28 #1 #16 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v121(R) = X64Movl : MRI v28(R) [immediate:101]
gap () () 
          X64Cmp32 && branch if equal v123(R) v121 [immediate:99] [immediate:100]
gap () () 
          [constant:122] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v122(R) v121 [immediate:97] [immediate:98]
gap () () 
          [constant:120] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v120(R) v121 #15 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:96]
gap () () 
          ArchJmp [immediate:95]
gap () () 
          ArchJmp [immediate:94]
gap () () 
          v118(R) = X64MovqDecompressTaggedPointer : MRI v28(R) [immediate:93]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v118(R) [immediate:92] v119(R) #14 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v112(R) = X64MovqDecompressTaggedPointer : MRI v118(R) [immediate:91]
gap () () 
          v117(R) = X64MovqDecompressTaggedSigned : MRI v118(R) [immediate:90]
gap () (v113(R) = v117(-);) 
          v113(1) = X64Sar32 v113(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #0 #13 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v106(R) = X64Movsd : MRI v112(R) [immediate:89]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v106(R) v73 [immediate:87] [immediate:88]
gap () () 
          [constant:116] = ArchNop
gap () (v99 = v116(-);) 
          ArchJmp [immediate:86]
gap () (v99 = v110(-);) 
          ArchJmp [immediate:85]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #1 #12 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v71(R) = X64Movsd : MRI v114(R) [immediate:84]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #1 #11 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v109(R) = X64Movsd : MRI v112(R) [immediate:83]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v109(R) v71 [immediate:81] [immediate:82]
gap () () 
          [constant:111] = ArchNop
gap () (v98 = v111(-);) 
          ArchJmp [immediate:80]
gap () (v98 = v110(-);) 
          ArchJmp [immediate:79]
gap () () 
          [constant:87] = ArchNop
gap () () 
          v108(R) = AVXFloat64Sub v109(R) v71
gap () () 
          v100(R) = AVXFloat64Abs v108
gap () () 
          v105(R) = AVXFloat64Sub v106(R) v73
gap () () 
          v101(R) = AVXFloat64Abs v105
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v101(R) v100 [immediate:77] [immediate:78]
gap () () 
          v103(R) = AVXFloat64Mul v100(R) v87
gap () (v35 = v98(-); v33 = v41(-); v34 = v41(-); v32 = v99(-); v38 = v101(-); v77 = v103(-); v36 = v100(-);) 
          ArchJmp [immediate:76]
gap () () 
          v102(R) = AVXFloat64Mul v101(R) v87
gap () (v35 = v41(-); v33 = v98(-); v34 = v99(-); v32 = v41(-); v38 = v100(-); v77 = v102(-); v36 = v101(-);) 
          ArchJmp [immediate:75]
gap () () 
          [constant:96] = ArchNop
gap () () 
          [constant:97] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v96(R) [immediate:74] v97(R) #10 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v95(R) = X64MovqDecompressTaggedPointer : MRI v96(R) [immediate:73]
gap () () 
          v81(R) = X64Movl : MRI v95(R) [immediate:72]
gap () () 
          v93(R) = X64MovqDecompressAnyTagged : MRI v29(R) [immediate:71]
gap () () 
          X64Test32 && deoptimize if equal v93 #1 #9 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          [constant:94] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v93(R) [immediate:70] v94(R) #8 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v1(R) = X64MovqDecompressTaggedPointer : MRI v93(R) [immediate:69]
gap () () 
          v91(R) = X64MovqDecompressAnyTagged : MRI v1(R) [immediate:68]
gap () (v68(R) = v91(-);) 
          v68(1) = X64Sar32 v68(R) #1
gap () () 
          v79(R) = X64Test32 && set if equal v91 #1
gap () () 
          X64Cmp32 && branch if not equal v79 #0 [immediate:66] [immediate:67]
gap () () 
          v92(R) = X64MovqDecompressTaggedPointer : MRI v91(R) [immediate:65]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v92(R) [immediate:63] [immediate:64]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v92(R) [immediate:62] #67 #7 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:61]
gap () () 
          ArchJmp [immediate:60]
gap () () 
          v89(R) = X64Movsd : MRI v91(R) [immediate:59]
gap () (v88 = v89(-);) 
          ArchJmp [immediate:58]
gap () () 
          v90(R) = SSEInt32ToFloat64 v68
gap () (v88 = v90(-);) 
          ArchJmp [immediate:57]
gap () () 
          v85(R) = AVXFloat64Add v88(R) v36
gap () () 
          v82(R) = SSEFloat64Round v85(R)
gap () () 
          v86(R) = AVXFloat64Sub v82(R) v87
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v85(R) v86 [immediate:55] [immediate:56]
gap () () 
          [constant:84] = ArchNop
gap () () 
          v83(R) = AVXFloat64Sub v82(R) v84
gap () (v7 = v83(-);) 
          ArchJmp [immediate:54]
gap () (v7 = v82(-);) 
          ArchJmp [immediate:53]
gap () () 
          v22(R) = SSEFloat64ToInt32 v7
gap () () 
          [constant:80] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v80(R) v81 #6 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v78(R) = SSEInt32ToFloat64 v22
gap () () 
          X64Cmp32 && deoptimize if equal v79 #0 #5 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v78(R) v7 #4 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          X64Cmp32 && branch if signed less than v68(R) v22 [immediate:51] [immediate:52]
gap () () 
          ArchJmp [immediate:50]
gap () () 
          v69(R) = AVXFloat64Add v77(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v69(R) v36 [immediate:48] [immediate:49]
gap () (v59 = v69(-); v67 = v71(-); v66 = v73(-);) 
          ArchJmp [immediate:47]
gap () () 
          v76(R) = SSEInt32ToFloat64 v33
gap () () 
          v75(R) = SSEInt32ToFloat64 v32
gap () () 
          v70(R) = AVXFloat64Sub v69(R) v36
gap () () 
          v72(R) = AVXFloat64Add v76(R) v71
gap () () 
          v74(R) = AVXFloat64Add v75(R) v73
gap () (v59 = v70(-); v67 = v72(-); v66 = v74(-);) 
          ArchJmp [immediate:46]
gap () () 
          v46(R) = SSEInt32ToFloat64 v35
gap () () 
          v44(R) = SSEInt32ToFloat64 v34
gap () (v65(R) = v68(-);) 
          v65(1) = X64Add32 && deoptimize if overflow v65(R) #1 #3 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v58(R) = AVXFloat64Add v67(R) v46
gap () () 
          v60(R) = AVXFloat64Add v66(R) v44
gap () (v61 = v65(-);) 
          v61(1) = ArchNop v61
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:44] [immediate:45]
gap () () 
          [constant:64] = ArchNop
gap () () 
          [constant:63] = ArchNop
gap () ([rbx|R|w64] = v63(-); [rax|R|w64] = v41(-); [rsi|R|t] = v64(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:43] #-1 #2 v25(S) v26(S) v27(S) v28(S) v29(S) v60(S) v58(S) v32(S) v33(S) v34(S) v35(S) v36(S) v59(S) v38(S) v7(S) v61(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:42]
gap () () 
          ArchJmp [immediate:41]
gap () (v50 = v58(-); v51 = v59(-); v49 = v60(-); v48 = v61(-);) 
          ArchJmp [immediate:40]
gap () () 
          X64Cmp32 && branch if signed less than v48(R) v22 [immediate:38] [immediate:39]
gap () () 
          v53(R) = AVXFloat64Add v51(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v53(R) v36 [immediate:36] [immediate:37]
gap () (v47 = v50(-); v37 = v53(-); v45 = v49(-);) 
          ArchJmp [immediate:35]
gap () () 
          v57(R) = SSEInt32ToFloat64 v33
gap () () 
          v52(R) = AVXFloat64Add v57(R) v50
gap () () 
          v54(R) = AVXFloat64Sub v53(R) v36
gap () () 
          v56(R) = SSEInt32ToFloat64 v32
gap () () 
          v55(R) = AVXFloat64Add v56(R) v49
gap () (v47 = v52(-); v37 = v54(-); v45 = v55(-);) 
          ArchJmp [immediate:34]
gap () (v43(R) = v48(-);) 
          v43(1) = X64Add32 && deoptimize if overflow v43(R) #1 #1 v25(S) v26(-) v27(-) v28(-) v29(S) v49(-) v50(-) v32(-) v33(-) v34(-) v35(-) v36(-) v51(-) v38(-) v7(-) v48(-) v7(-)
gap () () 
          v31(R) = AVXFloat64Add v46(R) v47
gap () () 
          v30(R) = AVXFloat64Add v44(R) v45
gap () (v39 = v43(-);) 
          v39(1) = ArchNop v39
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:32] [immediate:33]
gap () () 
          [constant:42] = ArchNop
gap () () 
          [constant:40] = ArchNop
gap () ([rbx|R|w64] = v40(-); [rax|R|w64] = v41(-); [rsi|R|t] = v42(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:31] #-1 #0 v25(S) v26(S) v27(S) v28(S) v29(S) v30(S) v31(S) v32(S) v33(S) v34(S) v35(S) v36(S) v37(S) v38(S) v7(S) v39(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:30]
gap () () 
          ArchJmp [immediate:29]
gap () (v50 = v31(-); v51 = v37(-); v49 = v30(-); v48 = v39(-);) 
          ArchJmp [immediate:28]
gap () () 
          ArchJmp [immediate:27]
gap () () 
          X64Cmp32 && branch if equal v22 #0 [immediate:25] [immediate:26]
gap () () 
          ArchJmp [immediate:24]
gap () () 
          v23(R) = SSEFloat64ExtractHighWord32 v7
gap () () 
          X64Cmp32 && branch if signed less than v23 #0 [immediate:22] [immediate:23]
gap () () 
          ArchJmp [immediate:21]
gap () (v21(R) = v22(-);) 
          v21(1) = X64Add32 && branch if overflow v21(R) v22(R) [immediate:17] [immediate:18] [immediate:19] [immediate:20]
gap () (v20 = v21(-);) 
          v20(1) = ArchNop v20
gap () (v2 = v20(-);) 
          ArchJmp [immediate:16]
gap () () 
          ArchJmp [immediate:15]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          [constant:17] = ArchNop
gap () () 
          [constant:11] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () () 
          v13(R) = X64Movq : MR v11(R)
gap () () 
          [constant:19] = ArchNop
gap () () 
          v18(R) = X64Lea : MRI v13(R) [immediate:13]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v19(R) v18(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () ([rdx|R|w64] = v17(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:9] #-1 [rdx|R|w64]
gap (v16(-) = [rax|R|tp];) () 
          v14(R) = X64Lea : MRI v16(R) [immediate:8]
gap () (v10 = v14(-);) 
          ArchJmp [immediate:7]
gap () (v10 = v13(-);) 
          ArchJmp [immediate:6]
gap () () 
          v12(R) = X64Lea : MRI v10(R) [immediate:5]
gap () () 
          X64Movq : MR v11(R) v12(R)
gap () () 
          v9(R) = X64Lea : MRI v10(R) [immediate:4]
gap () (v6 = v9(-);) 
          v6(1) = ArchNop v6
gap () () 
          X64MovqCompressTagged : MRI v6(R) [immediate:3] v8(R)
gap () () 
          X64Movsd : MRI v6(R) [immediate:2] v7(R)
gap () (v2 = v6(-);) 
          ArchJmp [immediate:1]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1(R) [immediate:0] v2(R)
gap () () 
          [constant:0] = ArchNop
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
print modrm pairs
1, v2, v1
1, v7, v6
1, v8, v6
1, v109, v112
1, v92, v91
1, v18, v13
1, v14, v16
1, v1, v93
1, v94, v93
1, v119, v118
1, v119, v125
1, v93, v29
1, v89, v91
1, v81, v95
1, v95, v96
1, v71, v114
1, v91, v1
1, v127, v27
1, v106, v112
1, v117, v118
1, v112, v118
1, v118, v28
1, v121, v28
1, v12, v10
1, v97, v96
1, v73, v114
1, v124, v125
1, v9, v10
1, v114, v125
1, v125, v27
assign rcx to v130:0
assign 1 to v130:0
assign rax to v110:1
assign 0 to v110:1
assign rbx to v131:1
assign 3 to v131:1
assign rsi to v132:1
assign 6 to v132:1
assign rcx to v110:2
assign 1 to v110:2
assign rcx to v27:1
assign 1 to v27:1
assign rdi to v127:0
assign 7 to v127:0
assign r8 to v123:1
assign 8 to v123:1
assign r9 to v128:1
assign 9 to v128:1
assign r9 to v126:1
assign 9 to v126:1
assign rdi to v125:0
assign 7 to v125:0
assign r9 to v119:1
assign 9 to v119:1
assign r12 to v114:0
assign 12 to v114:0
assign rdi to v124:0
assign 7 to v124:0
assign rdi to v115:0
assign 7 to v115:0
assign r11 to v28:1
assign 11 to v28:1
assign r14 to v121:0
assign 14 to v121:0
assign r8 to v122:1
assign 8 to v122:1
assign r8 to v120:1
assign 8 to v120:1
assign r8 to v118:0
assign 8 to v118:0
assign r9 to v112:0
assign 9 to v112:0
assign r8 to v117:0
assign 8 to v117:0
assign r8 to v113:0
assign 8 to v113:0
assign r14 to v116:1
assign 14 to v116:1
assign r14 to v99:0
assign 14 to v99:0
assign rax to v111:1
assign 0 to v111:1
assign rax to v98:0
assign 0 to v98:0
assign rdi to v41:1
assign 7 to v41:1
assign rdi to v41:3
assign 7 to v41:3
assign r8 to v32:0
assign 8 to v32:0
assign rax to v33:0
assign 0 to v33:0
assign r14 to v34:0
assign 14 to v34:0
assign r9 to v35:0
assign 9 to v35:0
assign r12 to v96:1
assign 12 to v96:1
assign rdx to v97:1
assign 2 to v97:1
assign r12 to v95:0
assign 12 to v95:0
assign r12 to v81:0
assign 12 to v81:0
assign r15 to v29:1
assign 15 to v29:1
assign rdx to v93:0
assign 2 to v93:0
assign rsi to v94:1
assign 6 to v94:1
assign rdx to v1:0
assign 2 to v1:0
assign rsi to v91:0
assign 6 to v91:0
assign rbx to v68:0
assign 3 to v68:0
blocking v79 pick register rdx
assign rdx to v79:0
assign 2 to v79:0
v1:0 not intersect with v93:0, removed
v1:0 not intersect with v2:0, removed
v1:1 intersect with v2:0, adding
v1:1 intersect with v91:0, adding
blocking v92 pick register rcx
assign rcx to v92:0
assign 1 to v92:0
assign rcx to v27:3
assign 1 to v27:3
assign rsi to v22:0
assign 6 to v22:0
blocking v80 pick register rcx
assign rcx to v80:1
assign 1 to v80:1
assign rbx to v65:0
assign 3 to v65:0
assign rbx to v61:0
assign 3 to v61:0
assign rcx to v63:1
assign 1 to v63:1
assign r12 to v64:1
assign 12 to v64:1
assign rcx to v33:1
assign 1 to v33:1
assign r12 to v61:1
assign 12 to v61:1
assign rdx to v22:1
assign 2 to v22:1
blocking v22 pick register rcx
assign rbx to v61:3
assign 3 to v61:3
assign r15 to v29:3
assign 15 to v29:3
assign r14 to v34:2
assign 14 to v34:2
assign r11 to v28:3
assign 11 to v28:3
assign r9 to v35:2
assign 9 to v35:2
assign r8 to v32:2
assign 8 to v32:2
assign rdi to v41:5
assign 7 to v41:5
assign rax to v33:3
assign 0 to v33:3
assign rsi to v22:4
assign 6 to v22:4
assign rbx to v48:0
assign 3 to v48:0
assign rcx to v43:0
assign 1 to v43:0
assign rcx to v39:0
assign 1 to v39:0
assign rbx to v40:1
assign 3 to v40:1
assign r12 to v42:1
assign 12 to v42:1
assign r12 to v33:4
assign 12 to v33:4
assign rdx to v22:5
assign 2 to v22:5
assign rcx to v39:2
assign 1 to v39:2
assign rsi to v22:7
assign 6 to v22:7
assign rax to v33:6
assign 0 to v33:6
assign rdi to v41:7
assign 7 to v41:7
assign r8 to v32:4
assign 8 to v32:4
assign r9 to v35:4
assign 9 to v35:4
assign r11 to v28:5
assign 11 to v28:5
assign r14 to v34:4
assign 14 to v34:4
assign r15 to v29:5
assign 15 to v29:5
assign rcx to v23:0
assign 1 to v23:0
assign rsi to v21:0
assign 6 to v21:0
assign rcx to v22:3
assign 1 to v22:3
assign rsi to v20:0
assign 6 to v20:0
assign rcx to v11:1
assign 1 to v11:1
assign rdi to v13:0
assign 7 to v13:0
assign r8 to v18:0
assign 8 to v18:0
assign r9 to v19:1
assign 9 to v19:1
assign rdx to v17:1
assign 2 to v17:1
blocking v11 pick register rcx
assign rax to v16:0
assign 0 to v16:0
assign rdi to v14:0
assign 7 to v14:0
assign rcx to v11:4
assign 1 to v11:4
assign rdi to v10:0
assign 7 to v10:0
assign rcx to v12:0
assign 1 to v12:0
assign r8 to v11:3
assign 8 to v11:3
assign rcx to v9:0
assign 1 to v9:0
assign rcx to v6:0
assign 1 to v6:0
assign rdi to v8:1
assign 7 to v8:1
assign rsi to v2:0
assign 6 to v2:0
assign rcx to v1:2
assign 1 to v1:2
assign rdi to v3:0
assign 7 to v3:0
assign r8 to v4:0
assign 8 to v4:0
assign rax to v0:1
assign 0 to v0:1
spill count : 23
add v127->v27
add v125->v27
add v119->v125
add v114->v125
add v124->v125
add v73->v114
add v121->v28
add v118->v28
add v119->v118
add v112->v118
add v117->v118
add v106->v112
add v71->v114
add v109->v112
add v97->v96
add v95->v96
add v81->v95
add v93->v29
add v94->v93
add v1->v93
add v91->v1
add v92->v91
add v89->v91
add v18->v13
add v14->v16
add v12->v10
add v9->v10
add v8->v6
add v7->v6
add v2->v1
gap () () 
          [rsi|R|t] = ArchNop
gap (v29(-) = [rsi|R|t];) () 
          [stack:-3|t] = ArchNop
gap (v28(-) = [stack:-3|t];) () 
          [stack:-1|t] = ArchNop
gap (v26(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v27(-) = [stack:-2|t];) () 
          [rdi|R|t] = ArchNop
gap (v25(-) = [rdi|R|t];) () 
          [constant:110] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:118] [immediate:119]
gap () () 
          [constant:132] = ArchNop
gap () () 
          [constant:131] = ArchNop
gap () () 
          v130(R) = ArchStackCheckOffset
gap () () 
          X64Push v130(-)
gap () ([rbx|R|w64] = v131(-); [rax|R|w64] = v110(-); [rsi|R|t] = v132(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:117] #-1 #21 v25(S) v26(S) v27(S) v28(S) v29(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:116]
gap () () 
          ArchJmp [immediate:115]
gap () () 
          [constant:41] = ArchNop
gap () () 
          [constant:123] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v27 #1 #20 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v127(R) = X64Movl : MRI v27(R) [immediate:114]
gap () () 
          X64Cmp32 && branch if equal v127(R) v123 [immediate:112] [immediate:113]
gap () () 
          [constant:128] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v128(R) v127 [immediate:110] [immediate:111]
gap () () 
          [constant:126] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v126(R) v127 #19 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:109]
gap () () 
          ArchJmp [immediate:108]
gap () () 
          ArchJmp [immediate:107]
gap () () 
          [constant:119] = ArchNop
gap () () 
          v125(R) = X64MovqDecompressTaggedPointer : MRI v27(R) [immediate:106]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v125(R) [immediate:105] v119(R) #18 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v114(R) = X64MovqDecompressTaggedPointer : MRI v125(R) [immediate:104]
gap () () 
          v124(R) = X64MovqDecompressTaggedSigned : MRI v125(R) [immediate:103]
gap () (v115(R) = v124(-);) 
          v115(1) = X64Sar32 v115(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #0 #17 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v73(R) = X64Movsd : MRI v114(R) [immediate:102]
gap () () 
          X64Test32 && deoptimize if equal v28 #1 #16 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v121(R) = X64Movl : MRI v28(R) [immediate:101]
gap () () 
          X64Cmp32 && branch if equal v123(R) v121 [immediate:99] [immediate:100]
gap () () 
          [constant:122] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v122(R) v121 [immediate:97] [immediate:98]
gap () () 
          [constant:120] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v120(R) v121 #15 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:96]
gap () () 
          ArchJmp [immediate:95]
gap () () 
          ArchJmp [immediate:94]
gap () () 
          v118(R) = X64MovqDecompressTaggedPointer : MRI v28(R) [immediate:93]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v118(R) [immediate:92] v119(R) #14 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v112(R) = X64MovqDecompressTaggedPointer : MRI v118(R) [immediate:91]
gap () () 
          v117(R) = X64MovqDecompressTaggedSigned : MRI v118(R) [immediate:90]
gap () (v113(R) = v117(-);) 
          v113(1) = X64Sar32 v113(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #0 #13 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v106(R) = X64Movsd : MRI v112(R) [immediate:89]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v106(R) v73 [immediate:87] [immediate:88]
gap () () 
          [constant:116] = ArchNop
gap () (v99 = v116(-);) 
          ArchJmp [immediate:86]
gap () (v99 = v110(-);) 
          ArchJmp [immediate:85]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #1 #12 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v71(R) = X64Movsd : MRI v114(R) [immediate:84]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #1 #11 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v109(R) = X64Movsd : MRI v112(R) [immediate:83]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v109(R) v71 [immediate:81] [immediate:82]
gap () () 
          [constant:111] = ArchNop
gap () (v98 = v111(-);) 
          ArchJmp [immediate:80]
gap () (v98 = v110(-);) 
          ArchJmp [immediate:79]
gap () () 
          [constant:87] = ArchNop
gap () () 
          v108(R) = AVXFloat64Sub v109(R) v71
gap () () 
          v100(R) = AVXFloat64Abs v108
gap () () 
          v105(R) = AVXFloat64Sub v106(R) v73
gap () () 
          v101(R) = AVXFloat64Abs v105
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v101(R) v100 [immediate:77] [immediate:78]
gap () () 
          v103(R) = AVXFloat64Mul v100(R) v87
gap () (v35 = v98(-); v33 = v41(-); v34 = v41(-); v32 = v99(-); v38 = v101(-); v77 = v103(-); v36 = v100(-);) 
          ArchJmp [immediate:76]
gap () () 
          v102(R) = AVXFloat64Mul v101(R) v87
gap () (v35 = v41(-); v33 = v98(-); v34 = v99(-); v32 = v41(-); v38 = v100(-); v77 = v102(-); v36 = v101(-);) 
          ArchJmp [immediate:75]
gap () () 
          [constant:96] = ArchNop
gap () () 
          [constant:97] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v96(R) [immediate:74] v97(R) #10 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v95(R) = X64MovqDecompressTaggedPointer : MRI v96(R) [immediate:73]
gap () () 
          v81(R) = X64Movl : MRI v95(R) [immediate:72]
gap () () 
          v93(R) = X64MovqDecompressAnyTagged : MRI v29(R) [immediate:71]
gap () () 
          X64Test32 && deoptimize if equal v93 #1 #9 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          [constant:94] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v93(R) [immediate:70] v94(R) #8 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v1(R) = X64MovqDecompressTaggedPointer : MRI v93(R) [immediate:69]
gap () () 
          v91(R) = X64MovqDecompressAnyTagged : MRI v1(R) [immediate:68]
gap () (v68(R) = v91(-);) 
          v68(1) = X64Sar32 v68(R) #1
gap () () 
          v79(R) = X64Test32 && set if equal v91 #1
gap () () 
          X64Cmp32 && branch if not equal v79 #0 [immediate:66] [immediate:67]
gap () () 
          v92(R) = X64MovqDecompressTaggedPointer : MRI v91(R) [immediate:65]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v92(R) [immediate:63] [immediate:64]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v92(R) [immediate:62] #67 #7 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:61]
gap () () 
          ArchJmp [immediate:60]
gap () () 
          v89(R) = X64Movsd : MRI v91(R) [immediate:59]
gap () (v88 = v89(-);) 
          ArchJmp [immediate:58]
gap () () 
          v90(R) = SSEInt32ToFloat64 v68
gap () (v88 = v90(-);) 
          ArchJmp [immediate:57]
gap () () 
          v85(R) = AVXFloat64Add v88(R) v36
gap () () 
          v82(R) = SSEFloat64Round v85(R)
gap () () 
          v86(R) = AVXFloat64Sub v82(R) v87
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v85(R) v86 [immediate:55] [immediate:56]
gap () () 
          [constant:84] = ArchNop
gap () () 
          v83(R) = AVXFloat64Sub v82(R) v84
gap () (v7 = v83(-);) 
          ArchJmp [immediate:54]
gap () (v7 = v82(-);) 
          ArchJmp [immediate:53]
gap () () 
          v22(R) = SSEFloat64ToInt32 v7
gap () () 
          [constant:80] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v80(R) v81 #6 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v78(R) = SSEInt32ToFloat64 v22
gap () () 
          X64Cmp32 && deoptimize if equal v79 #0 #5 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v78(R) v7 #4 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          X64Cmp32 && branch if signed less than v68(R) v22 [immediate:51] [immediate:52]
gap () () 
          ArchJmp [immediate:50]
gap () () 
          v69(R) = AVXFloat64Add v77(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v69(R) v36 [immediate:48] [immediate:49]
gap () (v59 = v69(-); v67 = v71(-); v66 = v73(-);) 
          ArchJmp [immediate:47]
gap () () 
          v76(R) = SSEInt32ToFloat64 v33
gap () () 
          v75(R) = SSEInt32ToFloat64 v32
gap () () 
          v70(R) = AVXFloat64Sub v69(R) v36
gap () () 
          v72(R) = AVXFloat64Add v76(R) v71
gap () () 
          v74(R) = AVXFloat64Add v75(R) v73
gap () (v59 = v70(-); v67 = v72(-); v66 = v74(-);) 
          ArchJmp [immediate:46]
gap () () 
          v46(R) = SSEInt32ToFloat64 v35
gap () () 
          v44(R) = SSEInt32ToFloat64 v34
gap () (v65(R) = v68(-);) 
          v65(1) = X64Add32 && deoptimize if overflow v65(R) #1 #3 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v58(R) = AVXFloat64Add v67(R) v46
gap () () 
          v60(R) = AVXFloat64Add v66(R) v44
gap () (v61 = v65(-);) 
          v61(1) = ArchNop v61
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:44] [immediate:45]
gap () () 
          [constant:64] = ArchNop
gap () () 
          [constant:63] = ArchNop
gap () ([rbx|R|w64] = v63(-); [rax|R|w64] = v41(-); [rsi|R|t] = v64(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:43] #-1 #2 v25(S) v26(S) v27(S) v28(S) v29(S) v60(S) v58(S) v32(S) v33(S) v34(S) v35(S) v36(S) v59(S) v38(S) v7(S) v61(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:42]
gap () () 
          ArchJmp [immediate:41]
gap () (v50 = v58(-); v51 = v59(-); v49 = v60(-); v48 = v61(-);) 
          ArchJmp [immediate:40]
gap () () 
          X64Cmp32 && branch if signed less than v48(R) v22 [immediate:38] [immediate:39]
gap () () 
          v53(R) = AVXFloat64Add v51(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v53(R) v36 [immediate:36] [immediate:37]
gap () (v47 = v50(-); v37 = v53(-); v45 = v49(-);) 
          ArchJmp [immediate:35]
gap () () 
          v57(R) = SSEInt32ToFloat64 v33
gap () () 
          v52(R) = AVXFloat64Add v57(R) v50
gap () () 
          v54(R) = AVXFloat64Sub v53(R) v36
gap () () 
          v56(R) = SSEInt32ToFloat64 v32
gap () () 
          v55(R) = AVXFloat64Add v56(R) v49
gap () (v47 = v52(-); v37 = v54(-); v45 = v55(-);) 
          ArchJmp [immediate:34]
gap () (v43(R) = v48(-);) 
          v43(1) = X64Add32 && deoptimize if overflow v43(R) #1 #1 v25(S) v26(-) v27(-) v28(-) v29(S) v49(-) v50(-) v32(-) v33(-) v34(-) v35(-) v36(-) v51(-) v38(-) v7(-) v48(-) v7(-)
gap () () 
          v31(R) = AVXFloat64Add v46(R) v47
gap () () 
          v30(R) = AVXFloat64Add v44(R) v45
gap () (v39 = v43(-);) 
          v39(1) = ArchNop v39
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:32] [immediate:33]
gap () () 
          [constant:42] = ArchNop
gap () () 
          [constant:40] = ArchNop
gap () ([rbx|R|w64] = v40(-); [rax|R|w64] = v41(-); [rsi|R|t] = v42(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:31] #-1 #0 v25(S) v26(S) v27(S) v28(S) v29(S) v30(S) v31(S) v32(S) v33(S) v34(S) v35(S) v36(S) v37(S) v38(S) v7(S) v39(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:30]
gap () () 
          ArchJmp [immediate:29]
gap () (v50 = v31(-); v51 = v37(-); v49 = v30(-); v48 = v39(-);) 
          ArchJmp [immediate:28]
gap () () 
          ArchJmp [immediate:27]
gap () () 
          X64Cmp32 && branch if equal v22 #0 [immediate:25] [immediate:26]
gap () () 
          ArchJmp [immediate:24]
gap () () 
          v23(R) = SSEFloat64ExtractHighWord32 v7
gap () () 
          X64Cmp32 && branch if signed less than v23 #0 [immediate:22] [immediate:23]
gap () () 
          ArchJmp [immediate:21]
gap () (v21(R) = v22(-);) 
          v21(1) = X64Add32 && branch if overflow v21(R) v22(R) [immediate:17] [immediate:18] [immediate:19] [immediate:20]
gap () (v20 = v21(-);) 
          v20(1) = ArchNop v20
gap () (v2 = v20(-);) 
          ArchJmp [immediate:16]
gap () () 
          ArchJmp [immediate:15]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          [constant:17] = ArchNop
gap () () 
          [constant:11] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () () 
          v13(R) = X64Movq : MR v11(R)
gap () () 
          [constant:19] = ArchNop
gap () () 
          v18(R) = X64Lea : MRI v13(R) [immediate:13]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v19(R) v18(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () ([rdx|R|w64] = v17(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:9] #-1 [rdx|R|w64]
gap (v16(-) = [rax|R|tp];) () 
          v14(R) = X64Lea : MRI v16(R) [immediate:8]
gap () (v10 = v14(-);) 
          ArchJmp [immediate:7]
gap () (v10 = v13(-);) 
          ArchJmp [immediate:6]
gap () () 
          v12(R) = X64Lea : MRI v10(R) [immediate:5]
gap () () 
          X64Movq : MR v11(R) v12(R)
gap () () 
          v9(R) = X64Lea : MRI v10(R) [immediate:4]
gap () (v6 = v9(-);) 
          v6(1) = ArchNop v6
gap () () 
          X64MovqCompressTagged : MRI v6(R) [immediate:3] v8(R)
gap () () 
          X64Movsd : MRI v6(R) [immediate:2] v7(R)
gap () (v2 = v6(-);) 
          ArchJmp [immediate:1]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1(R) [immediate:0] v2(R)
gap () () 
          [constant:0] = ArchNop
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
print modrm pairs
1, v2, v1
1, v7, v6
1, v8, v6
1, v109, v112
1, v92, v91
1, v18, v13
1, v14, v16
1, v1, v93
1, v94, v93
1, v119, v118
1, v119, v125
1, v93, v29
1, v89, v91
1, v81, v95
1, v95, v96
1, v71, v114
1, v91, v1
1, v127, v27
1, v106, v112
1, v117, v118
1, v112, v118
1, v118, v28
1, v121, v28
1, v12, v10
1, v97, v96
1, v73, v114
1, v124, v125
1, v9, v10
1, v114, v125
1, v125, v27
assign xmm0 to v73:0
assign 0 to v73:0
assign xmm1 to v106:0
assign 1 to v106:0
assign xmm2 to v71:0
assign 2 to v71:0
assign xmm4 to v109:0
assign 4 to v109:0
assign xmm3 to v108:0
assign 3 to v108:0
assign xmm4 to v100:0
assign 4 to v100:0
assign xmm5 to v107:0
assign 5 to v107:0
assign xmm1 to v105:0
assign 1 to v105:0
assign xmm3 to v101:0
assign 3 to v101:0
assign xmm5 to v104:0
assign 5 to v104:0
assign xmm1 to v87:1
assign 1 to v87:1
assign xmm5 to v103:0
assign 5 to v103:0
assign xmm1 to v87:2
assign 1 to v87:2
assign xmm5 to v102:0
assign 5 to v102:0
assign xmm3 to v36:0
assign 3 to v36:0
assign xmm4 to v38:0
assign 4 to v38:0
assign xmm5 to v77:0
assign 5 to v77:0
assign xmm6 to v89:0
assign 6 to v89:0
assign xmm6 to v90:0
assign 6 to v90:0
assign xmm6 to v88:0
assign 6 to v88:0
assign xmm6 to v85:0
assign 6 to v85:0
assign xmm7 to v82:0
assign 7 to v82:0
assign xmm1 to v86:0
assign 1 to v86:0
assign xmm1 to v84:1
assign 1 to v84:1
assign xmm7 to v83:0
assign 7 to v83:0
assign xmm7 to v7:0
assign 7 to v7:0
assign xmm1 to v78:0
assign 1 to v78:0
assign xmm1 to v69:0
assign 1 to v69:0
assign xmm5 to v76:0
assign 5 to v76:0
assign xmm6 to v75:0
assign 6 to v75:0
assign xmm1 to v70:0
assign 1 to v70:0
assign xmm2 to v72:0
assign 2 to v72:0
assign xmm0 to v74:0
assign 0 to v74:0
assign xmm1 to v59:0
assign 1 to v59:0
assign xmm0 to v66:0
assign 0 to v66:0
assign xmm2 to v67:0
assign 2 to v67:0
assign xmm5 to v46:0
assign 5 to v46:0
assign xmm6 to v44:0
assign 6 to v44:0
assign xmm2 to v58:0
assign 2 to v58:0
assign xmm0 to v60:0
assign 0 to v60:0
blocking v46 pick register xmm5
blocking v44 pick register xmm6
blocking v7 pick register xmm7
assign xmm0 to v60:2
assign 0 to v60:2
assign xmm2 to v58:2
assign 2 to v58:2
assign xmm6 to v44:3
assign 6 to v44:3
assign xmm5 to v46:3
assign 5 to v46:3
assign xmm1 to v59:2
assign 1 to v59:2
assign xmm4 to v38:2
assign 4 to v38:2
assign xmm3 to v36:2
assign 3 to v36:2
assign xmm7 to v7:3
assign 7 to v7:3
assign xmm5 to v46:2
assign 5 to v46:2
assign xmm6 to v44:2
assign 6 to v44:2
assign xmm0 to v49:0
assign 0 to v49:0
assign xmm2 to v50:0
assign 2 to v50:0
assign xmm1 to v51:0
assign 1 to v51:0
assign xmm8 to v53:0
assign 8 to v53:0
assign xmm9 to v57:0
assign 9 to v57:0
assign xmm9 to v52:0
assign 9 to v52:0
assign xmm8 to v54:0
assign 8 to v54:0
assign xmm10 to v56:0
assign 10 to v56:0
assign xmm10 to v55:0
assign 10 to v55:0
assign xmm8 to v37:0
assign 8 to v37:0
assign xmm9 to v45:0
assign 9 to v45:0
assign xmm10 to v47:0
assign 10 to v47:0
assign xmm2 to v31:0
assign 2 to v31:0
assign xmm0 to v30:0
assign 0 to v30:0
assign xmm0 to v30:2
assign 0 to v30:2
assign xmm2 to v31:2
assign 2 to v31:2
assign xmm8 to v37:2
assign 8 to v37:2
assign xmm6 to v44:5
assign 6 to v44:5
assign xmm5 to v46:5
assign 5 to v46:5
assign xmm7 to v7:5
assign 7 to v7:5
assign xmm3 to v36:4
assign 3 to v36:4
assign xmm4 to v38:4
assign 4 to v38:4
assign xmm7 to v7:7
assign 7 to v7:7
assign xmm7 to v7:2
assign 7 to v7:2
spill count : 17
--- Raw source ---
(From, To) {
      var x1 = From.V[0];
      var x2 = To.V[0];
      var y1 = From.V[1];
      var y2 = To.V[1];
      var dx = Math.abs(x2 - x1);
      var dy = Math.abs(y2 - y1);
      var x = x1;
      var y = y1;
      var IncX1, IncY1;
      var IncX2, IncY2;  
      var Den;
      var Num;
      var NumAdd;
      var NumPix;

      if (x2 >= x1) {  IncX1 = 1; IncX2 = 1;  }
      else { IncX1 = -1; IncX2 = -1; }
      if (y2 >= y1)  {  IncY1 = 1; IncY2 = 1; }
      else { IncY1 = -1; IncY2 = -1; }
      if (dx >= dy) {
        IncX1 = 0;
        IncY2 = 0;
        Den = dx;
        Num = dx / 2;
        NumAdd = dy;
        NumPix = dx;
      }
      else {
        IncX2 = 0;
        IncY1 = 0;
        Den = dy;
        Num = dy / 2;
        NumAdd = dx;
        NumPix = dy;
      }

      NumPix = Math.round(Q.LastPx + NumPix);

      var i = Q.LastPx;
      for (; i < NumPix; i++) {
        Num += NumAdd;
        if (Num >= Den) {
          Num -= Den;
          x += IncX1;
          y += IncY1;
        }
        x += IncX2;
        y += IncY2;
      }
      Q.LastPx = NumPix;
    }


--- Optimized code ---
optimization_id = 9
source_position = 647
kind = TURBOFAN
name = DrawLine
stack_slots = 22
compiler = turbofan
address = 0x19db00089601

Instructions (size = 1980)
0x19db00089640     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db00089647     7  483bd9         REX.W cmpq rbx,rcx
0x19db0008964a     a  7418           jz 0x19db00089664  <+0x24>
0x19db0008964c     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db00089656    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db00089660    20  41ffd2         call r10
0x19db00089663    23  cc             int3l
0x19db00089664    24  8b59d0         movl rbx,[rcx-0x30]
0x19db00089667    27  4903dd         REX.W addq rbx,r13
0x19db0008966a    2a  f6430701       testb [rbx+0x7],0x1
0x19db0008966e    2e  740d           jz 0x19db0008967d  <+0x3d>
0x19db00089670    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db0008967a    3a  41ffe2         jmp r10
0x19db0008967d    3d  55             push rbp
0x19db0008967e    3e  4889e5         REX.W movq rbp,rsp
0x19db00089681    41  56             push rsi
0x19db00089682    42  57             push rdi
0x19db00089683    43  50             push rax
0x19db00089684    44  4881ec88000000 REX.W subq rsp,0x88
0x19db0008968b    4b  488975c0       REX.W movq [rbp-0x40],rsi
0x19db0008968f    4f  48897dc8       REX.W movq [rbp-0x38],rdi
0x19db00089693    53  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00089697    57  0f8614040000   jna 0x19db00089ab1  <+0x471>
0x19db0008969d    5d  488b4d18       REX.W movq rcx,[rbp+0x18]
0x19db000896a1    61  f6c101         testb rcx,0x1
0x19db000896a4    64  0f84b5060000   jz 0x19db00089d5f  <+0x71f>
0x19db000896aa    6a  8b79ff         movl rdi,[rcx-0x1]
0x19db000896ad    6d  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db000896b7    77  4c3bd7         REX.W cmpq r10,rdi
0x19db000896ba    7a  7715           ja 0x19db000896d1  <+0x91>
0x19db000896bc    7c  48ba0200000000000000 REX.W movq rdx,0x2
0x19db000896c6    86  4c8b158bffffff REX.W movq r10,[rip+0xffffff8b]
0x19db000896cd    8d  41ffd2         call r10
0x19db000896d0    90  cc             int3l
0x19db000896d1    91  41b8a5db3008   movl r8,0x830dba5       ;; (compressed) object: 0x19db0830dba5 <Map(HOLEY_ELEMENTS)>
0x19db000896d7    97  413bf8         cmpl rdi,r8
0x19db000896da    9a  0f841e000000   jz 0x19db000896fe  <+0xbe>
0x19db000896e0    a0  41b95ddd3008   movl r9,0x830dd5d       ;; (compressed) object: 0x19db0830dd5d <Map(HOLEY_ELEMENTS)>
0x19db000896e6    a6  443bcf         cmpl r9,rdi
0x19db000896e9    a9  0f840f000000   jz 0x19db000896fe  <+0xbe>
0x19db000896ef    af  41b94dde3008   movl r9,0x830de4d       ;; (compressed) object: 0x19db0830de4d <Map(HOLEY_ELEMENTS)>
0x19db000896f5    b5  443bcf         cmpl r9,rdi
0x19db000896f8    b8  0f8568060000   jnz 0x19db00089d66  <+0x726>
0x19db000896fe    be  8b790b         movl rdi,[rcx+0xb]
0x19db00089701    c1  4903fd         REX.W addq rdi,r13
0x19db00089704    c4  41b9559f3008   movl r9,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008970a    ca  44394fff       cmpl [rdi-0x1],r9
0x19db0008970e    ce  0f8559060000   jnz 0x19db00089d6d  <+0x72d>
0x19db00089714    d4  448b6707       movl r12,[rdi+0x7]
0x19db00089718    d8  4d03e5         REX.W addq r12,r13
0x19db0008971b    db  8b7f0b         movl rdi,[rdi+0xb]
0x19db0008971e    de  d1ff           sarl rdi, 1
0x19db00089720    e0  83ff00         cmpl rdi,0x0
0x19db00089723    e3  0f864b060000   jna 0x19db00089d74  <+0x734>
0x19db00089729    e9  c4c17b10442407 vmovsd xmm0,[r12+0x7]
0x19db00089730    f0  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00089734    f4  41f6c301       testb r11,0x1
0x19db00089738    f8  0f843d060000   jz 0x19db00089d7b  <+0x73b>
0x19db0008973e    fe  458b73ff       movl r14,[r11-0x1]
0x19db00089742   102  4c8b1566ffffff REX.W movq r10,[rip+0xffffff66]
0x19db00089749   109  4d3bd6         REX.W cmpq r10,r14
0x19db0008974c   10c  7712           ja 0x19db00089760  <+0x120>
0x19db0008974e   10e  488b1569ffffff REX.W movq rdx,[rip+0xffffff69]
0x19db00089755   115  4c8b15fcfeffff REX.W movq r10,[rip+0xfffffefc]
0x19db0008975c   11c  41ffd2         call r10
0x19db0008975f   11f  cc             int3l
0x19db00089760   120  453bc6         cmpl r8,r14
0x19db00089763   123  0f841e000000   jz 0x19db00089787  <+0x147>
0x19db00089769   129  41b85ddd3008   movl r8,0x830dd5d       ;; (compressed) object: 0x19db0830dd5d <Map(HOLEY_ELEMENTS)>
0x19db0008976f   12f  453bc6         cmpl r8,r14
0x19db00089772   132  0f840f000000   jz 0x19db00089787  <+0x147>
0x19db00089778   138  41b84dde3008   movl r8,0x830de4d       ;; (compressed) object: 0x19db0830de4d <Map(HOLEY_ELEMENTS)>
0x19db0008977e   13e  453bc6         cmpl r8,r14
0x19db00089781   141  0f85fb050000   jnz 0x19db00089d82  <+0x742>
0x19db00089787   147  458b430b       movl r8,[r11+0xb]
0x19db0008978b   14b  4d03c5         REX.W addq r8,r13
0x19db0008978e   14e  453948ff       cmpl [r8-0x1],r9
0x19db00089792   152  0f85f1050000   jnz 0x19db00089d89  <+0x749>
0x19db00089798   158  458b4807       movl r9,[r8+0x7]
0x19db0008979c   15c  4d03cd         REX.W addq r9,r13
0x19db0008979f   15f  458b400b       movl r8,[r8+0xb]
0x19db000897a3   163  41d1f8         sarl r8, 1
0x19db000897a6   166  4183f800       cmpl r8,0x0
0x19db000897aa   16a  0f86e0050000   jna 0x19db00089d90  <+0x750>
0x19db000897b0   170  c4c17b104907   vmovsd xmm1,[r9+0x7]
0x19db000897b6   176  c5f92ec8       vucomisd xmm1,xmm0
0x19db000897ba   17a  0f830b000000   jnc 0x19db000897cb  <+0x18b>
0x19db000897c0   180  41beffffffff   movl r14,0xffffffff
0x19db000897c6   186  e906000000     jmp 0x19db000897d1  <+0x191>
0x19db000897cb   18b  41be01000000   movl r14,0x1
0x19db000897d1   191  83ff01         cmpl rdi,0x1
0x19db000897d4   194  0f86bd050000   jna 0x19db00089d97  <+0x757>
0x19db000897da   19a  c4c17b1054240f vmovsd xmm2,[r12+0xf]
0x19db000897e1   1a1  4183f801       cmpl r8,0x1
0x19db000897e5   1a5  0f86b3050000   jna 0x19db00089d9e  <+0x75e>
0x19db000897eb   1ab  c4c17b10610f   vmovsd xmm4,[r9+0xf]
0x19db000897f1   1b1  c5f92ee2       vucomisd xmm4,xmm2
0x19db000897f5   1b5  0f830a000000   jnc 0x19db00089805  <+0x1c5>
0x19db000897fb   1bb  b8ffffffff     movl rax,0xffffffff
0x19db00089800   1c0  e905000000     jmp 0x19db0008980a  <+0x1ca>
0x19db00089805   1c5  b801000000     movl rax,0x1
0x19db0008980a   1ca  c5db5cda       vsubsd xmm3,xmm4,xmm2
0x19db0008980e   1ce  c5d176ed       vpcmpeqd xmm5,xmm5,xmm5
0x19db00089812   1d2  c5d173d501     vpsrlq xmm5,xmm5,1
0x19db00089817   1d7  c5d154e3       vandpd xmm4,xmm5,xmm3
0x19db0008981b   1db  c5f35cc8       vsubsd xmm1,xmm1,xmm0
0x19db0008981f   1df  c5d176ed       vpcmpeqd xmm5,xmm5,xmm5
0x19db00089823   1e3  c5d173d501     vpsrlq xmm5,xmm5,1
0x19db00089828   1e8  c5d154d9       vandpd xmm3,xmm5,xmm1
0x19db0008982c   1ec  c5f92edc       vucomisd xmm3,xmm4
0x19db00089830   1f0  0f832f000000   jnc 0x19db00089865  <+0x225>
0x19db00089836   1f6  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008983a   1fa  c5f173f137     vpsllq xmm1,xmm1,55
0x19db0008983f   1ff  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db00089844   204  c5db59e9       vmulsd xmm5,xmm4,xmm1
0x19db00089848   208  c57928fb       vmovapd xmm15,xmm3
0x19db0008984c   20c  c5f928dc       vmovapd xmm3,xmm4
0x19db00089850   210  c4c17928e7     vmovapd xmm4,xmm15
0x19db00089855   215  4c8bc8         REX.W movq r9,rax
0x19db00089858   218  33c0           xorl rax,rax
0x19db0008985a   21a  4d8bc6         REX.W movq r8,r14
0x19db0008985d   21d  4c8bf0         REX.W movq r14,rax
0x19db00089860   220  e918000000     jmp 0x19db0008987d  <+0x23d>
0x19db00089865   225  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db00089869   229  c5f173f137     vpsllq xmm1,xmm1,55
0x19db0008986e   22e  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db00089873   233  c5e359e9       vmulsd xmm5,xmm3,xmm1
0x19db00089877   237  4533c0         xorl r8,r8
0x19db0008987a   23a  4d8bc8         REX.W movq r9,r8
0x19db0008987d   23d  ba39692e08     movl rdx,0x82e6939      ;; (compressed) object: 0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)>
0x19db00089882   242  49bc09652e08db190000 REX.W movq r12,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db0008988c   24c  413954240b     cmpl [r12+0xb],rdx
0x19db00089891   251  0f850e050000   jnz 0x19db00089da5  <+0x765>
0x19db00089897   257  458b642403     movl r12,[r12+0x3]
0x19db0008989c   25c  4d03e5         REX.W addq r12,r13
0x19db0008989f   25f  458b642463     movl r12,[r12+0x63]
0x19db000898a4   264  4c8b1504feffff REX.W movq r10,[rip+0xfffffe04]
0x19db000898ab   26b  4d39e2         REX.W cmpq r10,r12
0x19db000898ae   26e  7712           ja 0x19db000898c2  <+0x282>
0x19db000898b0   270  488b1507feffff REX.W movq rdx,[rip+0xfffffe07]
0x19db000898b7   277  4c8b159afdffff REX.W movq r10,[rip+0xfffffd9a]
0x19db000898be   27e  41ffd2         call r10
0x19db000898c1   281  cc             int3l
0x19db000898c2   282  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db000898c6   286  418b570f       movl rdx,[r15+0xf]
0x19db000898ca   28a  4903d5         REX.W addq rdx,r13
0x19db000898cd   28d  f6c201         testb rdx,0x1
0x19db000898d0   290  0f84d6040000   jz 0x19db00089dac  <+0x76c>
0x19db000898d6   296  be6ddc3008     movl rsi,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db000898db   29b  3972ff         cmpl [rdx-0x1],rsi
0x19db000898de   29e  0f85cf040000   jnz 0x19db00089db3  <+0x773>
0x19db000898e4   2a4  8b5203         movl rdx,[rdx+0x3]
0x19db000898e7   2a7  4903d5         REX.W addq rdx,r13
0x19db000898ea   2aa  8b7217         movl rsi,[rdx+0x17]
0x19db000898ed   2ad  4903f5         REX.W addq rsi,r13
0x19db000898f0   2b0  488bde         REX.W movq rbx,rsi
0x19db000898f3   2b3  d1fb           sarl rbx, 1
0x19db000898f5   2b5  488955e0       REX.W movq [rbp-0x20],rdx
0x19db000898f9   2b9  40f6c601       testb rsi,0x1
0x19db000898fd   2bd  0f94c2         setzl dl
0x19db00089900   2c0  0fb6d2         movzxbl rdx,rdx
0x19db00089903   2c3  33ff           xorl rdi,rdi
0x19db00089905   2c5  83fa00         cmpl rdx,0x0
0x19db00089908   2c8  0f852c000000   jnz 0x19db0008993a  <+0x2fa>
0x19db0008990e   2ce  8b4eff         movl rcx,[rsi-0x1]
0x19db00089911   2d1  4903cd         REX.W addq rcx,r13
0x19db00089914   2d4  41398d30010000 cmpl [r13+0x130] (root (heap_number_map)),rcx
0x19db0008991b   2db  0f840b000000   jz 0x19db0008992c  <+0x2ec>
0x19db00089921   2e1  6683790743     cmpw [rcx+0x7],0x43
0x19db00089926   2e6  0f858e040000   jnz 0x19db00089dba  <+0x77a>
0x19db0008992c   2ec  c5fb107603     vmovsd xmm6,[rsi+0x3]
0x19db00089931   2f1  488b4d18       REX.W movq rcx,[rbp+0x18]
0x19db00089935   2f5  e904000000     jmp 0x19db0008993e  <+0x2fe>
0x19db0008993a   2fa  c5832af3       vcvtlsi2sd xmm6,xmm15,rbx
0x19db0008993e   2fe  c5cb58f3       vaddsd xmm6,xmm6,xmm3
0x19db00089942   302  c4e3410bfe0a   vroundsd xmm7,xmm7,xmm6,0xa
0x19db00089948   308  c5c35cc9       vsubsd xmm1,xmm7,xmm1
0x19db0008994c   30c  c5f92ef1       vucomisd xmm6,xmm1
0x19db00089950   310  0f8312000000   jnc 0x19db00089968  <+0x328>
0x19db00089956   316  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008995a   31a  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0008995f   31f  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db00089964   324  c5c35cf9       vsubsd xmm7,xmm7,xmm1
0x19db00089968   328  c5fb2cf7       vcvttsd2si rsi,xmm7
0x19db0008996c   32c  b959682e08     movl rcx,0x82e6859      ;; (compressed) object: 0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)>
0x19db00089971   331  4439e1         cmpl rcx,r12
0x19db00089974   334  0f8547040000   jnz 0x19db00089dc1  <+0x781>
0x19db0008997a   33a  c5832ace       vcvtlsi2sd xmm1,xmm15,rsi
0x19db0008997e   33e  83fa00         cmpl rdx,0x0
0x19db00089981   341  0f8441040000   jz 0x19db00089dc8  <+0x788>
0x19db00089987   347  c5f92ecf       vucomisd xmm1,xmm7
0x19db0008998b   34b  0f8a3e040000   jpe 0x19db00089dcf  <+0x78f>
0x19db00089991   351  0f8538040000   jnz 0x19db00089dcf  <+0x78f>
0x19db00089997   357  3bde           cmpl rbx,rsi
0x19db00089999   359  0f8dc1000000   jge 0x19db00089a60  <+0x420>
0x19db0008999f   35f  c5d358cc       vaddsd xmm1,xmm5,xmm4
0x19db000899a3   363  c5f92ecb       vucomisd xmm1,xmm3
0x19db000899a7   367  0f8215000000   jc 0x19db000899c2  <+0x382>
0x19db000899ad   36d  c5832ae8       vcvtlsi2sd xmm5,xmm15,rax
0x19db000899b1   371  c4c1032af0     vcvtlsi2sd xmm6,xmm15,r8
0x19db000899b6   376  c5f35ccb       vsubsd xmm1,xmm1,xmm3
0x19db000899ba   37a  c5d358d2       vaddsd xmm2,xmm5,xmm2
0x19db000899be   37e  c5cb58c0       vaddsd xmm0,xmm6,xmm0
0x19db000899c2   382  c4c1032ae9     vcvtlsi2sd xmm5,xmm15,r9
0x19db000899c7   387  c4c1032af6     vcvtlsi2sd xmm6,xmm15,r14
0x19db000899cc   38c  83c301         addl rbx,0x1
0x19db000899cf   38f  0f8001040000   jo 0x19db00089dd6  <+0x796>
0x19db000899d5   395  c5eb58d5       vaddsd xmm2,xmm2,xmm5
0x19db000899d9   399  c5fb58c6       vaddsd xmm0,xmm0,xmm6
0x19db000899dd   39d  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db000899e1   3a1  0f8711000000   ja 0x19db000899f8  <+0x3b8>
0x19db000899e7   3a7  e9fe000000     jmp 0x19db00089aea  <+0x4aa>
0x19db000899ec   3ac  0f1f4000       nop
0x19db000899f0   3b0  488bd9         REX.W movq rbx,rcx
0x19db000899f3   3b3  c4c17928c8     vmovapd xmm1,xmm8
0x19db000899f8   3b8  3bde           cmpl rbx,rsi
0x19db000899fa   3ba  0f8d60000000   jge 0x19db00089a60  <+0x420>
0x19db00089a00   3c0  c57358c4       vaddsd xmm8,xmm1,xmm4
0x19db00089a04   3c4  c5792ec3       vucomisd xmm8,xmm3
0x19db00089a08   3c8  0f830d000000   jnc 0x19db00089a1b  <+0x3db>
0x19db00089a0e   3ce  c57928d2       vmovapd xmm10,xmm2
0x19db00089a12   3d2  c57928c8       vmovapd xmm9,xmm0
0x19db00089a16   3d6  e924000000     jmp 0x19db00089a3f  <+0x3ff>
0x19db00089a1b   3db  c5032ac8       vcvtlsi2sd xmm9,xmm15,rax
0x19db00089a1f   3df  c53358ca       vaddsd xmm9,xmm9,xmm2
0x19db00089a23   3e3  c53b5cc3       vsubsd xmm8,xmm8,xmm3
0x19db00089a27   3e7  c441032ad0     vcvtlsi2sd xmm10,xmm15,r8
0x19db00089a2c   3ec  c52b58d0       vaddsd xmm10,xmm10,xmm0
0x19db00089a30   3f0  c4417928fa     vmovapd xmm15,xmm10
0x19db00089a35   3f5  c4417928d1     vmovapd xmm10,xmm9
0x19db00089a3a   3fa  c4417928cf     vmovapd xmm9,xmm15
0x19db00089a3f   3ff  488bcb         REX.W movq rcx,rbx
0x19db00089a42   402  83c101         addl rcx,0x1
0x19db00089a45   405  0f8092030000   jo 0x19db00089ddd  <+0x79d>
0x19db00089a4b   40b  c4c15358d2     vaddsd xmm2,xmm5,xmm10
0x19db00089a50   410  c4c14b58c1     vaddsd xmm0,xmm6,xmm9
0x19db00089a55   415  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00089a59   419  7795           ja 0x19db000899f0  <+0x3b0>
0x19db00089a5b   41b  e95b010000     jmp 0x19db00089bbb  <+0x57b>
0x19db00089a60   420  83fe00         cmpl rsi,0x0
0x19db00089a63   423  0f841d020000   jz 0x19db00089c86  <+0x646>
0x19db00089a69   429  488bce         REX.W movq rcx,rsi
0x19db00089a6c   42c  03f1           addl rsi,rcx
0x19db00089a6e   42e  0f802b020000   jo 0x19db00089c9f  <+0x65f>
0x19db00089a74   434  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db00089a78   438  897117         movl [rcx+0x17],rsi
0x19db00089a7b   43b  48c7c70000fcff REX.W movq rdi,0xfffc0000
0x19db00089a82   442  4823f9         REX.W andq rdi,rcx
0x19db00089a85   445  f6470804       testb [rdi+0x8],0x4
0x19db00089a89   449  0f857d020000   jnz 0x19db00089d0c  <+0x6cc>
0x19db00089a8f   44f  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db00089a96   456  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db00089a9a   45a  488be5         REX.W movq rsp,rbp
0x19db00089a9d   45d  5d             pop rbp
0x19db00089a9e   45e  4883f902       REX.W cmpq rcx,0x2
0x19db00089aa2   462  7f03           jg 0x19db00089aa7  <+0x467>
0x19db00089aa4   464  c21800         ret 0x18
0x19db00089aa7   467  415a           pop r10
0x19db00089aa9   469  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db00089aae   46e  4152           push r10
0x19db00089ab0   470  c3             retl
0x19db00089ab1   471  48b99000000000000000 REX.W movq rcx,0x90
0x19db00089abb   47b  51             push rcx
0x19db00089abc   47c  b801000000     movl rax,0x1
0x19db00089ac1   481  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db00089acb   48b  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00089ad5   495  488bc8         REX.W movq rcx,rax
0x19db00089ad8   498  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db00089ae2   4a2  41ffd2         call r10
0x19db00089ae5   4a5  e9b3fbffff     jmp 0x19db0008969d  <+0x5d>
0x19db00089aea   4aa  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db00089aef   4af  488975d0       REX.W movq [rbp-0x30],rsi
0x19db00089af3   4b3  4c8945b8       REX.W movq [rbp-0x48],r8
0x19db00089af7   4b7  488945b0       REX.W movq [rbp-0x50],rax
0x19db00089afb   4bb  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db00089aff   4bf  4c894da0       REX.W movq [rbp-0x60],r9
0x19db00089b03   4c3  c5fb115d98     vmovsd [rbp-0x68],xmm3
0x19db00089b08   4c8  c5fb116588     vmovsd [rbp-0x78],xmm4
0x19db00089b0d   4cd  c5fb117580     vmovsd [rbp-0x80],xmm6
0x19db00089b12   4d2  c5fb11ad78ffffff vmovsd [rbp-0x88],xmm5
0x19db00089b1a   4da  c5fb119570ffffff vmovsd [rbp-0x90],xmm2
0x19db00089b22   4e2  c5fb114d90     vmovsd [rbp-0x70],xmm1
0x19db00089b27   4e7  c5fb118568ffffff vmovsd [rbp-0x98],xmm0
0x19db00089b2f   4ef  48899d60ffffff REX.W movq [rbp-0xa0],rbx
0x19db00089b36   4f6  4c8be3         REX.W movq r12,rbx
0x19db00089b39   4f9  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db00089b43   503  488bc8         REX.W movq rcx,rax
0x19db00089b46   506  488bc7         REX.W movq rax,rdi
0x19db00089b49   509  488bd6         REX.W movq rdx,rsi
0x19db00089b4c   50c  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00089b56   516  4c8b157dffffff REX.W movq r10,[rip+0xffffff7d]
0x19db00089b5d   51d  41ffd2         call r10
0x19db00089b60   520  c5fb107dd8     vmovsd xmm7,[rbp-0x28]
0x19db00089b65   525  488b75d0       REX.W movq rsi,[rbp-0x30]
0x19db00089b69   529  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00089b6d   52d  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db00089b71   531  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db00089b75   535  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db00089b79   539  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00089b7d   53d  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db00089b81   541  c5fb105d98     vmovsd xmm3,[rbp-0x68]
0x19db00089b86   546  c5fb106588     vmovsd xmm4,[rbp-0x78]
0x19db00089b8b   54b  33ff           xorl rdi,rdi
0x19db00089b8d   54d  c5fb107580     vmovsd xmm6,[rbp-0x80]
0x19db00089b92   552  c5fb10ad78ffffff vmovsd xmm5,[rbp-0x88]
0x19db00089b9a   55a  c5fb109570ffffff vmovsd xmm2,[rbp-0x90]
0x19db00089ba2   562  c5fb104d90     vmovsd xmm1,[rbp-0x70]
0x19db00089ba7   567  c5fb108568ffffff vmovsd xmm0,[rbp-0x98]
0x19db00089baf   56f  488b9d60ffffff REX.W movq rbx,[rbp-0xa0]
0x19db00089bb6   576  e93dfeffff     jmp 0x19db000899f8  <+0x3b8>
0x19db00089bbb   57b  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db00089bc0   580  488975d0       REX.W movq [rbp-0x30],rsi
0x19db00089bc4   584  c5fb118568ffffff vmovsd [rbp-0x98],xmm0
0x19db00089bcc   58c  c5fb119570ffffff vmovsd [rbp-0x90],xmm2
0x19db00089bd4   594  4c8945b8       REX.W movq [rbp-0x48],r8
0x19db00089bd8   598  488945b0       REX.W movq [rbp-0x50],rax
0x19db00089bdc   59c  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db00089be0   5a0  4c894da0       REX.W movq [rbp-0x60],r9
0x19db00089be4   5a4  c5fb115d98     vmovsd [rbp-0x68],xmm3
0x19db00089be9   5a9  c57b114590     vmovsd [rbp-0x70],xmm8
0x19db00089bee   5ae  c5fb116588     vmovsd [rbp-0x78],xmm4
0x19db00089bf3   5b3  48898d60ffffff REX.W movq [rbp-0xa0],rcx
0x19db00089bfa   5ba  c5fb117580     vmovsd [rbp-0x80],xmm6
0x19db00089bff   5bf  c5fb11ad78ffffff vmovsd [rbp-0x88],xmm5
0x19db00089c07   5c7  488b1d2dffffff REX.W movq rbx,[rip+0xffffff2d]
0x19db00089c0e   5ce  4c8be0         REX.W movq r12,rax
0x19db00089c11   5d1  488bc7         REX.W movq rax,rdi
0x19db00089c14   5d4  488bd6         REX.W movq rdx,rsi
0x19db00089c17   5d7  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00089c21   5e1  4c8b15b2feffff REX.W movq r10,[rip+0xfffffeb2]
0x19db00089c28   5e8  41ffd2         call r10
0x19db00089c2b   5eb  c5fb107dd8     vmovsd xmm7,[rbp-0x28]
0x19db00089c30   5f0  488b75d0       REX.W movq rsi,[rbp-0x30]
0x19db00089c34   5f4  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00089c38   5f8  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db00089c3c   5fc  c5fb108568ffffff vmovsd xmm0,[rbp-0x98]
0x19db00089c44   604  c5fb109570ffffff vmovsd xmm2,[rbp-0x90]
0x19db00089c4c   60c  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db00089c50   610  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db00089c54   614  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00089c58   618  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db00089c5c   61c  c5fb105d98     vmovsd xmm3,[rbp-0x68]
0x19db00089c61   621  c57b104590     vmovsd xmm8,[rbp-0x70]
0x19db00089c66   626  c5fb106588     vmovsd xmm4,[rbp-0x78]
0x19db00089c6b   62b  488b8d60ffffff REX.W movq rcx,[rbp-0xa0]
0x19db00089c72   632  33ff           xorl rdi,rdi
0x19db00089c74   634  c5fb107580     vmovsd xmm6,[rbp-0x80]
0x19db00089c79   639  c5fb10ad78ffffff vmovsd xmm5,[rbp-0x88]
0x19db00089c81   641  e96afdffff     jmp 0x19db000899f0  <+0x3b0>
0x19db00089c86   646  c4e37916f901   vpextrd rcx,xmm7,0x1,
0x19db00089c8c   64c  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db00089c91   651  83f900         cmpl rcx,0x0
0x19db00089c94   654  0f8c0a000000   jl 0x19db00089ca4  <+0x664>
0x19db00089c9a   65a  e9cafdffff     jmp 0x19db00089a69  <+0x429>
0x19db00089c9f   65f  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db00089ca4   664  48b9f87d6d5555550000 REX.W movq rcx,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db00089cae   66e  488b39         REX.W movq rdi,[rcx]
0x19db00089cb1   671  4c8d470c       REX.W leaq r8,[rdi+0xc]
0x19db00089cb5   675  49b9007e6d5555550000 REX.W movq r9,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db00089cbf   67f  4d3901         REX.W cmpq [r9],r8
0x19db00089cc2   682  0f8716000000   ja 0x19db00089cde  <+0x69e>
0x19db00089cc8   688  ba0c000000     movl rdx,0xc
0x19db00089ccd   68d  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db00089cd7   697  41ffd2         call r10
0x19db00089cda   69a  488d78ff       REX.W leaq rdi,[rax-0x1]
0x19db00089cde   69e  488d4f0c       REX.W leaq rcx,[rdi+0xc]
0x19db00089ce2   6a2  4c8b05bdffffff REX.W movq r8,[rip+0xffffffbd]
0x19db00089ce9   6a9  498908         REX.W movq [r8],rcx
0x19db00089cec   6ac  488d4f01       REX.W leaq rcx,[rdi+0x1]
0x19db00089cf0   6b0  498bbd30010000 REX.W movq rdi,[r13+0x130] (root (heap_number_map))
0x19db00089cf7   6b7  8979ff         movl [rcx-0x1],rdi
0x19db00089cfa   6ba  c5fb107dd8     vmovsd xmm7,[rbp-0x28]
0x19db00089cff   6bf  c5fb117903     vmovsd [rcx+0x3],xmm7
0x19db00089d04   6c4  488bf1         REX.W movq rsi,rcx
0x19db00089d07   6c7  e968fdffff     jmp 0x19db00089a74  <+0x434>
0x19db00089d0c   6cc  40f6c601       testb rsi,0x1
0x19db00089d10   6d0  0f8479fdffff   jz 0x19db00089a8f  <+0x44f>
0x19db00089d16   6d6  8bf6           movl rsi,rsi
0x19db00089d18   6d8  4903f5         REX.W addq rsi,r13
0x19db00089d1b   6db  48c7c70000fcff REX.W movq rdi,0xfffc0000
0x19db00089d22   6e2  4823fe         REX.W andq rdi,rsi
0x19db00089d25   6e5  f6470802       testb [rdi+0x8],0x2
0x19db00089d29   6e9  0f8460fdffff   jz 0x19db00089a8f  <+0x44f>
0x19db00089d2f   6ef  4c8d4117       REX.W leaq r8,[rcx+0x17]
0x19db00089d33   6f3  50             push rax
0x19db00089d34   6f4  51             push rcx
0x19db00089d35   6f5  52             push rdx
0x19db00089d36   6f6  56             push rsi
0x19db00089d37   6f7  57             push rdi
0x19db00089d38   6f8  498bf0         REX.W movq rsi,r8
0x19db00089d3b   6fb  488bf9         REX.W movq rdi,rcx
0x19db00089d3e   6fe  33d2           xorl rdx,rdx
0x19db00089d40   700  488b0d77f9ffff REX.W movq rcx,[rip+0xfffff977]
0x19db00089d47   707  49bac065b8f5ff7f0000 REX.W movq r10,0x7ffff5b865c0  (RecordWrite)    ;; off heap target
0x19db00089d51   711  41ffd2         call r10
0x19db00089d54   714  5f             pop rdi
0x19db00089d55   715  5e             pop rsi
0x19db00089d56   716  5a             pop rdx
0x19db00089d57   717  59             pop rcx
0x19db00089d58   718  58             pop rax
0x19db00089d59   719  e931fdffff     jmp 0x19db00089a8f  <+0x44f>
0x19db00089d5e   71e  90             nop
0x19db00089d5f   71f  41ff95f8360000 call [r13+0x36f8]
0x19db00089d66   726  41ff95f8360000 call [r13+0x36f8]
0x19db00089d6d   72d  41ff95f8360000 call [r13+0x36f8]
0x19db00089d74   734  41ff95f8360000 call [r13+0x36f8]
0x19db00089d7b   73b  41ff95f8360000 call [r13+0x36f8]
0x19db00089d82   742  41ff95f8360000 call [r13+0x36f8]
0x19db00089d89   749  41ff95f8360000 call [r13+0x36f8]
0x19db00089d90   750  41ff95f8360000 call [r13+0x36f8]
0x19db00089d97   757  41ff95f8360000 call [r13+0x36f8]
0x19db00089d9e   75e  41ff95f8360000 call [r13+0x36f8]
0x19db00089da5   765  41ff95f8360000 call [r13+0x36f8]
0x19db00089dac   76c  41ff95f8360000 call [r13+0x36f8]
0x19db00089db3   773  41ff95f8360000 call [r13+0x36f8]
0x19db00089dba   77a  41ff95f8360000 call [r13+0x36f8]
0x19db00089dc1   781  41ff95f8360000 call [r13+0x36f8]
0x19db00089dc8   788  41ff95f8360000 call [r13+0x36f8]
0x19db00089dcf   78f  41ff95f8360000 call [r13+0x36f8]
0x19db00089dd6   796  41ff95f8360000 call [r13+0x36f8]
0x19db00089ddd   79d  41ff95f8360000 call [r13+0x36f8]
0x19db00089de4   7a4  41ff9510370000 call [r13+0x3710]
0x19db00089deb   7ab  41ff9510370000 call [r13+0x3710]
0x19db00089df2   7b2  41ff9510370000 call [r13+0x3710]
0x19db00089df9   7b9  0f1f00         nop

Source positions:
 pc offset  position
       47c       647

Inlined functions (count = 0)

Deoptimization Input Data (deopt points = 22)
 index  bytecode-offset    pc
     0                0    NA 
     1                0    NA 
     2                0    NA 
     3                0    NA 
     4                0    NA 
     5                0    NA 
     6                0    NA 
     7                0    NA 
     8                0    NA 
     9                0    NA 
    10                0    NA 
    11                0    NA 
    12                0    NA 
    13                0    NA 
    14                0    NA 
    15                0    NA 
    16                0    NA 
    17                0    NA 
    18              260    NA 
    19               -1   4a5 
    20              338   520 
    21              338   5eb 

Safepoints (size = 68)
0x19db00089ae5     4a5   7a4  0000000000001100000000 (sp -> fp)      19
0x19db00089b60     520   7ab  0000000000001100100000 (sp -> fp)      20
0x19db00089c2b     5eb   7b2  0000000000001100100000 (sp -> fp)      21
0x19db00089cda     69a    NA  0000000000000000100000 (sp -> fp)  <none>

RelocInfo (size = 60)
0x19db00089658  off heap target
0x19db00089672  off heap target
0x19db000896d3  compressed embedded object  (0x19db0830dba5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db000896e2  compressed embedded object  (0x19db0830dd5d <Map(HOLEY_ELEMENTS)> compressed)
0x19db000896f1  compressed embedded object  (0x19db0830de4d <Map(HOLEY_ELEMENTS)> compressed)
0x19db00089706  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008976b  compressed embedded object  (0x19db0830dd5d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008977a  compressed embedded object  (0x19db0830de4d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008987e  compressed embedded object  (0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)> compressed)
0x19db00089884  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db000898d7  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008996d  compressed embedded object  (0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)> compressed)
0x19db00089ac3  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db00089acd  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00089ada  off heap target
0x19db00089b3b  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db00089b4e  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00089c19  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00089ca6  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db00089cb7  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db00089ccf  off heap target
0x19db00089d49  off heap target

--- End code ---
assign 0 to v-1:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
assign 7 to v-8:0
assign 6 to v-7:0
------------------------
function: DrawLine
add v128->v27
add v126->v27
add v119->v126
add v114->v126
add v125->v126
add v73->v114
add v121->v28
add v118->v28
add v119->v118
add v112->v118
add v117->v118
add v106->v112
add v71->v114
add v109->v112
add v97->v96
add v95->v96
add v81->v95
add v93->v29
add v94->v93
add v1->v93
add v91->v1
add v92->v91
add v89->v91
add v18->v13
add v14->v16
add v12->v10
add v9->v10
add v8->v6
add v7->v6
add v2->v1
gap () () 
          [rsi|R|t] = ArchNop
gap (v29(-) = [rsi|R|t];) () 
          [stack:-3|t] = ArchNop
gap (v28(-) = [stack:-3|t];) () 
          [stack:-1|t] = ArchNop
gap (v26(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v27(-) = [stack:-2|t];) () 
          [rdi|R|t] = ArchNop
gap (v25(-) = [rdi|R|t];) () 
          [constant:110] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:124] [immediate:125]
gap () () 
          [constant:134] = ArchNop
gap () () 
          [constant:133] = ArchNop
gap () () 
          v132(R) = ArchStackCheckOffset
gap () () 
          X64Push v132(-)
gap () ([rbx|R|w64] = v133(-); [rax|R|w64] = v110(-); [rsi|R|t] = v134(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:123] #-1 #21 v25(S) v26(S) v27(S) v28(S) v29(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:122]
gap () () 
          ArchJmp [immediate:121]
gap () () 
          [constant:41] = ArchNop
gap () () 
          [constant:124] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v27 #1 #20 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v128(R) = X64Movl : MRI v27(R) [immediate:120]
gap () () 
          X64Cmp32 && branch if equal v128(R) v124 [immediate:118] [immediate:119]
gap () () 
          [constant:130] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v130(R) v128 [immediate:116] [immediate:117]
gap () () 
          [constant:129] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v129(R) v128 [immediate:114] [immediate:115]
gap () () 
          [constant:127] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v127(R) v128 #19 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:113]
gap () () 
          ArchJmp [immediate:112]
gap () () 
          ArchJmp [immediate:111]
gap () () 
          ArchJmp [immediate:110]
gap () () 
          [constant:119] = ArchNop
gap () () 
          v126(R) = X64MovqDecompressTaggedPointer : MRI v27(R) [immediate:109]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v126(R) [immediate:108] v119(R) #18 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v114(R) = X64MovqDecompressTaggedPointer : MRI v126(R) [immediate:107]
gap () () 
          v125(R) = X64MovqDecompressTaggedSigned : MRI v126(R) [immediate:106]
gap () (v115(R) = v125(-);) 
          v115(1) = X64Sar32 v115(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #0 #17 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v73(R) = X64Movsd : MRI v114(R) [immediate:105]
gap () () 
          X64Test32 && deoptimize if equal v28 #1 #16 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v121(R) = X64Movl : MRI v28(R) [immediate:104]
gap () () 
          X64Cmp32 && branch if equal v124(R) v121 [immediate:102] [immediate:103]
gap () () 
          [constant:123] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v123(R) v121 [immediate:100] [immediate:101]
gap () () 
          [constant:122] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v122(R) v121 [immediate:98] [immediate:99]
gap () () 
          [constant:120] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v120(R) v121 #15 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:97]
gap () () 
          ArchJmp [immediate:96]
gap () () 
          ArchJmp [immediate:95]
gap () () 
          ArchJmp [immediate:94]
gap () () 
          v118(R) = X64MovqDecompressTaggedPointer : MRI v28(R) [immediate:93]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v118(R) [immediate:92] v119(R) #14 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v112(R) = X64MovqDecompressTaggedPointer : MRI v118(R) [immediate:91]
gap () () 
          v117(R) = X64MovqDecompressTaggedSigned : MRI v118(R) [immediate:90]
gap () (v113(R) = v117(-);) 
          v113(1) = X64Sar32 v113(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #0 #13 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v106(R) = X64Movsd : MRI v112(R) [immediate:89]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v106(R) v73 [immediate:87] [immediate:88]
gap () () 
          [constant:116] = ArchNop
gap () (v99 = v116(-);) 
          ArchJmp [immediate:86]
gap () (v99 = v110(-);) 
          ArchJmp [immediate:85]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #1 #12 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v71(R) = X64Movsd : MRI v114(R) [immediate:84]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #1 #11 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v109(R) = X64Movsd : MRI v112(R) [immediate:83]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v109(R) v71 [immediate:81] [immediate:82]
gap () () 
          [constant:111] = ArchNop
gap () (v98 = v111(-);) 
          ArchJmp [immediate:80]
gap () (v98 = v110(-);) 
          ArchJmp [immediate:79]
gap () () 
          [constant:87] = ArchNop
gap () () 
          v108(R) = AVXFloat64Sub v109(R) v71
gap () () 
          v100(R) = AVXFloat64Abs v108
gap () () 
          v105(R) = AVXFloat64Sub v106(R) v73
gap () () 
          v101(R) = AVXFloat64Abs v105
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v101(R) v100 [immediate:77] [immediate:78]
gap () () 
          v103(R) = AVXFloat64Mul v100(R) v87
gap () (v35 = v98(-); v33 = v41(-); v34 = v41(-); v32 = v99(-); v38 = v101(-); v77 = v103(-); v36 = v100(-);) 
          ArchJmp [immediate:76]
gap () () 
          v102(R) = AVXFloat64Mul v101(R) v87
gap () (v35 = v41(-); v33 = v98(-); v34 = v99(-); v32 = v41(-); v38 = v100(-); v77 = v102(-); v36 = v101(-);) 
          ArchJmp [immediate:75]
gap () () 
          [constant:96] = ArchNop
gap () () 
          [constant:97] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v96(R) [immediate:74] v97(R) #10 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v95(R) = X64MovqDecompressTaggedPointer : MRI v96(R) [immediate:73]
gap () () 
          v81(R) = X64Movl : MRI v95(R) [immediate:72]
gap () () 
          v93(R) = X64MovqDecompressAnyTagged : MRI v29(R) [immediate:71]
gap () () 
          X64Test32 && deoptimize if equal v93 #1 #9 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          [constant:94] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v93(R) [immediate:70] v94(R) #8 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v1(R) = X64MovqDecompressTaggedPointer : MRI v93(R) [immediate:69]
gap () () 
          v91(R) = X64MovqDecompressAnyTagged : MRI v1(R) [immediate:68]
gap () (v68(R) = v91(-);) 
          v68(1) = X64Sar32 v68(R) #1
gap () () 
          v79(R) = X64Test32 && set if equal v91 #1
gap () () 
          X64Cmp32 && branch if not equal v79 #0 [immediate:66] [immediate:67]
gap () () 
          v92(R) = X64MovqDecompressTaggedPointer : MRI v91(R) [immediate:65]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v92(R) [immediate:63] [immediate:64]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v92(R) [immediate:62] #67 #7 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:61]
gap () () 
          ArchJmp [immediate:60]
gap () () 
          v89(R) = X64Movsd : MRI v91(R) [immediate:59]
gap () (v88 = v89(-);) 
          ArchJmp [immediate:58]
gap () () 
          v90(R) = SSEInt32ToFloat64 v68
gap () (v88 = v90(-);) 
          ArchJmp [immediate:57]
gap () () 
          v85(R) = AVXFloat64Add v88(R) v36
gap () () 
          v82(R) = SSEFloat64Round v85(R)
gap () () 
          v86(R) = AVXFloat64Sub v82(R) v87
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v85(R) v86 [immediate:55] [immediate:56]
gap () () 
          [constant:84] = ArchNop
gap () () 
          v83(R) = AVXFloat64Sub v82(R) v84
gap () (v7 = v83(-);) 
          ArchJmp [immediate:54]
gap () (v7 = v82(-);) 
          ArchJmp [immediate:53]
gap () () 
          v22(R) = SSEFloat64ToInt32 v7
gap () () 
          [constant:80] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v80(R) v81 #6 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v78(R) = SSEInt32ToFloat64 v22
gap () () 
          X64Cmp32 && deoptimize if equal v79 #0 #5 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v78(R) v7 #4 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          X64Cmp32 && branch if signed less than v68(R) v22 [immediate:51] [immediate:52]
gap () () 
          ArchJmp [immediate:50]
gap () () 
          v69(R) = AVXFloat64Add v77(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v69(R) v36 [immediate:48] [immediate:49]
gap () (v59 = v69(-); v67 = v71(-); v66 = v73(-);) 
          ArchJmp [immediate:47]
gap () () 
          v76(R) = SSEInt32ToFloat64 v33
gap () () 
          v75(R) = SSEInt32ToFloat64 v32
gap () () 
          v70(R) = AVXFloat64Sub v69(R) v36
gap () () 
          v72(R) = AVXFloat64Add v76(R) v71
gap () () 
          v74(R) = AVXFloat64Add v75(R) v73
gap () (v59 = v70(-); v67 = v72(-); v66 = v74(-);) 
          ArchJmp [immediate:46]
gap () () 
          v46(R) = SSEInt32ToFloat64 v35
gap () () 
          v44(R) = SSEInt32ToFloat64 v34
gap () (v65(R) = v68(-);) 
          v65(1) = X64Add32 && deoptimize if overflow v65(R) #1 #3 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v58(R) = AVXFloat64Add v67(R) v46
gap () () 
          v60(R) = AVXFloat64Add v66(R) v44
gap () (v61 = v65(-);) 
          v61(1) = ArchNop v61
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:44] [immediate:45]
gap () () 
          [constant:64] = ArchNop
gap () () 
          [constant:63] = ArchNop
gap () ([rbx|R|w64] = v63(-); [rax|R|w64] = v41(-); [rsi|R|t] = v64(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:43] #-1 #2 v25(S) v26(S) v27(S) v28(S) v29(S) v60(S) v58(S) v32(S) v33(S) v34(S) v35(S) v36(S) v59(S) v38(S) v7(S) v61(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:42]
gap () () 
          ArchJmp [immediate:41]
gap () (v50 = v58(-); v51 = v59(-); v49 = v60(-); v48 = v61(-);) 
          ArchJmp [immediate:40]
gap () () 
          X64Cmp32 && branch if signed less than v48(R) v22 [immediate:38] [immediate:39]
gap () () 
          v53(R) = AVXFloat64Add v51(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v53(R) v36 [immediate:36] [immediate:37]
gap () (v47 = v50(-); v37 = v53(-); v45 = v49(-);) 
          ArchJmp [immediate:35]
gap () () 
          v57(R) = SSEInt32ToFloat64 v33
gap () () 
          v52(R) = AVXFloat64Add v57(R) v50
gap () () 
          v54(R) = AVXFloat64Sub v53(R) v36
gap () () 
          v56(R) = SSEInt32ToFloat64 v32
gap () () 
          v55(R) = AVXFloat64Add v56(R) v49
gap () (v47 = v52(-); v37 = v54(-); v45 = v55(-);) 
          ArchJmp [immediate:34]
gap () (v43(R) = v48(-);) 
          v43(1) = X64Add32 && deoptimize if overflow v43(R) #1 #1 v25(S) v26(-) v27(-) v28(-) v29(S) v49(-) v50(-) v32(-) v33(-) v34(-) v35(-) v36(-) v51(-) v38(-) v7(-) v48(-) v7(-)
gap () () 
          v31(R) = AVXFloat64Add v46(R) v47
gap () () 
          v30(R) = AVXFloat64Add v44(R) v45
gap () (v39 = v43(-);) 
          v39(1) = ArchNop v39
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:32] [immediate:33]
gap () () 
          [constant:42] = ArchNop
gap () () 
          [constant:40] = ArchNop
gap () ([rbx|R|w64] = v40(-); [rax|R|w64] = v41(-); [rsi|R|t] = v42(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:31] #-1 #0 v25(S) v26(S) v27(S) v28(S) v29(S) v30(S) v31(S) v32(S) v33(S) v34(S) v35(S) v36(S) v37(S) v38(S) v7(S) v39(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:30]
gap () () 
          ArchJmp [immediate:29]
gap () (v50 = v31(-); v51 = v37(-); v49 = v30(-); v48 = v39(-);) 
          ArchJmp [immediate:28]
gap () () 
          ArchJmp [immediate:27]
gap () () 
          X64Cmp32 && branch if equal v22 #0 [immediate:25] [immediate:26]
gap () () 
          ArchJmp [immediate:24]
gap () () 
          v23(R) = SSEFloat64ExtractHighWord32 v7
gap () () 
          X64Cmp32 && branch if signed less than v23 #0 [immediate:22] [immediate:23]
gap () () 
          ArchJmp [immediate:21]
gap () (v21(R) = v22(-);) 
          v21(1) = X64Add32 && branch if overflow v21(R) v22(R) [immediate:17] [immediate:18] [immediate:19] [immediate:20]
gap () (v20 = v21(-);) 
          v20(1) = ArchNop v20
gap () (v2 = v20(-);) 
          ArchJmp [immediate:16]
gap () () 
          ArchJmp [immediate:15]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          [constant:17] = ArchNop
gap () () 
          [constant:11] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () () 
          v13(R) = X64Movq : MR v11(R)
gap () () 
          [constant:19] = ArchNop
gap () () 
          v18(R) = X64Lea : MRI v13(R) [immediate:13]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v19(R) v18(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () ([rdx|R|w64] = v17(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:9] #-1 [rdx|R|w64]
gap (v16(-) = [rax|R|tp];) () 
          v14(R) = X64Lea : MRI v16(R) [immediate:8]
gap () (v10 = v14(-);) 
          ArchJmp [immediate:7]
gap () (v10 = v13(-);) 
          ArchJmp [immediate:6]
gap () () 
          v12(R) = X64Lea : MRI v10(R) [immediate:5]
gap () () 
          X64Movq : MR v11(R) v12(R)
gap () () 
          v9(R) = X64Lea : MRI v10(R) [immediate:4]
gap () (v6 = v9(-);) 
          v6(1) = ArchNop v6
gap () () 
          X64MovqCompressTagged : MRI v6(R) [immediate:3] v8(R)
gap () () 
          X64Movsd : MRI v6(R) [immediate:2] v7(R)
gap () (v2 = v6(-);) 
          ArchJmp [immediate:1]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1(R) [immediate:0] v2(R)
gap () () 
          [constant:0] = ArchNop
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
print modrm pairs
1, v2, v1
1, v8, v6
1, v9, v10
1, v12, v10
1, v92, v91
1, v94, v93
1, v126, v27
1, v81, v95
1, v89, v91
1, v91, v1
1, v95, v96
1, v7, v6
1, v109, v112
1, v71, v114
1, v128, v27
1, v106, v112
1, v118, v28
1, v117, v118
1, v1, v93
1, v14, v16
1, v73, v114
1, v121, v28
1, v114, v126
1, v112, v118
1, v93, v29
1, v125, v126
1, v97, v96
1, v119, v118
1, v119, v126
1, v18, v13
assign rcx to v132:0
assign 1 to v132:0
assign rax to v110:1
assign 0 to v110:1
assign rbx to v133:1
assign 3 to v133:1
assign rsi to v134:1
assign 6 to v134:1
assign rcx to v110:2
assign 1 to v110:2
assign rcx to v27:1
assign 1 to v27:1
assign rdi to v128:0
assign 7 to v128:0
assign r8 to v124:1
assign 8 to v124:1
assign r9 to v130:1
assign 9 to v130:1
assign r9 to v129:1
assign 9 to v129:1
assign r9 to v127:1
assign 9 to v127:1
assign rdi to v126:0
assign 7 to v126:0
assign r9 to v119:1
assign 9 to v119:1
assign r12 to v114:0
assign 12 to v114:0
assign rdi to v125:0
assign 7 to v125:0
assign rdi to v115:0
assign 7 to v115:0
assign r11 to v28:1
assign 11 to v28:1
assign r14 to v121:0
assign 14 to v121:0
assign r8 to v123:1
assign 8 to v123:1
assign r8 to v122:1
assign 8 to v122:1
assign r8 to v120:1
assign 8 to v120:1
assign r8 to v118:0
assign 8 to v118:0
assign r9 to v112:0
assign 9 to v112:0
assign r8 to v117:0
assign 8 to v117:0
assign r8 to v113:0
assign 8 to v113:0
assign r14 to v116:1
assign 14 to v116:1
assign r14 to v99:0
assign 14 to v99:0
assign rax to v111:1
assign 0 to v111:1
assign rax to v98:0
assign 0 to v98:0
assign rdi to v41:1
assign 7 to v41:1
assign rdi to v41:3
assign 7 to v41:3
assign r8 to v32:0
assign 8 to v32:0
assign rax to v33:0
assign 0 to v33:0
assign r14 to v34:0
assign 14 to v34:0
assign r9 to v35:0
assign 9 to v35:0
assign r12 to v96:1
assign 12 to v96:1
assign rdx to v97:1
assign 2 to v97:1
assign r12 to v95:0
assign 12 to v95:0
assign r12 to v81:0
assign 12 to v81:0
assign r15 to v29:1
assign 15 to v29:1
assign rdx to v93:0
assign 2 to v93:0
assign rsi to v94:1
assign 6 to v94:1
assign rdx to v1:0
assign 2 to v1:0
assign rsi to v91:0
assign 6 to v91:0
assign rbx to v68:0
assign 3 to v68:0
blocking v79 pick register rdx
assign rdx to v79:0
assign 2 to v79:0
v1:0 not intersect with v93:0, removed
v1:0 not intersect with v2:0, removed
v1:1 intersect with v2:0, adding
v1:1 intersect with v91:0, adding
blocking v92 pick register rcx
assign rcx to v92:0
assign 1 to v92:0
assign rcx to v27:3
assign 1 to v27:3
assign rsi to v22:0
assign 6 to v22:0
blocking v80 pick register rcx
assign rcx to v80:1
assign 1 to v80:1
assign rbx to v65:0
assign 3 to v65:0
assign rbx to v61:0
assign 3 to v61:0
assign rcx to v63:1
assign 1 to v63:1
assign r12 to v64:1
assign 12 to v64:1
assign rcx to v33:1
assign 1 to v33:1
assign r12 to v61:1
assign 12 to v61:1
assign rdx to v22:1
assign 2 to v22:1
blocking v22 pick register rcx
assign rbx to v61:3
assign 3 to v61:3
assign r15 to v29:3
assign 15 to v29:3
assign r14 to v34:2
assign 14 to v34:2
assign r11 to v28:3
assign 11 to v28:3
assign r9 to v35:2
assign 9 to v35:2
assign r8 to v32:2
assign 8 to v32:2
assign rdi to v41:5
assign 7 to v41:5
assign rax to v33:3
assign 0 to v33:3
assign rsi to v22:4
assign 6 to v22:4
assign rbx to v48:0
assign 3 to v48:0
assign rcx to v43:0
assign 1 to v43:0
assign rcx to v39:0
assign 1 to v39:0
assign rbx to v40:1
assign 3 to v40:1
assign r12 to v42:1
assign 12 to v42:1
assign r12 to v33:4
assign 12 to v33:4
assign rdx to v22:5
assign 2 to v22:5
assign rcx to v39:2
assign 1 to v39:2
assign rsi to v22:7
assign 6 to v22:7
assign rax to v33:6
assign 0 to v33:6
assign rdi to v41:7
assign 7 to v41:7
assign r8 to v32:4
assign 8 to v32:4
assign r9 to v35:4
assign 9 to v35:4
assign r11 to v28:5
assign 11 to v28:5
assign r14 to v34:4
assign 14 to v34:4
assign r15 to v29:5
assign 15 to v29:5
assign rcx to v23:0
assign 1 to v23:0
assign rsi to v21:0
assign 6 to v21:0
assign rcx to v22:3
assign 1 to v22:3
assign rsi to v20:0
assign 6 to v20:0
assign rcx to v11:1
assign 1 to v11:1
assign rdi to v13:0
assign 7 to v13:0
assign r8 to v18:0
assign 8 to v18:0
assign r9 to v19:1
assign 9 to v19:1
assign rdx to v17:1
assign 2 to v17:1
blocking v11 pick register rcx
assign rax to v16:0
assign 0 to v16:0
assign rdi to v14:0
assign 7 to v14:0
assign rcx to v11:4
assign 1 to v11:4
assign rdi to v10:0
assign 7 to v10:0
assign rcx to v12:0
assign 1 to v12:0
assign r8 to v11:3
assign 8 to v11:3
assign rcx to v9:0
assign 1 to v9:0
assign rcx to v6:0
assign 1 to v6:0
assign rdi to v8:1
assign 7 to v8:1
assign rsi to v2:0
assign 6 to v2:0
assign rcx to v1:2
assign 1 to v1:2
assign rdi to v3:0
assign 7 to v3:0
assign r8 to v4:0
assign 8 to v4:0
assign rax to v0:1
assign 0 to v0:1
spill count : 23
add v128->v27
add v126->v27
add v119->v126
add v114->v126
add v125->v126
add v73->v114
add v121->v28
add v118->v28
add v119->v118
add v112->v118
add v117->v118
add v106->v112
add v71->v114
add v109->v112
add v97->v96
add v95->v96
add v81->v95
add v93->v29
add v94->v93
add v1->v93
add v91->v1
add v92->v91
add v89->v91
add v18->v13
add v14->v16
add v12->v10
add v9->v10
add v8->v6
add v7->v6
add v2->v1
gap () () 
          [rsi|R|t] = ArchNop
gap (v29(-) = [rsi|R|t];) () 
          [stack:-3|t] = ArchNop
gap (v28(-) = [stack:-3|t];) () 
          [stack:-1|t] = ArchNop
gap (v26(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v27(-) = [stack:-2|t];) () 
          [rdi|R|t] = ArchNop
gap (v25(-) = [rdi|R|t];) () 
          [constant:110] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:124] [immediate:125]
gap () () 
          [constant:134] = ArchNop
gap () () 
          [constant:133] = ArchNop
gap () () 
          v132(R) = ArchStackCheckOffset
gap () () 
          X64Push v132(-)
gap () ([rbx|R|w64] = v133(-); [rax|R|w64] = v110(-); [rsi|R|t] = v134(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:123] #-1 #21 v25(S) v26(S) v27(S) v28(S) v29(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:122]
gap () () 
          ArchJmp [immediate:121]
gap () () 
          [constant:41] = ArchNop
gap () () 
          [constant:124] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v27 #1 #20 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v128(R) = X64Movl : MRI v27(R) [immediate:120]
gap () () 
          X64Cmp32 && branch if equal v128(R) v124 [immediate:118] [immediate:119]
gap () () 
          [constant:130] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v130(R) v128 [immediate:116] [immediate:117]
gap () () 
          [constant:129] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v129(R) v128 [immediate:114] [immediate:115]
gap () () 
          [constant:127] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v127(R) v128 #19 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:113]
gap () () 
          ArchJmp [immediate:112]
gap () () 
          ArchJmp [immediate:111]
gap () () 
          ArchJmp [immediate:110]
gap () () 
          [constant:119] = ArchNop
gap () () 
          v126(R) = X64MovqDecompressTaggedPointer : MRI v27(R) [immediate:109]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v126(R) [immediate:108] v119(R) #18 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v114(R) = X64MovqDecompressTaggedPointer : MRI v126(R) [immediate:107]
gap () () 
          v125(R) = X64MovqDecompressTaggedSigned : MRI v126(R) [immediate:106]
gap () (v115(R) = v125(-);) 
          v115(1) = X64Sar32 v115(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #0 #17 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v73(R) = X64Movsd : MRI v114(R) [immediate:105]
gap () () 
          X64Test32 && deoptimize if equal v28 #1 #16 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v121(R) = X64Movl : MRI v28(R) [immediate:104]
gap () () 
          X64Cmp32 && branch if equal v124(R) v121 [immediate:102] [immediate:103]
gap () () 
          [constant:123] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v123(R) v121 [immediate:100] [immediate:101]
gap () () 
          [constant:122] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v122(R) v121 [immediate:98] [immediate:99]
gap () () 
          [constant:120] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v120(R) v121 #15 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:97]
gap () () 
          ArchJmp [immediate:96]
gap () () 
          ArchJmp [immediate:95]
gap () () 
          ArchJmp [immediate:94]
gap () () 
          v118(R) = X64MovqDecompressTaggedPointer : MRI v28(R) [immediate:93]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v118(R) [immediate:92] v119(R) #14 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v112(R) = X64MovqDecompressTaggedPointer : MRI v118(R) [immediate:91]
gap () () 
          v117(R) = X64MovqDecompressTaggedSigned : MRI v118(R) [immediate:90]
gap () (v113(R) = v117(-);) 
          v113(1) = X64Sar32 v113(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #0 #13 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v106(R) = X64Movsd : MRI v112(R) [immediate:89]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v106(R) v73 [immediate:87] [immediate:88]
gap () () 
          [constant:116] = ArchNop
gap () (v99 = v116(-);) 
          ArchJmp [immediate:86]
gap () (v99 = v110(-);) 
          ArchJmp [immediate:85]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #1 #12 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v71(R) = X64Movsd : MRI v114(R) [immediate:84]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v113 #1 #11 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v109(R) = X64Movsd : MRI v112(R) [immediate:83]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v109(R) v71 [immediate:81] [immediate:82]
gap () () 
          [constant:111] = ArchNop
gap () (v98 = v111(-);) 
          ArchJmp [immediate:80]
gap () (v98 = v110(-);) 
          ArchJmp [immediate:79]
gap () () 
          [constant:87] = ArchNop
gap () () 
          v108(R) = AVXFloat64Sub v109(R) v71
gap () () 
          v100(R) = AVXFloat64Abs v108
gap () () 
          v105(R) = AVXFloat64Sub v106(R) v73
gap () () 
          v101(R) = AVXFloat64Abs v105
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v101(R) v100 [immediate:77] [immediate:78]
gap () () 
          v103(R) = AVXFloat64Mul v100(R) v87
gap () (v35 = v98(-); v33 = v41(-); v34 = v41(-); v32 = v99(-); v38 = v101(-); v77 = v103(-); v36 = v100(-);) 
          ArchJmp [immediate:76]
gap () () 
          v102(R) = AVXFloat64Mul v101(R) v87
gap () (v35 = v41(-); v33 = v98(-); v34 = v99(-); v32 = v41(-); v38 = v100(-); v77 = v102(-); v36 = v101(-);) 
          ArchJmp [immediate:75]
gap () () 
          [constant:96] = ArchNop
gap () () 
          [constant:97] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v96(R) [immediate:74] v97(R) #10 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v95(R) = X64MovqDecompressTaggedPointer : MRI v96(R) [immediate:73]
gap () () 
          v81(R) = X64Movl : MRI v95(R) [immediate:72]
gap () () 
          v93(R) = X64MovqDecompressAnyTagged : MRI v29(R) [immediate:71]
gap () () 
          X64Test32 && deoptimize if equal v93 #1 #9 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          [constant:94] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v93(R) [immediate:70] v94(R) #8 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v1(R) = X64MovqDecompressTaggedPointer : MRI v93(R) [immediate:69]
gap () () 
          v91(R) = X64MovqDecompressAnyTagged : MRI v1(R) [immediate:68]
gap () (v68(R) = v91(-);) 
          v68(1) = X64Sar32 v68(R) #1
gap () () 
          v79(R) = X64Test32 && set if equal v91 #1
gap () () 
          X64Cmp32 && branch if not equal v79 #0 [immediate:66] [immediate:67]
gap () () 
          v92(R) = X64MovqDecompressTaggedPointer : MRI v91(R) [immediate:65]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v92(R) [immediate:63] [immediate:64]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v92(R) [immediate:62] #67 #7 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          ArchJmp [immediate:61]
gap () () 
          ArchJmp [immediate:60]
gap () () 
          v89(R) = X64Movsd : MRI v91(R) [immediate:59]
gap () (v88 = v89(-);) 
          ArchJmp [immediate:58]
gap () () 
          v90(R) = SSEInt32ToFloat64 v68
gap () (v88 = v90(-);) 
          ArchJmp [immediate:57]
gap () () 
          v85(R) = AVXFloat64Add v88(R) v36
gap () () 
          v82(R) = SSEFloat64Round v85(R)
gap () () 
          v86(R) = AVXFloat64Sub v82(R) v87
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v85(R) v86 [immediate:55] [immediate:56]
gap () () 
          [constant:84] = ArchNop
gap () () 
          v83(R) = AVXFloat64Sub v82(R) v84
gap () (v7 = v83(-);) 
          ArchJmp [immediate:54]
gap () (v7 = v82(-);) 
          ArchJmp [immediate:53]
gap () () 
          v22(R) = SSEFloat64ToInt32 v7
gap () () 
          [constant:80] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v80(R) v81 #6 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v78(R) = SSEInt32ToFloat64 v22
gap () () 
          X64Cmp32 && deoptimize if equal v79 #0 #5 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v78(R) v7 #4 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          X64Cmp32 && branch if signed less than v68(R) v22 [immediate:51] [immediate:52]
gap () () 
          ArchJmp [immediate:50]
gap () () 
          v69(R) = AVXFloat64Add v77(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v69(R) v36 [immediate:48] [immediate:49]
gap () (v59 = v69(-); v67 = v71(-); v66 = v73(-);) 
          ArchJmp [immediate:47]
gap () () 
          v76(R) = SSEInt32ToFloat64 v33
gap () () 
          v75(R) = SSEInt32ToFloat64 v32
gap () () 
          v70(R) = AVXFloat64Sub v69(R) v36
gap () () 
          v72(R) = AVXFloat64Add v76(R) v71
gap () () 
          v74(R) = AVXFloat64Add v75(R) v73
gap () (v59 = v70(-); v67 = v72(-); v66 = v74(-);) 
          ArchJmp [immediate:46]
gap () () 
          v46(R) = SSEInt32ToFloat64 v35
gap () () 
          v44(R) = SSEInt32ToFloat64 v34
gap () (v65(R) = v68(-);) 
          v65(1) = X64Add32 && deoptimize if overflow v65(R) #1 #3 v25(S) v26(-) v27(-) v28(-) v29(S)
gap () () 
          v58(R) = AVXFloat64Add v67(R) v46
gap () () 
          v60(R) = AVXFloat64Add v66(R) v44
gap () (v61 = v65(-);) 
          v61(1) = ArchNop v61
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:44] [immediate:45]
gap () () 
          [constant:64] = ArchNop
gap () () 
          [constant:63] = ArchNop
gap () ([rbx|R|w64] = v63(-); [rax|R|w64] = v41(-); [rsi|R|t] = v64(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:43] #-1 #2 v25(S) v26(S) v27(S) v28(S) v29(S) v60(S) v58(S) v32(S) v33(S) v34(S) v35(S) v36(S) v59(S) v38(S) v7(S) v61(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:42]
gap () () 
          ArchJmp [immediate:41]
gap () (v50 = v58(-); v51 = v59(-); v49 = v60(-); v48 = v61(-);) 
          ArchJmp [immediate:40]
gap () () 
          X64Cmp32 && branch if signed less than v48(R) v22 [immediate:38] [immediate:39]
gap () () 
          v53(R) = AVXFloat64Add v51(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v53(R) v36 [immediate:36] [immediate:37]
gap () (v47 = v50(-); v37 = v53(-); v45 = v49(-);) 
          ArchJmp [immediate:35]
gap () () 
          v57(R) = SSEInt32ToFloat64 v33
gap () () 
          v52(R) = AVXFloat64Add v57(R) v50
gap () () 
          v54(R) = AVXFloat64Sub v53(R) v36
gap () () 
          v56(R) = SSEInt32ToFloat64 v32
gap () () 
          v55(R) = AVXFloat64Add v56(R) v49
gap () (v47 = v52(-); v37 = v54(-); v45 = v55(-);) 
          ArchJmp [immediate:34]
gap () (v43(R) = v48(-);) 
          v43(1) = X64Add32 && deoptimize if overflow v43(R) #1 #1 v25(S) v26(-) v27(-) v28(-) v29(S) v49(-) v50(-) v32(-) v33(-) v34(-) v35(-) v36(-) v51(-) v38(-) v7(-) v48(-) v7(-)
gap () () 
          v31(R) = AVXFloat64Add v46(R) v47
gap () () 
          v30(R) = AVXFloat64Add v44(R) v45
gap () (v39 = v43(-);) 
          v39(1) = ArchNop v39
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:32] [immediate:33]
gap () () 
          [constant:42] = ArchNop
gap () () 
          [constant:40] = ArchNop
gap () ([rbx|R|w64] = v40(-); [rax|R|w64] = v41(-); [rsi|R|t] = v42(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:31] #-1 #0 v25(S) v26(S) v27(S) v28(S) v29(S) v30(S) v31(S) v32(S) v33(S) v34(S) v35(S) v36(S) v37(S) v38(S) v7(S) v39(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:30]
gap () () 
          ArchJmp [immediate:29]
gap () (v50 = v31(-); v51 = v37(-); v49 = v30(-); v48 = v39(-);) 
          ArchJmp [immediate:28]
gap () () 
          ArchJmp [immediate:27]
gap () () 
          X64Cmp32 && branch if equal v22 #0 [immediate:25] [immediate:26]
gap () () 
          ArchJmp [immediate:24]
gap () () 
          v23(R) = SSEFloat64ExtractHighWord32 v7
gap () () 
          X64Cmp32 && branch if signed less than v23 #0 [immediate:22] [immediate:23]
gap () () 
          ArchJmp [immediate:21]
gap () (v21(R) = v22(-);) 
          v21(1) = X64Add32 && branch if overflow v21(R) v22(R) [immediate:17] [immediate:18] [immediate:19] [immediate:20]
gap () (v20 = v21(-);) 
          v20(1) = ArchNop v20
gap () (v2 = v20(-);) 
          ArchJmp [immediate:16]
gap () () 
          ArchJmp [immediate:15]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          [constant:17] = ArchNop
gap () () 
          [constant:11] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () () 
          v13(R) = X64Movq : MR v11(R)
gap () () 
          [constant:19] = ArchNop
gap () () 
          v18(R) = X64Lea : MRI v13(R) [immediate:13]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v19(R) v18(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () ([rdx|R|w64] = v17(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:9] #-1 [rdx|R|w64]
gap (v16(-) = [rax|R|tp];) () 
          v14(R) = X64Lea : MRI v16(R) [immediate:8]
gap () (v10 = v14(-);) 
          ArchJmp [immediate:7]
gap () (v10 = v13(-);) 
          ArchJmp [immediate:6]
gap () () 
          v12(R) = X64Lea : MRI v10(R) [immediate:5]
gap () () 
          X64Movq : MR v11(R) v12(R)
gap () () 
          v9(R) = X64Lea : MRI v10(R) [immediate:4]
gap () (v6 = v9(-);) 
          v6(1) = ArchNop v6
gap () () 
          X64MovqCompressTagged : MRI v6(R) [immediate:3] v8(R)
gap () () 
          X64Movsd : MRI v6(R) [immediate:2] v7(R)
gap () (v2 = v6(-);) 
          ArchJmp [immediate:1]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1(R) [immediate:0] v2(R)
gap () () 
          [constant:0] = ArchNop
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
print modrm pairs
1, v2, v1
1, v8, v6
1, v9, v10
1, v12, v10
1, v92, v91
1, v94, v93
1, v126, v27
1, v81, v95
1, v89, v91
1, v91, v1
1, v95, v96
1, v7, v6
1, v109, v112
1, v71, v114
1, v128, v27
1, v106, v112
1, v118, v28
1, v117, v118
1, v1, v93
1, v14, v16
1, v73, v114
1, v121, v28
1, v114, v126
1, v112, v118
1, v93, v29
1, v125, v126
1, v97, v96
1, v119, v118
1, v119, v126
1, v18, v13
assign xmm0 to v73:0
assign 0 to v73:0
assign xmm1 to v106:0
assign 1 to v106:0
assign xmm2 to v71:0
assign 2 to v71:0
assign xmm4 to v109:0
assign 4 to v109:0
assign xmm3 to v108:0
assign 3 to v108:0
assign xmm4 to v100:0
assign 4 to v100:0
assign xmm5 to v107:0
assign 5 to v107:0
assign xmm1 to v105:0
assign 1 to v105:0
assign xmm3 to v101:0
assign 3 to v101:0
assign xmm5 to v104:0
assign 5 to v104:0
assign xmm1 to v87:1
assign 1 to v87:1
assign xmm5 to v103:0
assign 5 to v103:0
assign xmm1 to v87:2
assign 1 to v87:2
assign xmm5 to v102:0
assign 5 to v102:0
assign xmm3 to v36:0
assign 3 to v36:0
assign xmm4 to v38:0
assign 4 to v38:0
assign xmm5 to v77:0
assign 5 to v77:0
assign xmm6 to v89:0
assign 6 to v89:0
assign xmm6 to v90:0
assign 6 to v90:0
assign xmm6 to v88:0
assign 6 to v88:0
assign xmm6 to v85:0
assign 6 to v85:0
assign xmm7 to v82:0
assign 7 to v82:0
assign xmm1 to v86:0
assign 1 to v86:0
assign xmm1 to v84:1
assign 1 to v84:1
assign xmm7 to v83:0
assign 7 to v83:0
assign xmm7 to v7:0
assign 7 to v7:0
assign xmm1 to v78:0
assign 1 to v78:0
assign xmm1 to v69:0
assign 1 to v69:0
assign xmm5 to v76:0
assign 5 to v76:0
assign xmm6 to v75:0
assign 6 to v75:0
assign xmm1 to v70:0
assign 1 to v70:0
assign xmm2 to v72:0
assign 2 to v72:0
assign xmm0 to v74:0
assign 0 to v74:0
assign xmm1 to v59:0
assign 1 to v59:0
assign xmm0 to v66:0
assign 0 to v66:0
assign xmm2 to v67:0
assign 2 to v67:0
assign xmm5 to v46:0
assign 5 to v46:0
assign xmm6 to v44:0
assign 6 to v44:0
assign xmm2 to v58:0
assign 2 to v58:0
assign xmm0 to v60:0
assign 0 to v60:0
blocking v46 pick register xmm5
blocking v44 pick register xmm6
blocking v7 pick register xmm7
assign xmm0 to v60:2
assign 0 to v60:2
assign xmm2 to v58:2
assign 2 to v58:2
assign xmm6 to v44:3
assign 6 to v44:3
assign xmm5 to v46:3
assign 5 to v46:3
assign xmm1 to v59:2
assign 1 to v59:2
assign xmm4 to v38:2
assign 4 to v38:2
assign xmm3 to v36:2
assign 3 to v36:2
assign xmm7 to v7:3
assign 7 to v7:3
assign xmm5 to v46:2
assign 5 to v46:2
assign xmm6 to v44:2
assign 6 to v44:2
assign xmm0 to v49:0
assign 0 to v49:0
assign xmm2 to v50:0
assign 2 to v50:0
assign xmm1 to v51:0
assign 1 to v51:0
assign xmm8 to v53:0
assign 8 to v53:0
assign xmm9 to v57:0
assign 9 to v57:0
assign xmm9 to v52:0
assign 9 to v52:0
assign xmm8 to v54:0
assign 8 to v54:0
assign xmm10 to v56:0
assign 10 to v56:0
assign xmm10 to v55:0
assign 10 to v55:0
assign xmm8 to v37:0
assign 8 to v37:0
assign xmm9 to v45:0
assign 9 to v45:0
assign xmm10 to v47:0
assign 10 to v47:0
assign xmm2 to v31:0
assign 2 to v31:0
assign xmm0 to v30:0
assign 0 to v30:0
assign xmm0 to v30:2
assign 0 to v30:2
assign xmm2 to v31:2
assign 2 to v31:2
assign xmm8 to v37:2
assign 8 to v37:2
assign xmm6 to v44:5
assign 6 to v44:5
assign xmm5 to v46:5
assign 5 to v46:5
assign xmm7 to v7:5
assign 7 to v7:5
assign xmm3 to v36:4
assign 3 to v36:4
assign xmm4 to v38:4
assign 4 to v38:4
assign xmm7 to v7:7
assign 7 to v7:7
assign xmm7 to v7:2
assign 7 to v7:2
spill count : 17
--- Raw source ---
(From, To) {
      var x1 = From.V[0];
      var x2 = To.V[0];
      var y1 = From.V[1];
      var y2 = To.V[1];
      var dx = Math.abs(x2 - x1);
      var dy = Math.abs(y2 - y1);
      var x = x1;
      var y = y1;
      var IncX1, IncY1;
      var IncX2, IncY2;  
      var Den;
      var Num;
      var NumAdd;
      var NumPix;

      if (x2 >= x1) {  IncX1 = 1; IncX2 = 1;  }
      else { IncX1 = -1; IncX2 = -1; }
      if (y2 >= y1)  {  IncY1 = 1; IncY2 = 1; }
      else { IncY1 = -1; IncY2 = -1; }
      if (dx >= dy) {
        IncX1 = 0;
        IncY2 = 0;
        Den = dx;
        Num = dx / 2;
        NumAdd = dy;
        NumPix = dx;
      }
      else {
        IncX2 = 0;
        IncY1 = 0;
        Den = dy;
        Num = dy / 2;
        NumAdd = dx;
        NumPix = dy;
      }

      NumPix = Math.round(Q.LastPx + NumPix);

      var i = Q.LastPx;
      for (; i < NumPix; i++) {
        Num += NumAdd;
        if (Num >= Den) {
          Num -= Den;
          x += IncX1;
          y += IncY1;
        }
        x += IncX2;
        y += IncY2;
      }
      Q.LastPx = NumPix;
    }


--- Optimized code ---
optimization_id = 10
source_position = 647
kind = TURBOFAN
name = DrawLine
stack_slots = 22
compiler = turbofan
address = 0x19db00089e41

Instructions (size = 2012)
0x19db00089e80     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db00089e87     7  483bd9         REX.W cmpq rbx,rcx
0x19db00089e8a     a  7418           jz 0x19db00089ea4  <+0x24>
0x19db00089e8c     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db00089e96    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db00089ea0    20  41ffd2         call r10
0x19db00089ea3    23  cc             int3l
0x19db00089ea4    24  8b59d0         movl rbx,[rcx-0x30]
0x19db00089ea7    27  4903dd         REX.W addq rbx,r13
0x19db00089eaa    2a  f6430701       testb [rbx+0x7],0x1
0x19db00089eae    2e  740d           jz 0x19db00089ebd  <+0x3d>
0x19db00089eb0    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db00089eba    3a  41ffe2         jmp r10
0x19db00089ebd    3d  55             push rbp
0x19db00089ebe    3e  4889e5         REX.W movq rbp,rsp
0x19db00089ec1    41  56             push rsi
0x19db00089ec2    42  57             push rdi
0x19db00089ec3    43  50             push rax
0x19db00089ec4    44  4881ec88000000 REX.W subq rsp,0x88
0x19db00089ecb    4b  488975c0       REX.W movq [rbp-0x40],rsi
0x19db00089ecf    4f  48897dc8       REX.W movq [rbp-0x38],rdi
0x19db00089ed3    53  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00089ed7    57  0f8634040000   jna 0x19db0008a311  <+0x491>
0x19db00089edd    5d  488b4d18       REX.W movq rcx,[rbp+0x18]
0x19db00089ee1    61  f6c101         testb rcx,0x1
0x19db00089ee4    64  0f84d5060000   jz 0x19db0008a5bf  <+0x73f>
0x19db00089eea    6a  8b79ff         movl rdi,[rcx-0x1]
0x19db00089eed    6d  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db00089ef7    77  4c3bd7         REX.W cmpq r10,rdi
0x19db00089efa    7a  7715           ja 0x19db00089f11  <+0x91>
0x19db00089efc    7c  48ba0200000000000000 REX.W movq rdx,0x2
0x19db00089f06    86  4c8b158bffffff REX.W movq r10,[rip+0xffffff8b]
0x19db00089f0d    8d  41ffd2         call r10
0x19db00089f10    90  cc             int3l
0x19db00089f11    91  41b8a5db3008   movl r8,0x830dba5       ;; (compressed) object: 0x19db0830dba5 <Map(HOLEY_ELEMENTS)>
0x19db00089f17    97  413bf8         cmpl rdi,r8
0x19db00089f1a    9a  0f842d000000   jz 0x19db00089f4d  <+0xcd>
0x19db00089f20    a0  41b95ddd3008   movl r9,0x830dd5d       ;; (compressed) object: 0x19db0830dd5d <Map(HOLEY_ELEMENTS)>
0x19db00089f26    a6  443bcf         cmpl r9,rdi
0x19db00089f29    a9  0f841e000000   jz 0x19db00089f4d  <+0xcd>
0x19db00089f2f    af  41b94dde3008   movl r9,0x830de4d       ;; (compressed) object: 0x19db0830de4d <Map(HOLEY_ELEMENTS)>
0x19db00089f35    b5  443bcf         cmpl r9,rdi
0x19db00089f38    b8  0f840f000000   jz 0x19db00089f4d  <+0xcd>
0x19db00089f3e    be  41b93ddf3008   movl r9,0x830df3d       ;; (compressed) object: 0x19db0830df3d <Map(HOLEY_ELEMENTS)>
0x19db00089f44    c4  443bcf         cmpl r9,rdi
0x19db00089f47    c7  0f8579060000   jnz 0x19db0008a5c6  <+0x746>
0x19db00089f4d    cd  8b790b         movl rdi,[rcx+0xb]
0x19db00089f50    d0  4903fd         REX.W addq rdi,r13
0x19db00089f53    d3  41b9559f3008   movl r9,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00089f59    d9  44394fff       cmpl [rdi-0x1],r9
0x19db00089f5d    dd  0f856a060000   jnz 0x19db0008a5cd  <+0x74d>
0x19db00089f63    e3  448b6707       movl r12,[rdi+0x7]
0x19db00089f67    e7  4d03e5         REX.W addq r12,r13
0x19db00089f6a    ea  8b7f0b         movl rdi,[rdi+0xb]
0x19db00089f6d    ed  d1ff           sarl rdi, 1
0x19db00089f6f    ef  83ff00         cmpl rdi,0x0
0x19db00089f72    f2  0f865c060000   jna 0x19db0008a5d4  <+0x754>
0x19db00089f78    f8  c4c17b10442407 vmovsd xmm0,[r12+0x7]
0x19db00089f7f    ff  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db00089f83   103  41f6c301       testb r11,0x1
0x19db00089f87   107  0f844e060000   jz 0x19db0008a5db  <+0x75b>
0x19db00089f8d   10d  458b73ff       movl r14,[r11-0x1]
0x19db00089f91   111  4c8b1557ffffff REX.W movq r10,[rip+0xffffff57]
0x19db00089f98   118  4d3bd6         REX.W cmpq r10,r14
0x19db00089f9b   11b  7712           ja 0x19db00089faf  <+0x12f>
0x19db00089f9d   11d  488b155affffff REX.W movq rdx,[rip+0xffffff5a]
0x19db00089fa4   124  4c8b15edfeffff REX.W movq r10,[rip+0xfffffeed]
0x19db00089fab   12b  41ffd2         call r10
0x19db00089fae   12e  cc             int3l
0x19db00089faf   12f  453bc6         cmpl r8,r14
0x19db00089fb2   132  0f842d000000   jz 0x19db00089fe5  <+0x165>
0x19db00089fb8   138  41b85ddd3008   movl r8,0x830dd5d       ;; (compressed) object: 0x19db0830dd5d <Map(HOLEY_ELEMENTS)>
0x19db00089fbe   13e  453bc6         cmpl r8,r14
0x19db00089fc1   141  0f841e000000   jz 0x19db00089fe5  <+0x165>
0x19db00089fc7   147  41b84dde3008   movl r8,0x830de4d       ;; (compressed) object: 0x19db0830de4d <Map(HOLEY_ELEMENTS)>
0x19db00089fcd   14d  453bc6         cmpl r8,r14
0x19db00089fd0   150  0f840f000000   jz 0x19db00089fe5  <+0x165>
0x19db00089fd6   156  41b83ddf3008   movl r8,0x830df3d       ;; (compressed) object: 0x19db0830df3d <Map(HOLEY_ELEMENTS)>
0x19db00089fdc   15c  453bc6         cmpl r8,r14
0x19db00089fdf   15f  0f85fd050000   jnz 0x19db0008a5e2  <+0x762>
0x19db00089fe5   165  458b430b       movl r8,[r11+0xb]
0x19db00089fe9   169  4d03c5         REX.W addq r8,r13
0x19db00089fec   16c  453948ff       cmpl [r8-0x1],r9
0x19db00089ff0   170  0f85f3050000   jnz 0x19db0008a5e9  <+0x769>
0x19db00089ff6   176  458b4807       movl r9,[r8+0x7]
0x19db00089ffa   17a  4d03cd         REX.W addq r9,r13
0x19db00089ffd   17d  458b400b       movl r8,[r8+0xb]
0x19db0008a001   181  41d1f8         sarl r8, 1
0x19db0008a004   184  4183f800       cmpl r8,0x0
0x19db0008a008   188  0f86e2050000   jna 0x19db0008a5f0  <+0x770>
0x19db0008a00e   18e  c4c17b104907   vmovsd xmm1,[r9+0x7]
0x19db0008a014   194  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008a018   198  0f830b000000   jnc 0x19db0008a029  <+0x1a9>
0x19db0008a01e   19e  41beffffffff   movl r14,0xffffffff
0x19db0008a024   1a4  e906000000     jmp 0x19db0008a02f  <+0x1af>
0x19db0008a029   1a9  41be01000000   movl r14,0x1
0x19db0008a02f   1af  83ff01         cmpl rdi,0x1
0x19db0008a032   1b2  0f86bf050000   jna 0x19db0008a5f7  <+0x777>
0x19db0008a038   1b8  c4c17b1054240f vmovsd xmm2,[r12+0xf]
0x19db0008a03f   1bf  4183f801       cmpl r8,0x1
0x19db0008a043   1c3  0f86b5050000   jna 0x19db0008a5fe  <+0x77e>
0x19db0008a049   1c9  c4c17b10610f   vmovsd xmm4,[r9+0xf]
0x19db0008a04f   1cf  c5f92ee2       vucomisd xmm4,xmm2
0x19db0008a053   1d3  0f830a000000   jnc 0x19db0008a063  <+0x1e3>
0x19db0008a059   1d9  b8ffffffff     movl rax,0xffffffff
0x19db0008a05e   1de  e905000000     jmp 0x19db0008a068  <+0x1e8>
0x19db0008a063   1e3  b801000000     movl rax,0x1
0x19db0008a068   1e8  c5db5cda       vsubsd xmm3,xmm4,xmm2
0x19db0008a06c   1ec  c5d176ed       vpcmpeqd xmm5,xmm5,xmm5
0x19db0008a070   1f0  c5d173d501     vpsrlq xmm5,xmm5,1
0x19db0008a075   1f5  c5d154e3       vandpd xmm4,xmm5,xmm3
0x19db0008a079   1f9  c5f35cc8       vsubsd xmm1,xmm1,xmm0
0x19db0008a07d   1fd  c5d176ed       vpcmpeqd xmm5,xmm5,xmm5
0x19db0008a081   201  c5d173d501     vpsrlq xmm5,xmm5,1
0x19db0008a086   206  c5d154d9       vandpd xmm3,xmm5,xmm1
0x19db0008a08a   20a  c5f92edc       vucomisd xmm3,xmm4
0x19db0008a08e   20e  0f832f000000   jnc 0x19db0008a0c3  <+0x243>
0x19db0008a094   214  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008a098   218  c5f173f137     vpsllq xmm1,xmm1,55
0x19db0008a09d   21d  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0008a0a2   222  c5db59e9       vmulsd xmm5,xmm4,xmm1
0x19db0008a0a6   226  c57928fb       vmovapd xmm15,xmm3
0x19db0008a0aa   22a  c5f928dc       vmovapd xmm3,xmm4
0x19db0008a0ae   22e  c4c17928e7     vmovapd xmm4,xmm15
0x19db0008a0b3   233  4c8bc8         REX.W movq r9,rax
0x19db0008a0b6   236  33c0           xorl rax,rax
0x19db0008a0b8   238  4d8bc6         REX.W movq r8,r14
0x19db0008a0bb   23b  4c8bf0         REX.W movq r14,rax
0x19db0008a0be   23e  e918000000     jmp 0x19db0008a0db  <+0x25b>
0x19db0008a0c3   243  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008a0c7   247  c5f173f137     vpsllq xmm1,xmm1,55
0x19db0008a0cc   24c  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0008a0d1   251  c5e359e9       vmulsd xmm5,xmm3,xmm1
0x19db0008a0d5   255  4533c0         xorl r8,r8
0x19db0008a0d8   258  4d8bc8         REX.W movq r9,r8
0x19db0008a0db   25b  ba39692e08     movl rdx,0x82e6939      ;; (compressed) object: 0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)>
0x19db0008a0e0   260  49bc09652e08db190000 REX.W movq r12,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db0008a0ea   26a  413954240b     cmpl [r12+0xb],rdx
0x19db0008a0ef   26f  0f8510050000   jnz 0x19db0008a605  <+0x785>
0x19db0008a0f5   275  458b642403     movl r12,[r12+0x3]
0x19db0008a0fa   27a  4d03e5         REX.W addq r12,r13
0x19db0008a0fd   27d  458b642463     movl r12,[r12+0x63]
0x19db0008a102   282  4c8b15e6fdffff REX.W movq r10,[rip+0xfffffde6]
0x19db0008a109   289  4d39e2         REX.W cmpq r10,r12
0x19db0008a10c   28c  7712           ja 0x19db0008a120  <+0x2a0>
0x19db0008a10e   28e  488b15e9fdffff REX.W movq rdx,[rip+0xfffffde9]
0x19db0008a115   295  4c8b157cfdffff REX.W movq r10,[rip+0xfffffd7c]
0x19db0008a11c   29c  41ffd2         call r10
0x19db0008a11f   29f  cc             int3l
0x19db0008a120   2a0  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db0008a124   2a4  418b570f       movl rdx,[r15+0xf]
0x19db0008a128   2a8  4903d5         REX.W addq rdx,r13
0x19db0008a12b   2ab  f6c201         testb rdx,0x1
0x19db0008a12e   2ae  0f84d8040000   jz 0x19db0008a60c  <+0x78c>
0x19db0008a134   2b4  be6ddc3008     movl rsi,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008a139   2b9  3972ff         cmpl [rdx-0x1],rsi
0x19db0008a13c   2bc  0f85d1040000   jnz 0x19db0008a613  <+0x793>
0x19db0008a142   2c2  8b5203         movl rdx,[rdx+0x3]
0x19db0008a145   2c5  4903d5         REX.W addq rdx,r13
0x19db0008a148   2c8  8b7217         movl rsi,[rdx+0x17]
0x19db0008a14b   2cb  4903f5         REX.W addq rsi,r13
0x19db0008a14e   2ce  488bde         REX.W movq rbx,rsi
0x19db0008a151   2d1  d1fb           sarl rbx, 1
0x19db0008a153   2d3  488955e0       REX.W movq [rbp-0x20],rdx
0x19db0008a157   2d7  40f6c601       testb rsi,0x1
0x19db0008a15b   2db  0f94c2         setzl dl
0x19db0008a15e   2de  0fb6d2         movzxbl rdx,rdx
0x19db0008a161   2e1  33ff           xorl rdi,rdi
0x19db0008a163   2e3  83fa00         cmpl rdx,0x0
0x19db0008a166   2e6  0f852c000000   jnz 0x19db0008a198  <+0x318>
0x19db0008a16c   2ec  8b4eff         movl rcx,[rsi-0x1]
0x19db0008a16f   2ef  4903cd         REX.W addq rcx,r13
0x19db0008a172   2f2  41398d30010000 cmpl [r13+0x130] (root (heap_number_map)),rcx
0x19db0008a179   2f9  0f840b000000   jz 0x19db0008a18a  <+0x30a>
0x19db0008a17f   2ff  6683790743     cmpw [rcx+0x7],0x43
0x19db0008a184   304  0f8590040000   jnz 0x19db0008a61a  <+0x79a>
0x19db0008a18a   30a  c5fb107603     vmovsd xmm6,[rsi+0x3]
0x19db0008a18f   30f  488b4d18       REX.W movq rcx,[rbp+0x18]
0x19db0008a193   313  e904000000     jmp 0x19db0008a19c  <+0x31c>
0x19db0008a198   318  c5832af3       vcvtlsi2sd xmm6,xmm15,rbx
0x19db0008a19c   31c  c5cb58f3       vaddsd xmm6,xmm6,xmm3
0x19db0008a1a0   320  c4e3410bfe0a   vroundsd xmm7,xmm7,xmm6,0xa
0x19db0008a1a6   326  c5c35cc9       vsubsd xmm1,xmm7,xmm1
0x19db0008a1aa   32a  c5f92ef1       vucomisd xmm6,xmm1
0x19db0008a1ae   32e  0f8312000000   jnc 0x19db0008a1c6  <+0x346>
0x19db0008a1b4   334  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008a1b8   338  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0008a1bd   33d  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0008a1c2   342  c5c35cf9       vsubsd xmm7,xmm7,xmm1
0x19db0008a1c6   346  c5fb2cf7       vcvttsd2si rsi,xmm7
0x19db0008a1ca   34a  b959682e08     movl rcx,0x82e6859      ;; (compressed) object: 0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)>
0x19db0008a1cf   34f  4439e1         cmpl rcx,r12
0x19db0008a1d2   352  0f8549040000   jnz 0x19db0008a621  <+0x7a1>
0x19db0008a1d8   358  c5832ace       vcvtlsi2sd xmm1,xmm15,rsi
0x19db0008a1dc   35c  83fa00         cmpl rdx,0x0
0x19db0008a1df   35f  0f8443040000   jz 0x19db0008a628  <+0x7a8>
0x19db0008a1e5   365  c5f92ecf       vucomisd xmm1,xmm7
0x19db0008a1e9   369  0f8a40040000   jpe 0x19db0008a62f  <+0x7af>
0x19db0008a1ef   36f  0f853a040000   jnz 0x19db0008a62f  <+0x7af>
0x19db0008a1f5   375  3bde           cmpl rbx,rsi
0x19db0008a1f7   377  0f8dc3000000   jge 0x19db0008a2c0  <+0x440>
0x19db0008a1fd   37d  c5d358cc       vaddsd xmm1,xmm5,xmm4
0x19db0008a201   381  c5f92ecb       vucomisd xmm1,xmm3
0x19db0008a205   385  0f8215000000   jc 0x19db0008a220  <+0x3a0>
0x19db0008a20b   38b  c5832ae8       vcvtlsi2sd xmm5,xmm15,rax
0x19db0008a20f   38f  c4c1032af0     vcvtlsi2sd xmm6,xmm15,r8
0x19db0008a214   394  c5f35ccb       vsubsd xmm1,xmm1,xmm3
0x19db0008a218   398  c5d358d2       vaddsd xmm2,xmm5,xmm2
0x19db0008a21c   39c  c5cb58c0       vaddsd xmm0,xmm6,xmm0
0x19db0008a220   3a0  c4c1032ae9     vcvtlsi2sd xmm5,xmm15,r9
0x19db0008a225   3a5  c4c1032af6     vcvtlsi2sd xmm6,xmm15,r14
0x19db0008a22a   3aa  83c301         addl rbx,0x1
0x19db0008a22d   3ad  0f8003040000   jo 0x19db0008a636  <+0x7b6>
0x19db0008a233   3b3  c5eb58d5       vaddsd xmm2,xmm2,xmm5
0x19db0008a237   3b7  c5fb58c6       vaddsd xmm0,xmm0,xmm6
0x19db0008a23b   3bb  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008a23f   3bf  0f8713000000   ja 0x19db0008a258  <+0x3d8>
0x19db0008a245   3c5  e900010000     jmp 0x19db0008a34a  <+0x4ca>
0x19db0008a24a   3ca  660f1f440000   nop
0x19db0008a250   3d0  488bd9         REX.W movq rbx,rcx
0x19db0008a253   3d3  c4c17928c8     vmovapd xmm1,xmm8
0x19db0008a258   3d8  3bde           cmpl rbx,rsi
0x19db0008a25a   3da  0f8d60000000   jge 0x19db0008a2c0  <+0x440>
0x19db0008a260   3e0  c57358c4       vaddsd xmm8,xmm1,xmm4
0x19db0008a264   3e4  c5792ec3       vucomisd xmm8,xmm3
0x19db0008a268   3e8  0f830d000000   jnc 0x19db0008a27b  <+0x3fb>
0x19db0008a26e   3ee  c57928d2       vmovapd xmm10,xmm2
0x19db0008a272   3f2  c57928c8       vmovapd xmm9,xmm0
0x19db0008a276   3f6  e924000000     jmp 0x19db0008a29f  <+0x41f>
0x19db0008a27b   3fb  c5032ac8       vcvtlsi2sd xmm9,xmm15,rax
0x19db0008a27f   3ff  c53358ca       vaddsd xmm9,xmm9,xmm2
0x19db0008a283   403  c53b5cc3       vsubsd xmm8,xmm8,xmm3
0x19db0008a287   407  c441032ad0     vcvtlsi2sd xmm10,xmm15,r8
0x19db0008a28c   40c  c52b58d0       vaddsd xmm10,xmm10,xmm0
0x19db0008a290   410  c4417928fa     vmovapd xmm15,xmm10
0x19db0008a295   415  c4417928d1     vmovapd xmm10,xmm9
0x19db0008a29a   41a  c4417928cf     vmovapd xmm9,xmm15
0x19db0008a29f   41f  488bcb         REX.W movq rcx,rbx
0x19db0008a2a2   422  83c101         addl rcx,0x1
0x19db0008a2a5   425  0f8092030000   jo 0x19db0008a63d  <+0x7bd>
0x19db0008a2ab   42b  c4c15358d2     vaddsd xmm2,xmm5,xmm10
0x19db0008a2b0   430  c4c14b58c1     vaddsd xmm0,xmm6,xmm9
0x19db0008a2b5   435  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008a2b9   439  7795           ja 0x19db0008a250  <+0x3d0>
0x19db0008a2bb   43b  e95b010000     jmp 0x19db0008a41b  <+0x59b>
0x19db0008a2c0   440  83fe00         cmpl rsi,0x0
0x19db0008a2c3   443  0f841d020000   jz 0x19db0008a4e6  <+0x666>
0x19db0008a2c9   449  488bce         REX.W movq rcx,rsi
0x19db0008a2cc   44c  03f1           addl rsi,rcx
0x19db0008a2ce   44e  0f802b020000   jo 0x19db0008a4ff  <+0x67f>
0x19db0008a2d4   454  488b4de0       REX.W movq rcx,[rbp-0x20]
0x19db0008a2d8   458  897117         movl [rcx+0x17],rsi
0x19db0008a2db   45b  48c7c70000fcff REX.W movq rdi,0xfffc0000
0x19db0008a2e2   462  4823f9         REX.W andq rdi,rcx
0x19db0008a2e5   465  f6470804       testb [rdi+0x8],0x4
0x19db0008a2e9   469  0f857d020000   jnz 0x19db0008a56c  <+0x6ec>
0x19db0008a2ef   46f  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db0008a2f6   476  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db0008a2fa   47a  488be5         REX.W movq rsp,rbp
0x19db0008a2fd   47d  5d             pop rbp
0x19db0008a2fe   47e  4883f902       REX.W cmpq rcx,0x2
0x19db0008a302   482  7f03           jg 0x19db0008a307  <+0x487>
0x19db0008a304   484  c21800         ret 0x18
0x19db0008a307   487  415a           pop r10
0x19db0008a309   489  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db0008a30e   48e  4152           push r10
0x19db0008a310   490  c3             retl
0x19db0008a311   491  48b99000000000000000 REX.W movq rcx,0x90
0x19db0008a31b   49b  51             push rcx
0x19db0008a31c   49c  b801000000     movl rax,0x1
0x19db0008a321   4a1  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db0008a32b   4ab  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008a335   4b5  488bc8         REX.W movq rcx,rax
0x19db0008a338   4b8  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db0008a342   4c2  41ffd2         call r10
0x19db0008a345   4c5  e993fbffff     jmp 0x19db00089edd  <+0x5d>
0x19db0008a34a   4ca  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db0008a34f   4cf  488975d0       REX.W movq [rbp-0x30],rsi
0x19db0008a353   4d3  4c8945b8       REX.W movq [rbp-0x48],r8
0x19db0008a357   4d7  488945b0       REX.W movq [rbp-0x50],rax
0x19db0008a35b   4db  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db0008a35f   4df  4c894da0       REX.W movq [rbp-0x60],r9
0x19db0008a363   4e3  c5fb115d98     vmovsd [rbp-0x68],xmm3
0x19db0008a368   4e8  c5fb116588     vmovsd [rbp-0x78],xmm4
0x19db0008a36d   4ed  c5fb117580     vmovsd [rbp-0x80],xmm6
0x19db0008a372   4f2  c5fb11ad78ffffff vmovsd [rbp-0x88],xmm5
0x19db0008a37a   4fa  c5fb119570ffffff vmovsd [rbp-0x90],xmm2
0x19db0008a382   502  c5fb114d90     vmovsd [rbp-0x70],xmm1
0x19db0008a387   507  c5fb118568ffffff vmovsd [rbp-0x98],xmm0
0x19db0008a38f   50f  48899d60ffffff REX.W movq [rbp-0xa0],rbx
0x19db0008a396   516  4c8be3         REX.W movq r12,rbx
0x19db0008a399   519  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db0008a3a3   523  488bc8         REX.W movq rcx,rax
0x19db0008a3a6   526  488bc7         REX.W movq rax,rdi
0x19db0008a3a9   529  488bd6         REX.W movq rdx,rsi
0x19db0008a3ac   52c  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008a3b6   536  4c8b157dffffff REX.W movq r10,[rip+0xffffff7d]
0x19db0008a3bd   53d  41ffd2         call r10
0x19db0008a3c0   540  c5fb107dd8     vmovsd xmm7,[rbp-0x28]
0x19db0008a3c5   545  488b75d0       REX.W movq rsi,[rbp-0x30]
0x19db0008a3c9   549  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db0008a3cd   54d  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db0008a3d1   551  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db0008a3d5   555  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db0008a3d9   559  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db0008a3dd   55d  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0008a3e1   561  c5fb105d98     vmovsd xmm3,[rbp-0x68]
0x19db0008a3e6   566  c5fb106588     vmovsd xmm4,[rbp-0x78]
0x19db0008a3eb   56b  33ff           xorl rdi,rdi
0x19db0008a3ed   56d  c5fb107580     vmovsd xmm6,[rbp-0x80]
0x19db0008a3f2   572  c5fb10ad78ffffff vmovsd xmm5,[rbp-0x88]
0x19db0008a3fa   57a  c5fb109570ffffff vmovsd xmm2,[rbp-0x90]
0x19db0008a402   582  c5fb104d90     vmovsd xmm1,[rbp-0x70]
0x19db0008a407   587  c5fb108568ffffff vmovsd xmm0,[rbp-0x98]
0x19db0008a40f   58f  488b9d60ffffff REX.W movq rbx,[rbp-0xa0]
0x19db0008a416   596  e93dfeffff     jmp 0x19db0008a258  <+0x3d8>
0x19db0008a41b   59b  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db0008a420   5a0  488975d0       REX.W movq [rbp-0x30],rsi
0x19db0008a424   5a4  c5fb118568ffffff vmovsd [rbp-0x98],xmm0
0x19db0008a42c   5ac  c5fb119570ffffff vmovsd [rbp-0x90],xmm2
0x19db0008a434   5b4  4c8945b8       REX.W movq [rbp-0x48],r8
0x19db0008a438   5b8  488945b0       REX.W movq [rbp-0x50],rax
0x19db0008a43c   5bc  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db0008a440   5c0  4c894da0       REX.W movq [rbp-0x60],r9
0x19db0008a444   5c4  c5fb115d98     vmovsd [rbp-0x68],xmm3
0x19db0008a449   5c9  c57b114590     vmovsd [rbp-0x70],xmm8
0x19db0008a44e   5ce  c5fb116588     vmovsd [rbp-0x78],xmm4
0x19db0008a453   5d3  48898d60ffffff REX.W movq [rbp-0xa0],rcx
0x19db0008a45a   5da  c5fb117580     vmovsd [rbp-0x80],xmm6
0x19db0008a45f   5df  c5fb11ad78ffffff vmovsd [rbp-0x88],xmm5
0x19db0008a467   5e7  488b1d2dffffff REX.W movq rbx,[rip+0xffffff2d]
0x19db0008a46e   5ee  4c8be0         REX.W movq r12,rax
0x19db0008a471   5f1  488bc7         REX.W movq rax,rdi
0x19db0008a474   5f4  488bd6         REX.W movq rdx,rsi
0x19db0008a477   5f7  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008a481   601  4c8b15b2feffff REX.W movq r10,[rip+0xfffffeb2]
0x19db0008a488   608  41ffd2         call r10
0x19db0008a48b   60b  c5fb107dd8     vmovsd xmm7,[rbp-0x28]
0x19db0008a490   610  488b75d0       REX.W movq rsi,[rbp-0x30]
0x19db0008a494   614  4c8b5d20       REX.W movq r11,[rbp+0x20]
0x19db0008a498   618  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db0008a49c   61c  c5fb108568ffffff vmovsd xmm0,[rbp-0x98]
0x19db0008a4a4   624  c5fb109570ffffff vmovsd xmm2,[rbp-0x90]
0x19db0008a4ac   62c  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db0008a4b0   630  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db0008a4b4   634  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db0008a4b8   638  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0008a4bc   63c  c5fb105d98     vmovsd xmm3,[rbp-0x68]
0x19db0008a4c1   641  c57b104590     vmovsd xmm8,[rbp-0x70]
0x19db0008a4c6   646  c5fb106588     vmovsd xmm4,[rbp-0x78]
0x19db0008a4cb   64b  488b8d60ffffff REX.W movq rcx,[rbp-0xa0]
0x19db0008a4d2   652  33ff           xorl rdi,rdi
0x19db0008a4d4   654  c5fb107580     vmovsd xmm6,[rbp-0x80]
0x19db0008a4d9   659  c5fb10ad78ffffff vmovsd xmm5,[rbp-0x88]
0x19db0008a4e1   661  e96afdffff     jmp 0x19db0008a250  <+0x3d0>
0x19db0008a4e6   666  c4e37916f901   vpextrd rcx,xmm7,0x1,
0x19db0008a4ec   66c  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db0008a4f1   671  83f900         cmpl rcx,0x0
0x19db0008a4f4   674  0f8c0a000000   jl 0x19db0008a504  <+0x684>
0x19db0008a4fa   67a  e9cafdffff     jmp 0x19db0008a2c9  <+0x449>
0x19db0008a4ff   67f  c5fb117dd8     vmovsd [rbp-0x28],xmm7
0x19db0008a504   684  48b9f87d6d5555550000 REX.W movq rcx,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db0008a50e   68e  488b39         REX.W movq rdi,[rcx]
0x19db0008a511   691  4c8d470c       REX.W leaq r8,[rdi+0xc]
0x19db0008a515   695  49b9007e6d5555550000 REX.W movq r9,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db0008a51f   69f  4d3901         REX.W cmpq [r9],r8
0x19db0008a522   6a2  0f8716000000   ja 0x19db0008a53e  <+0x6be>
0x19db0008a528   6a8  ba0c000000     movl rdx,0xc
0x19db0008a52d   6ad  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db0008a537   6b7  41ffd2         call r10
0x19db0008a53a   6ba  488d78ff       REX.W leaq rdi,[rax-0x1]
0x19db0008a53e   6be  488d4f0c       REX.W leaq rcx,[rdi+0xc]
0x19db0008a542   6c2  4c8b05bdffffff REX.W movq r8,[rip+0xffffffbd]
0x19db0008a549   6c9  498908         REX.W movq [r8],rcx
0x19db0008a54c   6cc  488d4f01       REX.W leaq rcx,[rdi+0x1]
0x19db0008a550   6d0  498bbd30010000 REX.W movq rdi,[r13+0x130] (root (heap_number_map))
0x19db0008a557   6d7  8979ff         movl [rcx-0x1],rdi
0x19db0008a55a   6da  c5fb107dd8     vmovsd xmm7,[rbp-0x28]
0x19db0008a55f   6df  c5fb117903     vmovsd [rcx+0x3],xmm7
0x19db0008a564   6e4  488bf1         REX.W movq rsi,rcx
0x19db0008a567   6e7  e968fdffff     jmp 0x19db0008a2d4  <+0x454>
0x19db0008a56c   6ec  40f6c601       testb rsi,0x1
0x19db0008a570   6f0  0f8479fdffff   jz 0x19db0008a2ef  <+0x46f>
0x19db0008a576   6f6  8bf6           movl rsi,rsi
0x19db0008a578   6f8  4903f5         REX.W addq rsi,r13
0x19db0008a57b   6fb  48c7c70000fcff REX.W movq rdi,0xfffc0000
0x19db0008a582   702  4823fe         REX.W andq rdi,rsi
0x19db0008a585   705  f6470802       testb [rdi+0x8],0x2
0x19db0008a589   709  0f8460fdffff   jz 0x19db0008a2ef  <+0x46f>
0x19db0008a58f   70f  4c8d4117       REX.W leaq r8,[rcx+0x17]
0x19db0008a593   713  50             push rax
0x19db0008a594   714  51             push rcx
0x19db0008a595   715  52             push rdx
0x19db0008a596   716  56             push rsi
0x19db0008a597   717  57             push rdi
0x19db0008a598   718  498bf0         REX.W movq rsi,r8
0x19db0008a59b   71b  488bf9         REX.W movq rdi,rcx
0x19db0008a59e   71e  33d2           xorl rdx,rdx
0x19db0008a5a0   720  488b0d57f9ffff REX.W movq rcx,[rip+0xfffff957]
0x19db0008a5a7   727  49bac065b8f5ff7f0000 REX.W movq r10,0x7ffff5b865c0  (RecordWrite)    ;; off heap target
0x19db0008a5b1   731  41ffd2         call r10
0x19db0008a5b4   734  5f             pop rdi
0x19db0008a5b5   735  5e             pop rsi
0x19db0008a5b6   736  5a             pop rdx
0x19db0008a5b7   737  59             pop rcx
0x19db0008a5b8   738  58             pop rax
0x19db0008a5b9   739  e931fdffff     jmp 0x19db0008a2ef  <+0x46f>
0x19db0008a5be   73e  90             nop
0x19db0008a5bf   73f  41ff95f8360000 call [r13+0x36f8]
0x19db0008a5c6   746  41ff95f8360000 call [r13+0x36f8]
0x19db0008a5cd   74d  41ff95f8360000 call [r13+0x36f8]
0x19db0008a5d4   754  41ff95f8360000 call [r13+0x36f8]
0x19db0008a5db   75b  41ff95f8360000 call [r13+0x36f8]
0x19db0008a5e2   762  41ff95f8360000 call [r13+0x36f8]
0x19db0008a5e9   769  41ff95f8360000 call [r13+0x36f8]
0x19db0008a5f0   770  41ff95f8360000 call [r13+0x36f8]
0x19db0008a5f7   777  41ff95f8360000 call [r13+0x36f8]
0x19db0008a5fe   77e  41ff95f8360000 call [r13+0x36f8]
0x19db0008a605   785  41ff95f8360000 call [r13+0x36f8]
0x19db0008a60c   78c  41ff95f8360000 call [r13+0x36f8]
0x19db0008a613   793  41ff95f8360000 call [r13+0x36f8]
0x19db0008a61a   79a  41ff95f8360000 call [r13+0x36f8]
0x19db0008a621   7a1  41ff95f8360000 call [r13+0x36f8]
0x19db0008a628   7a8  41ff95f8360000 call [r13+0x36f8]
0x19db0008a62f   7af  41ff95f8360000 call [r13+0x36f8]
0x19db0008a636   7b6  41ff95f8360000 call [r13+0x36f8]
0x19db0008a63d   7bd  41ff95f8360000 call [r13+0x36f8]
0x19db0008a644   7c4  41ff9510370000 call [r13+0x3710]
0x19db0008a64b   7cb  41ff9510370000 call [r13+0x3710]
0x19db0008a652   7d2  41ff9510370000 call [r13+0x3710]
0x19db0008a659   7d9  0f1f00         nop

Source positions:
 pc offset  position
       49c       647

Inlined functions (count = 0)

Deoptimization Input Data (deopt points = 22)
 index  bytecode-offset    pc
     0                0    NA 
     1                0    NA 
     2                0    NA 
     3                0    NA 
     4                0    NA 
     5                0    NA 
     6                0    NA 
     7                0    NA 
     8                0    NA 
     9                0    NA 
    10                0    NA 
    11                0    NA 
    12                0    NA 
    13                0    NA 
    14                0    NA 
    15                0    NA 
    16                0    NA 
    17                0    NA 
    18              260    NA 
    19               -1   4c5 
    20              338   540 
    21              338   60b 

Safepoints (size = 68)
0x19db0008a345     4c5   7c4  0000000000001100000000 (sp -> fp)      19
0x19db0008a3c0     540   7cb  0000000000001100100000 (sp -> fp)      20
0x19db0008a48b     60b   7d2  0000000000001100100000 (sp -> fp)      21
0x19db0008a53a     6ba    NA  0000000000000000100000 (sp -> fp)  <none>

RelocInfo (size = 64)
0x19db00089e98  off heap target
0x19db00089eb2  off heap target
0x19db00089f13  compressed embedded object  (0x19db0830dba5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00089f22  compressed embedded object  (0x19db0830dd5d <Map(HOLEY_ELEMENTS)> compressed)
0x19db00089f31  compressed embedded object  (0x19db0830de4d <Map(HOLEY_ELEMENTS)> compressed)
0x19db00089f40  compressed embedded object  (0x19db0830df3d <Map(HOLEY_ELEMENTS)> compressed)
0x19db00089f55  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00089fba  compressed embedded object  (0x19db0830dd5d <Map(HOLEY_ELEMENTS)> compressed)
0x19db00089fc9  compressed embedded object  (0x19db0830de4d <Map(HOLEY_ELEMENTS)> compressed)
0x19db00089fd8  compressed embedded object  (0x19db0830df3d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008a0dc  compressed embedded object  (0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)> compressed)
0x19db0008a0e2  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db0008a135  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008a1cb  compressed embedded object  (0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)> compressed)
0x19db0008a323  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db0008a32d  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008a33a  off heap target
0x19db0008a39b  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db0008a3ae  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008a479  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008a506  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db0008a517  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db0008a52f  off heap target
0x19db0008a5a9  off heap target

--- End code ---
assign 0 to v-1:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
assign 3 to v-4:0
assign 2 to v-3:0
assign 1 to v-2:0
assign 6 to v-7:0
assign 7 to v-8:0
assign 8 to v-9:0
assign 9 to v-10:0
assign 11 to v-12:0
assign 12 to v-13:0
assign 14 to v-15:0
assign 15 to v-16:0
assign 0 to v-33:0
assign 1 to v-34:0
assign 2 to v-35:0
assign 3 to v-36:0
assign 4 to v-37:0
assign 5 to v-38:0
assign 6 to v-39:0
assign 7 to v-40:0
assign 8 to v-41:0
assign 9 to v-42:0
assign 10 to v-43:0
assign 11 to v-44:0
assign 12 to v-45:0
assign 13 to v-46:0
assign 14 to v-47:0
------------------------
function: DrawQube
add v867->v862
add v863->v865
add v857->v861
add v860->v861
add v859->v855
add v839->v855
add v839->v855
add v839->v855
add v839->v855
add v858->v857
add v856->v857
add v49->v3
add v24->v3
add v855->v3
add v6->v2
add v10->v6
add v854->v6
add v851->v6
add v10->v6
add v850->v6
add v759->v2
add v760->v2
add v848->v6
add v847->v848
add v25->v847
add v843->v847
add v846->v847
adding pairs 2, v705:0x7fffd017aff8, v843:0x7fffd013c378
add v842->v759
add v841->v759
add v762->v759
add v837->v839
add v835->v830
add v831->v833
add v824->v829
add v828->v829
add v827->v803
add v826->v803
add v826->v803
add v826->v803
add v826->v803
add v825->v824
add v823->v824
add v43->v740
add v24->v740
add v803->v740
add v25->v760
add v820->v760
add v822->v760
add v819->v820
add v43->v819
add v815->v819
add v818->v819
add v812->v815
add v43->v761
add v811->v761
add v817->v761
add v813->v815
add v810->v815
add v805->v803
add v798->v760
add v800->v760
adding pairs 2, v781:0x7fffd017acb0, v798:0x7fffd015c4e8
add v43->v797
add v793->v797
add v796->v797
add v776->v793
add v791->v761
add v795->v761
add v775->v791
add v778->v793
add v777->v791
add v774->v793
add v773->v791
add v783->v740
add v789->v740
add v790->v783
add v788->v782
add v763->v781
add v780->v740
adding pairs 3, v781:0x7fffd017acb0, v765:0x7fffd017ab98
add v49->v3
add v751->v3
add v747->v3
add v757->v751
add v756->v755
add v750->v748
add v745->v705
add v744->v3
add v736->v705
add v49->v3
add v725->v3
add v734->v3
add v732->v725
add v43->v731
add v728->v731
add v730->v731
add v727->v728
add v723->v725
add v43->v722
add v719->v722
add v721->v722
add v718->v719
add v717->v6
add v716->v717
add v25->v716
add v713->v716
add v715->v716
add v710->v713
add v712->v710
add v711->v710
add v698->v2
add v707->v6
add v709->v6
add v700->v707
add v701->v707
add v706->v698
add v704->v698
add v694->v2
add v10->v694
add v696->v694
add v691->v696
add v25->v691
add v689->v691
add v695->v691
add v692->v689
add v688->v687
add v674->v2
add v10->v674
add v686->v674
add v685->v686
add v25->v685
add v682->v685
add v684->v685
add v679->v682
add v681->v679
add v680->v679
add v667->v2
add v676->v674
add v678->v674
add v669->v676
add v670->v676
add v675->v667
add v673->v667
add v661->v2
add v10->v661
add v665->v661
add v663->v665
add v25->v663
add v658->v663
add v664->v658
add v662->v663
add v659->v658
add v645->v2
add v10->v645
add v657->v645
add v656->v657
add v25->v656
add v653->v656
add v655->v656
add v650->v653
add v652->v650
add v651->v650
add v638->v2
add v647->v645
add v649->v645
add v640->v647
add v641->v647
add v646->v638
add v644->v638
add v632->v2
add v10->v632
add v636->v632
add v634->v636
add v25->v634
add v629->v634
add v635->v629
add v633->v634
add v630->v629
add v616->v2
add v10->v616
add v628->v616
add v627->v628
add v25->v627
add v624->v627
add v626->v627
add v621->v624
add v623->v621
add v622->v621
add v609->v2
add v618->v616
add v620->v616
add v611->v618
add v612->v618
add v617->v609
add v615->v609
add v603->v2
add v10->v603
add v607->v603
add v605->v607
add v25->v605
add v600->v605
add v606->v600
add v604->v605
add v601->v600
add v49->v3
add v597->v3
add v599->v3
add v595->v597
add v43->v594
add v591->v594
add v593->v594
add v590->v591
add v581->v2
add v10->v581
add v589->v581
add v588->v589
add v25->v588
add v585->v588
add v587->v588
add v582->v585
add v584->v582
add v583->v582
add v570->v2
add v578->v581
add v580->v581
add v572->v578
add v573->v578
add v577->v570
add v576->v570
add v566->v2
add v10->v566
add v568->v566
add v562->v568
add v25->v562
add v560->v562
add v567->v562
add v564->v560
add v559->v558
add v415->v2
add v10->v415
add v557->v415
add v556->v557
add v25->v556
add v423->v556
add v555->v556
add v552->v423
add v554->v552
add v553->v552
add v449->v2
add v549->v415
add v551->v415
add v450->v549
add v451->v549
add v548->v449
add v547->v449
add v452->v449
add v543->v450
add v541->v450
add v43->v541
add v531->v541
add v540->v541
add v491->v531
add v536->v451
add v534->v451
add v43->v534
add v529->v534
add v533->v534
add v525->v529
add v489->v531
add v528->v529
add v516->v515
add v514->v515
add v501->v514
add v513->v452
add v10->v513
add v427->v513
add v511->v427
add v512->v511
add v509->v511
add v443->v438
add v439->v441
add v437->v436
add v435->v436
add v434->v432
add v433->v432
add v428->v427
add v426->v423
add v425->v423
add v420->v423
add v422->v420
add v421->v420
add v408->v2
add v417->v415
add v419->v415
add v410->v417
add v411->v417
add v416->v408
add v414->v408
add v402->v2
add v10->v402
add v406->v402
add v404->v406
add v25->v404
add v399->v404
add v405->v399
add v403->v404
add v400->v399
add v262->v2
add v10->v262
add v398->v262
add v397->v398
add v25->v397
add v259->v397
add v396->v397
add v392->v259
add v394->v392
add v393->v392
add v285->v2
add v389->v262
add v391->v262
add v286->v389
add v287->v389
add v388->v285
add v387->v285
add v288->v285
add v383->v286
add v381->v286
add v43->v381
add v371->v381
add v380->v381
add v329->v371
add v376->v287
add v374->v287
add v43->v374
add v369->v374
add v373->v374
add v363->v369
add v327->v371
add v366->v369
add v354->v353
add v352->v353
add v339->v352
add v351->v288
add v10->v351
add v263->v351
add v349->v263
add v350->v349
add v347->v349
add v279->v274
add v275->v277
add v273->v272
add v271->v272
add v270->v268
add v269->v268
add v264->v263
add v261->v259
add v260->v259
add v49->v3
add v256->v3
add v258->v3
add v254->v256
add v43->v253
add v250->v253
add v252->v253
add v249->v250
add v236->v2
add v10->v236
add v248->v236
add v247->v248
add v25->v247
add v240->v247
add v246->v247
add v243->v240
add v245->v243
add v244->v243
add v242->v2
add v237->v240
add v239->v237
add v238->v237
add v225->v2
add v233->v236
add v235->v236
add v227->v233
add v228->v233
add v232->v225
add v231->v225
add v219->v2
add v10->v219
add v223->v219
add v221->v223
add v25->v221
add v216->v221
add v222->v216
add v220->v221
add v217->v216
add v203->v2
add v10->v203
add v215->v203
add v214->v215
add v25->v214
add v211->v214
add v213->v214
add v208->v211
add v210->v208
add v209->v208
add v196->v2
add v205->v203
add v207->v203
add v198->v205
add v199->v205
add v204->v196
add v202->v196
add v190->v2
add v10->v190
add v194->v190
add v192->v194
add v25->v192
add v187->v192
add v193->v187
add v191->v192
add v188->v187
add v174->v2
add v10->v174
add v186->v174
add v185->v186
add v25->v185
add v182->v185
add v184->v185
add v179->v182
add v181->v179
add v180->v179
add v167->v2
add v176->v174
add v178->v174
add v169->v176
add v170->v176
add v175->v167
add v173->v167
add v161->v2
add v10->v161
add v165->v161
add v163->v165
add v25->v163
add v158->v163
add v164->v158
add v162->v163
add v159->v158
add v49->v3
add v155->v3
add v157->v3
add v153->v155
add v43->v152
add v149->v152
add v151->v152
add v148->v149
add v139->v2
add v10->v139
add v147->v139
add v146->v147
add v25->v146
add v143->v146
add v145->v146
add v140->v143
add v142->v140
add v141->v140
add v128->v2
add v136->v139
add v138->v139
add v130->v136
add v131->v136
add v135->v128
add v134->v128
add v122->v2
add v10->v122
add v126->v122
add v124->v126
add v25->v124
add v119->v124
add v125->v119
add v123->v124
add v120->v119
add v106->v2
add v10->v106
add v118->v106
add v117->v118
add v25->v117
add v114->v117
add v116->v117
add v111->v114
add v113->v111
add v112->v111
add v99->v2
add v108->v106
add v110->v106
add v101->v108
add v102->v108
add v107->v99
add v105->v99
add v93->v2
add v10->v93
add v97->v93
add v95->v97
add v25->v95
add v90->v95
add v96->v90
add v94->v95
add v91->v90
add v77->v2
add v10->v77
add v89->v77
add v88->v89
add v25->v88
add v85->v88
add v87->v88
add v82->v85
add v84->v82
add v83->v82
add v69->v2
add v79->v77
add v81->v77
add v72->v79
add v73->v79
add v78->v69
add v76->v69
add v63->v2
add v10->v63
add v67->v63
add v65->v67
add v25->v65
add v60->v65
add v66->v60
add v64->v65
add v61->v60
add v51->v2
add v10->v51
add v59->v51
add v58->v59
add v25->v58
add v55->v58
add v57->v58
add v52->v55
add v54->v52
add v53->v52
add v50->v2
add v49->v3
add v46->v3
add v48->v3
add v44->v46
add v43->v42
add v39->v42
add v41->v42
add v38->v39
add v22->v2
add v35->v30
add v31->v33
add v29->v27
add v26->v27
add v25->v19
add v24->v19
add v23->v19
add v10->v22
add v18->v22
add v19->v18
add v13->v2
add v10->v13
add v17->v13
add v14->v13
add v10->v13
add v12->v13
add v9->v2
add v10->v9
add v8->v9
add v7->v8
add v5->v6
add v4->v5
gap () () 
          [rsi|R|t] = ArchNop
gap (v2(-) = [rsi|R|t];) () 
          [stack:-1|t] = ArchNop
gap (v1(-) = [stack:-1|t];) () 
          [rdi|R|t] = ArchNop
gap (v0(-) = [rdi|R|t];) () 
          [constant:367] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1649] [immediate:1650]
gap () () 
          [constant:871] = ArchNop
gap () () 
          [constant:870] = ArchNop
gap () () 
          v869(R) = ArchStackCheckOffset
gap () () 
          X64Push v869(-)
gap () ([rbx|R|w64] = v870(-); [rax|R|w64] = v367(-); [rsi|R|t] = v871(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1648] #-1 #343 v0(S) v1(S) v2(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1647]
gap () () 
          ArchJmp [immediate:1646]
gap () () 
          [constant:28] = ArchNop
gap () () 
          [constant:36] = ArchNop
gap () () 
          [constant:866] = ArchNop
gap () () 
          v862(R) = X64Movq : MR v28(R)
gap () () 
          v867(R) = X64Lea : MRI v862(R) [immediate:1645]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v867(R) [immediate:1643] [immediate:1644]
gap () () 
          ArchJmp [immediate:1642]
gap () ([rdx|R|w64] = v866(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1641] #-1 [rdx|R|w64]
gap (v865(-) = [rax|R|tp];) () 
          v863(R) = X64Lea : MRI v865(R) [immediate:1640]
gap () (v861 = v863(-);) 
          ArchJmp [immediate:1639]
gap () (v861 = v862(-);) 
          ArchJmp [immediate:1638]
gap () () 
          v857(R) = X64Lea : MRI v861(R) [immediate:1637]
gap () () 
          X64Movq : MR v28(R) v857(R)
gap () () 
          v860(R) = X64Lea : MRI v861(R) [immediate:1636]
gap () (v855 = v860(-);) 
          v855(1) = ArchNop v855
gap () () 
          [constant:859] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v855(R) [immediate:1635] v859(R)
gap () () 
          X64MovqCompressTagged : MRI v855(R) [immediate:1633] [immediate:1634]
gap () () 
          [constant:839] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v855(R) [immediate:1632] v839(R)
gap () () 
          X64MovqCompressTagged : MRI v855(R) [immediate:1631] v839(R)
gap () () 
          X64MovqCompressTagged : MRI v855(R) [immediate:1630] v839(R)
gap () () 
          [constant:34] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v855(R) [immediate:1629] v839(R)
gap () () 
          v858(R) = X64Lea : MRI v857(R) [immediate:1628]
gap () () 
          X64Movq : MR v28(R) v858(R)
gap () () 
          v856(R) = X64Lea : MRI v857(R) [immediate:1627]
gap () (v3 = v856(-);) 
          v3(1) = ArchNop v3
gap () () 
          [constant:49] = ArchNop
gap () () 
          [constant:300] = ArchNop
gap () () 
          [constant:24] = ArchNop
gap () () 
          [constant:10] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1626] v49(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1625] v24(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1624] v855(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1622] [immediate:1623]
gap () () 
          v6(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1621]
gap () () 
          X64Test32 && deoptimize if equal v6 #1 #342 v0(S) v1(-) v2(S) v3(-) [immediate:1619] v6(-) [immediate:1620]
gap () () 
          X64Cmp32 : MRI && branch if equal v6(R) [immediate:1616] v10(R) [immediate:1617] [immediate:1618]
gap () () 
          [constant:854] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v6(R) [immediate:1613] v854(R) #341 v0(S) v1(-) v2(S) v3(-) [immediate:1614] v6(-) [immediate:1615]
gap () () 
          v851(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1612]
gap () () 
          ArchStoreWithWriteBarrier : MRI v6(R) [immediate:1611] v10(R)
gap () () 
          X64MovqCompressTagged : MRI v851(R) [immediate:1609] [immediate:1610]
gap () () 
          ArchJmp [immediate:1608]
gap () () 
          v850(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1607]
gap () () 
          X64MovqCompressTagged : MRI v850(R) [immediate:1605] [immediate:1606]
gap () () 
          ArchJmp [immediate:1604]
gap () () 
          [constant:849] = ArchNop
gap () () 
          [constant:43] = ArchNop
gap () () 
          [constant:70] = ArchNop
gap () () 
          [constant:25] = ArchNop
gap () () 
          [constant:563] = ArchNop
gap () () 
          [constant:299] = ArchNop
gap () () 
          [constant:368] = ArchNop
gap () (v705 = v849(-);) 
          ArchJmp [immediate:1603]
gap () () 
          X64Cmp32 && branch if signed greater than v705 #-1 [immediate:1601] [immediate:1602]
gap () () 
          v759(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1600]
gap () () 
          v760(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1599]
gap () () 
          v848(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1598]
gap () () 
          v847(R) = X64MovqDecompressAnyTagged : MRI v848(R) [immediate:1597]
gap () () 
          X64Test32 && deoptimize if equal v847 #1 #340 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1596]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v847(R) [immediate:1594] v25(R) #339 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1595]
gap () () 
          v843(R) = X64MovqDecompressTaggedPointer : MRI v847(R) [immediate:1593]
gap () () 
          v846(R) = X64MovqDecompressTaggedSigned : MRI v847(R) [immediate:1592]
gap () (v845(R) = v846(-);) 
          v845(1) = X64Sar32 v845(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v705(R) v845 #338 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1591]
gap () () 
          v739(R) = X64Lea : M4I v705(R) [immediate:1590]
gap () () 
          v761(R) = X64MovqDecompressAnyTagged : MR4I v843(R) v705(R) [immediate:1589]
gap () () 
          X64Test32 && deoptimize if equal v759 #1 #337 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1588]
gap () () 
          v842(R) = X64MovqDecompressTaggedPointer : MRI v759(R) [immediate:1587]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v842(R) [immediate:1585] #1068 #336 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1586]
gap () () 
          [constant:840] = ArchNop
gap () () 
          v841(R) = X64MovqDecompressTaggedPointer : MRI v759(R) [immediate:1584]
gap () () 
          X64Cmp && deoptimize if not equal v840(R) v841 #335 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1583]
gap () () 
          v762(R) = X64Movl : MRI v759(R) [immediate:1582]
gap () () 
          X64Test32 && branch if equal v839 #1 [immediate:1580] [immediate:1581]
gap () () 
          v837(R) = X64Movsd : MRI v839(R) [immediate:1579]
gap () (v826 = v837(-);) 
          ArchJmp [immediate:1578]
gap () (v838(R) = v839(-);) 
          v838(1) = X64Sar32 v838(R) #1
gap () () 
          v836(R) = SSEInt32ToFloat64 v838
gap () (v826 = v836(-);) 
          ArchJmp [immediate:1577]
gap () () 
          v830(R) = X64Movq : MR v28(R)
gap () () 
          [constant:834] = ArchNop
gap () () 
          v835(R) = X64Lea : MRI v830(R) [immediate:1576]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v835(R) [immediate:1574] [immediate:1575]
gap () () 
          ArchJmp [immediate:1573]
gap () ([rdx|R|w64] = v834(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1572] #-1 [rdx|R|w64]
gap (v833(-) = [rax|R|tp];) () 
          v831(R) = X64Lea : MRI v833(R) [immediate:1571]
gap () (v829 = v831(-);) 
          ArchJmp [immediate:1570]
gap () (v829 = v830(-);) 
          ArchJmp [immediate:1569]
gap () () 
          v824(R) = X64Lea : MRI v829(R) [immediate:1568]
gap () () 
          X64Movq : MR v28(R) v824(R)
gap () () 
          v828(R) = X64Lea : MRI v829(R) [immediate:1567]
gap () (v803 = v828(-);) 
          v803(1) = ArchNop v803
gap () () 
          [constant:827] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v803(R) [immediate:1566] v827(R)
gap () () 
          X64MovqCompressTagged : MRI v803(R) [immediate:1564] [immediate:1565]
gap () () 
          X64Movsd : MRI v803(R) [immediate:1563] v826(R)
gap () () 
          X64Movsd : MRI v803(R) [immediate:1562] v826(R)
gap () () 
          X64Movsd : MRI v803(R) [immediate:1561] v826(R)
gap () () 
          X64Movsd : MRI v803(R) [immediate:1560] v826(R)
gap () () 
          v825(R) = X64Lea : MRI v824(R) [immediate:1559]
gap () () 
          X64Movq : MR v28(R) v825(R)
gap () () 
          v823(R) = X64Lea : MRI v824(R) [immediate:1558]
gap () (v740 = v823(-);) 
          v740(1) = ArchNop v740
gap () () 
          X64MovqCompressTagged : MRI v740(R) [immediate:1557] v43(R)
gap () () 
          X64MovqCompressTagged : MRI v740(R) [immediate:1556] v24(R)
gap () () 
          X64MovqCompressTagged : MRI v740(R) [immediate:1555] v803(R)
gap () () 
          X64MovqCompressTagged : MRI v740(R) [immediate:1553] [immediate:1554]
gap () () 
          X64Test32 && deoptimize if equal v760 #1 #334 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1550] v760(-) v761(-) v762(S) v740(-) [immediate:1551] [immediate:1552]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v760(R) [immediate:1546] v25(R) #333 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1547] v760(-) v761(-) v762(S) v740(-) [immediate:1548] [immediate:1549]
gap () () 
          v820(R) = X64MovqDecompressTaggedPointer : MRI v760(R) [immediate:1545]
gap () () 
          v822(R) = X64MovqDecompressTaggedSigned : MRI v760(R) [immediate:1544]
gap () (v821(R) = v822(-);) 
          v821(1) = X64Sar32 v821(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v821 #0 #332 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1541] v760(-) v761(-) v762(S) v740(-) [immediate:1542] [immediate:1543]
gap () () 
          v819(R) = X64MovqDecompressAnyTagged : MRI v820(R) [immediate:1540]
gap () () 
          X64Test32 && deoptimize if equal v819 #1 #331 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1537] v760(-) v761(-) v762(S) v740(-) [immediate:1538] [immediate:1539]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v819(R) [immediate:1533] v43(R) #330 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1534] v760(-) v761(-) v762(S) v740(-) [immediate:1535] [immediate:1536]
gap () () 
          v815(R) = X64MovqDecompressTaggedPointer : MRI v819(R) [immediate:1532]
gap () () 
          v818(R) = X64MovqDecompressTaggedSigned : MRI v819(R) [immediate:1531]
gap () (v816(R) = v818(-);) 
          v816(1) = X64Sar32 v816(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v816 #0 #329 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1528] v760(-) v761(-) v762(S) v740(-) [immediate:1529] [immediate:1530]
gap () () 
          v812(R) = X64Movsd : MRI v815(R) [immediate:1527]
gap () () 
          X64Test32 && deoptimize if equal v761 #1 #328 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1524] v760(-) v761(-) v762(S) v740(-) [immediate:1525] [immediate:1526]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v761(R) [immediate:1520] v43(R) #327 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1521] v760(-) v761(-) v762(S) v740(-) [immediate:1522] [immediate:1523]
gap () () 
          v811(R) = X64MovqDecompressTaggedPointer : MRI v761(R) [immediate:1519]
gap () () 
          v817(R) = X64MovqDecompressTaggedSigned : MRI v761(R) [immediate:1518]
gap () (v814(R) = v817(-);) 
          v814(1) = X64Sar32 v814(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v814 #0 #326 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1515] v760(-) v761(-) v762(S) v740(-) [immediate:1516] [immediate:1517]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v816 #1 #325 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1512] v760(-) v761(-) v762(S) v740(-) [immediate:1513] [immediate:1514]
gap () () 
          v813(R) = X64Movsd : MRI v815(R) [immediate:1511]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v814 #1 #324 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1508] v760(-) v761(-) v762(S) v740(-) [immediate:1509] [immediate:1510]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v816 #2 #323 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1505] v760(-) v761(-) v762(S) v740(-) [immediate:1506] [immediate:1507]
gap () () 
          v810(R) = X64Movsd : MRI v815(R) [immediate:1504]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v814 #2 #322 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1501] v760(-) v761(-) v762(S) v740(-) [immediate:1502] [immediate:1503]
gap () () 
          v808(R) = AVXFloat64Mul : MRI v813(R) v811(R) [immediate:1500]
gap () () 
          v809(R) = AVXFloat64Mul : MRI v812(R) v811(R) [immediate:1499]
gap () () 
          v806(R) = AVXFloat64Mul : MRI v810(R) v811(R) [immediate:1498]
gap () () 
          v807(R) = AVXFloat64Add v808(R) v809
gap () () 
          v805(R) = AVXFloat64Add v806(R) v807
gap () () 
          X64MovqCompressTagged : MRI v740(R) [immediate:1496] [immediate:1497]
gap () () 
          X64Movsd : MRI v803(R) [immediate:1495] v805(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1493] [immediate:1494]
gap () () 
          [constant:802] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v802(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1491] #-1 #321 v0(S) v1(S) v2(S) v3(S) v705(S) v759(S) [immediate:1492] v760(S) v761(S) v762(S) v740(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1490]
gap () () 
          ArchJmp [immediate:1489]
gap () (v781 = v367(-);) 
          ArchJmp [immediate:1488]
gap () () 
          X64Cmp32 && branch if unsigned less than v781 #3 [immediate:1486] [immediate:1487]
gap () () 
          v798(R) = X64MovqDecompressTaggedPointer : MRI v760(R) [immediate:1485]
gap () () 
          v800(R) = X64MovqDecompressTaggedSigned : MRI v760(R) [immediate:1484]
gap () (v799(R) = v800(-);) 
          v799(1) = X64Sar32 v799(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v781(R) v799 #320 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1482] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1483]
gap () () 
          v797(R) = X64MovqDecompressAnyTagged : MR4I v798(R) v781(R) [immediate:1481]
gap () () 
          X64Test32 && deoptimize if equal v797 #1 #319 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1479] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1480]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v797(R) [immediate:1476] v43(R) #318 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1477] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1478]
gap () () 
          v793(R) = X64MovqDecompressTaggedPointer : MRI v797(R) [immediate:1475]
gap () () 
          v796(R) = X64MovqDecompressTaggedSigned : MRI v797(R) [immediate:1474]
gap () (v794(R) = v796(-);) 
          v794(1) = X64Sar32 v794(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v794 #0 #317 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1472] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1473]
gap () () 
          v776(R) = X64Movsd : MRI v793(R) [immediate:1471]
gap () () 
          v791(R) = X64MovqDecompressTaggedPointer : MRI v761(R) [immediate:1470]
gap () () 
          v795(R) = X64MovqDecompressTaggedSigned : MRI v761(R) [immediate:1469]
gap () (v792(R) = v795(-);) 
          v792(1) = X64Sar32 v792(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v792 #0 #316 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1467] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1468]
gap () () 
          v775(R) = X64Movsd : MRI v791(R) [immediate:1466]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v794 #1 #315 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1464] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1465]
gap () () 
          v778(R) = X64Movsd : MRI v793(R) [immediate:1463]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v792 #1 #314 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1461] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1462]
gap () () 
          v777(R) = X64Movsd : MRI v791(R) [immediate:1460]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v794 #2 #313 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1458] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1459]
gap () () 
          v774(R) = X64Movsd : MRI v793(R) [immediate:1457]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v792 #2 #312 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1455] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1456]
gap () () 
          v773(R) = X64Movsd : MRI v791(R) [immediate:1454]
gap () () 
          v783(R) = X64MovqDecompressTaggedPointer : MRI v740(R) [immediate:1453]
gap () () 
          v789(R) = X64MovqDecompressTaggedSigned : MRI v740(R) [immediate:1452]
gap () () 
          v790(R) = X64MovqDecompressTaggedSigned : MRI v783(R) [immediate:1451]
gap () (v787(R) = v790(-);) 
          v787(1) = X64Sar32 v787(R) #1
gap () (v782(R) = v789(-);) 
          v782(1) = X64Sar32 v782(R) #1
gap () () 
          v788(R) = X64Lea32 : MRI v782(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v781(R) v788 #311 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1449] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1450]
gap () () 
          X64Cmp32 && branch if unsigned less than v781(R) v787 [immediate:1447] [immediate:1448]
gap () () 
          v786(R) = X64Lea32 : MR1 v781(R) v781(R)
gap () ([rax|R|t] = v740(-); [rbx|R|w32] = v786(-); [rsi|R|w64] = v563(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1446] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v784(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v784 #1 #310 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1444] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1445]
gap () (v765 = v784(-);) 
          ArchJmp [immediate:1443]
gap () (v765 = v783(-);) 
          ArchJmp [immediate:1442]
gap () () 
          v763(R) = X64Lea32 : MRI v781(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v781(R) v782 [immediate:1440] [immediate:1441]
gap () () 
          v780(R) = X64Lea32 : MR1 v763(R) v763(R)
gap () () 
          X64MovqCompressTagged : MRI v740(R) [immediate:1439] v780(R)
gap () () 
          ArchJmp [immediate:1438]
gap () () 
          ArchJmp [immediate:1437]
gap () () 
          v771(R) = AVXFloat64Mul v777(R) v778
gap () () 
          v772(R) = AVXFloat64Mul v775(R) v776
gap () () 
          v769(R) = AVXFloat64Mul v773(R) v774
gap () () 
          v770(R) = AVXFloat64Add v771(R) v772
gap () () 
          v768(R) = AVXFloat64Add v769(R) v770
gap () () 
          X64Movsd : MR8I v765(R) v781(R) [immediate:1436] v768(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1434] [immediate:1435]
gap () () 
          [constant:764] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v764(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1432] #-1 #309 v0(S) v1(S) v2(S) v3(S) v705(S) v759(S) [immediate:1433] v760(S) v761(S) v762(S) v740(S) v763(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1431]
gap () () 
          ArchJmp [immediate:1430]
gap () (v781 = v763(-);) 
          ArchJmp [immediate:1429]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:1428] v49(R) #308 v0(S) v1(-) v2(S) v3(-) v705(-) v740(-)
gap () () 
          v751(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:1427]
gap () () 
          v747(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:1426]
gap () () 
          v757(R) = X64MovqDecompressTaggedSigned : MRI v751(R) [immediate:1425]
gap () (v755(R) = v757(-);) 
          v755(1) = X64Sar32 v755(R) #1
gap () () 
          v756(R) = X64Lea32 : MRI v755(R) #1024
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v705(R) v756 #307 v0(S) v1(-) v2(S) v3(-) v705(-) v740(-)
gap () () 
          X64Cmp32 && branch if unsigned less than v705(R) v755 [immediate:1423] [immediate:1424]
gap () () 
          v754(R) = X64Lea32 : MR1 v705(R) v705(R)
gap () ([rax|R|t] = v3(-); [rbx|R|w32] = v754(-); [rsi|R|w64] = v563(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1422] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v752(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v752 #1 #306 v0(S) v1(-) v2(S) v3(-) v705(-) v740(-)
gap () (v748 = v752(-);) 
          ArchJmp [immediate:1421]
gap () (v748 = v751(-);) 
          ArchJmp [immediate:1420]
gap () () 
          v750(R) = X64Movl : MRI v748(R) [immediate:1419]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v750(R) [immediate:1417] [immediate:1418]
gap () ([rax|R|t] = v3(-); [rsi|R|w64] = v563(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1416] #-1 [rax|R|t] [rsi|R|w64]
gap (v749(-) = [rax|R|t];) (v738 = v749(-);) 
          ArchJmp [immediate:1415]
gap () (v738 = v748(-);) 
          ArchJmp [immediate:1414]
gap () (v746(R) = v747(-);) 
          v746(1) = X64Sar32 v746(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v705(R) v746 [immediate:1412] [immediate:1413]
gap () () 
          v745(R) = X64Lea32 : MRI v705(R) #1
gap () () 
          v744(R) = X64Lea32 : MR1 v745(R) v745(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1411] v744(R)
gap () () 
          ArchJmp [immediate:1410]
gap () () 
          ArchJmp [immediate:1409]
gap () () 
          ArchStoreWithWriteBarrier : MR1 v738(R) v739(R) v740(R)
gap () () 
          v736(R) = X64Lea32 : MRI v705(R) #-1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1407] [immediate:1408]
gap () () 
          [constant:737] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v737(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1406] #-1 #305 v0(S) v1(S) v2(S) v3(S) v736(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1405]
gap () () 
          ArchJmp [immediate:1404]
gap () (v705 = v736(-);) 
          ArchJmp [immediate:1403]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:1401] v49(R) #304 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1402]
gap () () 
          v725(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:1400]
gap () () 
          v734(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:1399]
gap () (v726(R) = v734(-);) 
          v726(1) = X64Sar32 v726(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v726 #0 #303 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1398]
gap () () 
          v732(R) = X64MovqDecompressAnyTagged : MRI v725(R) [immediate:1397]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v732(R) [immediate:1395] [immediate:1396]
gap () (v731 = v732(-);) 
          ArchJmp [immediate:1394]
gap () () 
          [constant:733] = ArchNop
gap () (v731 = v733(-);) 
          ArchJmp [immediate:1393]
gap () () 
          [constant:37] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v731 #1 #302 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1392]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v731(R) [immediate:1390] v43(R) #301 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1391]
gap () () 
          v728(R) = X64MovqDecompressTaggedPointer : MRI v731(R) [immediate:1389]
gap () () 
          v730(R) = X64MovqDecompressTaggedSigned : MRI v731(R) [immediate:1388]
gap () (v729(R) = v730(-);) 
          v729(1) = X64Sar32 v729(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v729 #2 #300 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1387]
gap () () 
          v727(R) = X64Movsd : MRI v728(R) [immediate:1386]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v727 [immediate:1384] [immediate:1385]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v726 #1 #299 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1383]
gap () () 
          v723(R) = X64MovqDecompressAnyTagged : MRI v725(R) [immediate:1382]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v723(R) [immediate:1380] [immediate:1381]
gap () (v722 = v723(-);) 
          ArchJmp [immediate:1379]
gap () () 
          [constant:724] = ArchNop
gap () (v722 = v724(-);) 
          ArchJmp [immediate:1378]
gap () () 
          X64Test32 && deoptimize if equal v722 #1 #298 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1377]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v722(R) [immediate:1375] v43(R) #297 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1376]
gap () () 
          v719(R) = X64MovqDecompressTaggedPointer : MRI v722(R) [immediate:1374]
gap () () 
          v721(R) = X64MovqDecompressTaggedSigned : MRI v722(R) [immediate:1373]
gap () (v720(R) = v721(-);) 
          v720(1) = X64Sar32 v720(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v720 #2 #296 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1372]
gap () () 
          v718(R) = X64Movsd : MRI v719(R) [immediate:1371]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v718 [immediate:1369] [immediate:1370]
gap () () 
          ArchJmp [immediate:1368]
gap () () 
          v717(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1367]
gap () () 
          v716(R) = X64MovqDecompressAnyTagged : MRI v717(R) [immediate:1366]
gap () () 
          X64Test32 && deoptimize if equal v716 #1 #295 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1365]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v716(R) [immediate:1363] v25(R) #294 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1364]
gap () () 
          v713(R) = X64MovqDecompressTaggedPointer : MRI v716(R) [immediate:1362]
gap () () 
          v715(R) = X64MovqDecompressTaggedSigned : MRI v716(R) [immediate:1361]
gap () (v714(R) = v715(-);) 
          v714(1) = X64Sar32 v714(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v714 #2 #293 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1360]
gap () () 
          v710(R) = X64MovqDecompressAnyTagged : MRI v713(R) [immediate:1359]
gap () () 
          X64Test32 && branch if equal v710 #1 [immediate:1357] [immediate:1358]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v710(R) [immediate:1355] [immediate:1356]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v710(R) [immediate:1353] [immediate:1354]
gap () () 
          v712(R) = X64MovqDecompressTaggedPointer : MRI v710(R) [immediate:1352]
gap () () 
          X64Test8 : MRI && branch if equal v712(R) [immediate:1349] #16 [immediate:1350] [immediate:1351]
gap () () 
          ArchJmp [immediate:1348]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v712(R) [immediate:1346] [immediate:1347]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v712(R) [immediate:1344] [immediate:1345]
gap () () 
          ArchJmp [immediate:1343]
gap () () 
          X64Test32 : MRI && branch if not equal v710(R) [immediate:1340] #2147483646 [immediate:1341] [immediate:1342]
gap () () 
          ArchJmp [immediate:1339]
gap () () 
          ArchJmp [immediate:1338]
gap () () 
          v711(R) = X64Movsd : MRI v710(R) [immediate:1337]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v711 [immediate:1335] [immediate:1336]
gap () () 
          ArchJmp [immediate:1334]
gap () () 
          ArchJmp [immediate:1333]
gap () () 
          ArchJmp [immediate:1332]
gap () () 
          ArchJmp [immediate:1331]
gap () () 
          X64Cmp32 && branch if not equal v710 [immediate:1328] [immediate:1329] [immediate:1330]
gap () () 
          ArchJmp [immediate:1327]
gap () () 
          [constant:703] = ArchNop
gap () () 
          [constant:702] = ArchNop
gap () () 
          [constant:699] = ArchNop
gap () () 
          v698(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1326]
gap () () 
          v707(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1325]
gap () () 
          v709(R) = X64MovqDecompressTaggedSigned : MRI v6(R) [immediate:1324]
gap () (v708(R) = v709(-);) 
          v708(1) = X64Sar32 v708(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v708 #3 #292 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1323]
gap () () 
          v700(R) = X64MovqDecompressAnyTagged : MRI v707(R) [immediate:1322]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v708 #2 #291 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1321]
gap () () 
          v701(R) = X64MovqDecompressAnyTagged : MRI v707(R) [immediate:1320]
gap () () 
          X64Test32 && deoptimize if equal v698 #1 #290 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1319]
gap () () 
          v706(R) = X64MovqDecompressTaggedPointer : MRI v698(R) [immediate:1318]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v706(R) [immediate:1316] #1068 #289 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1317]
gap () () 
          v704(R) = X64MovqDecompressTaggedPointer : MRI v698(R) [immediate:1315]
gap () () 
          X64Cmp && deoptimize if not equal v703(R) v704 #288 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1314]
gap () () 
          X64Push v701(-)
gap () () 
          X64Push v700(-)
gap () () 
          X64Push v699(-)
gap () ([rdi|R|t] = v698(-); [rax|R|w64] = v70(-); [rsi|R|t] = v702(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1313] #-1 #287 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v694(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1312]
gap () () 
          X64Test32 && deoptimize if equal v694 #1 #286 v0(S) v1(-) v2(S) v3(-) v694(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v694(R) [immediate:1311] v10(R) #285 v0(S) v1(-) v2(S) v3(-) v694(-)
gap () () 
          v696(R) = X64MovqDecompressTaggedPointer : MRI v694(R) [immediate:1310]
gap () () 
          v691(R) = X64MovqDecompressAnyTagged : MRI v696(R) [immediate:1309]
gap () () 
          X64Test32 && deoptimize if equal v691 #1 #284 v0(S) v1(-) v2(S) v3(-) v694(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v691(R) [immediate:1308] v25(R) #283 v0(S) v1(-) v2(S) v3(-) v694(-)
gap () () 
          v689(R) = X64MovqDecompressTaggedPointer : MRI v691(R) [immediate:1307]
gap () () 
          v695(R) = X64MovqDecompressTaggedSigned : MRI v691(R) [immediate:1306]
gap () (v693(R) = v695(-);) 
          v693(1) = X64Sar32 v693(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v693 #2 #282 v0(S) v1(-) v2(S) v3(-) v694(-)
gap () () 
          v692(R) = X64Movl : MRI v689(R) [immediate:1305]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v692(R) [immediate:1303] [immediate:1304]
gap () ([rax|R|t] = v691(-); [rsi|R|w64] = v563(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1302] #-1 [rax|R|t] [rsi|R|w64]
gap (v690(-) = [rax|R|t];) (v687 = v690(-);) 
          ArchJmp [immediate:1301]
gap () (v687 = v689(-);) 
          ArchJmp [immediate:1300]
gap () () 
          [constant:688] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v687(R) [immediate:1299] v688(R)
gap () () 
          ArchJmp [immediate:1298]
gap () () 
          ArchJmp [immediate:1297]
gap () () 
          ArchJmp [immediate:1296]
gap () () 
          v674(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1295]
gap () () 
          X64Test32 && deoptimize if equal v674 #1 #281 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v674(R) [immediate:1294] v10(R) #280 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v686(R) = X64MovqDecompressTaggedPointer : MRI v674(R) [immediate:1293]
gap () () 
          v685(R) = X64MovqDecompressAnyTagged : MRI v686(R) [immediate:1292]
gap () () 
          X64Test32 && deoptimize if equal v685 #1 #279 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v685(R) [immediate:1291] v25(R) #278 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v682(R) = X64MovqDecompressTaggedPointer : MRI v685(R) [immediate:1290]
gap () () 
          v684(R) = X64MovqDecompressTaggedSigned : MRI v685(R) [immediate:1289]
gap () (v683(R) = v684(-);) 
          v683(1) = X64Sar32 v683(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v683 #9 #277 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v679(R) = X64MovqDecompressAnyTagged : MRI v682(R) [immediate:1288]
gap () () 
          X64Test32 && branch if equal v679 #1 [immediate:1286] [immediate:1287]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v679(R) [immediate:1284] [immediate:1285]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v679(R) [immediate:1282] [immediate:1283]
gap () () 
          v681(R) = X64MovqDecompressTaggedPointer : MRI v679(R) [immediate:1281]
gap () () 
          X64Test8 : MRI && branch if equal v681(R) [immediate:1278] #16 [immediate:1279] [immediate:1280]
gap () () 
          ArchJmp [immediate:1277]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v681(R) [immediate:1275] [immediate:1276]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v681(R) [immediate:1273] [immediate:1274]
gap () () 
          ArchJmp [immediate:1272]
gap () () 
          X64Test32 : MRI && branch if not equal v679(R) [immediate:1269] #2147483646 [immediate:1270] [immediate:1271]
gap () () 
          ArchJmp [immediate:1268]
gap () () 
          ArchJmp [immediate:1267]
gap () () 
          v680(R) = X64Movsd : MRI v679(R) [immediate:1266]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v680 [immediate:1264] [immediate:1265]
gap () () 
          ArchJmp [immediate:1263]
gap () () 
          ArchJmp [immediate:1262]
gap () () 
          ArchJmp [immediate:1261]
gap () () 
          ArchJmp [immediate:1260]
gap () () 
          X64Cmp32 && branch if not equal v679 [immediate:1257] [immediate:1258] [immediate:1259]
gap () () 
          ArchJmp [immediate:1256]
gap () () 
          [constant:672] = ArchNop
gap () () 
          [constant:671] = ArchNop
gap () () 
          [constant:668] = ArchNop
gap () () 
          [constant:659] = ArchNop
gap () () 
          v667(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1255]
gap () () 
          v676(R) = X64MovqDecompressTaggedPointer : MRI v674(R) [immediate:1254]
gap () () 
          v678(R) = X64MovqDecompressTaggedSigned : MRI v674(R) [immediate:1253]
gap () (v677(R) = v678(-);) 
          v677(1) = X64Sar32 v677(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v677 #2 #276 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v669(R) = X64MovqDecompressAnyTagged : MRI v676(R) [immediate:1252]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v677 #6 #275 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v670(R) = X64MovqDecompressAnyTagged : MRI v676(R) [immediate:1251]
gap () () 
          X64Test32 && deoptimize if equal v667 #1 #274 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v675(R) = X64MovqDecompressTaggedPointer : MRI v667(R) [immediate:1250]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v675(R) [immediate:1249] #1068 #273 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v673(R) = X64MovqDecompressTaggedPointer : MRI v667(R) [immediate:1248]
gap () () 
          X64Cmp && deoptimize if not equal v672(R) v673 #272 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          X64Push v670(-)
gap () () 
          X64Push v669(-)
gap () () 
          X64Push v668(-)
gap () ([rdi|R|t] = v667(-); [rax|R|w64] = v70(-); [rsi|R|t] = v671(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1247] #-1 #271 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v661(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1246]
gap () () 
          X64Test32 && deoptimize if equal v661 #1 #270 v0(S) v1(-) v2(S) v3(-) v661(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v661(R) [immediate:1245] v10(R) #269 v0(S) v1(-) v2(S) v3(-) v661(-)
gap () () 
          v665(R) = X64MovqDecompressTaggedPointer : MRI v661(R) [immediate:1244]
gap () () 
          v663(R) = X64MovqDecompressAnyTagged : MRI v665(R) [immediate:1243]
gap () () 
          X64Test32 && deoptimize if equal v663 #1 #268 v0(S) v1(-) v2(S) v3(-) v661(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v663(R) [immediate:1242] v25(R) #267 v0(S) v1(-) v2(S) v3(-) v661(-)
gap () () 
          v658(R) = X64MovqDecompressTaggedPointer : MRI v663(R) [immediate:1241]
gap () () 
          v664(R) = X64Movl : MRI v658(R) [immediate:1240]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v664(R) #266 v0(S) v1(-) v2(S) v3(-) v661(-)
gap () () 
          v662(R) = X64MovqDecompressTaggedSigned : MRI v663(R) [immediate:1239]
gap () (v660(R) = v662(-);) 
          v660(1) = X64Sar32 v660(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v660 #9 #265 v0(S) v1(-) v2(S) v3(-) v661(-)
gap () () 
          X64MovqCompressTagged : MRI v658(R) [immediate:1238] v659(R)
gap () () 
          ArchJmp [immediate:1237]
gap () () 
          ArchJmp [immediate:1236]
gap () () 
          ArchJmp [immediate:1235]
gap () () 
          v645(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1234]
gap () () 
          X64Test32 && deoptimize if equal v645 #1 #264 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v645(R) [immediate:1233] v10(R) #263 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v657(R) = X64MovqDecompressTaggedPointer : MRI v645(R) [immediate:1232]
gap () () 
          v656(R) = X64MovqDecompressAnyTagged : MRI v657(R) [immediate:1231]
gap () () 
          X64Test32 && deoptimize if equal v656 #1 #262 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v656(R) [immediate:1230] v25(R) #261 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v653(R) = X64MovqDecompressTaggedPointer : MRI v656(R) [immediate:1229]
gap () () 
          v655(R) = X64MovqDecompressTaggedSigned : MRI v656(R) [immediate:1228]
gap () (v654(R) = v655(-);) 
          v654(1) = X64Sar32 v654(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v654 #6 #260 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v650(R) = X64MovqDecompressAnyTagged : MRI v653(R) [immediate:1227]
gap () () 
          X64Test32 && branch if equal v650 #1 [immediate:1225] [immediate:1226]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v650(R) [immediate:1223] [immediate:1224]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v650(R) [immediate:1221] [immediate:1222]
gap () () 
          v652(R) = X64MovqDecompressTaggedPointer : MRI v650(R) [immediate:1220]
gap () () 
          X64Test8 : MRI && branch if equal v652(R) [immediate:1217] #16 [immediate:1218] [immediate:1219]
gap () () 
          ArchJmp [immediate:1216]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v652(R) [immediate:1214] [immediate:1215]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v652(R) [immediate:1212] [immediate:1213]
gap () () 
          ArchJmp [immediate:1211]
gap () () 
          X64Test32 : MRI && branch if not equal v650(R) [immediate:1208] #2147483646 [immediate:1209] [immediate:1210]
gap () () 
          ArchJmp [immediate:1207]
gap () () 
          ArchJmp [immediate:1206]
gap () () 
          v651(R) = X64Movsd : MRI v650(R) [immediate:1205]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v651 [immediate:1203] [immediate:1204]
gap () () 
          ArchJmp [immediate:1202]
gap () () 
          ArchJmp [immediate:1201]
gap () () 
          ArchJmp [immediate:1200]
gap () () 
          ArchJmp [immediate:1199]
gap () () 
          X64Cmp32 && branch if not equal v650 [immediate:1196] [immediate:1197] [immediate:1198]
gap () () 
          ArchJmp [immediate:1195]
gap () () 
          [constant:643] = ArchNop
gap () () 
          [constant:642] = ArchNop
gap () () 
          [constant:639] = ArchNop
gap () () 
          [constant:630] = ArchNop
gap () () 
          v638(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1194]
gap () () 
          v647(R) = X64MovqDecompressTaggedPointer : MRI v645(R) [immediate:1193]
gap () () 
          v649(R) = X64MovqDecompressTaggedSigned : MRI v645(R) [immediate:1192]
gap () (v648(R) = v649(-);) 
          v648(1) = X64Sar32 v648(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v648 #6 #259 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v640(R) = X64MovqDecompressAnyTagged : MRI v647(R) [immediate:1191]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v648 #7 #258 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v641(R) = X64MovqDecompressAnyTagged : MRI v647(R) [immediate:1190]
gap () () 
          X64Test32 && deoptimize if equal v638 #1 #257 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v646(R) = X64MovqDecompressTaggedPointer : MRI v638(R) [immediate:1189]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v646(R) [immediate:1188] #1068 #256 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v644(R) = X64MovqDecompressTaggedPointer : MRI v638(R) [immediate:1187]
gap () () 
          X64Cmp && deoptimize if not equal v643(R) v644 #255 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          X64Push v641(-)
gap () () 
          X64Push v640(-)
gap () () 
          X64Push v639(-)
gap () ([rdi|R|t] = v638(-); [rax|R|w64] = v70(-); [rsi|R|t] = v642(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1186] #-1 #254 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v632(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1185]
gap () () 
          X64Test32 && deoptimize if equal v632 #1 #253 v0(S) v1(-) v2(S) v3(-) v632(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v632(R) [immediate:1184] v10(R) #252 v0(S) v1(-) v2(S) v3(-) v632(-)
gap () () 
          v636(R) = X64MovqDecompressTaggedPointer : MRI v632(R) [immediate:1183]
gap () () 
          v634(R) = X64MovqDecompressAnyTagged : MRI v636(R) [immediate:1182]
gap () () 
          X64Test32 && deoptimize if equal v634 #1 #251 v0(S) v1(-) v2(S) v3(-) v632(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v634(R) [immediate:1181] v25(R) #250 v0(S) v1(-) v2(S) v3(-) v632(-)
gap () () 
          v629(R) = X64MovqDecompressTaggedPointer : MRI v634(R) [immediate:1180]
gap () () 
          v635(R) = X64Movl : MRI v629(R) [immediate:1179]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v635(R) #249 v0(S) v1(-) v2(S) v3(-) v632(-)
gap () () 
          v633(R) = X64MovqDecompressTaggedSigned : MRI v634(R) [immediate:1178]
gap () (v631(R) = v633(-);) 
          v631(1) = X64Sar32 v631(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v631 #6 #248 v0(S) v1(-) v2(S) v3(-) v632(-)
gap () () 
          X64MovqCompressTagged : MRI v629(R) [immediate:1177] v630(R)
gap () () 
          ArchJmp [immediate:1176]
gap () () 
          ArchJmp [immediate:1175]
gap () () 
          ArchJmp [immediate:1174]
gap () () 
          v616(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1173]
gap () () 
          X64Test32 && deoptimize if equal v616 #1 #247 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v616(R) [immediate:1172] v10(R) #246 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v628(R) = X64MovqDecompressTaggedPointer : MRI v616(R) [immediate:1171]
gap () () 
          v627(R) = X64MovqDecompressAnyTagged : MRI v628(R) [immediate:1170]
gap () () 
          X64Test32 && deoptimize if equal v627 #1 #245 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v627(R) [immediate:1169] v25(R) #244 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v624(R) = X64MovqDecompressTaggedPointer : MRI v627(R) [immediate:1168]
gap () () 
          v626(R) = X64MovqDecompressTaggedSigned : MRI v627(R) [immediate:1167]
gap () (v625(R) = v626(-);) 
          v625(1) = X64Sar32 v625(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v625 #10 #243 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v621(R) = X64MovqDecompressAnyTagged : MRI v624(R) [immediate:1166]
gap () () 
          X64Test32 && branch if equal v621 #1 [immediate:1164] [immediate:1165]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v621(R) [immediate:1162] [immediate:1163]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v621(R) [immediate:1160] [immediate:1161]
gap () () 
          v623(R) = X64MovqDecompressTaggedPointer : MRI v621(R) [immediate:1159]
gap () () 
          X64Test8 : MRI && branch if equal v623(R) [immediate:1156] #16 [immediate:1157] [immediate:1158]
gap () () 
          ArchJmp [immediate:1155]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v623(R) [immediate:1153] [immediate:1154]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v623(R) [immediate:1151] [immediate:1152]
gap () () 
          ArchJmp [immediate:1150]
gap () () 
          X64Test32 : MRI && branch if not equal v621(R) [immediate:1147] #2147483646 [immediate:1148] [immediate:1149]
gap () () 
          ArchJmp [immediate:1146]
gap () () 
          ArchJmp [immediate:1145]
gap () () 
          v622(R) = X64Movsd : MRI v621(R) [immediate:1144]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v622 [immediate:1142] [immediate:1143]
gap () () 
          ArchJmp [immediate:1141]
gap () () 
          ArchJmp [immediate:1140]
gap () () 
          ArchJmp [immediate:1139]
gap () () 
          ArchJmp [immediate:1138]
gap () () 
          X64Cmp32 && branch if not equal v621 [immediate:1135] [immediate:1136] [immediate:1137]
gap () () 
          ArchJmp [immediate:1134]
gap () () 
          [constant:614] = ArchNop
gap () () 
          [constant:613] = ArchNop
gap () () 
          [constant:610] = ArchNop
gap () () 
          [constant:601] = ArchNop
gap () () 
          v609(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1133]
gap () () 
          v618(R) = X64MovqDecompressTaggedPointer : MRI v616(R) [immediate:1132]
gap () () 
          v620(R) = X64MovqDecompressTaggedSigned : MRI v616(R) [immediate:1131]
gap () (v619(R) = v620(-);) 
          v619(1) = X64Sar32 v619(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v619 #7 #242 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v611(R) = X64MovqDecompressAnyTagged : MRI v618(R) [immediate:1130]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v619 #3 #241 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v612(R) = X64MovqDecompressAnyTagged : MRI v618(R) [immediate:1129]
gap () () 
          X64Test32 && deoptimize if equal v609 #1 #240 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v617(R) = X64MovqDecompressTaggedPointer : MRI v609(R) [immediate:1128]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v617(R) [immediate:1127] #1068 #239 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v615(R) = X64MovqDecompressTaggedPointer : MRI v609(R) [immediate:1126]
gap () () 
          X64Cmp && deoptimize if not equal v614(R) v615 #238 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          X64Push v612(-)
gap () () 
          X64Push v611(-)
gap () () 
          X64Push v610(-)
gap () ([rdi|R|t] = v609(-); [rax|R|w64] = v70(-); [rsi|R|t] = v613(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1125] #-1 #237 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v603(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1124]
gap () () 
          X64Test32 && deoptimize if equal v603 #1 #236 v0(S) v1(-) v2(S) v3(-) v603(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v603(R) [immediate:1123] v10(R) #235 v0(S) v1(-) v2(S) v3(-) v603(-)
gap () () 
          v607(R) = X64MovqDecompressTaggedPointer : MRI v603(R) [immediate:1122]
gap () () 
          v605(R) = X64MovqDecompressAnyTagged : MRI v607(R) [immediate:1121]
gap () () 
          X64Test32 && deoptimize if equal v605 #1 #234 v0(S) v1(-) v2(S) v3(-) v603(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v605(R) [immediate:1120] v25(R) #233 v0(S) v1(-) v2(S) v3(-) v603(-)
gap () () 
          v600(R) = X64MovqDecompressTaggedPointer : MRI v605(R) [immediate:1119]
gap () () 
          v606(R) = X64Movl : MRI v600(R) [immediate:1118]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v606(R) #232 v0(S) v1(-) v2(S) v3(-) v603(-)
gap () () 
          v604(R) = X64MovqDecompressTaggedSigned : MRI v605(R) [immediate:1117]
gap () (v602(R) = v604(-);) 
          v602(1) = X64Sar32 v602(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v602 #10 #231 v0(S) v1(-) v2(S) v3(-) v603(-)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1116] v601(R)
gap () () 
          ArchJmp [immediate:1115]
gap () () 
          ArchJmp [immediate:1114]
gap () () 
          ArchJmp [immediate:1113]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:1111] v49(R) #230 v0(S) v1(-) v2(S) v3(-) [immediate:1112]
gap () () 
          v597(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:1110]
gap () () 
          v599(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:1109]
gap () (v598(R) = v599(-);) 
          v598(1) = X64Sar32 v598(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v598 #2 #229 v0(S) v1(-) v2(S) v3(-) [immediate:1108]
gap () () 
          v595(R) = X64MovqDecompressAnyTagged : MRI v597(R) [immediate:1107]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v595(R) [immediate:1105] [immediate:1106]
gap () (v594 = v595(-);) 
          ArchJmp [immediate:1104]
gap () () 
          [constant:596] = ArchNop
gap () (v594 = v596(-);) 
          ArchJmp [immediate:1103]
gap () () 
          X64Test32 && deoptimize if equal v594 #1 #228 v0(S) v1(-) v2(S) v3(-) [immediate:1102]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v594(R) [immediate:1100] v43(R) #227 v0(S) v1(-) v2(S) v3(-) [immediate:1101]
gap () () 
          v591(R) = X64MovqDecompressTaggedPointer : MRI v594(R) [immediate:1099]
gap () () 
          v593(R) = X64MovqDecompressTaggedSigned : MRI v594(R) [immediate:1098]
gap () (v592(R) = v593(-);) 
          v592(1) = X64Sar32 v592(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v592 #2 #226 v0(S) v1(-) v2(S) v3(-) [immediate:1097]
gap () () 
          v590(R) = X64Movsd : MRI v591(R) [immediate:1096]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v590 [immediate:1094] [immediate:1095]
gap () () 
          ArchJmp [immediate:1093]
gap () () 
          v581(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1092]
gap () () 
          X64Test32 && deoptimize if equal v581 #1 #225 v0(S) v1(-) v2(S) v3(-) [immediate:1091]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v581(R) [immediate:1089] v10(R) #224 v0(S) v1(-) v2(S) v3(-) [immediate:1090]
gap () () 
          v589(R) = X64MovqDecompressTaggedPointer : MRI v581(R) [immediate:1088]
gap () () 
          v588(R) = X64MovqDecompressAnyTagged : MRI v589(R) [immediate:1087]
gap () () 
          X64Test32 && deoptimize if equal v588 #1 #223 v0(S) v1(-) v2(S) v3(-) [immediate:1086]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v588(R) [immediate:1084] v25(R) #222 v0(S) v1(-) v2(S) v3(-) [immediate:1085]
gap () () 
          v585(R) = X64MovqDecompressTaggedPointer : MRI v588(R) [immediate:1083]
gap () () 
          v587(R) = X64MovqDecompressTaggedSigned : MRI v588(R) [immediate:1082]
gap () (v586(R) = v587(-);) 
          v586(1) = X64Sar32 v586(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v586 #4 #221 v0(S) v1(-) v2(S) v3(-) [immediate:1081]
gap () () 
          v582(R) = X64MovqDecompressAnyTagged : MRI v585(R) [immediate:1080]
gap () () 
          X64Test32 && branch if equal v582 #1 [immediate:1078] [immediate:1079]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v582(R) [immediate:1076] [immediate:1077]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v582(R) [immediate:1074] [immediate:1075]
gap () () 
          v584(R) = X64MovqDecompressTaggedPointer : MRI v582(R) [immediate:1073]
gap () () 
          X64Test8 : MRI && branch if equal v584(R) [immediate:1070] #16 [immediate:1071] [immediate:1072]
gap () () 
          ArchJmp [immediate:1069]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v584(R) [immediate:1067] [immediate:1068]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v584(R) [immediate:1065] [immediate:1066]
gap () () 
          ArchJmp [immediate:1064]
gap () () 
          X64Test32 : MRI && branch if not equal v582(R) [immediate:1061] #2147483646 [immediate:1062] [immediate:1063]
gap () () 
          ArchJmp [immediate:1060]
gap () () 
          ArchJmp [immediate:1059]
gap () () 
          v583(R) = X64Movsd : MRI v582(R) [immediate:1058]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v583 [immediate:1056] [immediate:1057]
gap () () 
          ArchJmp [immediate:1055]
gap () () 
          ArchJmp [immediate:1054]
gap () () 
          ArchJmp [immediate:1053]
gap () () 
          ArchJmp [immediate:1052]
gap () () 
          X64Cmp32 && branch if not equal v582 [immediate:1049] [immediate:1050] [immediate:1051]
gap () () 
          ArchJmp [immediate:1048]
gap () () 
          [constant:575] = ArchNop
gap () () 
          [constant:574] = ArchNop
gap () () 
          [constant:571] = ArchNop
gap () () 
          v570(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1047]
gap () () 
          v578(R) = X64MovqDecompressTaggedPointer : MRI v581(R) [immediate:1046]
gap () () 
          v580(R) = X64MovqDecompressTaggedSigned : MRI v581(R) [immediate:1045]
gap () (v579(R) = v580(-);) 
          v579(1) = X64Sar32 v579(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v579 #4 #220 v0(S) v1(-) v2(S) v3(-) [immediate:1044]
gap () () 
          v572(R) = X64MovqDecompressAnyTagged : MRI v578(R) [immediate:1043]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v579 #5 #219 v0(S) v1(-) v2(S) v3(-) [immediate:1042]
gap () () 
          v573(R) = X64MovqDecompressAnyTagged : MRI v578(R) [immediate:1041]
gap () () 
          X64Test32 && deoptimize if equal v570 #1 #218 v0(S) v1(-) v2(S) v3(-) [immediate:1040]
gap () () 
          v577(R) = X64MovqDecompressTaggedPointer : MRI v570(R) [immediate:1039]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v577(R) [immediate:1037] #1068 #217 v0(S) v1(-) v2(S) v3(-) [immediate:1038]
gap () () 
          v576(R) = X64MovqDecompressTaggedPointer : MRI v570(R) [immediate:1036]
gap () () 
          X64Cmp && deoptimize if not equal v575(R) v576 #216 v0(S) v1(-) v2(S) v3(-) [immediate:1035]
gap () () 
          X64Push v573(-)
gap () () 
          X64Push v572(-)
gap () () 
          X64Push v571(-)
gap () ([rdi|R|t] = v570(-); [rax|R|w64] = v70(-); [rsi|R|t] = v574(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1034] #-1 #215 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v566(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1033]
gap () () 
          X64Test32 && deoptimize if equal v566 #1 #214 v0(S) v1(-) v2(S) v3(-) v566(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v566(R) [immediate:1032] v10(R) #213 v0(S) v1(-) v2(S) v3(-) v566(-)
gap () () 
          v568(R) = X64MovqDecompressTaggedPointer : MRI v566(R) [immediate:1031]
gap () () 
          v562(R) = X64MovqDecompressAnyTagged : MRI v568(R) [immediate:1030]
gap () () 
          X64Test32 && deoptimize if equal v562 #1 #212 v0(S) v1(-) v2(S) v3(-) v566(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v562(R) [immediate:1029] v25(R) #211 v0(S) v1(-) v2(S) v3(-) v566(-)
gap () () 
          v560(R) = X64MovqDecompressTaggedPointer : MRI v562(R) [immediate:1028]
gap () () 
          v567(R) = X64MovqDecompressTaggedSigned : MRI v562(R) [immediate:1027]
gap () (v565(R) = v567(-);) 
          v565(1) = X64Sar32 v565(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v565 #4 #210 v0(S) v1(-) v2(S) v3(-) v566(-)
gap () () 
          v564(R) = X64Movl : MRI v560(R) [immediate:1026]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v564(R) [immediate:1024] [immediate:1025]
gap () ([rax|R|t] = v562(-); [rsi|R|w64] = v563(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1023] #-1 [rax|R|t] [rsi|R|w64]
gap (v561(-) = [rax|R|t];) (v558 = v561(-);) 
          ArchJmp [immediate:1022]
gap () (v558 = v560(-);) 
          ArchJmp [immediate:1021]
gap () () 
          [constant:559] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v558(R) [immediate:1020] v559(R)
gap () () 
          ArchJmp [immediate:1019]
gap () () 
          ArchJmp [immediate:1018]
gap () () 
          ArchJmp [immediate:1017]
gap () () 
          v415(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1016]
gap () () 
          X64Test32 && deoptimize if equal v415 #1 #209 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v415(R) [immediate:1015] v10(R) #208 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v557(R) = X64MovqDecompressTaggedPointer : MRI v415(R) [immediate:1014]
gap () () 
          v556(R) = X64MovqDecompressAnyTagged : MRI v557(R) [immediate:1013]
gap () () 
          X64Test32 && deoptimize if equal v556 #1 #207 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v556(R) [immediate:1012] v25(R) #206 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v423(R) = X64MovqDecompressTaggedPointer : MRI v556(R) [immediate:1011]
gap () () 
          v555(R) = X64MovqDecompressTaggedSigned : MRI v556(R) [immediate:1010]
gap () (v424(R) = v555(-);) 
          v424(1) = X64Sar32 v424(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v424 #5 #205 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v552(R) = X64MovqDecompressAnyTagged : MRI v423(R) [immediate:1009]
gap () () 
          X64Test32 && branch if equal v552 #1 [immediate:1007] [immediate:1008]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v552(R) [immediate:1005] [immediate:1006]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v552(R) [immediate:1003] [immediate:1004]
gap () () 
          v554(R) = X64MovqDecompressTaggedPointer : MRI v552(R) [immediate:1002]
gap () () 
          X64Test8 : MRI && branch if equal v554(R) [immediate:999] #16 [immediate:1000] [immediate:1001]
gap () () 
          ArchJmp [immediate:998]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v554(R) [immediate:996] [immediate:997]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v554(R) [immediate:994] [immediate:995]
gap () () 
          ArchJmp [immediate:993]
gap () () 
          X64Test32 : MRI && branch if not equal v552(R) [immediate:990] #2147483646 [immediate:991] [immediate:992]
gap () () 
          ArchJmp [immediate:989]
gap () () 
          ArchJmp [immediate:988]
gap () () 
          v553(R) = X64Movsd : MRI v552(R) [immediate:987]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v553 [immediate:985] [immediate:986]
gap () () 
          ArchJmp [immediate:984]
gap () () 
          ArchJmp [immediate:983]
gap () () 
          ArchJmp [immediate:982]
gap () () 
          ArchJmp [immediate:981]
gap () () 
          X64Cmp32 && branch if not equal v552 [immediate:978] [immediate:979] [immediate:980]
gap () () 
          ArchJmp [immediate:977]
gap () () 
          [constant:546] = ArchNop
gap () () 
          [constant:516] = ArchNop
gap () () 
          [constant:500] = ArchNop
gap () () 
          [constant:539] = ArchNop
gap () () 
          v449(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:976]
gap () () 
          v549(R) = X64MovqDecompressTaggedPointer : MRI v415(R) [immediate:975]
gap () () 
          v551(R) = X64MovqDecompressTaggedSigned : MRI v415(R) [immediate:974]
gap () (v550(R) = v551(-);) 
          v550(1) = X64Sar32 v550(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v550 #5 #204 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v450(R) = X64MovqDecompressAnyTagged : MRI v549(R) [immediate:973]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v550 #6 #203 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v451(R) = X64MovqDecompressAnyTagged : MRI v549(R) [immediate:972]
gap () () 
          X64Test32 && deoptimize if equal v449 #1 #202 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v548(R) = X64MovqDecompressTaggedPointer : MRI v449(R) [immediate:971]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v548(R) [immediate:970] #1068 #201 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v547(R) = X64MovqDecompressTaggedPointer : MRI v449(R) [immediate:969]
gap () () 
          X64Cmp && deoptimize if not equal v546(R) v547 #200 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v452(R) = X64MovqDecompressTaggedPointer : MRI v449(R) [immediate:968]
gap () () 
          X64Test32 && deoptimize if equal v450 #1 #199 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:967] v450(-) v451(-) v452(S)
gap () () 
          v543(R) = X64Movl : MRI v450(R) [immediate:966]
gap () () 
          X64Cmp32 && branch if equal v543(R) v539 [immediate:964] [immediate:965]
gap () () 
          [constant:545] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v545(R) v543 [immediate:962] [immediate:963]
gap () () 
          [constant:544] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v544(R) v543 [immediate:960] [immediate:961]
gap () () 
          [constant:542] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v542(R) v543 #198 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:959] v450(-) v451(-) v452(S)
gap () () 
          ArchJmp [immediate:958]
gap () () 
          ArchJmp [immediate:957]
gap () () 
          ArchJmp [immediate:956]
gap () () 
          ArchJmp [immediate:955]
gap () () 
          v541(R) = X64MovqDecompressTaggedPointer : MRI v450(R) [immediate:954]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v541(R) [immediate:952] v43(R) #197 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:953] v450(-) v451(-) v452(S)
gap () () 
          v531(R) = X64MovqDecompressTaggedPointer : MRI v541(R) [immediate:951]
gap () () 
          v540(R) = X64MovqDecompressTaggedSigned : MRI v541(R) [immediate:950]
gap () (v532(R) = v540(-);) 
          v532(1) = X64Sar32 v532(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v532 #0 #196 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:949] v450(-) v451(-) v452(S)
gap () () 
          v491(R) = X64Movsd : MRI v531(R) [immediate:948]
gap () () 
          X64Test32 && deoptimize if equal v451 #1 #195 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:947] v450(-) v451(-) v452(S)
gap () () 
          v536(R) = X64Movl : MRI v451(R) [immediate:946]
gap () () 
          X64Cmp32 && branch if equal v539(R) v536 [immediate:944] [immediate:945]
gap () () 
          [constant:538] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v538(R) v536 [immediate:942] [immediate:943]
gap () () 
          [constant:537] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v537(R) v536 [immediate:940] [immediate:941]
gap () () 
          [constant:535] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v535(R) v536 #194 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:939] v450(-) v451(-) v452(S)
gap () () 
          ArchJmp [immediate:938]
gap () () 
          ArchJmp [immediate:937]
gap () () 
          ArchJmp [immediate:936]
gap () () 
          ArchJmp [immediate:935]
gap () () 
          v534(R) = X64MovqDecompressTaggedPointer : MRI v451(R) [immediate:934]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v534(R) [immediate:932] v43(R) #193 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:933] v450(-) v451(-) v452(S)
gap () () 
          v529(R) = X64MovqDecompressTaggedPointer : MRI v534(R) [immediate:931]
gap () () 
          v533(R) = X64MovqDecompressTaggedSigned : MRI v534(R) [immediate:930]
gap () (v530(R) = v533(-);) 
          v530(1) = X64Sar32 v530(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v530 #0 #192 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:929] v450(-) v451(-) v452(S)
gap () () 
          v525(R) = X64Movsd : MRI v529(R) [immediate:928]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v525(R) v491 [immediate:926] [immediate:927]
gap () (v518 = v368(-);) 
          ArchJmp [immediate:925]
gap () (v518 = v367(-);) 
          ArchJmp [immediate:924]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v532 #1 #191 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:923] v450(-) v451(-) v452(S)
gap () () 
          v489(R) = X64Movsd : MRI v531(R) [immediate:922]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v530 #1 #190 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:921] v450(-) v451(-) v452(S)
gap () () 
          v528(R) = X64Movsd : MRI v529(R) [immediate:920]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v528(R) v489 [immediate:918] [immediate:919]
gap () (v517 = v368(-);) 
          ArchJmp [immediate:917]
gap () (v517 = v367(-);) 
          ArchJmp [immediate:916]
gap () () 
          [constant:507] = ArchNop
gap () () 
          v527(R) = AVXFloat64Sub v528(R) v489
gap () () 
          v519(R) = AVXFloat64Abs v527
gap () () 
          v524(R) = AVXFloat64Sub v525(R) v491
gap () () 
          v520(R) = AVXFloat64Abs v524
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v520(R) v519 [immediate:914] [immediate:915]
gap () () 
          v522(R) = AVXFloat64Mul v519(R) v507
gap () (v458 = v517(-); v456 = v300(-); v457 = v300(-); v455 = v518(-); v461 = v520(-); v497 = v522(-); v459 = v519(-);) 
          ArchJmp [immediate:913]
gap () () 
          v521(R) = AVXFloat64Mul v520(R) v507
gap () (v458 = v300(-); v456 = v517(-); v457 = v518(-); v455 = v300(-); v461 = v519(-); v497 = v521(-); v459 = v520(-);) 
          ArchJmp [immediate:912]
gap () () 
          [constant:515] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v515(R) [immediate:910] v516(R) #189 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:911] v450(-) v451(-) v452(S)
gap () () 
          v514(R) = X64MovqDecompressTaggedPointer : MRI v515(R) [immediate:909]
gap () () 
          v501(R) = X64Movl : MRI v514(R) [immediate:908]
gap () () 
          v513(R) = X64MovqDecompressAnyTagged : MRI v452(R) [immediate:907]
gap () () 
          X64Test32 && deoptimize if equal v513 #1 #188 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:906] v450(-) v451(-) v452(S)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v513(R) [immediate:904] v10(R) #187 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:905] v450(-) v451(-) v452(S)
gap () () 
          v427(R) = X64MovqDecompressTaggedPointer : MRI v513(R) [immediate:903]
gap () () 
          v511(R) = X64MovqDecompressAnyTagged : MRI v427(R) [immediate:902]
gap () () 
          v499(R) = X64Test32 && set if equal v511 #1
gap () (v488(R) = v511(-);) 
          v488(1) = X64Sar32 v488(R) #1
gap () () 
          X64Cmp32 && branch if not equal v499 #0 [immediate:900] [immediate:901]
gap () () 
          v512(R) = X64MovqDecompressTaggedPointer : MRI v511(R) [immediate:899]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v512(R) [immediate:897] [immediate:898]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v512(R) [immediate:895] #67 #186 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:896] v450(-) v451(-) v452(S)
gap () () 
          ArchJmp [immediate:894]
gap () () 
          ArchJmp [immediate:893]
gap () () 
          v509(R) = X64Movsd : MRI v511(R) [immediate:892]
gap () (v508 = v509(-);) 
          ArchJmp [immediate:891]
gap () () 
          v510(R) = SSEInt32ToFloat64 v488
gap () (v508 = v510(-);) 
          ArchJmp [immediate:890]
gap () () 
          v505(R) = AVXFloat64Add v508(R) v459
gap () () 
          v502(R) = SSEFloat64Round v505(R)
gap () () 
          v506(R) = AVXFloat64Sub v502(R) v507
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v505(R) v506 [immediate:888] [immediate:889]
gap () () 
          [constant:504] = ArchNop
gap () () 
          v503(R) = AVXFloat64Sub v502(R) v504
gap () (v433 = v503(-);) 
          ArchJmp [immediate:887]
gap () (v433 = v502(-);) 
          ArchJmp [immediate:886]
gap () () 
          v446(R) = SSEFloat64ToInt32 v433
gap () () 
          X64Cmp32 && deoptimize if not equal v500(R) v501 #185 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:885] v450(-) v451(-) v452(S)
gap () () 
          v498(R) = SSEInt32ToFloat64 v446
gap () () 
          X64Cmp32 && deoptimize if equal v499 #0 #184 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:884] v450(-) v451(-) v452(S)
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v498(R) v433 #183 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:883] v450(-) v451(-) v452(S)
gap () () 
          X64Cmp32 && branch if signed less than v488(R) v446 [immediate:881] [immediate:882]
gap () () 
          ArchJmp [immediate:880]
gap () () 
          v493(R) = AVXFloat64Add v497(R) v461
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v493(R) v459 [immediate:878] [immediate:879]
gap () (v487 = v489(-); v486 = v491(-); v481 = v493(-);) 
          ArchJmp [immediate:877]
gap () () 
          v496(R) = SSEInt32ToFloat64 v456
gap () () 
          v495(R) = SSEInt32ToFloat64 v455
gap () () 
          v490(R) = AVXFloat64Add v496(R) v489
gap () () 
          v492(R) = AVXFloat64Add v495(R) v491
gap () () 
          v494(R) = AVXFloat64Sub v493(R) v459
gap () (v487 = v490(-); v486 = v492(-); v481 = v494(-);) 
          ArchJmp [immediate:876]
gap () () 
          v467(R) = SSEInt32ToFloat64 v458
gap () () 
          v465(R) = SSEInt32ToFloat64 v457
gap () (v485(R) = v488(-);) 
          v485(1) = X64Add32 && deoptimize if overflow v485(R) #1 #182 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:875] v450(-) v451(-) v452(S)
gap () () 
          v479(R) = AVXFloat64Add v487(R) v467
gap () () 
          v480(R) = AVXFloat64Add v486(R) v465
gap () (v482 = v485(-);) 
          v482(1) = ArchNop v482
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:873] [immediate:874]
gap () () 
          [constant:484] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v484(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:871] #-1 #181 v0(S) v1(S) v2(S) v3(S) v449(S) [immediate:872] v450(S) v451(S) v452(S) v480(S) v479(S) v455(S) v456(S) v457(S) v458(S) v459(S) v481(S) v461(S) v433(S) v482(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:870]
gap () () 
          ArchJmp [immediate:869]
gap () (v471 = v479(-); v470 = v480(-); v472 = v481(-); v469 = v482(-);) 
          ArchJmp [immediate:868]
gap () () 
          X64Cmp32 && branch if signed less than v469(R) v446 [immediate:866] [immediate:867]
gap () () 
          v475(R) = AVXFloat64Add v472(R) v461
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v475(R) v459 [immediate:864] [immediate:865]
gap () (v468 = v471(-); v466 = v470(-); v460 = v475(-);) 
          ArchJmp [immediate:863]
gap () () 
          v478(R) = SSEInt32ToFloat64 v456
gap () () 
          v473(R) = AVXFloat64Add v478(R) v471
gap () () 
          v477(R) = SSEInt32ToFloat64 v455
gap () () 
          v474(R) = AVXFloat64Add v477(R) v470
gap () () 
          v476(R) = AVXFloat64Sub v475(R) v459
gap () (v468 = v473(-); v466 = v474(-); v460 = v476(-);) 
          ArchJmp [immediate:862]
gap () (v464(R) = v469(-);) 
          v464(1) = X64Add32 && deoptimize if overflow v464(R) #1 #180 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:861] v450(-) v451(-) v452(S) v470(-) v471(-) v455(-) v456(-) v457(-) v458(-) v459(-) v472(-) v461(-) v433(-) v469(-) v433(-)
gap () () 
          v454(R) = AVXFloat64Add v467(R) v468
gap () () 
          v453(R) = AVXFloat64Add v465(R) v466
gap () (v462 = v464(-);) 
          v462(1) = ArchNop v462
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:859] [immediate:860]
gap () () 
          [constant:463] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v463(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:857] #-1 #179 v0(S) v1(S) v2(S) v3(S) v449(S) [immediate:858] v450(S) v451(S) v452(S) v453(S) v454(S) v455(S) v456(S) v457(S) v458(S) v459(S) v460(S) v461(S) v433(S) v462(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:856]
gap () () 
          ArchJmp [immediate:855]
gap () (v471 = v454(-); v470 = v453(-); v472 = v460(-); v469 = v462(-);) 
          ArchJmp [immediate:854]
gap () () 
          ArchJmp [immediate:853]
gap () () 
          X64Cmp32 && branch if equal v446 #0 [immediate:851] [immediate:852]
gap () () 
          ArchJmp [immediate:850]
gap () () 
          v447(R) = SSEFloat64ExtractHighWord32 v433
gap () () 
          X64Cmp32 && branch if signed less than v447 #0 [immediate:848] [immediate:849]
gap () () 
          ArchJmp [immediate:847]
gap () (v445(R) = v446(-);) 
          v445(1) = X64Add32 && branch if overflow v445(R) v446(R) [immediate:843] [immediate:844] [immediate:845] [immediate:846]
gap () (v444 = v445(-);) 
          v444(1) = ArchNop v444
gap () (v428 = v444(-);) 
          ArchJmp [immediate:842]
gap () () 
          ArchJmp [immediate:841]
gap () () 
          ArchJmp [immediate:840]
gap () () 
          [constant:442] = ArchNop
gap () () 
          v438(R) = X64Movq : MR v28(R)
gap () () 
          v443(R) = X64Lea : MRI v438(R) [immediate:839]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v443(R) [immediate:837] [immediate:838]
gap () () 
          ArchJmp [immediate:836]
gap () ([rdx|R|w64] = v442(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:835] #-1 [rdx|R|w64]
gap (v441(-) = [rax|R|tp];) () 
          v439(R) = X64Lea : MRI v441(R) [immediate:834]
gap () (v436 = v439(-);) 
          ArchJmp [immediate:833]
gap () (v436 = v438(-);) 
          ArchJmp [immediate:832]
gap () () 
          [constant:434] = ArchNop
gap () () 
          v437(R) = X64Lea : MRI v436(R) [immediate:831]
gap () () 
          X64Movq : MR v28(R) v437(R)
gap () () 
          v435(R) = X64Lea : MRI v436(R) [immediate:830]
gap () (v432 = v435(-);) 
          v432(1) = ArchNop v432
gap () () 
          X64MovqCompressTagged : MRI v432(R) [immediate:829] v434(R)
gap () () 
          X64Movsd : MRI v432(R) [immediate:828] v433(R)
gap () (v428 = v432(-);) 
          ArchJmp [immediate:827]
gap () () 
          [constant:425] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v427(R) [immediate:826] v428(R)
gap () () 
          v426(R) = X64Movl : MRI v423(R) [immediate:825]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v426(R) #178 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          X64MovqCompressTagged : MRI v423(R) [immediate:824] v425(R)
gap () () 
          ArchJmp [immediate:823]
gap () () 
          ArchJmp [immediate:822]
gap () () 
          ArchJmp [immediate:821]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v424 #6 #177 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v420(R) = X64MovqDecompressAnyTagged : MRI v423(R) [immediate:820]
gap () () 
          X64Test32 && branch if equal v420 #1 [immediate:818] [immediate:819]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v420(R) [immediate:816] [immediate:817]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v420(R) [immediate:814] [immediate:815]
gap () () 
          v422(R) = X64MovqDecompressTaggedPointer : MRI v420(R) [immediate:813]
gap () () 
          X64Test8 : MRI && branch if equal v422(R) [immediate:810] #16 [immediate:811] [immediate:812]
gap () () 
          ArchJmp [immediate:809]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v422(R) [immediate:807] [immediate:808]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v422(R) [immediate:805] [immediate:806]
gap () () 
          ArchJmp [immediate:804]
gap () () 
          X64Test32 : MRI && branch if not equal v420(R) [immediate:801] #2147483646 [immediate:802] [immediate:803]
gap () () 
          ArchJmp [immediate:800]
gap () () 
          ArchJmp [immediate:799]
gap () () 
          v421(R) = X64Movsd : MRI v420(R) [immediate:798]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v421 [immediate:796] [immediate:797]
gap () () 
          ArchJmp [immediate:795]
gap () () 
          ArchJmp [immediate:794]
gap () () 
          ArchJmp [immediate:793]
gap () () 
          ArchJmp [immediate:792]
gap () () 
          X64Cmp32 && branch if not equal v420 [immediate:789] [immediate:790] [immediate:791]
gap () () 
          ArchJmp [immediate:788]
gap () () 
          [constant:413] = ArchNop
gap () () 
          [constant:412] = ArchNop
gap () () 
          [constant:409] = ArchNop
gap () () 
          [constant:400] = ArchNop
gap () () 
          v408(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:787]
gap () () 
          v417(R) = X64MovqDecompressTaggedPointer : MRI v415(R) [immediate:786]
gap () () 
          v419(R) = X64MovqDecompressTaggedSigned : MRI v415(R) [immediate:785]
gap () (v418(R) = v419(-);) 
          v418(1) = X64Sar32 v418(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v418 #6 #176 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v410(R) = X64MovqDecompressAnyTagged : MRI v417(R) [immediate:784]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v418 #7 #175 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v411(R) = X64MovqDecompressAnyTagged : MRI v417(R) [immediate:783]
gap () () 
          X64Test32 && deoptimize if equal v408 #1 #174 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v416(R) = X64MovqDecompressTaggedPointer : MRI v408(R) [immediate:782]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v416(R) [immediate:781] #1068 #173 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v414(R) = X64MovqDecompressTaggedPointer : MRI v408(R) [immediate:780]
gap () () 
          X64Cmp && deoptimize if not equal v413(R) v414 #172 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          X64Push v411(-)
gap () () 
          X64Push v410(-)
gap () () 
          X64Push v409(-)
gap () ([rdi|R|t] = v408(-); [rax|R|w64] = v70(-); [rsi|R|t] = v412(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:779] #-1 #171 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v402(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:778]
gap () () 
          X64Test32 && deoptimize if equal v402 #1 #170 v0(S) v1(-) v2(S) v3(-) v402(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v402(R) [immediate:777] v10(R) #169 v0(S) v1(-) v2(S) v3(-) v402(-)
gap () () 
          v406(R) = X64MovqDecompressTaggedPointer : MRI v402(R) [immediate:776]
gap () () 
          v404(R) = X64MovqDecompressAnyTagged : MRI v406(R) [immediate:775]
gap () () 
          X64Test32 && deoptimize if equal v404 #1 #168 v0(S) v1(-) v2(S) v3(-) v402(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v404(R) [immediate:774] v25(R) #167 v0(S) v1(-) v2(S) v3(-) v402(-)
gap () () 
          v399(R) = X64MovqDecompressTaggedPointer : MRI v404(R) [immediate:773]
gap () () 
          v405(R) = X64Movl : MRI v399(R) [immediate:772]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v405(R) #166 v0(S) v1(-) v2(S) v3(-) v402(-)
gap () () 
          v403(R) = X64MovqDecompressTaggedSigned : MRI v404(R) [immediate:771]
gap () (v401(R) = v403(-);) 
          v401(1) = X64Sar32 v401(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v401 #6 #165 v0(S) v1(-) v2(S) v3(-) v402(-)
gap () () 
          X64MovqCompressTagged : MRI v399(R) [immediate:770] v400(R)
gap () () 
          ArchJmp [immediate:769]
gap () () 
          ArchJmp [immediate:768]
gap () () 
          ArchJmp [immediate:767]
gap () () 
          v262(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:766]
gap () () 
          X64Test32 && deoptimize if equal v262 #1 #164 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v262(R) [immediate:765] v10(R) #163 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v398(R) = X64MovqDecompressTaggedPointer : MRI v262(R) [immediate:764]
gap () () 
          v397(R) = X64MovqDecompressAnyTagged : MRI v398(R) [immediate:763]
gap () () 
          X64Test32 && deoptimize if equal v397 #1 #162 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v397(R) [immediate:762] v25(R) #161 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v259(R) = X64MovqDecompressTaggedPointer : MRI v397(R) [immediate:761]
gap () () 
          v396(R) = X64MovqDecompressTaggedSigned : MRI v397(R) [immediate:760]
gap () (v395(R) = v396(-);) 
          v395(1) = X64Sar32 v395(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v395 #7 #160 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v392(R) = X64MovqDecompressAnyTagged : MRI v259(R) [immediate:759]
gap () () 
          X64Test32 && branch if equal v392 #1 [immediate:757] [immediate:758]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v392(R) [immediate:755] [immediate:756]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v392(R) [immediate:753] [immediate:754]
gap () () 
          v394(R) = X64MovqDecompressTaggedPointer : MRI v392(R) [immediate:752]
gap () () 
          X64Test8 : MRI && branch if equal v394(R) [immediate:749] #16 [immediate:750] [immediate:751]
gap () () 
          ArchJmp [immediate:748]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v394(R) [immediate:746] [immediate:747]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v394(R) [immediate:744] [immediate:745]
gap () () 
          ArchJmp [immediate:743]
gap () () 
          X64Test32 : MRI && branch if not equal v392(R) [immediate:740] #2147483646 [immediate:741] [immediate:742]
gap () () 
          ArchJmp [immediate:739]
gap () () 
          ArchJmp [immediate:738]
gap () () 
          v393(R) = X64Movsd : MRI v392(R) [immediate:737]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v393 [immediate:735] [immediate:736]
gap () () 
          ArchJmp [immediate:734]
gap () () 
          ArchJmp [immediate:733]
gap () () 
          ArchJmp [immediate:732]
gap () () 
          ArchJmp [immediate:731]
gap () () 
          X64Cmp32 && branch if not equal v392 [immediate:728] [immediate:729] [immediate:730]
gap () () 
          ArchJmp [immediate:727]
gap () () 
          [constant:386] = ArchNop
gap () () 
          [constant:345] = ArchNop
gap () () 
          v285(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:726]
gap () () 
          v389(R) = X64MovqDecompressTaggedPointer : MRI v262(R) [immediate:725]
gap () () 
          v391(R) = X64MovqDecompressTaggedSigned : MRI v262(R) [immediate:724]
gap () (v390(R) = v391(-);) 
          v390(1) = X64Sar32 v390(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v390 #7 #159 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v286(R) = X64MovqDecompressAnyTagged : MRI v389(R) [immediate:723]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v390 #4 #158 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v287(R) = X64MovqDecompressAnyTagged : MRI v389(R) [immediate:722]
gap () () 
          X64Test32 && deoptimize if equal v285 #1 #157 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v388(R) = X64MovqDecompressTaggedPointer : MRI v285(R) [immediate:721]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v388(R) [immediate:720] #1068 #156 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v387(R) = X64MovqDecompressTaggedPointer : MRI v285(R) [immediate:719]
gap () () 
          X64Cmp && deoptimize if not equal v386(R) v387 #155 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v288(R) = X64MovqDecompressTaggedPointer : MRI v285(R) [immediate:718]
gap () () 
          [constant:353] = ArchNop
gap () () 
          [constant:379] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v286 #1 #154 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:717] v286(-) v287(-) v288(S)
gap () () 
          v383(R) = X64Movl : MRI v286(R) [immediate:716]
gap () () 
          X64Cmp32 && branch if equal v383(R) v379 [immediate:714] [immediate:715]
gap () () 
          [constant:385] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v385(R) v383 [immediate:712] [immediate:713]
gap () () 
          [constant:384] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v384(R) v383 [immediate:710] [immediate:711]
gap () () 
          [constant:382] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v382(R) v383 #153 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:709] v286(-) v287(-) v288(S)
gap () () 
          ArchJmp [immediate:708]
gap () () 
          ArchJmp [immediate:707]
gap () () 
          ArchJmp [immediate:706]
gap () () 
          ArchJmp [immediate:705]
gap () () 
          v381(R) = X64MovqDecompressTaggedPointer : MRI v286(R) [immediate:704]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v381(R) [immediate:702] v43(R) #152 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:703] v286(-) v287(-) v288(S)
gap () () 
          v371(R) = X64MovqDecompressTaggedPointer : MRI v381(R) [immediate:701]
gap () () 
          v380(R) = X64MovqDecompressTaggedSigned : MRI v381(R) [immediate:700]
gap () (v372(R) = v380(-);) 
          v372(1) = X64Sar32 v372(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v372 #0 #151 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:699] v286(-) v287(-) v288(S)
gap () () 
          v329(R) = X64Movsd : MRI v371(R) [immediate:698]
gap () () 
          X64Test32 && deoptimize if equal v287 #1 #150 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:697] v286(-) v287(-) v288(S)
gap () () 
          v376(R) = X64Movl : MRI v287(R) [immediate:696]
gap () () 
          X64Cmp32 && branch if equal v379(R) v376 [immediate:694] [immediate:695]
gap () () 
          [constant:378] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v378(R) v376 [immediate:692] [immediate:693]
gap () () 
          [constant:377] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v377(R) v376 [immediate:690] [immediate:691]
gap () () 
          [constant:375] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v375(R) v376 #149 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:689] v286(-) v287(-) v288(S)
gap () () 
          ArchJmp [immediate:688]
gap () () 
          ArchJmp [immediate:687]
gap () () 
          ArchJmp [immediate:686]
gap () () 
          ArchJmp [immediate:685]
gap () () 
          v374(R) = X64MovqDecompressTaggedPointer : MRI v287(R) [immediate:684]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v374(R) [immediate:682] v43(R) #148 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:683] v286(-) v287(-) v288(S)
gap () () 
          v369(R) = X64MovqDecompressTaggedPointer : MRI v374(R) [immediate:681]
gap () () 
          v373(R) = X64MovqDecompressTaggedSigned : MRI v374(R) [immediate:680]
gap () (v370(R) = v373(-);) 
          v370(1) = X64Sar32 v370(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v370 #0 #147 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:679] v286(-) v287(-) v288(S)
gap () () 
          v363(R) = X64Movsd : MRI v369(R) [immediate:678]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v363(R) v329 [immediate:676] [immediate:677]
gap () (v356 = v368(-);) 
          ArchJmp [immediate:675]
gap () (v356 = v367(-);) 
          ArchJmp [immediate:674]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v372 #1 #146 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:673] v286(-) v287(-) v288(S)
gap () () 
          v327(R) = X64Movsd : MRI v371(R) [immediate:672]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v370 #1 #145 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:671] v286(-) v287(-) v288(S)
gap () () 
          v366(R) = X64Movsd : MRI v369(R) [immediate:670]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v366(R) v327 [immediate:668] [immediate:669]
gap () (v355 = v368(-);) 
          ArchJmp [immediate:667]
gap () (v355 = v367(-);) 
          ArchJmp [immediate:666]
gap () () 
          v365(R) = AVXFloat64Sub v366(R) v327
gap () () 
          v357(R) = AVXFloat64Abs v365
gap () () 
          v362(R) = AVXFloat64Sub v363(R) v329
gap () () 
          v358(R) = AVXFloat64Abs v362
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v358(R) v357 [immediate:664] [immediate:665]
gap () () 
          v360(R) = AVXFloat64Mul v357(R) v345
gap () (v294 = v355(-); v292 = v300(-); v293 = v300(-); v291 = v356(-); v297 = v358(-); v335 = v360(-); v295 = v357(-);) 
          ArchJmp [immediate:663]
gap () () 
          v359(R) = AVXFloat64Mul v358(R) v345
gap () (v294 = v300(-); v292 = v355(-); v293 = v356(-); v291 = v300(-); v297 = v357(-); v335 = v359(-); v295 = v358(-);) 
          ArchJmp [immediate:662]
gap () () 
          [constant:354] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v353(R) [immediate:660] v354(R) #144 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:661] v286(-) v287(-) v288(S)
gap () () 
          v352(R) = X64MovqDecompressTaggedPointer : MRI v353(R) [immediate:659]
gap () () 
          v339(R) = X64Movl : MRI v352(R) [immediate:658]
gap () () 
          v351(R) = X64MovqDecompressAnyTagged : MRI v288(R) [immediate:657]
gap () () 
          X64Test32 && deoptimize if equal v351 #1 #143 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:656] v286(-) v287(-) v288(S)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v351(R) [immediate:654] v10(R) #142 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:655] v286(-) v287(-) v288(S)
gap () () 
          v263(R) = X64MovqDecompressTaggedPointer : MRI v351(R) [immediate:653]
gap () () 
          v349(R) = X64MovqDecompressAnyTagged : MRI v263(R) [immediate:652]
gap () () 
          v337(R) = X64Test32 && set if equal v349 #1
gap () (v326(R) = v349(-);) 
          v326(1) = X64Sar32 v326(R) #1
gap () () 
          X64Cmp32 && branch if not equal v337 #0 [immediate:650] [immediate:651]
gap () () 
          v350(R) = X64MovqDecompressTaggedPointer : MRI v349(R) [immediate:649]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v350(R) [immediate:647] [immediate:648]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v350(R) [immediate:645] #67 #141 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:646] v286(-) v287(-) v288(S)
gap () () 
          ArchJmp [immediate:644]
gap () () 
          ArchJmp [immediate:643]
gap () () 
          v347(R) = X64Movsd : MRI v349(R) [immediate:642]
gap () (v346 = v347(-);) 
          ArchJmp [immediate:641]
gap () () 
          v348(R) = SSEInt32ToFloat64 v326
gap () (v346 = v348(-);) 
          ArchJmp [immediate:640]
gap () () 
          v343(R) = AVXFloat64Add v346(R) v295
gap () () 
          v340(R) = SSEFloat64Round v343(R)
gap () () 
          v344(R) = AVXFloat64Sub v340(R) v345
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v343(R) v344 [immediate:638] [immediate:639]
gap () () 
          [constant:342] = ArchNop
gap () () 
          v341(R) = AVXFloat64Sub v340(R) v342
gap () (v269 = v341(-);) 
          ArchJmp [immediate:637]
gap () (v269 = v340(-);) 
          ArchJmp [immediate:636]
gap () () 
          v282(R) = SSEFloat64ToInt32 v269
gap () () 
          [constant:338] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v338(R) v339 #140 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:635] v286(-) v287(-) v288(S)
gap () () 
          v336(R) = SSEInt32ToFloat64 v282
gap () () 
          X64Cmp32 && deoptimize if equal v337 #0 #139 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:634] v286(-) v287(-) v288(S)
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v336(R) v269 #138 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:633] v286(-) v287(-) v288(S)
gap () () 
          X64Cmp32 && branch if signed less than v326(R) v282 [immediate:631] [immediate:632]
gap () () 
          ArchJmp [immediate:630]
gap () () 
          v331(R) = AVXFloat64Add v335(R) v297
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v331(R) v295 [immediate:628] [immediate:629]
gap () (v325 = v327(-); v324 = v329(-); v319 = v331(-);) 
          ArchJmp [immediate:627]
gap () () 
          v334(R) = SSEInt32ToFloat64 v292
gap () () 
          v333(R) = SSEInt32ToFloat64 v291
gap () () 
          v328(R) = AVXFloat64Add v334(R) v327
gap () () 
          v330(R) = AVXFloat64Add v333(R) v329
gap () () 
          v332(R) = AVXFloat64Sub v331(R) v295
gap () (v325 = v328(-); v324 = v330(-); v319 = v332(-);) 
          ArchJmp [immediate:626]
gap () () 
          v305(R) = SSEInt32ToFloat64 v294
gap () () 
          v303(R) = SSEInt32ToFloat64 v293
gap () (v323(R) = v326(-);) 
          v323(1) = X64Add32 && deoptimize if overflow v323(R) #1 #137 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:625] v286(-) v287(-) v288(S)
gap () () 
          v317(R) = AVXFloat64Add v325(R) v305
gap () () 
          v318(R) = AVXFloat64Add v324(R) v303
gap () (v320 = v323(-);) 
          v320(1) = ArchNop v320
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:623] [immediate:624]
gap () () 
          [constant:322] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v322(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:621] #-1 #136 v0(S) v1(S) v2(S) v3(S) v285(S) [immediate:622] v286(S) v287(S) v288(S) v318(S) v317(S) v291(S) v292(S) v293(S) v294(S) v295(S) v319(S) v297(S) v269(S) v320(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:620]
gap () () 
          ArchJmp [immediate:619]
gap () (v309 = v317(-); v308 = v318(-); v310 = v319(-); v307 = v320(-);) 
          ArchJmp [immediate:618]
gap () () 
          X64Cmp32 && branch if signed less than v307(R) v282 [immediate:616] [immediate:617]
gap () () 
          v313(R) = AVXFloat64Add v310(R) v297
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v313(R) v295 [immediate:614] [immediate:615]
gap () (v306 = v309(-); v304 = v308(-); v296 = v313(-);) 
          ArchJmp [immediate:613]
gap () () 
          v316(R) = SSEInt32ToFloat64 v292
gap () () 
          v311(R) = AVXFloat64Add v316(R) v309
gap () () 
          v315(R) = SSEInt32ToFloat64 v291
gap () () 
          v312(R) = AVXFloat64Add v315(R) v308
gap () () 
          v314(R) = AVXFloat64Sub v313(R) v295
gap () (v306 = v311(-); v304 = v312(-); v296 = v314(-);) 
          ArchJmp [immediate:612]
gap () (v302(R) = v307(-);) 
          v302(1) = X64Add32 && deoptimize if overflow v302(R) #1 #135 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:611] v286(-) v287(-) v288(S) v308(-) v309(-) v291(-) v292(-) v293(-) v294(-) v295(-) v310(-) v297(-) v269(-) v307(-) v269(-)
gap () () 
          v290(R) = AVXFloat64Add v305(R) v306
gap () () 
          v289(R) = AVXFloat64Add v303(R) v304
gap () (v298 = v302(-);) 
          v298(1) = ArchNop v298
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:609] [immediate:610]
gap () () 
          [constant:301] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v301(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:607] #-1 #134 v0(S) v1(S) v2(S) v3(S) v285(S) [immediate:608] v286(S) v287(S) v288(S) v289(S) v290(S) v291(S) v292(S) v293(S) v294(S) v295(S) v296(S) v297(S) v269(S) v298(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:606]
gap () () 
          ArchJmp [immediate:605]
gap () (v309 = v290(-); v308 = v289(-); v310 = v296(-); v307 = v298(-);) 
          ArchJmp [immediate:604]
gap () () 
          ArchJmp [immediate:603]
gap () () 
          X64Cmp32 && branch if equal v282 #0 [immediate:601] [immediate:602]
gap () () 
          ArchJmp [immediate:600]
gap () () 
          v283(R) = SSEFloat64ExtractHighWord32 v269
gap () () 
          X64Cmp32 && branch if signed less than v283 #0 [immediate:598] [immediate:599]
gap () () 
          ArchJmp [immediate:597]
gap () (v281(R) = v282(-);) 
          v281(1) = X64Add32 && branch if overflow v281(R) v282(R) [immediate:593] [immediate:594] [immediate:595] [immediate:596]
gap () (v280 = v281(-);) 
          v280(1) = ArchNop v280
gap () (v264 = v280(-);) 
          ArchJmp [immediate:592]
gap () () 
          ArchJmp [immediate:591]
gap () () 
          ArchJmp [immediate:590]
gap () () 
          [constant:270] = ArchNop
gap () () 
          [constant:278] = ArchNop
gap () () 
          v274(R) = X64Movq : MR v28(R)
gap () () 
          v279(R) = X64Lea : MRI v274(R) [immediate:589]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v279(R) [immediate:587] [immediate:588]
gap () () 
          ArchJmp [immediate:586]
gap () ([rdx|R|w64] = v278(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:585] #-1 [rdx|R|w64]
gap (v277(-) = [rax|R|tp];) () 
          v275(R) = X64Lea : MRI v277(R) [immediate:584]
gap () (v272 = v275(-);) 
          ArchJmp [immediate:583]
gap () (v272 = v274(-);) 
          ArchJmp [immediate:582]
gap () () 
          v273(R) = X64Lea : MRI v272(R) [immediate:581]
gap () () 
          X64Movq : MR v28(R) v273(R)
gap () () 
          v271(R) = X64Lea : MRI v272(R) [immediate:580]
gap () (v268 = v271(-);) 
          v268(1) = ArchNop v268
gap () () 
          X64MovqCompressTagged : MRI v268(R) [immediate:579] v270(R)
gap () () 
          X64Movsd : MRI v268(R) [immediate:578] v269(R)
gap () (v264 = v268(-);) 
          ArchJmp [immediate:577]
gap () () 
          [constant:260] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v263(R) [immediate:576] v264(R)
gap () () 
          v261(R) = X64Movl : MRI v259(R) [immediate:575]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v261(R) #133 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          X64MovqCompressTagged : MRI v259(R) [immediate:574] v260(R)
gap () () 
          ArchJmp [immediate:573]
gap () () 
          ArchJmp [immediate:572]
gap () () 
          ArchJmp [immediate:571]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:569] v49(R) #132 v0(S) v1(-) v2(S) v3(-) [immediate:570]
gap () () 
          v256(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:568]
gap () () 
          v258(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:567]
gap () (v257(R) = v258(-);) 
          v257(1) = X64Sar32 v257(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v257 #3 #131 v0(S) v1(-) v2(S) v3(-) [immediate:566]
gap () () 
          v254(R) = X64MovqDecompressAnyTagged : MRI v256(R) [immediate:565]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v254(R) [immediate:563] [immediate:564]
gap () (v253 = v254(-);) 
          ArchJmp [immediate:562]
gap () () 
          [constant:255] = ArchNop
gap () (v253 = v255(-);) 
          ArchJmp [immediate:561]
gap () () 
          X64Test32 && deoptimize if equal v253 #1 #130 v0(S) v1(-) v2(S) v3(-) [immediate:560]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v253(R) [immediate:558] v43(R) #129 v0(S) v1(-) v2(S) v3(-) [immediate:559]
gap () () 
          v250(R) = X64MovqDecompressTaggedPointer : MRI v253(R) [immediate:557]
gap () () 
          v252(R) = X64MovqDecompressTaggedSigned : MRI v253(R) [immediate:556]
gap () (v251(R) = v252(-);) 
          v251(1) = X64Sar32 v251(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v251 #2 #128 v0(S) v1(-) v2(S) v3(-) [immediate:555]
gap () () 
          v249(R) = X64Movsd : MRI v250(R) [immediate:554]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v249 [immediate:552] [immediate:553]
gap () () 
          ArchJmp [immediate:551]
gap () () 
          v236(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:550]
gap () () 
          X64Test32 && deoptimize if equal v236 #1 #127 v0(S) v1(-) v2(S) v3(-) [immediate:549]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v236(R) [immediate:547] v10(R) #126 v0(S) v1(-) v2(S) v3(-) [immediate:548]
gap () () 
          v248(R) = X64MovqDecompressTaggedPointer : MRI v236(R) [immediate:546]
gap () () 
          v247(R) = X64MovqDecompressAnyTagged : MRI v248(R) [immediate:545]
gap () () 
          X64Test32 && deoptimize if equal v247 #1 #125 v0(S) v1(-) v2(S) v3(-) [immediate:544]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v247(R) [immediate:542] v25(R) #124 v0(S) v1(-) v2(S) v3(-) [immediate:543]
gap () () 
          v240(R) = X64MovqDecompressTaggedPointer : MRI v247(R) [immediate:541]
gap () () 
          v246(R) = X64MovqDecompressTaggedSigned : MRI v247(R) [immediate:540]
gap () (v241(R) = v246(-);) 
          v241(1) = X64Sar32 v241(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v241 #4 #123 v0(S) v1(-) v2(S) v3(-) [immediate:539]
gap () () 
          v243(R) = X64MovqDecompressAnyTagged : MRI v240(R) [immediate:538]
gap () () 
          X64Test32 && branch if equal v243 #1 [immediate:536] [immediate:537]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v243(R) [immediate:534] [immediate:535]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v243(R) [immediate:532] [immediate:533]
gap () () 
          v245(R) = X64MovqDecompressTaggedPointer : MRI v243(R) [immediate:531]
gap () () 
          X64Test8 : MRI && branch if equal v245(R) [immediate:528] #16 [immediate:529] [immediate:530]
gap () () 
          ArchJmp [immediate:527]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v245(R) [immediate:525] [immediate:526]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v245(R) [immediate:523] [immediate:524]
gap () () 
          ArchJmp [immediate:522]
gap () () 
          X64Test32 : MRI && branch if not equal v243(R) [immediate:519] #2147483646 [immediate:520] [immediate:521]
gap () () 
          ArchJmp [immediate:518]
gap () () 
          ArchJmp [immediate:517]
gap () () 
          v244(R) = X64Movsd : MRI v243(R) [immediate:516]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v244 [immediate:514] [immediate:515]
gap () () 
          ArchJmp [immediate:513]
gap () () 
          ArchJmp [immediate:512]
gap () () 
          ArchJmp [immediate:511]
gap () () 
          ArchJmp [immediate:510]
gap () () 
          X64Cmp32 && branch if not equal v243 [immediate:507] [immediate:508] [immediate:509]
gap () () 
          ArchJmp [immediate:506]
gap () () 
          v242(R) = X64Movl : MRI v2(R) [immediate:505]
gap () () 
          ArchDeoptimize #122 v0(S) v1(-) v2(S) v3(-) v242(-) v236(-) [immediate:504]
gap () () 
          ArchJmp [immediate:503]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v241 #8 #121 v0(S) v1(-) v2(S) v3(-) [immediate:502]
gap () () 
          v237(R) = X64MovqDecompressAnyTagged : MRI v240(R) [immediate:501]
gap () () 
          X64Test32 && branch if equal v237 #1 [immediate:499] [immediate:500]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v237(R) [immediate:497] [immediate:498]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v237(R) [immediate:495] [immediate:496]
gap () () 
          v239(R) = X64MovqDecompressTaggedPointer : MRI v237(R) [immediate:494]
gap () () 
          X64Test8 : MRI && branch if equal v239(R) [immediate:491] #16 [immediate:492] [immediate:493]
gap () () 
          ArchJmp [immediate:490]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v239(R) [immediate:488] [immediate:489]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v239(R) [immediate:486] [immediate:487]
gap () () 
          ArchJmp [immediate:485]
gap () () 
          X64Test32 : MRI && branch if not equal v237(R) [immediate:482] #2147483646 [immediate:483] [immediate:484]
gap () () 
          ArchJmp [immediate:481]
gap () () 
          ArchJmp [immediate:480]
gap () () 
          v238(R) = X64Movsd : MRI v237(R) [immediate:479]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v238 [immediate:477] [immediate:478]
gap () () 
          ArchJmp [immediate:476]
gap () () 
          ArchJmp [immediate:475]
gap () () 
          ArchJmp [immediate:474]
gap () () 
          ArchJmp [immediate:473]
gap () () 
          X64Cmp32 && branch if not equal v237 [immediate:470] [immediate:471] [immediate:472]
gap () () 
          ArchJmp [immediate:469]
gap () () 
          v225(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:468]
gap () () 
          v233(R) = X64MovqDecompressTaggedPointer : MRI v236(R) [immediate:467]
gap () () 
          v235(R) = X64MovqDecompressTaggedSigned : MRI v236(R) [immediate:466]
gap () (v234(R) = v235(-);) 
          v234(1) = X64Sar32 v234(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v234 #5 #120 v0(S) v1(-) v2(S) v3(-) [immediate:465]
gap () () 
          v227(R) = X64MovqDecompressAnyTagged : MRI v233(R) [immediate:464]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v234 #1 #119 v0(S) v1(-) v2(S) v3(-) [immediate:463]
gap () () 
          v228(R) = X64MovqDecompressAnyTagged : MRI v233(R) [immediate:462]
gap () () 
          X64Test32 && deoptimize if equal v225 #1 #118 v0(S) v1(-) v2(S) v3(-) [immediate:461]
gap () () 
          v232(R) = X64MovqDecompressTaggedPointer : MRI v225(R) [immediate:460]
gap () () 
          [constant:230] = ArchNop
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v232(R) [immediate:458] #1068 #117 v0(S) v1(-) v2(S) v3(-) [immediate:459]
gap () () 
          v231(R) = X64MovqDecompressTaggedPointer : MRI v225(R) [immediate:457]
gap () () 
          [constant:229] = ArchNop
gap () () 
          [constant:226] = ArchNop
gap () () 
          X64Cmp && deoptimize if not equal v230(R) v231 #116 v0(S) v1(-) v2(S) v3(-) [immediate:456]
gap () () 
          X64Push v228(-)
gap () () 
          X64Push v227(-)
gap () () 
          X64Push v226(-)
gap () ([rdi|R|t] = v225(-); [rax|R|w64] = v70(-); [rsi|R|t] = v229(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:455] #-1 #115 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v219(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:454]
gap () () 
          X64Test32 && deoptimize if equal v219 #1 #114 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v219(R) [immediate:453] v10(R) #113 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          v223(R) = X64MovqDecompressTaggedPointer : MRI v219(R) [immediate:452]
gap () () 
          v221(R) = X64MovqDecompressAnyTagged : MRI v223(R) [immediate:451]
gap () () 
          X64Test32 && deoptimize if equal v221 #1 #112 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v221(R) [immediate:450] v25(R) #111 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          v216(R) = X64MovqDecompressTaggedPointer : MRI v221(R) [immediate:449]
gap () () 
          v222(R) = X64Movl : MRI v216(R) [immediate:448]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v222(R) #110 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          v220(R) = X64MovqDecompressTaggedSigned : MRI v221(R) [immediate:447]
gap () (v218(R) = v220(-);) 
          v218(1) = X64Sar32 v218(R) #1
gap () () 
          [constant:217] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v218 #8 #109 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          X64MovqCompressTagged : MRI v216(R) [immediate:446] v217(R)
gap () () 
          ArchJmp [immediate:445]
gap () () 
          ArchJmp [immediate:444]
gap () () 
          ArchJmp [immediate:443]
gap () () 
          v203(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:442]
gap () () 
          X64Test32 && deoptimize if equal v203 #1 #108 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v203(R) [immediate:441] v10(R) #107 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v215(R) = X64MovqDecompressTaggedPointer : MRI v203(R) [immediate:440]
gap () () 
          v214(R) = X64MovqDecompressAnyTagged : MRI v215(R) [immediate:439]
gap () () 
          X64Test32 && deoptimize if equal v214 #1 #106 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v214(R) [immediate:438] v25(R) #105 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v211(R) = X64MovqDecompressTaggedPointer : MRI v214(R) [immediate:437]
gap () () 
          v213(R) = X64MovqDecompressTaggedSigned : MRI v214(R) [immediate:436]
gap () (v212(R) = v213(-);) 
          v212(1) = X64Sar32 v212(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v212 #0 #104 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v208(R) = X64MovqDecompressAnyTagged : MRI v211(R) [immediate:435]
gap () () 
          X64Test32 && branch if equal v208 #1 [immediate:433] [immediate:434]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v208(R) [immediate:431] [immediate:432]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v208(R) [immediate:429] [immediate:430]
gap () () 
          v210(R) = X64MovqDecompressTaggedPointer : MRI v208(R) [immediate:428]
gap () () 
          X64Test8 : MRI && branch if equal v210(R) [immediate:425] #16 [immediate:426] [immediate:427]
gap () () 
          ArchJmp [immediate:424]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v210(R) [immediate:422] [immediate:423]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v210(R) [immediate:420] [immediate:421]
gap () () 
          ArchJmp [immediate:419]
gap () () 
          X64Test32 : MRI && branch if not equal v208(R) [immediate:416] #2147483646 [immediate:417] [immediate:418]
gap () () 
          ArchJmp [immediate:415]
gap () () 
          ArchJmp [immediate:414]
gap () () 
          v209(R) = X64Movsd : MRI v208(R) [immediate:413]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v209 [immediate:411] [immediate:412]
gap () () 
          ArchJmp [immediate:410]
gap () () 
          ArchJmp [immediate:409]
gap () () 
          ArchJmp [immediate:408]
gap () () 
          ArchJmp [immediate:407]
gap () () 
          X64Cmp32 && branch if not equal v208 [immediate:404] [immediate:405] [immediate:406]
gap () () 
          ArchJmp [immediate:403]
gap () () 
          [constant:201] = ArchNop
gap () () 
          [constant:200] = ArchNop
gap () () 
          [constant:197] = ArchNop
gap () () 
          [constant:188] = ArchNop
gap () () 
          v196(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:402]
gap () () 
          v205(R) = X64MovqDecompressTaggedPointer : MRI v203(R) [immediate:401]
gap () () 
          v207(R) = X64MovqDecompressTaggedSigned : MRI v203(R) [immediate:400]
gap () (v206(R) = v207(-);) 
          v206(1) = X64Sar32 v206(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v206 #1 #103 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v198(R) = X64MovqDecompressAnyTagged : MRI v205(R) [immediate:399]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v206 #0 #102 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v199(R) = X64MovqDecompressAnyTagged : MRI v205(R) [immediate:398]
gap () () 
          X64Test32 && deoptimize if equal v196 #1 #101 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v204(R) = X64MovqDecompressTaggedPointer : MRI v196(R) [immediate:397]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v204(R) [immediate:396] #1068 #100 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v202(R) = X64MovqDecompressTaggedPointer : MRI v196(R) [immediate:395]
gap () () 
          X64Cmp && deoptimize if not equal v201(R) v202 #99 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          X64Push v199(-)
gap () () 
          X64Push v198(-)
gap () () 
          X64Push v197(-)
gap () ([rdi|R|t] = v196(-); [rax|R|w64] = v70(-); [rsi|R|t] = v200(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:394] #-1 #98 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v190(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:393]
gap () () 
          X64Test32 && deoptimize if equal v190 #1 #97 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v190(R) [immediate:392] v10(R) #96 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          v194(R) = X64MovqDecompressTaggedPointer : MRI v190(R) [immediate:391]
gap () () 
          v192(R) = X64MovqDecompressAnyTagged : MRI v194(R) [immediate:390]
gap () () 
          X64Test32 && deoptimize if equal v192 #1 #95 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v192(R) [immediate:389] v25(R) #94 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          v187(R) = X64MovqDecompressTaggedPointer : MRI v192(R) [immediate:388]
gap () () 
          v193(R) = X64Movl : MRI v187(R) [immediate:387]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v193(R) #93 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          v191(R) = X64MovqDecompressTaggedSigned : MRI v192(R) [immediate:386]
gap () (v189(R) = v191(-);) 
          v189(1) = X64Sar32 v189(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v189 #0 #92 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          X64MovqCompressTagged : MRI v187(R) [immediate:385] v188(R)
gap () () 
          ArchJmp [immediate:384]
gap () () 
          ArchJmp [immediate:383]
gap () () 
          ArchJmp [immediate:382]
gap () () 
          v174(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:381]
gap () () 
          X64Test32 && deoptimize if equal v174 #1 #91 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v174(R) [immediate:380] v10(R) #90 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v186(R) = X64MovqDecompressTaggedPointer : MRI v174(R) [immediate:379]
gap () () 
          v185(R) = X64MovqDecompressAnyTagged : MRI v186(R) [immediate:378]
gap () () 
          X64Test32 && deoptimize if equal v185 #1 #89 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v185(R) [immediate:377] v25(R) #88 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v182(R) = X64MovqDecompressTaggedPointer : MRI v185(R) [immediate:376]
gap () () 
          v184(R) = X64MovqDecompressTaggedSigned : MRI v185(R) [immediate:375]
gap () (v183(R) = v184(-);) 
          v183(1) = X64Sar32 v183(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v183 #11 #87 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v179(R) = X64MovqDecompressAnyTagged : MRI v182(R) [immediate:374]
gap () () 
          X64Test32 && branch if equal v179 #1 [immediate:372] [immediate:373]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v179(R) [immediate:370] [immediate:371]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v179(R) [immediate:368] [immediate:369]
gap () () 
          v181(R) = X64MovqDecompressTaggedPointer : MRI v179(R) [immediate:367]
gap () () 
          X64Test8 : MRI && branch if equal v181(R) [immediate:364] #16 [immediate:365] [immediate:366]
gap () () 
          ArchJmp [immediate:363]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v181(R) [immediate:361] [immediate:362]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v181(R) [immediate:359] [immediate:360]
gap () () 
          ArchJmp [immediate:358]
gap () () 
          X64Test32 : MRI && branch if not equal v179(R) [immediate:355] #2147483646 [immediate:356] [immediate:357]
gap () () 
          ArchJmp [immediate:354]
gap () () 
          ArchJmp [immediate:353]
gap () () 
          v180(R) = X64Movsd : MRI v179(R) [immediate:352]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v180 [immediate:350] [immediate:351]
gap () () 
          ArchJmp [immediate:349]
gap () () 
          ArchJmp [immediate:348]
gap () () 
          ArchJmp [immediate:347]
gap () () 
          ArchJmp [immediate:346]
gap () () 
          X64Cmp32 && branch if not equal v179 [immediate:343] [immediate:344] [immediate:345]
gap () () 
          ArchJmp [immediate:342]
gap () () 
          [constant:172] = ArchNop
gap () () 
          [constant:171] = ArchNop
gap () () 
          [constant:168] = ArchNop
gap () () 
          [constant:159] = ArchNop
gap () () 
          v167(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:341]
gap () () 
          v176(R) = X64MovqDecompressTaggedPointer : MRI v174(R) [immediate:340]
gap () () 
          v178(R) = X64MovqDecompressTaggedSigned : MRI v174(R) [immediate:339]
gap () (v177(R) = v178(-);) 
          v177(1) = X64Sar32 v177(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v177 #0 #86 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v169(R) = X64MovqDecompressAnyTagged : MRI v176(R) [immediate:338]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v177 #4 #85 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v170(R) = X64MovqDecompressAnyTagged : MRI v176(R) [immediate:337]
gap () () 
          X64Test32 && deoptimize if equal v167 #1 #84 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v175(R) = X64MovqDecompressTaggedPointer : MRI v167(R) [immediate:336]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v175(R) [immediate:335] #1068 #83 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v173(R) = X64MovqDecompressTaggedPointer : MRI v167(R) [immediate:334]
gap () () 
          X64Cmp && deoptimize if not equal v172(R) v173 #82 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          X64Push v170(-)
gap () () 
          X64Push v169(-)
gap () () 
          X64Push v168(-)
gap () ([rdi|R|t] = v167(-); [rax|R|w64] = v70(-); [rsi|R|t] = v171(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:333] #-1 #81 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v161(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:332]
gap () () 
          X64Test32 && deoptimize if equal v161 #1 #80 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v161(R) [immediate:331] v10(R) #79 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          v165(R) = X64MovqDecompressTaggedPointer : MRI v161(R) [immediate:330]
gap () () 
          v163(R) = X64MovqDecompressAnyTagged : MRI v165(R) [immediate:329]
gap () () 
          X64Test32 && deoptimize if equal v163 #1 #78 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v163(R) [immediate:328] v25(R) #77 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          v158(R) = X64MovqDecompressTaggedPointer : MRI v163(R) [immediate:327]
gap () () 
          v164(R) = X64Movl : MRI v158(R) [immediate:326]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v164(R) #76 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          v162(R) = X64MovqDecompressTaggedSigned : MRI v163(R) [immediate:325]
gap () (v160(R) = v162(-);) 
          v160(1) = X64Sar32 v160(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v160 #11 #75 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          X64MovqCompressTagged : MRI v158(R) [immediate:324] v159(R)
gap () () 
          ArchJmp [immediate:323]
gap () () 
          ArchJmp [immediate:322]
gap () () 
          ArchJmp [immediate:321]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:319] v49(R) #74 v0(S) v1(-) v2(S) v3(-) [immediate:320]
gap () () 
          v155(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:318]
gap () () 
          v157(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:317]
gap () (v156(R) = v157(-);) 
          v156(1) = X64Sar32 v156(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v156 #4 #73 v0(S) v1(-) v2(S) v3(-) [immediate:316]
gap () () 
          v153(R) = X64MovqDecompressAnyTagged : MRI v155(R) [immediate:315]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v153(R) [immediate:313] [immediate:314]
gap () (v152 = v153(-);) 
          ArchJmp [immediate:312]
gap () () 
          [constant:154] = ArchNop
gap () (v152 = v154(-);) 
          ArchJmp [immediate:311]
gap () () 
          X64Test32 && deoptimize if equal v152 #1 #72 v0(S) v1(-) v2(S) v3(-) [immediate:310]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v152(R) [immediate:308] v43(R) #71 v0(S) v1(-) v2(S) v3(-) [immediate:309]
gap () () 
          v149(R) = X64MovqDecompressTaggedPointer : MRI v152(R) [immediate:307]
gap () () 
          v151(R) = X64MovqDecompressTaggedSigned : MRI v152(R) [immediate:306]
gap () (v150(R) = v151(-);) 
          v150(1) = X64Sar32 v150(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v150 #2 #70 v0(S) v1(-) v2(S) v3(-) [immediate:305]
gap () () 
          v148(R) = X64Movsd : MRI v149(R) [immediate:304]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v148 [immediate:302] [immediate:303]
gap () () 
          ArchJmp [immediate:301]
gap () () 
          v139(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:300]
gap () () 
          X64Test32 && deoptimize if equal v139 #1 #69 v0(S) v1(-) v2(S) v3(-) [immediate:299]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v139(R) [immediate:297] v10(R) #68 v0(S) v1(-) v2(S) v3(-) [immediate:298]
gap () () 
          v147(R) = X64MovqDecompressTaggedPointer : MRI v139(R) [immediate:296]
gap () () 
          v146(R) = X64MovqDecompressAnyTagged : MRI v147(R) [immediate:295]
gap () () 
          X64Test32 && deoptimize if equal v146 #1 #67 v0(S) v1(-) v2(S) v3(-) [immediate:294]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v146(R) [immediate:292] v25(R) #66 v0(S) v1(-) v2(S) v3(-) [immediate:293]
gap () () 
          v143(R) = X64MovqDecompressTaggedPointer : MRI v146(R) [immediate:291]
gap () () 
          v145(R) = X64MovqDecompressTaggedSigned : MRI v146(R) [immediate:290]
gap () (v144(R) = v145(-);) 
          v144(1) = X64Sar32 v144(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v144 #11 #65 v0(S) v1(-) v2(S) v3(-) [immediate:289]
gap () () 
          v140(R) = X64MovqDecompressAnyTagged : MRI v143(R) [immediate:288]
gap () () 
          X64Test32 && branch if equal v140 #1 [immediate:286] [immediate:287]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v140(R) [immediate:284] [immediate:285]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v140(R) [immediate:282] [immediate:283]
gap () () 
          v142(R) = X64MovqDecompressTaggedPointer : MRI v140(R) [immediate:281]
gap () () 
          X64Test8 : MRI && branch if equal v142(R) [immediate:278] #16 [immediate:279] [immediate:280]
gap () () 
          ArchJmp [immediate:277]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v142(R) [immediate:275] [immediate:276]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v142(R) [immediate:273] [immediate:274]
gap () () 
          ArchJmp [immediate:272]
gap () () 
          X64Test32 : MRI && branch if not equal v140(R) [immediate:269] #2147483646 [immediate:270] [immediate:271]
gap () () 
          ArchJmp [immediate:268]
gap () () 
          ArchJmp [immediate:267]
gap () () 
          v141(R) = X64Movsd : MRI v140(R) [immediate:266]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v141 [immediate:264] [immediate:265]
gap () () 
          ArchJmp [immediate:263]
gap () () 
          ArchJmp [immediate:262]
gap () () 
          ArchJmp [immediate:261]
gap () () 
          ArchJmp [immediate:260]
gap () () 
          X64Cmp32 && branch if not equal v140 [immediate:257] [immediate:258] [immediate:259]
gap () () 
          ArchJmp [immediate:256]
gap () () 
          [constant:133] = ArchNop
gap () () 
          [constant:132] = ArchNop
gap () () 
          [constant:129] = ArchNop
gap () () 
          [constant:120] = ArchNop
gap () () 
          v128(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:255]
gap () () 
          v136(R) = X64MovqDecompressTaggedPointer : MRI v139(R) [immediate:254]
gap () () 
          v138(R) = X64MovqDecompressTaggedSigned : MRI v139(R) [immediate:253]
gap () (v137(R) = v138(-);) 
          v137(1) = X64Sar32 v137(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v137 #4 #64 v0(S) v1(-) v2(S) v3(-) [immediate:252]
gap () () 
          v130(R) = X64MovqDecompressAnyTagged : MRI v136(R) [immediate:251]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v137 #0 #63 v0(S) v1(-) v2(S) v3(-) [immediate:250]
gap () () 
          v131(R) = X64MovqDecompressAnyTagged : MRI v136(R) [immediate:249]
gap () () 
          X64Test32 && deoptimize if equal v128 #1 #62 v0(S) v1(-) v2(S) v3(-) [immediate:248]
gap () () 
          v135(R) = X64MovqDecompressTaggedPointer : MRI v128(R) [immediate:247]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v135(R) [immediate:245] #1068 #61 v0(S) v1(-) v2(S) v3(-) [immediate:246]
gap () () 
          v134(R) = X64MovqDecompressTaggedPointer : MRI v128(R) [immediate:244]
gap () () 
          X64Cmp && deoptimize if not equal v133(R) v134 #60 v0(S) v1(-) v2(S) v3(-) [immediate:243]
gap () () 
          X64Push v131(-)
gap () () 
          X64Push v130(-)
gap () () 
          X64Push v129(-)
gap () ([rdi|R|t] = v128(-); [rax|R|w64] = v70(-); [rsi|R|t] = v132(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:242] #-1 #59 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v122(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:241]
gap () () 
          X64Test32 && deoptimize if equal v122 #1 #58 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v122(R) [immediate:240] v10(R) #57 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          v126(R) = X64MovqDecompressTaggedPointer : MRI v122(R) [immediate:239]
gap () () 
          v124(R) = X64MovqDecompressAnyTagged : MRI v126(R) [immediate:238]
gap () () 
          X64Test32 && deoptimize if equal v124 #1 #56 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v124(R) [immediate:237] v25(R) #55 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          v119(R) = X64MovqDecompressTaggedPointer : MRI v124(R) [immediate:236]
gap () () 
          v125(R) = X64Movl : MRI v119(R) [immediate:235]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v125(R) #54 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          v123(R) = X64MovqDecompressTaggedSigned : MRI v124(R) [immediate:234]
gap () (v121(R) = v123(-);) 
          v121(1) = X64Sar32 v121(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v121 #11 #53 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          X64MovqCompressTagged : MRI v119(R) [immediate:233] v120(R)
gap () () 
          ArchJmp [immediate:232]
gap () () 
          ArchJmp [immediate:231]
gap () () 
          ArchJmp [immediate:230]
gap () () 
          v106(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:229]
gap () () 
          X64Test32 && deoptimize if equal v106 #1 #52 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v106(R) [immediate:228] v10(R) #51 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v118(R) = X64MovqDecompressTaggedPointer : MRI v106(R) [immediate:227]
gap () () 
          v117(R) = X64MovqDecompressAnyTagged : MRI v118(R) [immediate:226]
gap () () 
          X64Test32 && deoptimize if equal v117 #1 #50 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v117(R) [immediate:225] v25(R) #49 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v114(R) = X64MovqDecompressTaggedPointer : MRI v117(R) [immediate:224]
gap () () 
          v116(R) = X64MovqDecompressTaggedSigned : MRI v117(R) [immediate:223]
gap () (v115(R) = v116(-);) 
          v115(1) = X64Sar32 v115(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #3 #48 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v111(R) = X64MovqDecompressAnyTagged : MRI v114(R) [immediate:222]
gap () () 
          X64Test32 && branch if equal v111 #1 [immediate:220] [immediate:221]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v111(R) [immediate:218] [immediate:219]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v111(R) [immediate:216] [immediate:217]
gap () () 
          v113(R) = X64MovqDecompressTaggedPointer : MRI v111(R) [immediate:215]
gap () () 
          X64Test8 : MRI && branch if equal v113(R) [immediate:212] #16 [immediate:213] [immediate:214]
gap () () 
          ArchJmp [immediate:211]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v113(R) [immediate:209] [immediate:210]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v113(R) [immediate:207] [immediate:208]
gap () () 
          ArchJmp [immediate:206]
gap () () 
          X64Test32 : MRI && branch if not equal v111(R) [immediate:203] #2147483646 [immediate:204] [immediate:205]
gap () () 
          ArchJmp [immediate:202]
gap () () 
          ArchJmp [immediate:201]
gap () () 
          v112(R) = X64Movsd : MRI v111(R) [immediate:200]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v112 [immediate:198] [immediate:199]
gap () () 
          ArchJmp [immediate:197]
gap () () 
          ArchJmp [immediate:196]
gap () () 
          ArchJmp [immediate:195]
gap () () 
          ArchJmp [immediate:194]
gap () () 
          X64Cmp32 && branch if not equal v111 [immediate:191] [immediate:192] [immediate:193]
gap () () 
          ArchJmp [immediate:190]
gap () () 
          [constant:104] = ArchNop
gap () () 
          [constant:103] = ArchNop
gap () () 
          [constant:100] = ArchNop
gap () () 
          [constant:91] = ArchNop
gap () () 
          v99(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:189]
gap () () 
          v108(R) = X64MovqDecompressTaggedPointer : MRI v106(R) [immediate:188]
gap () () 
          v110(R) = X64MovqDecompressTaggedSigned : MRI v106(R) [immediate:187]
gap () (v109(R) = v110(-);) 
          v109(1) = X64Sar32 v109(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v109 #0 #47 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v101(R) = X64MovqDecompressAnyTagged : MRI v108(R) [immediate:186]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v109 #3 #46 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v102(R) = X64MovqDecompressAnyTagged : MRI v108(R) [immediate:185]
gap () () 
          X64Test32 && deoptimize if equal v99 #1 #45 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v107(R) = X64MovqDecompressTaggedPointer : MRI v99(R) [immediate:184]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v107(R) [immediate:183] #1068 #44 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v105(R) = X64MovqDecompressTaggedPointer : MRI v99(R) [immediate:182]
gap () () 
          X64Cmp && deoptimize if not equal v104(R) v105 #43 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          X64Push v102(-)
gap () () 
          X64Push v101(-)
gap () () 
          X64Push v100(-)
gap () ([rdi|R|t] = v99(-); [rax|R|w64] = v70(-); [rsi|R|t] = v103(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:181] #-1 #42 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v93(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:180]
gap () () 
          X64Test32 && deoptimize if equal v93 #1 #41 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v93(R) [immediate:179] v10(R) #40 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          v97(R) = X64MovqDecompressTaggedPointer : MRI v93(R) [immediate:178]
gap () () 
          v95(R) = X64MovqDecompressAnyTagged : MRI v97(R) [immediate:177]
gap () () 
          X64Test32 && deoptimize if equal v95 #1 #39 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v95(R) [immediate:176] v25(R) #38 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          v90(R) = X64MovqDecompressTaggedPointer : MRI v95(R) [immediate:175]
gap () () 
          v96(R) = X64Movl : MRI v90(R) [immediate:174]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v96(R) #37 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          v94(R) = X64MovqDecompressTaggedSigned : MRI v95(R) [immediate:173]
gap () (v92(R) = v94(-);) 
          v92(1) = X64Sar32 v92(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v92 #3 #36 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          X64MovqCompressTagged : MRI v90(R) [immediate:172] v91(R)
gap () () 
          ArchJmp [immediate:171]
gap () () 
          ArchJmp [immediate:170]
gap () () 
          ArchJmp [immediate:169]
gap () () 
          v77(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:168]
gap () () 
          X64Test32 && deoptimize if equal v77 #1 #35 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v77(R) [immediate:167] v10(R) #34 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v89(R) = X64MovqDecompressTaggedPointer : MRI v77(R) [immediate:166]
gap () () 
          v88(R) = X64MovqDecompressAnyTagged : MRI v89(R) [immediate:165]
gap () () 
          X64Test32 && deoptimize if equal v88 #1 #33 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v88(R) [immediate:164] v25(R) #32 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v85(R) = X64MovqDecompressTaggedPointer : MRI v88(R) [immediate:163]
gap () () 
          v87(R) = X64MovqDecompressTaggedSigned : MRI v88(R) [immediate:162]
gap () (v86(R) = v87(-);) 
          v86(1) = X64Sar32 v86(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v86 #10 #31 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v82(R) = X64MovqDecompressAnyTagged : MRI v85(R) [immediate:161]
gap () () 
          X64Test32 && branch if equal v82 #1 [immediate:159] [immediate:160]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v82(R) [immediate:157] [immediate:158]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v82(R) [immediate:155] [immediate:156]
gap () () 
          v84(R) = X64MovqDecompressTaggedPointer : MRI v82(R) [immediate:154]
gap () () 
          X64Test8 : MRI && branch if equal v84(R) [immediate:151] #16 [immediate:152] [immediate:153]
gap () () 
          ArchJmp [immediate:150]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v84(R) [immediate:148] [immediate:149]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v84(R) [immediate:146] [immediate:147]
gap () () 
          ArchJmp [immediate:145]
gap () () 
          X64Test32 : MRI && branch if not equal v82(R) [immediate:142] #2147483646 [immediate:143] [immediate:144]
gap () () 
          ArchJmp [immediate:141]
gap () () 
          ArchJmp [immediate:140]
gap () () 
          v83(R) = X64Movsd : MRI v82(R) [immediate:139]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v83 [immediate:137] [immediate:138]
gap () () 
          ArchJmp [immediate:136]
gap () () 
          ArchJmp [immediate:135]
gap () () 
          ArchJmp [immediate:134]
gap () () 
          ArchJmp [immediate:133]
gap () () 
          X64Cmp32 && branch if not equal v82 [immediate:130] [immediate:131] [immediate:132]
gap () () 
          ArchJmp [immediate:129]
gap () () 
          [constant:75] = ArchNop
gap () () 
          [constant:71] = ArchNop
gap () () 
          [constant:74] = ArchNop
gap () () 
          [constant:61] = ArchNop
gap () () 
          v69(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:128]
gap () () 
          v79(R) = X64MovqDecompressTaggedPointer : MRI v77(R) [immediate:127]
gap () () 
          v81(R) = X64MovqDecompressTaggedSigned : MRI v77(R) [immediate:126]
gap () (v80(R) = v81(-);) 
          v80(1) = X64Sar32 v80(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #3 #30 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v72(R) = X64MovqDecompressAnyTagged : MRI v79(R) [immediate:125]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #7 #29 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v73(R) = X64MovqDecompressAnyTagged : MRI v79(R) [immediate:124]
gap () () 
          X64Test32 && deoptimize if equal v69 #1 #28 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v78(R) = X64MovqDecompressTaggedPointer : MRI v69(R) [immediate:123]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v78(R) [immediate:122] #1068 #27 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v76(R) = X64MovqDecompressTaggedPointer : MRI v69(R) [immediate:121]
gap () () 
          X64Cmp && deoptimize if not equal v75(R) v76 #26 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          X64Push v73(-)
gap () () 
          X64Push v72(-)
gap () () 
          X64Push v71(-)
gap () ([rdi|R|t] = v69(-); [rax|R|w64] = v70(-); [rsi|R|t] = v74(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:120] #-1 #25 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v63(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:119]
gap () () 
          X64Test32 && deoptimize if equal v63 #1 #24 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v63(R) [immediate:118] v10(R) #23 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          v67(R) = X64MovqDecompressTaggedPointer : MRI v63(R) [immediate:117]
gap () () 
          v65(R) = X64MovqDecompressAnyTagged : MRI v67(R) [immediate:116]
gap () () 
          X64Test32 && deoptimize if equal v65 #1 #22 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v65(R) [immediate:115] v25(R) #21 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          v60(R) = X64MovqDecompressTaggedPointer : MRI v65(R) [immediate:114]
gap () () 
          v66(R) = X64Movl : MRI v60(R) [immediate:113]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v66(R) #20 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          v64(R) = X64MovqDecompressTaggedSigned : MRI v65(R) [immediate:112]
gap () (v62(R) = v64(-);) 
          v62(1) = X64Sar32 v62(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #10 #19 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          X64MovqCompressTagged : MRI v60(R) [immediate:111] v61(R)
gap () () 
          ArchJmp [immediate:110]
gap () () 
          ArchJmp [immediate:109]
gap () () 
          ArchJmp [immediate:108]
gap () () 
          v51(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:107]
gap () () 
          X64Test32 && deoptimize if equal v51 #1 #18 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v51(R) [immediate:106] v10(R) #17 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          v59(R) = X64MovqDecompressTaggedPointer : MRI v51(R) [immediate:105]
gap () () 
          v58(R) = X64MovqDecompressAnyTagged : MRI v59(R) [immediate:104]
gap () () 
          X64Test32 && deoptimize if equal v58 #1 #16 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v58(R) [immediate:103] v25(R) #15 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          v55(R) = X64MovqDecompressTaggedPointer : MRI v58(R) [immediate:102]
gap () () 
          v57(R) = X64MovqDecompressTaggedSigned : MRI v58(R) [immediate:101]
gap () (v56(R) = v57(-);) 
          v56(1) = X64Sar32 v56(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v56 #7 #14 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          v52(R) = X64MovqDecompressAnyTagged : MRI v55(R) [immediate:100]
gap () () 
          X64Test32 && branch if equal v52 #1 [immediate:98] [immediate:99]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v52(R) [immediate:96] [immediate:97]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v52(R) [immediate:94] [immediate:95]
gap () () 
          v54(R) = X64MovqDecompressTaggedPointer : MRI v52(R) [immediate:93]
gap () () 
          X64Test8 : MRI && branch if equal v54(R) [immediate:90] #16 [immediate:91] [immediate:92]
gap () () 
          ArchJmp [immediate:89]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v54(R) [immediate:87] [immediate:88]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v54(R) [immediate:85] [immediate:86]
gap () () 
          ArchJmp [immediate:84]
gap () () 
          X64Test32 : MRI && branch if not equal v52(R) [immediate:81] #2147483646 [immediate:82] [immediate:83]
gap () () 
          ArchJmp [immediate:80]
gap () () 
          ArchJmp [immediate:79]
gap () () 
          v53(R) = X64Movsd : MRI v52(R) [immediate:78]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v53 [immediate:76] [immediate:77]
gap () () 
          ArchJmp [immediate:75]
gap () () 
          ArchJmp [immediate:74]
gap () () 
          ArchJmp [immediate:73]
gap () () 
          ArchJmp [immediate:72]
gap () () 
          X64Cmp32 && branch if not equal v52 [immediate:69] [immediate:70] [immediate:71]
gap () () 
          ArchJmp [immediate:68]
gap () () 
          v50(R) = X64Movl : MRI v2(R) [immediate:67]
gap () () 
          ArchDeoptimize #13 v0(S) v1(-) v2(S) v3(-) v50(-) v51(-) [immediate:66]
gap () () 
          ArchJmp [immediate:65]
gap () () 
          ArchJmp [immediate:64]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:62] v49(R) #12 v0(S) v1(-) v2(S) v3(-) [immediate:63]
gap () () 
          v46(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:61]
gap () () 
          v48(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:60]
gap () (v47(R) = v48(-);) 
          v47(1) = X64Sar32 v47(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v47 #5 #11 v0(S) v1(-) v2(S) v3(-) [immediate:59]
gap () () 
          v44(R) = X64MovqDecompressAnyTagged : MRI v46(R) [immediate:58]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v44(R) [immediate:56] [immediate:57]
gap () (v42 = v44(-);) 
          ArchJmp [immediate:55]
gap () () 
          [constant:45] = ArchNop
gap () (v42 = v45(-);) 
          ArchJmp [immediate:54]
gap () () 
          X64Test32 && deoptimize if equal v42 #1 #10 v0(S) v1(-) v2(S) v3(-) [immediate:53]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v42(R) [immediate:51] v43(R) #9 v0(S) v1(-) v2(S) v3(-) [immediate:52]
gap () () 
          v39(R) = X64MovqDecompressTaggedPointer : MRI v42(R) [immediate:50]
gap () () 
          v41(R) = X64MovqDecompressTaggedSigned : MRI v42(R) [immediate:49]
gap () (v40(R) = v41(-);) 
          v40(1) = X64Sar32 v40(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v40 #2 #8 v0(S) v1(-) v2(S) v3(-) [immediate:48]
gap () () 
          v38(R) = X64Movsd : MRI v39(R) [immediate:47]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v38 [immediate:45] [immediate:46]
gap () () 
          v22(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:44]
gap () () 
          v30(R) = X64Movq : MR v28(R)
gap () () 
          v35(R) = X64Lea : MRI v30(R) [immediate:43]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v35(R) [immediate:41] [immediate:42]
gap () () 
          ArchJmp [immediate:40]
gap () ([rdx|R|w64] = v34(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:39] #-1 [rdx|R|w64]
gap (v33(-) = [rax|R|tp];) () 
          v31(R) = X64Lea : MRI v33(R) [immediate:38]
gap () (v27 = v31(-);) 
          ArchJmp [immediate:37]
gap () (v27 = v30(-);) 
          ArchJmp [immediate:36]
gap () () 
          v29(R) = X64Lea : MRI v27(R) [immediate:35]
gap () () 
          X64Movq : MR v28(R) v29(R)
gap () () 
          v26(R) = X64Lea : MRI v27(R) [immediate:34]
gap () (v19 = v26(-);) 
          v19(1) = ArchNop v19
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:33] v25(R)
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:32] v24(R)
gap () () 
          [constant:23] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:31] v23(R)
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:29] [immediate:30]
gap () () 
          X64Test32 && deoptimize if equal v22 #1 #7 v0(S) v1(-) v2(S) v22(-) v19(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v22(R) [immediate:28] v10(R) #6 v0(S) v1(-) v2(S) v22(-) v19(-)
gap () () 
          v18(R) = X64MovqDecompressTaggedPointer : MRI v22(R) [immediate:27]
gap () () 
          ArchStoreWithWriteBarrier : MRI v18(R) [immediate:26] v19(R)
gap () () 
          v13(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:25]
gap () () 
          X64Test32 && deoptimize if equal v13 #1 #5 v0(S) v1(-) v2(S) v13(-) [immediate:24]
gap () () 
          X64Cmp32 : MRI && branch if equal v13(R) [immediate:21] v10(R) [immediate:22] [immediate:23]
gap () () 
          [constant:17] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v13(R) [immediate:19] v17(R) #4 v0(S) v1(-) v2(S) v13(-) [immediate:20]
gap () () 
          v14(R) = X64MovqDecompressTaggedPointer : MRI v13(R) [immediate:18]
gap () () 
          ArchStoreWithWriteBarrier : MRI v13(R) [immediate:17] v10(R)
gap () () 
          X64MovqCompressTagged : MRI v14(R) [immediate:15] [immediate:16]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          v12(R) = X64MovqDecompressTaggedPointer : MRI v13(R) [immediate:13]
gap () () 
          X64MovqCompressTagged : MRI v12(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () () 
          [constant:11] = ArchNop
gap () ([rax|R|t] = v11(-);) 
          ArchRet #0 [rax|R|t]
gap () () 
          v9(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:9]
gap () () 
          X64Test32 && deoptimize if equal v9 #1 #3 v0(S) v1(-) v2(S) v3(-) [immediate:8]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v9(R) [immediate:6] v10(R) #2 v0(S) v1(-) v2(S) v3(-) [immediate:7]
gap () () 
          v8(R) = X64MovqDecompressTaggedPointer : MRI v9(R) [immediate:5]
gap () () 
          v7(R) = X64Movl : MRI v8(R) [immediate:4]
gap () () 
          ArchDeoptimize #1 v0(S) v1(-) v2(S) v7(-) [immediate:3]
gap () () 
          v5(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:2]
gap () () 
          v4(R) = X64Movl : MRI v5(R) [immediate:1]
gap () () 
          ArchDeoptimize #0 v0(S) v1(-) v2(S) v3(-) v4(-) [immediate:0]
print sib pairs
2, v781, v798
2, v705, v843
3, v781, v765
print modrm pairs
1, v4, v5
1, v5, v6
1, v7, v8
1, v9, v2
1, v14, v13
1, v13, v2
1, v23, v19
1, v29, v27
1, v35, v30
1, v22, v2
1, v38, v39
1, v44, v46
1, v46, v3
1, v54, v52
1, v52, v55
1, v55, v58
1, v58, v59
1, v59, v51
1, v61, v60
1, v65, v67
1, v63, v2
1, v76, v69
1, v72, v79
1, v81, v77
1, v69, v2
1, v83, v82
1, v82, v85
1, v87, v88
1, v77, v2
1, v90, v95
1, v97, v93
1, v78, v69
1, v93, v2
1, v102, v108
1, v101, v108
1, v110, v106
1, v99, v2
1, v112, v111
1, v113, v111
1, v111, v114
1, v106, v2
1, v120, v119
1, v88, v89
1, v89, v77
1, v123, v124
1, v124, v126
1, v126, v122
1, v134, v128
1, v130, v136
1, v142, v140
1, v682, v685
1, v140, v143
1, v146, v147
1, v147, v139
1, v240, v247
1, v148, v149
1, v67, v63
1, v151, v152
1, v50, v2
1, v153, v155
1, v39, v42
1, v157, v3
1, v155, v3
1, v162, v163
1, v135, v128
1, v164, v158
1, v163, v165
1, v108, v106
1, v175, v167
1, v170, v176
1, v219, v2
1, v178, v174
1, v176, v174
1, v167, v2
1, v810, v815
1, v179, v182
1, v184, v185
1, v182, v185
1, v73, v79
1, v215, v203
1, v186, v174
1, v192, v194
1, v194, v190
1, v190, v2
1, v410, v417
1, v246, v247
1, v723, v725
1, v867, v862
1, v202, v196
1, v439, v441
1, v207, v203
1, v196, v2
1, v107, v99
1, v208, v211
1, v213, v214
1, v211, v214
1, v514, v515
1, v222, v216
1, v551, v415
1, v223, v219
1, v555, v556
1, v128, v2
1, v675, v667
1, v644, v638
1, v701, v707
1, v228, v233
1, v557, v415
1, v227, v233
1, v233, v236
1, v790, v783
1, v239, v237
1, v214, v215
1, v237, v240
1, v247, v248
1, v288, v285
1, v248, v236
1, v95, v97
1, v236, v2
1, v249, v250
1, v250, v253
1, v425, v423
1, v258, v3
1, v10, v9
1, v10, v63
1, v10, v77
1, v10, v106
1, v10, v161
1, v10, v203
1, v10, v190
1, v10, v13
1, v10, v236
1, v10, v219
1, v10, v402
1, v10, v351
1, v10, v262
1, v10, v122
1, v10, v513
1, v10, v603
1, v10, v415
1, v10, v51
1, v10, v93
1, v10, v139
1, v10, v632
1, v10, v566
1, v10, v694
1, v10, v6
1, v10, v581
1, v10, v22
1, v10, v616
1, v10, v174
1, v10, v645
1, v10, v661
1, v10, v674
1, v260, v259
1, v41, v42
1, v269, v268
1, v680, v679
1, v271, v272
1, v235, v236
1, v279, v274
1, v620, v616
1, v210, v208
1, v347, v349
1, v428, v427
1, v263, v351
1, v351, v288
1, v270, v268
1, v352, v353
1, v403, v404
1, v204, v196
1, v17, v13
1, v119, v124
1, v256, v3
1, v363, v369
1, v373, v374
1, v704, v698
1, v254, v256
1, v528, v529
1, v369, v374
1, v245, v243
1, v376, v287
1, v53, v52
1, v329, v371
1, v597, v3
1, v161, v2
1, v380, v381
1, v371, v381
1, v383, v286
1, v388, v285
1, v560, v562
1, v287, v389
1, v800, v760
1, v286, v389
1, v51, v2
1, v391, v262
1, v60, v65
1, v389, v262
1, v139, v2
1, v79, v77
1, v238, v237
1, v285, v2
1, v18, v22
1, v205, v203
1, v393, v392
1, v652, v650
1, v394, v392
1, v400, v399
1, v392, v259
1, v91, v90
1, v169, v176
1, v94, v95
1, v745, v705
1, v540, v541
1, v259, v397
1, v262, v2
1, v374, v287
1, v405, v399
1, v399, v404
1, v406, v402
1, v854, v6
1, v825, v824
1, v402, v2
1, v96, v90
1, v416, v408
1, v411, v417
1, v419, v415
1, v417, v415
1, v421, v420
1, v422, v420
1, v381, v286
1, v426, v423
1, v434, v432
1, v435, v436
1, v721, v722
1, v437, v436
1, v443, v438
1, v512, v511
1, v387, v285
1, v775, v791
1, v511, v427
1, v191, v192
1, v427, v513
1, v501, v514
1, v855, v3
1, v516, v515
1, v533, v534
1, v536, v451
1, v685, v686
1, v221, v223
1, v491, v531
1, v819, v820
1, v529, v534
1, v452, v449
1, v547, v449
1, v583, v582
1, v198, v205
1, v543, v450
1, v548, v449
1, v451, v549
1, v242, v2
1, v408, v2
1, v185, v186
1, v553, v552
1, v805, v803
1, v554, v552
1, v423, v556
1, v415, v2
1, v559, v558
1, v568, v566
1, v673, v667
1, v541, v450
1, v577, v570
1, v727, v728
1, v252, v253
1, v803, v740
1, v173, v167
1, v684, v685
1, v589, v581
1, v713, v716
1, v709, v6
1, v149, v152
1, v581, v2
1, v590, v591
1, v611, v618
1, v788, v782
1, v593, v594
1, v618, v616
1, v572, v578
1, v841, v759
1, v48, v3
1, v6, v2
1, v595, v597
1, v604, v605
1, v851, v6
1, v605, v607
1, v114, v117
1, v603, v2
1, v24, v19
1, v24, v740
1, v24, v3
1, v606, v600
1, v646, v638
1, v617, v609
1, v599, v3
1, v275, v277
1, v600, v605
1, v612, v618
1, v719, v722
1, v609, v2
1, v131, v136
1, v623, v621
1, v616, v2
1, v624, v627
1, v141, v140
1, v181, v179
1, v635, v629
1, v634, v636
1, v199, v205
1, v636, v632
1, v757, v751
1, v525, v529
1, v433, v432
1, v850, v6
1, v641, v647
1, v584, v582
1, v138, v139
1, v750, v748
1, v125, v119
1, v25, v65
1, v25, v88
1, v25, v58
1, v25, v95
1, v25, v117
1, v25, v163
1, v25, v146
1, v25, v192
1, v25, v716
1, v25, v397
1, v25, v221
1, v25, v605
1, v25, v214
1, v25, v247
1, v25, v124
1, v25, v404
1, v25, v556
1, v25, v562
1, v25, v685
1, v25, v588
1, v25, v847
1, v25, v656
1, v25, v627
1, v25, v634
1, v25, v185
1, v25, v663
1, v25, v760
1, v25, v19
1, v25, v691
1, v681, v679
1, v647, v645
1, v567, v562
1, v638, v2
1, v728, v731
1, v349, v263
1, v653, v656
1, v397, v398
1, v650, v653
1, v686, v674
1, v662, v663
1, v549, v415
1, v663, v665
1, v339, v352
1, v751, v3
1, v656, v657
1, v665, v661
1, v661, v2
1, v414, v408
1, v678, v674
1, v509, v511
1, v826, v803
1, v630, v629
1, v396, v397
1, v667, v2
1, v659, v658
1, v670, v676
1, v601, v600
1, v209, v208
1, v562, v568
1, v552, v423
1, v679, v682
1, v180, v179
1, v585, v588
1, v669, v676
1, v580, v581
1, v105, v99
1, v159, v158
1, v657, v645
1, v626, v627
1, v31, v33
1, v187, v192
1, v588, v589
1, v688, v687
1, v725, v3
1, v692, v689
1, v566, v2
1, v827, v803
1, v587, v588
1, v846, v847
1, v695, v691
1, v573, v578
1, v689, v691
1, v216, v221
1, v696, v694
1, v243, v240
1, v822, v760
1, v694, v2
1, v193, v187
1, v856, v857
1, v513, v452
1, v762, v759
1, v706, v698
1, v811, v761
1, v489, v531
1, v57, v58
1, v818, v819
1, v700, v707
1, v860, v861
1, v711, v710
1, v273, v272
1, v773, v791
1, v763, v781
1, v450, v549
1, v712, v710
1, v578, v581
1, v863, v865
1, v570, v2
1, v778, v793
1, v231, v225
1, v710, v713
1, v664, v658
1, v628, v616
1, v564, v560
1, v717, v6
1, v136, v139
1, v658, v663
1, v66, v60
1, v188, v187
1, v718, v719
1, v8, v9
1, v84, v82
1, v43, v152
1, v43, v374
1, v43, v42
1, v43, v253
1, v43, v541
1, v43, v381
1, v43, v594
1, v43, v722
1, v43, v731
1, v43, v761
1, v43, v740
1, v43, v819
1, v43, v534
1, v43, v797
1, v26, v27
1, v225, v2
1, v730, v731
1, v645, v2
1, v261, v259
1, v449, v2
1, v756, v755
1, v576, v570
1, v556, v557
1, v582, v585
1, v858, v857
1, v607, v603
1, v820, v760
1, v734, v3
1, v691, v696
1, v621, v624
1, v174, v2
1, v404, v406
1, v366, v369
1, v835, v830
1, v674, v2
1, v789, v740
1, v783, v740
1, v798, v760
1, v736, v705
1, v795, v761
1, v747, v3
1, v796, v797
1, v793, v797
1, v264, v263
1, v651, v650
1, v817, v761
1, v777, v791
1, v774, v793
1, v158, v163
1, v847, v848
1, v632, v2
1, v217, v216
1, v780, v740
1, v350, v349
1, v828, v829
1, v824, v829
1, v629, v634
1, v622, v621
1, v859, v855
1, v831, v833
1, v837, v839
1, v19, v18
1, v64, v65
1, v220, v221
1, v398, v262
1, v12, v13
1, v627, v628
1, v791, v761
1, v633, v634
1, v655, v656
1, v716, v717
1, v615, v609
1, v165, v161
1, v591, v594
1, v122, v2
1, v649, v645
1, v776, v793
1, v759, v2
1, v116, v117
1, v676, v674
1, v715, v716
1, v531, v541
1, v843, v847
1, v760, v2
1, v842, v759
1, v813, v815
1, v85, v88
1, v812, v815
1, v354, v353
1, v707, v6
1, v244, v243
1, v117, v118
1, v327, v371
1, v420, v423
1, v744, v3
1, v815, v819
1, v143, v146
1, v823, v824
1, v640, v647
1, v118, v106
1, v49, v3
1, v534, v451
1, v839, v855
1, v848, v6
1, v203, v2
1, v232, v225
1, v145, v146
1, v732, v725
1, v698, v2
1, v857, v861
assign rcx to v869:0
assign 1 to v869:0
assign rax to v367:1
assign 0 to v367:1
assign rbx to v870:1
assign 3 to v870:1
assign rsi to v871:1
assign 6 to v871:1
assign rcx to v367:2
assign 1 to v367:2
assign rcx to v28:1
assign 1 to v28:1
assign r8 to v862:0
assign 8 to v862:0
assign r9 to v867:0
assign 9 to v867:0
assign r11 to v36:1
assign 11 to v36:1
assign rdx to v866:1
assign 2 to v866:1
blocking v28 pick register rcx
blocking v36 pick register r11
assign rax to v865:0
assign 0 to v865:0
assign r8 to v863:0
assign 8 to v863:0
assign r11 to v36:5
assign 11 to v36:5
assign rcx to v28:5
assign 1 to v28:5
assign r8 to v861:0
assign 8 to v861:0
assign r9 to v857:0
assign 9 to v857:0
assign rcx to v28:4
assign 1 to v28:4
assign r8 to v860:0
assign 8 to v860:0
assign r8 to v855:0
assign 8 to v855:0
assign r12 to v859:1
assign 12 to v859:1
assign r12 to v839:1
assign 12 to v839:1
assign r14 to v858:0
assign 14 to v858:0
assign r9 to v856:0
assign 9 to v856:0
v3:0 not intersect with v46:0, removed
v3:1 intersect with v46:0, adding
v3:0 not intersect with v157:0, removed
v3:1 intersect with v157:0, adding
v3:0 not intersect with v258:0, removed
v3:1 intersect with v258:0, adding
v3:0 not intersect with v256:0, removed
v3:1 intersect with v256:0, adding
v3:0 not intersect with v48:0, removed
v3:1 intersect with v48:0, adding
v3:0 not intersect with v599:0, removed
v3:1 intersect with v599:0, adding
v3:1 intersect with v24:1, adding
v3:0 not intersect with v597:0, removed
v3:1 intersect with v597:0, adding
v3:0 not intersect with v155:0, removed
v3:1 intersect with v155:0, adding
v3:1 intersect with v49:1, adding
assign r9 to v3:0
assign 9 to v3:0
v49:1 not intersect with v3:1, removed
v49:2 intersect with v3:1, adding
assign r14 to v49:1
assign 14 to v49:1
v24:1 not intersect with v3:1, removed
v24:2 intersect with v3:1, adding
v24:1 not intersect with v19:0, removed
v24:2 intersect with v19:0, adding
assign r15 to v24:1
assign 15 to v24:1
v2:1 not intersect with v9:0, removed
v2:2 intersect with v9:0, adding
v2:1 not intersect with v63:0, removed
v2:2 intersect with v63:0, adding
v2:1 not intersect with v69:0, removed
v2:2 intersect with v69:0, adding
v2:1 not intersect with v106:0, removed
v2:2 intersect with v106:0, adding
v2:1 not intersect with v122:0, removed
v2:2 intersect with v122:0, adding
v2:1 not intersect with v128:0, removed
v2:2 intersect with v128:0, adding
v2:1 not intersect with v161:0, removed
v2:2 intersect with v161:0, adding
v2:1 not intersect with v174:0, removed
v2:2 intersect with v174:0, adding
v2:1 not intersect with v190:0, removed
v2:2 intersect with v190:0, adding
v2:1 not intersect with v203:0, removed
v2:2 intersect with v203:0, adding
v2:1 not intersect with v13:0, removed
v2:2 intersect with v13:0, adding
v2:1 not intersect with v236:0, removed
v2:2 intersect with v236:0, adding
v2:1 not intersect with v449:0, removed
v2:2 intersect with v449:0, adding
v2:1 not intersect with v225:0, removed
v2:2 intersect with v225:0, adding
v2:1 not intersect with v603:0, removed
v2:2 intersect with v603:0, adding
v2:1 not intersect with v415:0, removed
v2:2 intersect with v415:0, adding
v2:1 not intersect with v661:0, removed
v2:2 intersect with v661:0, adding
v2:1 not intersect with v570:0, removed
v2:2 intersect with v570:0, adding
v2:1 not intersect with v609:0, removed
v2:2 intersect with v609:0, adding
v2:1 not intersect with v22:0, removed
v2:2 intersect with v22:0, adding
v2:1 not intersect with v285:0, removed
v2:2 intersect with v285:0, adding
v2:1 not intersect with v616:0, removed
v2:2 intersect with v616:0, adding
v2:1 not intersect with v638:0, removed
v2:2 intersect with v638:0, adding
v2:1 not intersect with v242:0, removed
v2:2 intersect with v242:0, adding
v2:1 not intersect with v645:0, removed
v2:2 intersect with v645:0, adding
v2:1 not intersect with v219:0, removed
v2:2 intersect with v219:0, adding
v2:1 not intersect with v667:0, removed
v2:2 intersect with v667:0, adding
v2:1 not intersect with v167:0, removed
v2:2 intersect with v167:0, adding
v2:1 not intersect with v262:0, removed
v2:2 intersect with v262:0, adding
v2:1 not intersect with v566:0, removed
v2:2 intersect with v566:0, adding
v2:1 not intersect with v51:0, removed
v2:2 intersect with v51:0, adding
v2:1 not intersect with v93:0, removed
v2:2 intersect with v93:0, adding
v2:1 not intersect with v99:0, removed
v2:2 intersect with v99:0, adding
v2:1 not intersect with v139:0, removed
v2:2 intersect with v139:0, adding
v2:1 not intersect with v632:0, removed
v2:2 intersect with v632:0, adding
v2:1 not intersect with v77:0, removed
v2:2 intersect with v77:0, adding
v2:1 not intersect with v674:0, removed
v2:2 intersect with v674:0, adding
v2:1 not intersect with v402:0, removed
v2:2 intersect with v402:0, adding
v2:1 not intersect with v50:0, removed
v2:2 intersect with v50:0, adding
v2:2 intersect with v6:0, adding
v2:1 not intersect with v408:0, removed
v2:2 intersect with v408:0, adding
v2:1 not intersect with v694:0, removed
v2:2 intersect with v694:0, adding
v2:1 not intersect with v196:0, removed
v2:2 intersect with v196:0, adding
v2:1 not intersect with v581:0, removed
v2:2 intersect with v581:0, adding
assign r8 to v2:1
assign 8 to v2:1
assign rax to v6:0
assign 0 to v6:0
v10:1 not intersect with v9:0, removed
v10:2 intersect with v9:0, adding
v10:1 not intersect with v63:0, removed
v10:2 intersect with v63:0, adding
v10:1 not intersect with v77:0, removed
v10:2 intersect with v77:0, adding
v10:1 not intersect with v106:0, removed
v10:2 intersect with v106:0, adding
v10:1 not intersect with v161:0, removed
v10:2 intersect with v161:0, adding
v10:1 not intersect with v203:0, removed
v10:2 intersect with v203:0, adding
v10:1 not intersect with v190:0, removed
v10:2 intersect with v190:0, adding
v10:1 not intersect with v13:0, removed
v10:2 intersect with v13:0, adding
v10:1 not intersect with v236:0, removed
v10:2 intersect with v236:0, adding
v10:1 not intersect with v219:0, removed
v10:2 intersect with v219:0, adding
v10:1 not intersect with v402:0, removed
v10:2 intersect with v402:0, adding
v10:1 not intersect with v351:0, removed
v10:2 intersect with v351:0, adding
v10:1 not intersect with v262:0, removed
v10:2 intersect with v262:0, adding
v10:1 not intersect with v122:0, removed
v10:2 intersect with v122:0, adding
v10:1 not intersect with v513:0, removed
v10:2 intersect with v513:0, adding
v10:1 not intersect with v603:0, removed
v10:2 intersect with v603:0, adding
v10:1 not intersect with v415:0, removed
v10:2 intersect with v415:0, adding
v10:1 not intersect with v51:0, removed
v10:2 intersect with v51:0, adding
v10:1 not intersect with v93:0, removed
v10:2 intersect with v93:0, adding
v10:1 not intersect with v139:0, removed
v10:2 intersect with v139:0, adding
v10:1 not intersect with v632:0, removed
v10:2 intersect with v632:0, adding
v10:1 not intersect with v566:0, removed
v10:2 intersect with v566:0, adding
v10:1 not intersect with v694:0, removed
v10:2 intersect with v694:0, adding
v10:1 not intersect with v581:0, removed
v10:2 intersect with v581:0, adding
v10:1 not intersect with v22:0, removed
v10:2 intersect with v22:0, adding
v10:1 not intersect with v616:0, removed
v10:2 intersect with v616:0, adding
v10:1 not intersect with v174:0, removed
v10:2 intersect with v174:0, adding
v10:1 not intersect with v645:0, removed
v10:2 intersect with v645:0, adding
v10:1 not intersect with v661:0, removed
v10:2 intersect with v661:0, adding
v10:1 not intersect with v674:0, removed
v10:2 intersect with v674:0, adding
assign rdx to v10:1
assign 2 to v10:1
assign rsi to v854:1
assign 6 to v854:1
assign rsi to v851:0
assign 6 to v851:0
assign rbx to v852:0
assign 3 to v852:0
assign rdi to v853:0
assign 7 to v853:0
assign rsi to v850:0
assign 6 to v850:0
assign rbx to v849:1
assign 3 to v849:1
assign r11 to v36:4
assign 11 to v36:4
assign rbx to v705:0
assign 3 to v705:0
v25:1 not intersect with v65:0, removed
v25:2 intersect with v65:0, adding
v25:1 not intersect with v88:0, removed
v25:2 intersect with v88:0, adding
v25:1 not intersect with v58:0, removed
v25:2 intersect with v58:0, adding
v25:1 not intersect with v95:0, removed
v25:2 intersect with v95:0, adding
v25:1 not intersect with v117:0, removed
v25:2 intersect with v117:0, adding
v25:1 not intersect with v163:0, removed
v25:2 intersect with v163:0, adding
v25:1 not intersect with v146:0, removed
v25:2 intersect with v146:0, adding
v25:1 not intersect with v192:0, removed
v25:2 intersect with v192:0, adding
v25:1 not intersect with v397:0, removed
v25:2 intersect with v397:0, adding
v25:1 not intersect with v221:0, removed
v25:2 intersect with v221:0, adding
v25:1 not intersect with v605:0, removed
v25:2 intersect with v605:0, adding
v25:1 not intersect with v214:0, removed
v25:2 intersect with v214:0, adding
v25:1 not intersect with v247:0, removed
v25:2 intersect with v247:0, adding
v25:1 not intersect with v124:0, removed
v25:2 intersect with v124:0, adding
v25:1 not intersect with v404:0, removed
v25:2 intersect with v404:0, adding
v25:1 not intersect with v556:0, removed
v25:2 intersect with v556:0, adding
v25:1 not intersect with v562:0, removed
v25:2 intersect with v562:0, adding
v25:1 not intersect with v685:0, removed
v25:2 intersect with v685:0, adding
v25:1 not intersect with v588:0, removed
v25:2 intersect with v588:0, adding
v25:1 not intersect with v656:0, removed
v25:2 intersect with v656:0, adding
v25:1 not intersect with v627:0, removed
v25:2 intersect with v627:0, adding
v25:1 not intersect with v634:0, removed
v25:2 intersect with v634:0, adding
v25:1 not intersect with v185:0, removed
v25:2 intersect with v185:0, adding
v25:1 not intersect with v663:0, removed
v25:2 intersect with v663:0, adding
v25:1 not intersect with v19:0, removed
v25:2 intersect with v19:0, adding
v25:1 not intersect with v691:0, removed
v25:2 intersect with v691:0, adding
assign rsi to v25:1
assign 6 to v25:1
v43:1 not intersect with v152:0, removed
v43:2 intersect with v152:0, adding
v43:1 not intersect with v374:0, removed
v43:2 intersect with v374:0, adding
v43:1 not intersect with v42:0, removed
v43:2 intersect with v42:0, adding
v43:1 not intersect with v253:0, removed
v43:2 intersect with v253:0, adding
v43:1 not intersect with v541:0, removed
v43:2 intersect with v541:0, adding
v43:1 not intersect with v381:0, removed
v43:2 intersect with v381:0, adding
v43:1 not intersect with v594:0, removed
v43:2 intersect with v594:0, adding
v43:1 not intersect with v534:0, removed
v43:2 intersect with v534:0, adding
assign rdi to v43:1
assign 7 to v43:1
blocking v759 pick register rdx
assign rdx to v759:0
assign 2 to v759:0
v10:3 intersect with v6:0, adding
blocking v760 pick register r9
assign r9 to v760:0
assign 9 to v760:0
v3:0 not intersect with v734:0, removed
v3:2 intersect with v734:0, adding
v3:0 not intersect with v725:0, removed
v3:2 intersect with v725:0, adding
v3:0 not intersect with v744:0, removed
v3:2 intersect with v744:0, adding
v3:2 intersect with v24:1, adding
v3:0 not intersect with v747:0, removed
v3:2 intersect with v747:0, adding
v3:0 not intersect with v751:0, removed
v3:2 intersect with v751:0, adding
v3:2 intersect with v49:1, adding
blocking v848 pick register r8
assign r8 to v848:0
assign 8 to v848:0
v2:1 not intersect with v698:0, removed
v2:3 intersect with v698:0, adding
v2:3 intersect with v759:0, adding
v2:3 intersect with v760:0, adding
v2:3 intersect with v6:0, adding
assign r8 to v847:0
assign 8 to v847:0
blocking v843 pick register rax
assign rax to v843:0
assign 0 to v843:0
v6:0 not intersect with v2:2, removed
v6:1 intersect with v2:2, adding
v6:1 intersect with v2:3, adding
v6:1 intersect with v10:3, adding
v6:0 not intersect with v5:0, removed
v6:0 not intersect with v717:0, removed
v6:1 intersect with v717:0, adding
v6:0 not intersect with v709:0, removed
v6:0 not intersect with v707:0, removed
v6:1 intersect with v707:0, adding
assign r8 to v846:0
assign 8 to v846:0
assign r8 to v845:0
assign 8 to v845:0
assign r8 to v739:0
assign 8 to v739:0
assign rax to v761:0
assign 0 to v761:0
blocking v842 pick register r8
assign r8 to v842:0
assign 8 to v842:0
assign r8 to v841:0
assign 8 to v841:0
blocking v840 pick register rbx
assign rbx to v840:1
assign 3 to v840:1
v705:0 not intersect with v736:0, removed
v705:0 not intersect with v745:0, removed
v705:1 intersect with v745:0, adding
assign r8 to v762:0
assign 8 to v762:0
assign rbx to v838:0
assign 3 to v838:0
assign rbx to v830:0
assign 3 to v830:0
blocking v835 pick register r12
assign r12 to v835:0
assign 12 to v835:0
assign r12 to v834:1
assign 12 to v834:1
assign r12 to v759:1
assign 12 to v759:1
blocking v761 pick register rax
blocking v28 pick register rcx
blocking v25 pick register rsi
blocking v43 pick register rdi
blocking v760 pick register r9
blocking v49 pick register r14
blocking v24 pick register r15
assign rax to v833:0
assign 0 to v833:0
assign rcx to v831:0
assign 1 to v831:0
assign r8 to v762:2
assign 8 to v762:2
assign rax to v761:3
assign 0 to v761:3
assign r9 to v760:3
assign 9 to v760:3
assign rdx to v759:3
assign 2 to v759:3
assign rdi to v43:5
assign 7 to v43:5
assign rsi to v25:5
assign 6 to v25:5
assign r11 to v36:7
assign 11 to v36:7
assign r15 to v24:5
assign 15 to v24:5
assign r14 to v49:5
assign 14 to v49:5
assign rcx to v28:8
assign 1 to v28:8
assign rbx to v829:0
assign 3 to v829:0
assign r12 to v824:0
assign 12 to v824:0
assign rcx to v28:7
assign 1 to v28:7
blocking v828 pick register r8
assign r8 to v828:0
assign 8 to v828:0
assign r8 to v803:0
assign 8 to v803:0
blocking v827 pick register r14
assign r14 to v827:1
assign 14 to v827:1
v49:1 not intersect with v3:2, removed
v49:6 intersect with v3:2, adding
blocking v825 pick register rdx
assign rdx to v825:0
assign 2 to v825:0
assign r12 to v823:0
assign 12 to v823:0
assign r14 to v740:0
assign 14 to v740:0
assign rdi to v43:4
assign 7 to v43:4
assign r15 to v24:4
assign 15 to v24:4
assign rsi to v25:4
assign 6 to v25:4
assign r9 to v760:2
assign 9 to v760:2
assign r12 to v820:0
assign 12 to v820:0
assign rdx to v822:0
assign 2 to v822:0
assign rdx to v821:0
assign 2 to v821:0
assign rdx to v819:0
assign 2 to v819:0
assign r12 to v815:0
assign 12 to v815:0
assign rdx to v818:0
assign 2 to v818:0
assign rdx to v816:0
assign 2 to v816:0
assign rax to v761:2
assign 0 to v761:2
blocking v811 pick register rcx
assign rcx to v811:0
assign 1 to v811:0
blocking v817 pick register r15
assign r15 to v817:0
assign 15 to v817:0
assign r15 to v814:0
assign 15 to v814:0
assign rcx to v802:1
assign 1 to v802:1
assign rcx to v761:4
assign 1 to v761:4
assign r8 to v25:6
assign 8 to v25:6
blocking v43 pick register rdi
blocking v760 pick register r9
blocking v740 pick register r14
blocking v761 pick register rcx
blocking v25 pick register rcx
assign rax to v761:7
assign 0 to v761:7
assign r9 to v760:6
assign 9 to v760:6
assign rsi to v25:9
assign 6 to v25:9
assign rdi to v43:8
assign 7 to v43:8
assign r14 to v740:3
assign 14 to v740:3
assign r11 to v36:9
assign 11 to v36:9
assign rdi to v43:7
assign 7 to v43:7
assign r9 to v760:5
assign 9 to v760:5
assign r14 to v740:2
assign 14 to v740:2
assign rcx to v781:0
assign 1 to v781:0
assign r8 to v761:6
assign 8 to v761:6
assign r12 to v798:0
assign 12 to v798:0
assign r15 to v800:0
assign 15 to v800:0
assign r15 to v799:0
assign 15 to v799:0
assign rax to v797:0
assign 0 to v797:0
assign r12 to v793:0
assign 12 to v793:0
assign r15 to v796:0
assign 15 to v796:0
assign r15 to v794:0
assign 15 to v794:0
assign rax to v791:0
assign 0 to v791:0
assign rdx to v795:0
assign 2 to v795:0
assign rdx to v792:0
assign 2 to v792:0
assign r12 to v783:0
assign 12 to v783:0
assign r15 to v789:0
assign 15 to v789:0
assign rax to v790:0
assign 0 to v790:0
assign rax to v787:0
assign 0 to v787:0
assign r15 to v782:0
assign 15 to v782:0
assign rdx to v788:0
assign 2 to v788:0
assign rbx to v786:0
assign 3 to v786:0
assign r12 to v25:10
assign 12 to v25:10
blocking v781 pick register rcx
blocking v43 pick register rdi
blocking v740 pick register r14
assign rax to v784:0
assign 0 to v784:0
assign r15 to v782:2
assign 15 to v782:2
assign r8 to v761:9
assign 8 to v761:9
assign rcx to v781:3
assign 1 to v781:3
assign r14 to v740:6
assign 14 to v740:6
assign r9 to v760:8
assign 9 to v760:8
assign rdi to v43:11
assign 7 to v43:11
assign r11 to v36:11
assign 11 to v36:11
assign rsi to v25:12
assign 6 to v25:12
assign rax to v765:0
assign 0 to v765:0
assign rcx to v781:2
assign 1 to v781:2
assign r12 to v763:0
assign 12 to v763:0
assign r15 to v780:0
assign 15 to v780:0
assign r14 to v740:5
assign 14 to v740:5
assign rcx to v764:1
assign 1 to v764:1
assign rcx to v25:13
assign 1 to v25:13
blocking v740 pick register r14
assign r14 to v740:9
assign 14 to v740:9
assign r12 to v763:2
assign 12 to v763:2
assign rsi to v25:15
assign 6 to v25:15
assign r11 to v36:13
assign 11 to v36:13
assign rdi to v43:13
assign 7 to v43:13
assign r9 to v760:10
assign 9 to v760:10
assign r8 to v761:11
assign 8 to v761:11
assign rcx to v49:4
assign 1 to v49:4
assign r8 to v3:3
assign 8 to v3:3
assign r9 to v751:0
assign 9 to v751:0
assign r12 to v747:0
assign 12 to v747:0
assign r15 to v757:0
assign 15 to v757:0
assign r15 to v755:0
assign 15 to v755:0
assign rax to v756:0
assign 0 to v756:0
assign rbx to v705:2
assign 3 to v705:2
assign r9 to v754:0
assign 9 to v754:0
assign r9 to v705:3
assign 9 to v705:3
assign r15 to v25:16
assign 15 to v25:16
blocking v49 pick register rcx
blocking v3 pick register r8
blocking v705 pick register rbx
assign rax to v752:0
assign 0 to v752:0
assign rbx to v705:6
assign 3 to v705:6
assign r12 to v747:2
assign 12 to v747:2
assign r8 to v3:6
assign 8 to v3:6
assign rcx to v49:9
assign 1 to v49:9
assign rdi to v43:15
assign 7 to v43:15
assign r11 to v36:15
assign 11 to v36:15
assign rsi to v25:18
assign 6 to v25:18
assign r14 to v740:11
assign 14 to v740:11
assign r9 to v748:0
assign 9 to v748:0
assign r15 to v750:0
assign 15 to v750:0
assign r9 to v25:19
assign 9 to v25:19
assign rax to v749:0
assign 0 to v749:0
assign r14 to v740:13
assign 14 to v740:13
assign rsi to v25:21
assign 6 to v25:21
assign r11 to v36:17
assign 11 to v36:17
assign rdi to v43:17
assign 7 to v43:17
assign rcx to v49:11
assign 1 to v49:11
assign r8 to v3:8
assign 8 to v3:8
assign r12 to v747:4
assign 12 to v747:4
assign rbx to v705:8
assign 3 to v705:8
assign r9 to v738:0
assign 9 to v738:0
assign r12 to v746:0
assign 12 to v746:0
assign rbx to v705:5
assign 3 to v705:5
assign r12 to v745:0
assign 12 to v745:0
assign r12 to v744:0
assign 12 to v744:0
assign r8 to v3:5
assign 8 to v3:5
assign r14 to v740:8
assign 14 to v740:8
assign r12 to v739:2
assign 12 to v739:2
assign r15 to v741:0
assign 15 to v741:0
assign rax to v742:0
assign 0 to v742:0
assign r9 to v736:0
assign 9 to v736:0
assign r12 to v737:1
assign 12 to v737:1
assign r12 to v25:22
assign 12 to v25:22
blocking v3 pick register r8
assign r9 to v736:2
assign 9 to v736:2
assign r8 to v3:11
assign 8 to v3:11
assign rcx to v49:13
assign 1 to v49:13
assign rdi to v43:19
assign 7 to v43:19
assign r11 to v36:19
assign 11 to v36:19
assign rsi to v25:24
assign 6 to v25:24
v6:3 intersect with v2:3, adding
v6:1 not intersect with v2:2, removed
v6:1 not intersect with v717:0, removed
v6:1 not intersect with v707:0, removed
v6:3 intersect with v10:3, adding
assign rax to v6:3
assign 0 to v6:3
v2:3 not intersect with v6:3, removed
v2:5 intersect with v6:3, adding
v2:3 not intersect with v698:0, removed
assign r8 to v2:5
assign 8 to v2:5
assign r15 to v24:7
assign 15 to v24:7
assign rcx to v28:10
assign 1 to v28:10
assign r9 to v49:8
assign 9 to v49:8
assign r12 to v3:10
assign 12 to v3:10
assign r14 to v725:0
assign 14 to v725:0
assign rdx to v734:0
assign 2 to v734:0
assign rdx to v726:0
assign 2 to v726:0
blocking v732 pick register rcx
assign rcx to v732:0
assign 1 to v732:0
assign rcx to v733:1
assign 1 to v733:1
assign rcx to v731:0
assign 1 to v731:0
assign rdi to v43:10
assign 7 to v43:10
blocking v728 pick register r9
assign r9 to v728:0
assign 9 to v728:0
assign rcx to v730:0
assign 1 to v730:0
assign rcx to v729:0
assign 1 to v729:0
assign rcx to v723:0
assign 1 to v723:0
assign rcx to v724:1
assign 1 to v724:1
assign rcx to v722:0
assign 1 to v722:0
assign r9 to v719:0
assign 9 to v719:0
assign rcx to v721:0
assign 1 to v721:0
assign rcx to v720:0
assign 1 to v720:0
assign rcx to v6:2
assign 1 to v6:2
assign r9 to v717:0
assign 9 to v717:0
assign r9 to v716:0
assign 9 to v716:0
assign r14 to v25:8
assign 14 to v25:8
assign rax to v713:0
assign 0 to v713:0
assign r9 to v715:0
assign 9 to v715:0
assign r9 to v714:0
assign 9 to v714:0
assign r9 to v710:0
assign 9 to v710:0
assign rax to v712:0
assign 0 to v712:0
assign r8 to v2:4
assign 8 to v2:4
assign r9 to v698:0
assign 9 to v698:0
assign rax to v707:0
assign 0 to v707:0
assign rcx to v709:0
assign 1 to v709:0
assign rcx to v708:0
assign 1 to v708:0
assign rdx to v700:0
assign 2 to v700:0
assign rcx to v701:0
assign 1 to v701:0
assign rax to v706:0
assign 0 to v706:0
assign rax to v704:0
assign 0 to v704:0
assign rsi to v703:1
assign 6 to v703:1
assign rcx to v699:1
assign 1 to v699:1
assign rax to v70:1
assign 0 to v70:1
assign rsi to v702:1
assign 6 to v702:1
v25:2 not intersect with v691:0, removed
v25:25 intersect with v691:0, adding
v25:2 not intersect with v19:0, removed
v25:25 intersect with v19:0, adding
v25:2 not intersect with v634:0, removed
v25:25 intersect with v634:0, adding
v25:2 not intersect with v556:0, removed
v25:25 intersect with v556:0, adding
v25:2 not intersect with v124:0, removed
v25:25 intersect with v124:0, adding
v25:2 not intersect with v404:0, removed
v25:25 intersect with v404:0, adding
v25:2 not intersect with v247:0, removed
v25:25 intersect with v247:0, adding
v25:2 not intersect with v605:0, removed
v25:25 intersect with v605:0, adding
v25:2 not intersect with v214:0, removed
v25:25 intersect with v214:0, adding
v25:2 not intersect with v192:0, removed
v25:25 intersect with v192:0, adding
v25:2 not intersect with v95:0, removed
v25:25 intersect with v95:0, adding
v25:2 not intersect with v58:0, removed
v25:25 intersect with v58:0, adding
v25:2 not intersect with v163:0, removed
v25:25 intersect with v163:0, adding
v25:2 not intersect with v146:0, removed
v25:25 intersect with v146:0, adding
v25:2 not intersect with v221:0, removed
v25:25 intersect with v221:0, adding
v25:2 not intersect with v397:0, removed
v25:25 intersect with v397:0, adding
v25:2 not intersect with v656:0, removed
v25:25 intersect with v656:0, adding
v25:2 not intersect with v627:0, removed
v25:25 intersect with v627:0, adding
v25:2 not intersect with v588:0, removed
v25:25 intersect with v588:0, adding
v25:2 not intersect with v685:0, removed
v25:25 intersect with v685:0, adding
v25:2 not intersect with v562:0, removed
v25:25 intersect with v562:0, adding
v25:2 not intersect with v65:0, removed
v25:25 intersect with v65:0, adding
v25:2 not intersect with v88:0, removed
v25:25 intersect with v88:0, adding
v25:2 not intersect with v117:0, removed
v25:25 intersect with v117:0, adding
v25:2 not intersect with v663:0, removed
v25:25 intersect with v663:0, adding
v25:2 not intersect with v185:0, removed
v25:25 intersect with v185:0, adding
assign rcx to v25:2
assign 1 to v25:2
assign r9 to v70:2
assign 9 to v70:2
v43:2 not intersect with v534:0, removed
v43:20 intersect with v534:0, adding
v43:2 not intersect with v381:0, removed
v43:20 intersect with v381:0, adding
v43:2 not intersect with v594:0, removed
v43:20 intersect with v594:0, adding
v43:2 not intersect with v541:0, removed
v43:20 intersect with v541:0, adding
v43:2 not intersect with v253:0, removed
v43:20 intersect with v253:0, adding
v43:2 not intersect with v42:0, removed
v43:20 intersect with v42:0, adding
v43:2 not intersect with v374:0, removed
v43:20 intersect with v374:0, adding
v43:2 not intersect with v152:0, removed
v43:20 intersect with v152:0, adding
assign r14 to v43:2
assign 14 to v43:2
blocking v2 pick register rcx
blocking v3 pick register rcx
blocking v10 pick register rcx
blocking v25 pick register rcx
blocking v49 pick register rcx
blocking v43 pick register rcx
blocking v28 pick register rcx
blocking v36 pick register rcx
blocking v24 pick register rcx
assign rcx to v2:6
assign 1 to v2:6
assign r8 to v694:0
assign 8 to v694:0
assign r9 to v10:4
assign 9 to v10:4
assign r12 to v696:0
assign 12 to v696:0
assign rax to v691:0
assign 0 to v691:0
assign r11 to v25:26
assign 11 to v25:26
assign r12 to v689:0
assign 12 to v689:0
assign r14 to v695:0
assign 14 to v695:0
assign r14 to v693:0
assign 14 to v693:0
assign r8 to v692:0
assign 8 to v692:0
blocking v2 pick register rcx
blocking v10 pick register r9
blocking v25 pick register r11
assign rax to v690:0
assign 0 to v690:0
assign r11 to v25:30
assign 11 to v25:30
assign r9 to v10:8
assign 9 to v10:8
assign rcx to v2:10
assign 1 to v2:10
assign r12 to v687:0
assign 12 to v687:0
assign r8 to v688:1
assign 8 to v688:1
v43:20 not intersect with v152:0, removed
v43:20 not intersect with v374:0, removed
v43:20 not intersect with v42:0, removed
v43:20 not intersect with v534:0, removed
v43:20 not intersect with v381:0, removed
v43:20 not intersect with v253:0, removed
v43:20 not intersect with v541:0, removed
v43:20 not intersect with v594:0, removed
v43:22 intersect with v594:0, adding
v43:22 not intersect with v594:0, removed
v43:23 intersect with v594:0, adding
assign rdi to v43:22
assign 7 to v43:22
v3:14 intersect with v49:2, adding
v3:1 not intersect with v155:0, removed
v3:1 not intersect with v46:0, removed
v3:1 not intersect with v256:0, removed
v3:14 intersect with v24:2, adding
v3:1 not intersect with v48:0, removed
v3:1 not intersect with v599:0, removed
v3:1 not intersect with v157:0, removed
v3:1 not intersect with v597:0, removed
v3:1 not intersect with v258:0, removed
v3:15 intersect with v24:2, adding
v3:15 intersect with v49:2, adding
assign r12 to v3:14
assign 12 to v3:14
assign r11 to v36:21
assign 11 to v36:21
assign r8 to v2:11
assign 8 to v2:11
assign r14 to v25:31
assign 14 to v25:31
assign rcx to v2:9
assign 1 to v2:9
assign r8 to v674:0
assign 8 to v674:0
assign r9 to v10:7
assign 9 to v10:7
assign r15 to v686:0
assign 15 to v686:0
assign r15 to v685:0
assign 15 to v685:0
assign r14 to v25:29
assign 14 to v25:29
assign rax to v682:0
assign 0 to v682:0
assign r15 to v684:0
assign 15 to v684:0
assign r15 to v683:0
assign 15 to v683:0
assign r15 to v679:0
assign 15 to v679:0
assign rax to v681:0
assign 0 to v681:0
assign r15 to v667:0
assign 15 to v667:0
assign rax to v676:0
assign 0 to v676:0
assign rdx to v678:0
assign 2 to v678:0
assign rdx to v677:0
assign 2 to v677:0
assign rsi to v669:0
assign 6 to v669:0
assign rax to v670:0
assign 0 to v670:0
assign rdx to v675:0
assign 2 to v675:0
assign rdx to v673:0
assign 2 to v673:0
assign rbx to v672:1
assign 3 to v672:1
assign r8 to v668:1
assign 8 to v668:1
assign rsi to v671:1
assign 6 to v671:1
v43:23 not intersect with v594:0, removed
v43:24 intersect with v594:0, adding
assign r8 to v43:23
assign 8 to v43:23
blocking v2 pick register rcx
blocking v10 pick register rcx
blocking v25 pick register rcx
assign rcx to v2:12
assign 1 to v2:12
assign r8 to v661:0
assign 8 to v661:0
assign r9 to v10:10
assign 9 to v10:10
assign r12 to v665:0
assign 12 to v665:0
assign r12 to v663:0
assign 12 to v663:0
assign r11 to v25:32
assign 11 to v25:32
assign rax to v658:0
assign 0 to v658:0
assign r14 to v664:0
assign 14 to v664:0
assign r12 to v662:0
assign 12 to v662:0
assign r12 to v660:0
assign 12 to v660:0
assign r8 to v659:1
assign 8 to v659:1
assign r11 to v36:23
assign 11 to v36:23
v3:16 intersect with v49:2, adding
v3:16 intersect with v24:2, adding
v3:17 intersect with v24:2, adding
v3:17 intersect with v49:2, adding
assign r12 to v3:16
assign 12 to v3:16
v43:24 not intersect with v594:0, removed
v43:25 intersect with v594:0, adding
v43:25 not intersect with v594:0, removed
v43:26 intersect with v594:0, adding
assign rdi to v43:25
assign 7 to v43:25
assign r14 to v25:34
assign 14 to v25:34
v3:18 intersect with v24:2, adding
v3:18 intersect with v49:2, adding
assign r11 to v25:35
assign 11 to v25:35
assign r8 to v645:0
assign 8 to v645:0
assign r12 to v657:0
assign 12 to v657:0
assign r12 to v656:0
assign 12 to v656:0
assign rax to v653:0
assign 0 to v653:0
assign r12 to v655:0
assign 12 to v655:0
assign r12 to v654:0
assign 12 to v654:0
assign r12 to v650:0
assign 12 to v650:0
assign rax to v652:0
assign 0 to v652:0
assign rdi to v638:0
assign 7 to v638:0
assign r12 to v647:0
assign 12 to v647:0
assign r14 to v649:0
assign 14 to v649:0
assign r14 to v648:0
assign 14 to v648:0
assign rax to v640:0
assign 0 to v640:0
assign r12 to v641:0
assign 12 to v641:0
assign r14 to v646:0
assign 14 to v646:0
assign r14 to v644:0
assign 14 to v644:0
assign r15 to v643:1
assign 15 to v643:1
assign r8 to v639:1
assign 8 to v639:1
assign rsi to v642:1
assign 6 to v642:1
v43:26 not intersect with v594:0, removed
v43:28 intersect with v594:0, adding
assign r8 to v43:26
assign 8 to v43:26
blocking v2 pick register rcx
blocking v10 pick register rcx
blocking v25 pick register rcx
assign rcx to v2:14
assign 1 to v2:14
assign r8 to v632:0
assign 8 to v632:0
assign r9 to v10:12
assign 9 to v10:12
assign r12 to v636:0
assign 12 to v636:0
assign r12 to v634:0
assign 12 to v634:0
assign r11 to v25:36
assign 11 to v25:36
assign rax to v629:0
assign 0 to v629:0
assign r14 to v635:0
assign 14 to v635:0
assign r12 to v633:0
assign 12 to v633:0
assign r12 to v631:0
assign 12 to v631:0
assign r8 to v630:1
assign 8 to v630:1
assign r8 to v616:0
assign 8 to v616:0
assign r12 to v628:0
assign 12 to v628:0
assign r12 to v627:0
assign 12 to v627:0
assign rax to v624:0
assign 0 to v624:0
assign r12 to v626:0
assign 12 to v626:0
assign r12 to v625:0
assign 12 to v625:0
assign r12 to v621:0
assign 12 to v621:0
assign rax to v623:0
assign 0 to v623:0
assign rdi to v609:0
assign 7 to v609:0
assign r12 to v618:0
assign 12 to v618:0
assign r14 to v620:0
assign 14 to v620:0
assign r14 to v619:0
assign 14 to v619:0
assign rax to v611:0
assign 0 to v611:0
assign r12 to v612:0
assign 12 to v612:0
assign r14 to v617:0
assign 14 to v617:0
assign r14 to v615:0
assign 14 to v615:0
assign r15 to v614:1
assign 15 to v614:1
assign r8 to v610:1
assign 8 to v610:1
assign rsi to v613:1
assign 6 to v613:1
blocking v2 pick register rcx
blocking v10 pick register rcx
blocking v25 pick register rcx
assign rcx to v2:16
assign 1 to v2:16
assign r8 to v603:0
assign 8 to v603:0
assign r9 to v10:14
assign 9 to v10:14
assign r12 to v607:0
assign 12 to v607:0
assign r12 to v605:0
assign 12 to v605:0
assign r11 to v25:38
assign 11 to v25:38
assign rax to v600:0
assign 0 to v600:0
assign r14 to v606:0
assign 14 to v606:0
assign r12 to v604:0
assign 12 to v604:0
assign r12 to v602:0
assign 12 to v602:0
assign r8 to v601:1
assign 8 to v601:1
assign r8 to v3:13
assign 8 to v3:13
assign r12 to v49:16
assign 12 to v49:16
assign r14 to v597:0
assign 14 to v597:0
assign r15 to v599:0
assign 15 to v599:0
assign r15 to v598:0
assign 15 to v598:0
assign r14 to v595:0
assign 14 to v595:0
assign r14 to v596:1
assign 14 to v596:1
assign r14 to v594:0
assign 14 to v594:0
assign r15 to v43:21
assign 15 to v43:21
assign rax to v591:0
assign 0 to v591:0
assign r14 to v593:0
assign 14 to v593:0
assign r14 to v592:0
assign 14 to v592:0
assign r14 to v581:0
assign 14 to v581:0
assign rax to v589:0
assign 0 to v589:0
assign rax to v588:0
assign 0 to v588:0
assign rdx to v585:0
assign 2 to v585:0
assign rax to v587:0
assign 0 to v587:0
assign rax to v586:0
assign 0 to v586:0
assign rax to v582:0
assign 0 to v582:0
assign rdx to v584:0
assign 2 to v584:0
assign rdi to v570:0
assign 7 to v570:0
assign rax to v578:0
assign 0 to v578:0
assign r14 to v580:0
assign 14 to v580:0
assign r14 to v579:0
assign 14 to v579:0
assign rdx to v572:0
assign 2 to v572:0
assign r14 to v573:0
assign 14 to v573:0
assign rax to v577:0
assign 0 to v577:0
assign rax to v576:0
assign 0 to v576:0
assign rbx to v575:1
assign 3 to v575:1
assign r14 to v571:1
assign 14 to v571:1
assign rsi to v574:1
assign 6 to v574:1
blocking v2 pick register rcx
blocking v3 pick register rcx
blocking v10 pick register rcx
blocking v25 pick register rcx
blocking v43 pick register rcx
blocking v49 pick register rcx
assign rcx to v2:18
assign 1 to v2:18
assign r8 to v566:0
assign 8 to v566:0
assign r9 to v10:16
assign 9 to v10:16
assign r12 to v568:0
assign 12 to v568:0
assign rax to v562:0
assign 0 to v562:0
assign r11 to v25:40
assign 11 to v25:40
assign r12 to v560:0
assign 12 to v560:0
assign r14 to v567:0
assign 14 to v567:0
assign r14 to v565:0
assign 14 to v565:0
assign r8 to v564:0
assign 8 to v564:0
blocking v2 pick register rcx
blocking v10 pick register r9
blocking v25 pick register r11
assign rax to v561:0
assign 0 to v561:0
assign r11 to v25:44
assign 11 to v25:44
assign r9 to v10:20
assign 9 to v10:20
assign rcx to v2:22
assign 1 to v2:22
assign r12 to v558:0
assign 12 to v558:0
assign r8 to v559:1
assign 8 to v559:1
assign r15 to v43:31
assign 15 to v43:31
assign r12 to v49:19
assign 12 to v49:19
assign r8 to v3:21
assign 8 to v3:21
assign rcx to v2:21
assign 1 to v2:21
assign r14 to v415:0
assign 14 to v415:0
assign r9 to v10:19
assign 9 to v10:19
assign rax to v557:0
assign 0 to v557:0
assign rax to v556:0
assign 0 to v556:0
assign r11 to v25:43
assign 11 to v25:43
assign rdx to v423:0
assign 2 to v423:0
assign rax to v555:0
assign 0 to v555:0
assign rax to v424:0
assign 0 to v424:0
assign rsi to v552:0
assign 6 to v552:0
assign rdi to v554:0
assign 7 to v554:0
assign rsi to v449:0
assign 6 to v449:0
assign rdi to v549:0
assign 7 to v549:0
blocking v551 pick register rcx
assign rcx to v551:0
assign 1 to v551:0
assign rcx to v550:0
assign 1 to v550:0
blocking v450 pick register r14
assign r14 to v450:0
assign 14 to v450:0
v415:0 not intersect with v2:2, removed
v415:0 not intersect with v10:2, removed
v415:0 not intersect with v419:0, removed
v415:1 intersect with v419:0, adding
v415:1 intersect with v549:0, adding
v415:0 not intersect with v417:0, removed
v415:1 intersect with v417:0, adding
assign rcx to v451:0
assign 1 to v451:0
assign rdi to v548:0
assign 7 to v548:0
assign rdi to v547:0
assign 7 to v547:0
assign rbx to v546:1
assign 3 to v546:1
assign rdi to v452:0
assign 7 to v452:0
blocking v543 pick register rax
assign rax to v543:0
assign 0 to v543:0
assign rbx to v539:1
assign 3 to v539:1
blocking v545 pick register r11
assign r11 to v545:1
assign 11 to v545:1
assign r11 to v544:1
assign 11 to v544:1
assign r11 to v542:1
assign 11 to v542:1
assign r11 to v25:46
assign 11 to v25:46
assign rax to v541:0
assign 0 to v541:0
assign r11 to v43:30
assign 11 to v43:30
assign r15 to v531:0
assign 15 to v531:0
assign rax to v540:0
assign 0 to v540:0
assign rax to v532:0
assign 0 to v532:0
blocking v536 pick register rdx
assign rdx to v536:0
assign 2 to v536:0
v423:0 not intersect with v420:0, removed
v423:0 not intersect with v425:1, removed
v423:1 intersect with v425:1, adding
v423:0 not intersect with v426:0, removed
v423:1 intersect with v426:0, adding
assign rbx to v538:1
assign 3 to v538:1
assign rbx to v537:1
assign 3 to v537:1
assign rbx to v535:1
assign 3 to v535:1
assign rdx to v534:0
assign 2 to v534:0
blocking v529 pick register rcx
assign rcx to v529:0
assign 1 to v529:0
v451:0 not intersect with v549:0, removed
v451:1 intersect with v534:0, adding
assign rdx to v533:0
assign 2 to v533:0
assign rdx to v530:0
assign 2 to v530:0
assign rbx to v368:1
assign 3 to v368:1
assign rbx to v368:4
assign 3 to v368:4
assign rcx to v517:0
assign 1 to v517:0
assign rcx to v455:0
assign 1 to v455:0
assign r15 to v456:0
assign 15 to v456:0
assign rax to v457:0
assign 0 to v457:0
assign rdx to v458:0
assign 2 to v458:0
blocking v515 pick register r11
assign r11 to v515:1
assign 11 to v515:1
blocking v516 pick register r14
assign r14 to v516:1
assign 14 to v516:1
assign r14 to v514:0
assign 14 to v514:0
assign r14 to v501:0
assign 14 to v501:0
blocking v513 pick register rsi
assign rsi to v513:0
assign 6 to v513:0
v449:0 not intersect with v2:2, removed
v449:1 intersect with v452:0, adding
assign rsi to v427:0
assign 6 to v427:0
blocking v511 pick register r9
assign r9 to v511:0
assign 9 to v511:0
assign r11 to v499:0
assign 11 to v499:0
blocking v488 pick register rbx
assign rbx to v488:0
assign 3 to v488:0
blocking v512 pick register rsi
assign rsi to v512:0
assign 6 to v512:0
v427:0 not intersect with v513:0, removed
v427:0 not intersect with v428:0, removed
v427:1 intersect with v428:0, adding
v427:1 intersect with v511:0, adding
v427:1 not intersect with v428:0, removed
v427:3 intersect with v428:0, adding
assign rsi to v427:3
assign 6 to v427:3
assign r9 to v446:0
assign 9 to v446:0
blocking v500 pick register rsi
assign rsi to v500:1
assign 6 to v500:1
v427:3 not intersect with v428:0, removed
v427:4 intersect with v428:0, adding
assign rbx to v485:0
assign 3 to v485:0
assign rbx to v482:0
assign 3 to v482:0
assign rsi to v484:1
assign 6 to v484:1
assign r11 to v457:1
assign 11 to v457:1
assign r14 to v482:1
assign 14 to v482:1
blocking v446 pick register r9
assign rbx to v482:3
assign 3 to v482:3
assign r15 to v456:2
assign 15 to v456:2
assign rdi to v452:2
assign 7 to v452:2
assign rdx to v458:2
assign 2 to v458:2
assign rcx to v455:2
assign 1 to v455:2
assign rax to v457:3
assign 0 to v457:3
assign r9 to v446:3
assign 9 to v446:3
assign r8 to v3:23
assign 8 to v3:23
assign r12 to v49:21
assign 12 to v49:21
assign rbx to v469:0
assign 3 to v469:0
assign r11 to v464:0
assign 11 to v464:0
assign r11 to v462:0
assign 11 to v462:0
assign rsi to v463:1
assign 6 to v463:1
assign r14 to v457:4
assign 14 to v457:4
assign r11 to v462:2
assign 11 to v462:2
assign r12 to v49:24
assign 12 to v49:24
assign r8 to v3:26
assign 8 to v3:26
assign r9 to v446:5
assign 9 to v446:5
assign rax to v457:6
assign 0 to v457:6
assign rcx to v455:4
assign 1 to v455:4
assign rdx to v458:4
assign 2 to v458:4
assign rdi to v452:4
assign 7 to v452:4
assign r15 to v456:4
assign 15 to v456:4
assign rcx to v447:0
assign 1 to v447:0
assign r9 to v446:2
assign 9 to v446:2
assign rcx to v445:0
assign 1 to v445:0
assign rcx to v444:0
assign 1 to v444:0
assign rcx to v28:12
assign 1 to v28:12
assign r9 to v438:0
assign 9 to v438:0
assign r14 to v443:0
assign 14 to v443:0
assign r11 to v36:20
assign 11 to v36:20
assign rdx to v442:1
assign 2 to v442:1
blocking v28 pick register rcx
blocking v36 pick register rcx
assign rax to v441:0
assign 0 to v441:0
assign r9 to v439:0
assign 9 to v439:0
assign r11 to v36:28
assign 11 to v36:28
assign rcx to v28:15
assign 1 to v28:15
assign r8 to v3:28
assign 8 to v3:28
assign r12 to v49:26
assign 12 to v49:26
assign r9 to v436:0
assign 9 to v436:0
assign r14 to v437:0
assign 14 to v437:0
assign rcx to v28:14
assign 1 to v28:14
assign r9 to v435:0
assign 9 to v435:0
assign r9 to v432:0
assign 9 to v432:0
assign r14 to v434:1
assign 14 to v434:1
assign rcx to v428:0
assign 1 to v428:0
assign r9 to v427:2
assign 9 to v427:2
assign r11 to v429:0
assign 11 to v429:0
assign r14 to v430:0
assign 14 to v430:0
assign rcx to v423:2
assign 1 to v423:2
assign r9 to v426:0
assign 9 to v426:0
assign r9 to v425:1
assign 9 to v425:1
assign rax to v424:2
assign 0 to v424:2
assign r11 to v25:48
assign 11 to v25:48
assign r9 to v10:22
assign 9 to v10:22
v415:1 not intersect with v417:0, removed
v415:1 not intersect with v419:0, removed
assign r14 to v415:3
assign 14 to v415:3
assign rcx to v2:25
assign 1 to v2:25
assign r15 to v43:34
assign 15 to v43:34
assign rdx to v423:3
assign 2 to v423:3
assign rax to v420:0
assign 0 to v420:0
assign rdx to v422:0
assign 2 to v422:0
assign rcx to v2:24
assign 1 to v2:24
assign rdi to v408:0
assign 7 to v408:0
assign r14 to v415:2
assign 14 to v415:2
assign rax to v417:0
assign 0 to v417:0
assign rdx to v419:0
assign 2 to v419:0
assign rdx to v418:0
assign 2 to v418:0
assign rsi to v410:0
assign 6 to v410:0
assign rax to v411:0
assign 0 to v411:0
assign rdx to v416:0
assign 2 to v416:0
assign rdx to v414:0
assign 2 to v414:0
assign rbx to v413:1
assign 3 to v413:1
assign r14 to v409:1
assign 14 to v409:1
assign rsi to v412:1
assign 6 to v412:1
blocking v2 pick register rcx
blocking v10 pick register rcx
blocking v25 pick register rcx
blocking v43 pick register rcx
blocking v28 pick register rcx
assign rcx to v2:26
assign 1 to v2:26
assign r8 to v402:0
assign 8 to v402:0
assign r9 to v10:23
assign 9 to v10:23
assign r12 to v406:0
assign 12 to v406:0
assign r12 to v404:0
assign 12 to v404:0
assign r11 to v25:49
assign 11 to v25:49
assign rax to v399:0
assign 0 to v399:0
assign r14 to v405:0
assign 14 to v405:0
assign r12 to v403:0
assign 12 to v403:0
assign r12 to v401:0
assign 12 to v401:0
assign r8 to v400:1
assign 8 to v400:1
assign r15 to v43:36
assign 15 to v43:36
assign r12 to v49:27
assign 12 to v49:27
assign r8 to v3:29
assign 8 to v3:29
assign r8 to v262:0
assign 8 to v262:0
assign r12 to v398:0
assign 12 to v398:0
assign r12 to v397:0
assign 12 to v397:0
assign rax to v259:0
assign 0 to v259:0
assign r12 to v396:0
assign 12 to v396:0
assign r12 to v395:0
assign 12 to v395:0
assign r12 to v392:0
assign 12 to v392:0
assign rdx to v394:0
assign 2 to v394:0
assign r12 to v285:0
assign 12 to v285:0
assign r14 to v389:0
assign 14 to v389:0
assign r15 to v391:0
assign 15 to v391:0
assign r15 to v390:0
assign 15 to v390:0
assign rdx to v286:0
assign 2 to v286:0
assign r14 to v287:0
assign 14 to v287:0
blocking v388 pick register rcx
assign rcx to v388:0
assign 1 to v388:0
assign rcx to v387:0
assign 1 to v387:0
assign r15 to v386:1
assign 15 to v386:1
assign rcx to v288:0
assign 1 to v288:0
assign r15 to v383:0
assign 15 to v383:0
assign rbx to v379:1
assign 3 to v379:1
assign rsi to v385:1
assign 6 to v385:1
assign rsi to v384:1
assign 6 to v384:1
assign rsi to v382:1
assign 6 to v382:1
assign r15 to v381:0
assign 15 to v381:0
assign rsi to v43:35
assign 6 to v43:35
assign rdi to v371:0
assign 7 to v371:0
assign r15 to v380:0
assign 15 to v380:0
assign r15 to v372:0
assign 15 to v372:0
blocking v376 pick register r8
assign r8 to v376:0
assign 8 to v376:0
v262:0 not intersect with v2:2, removed
v262:0 not intersect with v10:2, removed
assign rbx to v378:1
assign 3 to v378:1
assign rbx to v377:1
assign 3 to v377:1
assign rbx to v375:1
assign 3 to v375:1
assign r8 to v374:0
assign 8 to v374:0
blocking v369 pick register rsi
assign rsi to v369:0
assign 6 to v369:0
assign r8 to v373:0
assign 8 to v373:0
assign r8 to v370:0
assign 8 to v370:0
assign rbx to v356:0
assign 3 to v356:0
assign r8 to v355:0
assign 8 to v355:0
assign r8 to v291:0
assign 8 to v291:0
assign r15 to v292:0
assign 15 to v292:0
assign rbx to v293:0
assign 3 to v293:0
assign rsi to v294:0
assign 6 to v294:0
assign rdi to v353:1
assign 7 to v353:1
blocking v354 pick register rax
assign rax to v354:1
assign 0 to v354:1
v259:0 not intersect with v261:0, removed
v259:1 intersect with v261:0, adding
v259:0 not intersect with v260:1, removed
v259:1 intersect with v260:1, adding
assign rax to v352:0
assign 0 to v352:0
assign rax to v339:0
assign 0 to v339:0
assign rdi to v351:0
assign 7 to v351:0
assign rdi to v263:0
assign 7 to v263:0
blocking v349 pick register r9
assign r9 to v349:0
assign 9 to v349:0
blocking v337 pick register r11
assign r11 to v337:0
assign 11 to v337:0
blocking v326 pick register rdi
assign rdi to v326:0
assign 7 to v326:0
v263:0 not intersect with v351:0, removed
v263:0 not intersect with v264:0, removed
v263:1 intersect with v264:0, adding
v263:1 intersect with v349:0, adding
blocking v350 pick register rcx
assign rcx to v350:0
assign 1 to v350:0
v288:1 intersect with v285:0, adding
v288:2 intersect with v285:0, adding
assign rcx to v288:2
assign 1 to v288:2
assign r9 to v282:0
assign 9 to v282:0
blocking v338 pick register rcx
assign rcx to v338:1
assign 1 to v338:1
v288:3 intersect with v285:0, adding
assign rdi to v323:0
assign 7 to v323:0
assign rdi to v320:0
assign 7 to v320:0
assign rcx to v322:1
assign 1 to v322:1
assign rcx to v293:1
assign 1 to v293:1
assign r11 to v294:1
assign 11 to v294:1
blocking v282 pick register r9
assign rdi to v320:2
assign 7 to v320:2
assign r15 to v292:2
assign 15 to v292:2
assign r14 to v287:2
assign 14 to v287:2
assign r12 to v285:2
assign 12 to v285:2
assign r8 to v291:2
assign 8 to v291:2
assign rsi to v294:3
assign 6 to v294:3
assign rbx to v293:3
assign 3 to v293:3
assign rdx to v286:2
assign 2 to v286:2
assign r9 to v282:3
assign 9 to v282:3
assign rdi to v307:0
assign 7 to v307:0
assign rcx to v302:0
assign 1 to v302:0
assign rcx to v298:0
assign 1 to v298:0
assign r11 to v301:1
assign 11 to v301:1
assign r11 to v293:4
assign 11 to v293:4
assign rdi to v294:4
assign 7 to v294:4
assign rcx to v298:2
assign 1 to v298:2
assign r9 to v282:5
assign 9 to v282:5
assign rdx to v286:4
assign 2 to v286:4
assign rbx to v293:6
assign 3 to v293:6
assign rsi to v294:6
assign 6 to v294:6
assign r8 to v291:4
assign 8 to v291:4
assign r12 to v285:4
assign 12 to v285:4
assign r14 to v287:4
assign 14 to v287:4
assign r15 to v292:4
assign 15 to v292:4
assign rcx to v283:0
assign 1 to v283:0
assign r9 to v282:2
assign 9 to v282:2
assign rcx to v281:0
assign 1 to v281:0
assign rcx to v280:0
assign 1 to v280:0
assign rcx to v28:18
assign 1 to v28:18
assign r8 to v274:0
assign 8 to v274:0
assign r9 to v279:0
assign 9 to v279:0
assign r11 to v36:27
assign 11 to v36:27
assign rdx to v278:1
assign 2 to v278:1
blocking v28 pick register rcx
blocking v36 pick register rcx
assign rax to v277:0
assign 0 to v277:0
assign r8 to v275:0
assign 8 to v275:0
assign r11 to v36:33
assign 11 to v36:33
assign rcx to v28:21
assign 1 to v28:21
assign r8 to v272:0
assign 8 to v272:0
assign rcx to v273:0
assign 1 to v273:0
assign r9 to v28:20
assign 9 to v28:20
assign rcx to v271:0
assign 1 to v271:0
assign rcx to v268:0
assign 1 to v268:0
assign r8 to v270:1
assign 8 to v270:1
assign rcx to v264:0
assign 1 to v264:0
assign r8 to v263:2
assign 8 to v263:2
assign r9 to v265:0
assign 9 to v265:0
assign r11 to v266:0
assign 11 to v266:0
assign rcx to v259:2
assign 1 to v259:2
assign r8 to v261:0
assign 8 to v261:0
assign r8 to v260:1
assign 8 to v260:1
assign r11 to v25:53
assign 11 to v25:53
assign r9 to v10:27
assign 9 to v10:27
assign rcx to v2:30
assign 1 to v2:30
assign r8 to v3:20
assign 8 to v3:20
assign r12 to v49:18
assign 12 to v49:18
assign r14 to v256:0
assign 14 to v256:0
assign r15 to v258:0
assign 15 to v258:0
assign r15 to v257:0
assign 15 to v257:0
assign r14 to v254:0
assign 14 to v254:0
assign r14 to v255:1
assign 14 to v255:1
assign r14 to v253:0
assign 14 to v253:0
assign r15 to v43:40
assign 15 to v43:40
assign rax to v250:0
assign 0 to v250:0
assign r14 to v252:0
assign 14 to v252:0
assign r14 to v251:0
assign 14 to v251:0
assign rcx to v2:29
assign 1 to v2:29
assign r14 to v236:0
assign 14 to v236:0
assign r9 to v10:26
assign 9 to v10:26
assign rax to v248:0
assign 0 to v248:0
assign rax to v247:0
assign 0 to v247:0
assign r11 to v25:52
assign 11 to v25:52
assign rdx to v240:0
assign 2 to v240:0
assign rax to v246:0
assign 0 to v246:0
assign rax to v241:0
assign 0 to v241:0
assign rsi to v243:0
assign 6 to v243:0
assign rdi to v245:0
assign 7 to v245:0
assign r9 to v242:0
assign 9 to v242:0
assign rax to v237:0
assign 0 to v237:0
assign rdx to v239:0
assign 2 to v239:0
assign rdi to v225:0
assign 7 to v225:0
assign rax to v233:0
assign 0 to v233:0
assign r14 to v235:0
assign 14 to v235:0
assign r14 to v234:0
assign 14 to v234:0
assign rdx to v227:0
assign 2 to v227:0
assign r14 to v228:0
assign 14 to v228:0
assign rax to v232:0
assign 0 to v232:0
assign rax to v231:0
assign 0 to v231:0
assign rbx to v230:1
assign 3 to v230:1
assign r14 to v226:1
assign 14 to v226:1
assign rsi to v229:1
assign 6 to v229:1
assign r14 to v43:38
assign 14 to v43:38
blocking v2 pick register rcx
blocking v3 pick register rcx
blocking v10 pick register rcx
blocking v25 pick register rcx
blocking v49 pick register rcx
blocking v43 pick register rcx
blocking v28 pick register rcx
assign rcx to v2:31
assign 1 to v2:31
assign r8 to v219:0
assign 8 to v219:0
assign r9 to v10:28
assign 9 to v10:28
assign r12 to v223:0
assign 12 to v223:0
assign r12 to v221:0
assign 12 to v221:0
assign r11 to v25:54
assign 11 to v25:54
assign rax to v216:0
assign 0 to v216:0
assign r14 to v222:0
assign 14 to v222:0
assign r12 to v220:0
assign 12 to v220:0
assign r12 to v218:0
assign 12 to v218:0
assign r8 to v217:1
assign 8 to v217:1
assign r15 to v43:43
assign 15 to v43:43
assign r12 to v49:32
assign 12 to v49:32
assign r8 to v3:34
assign 8 to v3:34
assign r8 to v203:0
assign 8 to v203:0
assign r12 to v215:0
assign 12 to v215:0
assign r12 to v214:0
assign 12 to v214:0
assign rax to v211:0
assign 0 to v211:0
assign r12 to v213:0
assign 12 to v213:0
assign r12 to v212:0
assign 12 to v212:0
assign r12 to v208:0
assign 12 to v208:0
assign rax to v210:0
assign 0 to v210:0
assign rdi to v196:0
assign 7 to v196:0
assign r12 to v205:0
assign 12 to v205:0
assign r14 to v207:0
assign 14 to v207:0
assign r14 to v206:0
assign 14 to v206:0
assign rax to v198:0
assign 0 to v198:0
assign r12 to v199:0
assign 12 to v199:0
assign r14 to v204:0
assign 14 to v204:0
assign r14 to v202:0
assign 14 to v202:0
assign r15 to v201:1
assign 15 to v201:1
assign r8 to v197:1
assign 8 to v197:1
assign rsi to v200:1
assign 6 to v200:1
blocking v2 pick register rcx
blocking v10 pick register rcx
blocking v25 pick register rcx
assign rcx to v2:33
assign 1 to v2:33
assign r8 to v190:0
assign 8 to v190:0
assign r9 to v10:30
assign 9 to v10:30
assign r12 to v194:0
assign 12 to v194:0
assign r12 to v192:0
assign 12 to v192:0
assign r11 to v25:56
assign 11 to v25:56
assign rax to v187:0
assign 0 to v187:0
assign r14 to v193:0
assign 14 to v193:0
assign r12 to v191:0
assign 12 to v191:0
assign r12 to v189:0
assign 12 to v189:0
assign r8 to v188:1
assign 8 to v188:1
assign r8 to v174:0
assign 8 to v174:0
assign r12 to v186:0
assign 12 to v186:0
assign r12 to v185:0
assign 12 to v185:0
assign rax to v182:0
assign 0 to v182:0
assign r12 to v184:0
assign 12 to v184:0
assign r12 to v183:0
assign 12 to v183:0
assign r12 to v179:0
assign 12 to v179:0
assign rax to v181:0
assign 0 to v181:0
assign rdi to v167:0
assign 7 to v167:0
assign r12 to v176:0
assign 12 to v176:0
assign r14 to v178:0
assign 14 to v178:0
assign r14 to v177:0
assign 14 to v177:0
assign rax to v169:0
assign 0 to v169:0
assign r12 to v170:0
assign 12 to v170:0
assign r14 to v175:0
assign 14 to v175:0
assign r14 to v173:0
assign 14 to v173:0
assign r15 to v172:1
assign 15 to v172:1
assign r8 to v168:1
assign 8 to v168:1
assign rsi to v171:1
assign 6 to v171:1
blocking v2 pick register rcx
blocking v10 pick register rcx
blocking v25 pick register rcx
assign rcx to v2:35
assign 1 to v2:35
assign r8 to v161:0
assign 8 to v161:0
assign r9 to v10:32
assign 9 to v10:32
assign r12 to v165:0
assign 12 to v165:0
assign r12 to v163:0
assign 12 to v163:0
assign r11 to v25:58
assign 11 to v25:58
assign rax to v158:0
assign 0 to v158:0
assign r14 to v164:0
assign 14 to v164:0
assign r12 to v162:0
assign 12 to v162:0
assign r12 to v160:0
assign 12 to v160:0
assign r8 to v159:1
assign 8 to v159:1
assign r8 to v3:33
assign 8 to v3:33
assign r12 to v49:31
assign 12 to v49:31
assign r14 to v155:0
assign 14 to v155:0
assign r15 to v157:0
assign 15 to v157:0
assign r15 to v156:0
assign 15 to v156:0
assign r14 to v153:0
assign 14 to v153:0
assign r14 to v154:1
assign 14 to v154:1
assign r14 to v152:0
assign 14 to v152:0
assign r15 to v43:42
assign 15 to v43:42
assign rax to v149:0
assign 0 to v149:0
assign r14 to v151:0
assign 14 to v151:0
assign r14 to v150:0
assign 14 to v150:0
assign r14 to v139:0
assign 14 to v139:0
assign rax to v147:0
assign 0 to v147:0
assign rax to v146:0
assign 0 to v146:0
assign rdx to v143:0
assign 2 to v143:0
assign rax to v145:0
assign 0 to v145:0
assign rax to v144:0
assign 0 to v144:0
assign rax to v140:0
assign 0 to v140:0
assign rdx to v142:0
assign 2 to v142:0
assign rdi to v128:0
assign 7 to v128:0
assign rax to v136:0
assign 0 to v136:0
assign r14 to v138:0
assign 14 to v138:0
assign r14 to v137:0
assign 14 to v137:0
assign rdx to v130:0
assign 2 to v130:0
assign r14 to v131:0
assign 14 to v131:0
assign rax to v135:0
assign 0 to v135:0
assign rax to v134:0
assign 0 to v134:0
assign rbx to v133:1
assign 3 to v133:1
assign r14 to v129:1
assign 14 to v129:1
assign rsi to v132:1
assign 6 to v132:1
blocking v2 pick register rcx
blocking v3 pick register rcx
blocking v10 pick register rcx
blocking v25 pick register rcx
blocking v49 pick register rcx
blocking v43 pick register rcx
assign rcx to v2:37
assign 1 to v2:37
assign r8 to v122:0
assign 8 to v122:0
assign r9 to v10:34
assign 9 to v10:34
assign r12 to v126:0
assign 12 to v126:0
assign r12 to v124:0
assign 12 to v124:0
assign r11 to v25:60
assign 11 to v25:60
assign rax to v119:0
assign 0 to v119:0
assign r14 to v125:0
assign 14 to v125:0
assign r12 to v123:0
assign 12 to v123:0
assign r12 to v121:0
assign 12 to v121:0
assign r8 to v120:1
assign 8 to v120:1
assign r15 to v43:48
assign 15 to v43:48
assign r12 to v49:37
assign 12 to v49:37
assign r8 to v3:39
assign 8 to v3:39
assign r8 to v106:0
assign 8 to v106:0
assign r12 to v118:0
assign 12 to v118:0
assign r12 to v117:0
assign 12 to v117:0
assign rax to v114:0
assign 0 to v114:0
assign r12 to v116:0
assign 12 to v116:0
assign r12 to v115:0
assign 12 to v115:0
assign r12 to v111:0
assign 12 to v111:0
assign rax to v113:0
assign 0 to v113:0
assign rdi to v99:0
assign 7 to v99:0
assign r12 to v108:0
assign 12 to v108:0
assign r14 to v110:0
assign 14 to v110:0
assign r14 to v109:0
assign 14 to v109:0
assign rax to v101:0
assign 0 to v101:0
assign r12 to v102:0
assign 12 to v102:0
assign r14 to v107:0
assign 14 to v107:0
assign r14 to v105:0
assign 14 to v105:0
assign r15 to v104:1
assign 15 to v104:1
assign r8 to v100:1
assign 8 to v100:1
assign rsi to v103:1
assign 6 to v103:1
blocking v2 pick register rcx
blocking v10 pick register rcx
blocking v25 pick register rcx
assign rcx to v2:39
assign 1 to v2:39
assign r8 to v93:0
assign 8 to v93:0
assign r9 to v10:36
assign 9 to v10:36
assign r12 to v97:0
assign 12 to v97:0
assign r12 to v95:0
assign 12 to v95:0
assign r11 to v25:62
assign 11 to v25:62
assign rax to v90:0
assign 0 to v90:0
assign r14 to v96:0
assign 14 to v96:0
assign r12 to v94:0
assign 12 to v94:0
assign r12 to v92:0
assign 12 to v92:0
assign r8 to v91:1
assign 8 to v91:1
assign r8 to v77:0
assign 8 to v77:0
assign r12 to v89:0
assign 12 to v89:0
assign r12 to v88:0
assign 12 to v88:0
assign rax to v85:0
assign 0 to v85:0
assign r12 to v87:0
assign 12 to v87:0
assign r12 to v86:0
assign 12 to v86:0
assign r12 to v82:0
assign 12 to v82:0
assign rax to v84:0
assign 0 to v84:0
assign rdi to v69:0
assign 7 to v69:0
assign r12 to v79:0
assign 12 to v79:0
assign r14 to v81:0
assign 14 to v81:0
assign r14 to v80:0
assign 14 to v80:0
assign rax to v72:0
assign 0 to v72:0
assign r12 to v73:0
assign 12 to v73:0
assign r14 to v78:0
assign 14 to v78:0
assign r14 to v76:0
assign 14 to v76:0
assign r15 to v75:1
assign 15 to v75:1
assign r8 to v71:1
assign 8 to v71:1
assign rsi to v74:1
assign 6 to v74:1
blocking v2 pick register rcx
blocking v10 pick register rcx
blocking v25 pick register rcx
assign r8 to v2:41
assign 8 to v2:41
assign rcx to v63:0
assign 1 to v63:0
assign r9 to v10:38
assign 9 to v10:38
assign r12 to v67:0
assign 12 to v67:0
assign r12 to v65:0
assign 12 to v65:0
assign r11 to v25:64
assign 11 to v25:64
assign rax to v60:0
assign 0 to v60:0
assign r14 to v66:0
assign 14 to v66:0
assign r12 to v64:0
assign 12 to v64:0
assign r12 to v62:0
assign 12 to v62:0
assign rcx to v61:1
assign 1 to v61:1
assign rcx to v2:42
assign 1 to v2:42
assign r8 to v2:44
assign 8 to v2:44
assign rcx to v51:0
assign 1 to v51:0
assign r12 to v59:0
assign 12 to v59:0
assign r12 to v58:0
assign 12 to v58:0
assign rax to v55:0
assign 0 to v55:0
assign r12 to v57:0
assign 12 to v57:0
assign r12 to v56:0
assign 12 to v56:0
assign r12 to v52:0
assign 12 to v52:0
assign rax to v54:0
assign 0 to v54:0
assign r9 to v50:0
assign 9 to v50:0
assign r12 to v3:38
assign 12 to v3:38
assign rcx to v49:36
assign 1 to v49:36
assign rcx to v46:0
assign 1 to v46:0
assign r14 to v48:0
assign 14 to v48:0
assign r14 to v47:0
assign 14 to v47:0
assign rcx to v44:0
assign 1 to v44:0
assign rcx to v45:1
assign 1 to v45:1
assign rcx to v42:0
assign 1 to v42:0
assign r14 to v43:47
assign 14 to v43:47
assign r14 to v39:0
assign 14 to v39:0
assign rcx to v41:0
assign 1 to v41:0
assign rcx to v40:0
assign 1 to v40:0
assign rcx to v22:0
assign 1 to v22:0
assign r12 to v28:25
assign 12 to v28:25
assign r14 to v30:0
assign 14 to v30:0
assign r15 to v35:0
assign 15 to v35:0
assign rax to v36:32
assign 0 to v36:32
assign rdx to v34:1
assign 2 to v34:1
blocking v22 pick register rcx
blocking v10 pick register r9
blocking v25 pick register r11
blocking v28 pick register r12
blocking v2 pick register rcx
assign rax to v33:0
assign 0 to v33:0
assign r14 to v31:0
assign 14 to v31:0
assign r12 to v28:28
assign 12 to v28:28
assign rcx to v22:3
assign 1 to v22:3
assign r11 to v25:67
assign 11 to v25:67
assign r9 to v10:41
assign 9 to v10:41
assign r8 to v2:46
assign 8 to v2:46
assign r14 to v27:0
assign 14 to v27:0
assign r15 to v29:0
assign 15 to v29:0
assign r12 to v28:27
assign 12 to v28:27
assign r12 to v26:0
assign 12 to v26:0
assign r12 to v19:0
assign 12 to v19:0
assign r11 to v25:66
assign 11 to v25:66
assign r11 to v24:8
assign 11 to v24:8
assign rax to v23:1
assign 0 to v23:1
assign rcx to v22:2
assign 1 to v22:2
assign r9 to v10:40
assign 9 to v10:40
assign rcx to v18:0
assign 1 to v18:0
assign r11 to v20:0
assign 11 to v20:0
assign r14 to v21:0
assign 14 to v21:0
assign r8 to v2:45
assign 8 to v2:45
assign rcx to v13:0
assign 1 to v13:0
assign r12 to v17:1
assign 12 to v17:1
assign r8 to v14:0
assign 8 to v14:0
assign r11 to v15:0
assign 11 to v15:0
assign r12 to v16:0
assign 12 to v16:0
assign rcx to v12:0
assign 1 to v12:0
assign rax to v11:1
assign 0 to v11:1
assign rcx to v9:0
assign 1 to v9:0
assign rcx to v8:0
assign 1 to v8:0
assign rcx to v7:0
assign 1 to v7:0
assign rax to v6:4
assign 0 to v6:4
assign rcx to v5:0
assign 1 to v5:0
assign rcx to v4:0
assign 1 to v4:0
spill count : 223
add v867->v862
add v863->v865
add v857->v861
add v860->v861
add v859->v855
add v839->v855
add v839->v855
add v839->v855
add v839->v855
add v858->v857
add v856->v857
add v49->v3
add v24->v3
add v855->v3
add v6->v2
add v10->v6
add v854->v6
add v851->v6
add v10->v6
add v850->v6
add v759->v2
add v760->v2
add v848->v6
add v847->v848
add v25->v847
add v843->v847
add v846->v847
adding pairs 2, v705:0x7fffd017aff8, v843:0x7fffd013c378
add v842->v759
add v841->v759
add v762->v759
add v837->v839
add v835->v830
add v831->v833
add v824->v829
add v828->v829
add v827->v803
add v826->v803
add v826->v803
add v826->v803
add v826->v803
add v825->v824
add v823->v824
add v43->v740
add v24->v740
add v803->v740
add v25->v760
add v820->v760
add v822->v760
add v819->v820
add v43->v819
add v815->v819
add v818->v819
add v812->v815
add v43->v761
add v811->v761
add v817->v761
add v813->v815
add v810->v815
add v805->v803
add v798->v760
add v800->v760
adding pairs 2, v781:0x7fffd017acb0, v798:0x7fffd015c4e8
add v43->v797
add v793->v797
add v796->v797
add v776->v793
add v791->v761
add v795->v761
add v775->v791
add v778->v793
add v777->v791
add v774->v793
add v773->v791
add v783->v740
add v789->v740
add v790->v783
add v788->v782
add v763->v781
add v780->v740
adding pairs 3, v781:0x7fffd004e958, v765:0x7fffd017ab98
add v49->v3
add v751->v3
add v747->v3
add v757->v751
add v756->v755
add v750->v748
add v745->v705
add v744->v3
add v736->v705
add v49->v3
add v725->v3
add v734->v3
add v732->v725
add v43->v731
add v728->v731
add v730->v731
add v727->v728
add v723->v725
add v43->v722
add v719->v722
add v721->v722
add v718->v719
add v717->v6
add v716->v717
add v25->v716
add v713->v716
add v715->v716
add v710->v713
add v712->v710
add v711->v710
add v698->v2
add v707->v6
add v709->v6
add v700->v707
add v701->v707
add v706->v698
add v704->v698
add v694->v2
add v10->v694
add v696->v694
add v691->v696
add v25->v691
add v689->v691
add v695->v691
add v692->v689
add v688->v687
add v674->v2
add v10->v674
add v686->v674
add v685->v686
add v25->v685
add v682->v685
add v684->v685
add v679->v682
add v681->v679
add v680->v679
add v667->v2
add v676->v674
add v678->v674
add v669->v676
add v670->v676
add v675->v667
add v673->v667
add v661->v2
add v10->v661
add v665->v661
add v663->v665
add v25->v663
add v658->v663
add v664->v658
add v662->v663
add v659->v658
add v645->v2
add v10->v645
add v657->v645
add v656->v657
add v25->v656
add v653->v656
add v655->v656
add v650->v653
add v652->v650
add v651->v650
add v638->v2
add v647->v645
add v649->v645
add v640->v647
add v641->v647
add v646->v638
add v644->v638
add v632->v2
add v10->v632
add v636->v632
add v634->v636
add v25->v634
add v629->v634
add v635->v629
add v633->v634
add v630->v629
add v616->v2
add v10->v616
add v628->v616
add v627->v628
add v25->v627
add v624->v627
add v626->v627
add v621->v624
add v623->v621
add v622->v621
add v609->v2
add v618->v616
add v620->v616
add v611->v618
add v612->v618
add v617->v609
add v615->v609
add v603->v2
add v10->v603
add v607->v603
add v605->v607
add v25->v605
add v600->v605
add v606->v600
add v604->v605
add v601->v600
add v49->v3
add v597->v3
add v599->v3
add v595->v597
add v43->v594
add v591->v594
add v593->v594
add v590->v591
add v581->v2
add v10->v581
add v589->v581
add v588->v589
add v25->v588
add v585->v588
add v587->v588
add v582->v585
add v584->v582
add v583->v582
add v570->v2
add v578->v581
add v580->v581
add v572->v578
add v573->v578
add v577->v570
add v576->v570
add v566->v2
add v10->v566
add v568->v566
add v562->v568
add v25->v562
add v560->v562
add v567->v562
add v564->v560
add v559->v558
add v415->v2
add v10->v415
add v557->v415
add v556->v557
add v25->v556
add v423->v556
add v555->v556
add v552->v423
add v554->v552
add v553->v552
add v449->v2
add v549->v415
add v551->v415
add v450->v549
add v451->v549
add v548->v449
add v547->v449
add v452->v449
add v543->v450
add v541->v450
add v43->v541
add v531->v541
add v540->v541
add v491->v531
add v536->v451
add v534->v451
add v43->v534
add v529->v534
add v533->v534
add v525->v529
add v489->v531
add v528->v529
add v516->v515
add v514->v515
add v501->v514
add v513->v452
add v10->v513
add v427->v513
add v511->v427
add v512->v511
add v509->v511
add v443->v438
add v439->v441
add v437->v436
add v435->v436
add v434->v432
add v433->v432
add v428->v427
add v426->v423
add v425->v423
add v420->v423
add v422->v420
add v421->v420
add v408->v2
add v417->v415
add v419->v415
add v410->v417
add v411->v417
add v416->v408
add v414->v408
add v402->v2
add v10->v402
add v406->v402
add v404->v406
add v25->v404
add v399->v404
add v405->v399
add v403->v404
add v400->v399
add v262->v2
add v10->v262
add v398->v262
add v397->v398
add v25->v397
add v259->v397
add v396->v397
add v392->v259
add v394->v392
add v393->v392
add v285->v2
add v389->v262
add v391->v262
add v286->v389
add v287->v389
add v388->v285
add v387->v285
add v288->v285
add v383->v286
add v381->v286
add v43->v381
add v371->v381
add v380->v381
add v329->v371
add v376->v287
add v374->v287
add v43->v374
add v369->v374
add v373->v374
add v363->v369
add v327->v371
add v366->v369
add v354->v353
add v352->v353
add v339->v352
add v351->v288
add v10->v351
add v263->v351
add v349->v263
add v350->v349
add v347->v349
add v279->v274
add v275->v277
add v273->v272
add v271->v272
add v270->v268
add v269->v268
add v264->v263
add v261->v259
add v260->v259
add v49->v3
add v256->v3
add v258->v3
add v254->v256
add v43->v253
add v250->v253
add v252->v253
add v249->v250
add v236->v2
add v10->v236
add v248->v236
add v247->v248
add v25->v247
add v240->v247
add v246->v247
add v243->v240
add v245->v243
add v244->v243
add v242->v2
add v237->v240
add v239->v237
add v238->v237
add v225->v2
add v233->v236
add v235->v236
add v227->v233
add v228->v233
add v232->v225
add v231->v225
add v219->v2
add v10->v219
add v223->v219
add v221->v223
add v25->v221
add v216->v221
add v222->v216
add v220->v221
add v217->v216
add v203->v2
add v10->v203
add v215->v203
add v214->v215
add v25->v214
add v211->v214
add v213->v214
add v208->v211
add v210->v208
add v209->v208
add v196->v2
add v205->v203
add v207->v203
add v198->v205
add v199->v205
add v204->v196
add v202->v196
add v190->v2
add v10->v190
add v194->v190
add v192->v194
add v25->v192
add v187->v192
add v193->v187
add v191->v192
add v188->v187
add v174->v2
add v10->v174
add v186->v174
add v185->v186
add v25->v185
add v182->v185
add v184->v185
add v179->v182
add v181->v179
add v180->v179
add v167->v2
add v176->v174
add v178->v174
add v169->v176
add v170->v176
add v175->v167
add v173->v167
add v161->v2
add v10->v161
add v165->v161
add v163->v165
add v25->v163
add v158->v163
add v164->v158
add v162->v163
add v159->v158
add v49->v3
add v155->v3
add v157->v3
add v153->v155
add v43->v152
add v149->v152
add v151->v152
add v148->v149
add v139->v2
add v10->v139
add v147->v139
add v146->v147
add v25->v146
add v143->v146
add v145->v146
add v140->v143
add v142->v140
add v141->v140
add v128->v2
add v136->v139
add v138->v139
add v130->v136
add v131->v136
add v135->v128
add v134->v128
add v122->v2
add v10->v122
add v126->v122
add v124->v126
add v25->v124
add v119->v124
add v125->v119
add v123->v124
add v120->v119
add v106->v2
add v10->v106
add v118->v106
add v117->v118
add v25->v117
add v114->v117
add v116->v117
add v111->v114
add v113->v111
add v112->v111
add v99->v2
add v108->v106
add v110->v106
add v101->v108
add v102->v108
add v107->v99
add v105->v99
add v93->v2
add v10->v93
add v97->v93
add v95->v97
add v25->v95
add v90->v95
add v96->v90
add v94->v95
add v91->v90
add v77->v2
add v10->v77
add v89->v77
add v88->v89
add v25->v88
add v85->v88
add v87->v88
add v82->v85
add v84->v82
add v83->v82
add v69->v2
add v79->v77
add v81->v77
add v72->v79
add v73->v79
add v78->v69
add v76->v69
add v63->v2
add v10->v63
add v67->v63
add v65->v67
add v25->v65
add v60->v65
add v66->v60
add v64->v65
add v61->v60
add v51->v2
add v10->v51
add v59->v51
add v58->v59
add v25->v58
add v55->v58
add v57->v58
add v52->v55
add v54->v52
add v53->v52
add v50->v2
add v49->v3
add v46->v3
add v48->v3
add v44->v46
add v43->v42
add v39->v42
add v41->v42
add v38->v39
add v22->v2
add v35->v30
add v31->v33
add v29->v27
add v26->v27
add v25->v19
add v24->v19
add v23->v19
add v10->v22
add v18->v22
add v19->v18
add v13->v2
add v10->v13
add v17->v13
add v14->v13
add v10->v13
add v12->v13
add v9->v2
add v10->v9
add v8->v9
add v7->v8
add v5->v6
add v4->v5
gap () () 
          [rsi|R|t] = ArchNop
gap (v2(-) = [rsi|R|t];) () 
          [stack:-1|t] = ArchNop
gap (v1(-) = [stack:-1|t];) () 
          [rdi|R|t] = ArchNop
gap (v0(-) = [rdi|R|t];) () 
          [constant:367] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1649] [immediate:1650]
gap () () 
          [constant:871] = ArchNop
gap () () 
          [constant:870] = ArchNop
gap () () 
          v869(R) = ArchStackCheckOffset
gap () () 
          X64Push v869(-)
gap () ([rbx|R|w64] = v870(-); [rax|R|w64] = v367(-); [rsi|R|t] = v871(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1648] #-1 #343 v0(S) v1(S) v2(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1647]
gap () () 
          ArchJmp [immediate:1646]
gap () () 
          [constant:28] = ArchNop
gap () () 
          [constant:36] = ArchNop
gap () () 
          [constant:866] = ArchNop
gap () () 
          v862(R) = X64Movq : MR v28(R)
gap () () 
          v867(R) = X64Lea : MRI v862(R) [immediate:1645]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v867(R) [immediate:1643] [immediate:1644]
gap () () 
          ArchJmp [immediate:1642]
gap () ([rdx|R|w64] = v866(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1641] #-1 [rdx|R|w64]
gap (v865(-) = [rax|R|tp];) () 
          v863(R) = X64Lea : MRI v865(R) [immediate:1640]
gap () (v861 = v863(-);) 
          ArchJmp [immediate:1639]
gap () (v861 = v862(-);) 
          ArchJmp [immediate:1638]
gap () () 
          v857(R) = X64Lea : MRI v861(R) [immediate:1637]
gap () () 
          X64Movq : MR v28(R) v857(R)
gap () () 
          v860(R) = X64Lea : MRI v861(R) [immediate:1636]
gap () (v855 = v860(-);) 
          v855(1) = ArchNop v855
gap () () 
          [constant:859] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v855(R) [immediate:1635] v859(R)
gap () () 
          X64MovqCompressTagged : MRI v855(R) [immediate:1633] [immediate:1634]
gap () () 
          [constant:839] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v855(R) [immediate:1632] v839(R)
gap () () 
          X64MovqCompressTagged : MRI v855(R) [immediate:1631] v839(R)
gap () () 
          X64MovqCompressTagged : MRI v855(R) [immediate:1630] v839(R)
gap () () 
          [constant:34] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v855(R) [immediate:1629] v839(R)
gap () () 
          v858(R) = X64Lea : MRI v857(R) [immediate:1628]
gap () () 
          X64Movq : MR v28(R) v858(R)
gap () () 
          v856(R) = X64Lea : MRI v857(R) [immediate:1627]
gap () (v3 = v856(-);) 
          v3(1) = ArchNop v3
gap () () 
          [constant:49] = ArchNop
gap () () 
          [constant:300] = ArchNop
gap () () 
          [constant:24] = ArchNop
gap () () 
          [constant:10] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1626] v49(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1625] v24(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1624] v855(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1622] [immediate:1623]
gap () () 
          v6(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1621]
gap () () 
          X64Test32 && deoptimize if equal v6 #1 #342 v0(S) v1(-) v2(S) v3(-) [immediate:1619] v6(-) [immediate:1620]
gap () () 
          X64Cmp32 : MRI && branch if equal v6(R) [immediate:1616] v10(R) [immediate:1617] [immediate:1618]
gap () () 
          [constant:854] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v6(R) [immediate:1613] v854(R) #341 v0(S) v1(-) v2(S) v3(-) [immediate:1614] v6(-) [immediate:1615]
gap () () 
          v851(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1612]
gap () () 
          ArchStoreWithWriteBarrier : MRI v6(R) [immediate:1611] v10(R)
gap () () 
          X64MovqCompressTagged : MRI v851(R) [immediate:1609] [immediate:1610]
gap () () 
          ArchJmp [immediate:1608]
gap () () 
          v850(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1607]
gap () () 
          X64MovqCompressTagged : MRI v850(R) [immediate:1605] [immediate:1606]
gap () () 
          ArchJmp [immediate:1604]
gap () () 
          [constant:849] = ArchNop
gap () () 
          [constant:43] = ArchNop
gap () () 
          [constant:70] = ArchNop
gap () () 
          [constant:25] = ArchNop
gap () () 
          [constant:563] = ArchNop
gap () () 
          [constant:299] = ArchNop
gap () () 
          [constant:368] = ArchNop
gap () (v705 = v849(-);) 
          ArchJmp [immediate:1603]
gap () () 
          X64Cmp32 && branch if signed greater than v705 #-1 [immediate:1601] [immediate:1602]
gap () () 
          v759(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1600]
gap () () 
          v760(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1599]
gap () () 
          v848(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1598]
gap () () 
          v847(R) = X64MovqDecompressAnyTagged : MRI v848(R) [immediate:1597]
gap () () 
          X64Test32 && deoptimize if equal v847 #1 #340 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1596]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v847(R) [immediate:1594] v25(R) #339 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1595]
gap () () 
          v843(R) = X64MovqDecompressTaggedPointer : MRI v847(R) [immediate:1593]
gap () () 
          v846(R) = X64MovqDecompressTaggedSigned : MRI v847(R) [immediate:1592]
gap () (v845(R) = v846(-);) 
          v845(1) = X64Sar32 v845(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v705(R) v845 #338 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1591]
gap () () 
          v739(R) = X64Lea : M4I v705(R) [immediate:1590]
gap () () 
          v761(R) = X64MovqDecompressAnyTagged : MR4I v843(R) v705(R) [immediate:1589]
gap () () 
          X64Test32 && deoptimize if equal v759 #1 #337 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1588]
gap () () 
          v842(R) = X64MovqDecompressTaggedPointer : MRI v759(R) [immediate:1587]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v842(R) [immediate:1585] #1068 #336 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1586]
gap () () 
          [constant:840] = ArchNop
gap () () 
          v841(R) = X64MovqDecompressTaggedPointer : MRI v759(R) [immediate:1584]
gap () () 
          X64Cmp && deoptimize if not equal v840(R) v841 #335 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1583]
gap () () 
          v762(R) = X64Movl : MRI v759(R) [immediate:1582]
gap () () 
          X64Test32 && branch if equal v839 #1 [immediate:1580] [immediate:1581]
gap () () 
          v837(R) = X64Movsd : MRI v839(R) [immediate:1579]
gap () (v826 = v837(-);) 
          ArchJmp [immediate:1578]
gap () (v838(R) = v839(-);) 
          v838(1) = X64Sar32 v838(R) #1
gap () () 
          v836(R) = SSEInt32ToFloat64 v838
gap () (v826 = v836(-);) 
          ArchJmp [immediate:1577]
gap () () 
          v830(R) = X64Movq : MR v28(R)
gap () () 
          [constant:834] = ArchNop
gap () () 
          v835(R) = X64Lea : MRI v830(R) [immediate:1576]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v835(R) [immediate:1574] [immediate:1575]
gap () () 
          ArchJmp [immediate:1573]
gap () ([rdx|R|w64] = v834(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1572] #-1 [rdx|R|w64]
gap (v833(-) = [rax|R|tp];) () 
          v831(R) = X64Lea : MRI v833(R) [immediate:1571]
gap () (v829 = v831(-);) 
          ArchJmp [immediate:1570]
gap () (v829 = v830(-);) 
          ArchJmp [immediate:1569]
gap () () 
          v824(R) = X64Lea : MRI v829(R) [immediate:1568]
gap () () 
          X64Movq : MR v28(R) v824(R)
gap () () 
          v828(R) = X64Lea : MRI v829(R) [immediate:1567]
gap () (v803 = v828(-);) 
          v803(1) = ArchNop v803
gap () () 
          [constant:827] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v803(R) [immediate:1566] v827(R)
gap () () 
          X64MovqCompressTagged : MRI v803(R) [immediate:1564] [immediate:1565]
gap () () 
          X64Movsd : MRI v803(R) [immediate:1563] v826(R)
gap () () 
          X64Movsd : MRI v803(R) [immediate:1562] v826(R)
gap () () 
          X64Movsd : MRI v803(R) [immediate:1561] v826(R)
gap () () 
          X64Movsd : MRI v803(R) [immediate:1560] v826(R)
gap () () 
          v825(R) = X64Lea : MRI v824(R) [immediate:1559]
gap () () 
          X64Movq : MR v28(R) v825(R)
gap () () 
          v823(R) = X64Lea : MRI v824(R) [immediate:1558]
gap () (v740 = v823(-);) 
          v740(1) = ArchNop v740
gap () () 
          X64MovqCompressTagged : MRI v740(R) [immediate:1557] v43(R)
gap () () 
          X64MovqCompressTagged : MRI v740(R) [immediate:1556] v24(R)
gap () () 
          X64MovqCompressTagged : MRI v740(R) [immediate:1555] v803(R)
gap () () 
          X64MovqCompressTagged : MRI v740(R) [immediate:1553] [immediate:1554]
gap () () 
          X64Test32 && deoptimize if equal v760 #1 #334 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1550] v760(-) v761(-) v762(S) v740(-) [immediate:1551] [immediate:1552]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v760(R) [immediate:1546] v25(R) #333 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1547] v760(-) v761(-) v762(S) v740(-) [immediate:1548] [immediate:1549]
gap () () 
          v820(R) = X64MovqDecompressTaggedPointer : MRI v760(R) [immediate:1545]
gap () () 
          v822(R) = X64MovqDecompressTaggedSigned : MRI v760(R) [immediate:1544]
gap () (v821(R) = v822(-);) 
          v821(1) = X64Sar32 v821(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v821 #0 #332 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1541] v760(-) v761(-) v762(S) v740(-) [immediate:1542] [immediate:1543]
gap () () 
          v819(R) = X64MovqDecompressAnyTagged : MRI v820(R) [immediate:1540]
gap () () 
          X64Test32 && deoptimize if equal v819 #1 #331 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1537] v760(-) v761(-) v762(S) v740(-) [immediate:1538] [immediate:1539]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v819(R) [immediate:1533] v43(R) #330 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1534] v760(-) v761(-) v762(S) v740(-) [immediate:1535] [immediate:1536]
gap () () 
          v815(R) = X64MovqDecompressTaggedPointer : MRI v819(R) [immediate:1532]
gap () () 
          v818(R) = X64MovqDecompressTaggedSigned : MRI v819(R) [immediate:1531]
gap () (v816(R) = v818(-);) 
          v816(1) = X64Sar32 v816(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v816 #0 #329 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1528] v760(-) v761(-) v762(S) v740(-) [immediate:1529] [immediate:1530]
gap () () 
          v812(R) = X64Movsd : MRI v815(R) [immediate:1527]
gap () () 
          X64Test32 && deoptimize if equal v761 #1 #328 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1524] v760(-) v761(-) v762(S) v740(-) [immediate:1525] [immediate:1526]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v761(R) [immediate:1520] v43(R) #327 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1521] v760(-) v761(-) v762(S) v740(-) [immediate:1522] [immediate:1523]
gap () () 
          v811(R) = X64MovqDecompressTaggedPointer : MRI v761(R) [immediate:1519]
gap () () 
          v817(R) = X64MovqDecompressTaggedSigned : MRI v761(R) [immediate:1518]
gap () (v814(R) = v817(-);) 
          v814(1) = X64Sar32 v814(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v814 #0 #326 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1515] v760(-) v761(-) v762(S) v740(-) [immediate:1516] [immediate:1517]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v816 #1 #325 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1512] v760(-) v761(-) v762(S) v740(-) [immediate:1513] [immediate:1514]
gap () () 
          v813(R) = X64Movsd : MRI v815(R) [immediate:1511]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v814 #1 #324 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1508] v760(-) v761(-) v762(S) v740(-) [immediate:1509] [immediate:1510]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v816 #2 #323 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1505] v760(-) v761(-) v762(S) v740(-) [immediate:1506] [immediate:1507]
gap () () 
          v810(R) = X64Movsd : MRI v815(R) [immediate:1504]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v814 #2 #322 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1501] v760(-) v761(-) v762(S) v740(-) [immediate:1502] [immediate:1503]
gap () () 
          v808(R) = AVXFloat64Mul : MRI v813(R) v811(R) [immediate:1500]
gap () () 
          v809(R) = AVXFloat64Mul : MRI v812(R) v811(R) [immediate:1499]
gap () () 
          v806(R) = AVXFloat64Mul : MRI v810(R) v811(R) [immediate:1498]
gap () () 
          v807(R) = AVXFloat64Add v808(R) v809
gap () () 
          v805(R) = AVXFloat64Add v806(R) v807
gap () () 
          X64MovqCompressTagged : MRI v740(R) [immediate:1496] [immediate:1497]
gap () () 
          X64Movsd : MRI v803(R) [immediate:1495] v805(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1493] [immediate:1494]
gap () () 
          [constant:802] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v802(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1491] #-1 #321 v0(S) v1(S) v2(S) v3(S) v705(S) v759(S) [immediate:1492] v760(S) v761(S) v762(S) v740(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1490]
gap () () 
          ArchJmp [immediate:1489]
gap () (v781 = v367(-);) 
          ArchJmp [immediate:1488]
gap () () 
          X64Cmp32 && branch if unsigned less than v781 #3 [immediate:1486] [immediate:1487]
gap () () 
          v798(R) = X64MovqDecompressTaggedPointer : MRI v760(R) [immediate:1485]
gap () () 
          v800(R) = X64MovqDecompressTaggedSigned : MRI v760(R) [immediate:1484]
gap () (v799(R) = v800(-);) 
          v799(1) = X64Sar32 v799(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v781(R) v799 #320 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1482] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1483]
gap () () 
          v797(R) = X64MovqDecompressAnyTagged : MR4I v798(R) v781(R) [immediate:1481]
gap () () 
          X64Test32 && deoptimize if equal v797 #1 #319 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1479] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1480]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v797(R) [immediate:1476] v43(R) #318 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1477] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1478]
gap () () 
          v793(R) = X64MovqDecompressTaggedPointer : MRI v797(R) [immediate:1475]
gap () () 
          v796(R) = X64MovqDecompressTaggedSigned : MRI v797(R) [immediate:1474]
gap () (v794(R) = v796(-);) 
          v794(1) = X64Sar32 v794(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v794 #0 #317 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1472] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1473]
gap () () 
          v776(R) = X64Movsd : MRI v793(R) [immediate:1471]
gap () () 
          v791(R) = X64MovqDecompressTaggedPointer : MRI v761(R) [immediate:1470]
gap () () 
          v795(R) = X64MovqDecompressTaggedSigned : MRI v761(R) [immediate:1469]
gap () (v792(R) = v795(-);) 
          v792(1) = X64Sar32 v792(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v792 #0 #316 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1467] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1468]
gap () () 
          v775(R) = X64Movsd : MRI v791(R) [immediate:1466]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v794 #1 #315 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1464] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1465]
gap () () 
          v778(R) = X64Movsd : MRI v793(R) [immediate:1463]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v792 #1 #314 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1461] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1462]
gap () () 
          v777(R) = X64Movsd : MRI v791(R) [immediate:1460]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v794 #2 #313 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1458] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1459]
gap () () 
          v774(R) = X64Movsd : MRI v793(R) [immediate:1457]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v792 #2 #312 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1455] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1456]
gap () () 
          v773(R) = X64Movsd : MRI v791(R) [immediate:1454]
gap () () 
          v783(R) = X64MovqDecompressTaggedPointer : MRI v740(R) [immediate:1453]
gap () () 
          v789(R) = X64MovqDecompressTaggedSigned : MRI v740(R) [immediate:1452]
gap () () 
          v790(R) = X64MovqDecompressTaggedSigned : MRI v783(R) [immediate:1451]
gap () (v787(R) = v790(-);) 
          v787(1) = X64Sar32 v787(R) #1
gap () (v782(R) = v789(-);) 
          v782(1) = X64Sar32 v782(R) #1
gap () () 
          v788(R) = X64Lea32 : MRI v782(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v781(R) v788 #311 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1449] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1450]
gap () () 
          X64Cmp32 && branch if unsigned less than v781(R) v787 [immediate:1447] [immediate:1448]
gap () () 
          v786(R) = X64Lea32 : MR1 v781(R) v781(R)
gap () ([rax|R|t] = v740(-); [rbx|R|w32] = v786(-); [rsi|R|w64] = v563(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1446] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v784(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v784 #1 #310 v0(S) v1(-) v2(S) v3(-) v705(-) v759(S) [immediate:1444] v760(-) v761(-) v762(S) v740(-) v781(-) [immediate:1445]
gap () (v765 = v784(-);) 
          ArchJmp [immediate:1443]
gap () (v765 = v783(-);) 
          ArchJmp [immediate:1442]
gap () () 
          v763(R) = X64Lea32 : MRI v781(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v781(R) v782 [immediate:1440] [immediate:1441]
gap () () 
          v780(R) = X64Lea32 : MR1 v763(R) v763(R)
gap () () 
          X64MovqCompressTagged : MRI v740(R) [immediate:1439] v780(R)
gap () () 
          ArchJmp [immediate:1438]
gap () () 
          ArchJmp [immediate:1437]
gap () () 
          v771(R) = AVXFloat64Mul v777(R) v778
gap () () 
          v772(R) = AVXFloat64Mul v775(R) v776
gap () () 
          v769(R) = AVXFloat64Mul v773(R) v774
gap () () 
          v770(R) = AVXFloat64Add v771(R) v772
gap () () 
          v768(R) = AVXFloat64Add v769(R) v770
gap () () 
          X64Movsd : MR8I v765(R) v781(R) [immediate:1436] v768(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1434] [immediate:1435]
gap () () 
          [constant:764] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v764(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1432] #-1 #309 v0(S) v1(S) v2(S) v3(S) v705(S) v759(S) [immediate:1433] v760(S) v761(S) v762(S) v740(S) v763(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1431]
gap () () 
          ArchJmp [immediate:1430]
gap () (v781 = v763(-);) 
          ArchJmp [immediate:1429]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:1428] v49(R) #308 v0(S) v1(-) v2(S) v3(-) v705(-) v740(-)
gap () () 
          v751(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:1427]
gap () () 
          v747(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:1426]
gap () () 
          v757(R) = X64MovqDecompressTaggedSigned : MRI v751(R) [immediate:1425]
gap () (v755(R) = v757(-);) 
          v755(1) = X64Sar32 v755(R) #1
gap () () 
          v756(R) = X64Lea32 : MRI v755(R) #1024
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v705(R) v756 #307 v0(S) v1(-) v2(S) v3(-) v705(-) v740(-)
gap () () 
          X64Cmp32 && branch if unsigned less than v705(R) v755 [immediate:1423] [immediate:1424]
gap () () 
          v754(R) = X64Lea32 : MR1 v705(R) v705(R)
gap () ([rax|R|t] = v3(-); [rbx|R|w32] = v754(-); [rsi|R|w64] = v563(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1422] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v752(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v752 #1 #306 v0(S) v1(-) v2(S) v3(-) v705(-) v740(-)
gap () (v748 = v752(-);) 
          ArchJmp [immediate:1421]
gap () (v748 = v751(-);) 
          ArchJmp [immediate:1420]
gap () () 
          v750(R) = X64Movl : MRI v748(R) [immediate:1419]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v750(R) [immediate:1417] [immediate:1418]
gap () ([rax|R|t] = v3(-); [rsi|R|w64] = v563(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1416] #-1 [rax|R|t] [rsi|R|w64]
gap (v749(-) = [rax|R|t];) (v738 = v749(-);) 
          ArchJmp [immediate:1415]
gap () (v738 = v748(-);) 
          ArchJmp [immediate:1414]
gap () (v746(R) = v747(-);) 
          v746(1) = X64Sar32 v746(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v705(R) v746 [immediate:1412] [immediate:1413]
gap () () 
          v745(R) = X64Lea32 : MRI v705(R) #1
gap () () 
          v744(R) = X64Lea32 : MR1 v745(R) v745(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1411] v744(R)
gap () () 
          ArchJmp [immediate:1410]
gap () () 
          ArchJmp [immediate:1409]
gap () () 
          ArchStoreWithWriteBarrier : MR1 v738(R) v739(R) v740(R)
gap () () 
          v736(R) = X64Lea32 : MRI v705(R) #-1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1407] [immediate:1408]
gap () () 
          [constant:737] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v737(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1406] #-1 #305 v0(S) v1(S) v2(S) v3(S) v736(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1405]
gap () () 
          ArchJmp [immediate:1404]
gap () (v705 = v736(-);) 
          ArchJmp [immediate:1403]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:1401] v49(R) #304 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1402]
gap () () 
          v725(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:1400]
gap () () 
          v734(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:1399]
gap () (v726(R) = v734(-);) 
          v726(1) = X64Sar32 v726(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v726 #0 #303 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1398]
gap () () 
          v732(R) = X64MovqDecompressAnyTagged : MRI v725(R) [immediate:1397]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v732(R) [immediate:1395] [immediate:1396]
gap () (v731 = v732(-);) 
          ArchJmp [immediate:1394]
gap () () 
          [constant:733] = ArchNop
gap () (v731 = v733(-);) 
          ArchJmp [immediate:1393]
gap () () 
          [constant:37] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v731 #1 #302 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1392]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v731(R) [immediate:1390] v43(R) #301 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1391]
gap () () 
          v728(R) = X64MovqDecompressTaggedPointer : MRI v731(R) [immediate:1389]
gap () () 
          v730(R) = X64MovqDecompressTaggedSigned : MRI v731(R) [immediate:1388]
gap () (v729(R) = v730(-);) 
          v729(1) = X64Sar32 v729(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v729 #2 #300 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1387]
gap () () 
          v727(R) = X64Movsd : MRI v728(R) [immediate:1386]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v727 [immediate:1384] [immediate:1385]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v726 #1 #299 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1383]
gap () () 
          v723(R) = X64MovqDecompressAnyTagged : MRI v725(R) [immediate:1382]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v723(R) [immediate:1380] [immediate:1381]
gap () (v722 = v723(-);) 
          ArchJmp [immediate:1379]
gap () () 
          [constant:724] = ArchNop
gap () (v722 = v724(-);) 
          ArchJmp [immediate:1378]
gap () () 
          X64Test32 && deoptimize if equal v722 #1 #298 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1377]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v722(R) [immediate:1375] v43(R) #297 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1376]
gap () () 
          v719(R) = X64MovqDecompressTaggedPointer : MRI v722(R) [immediate:1374]
gap () () 
          v721(R) = X64MovqDecompressTaggedSigned : MRI v722(R) [immediate:1373]
gap () (v720(R) = v721(-);) 
          v720(1) = X64Sar32 v720(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v720 #2 #296 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1372]
gap () () 
          v718(R) = X64Movsd : MRI v719(R) [immediate:1371]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v718 [immediate:1369] [immediate:1370]
gap () () 
          ArchJmp [immediate:1368]
gap () () 
          v717(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1367]
gap () () 
          v716(R) = X64MovqDecompressAnyTagged : MRI v717(R) [immediate:1366]
gap () () 
          X64Test32 && deoptimize if equal v716 #1 #295 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1365]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v716(R) [immediate:1363] v25(R) #294 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1364]
gap () () 
          v713(R) = X64MovqDecompressTaggedPointer : MRI v716(R) [immediate:1362]
gap () () 
          v715(R) = X64MovqDecompressTaggedSigned : MRI v716(R) [immediate:1361]
gap () (v714(R) = v715(-);) 
          v714(1) = X64Sar32 v714(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v714 #2 #293 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1360]
gap () () 
          v710(R) = X64MovqDecompressAnyTagged : MRI v713(R) [immediate:1359]
gap () () 
          X64Test32 && branch if equal v710 #1 [immediate:1357] [immediate:1358]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v710(R) [immediate:1355] [immediate:1356]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v710(R) [immediate:1353] [immediate:1354]
gap () () 
          v712(R) = X64MovqDecompressTaggedPointer : MRI v710(R) [immediate:1352]
gap () () 
          X64Test8 : MRI && branch if equal v712(R) [immediate:1349] #16 [immediate:1350] [immediate:1351]
gap () () 
          ArchJmp [immediate:1348]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v712(R) [immediate:1346] [immediate:1347]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v712(R) [immediate:1344] [immediate:1345]
gap () () 
          ArchJmp [immediate:1343]
gap () () 
          X64Test32 : MRI && branch if not equal v710(R) [immediate:1340] #2147483646 [immediate:1341] [immediate:1342]
gap () () 
          ArchJmp [immediate:1339]
gap () () 
          ArchJmp [immediate:1338]
gap () () 
          v711(R) = X64Movsd : MRI v710(R) [immediate:1337]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v711 [immediate:1335] [immediate:1336]
gap () () 
          ArchJmp [immediate:1334]
gap () () 
          ArchJmp [immediate:1333]
gap () () 
          ArchJmp [immediate:1332]
gap () () 
          ArchJmp [immediate:1331]
gap () () 
          X64Cmp32 && branch if not equal v710 [immediate:1328] [immediate:1329] [immediate:1330]
gap () () 
          ArchJmp [immediate:1327]
gap () () 
          [constant:703] = ArchNop
gap () () 
          [constant:702] = ArchNop
gap () () 
          [constant:699] = ArchNop
gap () () 
          v698(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1326]
gap () () 
          v707(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1325]
gap () () 
          v709(R) = X64MovqDecompressTaggedSigned : MRI v6(R) [immediate:1324]
gap () (v708(R) = v709(-);) 
          v708(1) = X64Sar32 v708(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v708 #3 #292 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1323]
gap () () 
          v700(R) = X64MovqDecompressAnyTagged : MRI v707(R) [immediate:1322]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v708 #2 #291 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1321]
gap () () 
          v701(R) = X64MovqDecompressAnyTagged : MRI v707(R) [immediate:1320]
gap () () 
          X64Test32 && deoptimize if equal v698 #1 #290 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1319]
gap () () 
          v706(R) = X64MovqDecompressTaggedPointer : MRI v698(R) [immediate:1318]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v706(R) [immediate:1316] #1068 #289 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1317]
gap () () 
          v704(R) = X64MovqDecompressTaggedPointer : MRI v698(R) [immediate:1315]
gap () () 
          X64Cmp && deoptimize if not equal v703(R) v704 #288 v0(S) v1(-) v2(S) v3(-) v705(-) [immediate:1314]
gap () () 
          X64Push v701(-)
gap () () 
          X64Push v700(-)
gap () () 
          X64Push v699(-)
gap () ([rdi|R|t] = v698(-); [rax|R|w64] = v70(-); [rsi|R|t] = v702(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1313] #-1 #287 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v694(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1312]
gap () () 
          X64Test32 && deoptimize if equal v694 #1 #286 v0(S) v1(-) v2(S) v3(-) v694(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v694(R) [immediate:1311] v10(R) #285 v0(S) v1(-) v2(S) v3(-) v694(-)
gap () () 
          v696(R) = X64MovqDecompressTaggedPointer : MRI v694(R) [immediate:1310]
gap () () 
          v691(R) = X64MovqDecompressAnyTagged : MRI v696(R) [immediate:1309]
gap () () 
          X64Test32 && deoptimize if equal v691 #1 #284 v0(S) v1(-) v2(S) v3(-) v694(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v691(R) [immediate:1308] v25(R) #283 v0(S) v1(-) v2(S) v3(-) v694(-)
gap () () 
          v689(R) = X64MovqDecompressTaggedPointer : MRI v691(R) [immediate:1307]
gap () () 
          v695(R) = X64MovqDecompressTaggedSigned : MRI v691(R) [immediate:1306]
gap () (v693(R) = v695(-);) 
          v693(1) = X64Sar32 v693(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v693 #2 #282 v0(S) v1(-) v2(S) v3(-) v694(-)
gap () () 
          v692(R) = X64Movl : MRI v689(R) [immediate:1305]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v692(R) [immediate:1303] [immediate:1304]
gap () ([rax|R|t] = v691(-); [rsi|R|w64] = v563(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1302] #-1 [rax|R|t] [rsi|R|w64]
gap (v690(-) = [rax|R|t];) (v687 = v690(-);) 
          ArchJmp [immediate:1301]
gap () (v687 = v689(-);) 
          ArchJmp [immediate:1300]
gap () () 
          [constant:688] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v687(R) [immediate:1299] v688(R)
gap () () 
          ArchJmp [immediate:1298]
gap () () 
          ArchJmp [immediate:1297]
gap () () 
          ArchJmp [immediate:1296]
gap () () 
          v674(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1295]
gap () () 
          X64Test32 && deoptimize if equal v674 #1 #281 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v674(R) [immediate:1294] v10(R) #280 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v686(R) = X64MovqDecompressTaggedPointer : MRI v674(R) [immediate:1293]
gap () () 
          v685(R) = X64MovqDecompressAnyTagged : MRI v686(R) [immediate:1292]
gap () () 
          X64Test32 && deoptimize if equal v685 #1 #279 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v685(R) [immediate:1291] v25(R) #278 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v682(R) = X64MovqDecompressTaggedPointer : MRI v685(R) [immediate:1290]
gap () () 
          v684(R) = X64MovqDecompressTaggedSigned : MRI v685(R) [immediate:1289]
gap () (v683(R) = v684(-);) 
          v683(1) = X64Sar32 v683(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v683 #9 #277 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v679(R) = X64MovqDecompressAnyTagged : MRI v682(R) [immediate:1288]
gap () () 
          X64Test32 && branch if equal v679 #1 [immediate:1286] [immediate:1287]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v679(R) [immediate:1284] [immediate:1285]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v679(R) [immediate:1282] [immediate:1283]
gap () () 
          v681(R) = X64MovqDecompressTaggedPointer : MRI v679(R) [immediate:1281]
gap () () 
          X64Test8 : MRI && branch if equal v681(R) [immediate:1278] #16 [immediate:1279] [immediate:1280]
gap () () 
          ArchJmp [immediate:1277]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v681(R) [immediate:1275] [immediate:1276]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v681(R) [immediate:1273] [immediate:1274]
gap () () 
          ArchJmp [immediate:1272]
gap () () 
          X64Test32 : MRI && branch if not equal v679(R) [immediate:1269] #2147483646 [immediate:1270] [immediate:1271]
gap () () 
          ArchJmp [immediate:1268]
gap () () 
          ArchJmp [immediate:1267]
gap () () 
          v680(R) = X64Movsd : MRI v679(R) [immediate:1266]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v680 [immediate:1264] [immediate:1265]
gap () () 
          ArchJmp [immediate:1263]
gap () () 
          ArchJmp [immediate:1262]
gap () () 
          ArchJmp [immediate:1261]
gap () () 
          ArchJmp [immediate:1260]
gap () () 
          X64Cmp32 && branch if not equal v679 [immediate:1257] [immediate:1258] [immediate:1259]
gap () () 
          ArchJmp [immediate:1256]
gap () () 
          [constant:672] = ArchNop
gap () () 
          [constant:671] = ArchNop
gap () () 
          [constant:668] = ArchNop
gap () () 
          [constant:659] = ArchNop
gap () () 
          v667(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1255]
gap () () 
          v676(R) = X64MovqDecompressTaggedPointer : MRI v674(R) [immediate:1254]
gap () () 
          v678(R) = X64MovqDecompressTaggedSigned : MRI v674(R) [immediate:1253]
gap () (v677(R) = v678(-);) 
          v677(1) = X64Sar32 v677(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v677 #2 #276 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v669(R) = X64MovqDecompressAnyTagged : MRI v676(R) [immediate:1252]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v677 #6 #275 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v670(R) = X64MovqDecompressAnyTagged : MRI v676(R) [immediate:1251]
gap () () 
          X64Test32 && deoptimize if equal v667 #1 #274 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v675(R) = X64MovqDecompressTaggedPointer : MRI v667(R) [immediate:1250]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v675(R) [immediate:1249] #1068 #273 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          v673(R) = X64MovqDecompressTaggedPointer : MRI v667(R) [immediate:1248]
gap () () 
          X64Cmp && deoptimize if not equal v672(R) v673 #272 v0(S) v1(-) v2(S) v3(-) v674(-)
gap () () 
          X64Push v670(-)
gap () () 
          X64Push v669(-)
gap () () 
          X64Push v668(-)
gap () ([rdi|R|t] = v667(-); [rax|R|w64] = v70(-); [rsi|R|t] = v671(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1247] #-1 #271 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v661(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1246]
gap () () 
          X64Test32 && deoptimize if equal v661 #1 #270 v0(S) v1(-) v2(S) v3(-) v661(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v661(R) [immediate:1245] v10(R) #269 v0(S) v1(-) v2(S) v3(-) v661(-)
gap () () 
          v665(R) = X64MovqDecompressTaggedPointer : MRI v661(R) [immediate:1244]
gap () () 
          v663(R) = X64MovqDecompressAnyTagged : MRI v665(R) [immediate:1243]
gap () () 
          X64Test32 && deoptimize if equal v663 #1 #268 v0(S) v1(-) v2(S) v3(-) v661(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v663(R) [immediate:1242] v25(R) #267 v0(S) v1(-) v2(S) v3(-) v661(-)
gap () () 
          v658(R) = X64MovqDecompressTaggedPointer : MRI v663(R) [immediate:1241]
gap () () 
          v664(R) = X64Movl : MRI v658(R) [immediate:1240]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v664(R) #266 v0(S) v1(-) v2(S) v3(-) v661(-)
gap () () 
          v662(R) = X64MovqDecompressTaggedSigned : MRI v663(R) [immediate:1239]
gap () (v660(R) = v662(-);) 
          v660(1) = X64Sar32 v660(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v660 #9 #265 v0(S) v1(-) v2(S) v3(-) v661(-)
gap () () 
          X64MovqCompressTagged : MRI v658(R) [immediate:1238] v659(R)
gap () () 
          ArchJmp [immediate:1237]
gap () () 
          ArchJmp [immediate:1236]
gap () () 
          ArchJmp [immediate:1235]
gap () () 
          v645(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1234]
gap () () 
          X64Test32 && deoptimize if equal v645 #1 #264 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v645(R) [immediate:1233] v10(R) #263 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v657(R) = X64MovqDecompressTaggedPointer : MRI v645(R) [immediate:1232]
gap () () 
          v656(R) = X64MovqDecompressAnyTagged : MRI v657(R) [immediate:1231]
gap () () 
          X64Test32 && deoptimize if equal v656 #1 #262 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v656(R) [immediate:1230] v25(R) #261 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v653(R) = X64MovqDecompressTaggedPointer : MRI v656(R) [immediate:1229]
gap () () 
          v655(R) = X64MovqDecompressTaggedSigned : MRI v656(R) [immediate:1228]
gap () (v654(R) = v655(-);) 
          v654(1) = X64Sar32 v654(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v654 #6 #260 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v650(R) = X64MovqDecompressAnyTagged : MRI v653(R) [immediate:1227]
gap () () 
          X64Test32 && branch if equal v650 #1 [immediate:1225] [immediate:1226]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v650(R) [immediate:1223] [immediate:1224]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v650(R) [immediate:1221] [immediate:1222]
gap () () 
          v652(R) = X64MovqDecompressTaggedPointer : MRI v650(R) [immediate:1220]
gap () () 
          X64Test8 : MRI && branch if equal v652(R) [immediate:1217] #16 [immediate:1218] [immediate:1219]
gap () () 
          ArchJmp [immediate:1216]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v652(R) [immediate:1214] [immediate:1215]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v652(R) [immediate:1212] [immediate:1213]
gap () () 
          ArchJmp [immediate:1211]
gap () () 
          X64Test32 : MRI && branch if not equal v650(R) [immediate:1208] #2147483646 [immediate:1209] [immediate:1210]
gap () () 
          ArchJmp [immediate:1207]
gap () () 
          ArchJmp [immediate:1206]
gap () () 
          v651(R) = X64Movsd : MRI v650(R) [immediate:1205]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v651 [immediate:1203] [immediate:1204]
gap () () 
          ArchJmp [immediate:1202]
gap () () 
          ArchJmp [immediate:1201]
gap () () 
          ArchJmp [immediate:1200]
gap () () 
          ArchJmp [immediate:1199]
gap () () 
          X64Cmp32 && branch if not equal v650 [immediate:1196] [immediate:1197] [immediate:1198]
gap () () 
          ArchJmp [immediate:1195]
gap () () 
          [constant:643] = ArchNop
gap () () 
          [constant:642] = ArchNop
gap () () 
          [constant:639] = ArchNop
gap () () 
          [constant:630] = ArchNop
gap () () 
          v638(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1194]
gap () () 
          v647(R) = X64MovqDecompressTaggedPointer : MRI v645(R) [immediate:1193]
gap () () 
          v649(R) = X64MovqDecompressTaggedSigned : MRI v645(R) [immediate:1192]
gap () (v648(R) = v649(-);) 
          v648(1) = X64Sar32 v648(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v648 #6 #259 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v640(R) = X64MovqDecompressAnyTagged : MRI v647(R) [immediate:1191]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v648 #7 #258 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v641(R) = X64MovqDecompressAnyTagged : MRI v647(R) [immediate:1190]
gap () () 
          X64Test32 && deoptimize if equal v638 #1 #257 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v646(R) = X64MovqDecompressTaggedPointer : MRI v638(R) [immediate:1189]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v646(R) [immediate:1188] #1068 #256 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          v644(R) = X64MovqDecompressTaggedPointer : MRI v638(R) [immediate:1187]
gap () () 
          X64Cmp && deoptimize if not equal v643(R) v644 #255 v0(S) v1(-) v2(S) v3(-) v645(-)
gap () () 
          X64Push v641(-)
gap () () 
          X64Push v640(-)
gap () () 
          X64Push v639(-)
gap () ([rdi|R|t] = v638(-); [rax|R|w64] = v70(-); [rsi|R|t] = v642(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1186] #-1 #254 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v632(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1185]
gap () () 
          X64Test32 && deoptimize if equal v632 #1 #253 v0(S) v1(-) v2(S) v3(-) v632(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v632(R) [immediate:1184] v10(R) #252 v0(S) v1(-) v2(S) v3(-) v632(-)
gap () () 
          v636(R) = X64MovqDecompressTaggedPointer : MRI v632(R) [immediate:1183]
gap () () 
          v634(R) = X64MovqDecompressAnyTagged : MRI v636(R) [immediate:1182]
gap () () 
          X64Test32 && deoptimize if equal v634 #1 #251 v0(S) v1(-) v2(S) v3(-) v632(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v634(R) [immediate:1181] v25(R) #250 v0(S) v1(-) v2(S) v3(-) v632(-)
gap () () 
          v629(R) = X64MovqDecompressTaggedPointer : MRI v634(R) [immediate:1180]
gap () () 
          v635(R) = X64Movl : MRI v629(R) [immediate:1179]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v635(R) #249 v0(S) v1(-) v2(S) v3(-) v632(-)
gap () () 
          v633(R) = X64MovqDecompressTaggedSigned : MRI v634(R) [immediate:1178]
gap () (v631(R) = v633(-);) 
          v631(1) = X64Sar32 v631(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v631 #6 #248 v0(S) v1(-) v2(S) v3(-) v632(-)
gap () () 
          X64MovqCompressTagged : MRI v629(R) [immediate:1177] v630(R)
gap () () 
          ArchJmp [immediate:1176]
gap () () 
          ArchJmp [immediate:1175]
gap () () 
          ArchJmp [immediate:1174]
gap () () 
          v616(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1173]
gap () () 
          X64Test32 && deoptimize if equal v616 #1 #247 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v616(R) [immediate:1172] v10(R) #246 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v628(R) = X64MovqDecompressTaggedPointer : MRI v616(R) [immediate:1171]
gap () () 
          v627(R) = X64MovqDecompressAnyTagged : MRI v628(R) [immediate:1170]
gap () () 
          X64Test32 && deoptimize if equal v627 #1 #245 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v627(R) [immediate:1169] v25(R) #244 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v624(R) = X64MovqDecompressTaggedPointer : MRI v627(R) [immediate:1168]
gap () () 
          v626(R) = X64MovqDecompressTaggedSigned : MRI v627(R) [immediate:1167]
gap () (v625(R) = v626(-);) 
          v625(1) = X64Sar32 v625(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v625 #10 #243 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v621(R) = X64MovqDecompressAnyTagged : MRI v624(R) [immediate:1166]
gap () () 
          X64Test32 && branch if equal v621 #1 [immediate:1164] [immediate:1165]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v621(R) [immediate:1162] [immediate:1163]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v621(R) [immediate:1160] [immediate:1161]
gap () () 
          v623(R) = X64MovqDecompressTaggedPointer : MRI v621(R) [immediate:1159]
gap () () 
          X64Test8 : MRI && branch if equal v623(R) [immediate:1156] #16 [immediate:1157] [immediate:1158]
gap () () 
          ArchJmp [immediate:1155]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v623(R) [immediate:1153] [immediate:1154]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v623(R) [immediate:1151] [immediate:1152]
gap () () 
          ArchJmp [immediate:1150]
gap () () 
          X64Test32 : MRI && branch if not equal v621(R) [immediate:1147] #2147483646 [immediate:1148] [immediate:1149]
gap () () 
          ArchJmp [immediate:1146]
gap () () 
          ArchJmp [immediate:1145]
gap () () 
          v622(R) = X64Movsd : MRI v621(R) [immediate:1144]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v622 [immediate:1142] [immediate:1143]
gap () () 
          ArchJmp [immediate:1141]
gap () () 
          ArchJmp [immediate:1140]
gap () () 
          ArchJmp [immediate:1139]
gap () () 
          ArchJmp [immediate:1138]
gap () () 
          X64Cmp32 && branch if not equal v621 [immediate:1135] [immediate:1136] [immediate:1137]
gap () () 
          ArchJmp [immediate:1134]
gap () () 
          [constant:614] = ArchNop
gap () () 
          [constant:613] = ArchNop
gap () () 
          [constant:610] = ArchNop
gap () () 
          [constant:601] = ArchNop
gap () () 
          v609(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1133]
gap () () 
          v618(R) = X64MovqDecompressTaggedPointer : MRI v616(R) [immediate:1132]
gap () () 
          v620(R) = X64MovqDecompressTaggedSigned : MRI v616(R) [immediate:1131]
gap () (v619(R) = v620(-);) 
          v619(1) = X64Sar32 v619(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v619 #7 #242 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v611(R) = X64MovqDecompressAnyTagged : MRI v618(R) [immediate:1130]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v619 #3 #241 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v612(R) = X64MovqDecompressAnyTagged : MRI v618(R) [immediate:1129]
gap () () 
          X64Test32 && deoptimize if equal v609 #1 #240 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v617(R) = X64MovqDecompressTaggedPointer : MRI v609(R) [immediate:1128]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v617(R) [immediate:1127] #1068 #239 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          v615(R) = X64MovqDecompressTaggedPointer : MRI v609(R) [immediate:1126]
gap () () 
          X64Cmp && deoptimize if not equal v614(R) v615 #238 v0(S) v1(-) v2(S) v3(-) v616(-)
gap () () 
          X64Push v612(-)
gap () () 
          X64Push v611(-)
gap () () 
          X64Push v610(-)
gap () ([rdi|R|t] = v609(-); [rax|R|w64] = v70(-); [rsi|R|t] = v613(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1125] #-1 #237 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v603(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1124]
gap () () 
          X64Test32 && deoptimize if equal v603 #1 #236 v0(S) v1(-) v2(S) v3(-) v603(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v603(R) [immediate:1123] v10(R) #235 v0(S) v1(-) v2(S) v3(-) v603(-)
gap () () 
          v607(R) = X64MovqDecompressTaggedPointer : MRI v603(R) [immediate:1122]
gap () () 
          v605(R) = X64MovqDecompressAnyTagged : MRI v607(R) [immediate:1121]
gap () () 
          X64Test32 && deoptimize if equal v605 #1 #234 v0(S) v1(-) v2(S) v3(-) v603(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v605(R) [immediate:1120] v25(R) #233 v0(S) v1(-) v2(S) v3(-) v603(-)
gap () () 
          v600(R) = X64MovqDecompressTaggedPointer : MRI v605(R) [immediate:1119]
gap () () 
          v606(R) = X64Movl : MRI v600(R) [immediate:1118]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v606(R) #232 v0(S) v1(-) v2(S) v3(-) v603(-)
gap () () 
          v604(R) = X64MovqDecompressTaggedSigned : MRI v605(R) [immediate:1117]
gap () (v602(R) = v604(-);) 
          v602(1) = X64Sar32 v602(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v602 #10 #231 v0(S) v1(-) v2(S) v3(-) v603(-)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1116] v601(R)
gap () () 
          ArchJmp [immediate:1115]
gap () () 
          ArchJmp [immediate:1114]
gap () () 
          ArchJmp [immediate:1113]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:1111] v49(R) #230 v0(S) v1(-) v2(S) v3(-) [immediate:1112]
gap () () 
          v597(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:1110]
gap () () 
          v599(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:1109]
gap () (v598(R) = v599(-);) 
          v598(1) = X64Sar32 v598(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v598 #2 #229 v0(S) v1(-) v2(S) v3(-) [immediate:1108]
gap () () 
          v595(R) = X64MovqDecompressAnyTagged : MRI v597(R) [immediate:1107]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v595(R) [immediate:1105] [immediate:1106]
gap () (v594 = v595(-);) 
          ArchJmp [immediate:1104]
gap () () 
          [constant:596] = ArchNop
gap () (v594 = v596(-);) 
          ArchJmp [immediate:1103]
gap () () 
          X64Test32 && deoptimize if equal v594 #1 #228 v0(S) v1(-) v2(S) v3(-) [immediate:1102]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v594(R) [immediate:1100] v43(R) #227 v0(S) v1(-) v2(S) v3(-) [immediate:1101]
gap () () 
          v591(R) = X64MovqDecompressTaggedPointer : MRI v594(R) [immediate:1099]
gap () () 
          v593(R) = X64MovqDecompressTaggedSigned : MRI v594(R) [immediate:1098]
gap () (v592(R) = v593(-);) 
          v592(1) = X64Sar32 v592(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v592 #2 #226 v0(S) v1(-) v2(S) v3(-) [immediate:1097]
gap () () 
          v590(R) = X64Movsd : MRI v591(R) [immediate:1096]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v590 [immediate:1094] [immediate:1095]
gap () () 
          ArchJmp [immediate:1093]
gap () () 
          v581(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1092]
gap () () 
          X64Test32 && deoptimize if equal v581 #1 #225 v0(S) v1(-) v2(S) v3(-) [immediate:1091]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v581(R) [immediate:1089] v10(R) #224 v0(S) v1(-) v2(S) v3(-) [immediate:1090]
gap () () 
          v589(R) = X64MovqDecompressTaggedPointer : MRI v581(R) [immediate:1088]
gap () () 
          v588(R) = X64MovqDecompressAnyTagged : MRI v589(R) [immediate:1087]
gap () () 
          X64Test32 && deoptimize if equal v588 #1 #223 v0(S) v1(-) v2(S) v3(-) [immediate:1086]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v588(R) [immediate:1084] v25(R) #222 v0(S) v1(-) v2(S) v3(-) [immediate:1085]
gap () () 
          v585(R) = X64MovqDecompressTaggedPointer : MRI v588(R) [immediate:1083]
gap () () 
          v587(R) = X64MovqDecompressTaggedSigned : MRI v588(R) [immediate:1082]
gap () (v586(R) = v587(-);) 
          v586(1) = X64Sar32 v586(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v586 #4 #221 v0(S) v1(-) v2(S) v3(-) [immediate:1081]
gap () () 
          v582(R) = X64MovqDecompressAnyTagged : MRI v585(R) [immediate:1080]
gap () () 
          X64Test32 && branch if equal v582 #1 [immediate:1078] [immediate:1079]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v582(R) [immediate:1076] [immediate:1077]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v582(R) [immediate:1074] [immediate:1075]
gap () () 
          v584(R) = X64MovqDecompressTaggedPointer : MRI v582(R) [immediate:1073]
gap () () 
          X64Test8 : MRI && branch if equal v584(R) [immediate:1070] #16 [immediate:1071] [immediate:1072]
gap () () 
          ArchJmp [immediate:1069]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v584(R) [immediate:1067] [immediate:1068]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v584(R) [immediate:1065] [immediate:1066]
gap () () 
          ArchJmp [immediate:1064]
gap () () 
          X64Test32 : MRI && branch if not equal v582(R) [immediate:1061] #2147483646 [immediate:1062] [immediate:1063]
gap () () 
          ArchJmp [immediate:1060]
gap () () 
          ArchJmp [immediate:1059]
gap () () 
          v583(R) = X64Movsd : MRI v582(R) [immediate:1058]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v583 [immediate:1056] [immediate:1057]
gap () () 
          ArchJmp [immediate:1055]
gap () () 
          ArchJmp [immediate:1054]
gap () () 
          ArchJmp [immediate:1053]
gap () () 
          ArchJmp [immediate:1052]
gap () () 
          X64Cmp32 && branch if not equal v582 [immediate:1049] [immediate:1050] [immediate:1051]
gap () () 
          ArchJmp [immediate:1048]
gap () () 
          [constant:575] = ArchNop
gap () () 
          [constant:574] = ArchNop
gap () () 
          [constant:571] = ArchNop
gap () () 
          v570(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1047]
gap () () 
          v578(R) = X64MovqDecompressTaggedPointer : MRI v581(R) [immediate:1046]
gap () () 
          v580(R) = X64MovqDecompressTaggedSigned : MRI v581(R) [immediate:1045]
gap () (v579(R) = v580(-);) 
          v579(1) = X64Sar32 v579(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v579 #4 #220 v0(S) v1(-) v2(S) v3(-) [immediate:1044]
gap () () 
          v572(R) = X64MovqDecompressAnyTagged : MRI v578(R) [immediate:1043]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v579 #5 #219 v0(S) v1(-) v2(S) v3(-) [immediate:1042]
gap () () 
          v573(R) = X64MovqDecompressAnyTagged : MRI v578(R) [immediate:1041]
gap () () 
          X64Test32 && deoptimize if equal v570 #1 #218 v0(S) v1(-) v2(S) v3(-) [immediate:1040]
gap () () 
          v577(R) = X64MovqDecompressTaggedPointer : MRI v570(R) [immediate:1039]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v577(R) [immediate:1037] #1068 #217 v0(S) v1(-) v2(S) v3(-) [immediate:1038]
gap () () 
          v576(R) = X64MovqDecompressTaggedPointer : MRI v570(R) [immediate:1036]
gap () () 
          X64Cmp && deoptimize if not equal v575(R) v576 #216 v0(S) v1(-) v2(S) v3(-) [immediate:1035]
gap () () 
          X64Push v573(-)
gap () () 
          X64Push v572(-)
gap () () 
          X64Push v571(-)
gap () ([rdi|R|t] = v570(-); [rax|R|w64] = v70(-); [rsi|R|t] = v574(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1034] #-1 #215 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v566(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1033]
gap () () 
          X64Test32 && deoptimize if equal v566 #1 #214 v0(S) v1(-) v2(S) v3(-) v566(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v566(R) [immediate:1032] v10(R) #213 v0(S) v1(-) v2(S) v3(-) v566(-)
gap () () 
          v568(R) = X64MovqDecompressTaggedPointer : MRI v566(R) [immediate:1031]
gap () () 
          v562(R) = X64MovqDecompressAnyTagged : MRI v568(R) [immediate:1030]
gap () () 
          X64Test32 && deoptimize if equal v562 #1 #212 v0(S) v1(-) v2(S) v3(-) v566(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v562(R) [immediate:1029] v25(R) #211 v0(S) v1(-) v2(S) v3(-) v566(-)
gap () () 
          v560(R) = X64MovqDecompressTaggedPointer : MRI v562(R) [immediate:1028]
gap () () 
          v567(R) = X64MovqDecompressTaggedSigned : MRI v562(R) [immediate:1027]
gap () (v565(R) = v567(-);) 
          v565(1) = X64Sar32 v565(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v565 #4 #210 v0(S) v1(-) v2(S) v3(-) v566(-)
gap () () 
          v564(R) = X64Movl : MRI v560(R) [immediate:1026]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v564(R) [immediate:1024] [immediate:1025]
gap () ([rax|R|t] = v562(-); [rsi|R|w64] = v563(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1023] #-1 [rax|R|t] [rsi|R|w64]
gap (v561(-) = [rax|R|t];) (v558 = v561(-);) 
          ArchJmp [immediate:1022]
gap () (v558 = v560(-);) 
          ArchJmp [immediate:1021]
gap () () 
          [constant:559] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v558(R) [immediate:1020] v559(R)
gap () () 
          ArchJmp [immediate:1019]
gap () () 
          ArchJmp [immediate:1018]
gap () () 
          ArchJmp [immediate:1017]
gap () () 
          v415(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1016]
gap () () 
          X64Test32 && deoptimize if equal v415 #1 #209 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v415(R) [immediate:1015] v10(R) #208 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v557(R) = X64MovqDecompressTaggedPointer : MRI v415(R) [immediate:1014]
gap () () 
          v556(R) = X64MovqDecompressAnyTagged : MRI v557(R) [immediate:1013]
gap () () 
          X64Test32 && deoptimize if equal v556 #1 #207 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v556(R) [immediate:1012] v25(R) #206 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v423(R) = X64MovqDecompressTaggedPointer : MRI v556(R) [immediate:1011]
gap () () 
          v555(R) = X64MovqDecompressTaggedSigned : MRI v556(R) [immediate:1010]
gap () (v424(R) = v555(-);) 
          v424(1) = X64Sar32 v424(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v424 #5 #205 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v552(R) = X64MovqDecompressAnyTagged : MRI v423(R) [immediate:1009]
gap () () 
          X64Test32 && branch if equal v552 #1 [immediate:1007] [immediate:1008]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v552(R) [immediate:1005] [immediate:1006]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v552(R) [immediate:1003] [immediate:1004]
gap () () 
          v554(R) = X64MovqDecompressTaggedPointer : MRI v552(R) [immediate:1002]
gap () () 
          X64Test8 : MRI && branch if equal v554(R) [immediate:999] #16 [immediate:1000] [immediate:1001]
gap () () 
          ArchJmp [immediate:998]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v554(R) [immediate:996] [immediate:997]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v554(R) [immediate:994] [immediate:995]
gap () () 
          ArchJmp [immediate:993]
gap () () 
          X64Test32 : MRI && branch if not equal v552(R) [immediate:990] #2147483646 [immediate:991] [immediate:992]
gap () () 
          ArchJmp [immediate:989]
gap () () 
          ArchJmp [immediate:988]
gap () () 
          v553(R) = X64Movsd : MRI v552(R) [immediate:987]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v553 [immediate:985] [immediate:986]
gap () () 
          ArchJmp [immediate:984]
gap () () 
          ArchJmp [immediate:983]
gap () () 
          ArchJmp [immediate:982]
gap () () 
          ArchJmp [immediate:981]
gap () () 
          X64Cmp32 && branch if not equal v552 [immediate:978] [immediate:979] [immediate:980]
gap () () 
          ArchJmp [immediate:977]
gap () () 
          [constant:546] = ArchNop
gap () () 
          [constant:516] = ArchNop
gap () () 
          [constant:500] = ArchNop
gap () () 
          [constant:539] = ArchNop
gap () () 
          v449(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:976]
gap () () 
          v549(R) = X64MovqDecompressTaggedPointer : MRI v415(R) [immediate:975]
gap () () 
          v551(R) = X64MovqDecompressTaggedSigned : MRI v415(R) [immediate:974]
gap () (v550(R) = v551(-);) 
          v550(1) = X64Sar32 v550(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v550 #5 #204 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v450(R) = X64MovqDecompressAnyTagged : MRI v549(R) [immediate:973]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v550 #6 #203 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v451(R) = X64MovqDecompressAnyTagged : MRI v549(R) [immediate:972]
gap () () 
          X64Test32 && deoptimize if equal v449 #1 #202 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v548(R) = X64MovqDecompressTaggedPointer : MRI v449(R) [immediate:971]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v548(R) [immediate:970] #1068 #201 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v547(R) = X64MovqDecompressTaggedPointer : MRI v449(R) [immediate:969]
gap () () 
          X64Cmp && deoptimize if not equal v546(R) v547 #200 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v452(R) = X64MovqDecompressTaggedPointer : MRI v449(R) [immediate:968]
gap () () 
          X64Test32 && deoptimize if equal v450 #1 #199 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:967] v450(-) v451(-) v452(S)
gap () () 
          v543(R) = X64Movl : MRI v450(R) [immediate:966]
gap () () 
          X64Cmp32 && branch if equal v543(R) v539 [immediate:964] [immediate:965]
gap () () 
          [constant:545] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v545(R) v543 [immediate:962] [immediate:963]
gap () () 
          [constant:544] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v544(R) v543 [immediate:960] [immediate:961]
gap () () 
          [constant:542] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v542(R) v543 #198 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:959] v450(-) v451(-) v452(S)
gap () () 
          ArchJmp [immediate:958]
gap () () 
          ArchJmp [immediate:957]
gap () () 
          ArchJmp [immediate:956]
gap () () 
          ArchJmp [immediate:955]
gap () () 
          v541(R) = X64MovqDecompressTaggedPointer : MRI v450(R) [immediate:954]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v541(R) [immediate:952] v43(R) #197 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:953] v450(-) v451(-) v452(S)
gap () () 
          v531(R) = X64MovqDecompressTaggedPointer : MRI v541(R) [immediate:951]
gap () () 
          v540(R) = X64MovqDecompressTaggedSigned : MRI v541(R) [immediate:950]
gap () (v532(R) = v540(-);) 
          v532(1) = X64Sar32 v532(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v532 #0 #196 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:949] v450(-) v451(-) v452(S)
gap () () 
          v491(R) = X64Movsd : MRI v531(R) [immediate:948]
gap () () 
          X64Test32 && deoptimize if equal v451 #1 #195 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:947] v450(-) v451(-) v452(S)
gap () () 
          v536(R) = X64Movl : MRI v451(R) [immediate:946]
gap () () 
          X64Cmp32 && branch if equal v539(R) v536 [immediate:944] [immediate:945]
gap () () 
          [constant:538] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v538(R) v536 [immediate:942] [immediate:943]
gap () () 
          [constant:537] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v537(R) v536 [immediate:940] [immediate:941]
gap () () 
          [constant:535] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v535(R) v536 #194 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:939] v450(-) v451(-) v452(S)
gap () () 
          ArchJmp [immediate:938]
gap () () 
          ArchJmp [immediate:937]
gap () () 
          ArchJmp [immediate:936]
gap () () 
          ArchJmp [immediate:935]
gap () () 
          v534(R) = X64MovqDecompressTaggedPointer : MRI v451(R) [immediate:934]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v534(R) [immediate:932] v43(R) #193 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:933] v450(-) v451(-) v452(S)
gap () () 
          v529(R) = X64MovqDecompressTaggedPointer : MRI v534(R) [immediate:931]
gap () () 
          v533(R) = X64MovqDecompressTaggedSigned : MRI v534(R) [immediate:930]
gap () (v530(R) = v533(-);) 
          v530(1) = X64Sar32 v530(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v530 #0 #192 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:929] v450(-) v451(-) v452(S)
gap () () 
          v525(R) = X64Movsd : MRI v529(R) [immediate:928]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v525(R) v491 [immediate:926] [immediate:927]
gap () (v518 = v368(-);) 
          ArchJmp [immediate:925]
gap () (v518 = v367(-);) 
          ArchJmp [immediate:924]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v532 #1 #191 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:923] v450(-) v451(-) v452(S)
gap () () 
          v489(R) = X64Movsd : MRI v531(R) [immediate:922]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v530 #1 #190 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:921] v450(-) v451(-) v452(S)
gap () () 
          v528(R) = X64Movsd : MRI v529(R) [immediate:920]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v528(R) v489 [immediate:918] [immediate:919]
gap () (v517 = v368(-);) 
          ArchJmp [immediate:917]
gap () (v517 = v367(-);) 
          ArchJmp [immediate:916]
gap () () 
          [constant:507] = ArchNop
gap () () 
          v527(R) = AVXFloat64Sub v528(R) v489
gap () () 
          v519(R) = AVXFloat64Abs v527
gap () () 
          v524(R) = AVXFloat64Sub v525(R) v491
gap () () 
          v520(R) = AVXFloat64Abs v524
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v520(R) v519 [immediate:914] [immediate:915]
gap () () 
          v522(R) = AVXFloat64Mul v519(R) v507
gap () (v458 = v517(-); v456 = v300(-); v457 = v300(-); v455 = v518(-); v461 = v520(-); v497 = v522(-); v459 = v519(-);) 
          ArchJmp [immediate:913]
gap () () 
          v521(R) = AVXFloat64Mul v520(R) v507
gap () (v458 = v300(-); v456 = v517(-); v457 = v518(-); v455 = v300(-); v461 = v519(-); v497 = v521(-); v459 = v520(-);) 
          ArchJmp [immediate:912]
gap () () 
          [constant:515] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v515(R) [immediate:910] v516(R) #189 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:911] v450(-) v451(-) v452(S)
gap () () 
          v514(R) = X64MovqDecompressTaggedPointer : MRI v515(R) [immediate:909]
gap () () 
          v501(R) = X64Movl : MRI v514(R) [immediate:908]
gap () () 
          v513(R) = X64MovqDecompressAnyTagged : MRI v452(R) [immediate:907]
gap () () 
          X64Test32 && deoptimize if equal v513 #1 #188 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:906] v450(-) v451(-) v452(S)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v513(R) [immediate:904] v10(R) #187 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:905] v450(-) v451(-) v452(S)
gap () () 
          v427(R) = X64MovqDecompressTaggedPointer : MRI v513(R) [immediate:903]
gap () () 
          v511(R) = X64MovqDecompressAnyTagged : MRI v427(R) [immediate:902]
gap () () 
          v499(R) = X64Test32 && set if equal v511 #1
gap () (v488(R) = v511(-);) 
          v488(1) = X64Sar32 v488(R) #1
gap () () 
          X64Cmp32 && branch if not equal v499 #0 [immediate:900] [immediate:901]
gap () () 
          v512(R) = X64MovqDecompressTaggedPointer : MRI v511(R) [immediate:899]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v512(R) [immediate:897] [immediate:898]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v512(R) [immediate:895] #67 #186 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:896] v450(-) v451(-) v452(S)
gap () () 
          ArchJmp [immediate:894]
gap () () 
          ArchJmp [immediate:893]
gap () () 
          v509(R) = X64Movsd : MRI v511(R) [immediate:892]
gap () (v508 = v509(-);) 
          ArchJmp [immediate:891]
gap () () 
          v510(R) = SSEInt32ToFloat64 v488
gap () (v508 = v510(-);) 
          ArchJmp [immediate:890]
gap () () 
          v505(R) = AVXFloat64Add v508(R) v459
gap () () 
          v502(R) = SSEFloat64Round v505(R)
gap () () 
          v506(R) = AVXFloat64Sub v502(R) v507
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v505(R) v506 [immediate:888] [immediate:889]
gap () () 
          [constant:504] = ArchNop
gap () () 
          v503(R) = AVXFloat64Sub v502(R) v504
gap () (v433 = v503(-);) 
          ArchJmp [immediate:887]
gap () (v433 = v502(-);) 
          ArchJmp [immediate:886]
gap () () 
          v446(R) = SSEFloat64ToInt32 v433
gap () () 
          X64Cmp32 && deoptimize if not equal v500(R) v501 #185 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:885] v450(-) v451(-) v452(S)
gap () () 
          v498(R) = SSEInt32ToFloat64 v446
gap () () 
          X64Cmp32 && deoptimize if equal v499 #0 #184 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:884] v450(-) v451(-) v452(S)
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v498(R) v433 #183 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:883] v450(-) v451(-) v452(S)
gap () () 
          X64Cmp32 && branch if signed less than v488(R) v446 [immediate:881] [immediate:882]
gap () () 
          ArchJmp [immediate:880]
gap () () 
          v493(R) = AVXFloat64Add v497(R) v461
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v493(R) v459 [immediate:878] [immediate:879]
gap () (v487 = v489(-); v486 = v491(-); v481 = v493(-);) 
          ArchJmp [immediate:877]
gap () () 
          v496(R) = SSEInt32ToFloat64 v456
gap () () 
          v495(R) = SSEInt32ToFloat64 v455
gap () () 
          v490(R) = AVXFloat64Add v496(R) v489
gap () () 
          v492(R) = AVXFloat64Add v495(R) v491
gap () () 
          v494(R) = AVXFloat64Sub v493(R) v459
gap () (v487 = v490(-); v486 = v492(-); v481 = v494(-);) 
          ArchJmp [immediate:876]
gap () () 
          v467(R) = SSEInt32ToFloat64 v458
gap () () 
          v465(R) = SSEInt32ToFloat64 v457
gap () (v485(R) = v488(-);) 
          v485(1) = X64Add32 && deoptimize if overflow v485(R) #1 #182 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:875] v450(-) v451(-) v452(S)
gap () () 
          v479(R) = AVXFloat64Add v487(R) v467
gap () () 
          v480(R) = AVXFloat64Add v486(R) v465
gap () (v482 = v485(-);) 
          v482(1) = ArchNop v482
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:873] [immediate:874]
gap () () 
          [constant:484] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v484(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:871] #-1 #181 v0(S) v1(S) v2(S) v3(S) v449(S) [immediate:872] v450(S) v451(S) v452(S) v480(S) v479(S) v455(S) v456(S) v457(S) v458(S) v459(S) v481(S) v461(S) v433(S) v482(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:870]
gap () () 
          ArchJmp [immediate:869]
gap () (v471 = v479(-); v470 = v480(-); v472 = v481(-); v469 = v482(-);) 
          ArchJmp [immediate:868]
gap () () 
          X64Cmp32 && branch if signed less than v469(R) v446 [immediate:866] [immediate:867]
gap () () 
          v475(R) = AVXFloat64Add v472(R) v461
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v475(R) v459 [immediate:864] [immediate:865]
gap () (v468 = v471(-); v466 = v470(-); v460 = v475(-);) 
          ArchJmp [immediate:863]
gap () () 
          v478(R) = SSEInt32ToFloat64 v456
gap () () 
          v473(R) = AVXFloat64Add v478(R) v471
gap () () 
          v477(R) = SSEInt32ToFloat64 v455
gap () () 
          v474(R) = AVXFloat64Add v477(R) v470
gap () () 
          v476(R) = AVXFloat64Sub v475(R) v459
gap () (v468 = v473(-); v466 = v474(-); v460 = v476(-);) 
          ArchJmp [immediate:862]
gap () (v464(R) = v469(-);) 
          v464(1) = X64Add32 && deoptimize if overflow v464(R) #1 #180 v0(S) v1(-) v2(S) v3(-) v449(S) [immediate:861] v450(-) v451(-) v452(S) v470(-) v471(-) v455(-) v456(-) v457(-) v458(-) v459(-) v472(-) v461(-) v433(-) v469(-) v433(-)
gap () () 
          v454(R) = AVXFloat64Add v467(R) v468
gap () () 
          v453(R) = AVXFloat64Add v465(R) v466
gap () (v462 = v464(-);) 
          v462(1) = ArchNop v462
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:859] [immediate:860]
gap () () 
          [constant:463] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v463(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:857] #-1 #179 v0(S) v1(S) v2(S) v3(S) v449(S) [immediate:858] v450(S) v451(S) v452(S) v453(S) v454(S) v455(S) v456(S) v457(S) v458(S) v459(S) v460(S) v461(S) v433(S) v462(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:856]
gap () () 
          ArchJmp [immediate:855]
gap () (v471 = v454(-); v470 = v453(-); v472 = v460(-); v469 = v462(-);) 
          ArchJmp [immediate:854]
gap () () 
          ArchJmp [immediate:853]
gap () () 
          X64Cmp32 && branch if equal v446 #0 [immediate:851] [immediate:852]
gap () () 
          ArchJmp [immediate:850]
gap () () 
          v447(R) = SSEFloat64ExtractHighWord32 v433
gap () () 
          X64Cmp32 && branch if signed less than v447 #0 [immediate:848] [immediate:849]
gap () () 
          ArchJmp [immediate:847]
gap () (v445(R) = v446(-);) 
          v445(1) = X64Add32 && branch if overflow v445(R) v446(R) [immediate:843] [immediate:844] [immediate:845] [immediate:846]
gap () (v444 = v445(-);) 
          v444(1) = ArchNop v444
gap () (v428 = v444(-);) 
          ArchJmp [immediate:842]
gap () () 
          ArchJmp [immediate:841]
gap () () 
          ArchJmp [immediate:840]
gap () () 
          [constant:442] = ArchNop
gap () () 
          v438(R) = X64Movq : MR v28(R)
gap () () 
          v443(R) = X64Lea : MRI v438(R) [immediate:839]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v443(R) [immediate:837] [immediate:838]
gap () () 
          ArchJmp [immediate:836]
gap () ([rdx|R|w64] = v442(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:835] #-1 [rdx|R|w64]
gap (v441(-) = [rax|R|tp];) () 
          v439(R) = X64Lea : MRI v441(R) [immediate:834]
gap () (v436 = v439(-);) 
          ArchJmp [immediate:833]
gap () (v436 = v438(-);) 
          ArchJmp [immediate:832]
gap () () 
          [constant:434] = ArchNop
gap () () 
          v437(R) = X64Lea : MRI v436(R) [immediate:831]
gap () () 
          X64Movq : MR v28(R) v437(R)
gap () () 
          v435(R) = X64Lea : MRI v436(R) [immediate:830]
gap () (v432 = v435(-);) 
          v432(1) = ArchNop v432
gap () () 
          X64MovqCompressTagged : MRI v432(R) [immediate:829] v434(R)
gap () () 
          X64Movsd : MRI v432(R) [immediate:828] v433(R)
gap () (v428 = v432(-);) 
          ArchJmp [immediate:827]
gap () () 
          [constant:425] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v427(R) [immediate:826] v428(R)
gap () () 
          v426(R) = X64Movl : MRI v423(R) [immediate:825]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v426(R) #178 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          X64MovqCompressTagged : MRI v423(R) [immediate:824] v425(R)
gap () () 
          ArchJmp [immediate:823]
gap () () 
          ArchJmp [immediate:822]
gap () () 
          ArchJmp [immediate:821]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v424 #6 #177 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v420(R) = X64MovqDecompressAnyTagged : MRI v423(R) [immediate:820]
gap () () 
          X64Test32 && branch if equal v420 #1 [immediate:818] [immediate:819]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v420(R) [immediate:816] [immediate:817]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v420(R) [immediate:814] [immediate:815]
gap () () 
          v422(R) = X64MovqDecompressTaggedPointer : MRI v420(R) [immediate:813]
gap () () 
          X64Test8 : MRI && branch if equal v422(R) [immediate:810] #16 [immediate:811] [immediate:812]
gap () () 
          ArchJmp [immediate:809]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v422(R) [immediate:807] [immediate:808]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v422(R) [immediate:805] [immediate:806]
gap () () 
          ArchJmp [immediate:804]
gap () () 
          X64Test32 : MRI && branch if not equal v420(R) [immediate:801] #2147483646 [immediate:802] [immediate:803]
gap () () 
          ArchJmp [immediate:800]
gap () () 
          ArchJmp [immediate:799]
gap () () 
          v421(R) = X64Movsd : MRI v420(R) [immediate:798]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v421 [immediate:796] [immediate:797]
gap () () 
          ArchJmp [immediate:795]
gap () () 
          ArchJmp [immediate:794]
gap () () 
          ArchJmp [immediate:793]
gap () () 
          ArchJmp [immediate:792]
gap () () 
          X64Cmp32 && branch if not equal v420 [immediate:789] [immediate:790] [immediate:791]
gap () () 
          ArchJmp [immediate:788]
gap () () 
          [constant:413] = ArchNop
gap () () 
          [constant:412] = ArchNop
gap () () 
          [constant:409] = ArchNop
gap () () 
          [constant:400] = ArchNop
gap () () 
          v408(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:787]
gap () () 
          v417(R) = X64MovqDecompressTaggedPointer : MRI v415(R) [immediate:786]
gap () () 
          v419(R) = X64MovqDecompressTaggedSigned : MRI v415(R) [immediate:785]
gap () (v418(R) = v419(-);) 
          v418(1) = X64Sar32 v418(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v418 #6 #176 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v410(R) = X64MovqDecompressAnyTagged : MRI v417(R) [immediate:784]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v418 #7 #175 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v411(R) = X64MovqDecompressAnyTagged : MRI v417(R) [immediate:783]
gap () () 
          X64Test32 && deoptimize if equal v408 #1 #174 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v416(R) = X64MovqDecompressTaggedPointer : MRI v408(R) [immediate:782]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v416(R) [immediate:781] #1068 #173 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          v414(R) = X64MovqDecompressTaggedPointer : MRI v408(R) [immediate:780]
gap () () 
          X64Cmp && deoptimize if not equal v413(R) v414 #172 v0(S) v1(-) v2(S) v3(-) v415(-)
gap () () 
          X64Push v411(-)
gap () () 
          X64Push v410(-)
gap () () 
          X64Push v409(-)
gap () ([rdi|R|t] = v408(-); [rax|R|w64] = v70(-); [rsi|R|t] = v412(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:779] #-1 #171 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v402(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:778]
gap () () 
          X64Test32 && deoptimize if equal v402 #1 #170 v0(S) v1(-) v2(S) v3(-) v402(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v402(R) [immediate:777] v10(R) #169 v0(S) v1(-) v2(S) v3(-) v402(-)
gap () () 
          v406(R) = X64MovqDecompressTaggedPointer : MRI v402(R) [immediate:776]
gap () () 
          v404(R) = X64MovqDecompressAnyTagged : MRI v406(R) [immediate:775]
gap () () 
          X64Test32 && deoptimize if equal v404 #1 #168 v0(S) v1(-) v2(S) v3(-) v402(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v404(R) [immediate:774] v25(R) #167 v0(S) v1(-) v2(S) v3(-) v402(-)
gap () () 
          v399(R) = X64MovqDecompressTaggedPointer : MRI v404(R) [immediate:773]
gap () () 
          v405(R) = X64Movl : MRI v399(R) [immediate:772]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v405(R) #166 v0(S) v1(-) v2(S) v3(-) v402(-)
gap () () 
          v403(R) = X64MovqDecompressTaggedSigned : MRI v404(R) [immediate:771]
gap () (v401(R) = v403(-);) 
          v401(1) = X64Sar32 v401(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v401 #6 #165 v0(S) v1(-) v2(S) v3(-) v402(-)
gap () () 
          X64MovqCompressTagged : MRI v399(R) [immediate:770] v400(R)
gap () () 
          ArchJmp [immediate:769]
gap () () 
          ArchJmp [immediate:768]
gap () () 
          ArchJmp [immediate:767]
gap () () 
          v262(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:766]
gap () () 
          X64Test32 && deoptimize if equal v262 #1 #164 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v262(R) [immediate:765] v10(R) #163 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v398(R) = X64MovqDecompressTaggedPointer : MRI v262(R) [immediate:764]
gap () () 
          v397(R) = X64MovqDecompressAnyTagged : MRI v398(R) [immediate:763]
gap () () 
          X64Test32 && deoptimize if equal v397 #1 #162 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v397(R) [immediate:762] v25(R) #161 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v259(R) = X64MovqDecompressTaggedPointer : MRI v397(R) [immediate:761]
gap () () 
          v396(R) = X64MovqDecompressTaggedSigned : MRI v397(R) [immediate:760]
gap () (v395(R) = v396(-);) 
          v395(1) = X64Sar32 v395(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v395 #7 #160 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v392(R) = X64MovqDecompressAnyTagged : MRI v259(R) [immediate:759]
gap () () 
          X64Test32 && branch if equal v392 #1 [immediate:757] [immediate:758]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v392(R) [immediate:755] [immediate:756]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v392(R) [immediate:753] [immediate:754]
gap () () 
          v394(R) = X64MovqDecompressTaggedPointer : MRI v392(R) [immediate:752]
gap () () 
          X64Test8 : MRI && branch if equal v394(R) [immediate:749] #16 [immediate:750] [immediate:751]
gap () () 
          ArchJmp [immediate:748]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v394(R) [immediate:746] [immediate:747]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v394(R) [immediate:744] [immediate:745]
gap () () 
          ArchJmp [immediate:743]
gap () () 
          X64Test32 : MRI && branch if not equal v392(R) [immediate:740] #2147483646 [immediate:741] [immediate:742]
gap () () 
          ArchJmp [immediate:739]
gap () () 
          ArchJmp [immediate:738]
gap () () 
          v393(R) = X64Movsd : MRI v392(R) [immediate:737]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v393 [immediate:735] [immediate:736]
gap () () 
          ArchJmp [immediate:734]
gap () () 
          ArchJmp [immediate:733]
gap () () 
          ArchJmp [immediate:732]
gap () () 
          ArchJmp [immediate:731]
gap () () 
          X64Cmp32 && branch if not equal v392 [immediate:728] [immediate:729] [immediate:730]
gap () () 
          ArchJmp [immediate:727]
gap () () 
          [constant:386] = ArchNop
gap () () 
          [constant:345] = ArchNop
gap () () 
          v285(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:726]
gap () () 
          v389(R) = X64MovqDecompressTaggedPointer : MRI v262(R) [immediate:725]
gap () () 
          v391(R) = X64MovqDecompressTaggedSigned : MRI v262(R) [immediate:724]
gap () (v390(R) = v391(-);) 
          v390(1) = X64Sar32 v390(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v390 #7 #159 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v286(R) = X64MovqDecompressAnyTagged : MRI v389(R) [immediate:723]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v390 #4 #158 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v287(R) = X64MovqDecompressAnyTagged : MRI v389(R) [immediate:722]
gap () () 
          X64Test32 && deoptimize if equal v285 #1 #157 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v388(R) = X64MovqDecompressTaggedPointer : MRI v285(R) [immediate:721]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v388(R) [immediate:720] #1068 #156 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v387(R) = X64MovqDecompressTaggedPointer : MRI v285(R) [immediate:719]
gap () () 
          X64Cmp && deoptimize if not equal v386(R) v387 #155 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v288(R) = X64MovqDecompressTaggedPointer : MRI v285(R) [immediate:718]
gap () () 
          [constant:353] = ArchNop
gap () () 
          [constant:379] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v286 #1 #154 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:717] v286(-) v287(-) v288(S)
gap () () 
          v383(R) = X64Movl : MRI v286(R) [immediate:716]
gap () () 
          X64Cmp32 && branch if equal v383(R) v379 [immediate:714] [immediate:715]
gap () () 
          [constant:385] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v385(R) v383 [immediate:712] [immediate:713]
gap () () 
          [constant:384] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v384(R) v383 [immediate:710] [immediate:711]
gap () () 
          [constant:382] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v382(R) v383 #153 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:709] v286(-) v287(-) v288(S)
gap () () 
          ArchJmp [immediate:708]
gap () () 
          ArchJmp [immediate:707]
gap () () 
          ArchJmp [immediate:706]
gap () () 
          ArchJmp [immediate:705]
gap () () 
          v381(R) = X64MovqDecompressTaggedPointer : MRI v286(R) [immediate:704]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v381(R) [immediate:702] v43(R) #152 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:703] v286(-) v287(-) v288(S)
gap () () 
          v371(R) = X64MovqDecompressTaggedPointer : MRI v381(R) [immediate:701]
gap () () 
          v380(R) = X64MovqDecompressTaggedSigned : MRI v381(R) [immediate:700]
gap () (v372(R) = v380(-);) 
          v372(1) = X64Sar32 v372(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v372 #0 #151 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:699] v286(-) v287(-) v288(S)
gap () () 
          v329(R) = X64Movsd : MRI v371(R) [immediate:698]
gap () () 
          X64Test32 && deoptimize if equal v287 #1 #150 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:697] v286(-) v287(-) v288(S)
gap () () 
          v376(R) = X64Movl : MRI v287(R) [immediate:696]
gap () () 
          X64Cmp32 && branch if equal v379(R) v376 [immediate:694] [immediate:695]
gap () () 
          [constant:378] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v378(R) v376 [immediate:692] [immediate:693]
gap () () 
          [constant:377] = ArchNop
gap () () 
          X64Cmp32 && branch if equal v377(R) v376 [immediate:690] [immediate:691]
gap () () 
          [constant:375] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v375(R) v376 #149 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:689] v286(-) v287(-) v288(S)
gap () () 
          ArchJmp [immediate:688]
gap () () 
          ArchJmp [immediate:687]
gap () () 
          ArchJmp [immediate:686]
gap () () 
          ArchJmp [immediate:685]
gap () () 
          v374(R) = X64MovqDecompressTaggedPointer : MRI v287(R) [immediate:684]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v374(R) [immediate:682] v43(R) #148 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:683] v286(-) v287(-) v288(S)
gap () () 
          v369(R) = X64MovqDecompressTaggedPointer : MRI v374(R) [immediate:681]
gap () () 
          v373(R) = X64MovqDecompressTaggedSigned : MRI v374(R) [immediate:680]
gap () (v370(R) = v373(-);) 
          v370(1) = X64Sar32 v370(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v370 #0 #147 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:679] v286(-) v287(-) v288(S)
gap () () 
          v363(R) = X64Movsd : MRI v369(R) [immediate:678]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v363(R) v329 [immediate:676] [immediate:677]
gap () (v356 = v368(-);) 
          ArchJmp [immediate:675]
gap () (v356 = v367(-);) 
          ArchJmp [immediate:674]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v372 #1 #146 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:673] v286(-) v287(-) v288(S)
gap () () 
          v327(R) = X64Movsd : MRI v371(R) [immediate:672]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v370 #1 #145 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:671] v286(-) v287(-) v288(S)
gap () () 
          v366(R) = X64Movsd : MRI v369(R) [immediate:670]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v366(R) v327 [immediate:668] [immediate:669]
gap () (v355 = v368(-);) 
          ArchJmp [immediate:667]
gap () (v355 = v367(-);) 
          ArchJmp [immediate:666]
gap () () 
          v365(R) = AVXFloat64Sub v366(R) v327
gap () () 
          v357(R) = AVXFloat64Abs v365
gap () () 
          v362(R) = AVXFloat64Sub v363(R) v329
gap () () 
          v358(R) = AVXFloat64Abs v362
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v358(R) v357 [immediate:664] [immediate:665]
gap () () 
          v360(R) = AVXFloat64Mul v357(R) v345
gap () (v294 = v355(-); v292 = v300(-); v293 = v300(-); v291 = v356(-); v297 = v358(-); v335 = v360(-); v295 = v357(-);) 
          ArchJmp [immediate:663]
gap () () 
          v359(R) = AVXFloat64Mul v358(R) v345
gap () (v294 = v300(-); v292 = v355(-); v293 = v356(-); v291 = v300(-); v297 = v357(-); v335 = v359(-); v295 = v358(-);) 
          ArchJmp [immediate:662]
gap () () 
          [constant:354] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v353(R) [immediate:660] v354(R) #144 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:661] v286(-) v287(-) v288(S)
gap () () 
          v352(R) = X64MovqDecompressTaggedPointer : MRI v353(R) [immediate:659]
gap () () 
          v339(R) = X64Movl : MRI v352(R) [immediate:658]
gap () () 
          v351(R) = X64MovqDecompressAnyTagged : MRI v288(R) [immediate:657]
gap () () 
          X64Test32 && deoptimize if equal v351 #1 #143 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:656] v286(-) v287(-) v288(S)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v351(R) [immediate:654] v10(R) #142 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:655] v286(-) v287(-) v288(S)
gap () () 
          v263(R) = X64MovqDecompressTaggedPointer : MRI v351(R) [immediate:653]
gap () () 
          v349(R) = X64MovqDecompressAnyTagged : MRI v263(R) [immediate:652]
gap () () 
          v337(R) = X64Test32 && set if equal v349 #1
gap () (v326(R) = v349(-);) 
          v326(1) = X64Sar32 v326(R) #1
gap () () 
          X64Cmp32 && branch if not equal v337 #0 [immediate:650] [immediate:651]
gap () () 
          v350(R) = X64MovqDecompressTaggedPointer : MRI v349(R) [immediate:649]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v350(R) [immediate:647] [immediate:648]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v350(R) [immediate:645] #67 #141 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:646] v286(-) v287(-) v288(S)
gap () () 
          ArchJmp [immediate:644]
gap () () 
          ArchJmp [immediate:643]
gap () () 
          v347(R) = X64Movsd : MRI v349(R) [immediate:642]
gap () (v346 = v347(-);) 
          ArchJmp [immediate:641]
gap () () 
          v348(R) = SSEInt32ToFloat64 v326
gap () (v346 = v348(-);) 
          ArchJmp [immediate:640]
gap () () 
          v343(R) = AVXFloat64Add v346(R) v295
gap () () 
          v340(R) = SSEFloat64Round v343(R)
gap () () 
          v344(R) = AVXFloat64Sub v340(R) v345
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v343(R) v344 [immediate:638] [immediate:639]
gap () () 
          [constant:342] = ArchNop
gap () () 
          v341(R) = AVXFloat64Sub v340(R) v342
gap () (v269 = v341(-);) 
          ArchJmp [immediate:637]
gap () (v269 = v340(-);) 
          ArchJmp [immediate:636]
gap () () 
          v282(R) = SSEFloat64ToInt32 v269
gap () () 
          [constant:338] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v338(R) v339 #140 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:635] v286(-) v287(-) v288(S)
gap () () 
          v336(R) = SSEInt32ToFloat64 v282
gap () () 
          X64Cmp32 && deoptimize if equal v337 #0 #139 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:634] v286(-) v287(-) v288(S)
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v336(R) v269 #138 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:633] v286(-) v287(-) v288(S)
gap () () 
          X64Cmp32 && branch if signed less than v326(R) v282 [immediate:631] [immediate:632]
gap () () 
          ArchJmp [immediate:630]
gap () () 
          v331(R) = AVXFloat64Add v335(R) v297
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v331(R) v295 [immediate:628] [immediate:629]
gap () (v325 = v327(-); v324 = v329(-); v319 = v331(-);) 
          ArchJmp [immediate:627]
gap () () 
          v334(R) = SSEInt32ToFloat64 v292
gap () () 
          v333(R) = SSEInt32ToFloat64 v291
gap () () 
          v328(R) = AVXFloat64Add v334(R) v327
gap () () 
          v330(R) = AVXFloat64Add v333(R) v329
gap () () 
          v332(R) = AVXFloat64Sub v331(R) v295
gap () (v325 = v328(-); v324 = v330(-); v319 = v332(-);) 
          ArchJmp [immediate:626]
gap () () 
          v305(R) = SSEInt32ToFloat64 v294
gap () () 
          v303(R) = SSEInt32ToFloat64 v293
gap () (v323(R) = v326(-);) 
          v323(1) = X64Add32 && deoptimize if overflow v323(R) #1 #137 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:625] v286(-) v287(-) v288(S)
gap () () 
          v317(R) = AVXFloat64Add v325(R) v305
gap () () 
          v318(R) = AVXFloat64Add v324(R) v303
gap () (v320 = v323(-);) 
          v320(1) = ArchNop v320
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:623] [immediate:624]
gap () () 
          [constant:322] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v322(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:621] #-1 #136 v0(S) v1(S) v2(S) v3(S) v285(S) [immediate:622] v286(S) v287(S) v288(S) v318(S) v317(S) v291(S) v292(S) v293(S) v294(S) v295(S) v319(S) v297(S) v269(S) v320(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:620]
gap () () 
          ArchJmp [immediate:619]
gap () (v309 = v317(-); v308 = v318(-); v310 = v319(-); v307 = v320(-);) 
          ArchJmp [immediate:618]
gap () () 
          X64Cmp32 && branch if signed less than v307(R) v282 [immediate:616] [immediate:617]
gap () () 
          v313(R) = AVXFloat64Add v310(R) v297
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v313(R) v295 [immediate:614] [immediate:615]
gap () (v306 = v309(-); v304 = v308(-); v296 = v313(-);) 
          ArchJmp [immediate:613]
gap () () 
          v316(R) = SSEInt32ToFloat64 v292
gap () () 
          v311(R) = AVXFloat64Add v316(R) v309
gap () () 
          v315(R) = SSEInt32ToFloat64 v291
gap () () 
          v312(R) = AVXFloat64Add v315(R) v308
gap () () 
          v314(R) = AVXFloat64Sub v313(R) v295
gap () (v306 = v311(-); v304 = v312(-); v296 = v314(-);) 
          ArchJmp [immediate:612]
gap () (v302(R) = v307(-);) 
          v302(1) = X64Add32 && deoptimize if overflow v302(R) #1 #135 v0(S) v1(-) v2(S) v3(-) v285(S) [immediate:611] v286(-) v287(-) v288(S) v308(-) v309(-) v291(-) v292(-) v293(-) v294(-) v295(-) v310(-) v297(-) v269(-) v307(-) v269(-)
gap () () 
          v290(R) = AVXFloat64Add v305(R) v306
gap () () 
          v289(R) = AVXFloat64Add v303(R) v304
gap () (v298 = v302(-);) 
          v298(1) = ArchNop v298
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:609] [immediate:610]
gap () () 
          [constant:301] = ArchNop
gap () ([rbx|R|w64] = v299(-); [rax|R|w64] = v300(-); [rsi|R|t] = v301(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:607] #-1 #134 v0(S) v1(S) v2(S) v3(S) v285(S) [immediate:608] v286(S) v287(S) v288(S) v289(S) v290(S) v291(S) v292(S) v293(S) v294(S) v295(S) v296(S) v297(S) v269(S) v298(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:606]
gap () () 
          ArchJmp [immediate:605]
gap () (v309 = v290(-); v308 = v289(-); v310 = v296(-); v307 = v298(-);) 
          ArchJmp [immediate:604]
gap () () 
          ArchJmp [immediate:603]
gap () () 
          X64Cmp32 && branch if equal v282 #0 [immediate:601] [immediate:602]
gap () () 
          ArchJmp [immediate:600]
gap () () 
          v283(R) = SSEFloat64ExtractHighWord32 v269
gap () () 
          X64Cmp32 && branch if signed less than v283 #0 [immediate:598] [immediate:599]
gap () () 
          ArchJmp [immediate:597]
gap () (v281(R) = v282(-);) 
          v281(1) = X64Add32 && branch if overflow v281(R) v282(R) [immediate:593] [immediate:594] [immediate:595] [immediate:596]
gap () (v280 = v281(-);) 
          v280(1) = ArchNop v280
gap () (v264 = v280(-);) 
          ArchJmp [immediate:592]
gap () () 
          ArchJmp [immediate:591]
gap () () 
          ArchJmp [immediate:590]
gap () () 
          [constant:270] = ArchNop
gap () () 
          [constant:278] = ArchNop
gap () () 
          v274(R) = X64Movq : MR v28(R)
gap () () 
          v279(R) = X64Lea : MRI v274(R) [immediate:589]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v279(R) [immediate:587] [immediate:588]
gap () () 
          ArchJmp [immediate:586]
gap () ([rdx|R|w64] = v278(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:585] #-1 [rdx|R|w64]
gap (v277(-) = [rax|R|tp];) () 
          v275(R) = X64Lea : MRI v277(R) [immediate:584]
gap () (v272 = v275(-);) 
          ArchJmp [immediate:583]
gap () (v272 = v274(-);) 
          ArchJmp [immediate:582]
gap () () 
          v273(R) = X64Lea : MRI v272(R) [immediate:581]
gap () () 
          X64Movq : MR v28(R) v273(R)
gap () () 
          v271(R) = X64Lea : MRI v272(R) [immediate:580]
gap () (v268 = v271(-);) 
          v268(1) = ArchNop v268
gap () () 
          X64MovqCompressTagged : MRI v268(R) [immediate:579] v270(R)
gap () () 
          X64Movsd : MRI v268(R) [immediate:578] v269(R)
gap () (v264 = v268(-);) 
          ArchJmp [immediate:577]
gap () () 
          [constant:260] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v263(R) [immediate:576] v264(R)
gap () () 
          v261(R) = X64Movl : MRI v259(R) [immediate:575]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v261(R) #133 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          X64MovqCompressTagged : MRI v259(R) [immediate:574] v260(R)
gap () () 
          ArchJmp [immediate:573]
gap () () 
          ArchJmp [immediate:572]
gap () () 
          ArchJmp [immediate:571]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:569] v49(R) #132 v0(S) v1(-) v2(S) v3(-) [immediate:570]
gap () () 
          v256(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:568]
gap () () 
          v258(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:567]
gap () (v257(R) = v258(-);) 
          v257(1) = X64Sar32 v257(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v257 #3 #131 v0(S) v1(-) v2(S) v3(-) [immediate:566]
gap () () 
          v254(R) = X64MovqDecompressAnyTagged : MRI v256(R) [immediate:565]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v254(R) [immediate:563] [immediate:564]
gap () (v253 = v254(-);) 
          ArchJmp [immediate:562]
gap () () 
          [constant:255] = ArchNop
gap () (v253 = v255(-);) 
          ArchJmp [immediate:561]
gap () () 
          X64Test32 && deoptimize if equal v253 #1 #130 v0(S) v1(-) v2(S) v3(-) [immediate:560]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v253(R) [immediate:558] v43(R) #129 v0(S) v1(-) v2(S) v3(-) [immediate:559]
gap () () 
          v250(R) = X64MovqDecompressTaggedPointer : MRI v253(R) [immediate:557]
gap () () 
          v252(R) = X64MovqDecompressTaggedSigned : MRI v253(R) [immediate:556]
gap () (v251(R) = v252(-);) 
          v251(1) = X64Sar32 v251(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v251 #2 #128 v0(S) v1(-) v2(S) v3(-) [immediate:555]
gap () () 
          v249(R) = X64Movsd : MRI v250(R) [immediate:554]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v249 [immediate:552] [immediate:553]
gap () () 
          ArchJmp [immediate:551]
gap () () 
          v236(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:550]
gap () () 
          X64Test32 && deoptimize if equal v236 #1 #127 v0(S) v1(-) v2(S) v3(-) [immediate:549]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v236(R) [immediate:547] v10(R) #126 v0(S) v1(-) v2(S) v3(-) [immediate:548]
gap () () 
          v248(R) = X64MovqDecompressTaggedPointer : MRI v236(R) [immediate:546]
gap () () 
          v247(R) = X64MovqDecompressAnyTagged : MRI v248(R) [immediate:545]
gap () () 
          X64Test32 && deoptimize if equal v247 #1 #125 v0(S) v1(-) v2(S) v3(-) [immediate:544]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v247(R) [immediate:542] v25(R) #124 v0(S) v1(-) v2(S) v3(-) [immediate:543]
gap () () 
          v240(R) = X64MovqDecompressTaggedPointer : MRI v247(R) [immediate:541]
gap () () 
          v246(R) = X64MovqDecompressTaggedSigned : MRI v247(R) [immediate:540]
gap () (v241(R) = v246(-);) 
          v241(1) = X64Sar32 v241(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v241 #4 #123 v0(S) v1(-) v2(S) v3(-) [immediate:539]
gap () () 
          v243(R) = X64MovqDecompressAnyTagged : MRI v240(R) [immediate:538]
gap () () 
          X64Test32 && branch if equal v243 #1 [immediate:536] [immediate:537]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v243(R) [immediate:534] [immediate:535]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v243(R) [immediate:532] [immediate:533]
gap () () 
          v245(R) = X64MovqDecompressTaggedPointer : MRI v243(R) [immediate:531]
gap () () 
          X64Test8 : MRI && branch if equal v245(R) [immediate:528] #16 [immediate:529] [immediate:530]
gap () () 
          ArchJmp [immediate:527]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v245(R) [immediate:525] [immediate:526]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v245(R) [immediate:523] [immediate:524]
gap () () 
          ArchJmp [immediate:522]
gap () () 
          X64Test32 : MRI && branch if not equal v243(R) [immediate:519] #2147483646 [immediate:520] [immediate:521]
gap () () 
          ArchJmp [immediate:518]
gap () () 
          ArchJmp [immediate:517]
gap () () 
          v244(R) = X64Movsd : MRI v243(R) [immediate:516]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v244 [immediate:514] [immediate:515]
gap () () 
          ArchJmp [immediate:513]
gap () () 
          ArchJmp [immediate:512]
gap () () 
          ArchJmp [immediate:511]
gap () () 
          ArchJmp [immediate:510]
gap () () 
          X64Cmp32 && branch if not equal v243 [immediate:507] [immediate:508] [immediate:509]
gap () () 
          ArchJmp [immediate:506]
gap () () 
          v242(R) = X64Movl : MRI v2(R) [immediate:505]
gap () () 
          ArchDeoptimize #122 v0(S) v1(-) v2(S) v3(-) v242(-) v236(-) [immediate:504]
gap () () 
          ArchJmp [immediate:503]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v241 #8 #121 v0(S) v1(-) v2(S) v3(-) [immediate:502]
gap () () 
          v237(R) = X64MovqDecompressAnyTagged : MRI v240(R) [immediate:501]
gap () () 
          X64Test32 && branch if equal v237 #1 [immediate:499] [immediate:500]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v237(R) [immediate:497] [immediate:498]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v237(R) [immediate:495] [immediate:496]
gap () () 
          v239(R) = X64MovqDecompressTaggedPointer : MRI v237(R) [immediate:494]
gap () () 
          X64Test8 : MRI && branch if equal v239(R) [immediate:491] #16 [immediate:492] [immediate:493]
gap () () 
          ArchJmp [immediate:490]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v239(R) [immediate:488] [immediate:489]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v239(R) [immediate:486] [immediate:487]
gap () () 
          ArchJmp [immediate:485]
gap () () 
          X64Test32 : MRI && branch if not equal v237(R) [immediate:482] #2147483646 [immediate:483] [immediate:484]
gap () () 
          ArchJmp [immediate:481]
gap () () 
          ArchJmp [immediate:480]
gap () () 
          v238(R) = X64Movsd : MRI v237(R) [immediate:479]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v238 [immediate:477] [immediate:478]
gap () () 
          ArchJmp [immediate:476]
gap () () 
          ArchJmp [immediate:475]
gap () () 
          ArchJmp [immediate:474]
gap () () 
          ArchJmp [immediate:473]
gap () () 
          X64Cmp32 && branch if not equal v237 [immediate:470] [immediate:471] [immediate:472]
gap () () 
          ArchJmp [immediate:469]
gap () () 
          v225(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:468]
gap () () 
          v233(R) = X64MovqDecompressTaggedPointer : MRI v236(R) [immediate:467]
gap () () 
          v235(R) = X64MovqDecompressTaggedSigned : MRI v236(R) [immediate:466]
gap () (v234(R) = v235(-);) 
          v234(1) = X64Sar32 v234(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v234 #5 #120 v0(S) v1(-) v2(S) v3(-) [immediate:465]
gap () () 
          v227(R) = X64MovqDecompressAnyTagged : MRI v233(R) [immediate:464]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v234 #1 #119 v0(S) v1(-) v2(S) v3(-) [immediate:463]
gap () () 
          v228(R) = X64MovqDecompressAnyTagged : MRI v233(R) [immediate:462]
gap () () 
          X64Test32 && deoptimize if equal v225 #1 #118 v0(S) v1(-) v2(S) v3(-) [immediate:461]
gap () () 
          v232(R) = X64MovqDecompressTaggedPointer : MRI v225(R) [immediate:460]
gap () () 
          [constant:230] = ArchNop
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v232(R) [immediate:458] #1068 #117 v0(S) v1(-) v2(S) v3(-) [immediate:459]
gap () () 
          v231(R) = X64MovqDecompressTaggedPointer : MRI v225(R) [immediate:457]
gap () () 
          [constant:229] = ArchNop
gap () () 
          [constant:226] = ArchNop
gap () () 
          X64Cmp && deoptimize if not equal v230(R) v231 #116 v0(S) v1(-) v2(S) v3(-) [immediate:456]
gap () () 
          X64Push v228(-)
gap () () 
          X64Push v227(-)
gap () () 
          X64Push v226(-)
gap () ([rdi|R|t] = v225(-); [rax|R|w64] = v70(-); [rsi|R|t] = v229(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:455] #-1 #115 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v219(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:454]
gap () () 
          X64Test32 && deoptimize if equal v219 #1 #114 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v219(R) [immediate:453] v10(R) #113 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          v223(R) = X64MovqDecompressTaggedPointer : MRI v219(R) [immediate:452]
gap () () 
          v221(R) = X64MovqDecompressAnyTagged : MRI v223(R) [immediate:451]
gap () () 
          X64Test32 && deoptimize if equal v221 #1 #112 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v221(R) [immediate:450] v25(R) #111 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          v216(R) = X64MovqDecompressTaggedPointer : MRI v221(R) [immediate:449]
gap () () 
          v222(R) = X64Movl : MRI v216(R) [immediate:448]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v222(R) #110 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          v220(R) = X64MovqDecompressTaggedSigned : MRI v221(R) [immediate:447]
gap () (v218(R) = v220(-);) 
          v218(1) = X64Sar32 v218(R) #1
gap () () 
          [constant:217] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v218 #8 #109 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          X64MovqCompressTagged : MRI v216(R) [immediate:446] v217(R)
gap () () 
          ArchJmp [immediate:445]
gap () () 
          ArchJmp [immediate:444]
gap () () 
          ArchJmp [immediate:443]
gap () () 
          v203(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:442]
gap () () 
          X64Test32 && deoptimize if equal v203 #1 #108 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v203(R) [immediate:441] v10(R) #107 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v215(R) = X64MovqDecompressTaggedPointer : MRI v203(R) [immediate:440]
gap () () 
          v214(R) = X64MovqDecompressAnyTagged : MRI v215(R) [immediate:439]
gap () () 
          X64Test32 && deoptimize if equal v214 #1 #106 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v214(R) [immediate:438] v25(R) #105 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v211(R) = X64MovqDecompressTaggedPointer : MRI v214(R) [immediate:437]
gap () () 
          v213(R) = X64MovqDecompressTaggedSigned : MRI v214(R) [immediate:436]
gap () (v212(R) = v213(-);) 
          v212(1) = X64Sar32 v212(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v212 #0 #104 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v208(R) = X64MovqDecompressAnyTagged : MRI v211(R) [immediate:435]
gap () () 
          X64Test32 && branch if equal v208 #1 [immediate:433] [immediate:434]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v208(R) [immediate:431] [immediate:432]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v208(R) [immediate:429] [immediate:430]
gap () () 
          v210(R) = X64MovqDecompressTaggedPointer : MRI v208(R) [immediate:428]
gap () () 
          X64Test8 : MRI && branch if equal v210(R) [immediate:425] #16 [immediate:426] [immediate:427]
gap () () 
          ArchJmp [immediate:424]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v210(R) [immediate:422] [immediate:423]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v210(R) [immediate:420] [immediate:421]
gap () () 
          ArchJmp [immediate:419]
gap () () 
          X64Test32 : MRI && branch if not equal v208(R) [immediate:416] #2147483646 [immediate:417] [immediate:418]
gap () () 
          ArchJmp [immediate:415]
gap () () 
          ArchJmp [immediate:414]
gap () () 
          v209(R) = X64Movsd : MRI v208(R) [immediate:413]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v209 [immediate:411] [immediate:412]
gap () () 
          ArchJmp [immediate:410]
gap () () 
          ArchJmp [immediate:409]
gap () () 
          ArchJmp [immediate:408]
gap () () 
          ArchJmp [immediate:407]
gap () () 
          X64Cmp32 && branch if not equal v208 [immediate:404] [immediate:405] [immediate:406]
gap () () 
          ArchJmp [immediate:403]
gap () () 
          [constant:201] = ArchNop
gap () () 
          [constant:200] = ArchNop
gap () () 
          [constant:197] = ArchNop
gap () () 
          [constant:188] = ArchNop
gap () () 
          v196(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:402]
gap () () 
          v205(R) = X64MovqDecompressTaggedPointer : MRI v203(R) [immediate:401]
gap () () 
          v207(R) = X64MovqDecompressTaggedSigned : MRI v203(R) [immediate:400]
gap () (v206(R) = v207(-);) 
          v206(1) = X64Sar32 v206(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v206 #1 #103 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v198(R) = X64MovqDecompressAnyTagged : MRI v205(R) [immediate:399]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v206 #0 #102 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v199(R) = X64MovqDecompressAnyTagged : MRI v205(R) [immediate:398]
gap () () 
          X64Test32 && deoptimize if equal v196 #1 #101 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v204(R) = X64MovqDecompressTaggedPointer : MRI v196(R) [immediate:397]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v204(R) [immediate:396] #1068 #100 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v202(R) = X64MovqDecompressTaggedPointer : MRI v196(R) [immediate:395]
gap () () 
          X64Cmp && deoptimize if not equal v201(R) v202 #99 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          X64Push v199(-)
gap () () 
          X64Push v198(-)
gap () () 
          X64Push v197(-)
gap () ([rdi|R|t] = v196(-); [rax|R|w64] = v70(-); [rsi|R|t] = v200(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:394] #-1 #98 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v190(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:393]
gap () () 
          X64Test32 && deoptimize if equal v190 #1 #97 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v190(R) [immediate:392] v10(R) #96 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          v194(R) = X64MovqDecompressTaggedPointer : MRI v190(R) [immediate:391]
gap () () 
          v192(R) = X64MovqDecompressAnyTagged : MRI v194(R) [immediate:390]
gap () () 
          X64Test32 && deoptimize if equal v192 #1 #95 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v192(R) [immediate:389] v25(R) #94 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          v187(R) = X64MovqDecompressTaggedPointer : MRI v192(R) [immediate:388]
gap () () 
          v193(R) = X64Movl : MRI v187(R) [immediate:387]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v193(R) #93 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          v191(R) = X64MovqDecompressTaggedSigned : MRI v192(R) [immediate:386]
gap () (v189(R) = v191(-);) 
          v189(1) = X64Sar32 v189(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v189 #0 #92 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          X64MovqCompressTagged : MRI v187(R) [immediate:385] v188(R)
gap () () 
          ArchJmp [immediate:384]
gap () () 
          ArchJmp [immediate:383]
gap () () 
          ArchJmp [immediate:382]
gap () () 
          v174(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:381]
gap () () 
          X64Test32 && deoptimize if equal v174 #1 #91 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v174(R) [immediate:380] v10(R) #90 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v186(R) = X64MovqDecompressTaggedPointer : MRI v174(R) [immediate:379]
gap () () 
          v185(R) = X64MovqDecompressAnyTagged : MRI v186(R) [immediate:378]
gap () () 
          X64Test32 && deoptimize if equal v185 #1 #89 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v185(R) [immediate:377] v25(R) #88 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v182(R) = X64MovqDecompressTaggedPointer : MRI v185(R) [immediate:376]
gap () () 
          v184(R) = X64MovqDecompressTaggedSigned : MRI v185(R) [immediate:375]
gap () (v183(R) = v184(-);) 
          v183(1) = X64Sar32 v183(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v183 #11 #87 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v179(R) = X64MovqDecompressAnyTagged : MRI v182(R) [immediate:374]
gap () () 
          X64Test32 && branch if equal v179 #1 [immediate:372] [immediate:373]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v179(R) [immediate:370] [immediate:371]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v179(R) [immediate:368] [immediate:369]
gap () () 
          v181(R) = X64MovqDecompressTaggedPointer : MRI v179(R) [immediate:367]
gap () () 
          X64Test8 : MRI && branch if equal v181(R) [immediate:364] #16 [immediate:365] [immediate:366]
gap () () 
          ArchJmp [immediate:363]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v181(R) [immediate:361] [immediate:362]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v181(R) [immediate:359] [immediate:360]
gap () () 
          ArchJmp [immediate:358]
gap () () 
          X64Test32 : MRI && branch if not equal v179(R) [immediate:355] #2147483646 [immediate:356] [immediate:357]
gap () () 
          ArchJmp [immediate:354]
gap () () 
          ArchJmp [immediate:353]
gap () () 
          v180(R) = X64Movsd : MRI v179(R) [immediate:352]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v180 [immediate:350] [immediate:351]
gap () () 
          ArchJmp [immediate:349]
gap () () 
          ArchJmp [immediate:348]
gap () () 
          ArchJmp [immediate:347]
gap () () 
          ArchJmp [immediate:346]
gap () () 
          X64Cmp32 && branch if not equal v179 [immediate:343] [immediate:344] [immediate:345]
gap () () 
          ArchJmp [immediate:342]
gap () () 
          [constant:172] = ArchNop
gap () () 
          [constant:171] = ArchNop
gap () () 
          [constant:168] = ArchNop
gap () () 
          [constant:159] = ArchNop
gap () () 
          v167(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:341]
gap () () 
          v176(R) = X64MovqDecompressTaggedPointer : MRI v174(R) [immediate:340]
gap () () 
          v178(R) = X64MovqDecompressTaggedSigned : MRI v174(R) [immediate:339]
gap () (v177(R) = v178(-);) 
          v177(1) = X64Sar32 v177(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v177 #0 #86 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v169(R) = X64MovqDecompressAnyTagged : MRI v176(R) [immediate:338]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v177 #4 #85 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v170(R) = X64MovqDecompressAnyTagged : MRI v176(R) [immediate:337]
gap () () 
          X64Test32 && deoptimize if equal v167 #1 #84 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v175(R) = X64MovqDecompressTaggedPointer : MRI v167(R) [immediate:336]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v175(R) [immediate:335] #1068 #83 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v173(R) = X64MovqDecompressTaggedPointer : MRI v167(R) [immediate:334]
gap () () 
          X64Cmp && deoptimize if not equal v172(R) v173 #82 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          X64Push v170(-)
gap () () 
          X64Push v169(-)
gap () () 
          X64Push v168(-)
gap () ([rdi|R|t] = v167(-); [rax|R|w64] = v70(-); [rsi|R|t] = v171(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:333] #-1 #81 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v161(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:332]
gap () () 
          X64Test32 && deoptimize if equal v161 #1 #80 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v161(R) [immediate:331] v10(R) #79 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          v165(R) = X64MovqDecompressTaggedPointer : MRI v161(R) [immediate:330]
gap () () 
          v163(R) = X64MovqDecompressAnyTagged : MRI v165(R) [immediate:329]
gap () () 
          X64Test32 && deoptimize if equal v163 #1 #78 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v163(R) [immediate:328] v25(R) #77 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          v158(R) = X64MovqDecompressTaggedPointer : MRI v163(R) [immediate:327]
gap () () 
          v164(R) = X64Movl : MRI v158(R) [immediate:326]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v164(R) #76 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          v162(R) = X64MovqDecompressTaggedSigned : MRI v163(R) [immediate:325]
gap () (v160(R) = v162(-);) 
          v160(1) = X64Sar32 v160(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v160 #11 #75 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          X64MovqCompressTagged : MRI v158(R) [immediate:324] v159(R)
gap () () 
          ArchJmp [immediate:323]
gap () () 
          ArchJmp [immediate:322]
gap () () 
          ArchJmp [immediate:321]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:319] v49(R) #74 v0(S) v1(-) v2(S) v3(-) [immediate:320]
gap () () 
          v155(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:318]
gap () () 
          v157(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:317]
gap () (v156(R) = v157(-);) 
          v156(1) = X64Sar32 v156(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v156 #4 #73 v0(S) v1(-) v2(S) v3(-) [immediate:316]
gap () () 
          v153(R) = X64MovqDecompressAnyTagged : MRI v155(R) [immediate:315]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v153(R) [immediate:313] [immediate:314]
gap () (v152 = v153(-);) 
          ArchJmp [immediate:312]
gap () () 
          [constant:154] = ArchNop
gap () (v152 = v154(-);) 
          ArchJmp [immediate:311]
gap () () 
          X64Test32 && deoptimize if equal v152 #1 #72 v0(S) v1(-) v2(S) v3(-) [immediate:310]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v152(R) [immediate:308] v43(R) #71 v0(S) v1(-) v2(S) v3(-) [immediate:309]
gap () () 
          v149(R) = X64MovqDecompressTaggedPointer : MRI v152(R) [immediate:307]
gap () () 
          v151(R) = X64MovqDecompressTaggedSigned : MRI v152(R) [immediate:306]
gap () (v150(R) = v151(-);) 
          v150(1) = X64Sar32 v150(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v150 #2 #70 v0(S) v1(-) v2(S) v3(-) [immediate:305]
gap () () 
          v148(R) = X64Movsd : MRI v149(R) [immediate:304]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v148 [immediate:302] [immediate:303]
gap () () 
          ArchJmp [immediate:301]
gap () () 
          v139(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:300]
gap () () 
          X64Test32 && deoptimize if equal v139 #1 #69 v0(S) v1(-) v2(S) v3(-) [immediate:299]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v139(R) [immediate:297] v10(R) #68 v0(S) v1(-) v2(S) v3(-) [immediate:298]
gap () () 
          v147(R) = X64MovqDecompressTaggedPointer : MRI v139(R) [immediate:296]
gap () () 
          v146(R) = X64MovqDecompressAnyTagged : MRI v147(R) [immediate:295]
gap () () 
          X64Test32 && deoptimize if equal v146 #1 #67 v0(S) v1(-) v2(S) v3(-) [immediate:294]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v146(R) [immediate:292] v25(R) #66 v0(S) v1(-) v2(S) v3(-) [immediate:293]
gap () () 
          v143(R) = X64MovqDecompressTaggedPointer : MRI v146(R) [immediate:291]
gap () () 
          v145(R) = X64MovqDecompressTaggedSigned : MRI v146(R) [immediate:290]
gap () (v144(R) = v145(-);) 
          v144(1) = X64Sar32 v144(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v144 #11 #65 v0(S) v1(-) v2(S) v3(-) [immediate:289]
gap () () 
          v140(R) = X64MovqDecompressAnyTagged : MRI v143(R) [immediate:288]
gap () () 
          X64Test32 && branch if equal v140 #1 [immediate:286] [immediate:287]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v140(R) [immediate:284] [immediate:285]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v140(R) [immediate:282] [immediate:283]
gap () () 
          v142(R) = X64MovqDecompressTaggedPointer : MRI v140(R) [immediate:281]
gap () () 
          X64Test8 : MRI && branch if equal v142(R) [immediate:278] #16 [immediate:279] [immediate:280]
gap () () 
          ArchJmp [immediate:277]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v142(R) [immediate:275] [immediate:276]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v142(R) [immediate:273] [immediate:274]
gap () () 
          ArchJmp [immediate:272]
gap () () 
          X64Test32 : MRI && branch if not equal v140(R) [immediate:269] #2147483646 [immediate:270] [immediate:271]
gap () () 
          ArchJmp [immediate:268]
gap () () 
          ArchJmp [immediate:267]
gap () () 
          v141(R) = X64Movsd : MRI v140(R) [immediate:266]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v141 [immediate:264] [immediate:265]
gap () () 
          ArchJmp [immediate:263]
gap () () 
          ArchJmp [immediate:262]
gap () () 
          ArchJmp [immediate:261]
gap () () 
          ArchJmp [immediate:260]
gap () () 
          X64Cmp32 && branch if not equal v140 [immediate:257] [immediate:258] [immediate:259]
gap () () 
          ArchJmp [immediate:256]
gap () () 
          [constant:133] = ArchNop
gap () () 
          [constant:132] = ArchNop
gap () () 
          [constant:129] = ArchNop
gap () () 
          [constant:120] = ArchNop
gap () () 
          v128(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:255]
gap () () 
          v136(R) = X64MovqDecompressTaggedPointer : MRI v139(R) [immediate:254]
gap () () 
          v138(R) = X64MovqDecompressTaggedSigned : MRI v139(R) [immediate:253]
gap () (v137(R) = v138(-);) 
          v137(1) = X64Sar32 v137(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v137 #4 #64 v0(S) v1(-) v2(S) v3(-) [immediate:252]
gap () () 
          v130(R) = X64MovqDecompressAnyTagged : MRI v136(R) [immediate:251]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v137 #0 #63 v0(S) v1(-) v2(S) v3(-) [immediate:250]
gap () () 
          v131(R) = X64MovqDecompressAnyTagged : MRI v136(R) [immediate:249]
gap () () 
          X64Test32 && deoptimize if equal v128 #1 #62 v0(S) v1(-) v2(S) v3(-) [immediate:248]
gap () () 
          v135(R) = X64MovqDecompressTaggedPointer : MRI v128(R) [immediate:247]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v135(R) [immediate:245] #1068 #61 v0(S) v1(-) v2(S) v3(-) [immediate:246]
gap () () 
          v134(R) = X64MovqDecompressTaggedPointer : MRI v128(R) [immediate:244]
gap () () 
          X64Cmp && deoptimize if not equal v133(R) v134 #60 v0(S) v1(-) v2(S) v3(-) [immediate:243]
gap () () 
          X64Push v131(-)
gap () () 
          X64Push v130(-)
gap () () 
          X64Push v129(-)
gap () ([rdi|R|t] = v128(-); [rax|R|w64] = v70(-); [rsi|R|t] = v132(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:242] #-1 #59 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v122(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:241]
gap () () 
          X64Test32 && deoptimize if equal v122 #1 #58 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v122(R) [immediate:240] v10(R) #57 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          v126(R) = X64MovqDecompressTaggedPointer : MRI v122(R) [immediate:239]
gap () () 
          v124(R) = X64MovqDecompressAnyTagged : MRI v126(R) [immediate:238]
gap () () 
          X64Test32 && deoptimize if equal v124 #1 #56 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v124(R) [immediate:237] v25(R) #55 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          v119(R) = X64MovqDecompressTaggedPointer : MRI v124(R) [immediate:236]
gap () () 
          v125(R) = X64Movl : MRI v119(R) [immediate:235]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v125(R) #54 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          v123(R) = X64MovqDecompressTaggedSigned : MRI v124(R) [immediate:234]
gap () (v121(R) = v123(-);) 
          v121(1) = X64Sar32 v121(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v121 #11 #53 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          X64MovqCompressTagged : MRI v119(R) [immediate:233] v120(R)
gap () () 
          ArchJmp [immediate:232]
gap () () 
          ArchJmp [immediate:231]
gap () () 
          ArchJmp [immediate:230]
gap () () 
          v106(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:229]
gap () () 
          X64Test32 && deoptimize if equal v106 #1 #52 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v106(R) [immediate:228] v10(R) #51 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v118(R) = X64MovqDecompressTaggedPointer : MRI v106(R) [immediate:227]
gap () () 
          v117(R) = X64MovqDecompressAnyTagged : MRI v118(R) [immediate:226]
gap () () 
          X64Test32 && deoptimize if equal v117 #1 #50 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v117(R) [immediate:225] v25(R) #49 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v114(R) = X64MovqDecompressTaggedPointer : MRI v117(R) [immediate:224]
gap () () 
          v116(R) = X64MovqDecompressTaggedSigned : MRI v117(R) [immediate:223]
gap () (v115(R) = v116(-);) 
          v115(1) = X64Sar32 v115(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #3 #48 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v111(R) = X64MovqDecompressAnyTagged : MRI v114(R) [immediate:222]
gap () () 
          X64Test32 && branch if equal v111 #1 [immediate:220] [immediate:221]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v111(R) [immediate:218] [immediate:219]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v111(R) [immediate:216] [immediate:217]
gap () () 
          v113(R) = X64MovqDecompressTaggedPointer : MRI v111(R) [immediate:215]
gap () () 
          X64Test8 : MRI && branch if equal v113(R) [immediate:212] #16 [immediate:213] [immediate:214]
gap () () 
          ArchJmp [immediate:211]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v113(R) [immediate:209] [immediate:210]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v113(R) [immediate:207] [immediate:208]
gap () () 
          ArchJmp [immediate:206]
gap () () 
          X64Test32 : MRI && branch if not equal v111(R) [immediate:203] #2147483646 [immediate:204] [immediate:205]
gap () () 
          ArchJmp [immediate:202]
gap () () 
          ArchJmp [immediate:201]
gap () () 
          v112(R) = X64Movsd : MRI v111(R) [immediate:200]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v112 [immediate:198] [immediate:199]
gap () () 
          ArchJmp [immediate:197]
gap () () 
          ArchJmp [immediate:196]
gap () () 
          ArchJmp [immediate:195]
gap () () 
          ArchJmp [immediate:194]
gap () () 
          X64Cmp32 && branch if not equal v111 [immediate:191] [immediate:192] [immediate:193]
gap () () 
          ArchJmp [immediate:190]
gap () () 
          [constant:104] = ArchNop
gap () () 
          [constant:103] = ArchNop
gap () () 
          [constant:100] = ArchNop
gap () () 
          [constant:91] = ArchNop
gap () () 
          v99(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:189]
gap () () 
          v108(R) = X64MovqDecompressTaggedPointer : MRI v106(R) [immediate:188]
gap () () 
          v110(R) = X64MovqDecompressTaggedSigned : MRI v106(R) [immediate:187]
gap () (v109(R) = v110(-);) 
          v109(1) = X64Sar32 v109(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v109 #0 #47 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v101(R) = X64MovqDecompressAnyTagged : MRI v108(R) [immediate:186]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v109 #3 #46 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v102(R) = X64MovqDecompressAnyTagged : MRI v108(R) [immediate:185]
gap () () 
          X64Test32 && deoptimize if equal v99 #1 #45 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v107(R) = X64MovqDecompressTaggedPointer : MRI v99(R) [immediate:184]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v107(R) [immediate:183] #1068 #44 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v105(R) = X64MovqDecompressTaggedPointer : MRI v99(R) [immediate:182]
gap () () 
          X64Cmp && deoptimize if not equal v104(R) v105 #43 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          X64Push v102(-)
gap () () 
          X64Push v101(-)
gap () () 
          X64Push v100(-)
gap () ([rdi|R|t] = v99(-); [rax|R|w64] = v70(-); [rsi|R|t] = v103(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:181] #-1 #42 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v93(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:180]
gap () () 
          X64Test32 && deoptimize if equal v93 #1 #41 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v93(R) [immediate:179] v10(R) #40 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          v97(R) = X64MovqDecompressTaggedPointer : MRI v93(R) [immediate:178]
gap () () 
          v95(R) = X64MovqDecompressAnyTagged : MRI v97(R) [immediate:177]
gap () () 
          X64Test32 && deoptimize if equal v95 #1 #39 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v95(R) [immediate:176] v25(R) #38 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          v90(R) = X64MovqDecompressTaggedPointer : MRI v95(R) [immediate:175]
gap () () 
          v96(R) = X64Movl : MRI v90(R) [immediate:174]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v96(R) #37 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          v94(R) = X64MovqDecompressTaggedSigned : MRI v95(R) [immediate:173]
gap () (v92(R) = v94(-);) 
          v92(1) = X64Sar32 v92(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v92 #3 #36 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          X64MovqCompressTagged : MRI v90(R) [immediate:172] v91(R)
gap () () 
          ArchJmp [immediate:171]
gap () () 
          ArchJmp [immediate:170]
gap () () 
          ArchJmp [immediate:169]
gap () () 
          v77(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:168]
gap () () 
          X64Test32 && deoptimize if equal v77 #1 #35 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v77(R) [immediate:167] v10(R) #34 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v89(R) = X64MovqDecompressTaggedPointer : MRI v77(R) [immediate:166]
gap () () 
          v88(R) = X64MovqDecompressAnyTagged : MRI v89(R) [immediate:165]
gap () () 
          X64Test32 && deoptimize if equal v88 #1 #33 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v88(R) [immediate:164] v25(R) #32 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v85(R) = X64MovqDecompressTaggedPointer : MRI v88(R) [immediate:163]
gap () () 
          v87(R) = X64MovqDecompressTaggedSigned : MRI v88(R) [immediate:162]
gap () (v86(R) = v87(-);) 
          v86(1) = X64Sar32 v86(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v86 #10 #31 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v82(R) = X64MovqDecompressAnyTagged : MRI v85(R) [immediate:161]
gap () () 
          X64Test32 && branch if equal v82 #1 [immediate:159] [immediate:160]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v82(R) [immediate:157] [immediate:158]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v82(R) [immediate:155] [immediate:156]
gap () () 
          v84(R) = X64MovqDecompressTaggedPointer : MRI v82(R) [immediate:154]
gap () () 
          X64Test8 : MRI && branch if equal v84(R) [immediate:151] #16 [immediate:152] [immediate:153]
gap () () 
          ArchJmp [immediate:150]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v84(R) [immediate:148] [immediate:149]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v84(R) [immediate:146] [immediate:147]
gap () () 
          ArchJmp [immediate:145]
gap () () 
          X64Test32 : MRI && branch if not equal v82(R) [immediate:142] #2147483646 [immediate:143] [immediate:144]
gap () () 
          ArchJmp [immediate:141]
gap () () 
          ArchJmp [immediate:140]
gap () () 
          v83(R) = X64Movsd : MRI v82(R) [immediate:139]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v83 [immediate:137] [immediate:138]
gap () () 
          ArchJmp [immediate:136]
gap () () 
          ArchJmp [immediate:135]
gap () () 
          ArchJmp [immediate:134]
gap () () 
          ArchJmp [immediate:133]
gap () () 
          X64Cmp32 && branch if not equal v82 [immediate:130] [immediate:131] [immediate:132]
gap () () 
          ArchJmp [immediate:129]
gap () () 
          [constant:75] = ArchNop
gap () () 
          [constant:71] = ArchNop
gap () () 
          [constant:74] = ArchNop
gap () () 
          [constant:61] = ArchNop
gap () () 
          v69(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:128]
gap () () 
          v79(R) = X64MovqDecompressTaggedPointer : MRI v77(R) [immediate:127]
gap () () 
          v81(R) = X64MovqDecompressTaggedSigned : MRI v77(R) [immediate:126]
gap () (v80(R) = v81(-);) 
          v80(1) = X64Sar32 v80(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #3 #30 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v72(R) = X64MovqDecompressAnyTagged : MRI v79(R) [immediate:125]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #7 #29 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v73(R) = X64MovqDecompressAnyTagged : MRI v79(R) [immediate:124]
gap () () 
          X64Test32 && deoptimize if equal v69 #1 #28 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v78(R) = X64MovqDecompressTaggedPointer : MRI v69(R) [immediate:123]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v78(R) [immediate:122] #1068 #27 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v76(R) = X64MovqDecompressTaggedPointer : MRI v69(R) [immediate:121]
gap () () 
          X64Cmp && deoptimize if not equal v75(R) v76 #26 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          X64Push v73(-)
gap () () 
          X64Push v72(-)
gap () () 
          X64Push v71(-)
gap () ([rdi|R|t] = v69(-); [rax|R|w64] = v70(-); [rsi|R|t] = v74(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:120] #-1 #25 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v63(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:119]
gap () () 
          X64Test32 && deoptimize if equal v63 #1 #24 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v63(R) [immediate:118] v10(R) #23 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          v67(R) = X64MovqDecompressTaggedPointer : MRI v63(R) [immediate:117]
gap () () 
          v65(R) = X64MovqDecompressAnyTagged : MRI v67(R) [immediate:116]
gap () () 
          X64Test32 && deoptimize if equal v65 #1 #22 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v65(R) [immediate:115] v25(R) #21 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          v60(R) = X64MovqDecompressTaggedPointer : MRI v65(R) [immediate:114]
gap () () 
          v66(R) = X64Movl : MRI v60(R) [immediate:113]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v66(R) #20 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          v64(R) = X64MovqDecompressTaggedSigned : MRI v65(R) [immediate:112]
gap () (v62(R) = v64(-);) 
          v62(1) = X64Sar32 v62(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #10 #19 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          X64MovqCompressTagged : MRI v60(R) [immediate:111] v61(R)
gap () () 
          ArchJmp [immediate:110]
gap () () 
          ArchJmp [immediate:109]
gap () () 
          ArchJmp [immediate:108]
gap () () 
          v51(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:107]
gap () () 
          X64Test32 && deoptimize if equal v51 #1 #18 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v51(R) [immediate:106] v10(R) #17 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          v59(R) = X64MovqDecompressTaggedPointer : MRI v51(R) [immediate:105]
gap () () 
          v58(R) = X64MovqDecompressAnyTagged : MRI v59(R) [immediate:104]
gap () () 
          X64Test32 && deoptimize if equal v58 #1 #16 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v58(R) [immediate:103] v25(R) #15 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          v55(R) = X64MovqDecompressTaggedPointer : MRI v58(R) [immediate:102]
gap () () 
          v57(R) = X64MovqDecompressTaggedSigned : MRI v58(R) [immediate:101]
gap () (v56(R) = v57(-);) 
          v56(1) = X64Sar32 v56(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v56 #7 #14 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          v52(R) = X64MovqDecompressAnyTagged : MRI v55(R) [immediate:100]
gap () () 
          X64Test32 && branch if equal v52 #1 [immediate:98] [immediate:99]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v52(R) [immediate:96] [immediate:97]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v52(R) [immediate:94] [immediate:95]
gap () () 
          v54(R) = X64MovqDecompressTaggedPointer : MRI v52(R) [immediate:93]
gap () () 
          X64Test8 : MRI && branch if equal v54(R) [immediate:90] #16 [immediate:91] [immediate:92]
gap () () 
          ArchJmp [immediate:89]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v54(R) [immediate:87] [immediate:88]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v54(R) [immediate:85] [immediate:86]
gap () () 
          ArchJmp [immediate:84]
gap () () 
          X64Test32 : MRI && branch if not equal v52(R) [immediate:81] #2147483646 [immediate:82] [immediate:83]
gap () () 
          ArchJmp [immediate:80]
gap () () 
          ArchJmp [immediate:79]
gap () () 
          v53(R) = X64Movsd : MRI v52(R) [immediate:78]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v53 [immediate:76] [immediate:77]
gap () () 
          ArchJmp [immediate:75]
gap () () 
          ArchJmp [immediate:74]
gap () () 
          ArchJmp [immediate:73]
gap () () 
          ArchJmp [immediate:72]
gap () () 
          X64Cmp32 && branch if not equal v52 [immediate:69] [immediate:70] [immediate:71]
gap () () 
          ArchJmp [immediate:68]
gap () () 
          v50(R) = X64Movl : MRI v2(R) [immediate:67]
gap () () 
          ArchDeoptimize #13 v0(S) v1(-) v2(S) v3(-) v50(-) v51(-) [immediate:66]
gap () () 
          ArchJmp [immediate:65]
gap () () 
          ArchJmp [immediate:64]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:62] v49(R) #12 v0(S) v1(-) v2(S) v3(-) [immediate:63]
gap () () 
          v46(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:61]
gap () () 
          v48(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:60]
gap () (v47(R) = v48(-);) 
          v47(1) = X64Sar32 v47(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v47 #5 #11 v0(S) v1(-) v2(S) v3(-) [immediate:59]
gap () () 
          v44(R) = X64MovqDecompressAnyTagged : MRI v46(R) [immediate:58]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v44(R) [immediate:56] [immediate:57]
gap () (v42 = v44(-);) 
          ArchJmp [immediate:55]
gap () () 
          [constant:45] = ArchNop
gap () (v42 = v45(-);) 
          ArchJmp [immediate:54]
gap () () 
          X64Test32 && deoptimize if equal v42 #1 #10 v0(S) v1(-) v2(S) v3(-) [immediate:53]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v42(R) [immediate:51] v43(R) #9 v0(S) v1(-) v2(S) v3(-) [immediate:52]
gap () () 
          v39(R) = X64MovqDecompressTaggedPointer : MRI v42(R) [immediate:50]
gap () () 
          v41(R) = X64MovqDecompressTaggedSigned : MRI v42(R) [immediate:49]
gap () (v40(R) = v41(-);) 
          v40(1) = X64Sar32 v40(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v40 #2 #8 v0(S) v1(-) v2(S) v3(-) [immediate:48]
gap () () 
          v38(R) = X64Movsd : MRI v39(R) [immediate:47]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v38 [immediate:45] [immediate:46]
gap () () 
          v22(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:44]
gap () () 
          v30(R) = X64Movq : MR v28(R)
gap () () 
          v35(R) = X64Lea : MRI v30(R) [immediate:43]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v35(R) [immediate:41] [immediate:42]
gap () () 
          ArchJmp [immediate:40]
gap () ([rdx|R|w64] = v34(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:39] #-1 [rdx|R|w64]
gap (v33(-) = [rax|R|tp];) () 
          v31(R) = X64Lea : MRI v33(R) [immediate:38]
gap () (v27 = v31(-);) 
          ArchJmp [immediate:37]
gap () (v27 = v30(-);) 
          ArchJmp [immediate:36]
gap () () 
          v29(R) = X64Lea : MRI v27(R) [immediate:35]
gap () () 
          X64Movq : MR v28(R) v29(R)
gap () () 
          v26(R) = X64Lea : MRI v27(R) [immediate:34]
gap () (v19 = v26(-);) 
          v19(1) = ArchNop v19
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:33] v25(R)
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:32] v24(R)
gap () () 
          [constant:23] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:31] v23(R)
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:29] [immediate:30]
gap () () 
          X64Test32 && deoptimize if equal v22 #1 #7 v0(S) v1(-) v2(S) v22(-) v19(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v22(R) [immediate:28] v10(R) #6 v0(S) v1(-) v2(S) v22(-) v19(-)
gap () () 
          v18(R) = X64MovqDecompressTaggedPointer : MRI v22(R) [immediate:27]
gap () () 
          ArchStoreWithWriteBarrier : MRI v18(R) [immediate:26] v19(R)
gap () () 
          v13(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:25]
gap () () 
          X64Test32 && deoptimize if equal v13 #1 #5 v0(S) v1(-) v2(S) v13(-) [immediate:24]
gap () () 
          X64Cmp32 : MRI && branch if equal v13(R) [immediate:21] v10(R) [immediate:22] [immediate:23]
gap () () 
          [constant:17] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v13(R) [immediate:19] v17(R) #4 v0(S) v1(-) v2(S) v13(-) [immediate:20]
gap () () 
          v14(R) = X64MovqDecompressTaggedPointer : MRI v13(R) [immediate:18]
gap () () 
          ArchStoreWithWriteBarrier : MRI v13(R) [immediate:17] v10(R)
gap () () 
          X64MovqCompressTagged : MRI v14(R) [immediate:15] [immediate:16]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          v12(R) = X64MovqDecompressTaggedPointer : MRI v13(R) [immediate:13]
gap () () 
          X64MovqCompressTagged : MRI v12(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () () 
          [constant:11] = ArchNop
gap () ([rax|R|t] = v11(-);) 
          ArchRet #0 [rax|R|t]
gap () () 
          v9(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:9]
gap () () 
          X64Test32 && deoptimize if equal v9 #1 #3 v0(S) v1(-) v2(S) v3(-) [immediate:8]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v9(R) [immediate:6] v10(R) #2 v0(S) v1(-) v2(S) v3(-) [immediate:7]
gap () () 
          v8(R) = X64MovqDecompressTaggedPointer : MRI v9(R) [immediate:5]
gap () () 
          v7(R) = X64Movl : MRI v8(R) [immediate:4]
gap () () 
          ArchDeoptimize #1 v0(S) v1(-) v2(S) v7(-) [immediate:3]
gap () () 
          v5(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:2]
gap () () 
          v4(R) = X64Movl : MRI v5(R) [immediate:1]
gap () () 
          ArchDeoptimize #0 v0(S) v1(-) v2(S) v3(-) v4(-) [immediate:0]
print sib pairs
2, v781, v798
2, v705, v843
3, v781, v765
print modrm pairs
1, v4, v5
1, v5, v6
1, v7, v8
1, v9, v2
1, v14, v13
1, v13, v2
1, v10, v9
1, v10, v13
1, v10, v22
1, v23, v19
1, v25, v19
1, v29, v27
1, v35, v30
1, v22, v2
1, v38, v39
1, v44, v46
1, v46, v3
1, v49, v3
1, v54, v52
1, v52, v55
1, v55, v58
1, v58, v59
1, v61, v60
1, v25, v58
1, v25, v65
1, v10, v51
1, v10, v63
1, v63, v2
1, v76, v69
1, v72, v79
1, v81, v77
1, v69, v2
1, v83, v82
1, v8, v9
1, v84, v82
1, v82, v85
1, v87, v88
1, v77, v2
1, v90, v95
1, v25, v88
1, v25, v95
1, v97, v93
1, v78, v69
1, v93, v2
1, v102, v108
1, v110, v106
1, v99, v2
1, v112, v111
1, v113, v111
1, v106, v2
1, v120, v119
1, v88, v89
1, v89, v77
1, v123, v124
1, v25, v117
1, v25, v124
1, v124, v126
1, v126, v122
1, v101, v108
1, v10, v106
1, v10, v122
1, v134, v128
1, v130, v136
1, v141, v140
1, v142, v140
1, v145, v146
1, v146, v147
1, v147, v139
1, v139, v2
1, v67, v63
1, v151, v152
1, v43, v152
1, v50, v2
1, v153, v155
1, v39, v42
1, v157, v3
1, v155, v3
1, v105, v99
1, v159, v158
1, v162, v163
1, v135, v128
1, v164, v158
1, v158, v163
1, v163, v165
1, v143, v146
1, v10, v139
1, v10, v161
1, v108, v106
1, v175, v167
1, v170, v176
1, v91, v90
1, v169, v176
1, v176, v174
1, v49, v3
1, v167, v2
1, v181, v179
1, v184, v185
1, v182, v185
1, v192, v194
1, v43, v42
1, v194, v190
1, v25, v588
1, v25, v605
1, v190, v2
1, v410, v417
1, v246, v247
1, v723, v725
1, v867, v862
1, v202, v196
1, v439, v441
1, v207, v203
1, v107, v99
1, v208, v211
1, v211, v214
1, v73, v79
1, v186, v174
1, v215, v203
1, v514, v515
1, v222, v216
1, v551, v415
1, v223, v219
1, v178, v174
1, v219, v2
1, v675, v667
1, v644, v638
1, v701, v707
1, v228, v233
1, v233, v236
1, v214, v215
1, v237, v240
1, v148, v149
1, v240, v247
1, v25, v247
1, v247, v248
1, v288, v285
1, v248, v236
1, v10, v236
1, v95, v97
1, v236, v2
1, v249, v250
1, v250, v253
1, v589, v581
1, v43, v253
1, v10, v6
1, v260, v259
1, v41, v42
1, v269, v268
1, v680, v679
1, v271, v272
1, v235, v236
1, v279, v274
1, v620, v616
1, v210, v208
1, v347, v349
1, v351, v288
1, v403, v404
1, v204, v196
1, v17, v13
1, v119, v124
1, v256, v3
1, v363, v369
1, v704, v698
1, v254, v256
1, v528, v529
1, v369, v374
1, v245, v243
1, v376, v287
1, v53, v52
1, v329, v371
1, v380, v381
1, v371, v381
1, v383, v286
1, v388, v285
1, v800, v760
1, v286, v389
1, v51, v2
1, v391, v262
1, v60, v65
1, v389, v262
1, v79, v77
1, v238, v237
1, v285, v2
1, v18, v22
1, v205, v203
1, v393, v392
1, v652, v650
1, v394, v392
1, v400, v399
1, v392, v259
1, v25, v685
1, v262, v2
1, v374, v287
1, v405, v399
1, v399, v404
1, v406, v402
1, v339, v352
1, v10, v351
1, v10, v262
1, v10, v402
1, v854, v6
1, v825, v824
1, v402, v2
1, v96, v90
1, v416, v408
1, v411, v417
1, v419, v415
1, v417, v415
1, v421, v420
1, v422, v420
1, v381, v286
1, v258, v3
1, v425, v423
1, v426, v423
1, v434, v432
1, v209, v208
1, v25, v214
1, v25, v221
1, v435, v436
1, v721, v722
1, v437, v436
1, v25, v556
1, v443, v438
1, v512, v511
1, v387, v285
1, v775, v791
1, v511, v427
1, v191, v192
1, v427, v513
1, v501, v514
1, v855, v3
1, v516, v515
1, v533, v534
1, v536, v451
1, v685, v686
1, v221, v223
1, v491, v531
1, v819, v820
1, v529, v534
1, v94, v95
1, v745, v705
1, v259, v397
1, v540, v541
1, v270, v268
1, v352, v353
1, v66, v60
1, v188, v187
1, v43, v534
1, v43, v541
1, v452, v449
1, v25, v397
1, v25, v404
1, v547, v449
1, v583, v582
1, v198, v205
1, v543, v450
1, v548, v449
1, v451, v549
1, v242, v2
1, v408, v2
1, v185, v186
1, v553, v552
1, v805, v803
1, v554, v552
1, v423, v556
1, v560, v562
1, v287, v389
1, v227, v233
1, v557, v415
1, v373, v374
1, v31, v33
1, v187, v192
1, v10, v513
1, v10, v415
1, v415, v2
1, v128, v2
1, v555, v556
1, v559, v558
1, v567, v562
1, v59, v51
1, v25, v562
1, v568, v566
1, v428, v427
1, v263, v351
1, v10, v566
1, v566, v2
1, v679, v682
1, v552, v423
1, v556, v557
1, v576, v570
1, v673, v667
1, v541, v450
1, v577, v570
1, v578, v581
1, v584, v582
1, v669, v676
1, v585, v588
1, v581, v2
1, v43, v594
1, v590, v591
1, v611, v618
1, v788, v782
1, v593, v594
1, v572, v578
1, v618, v616
1, v841, v759
1, v48, v3
1, v6, v2
1, v595, v597
1, v604, v605
1, v851, v6
1, v605, v607
1, v25, v760
1, v10, v581
1, v10, v603
1, v114, v117
1, v603, v2
1, v24, v3
1, v606, v600
1, v646, v638
1, v617, v609
1, v599, v3
1, v275, v277
1, v600, v605
1, v612, v618
1, v719, v722
1, v609, v2
1, v131, v136
1, v623, v621
1, v616, v2
1, v624, v627
1, v635, v629
1, v199, v205
1, v636, v632
1, v757, v751
1, v525, v529
1, v433, v432
1, v850, v6
1, v641, v647
1, v138, v139
1, v750, v748
1, v125, v119
1, v25, v847
1, v681, v679
1, v647, v645
1, v161, v2
1, v597, v3
1, v638, v2
1, v728, v731
1, v349, v263
1, v653, v656
1, v397, v398
1, v650, v653
1, v25, v656
1, v686, v674
1, v662, v663
1, v549, v415
1, v663, v665
1, v751, v3
1, v656, v657
1, v665, v661
1, v661, v2
1, v414, v408
1, v678, v674
1, v509, v511
1, v826, v803
1, v630, v629
1, v396, v397
1, v667, v2
1, v659, v658
1, v24, v19
1, v670, v676
1, v601, v600
1, v562, v568
1, v727, v728
1, v252, v253
1, v803, v740
1, v173, v167
1, v684, v685
1, v645, v2
1, v10, v203
1, v10, v219
1, v777, v791
1, v24, v740
1, v634, v636
1, v10, v174
1, v10, v190
1, v25, v663
1, v846, v847
1, v695, v691
1, v243, v240
1, v10, v674
1, v657, v645
1, v626, v627
1, v588, v589
1, v688, v687
1, v573, v578
1, v689, v691
1, v213, v214
1, v180, v179
1, v25, v691
1, v216, v221
1, v696, v694
1, v790, v783
1, v239, v237
1, v10, v694
1, v822, v760
1, v694, v2
1, v149, v152
1, v713, v716
1, v709, v6
1, v780, v740
1, v217, v216
1, v354, v353
1, v707, v6
1, v760, v2
1, v165, v161
1, v615, v609
1, v698, v2
1, v711, v710
1, v43, v797
1, v43, v374
1, v43, v381
1, v273, v272
1, v773, v791
1, v763, v781
1, v450, v549
1, v712, v710
1, v778, v793
1, v231, v225
1, v710, v713
1, v664, v658
1, v628, v616
1, v564, v560
1, v717, v6
1, v196, v2
1, v10, v616
1, v10, v632
1, v136, v139
1, v25, v146
1, v25, v163
1, v658, v663
1, v718, v719
1, v632, v2
1, v26, v27
1, v225, v2
1, v730, v731
1, v122, v2
1, v649, v645
1, v43, v722
1, v43, v731
1, v692, v689
1, v725, v3
1, v261, v259
1, v449, v2
1, v756, v755
1, v582, v585
1, v858, v857
1, v607, v603
1, v820, v760
1, v734, v3
1, v65, v67
1, v49, v3
1, v691, v696
1, v621, v624
1, v25, v716
1, v839, v855
1, v49, v3
1, v174, v2
1, v404, v406
1, v366, v369
1, v835, v830
1, v783, v740
1, v111, v114
1, v49, v3
1, v798, v760
1, v736, v705
1, v25, v627
1, v25, v634
1, v795, v761
1, v747, v3
1, v796, v797
1, v793, v797
1, v674, v2
1, v789, v740
1, v791, v761
1, v10, v645
1, v10, v661
1, v264, v263
1, v489, v531
1, v57, v58
1, v818, v819
1, v700, v707
1, v811, v761
1, v179, v182
1, v810, v815
1, v651, v650
1, v10, v77
1, v10, v93
1, v817, v761
1, v774, v793
1, v847, v848
1, v193, v187
1, v856, v857
1, v513, v452
1, v762, v759
1, v706, v698
1, v587, v588
1, v827, v803
1, v350, v349
1, v828, v829
1, v824, v829
1, v629, v634
1, v622, v621
1, v859, v855
1, v831, v833
1, v837, v839
1, v19, v18
1, v64, v65
1, v220, v221
1, v398, v262
1, v12, v13
1, v627, v628
1, v860, v861
1, v570, v2
1, v863, v865
1, v633, v634
1, v655, v656
1, v716, v717
1, v591, v594
1, v776, v793
1, v25, v185
1, v25, v192
1, v759, v2
1, v580, v581
1, v140, v143
1, v682, v685
1, v116, v117
1, v676, v674
1, v715, v716
1, v531, v541
1, v843, v847
1, v49, v3
1, v842, v759
1, v813, v815
1, v85, v88
1, v812, v815
1, v43, v761
1, v43, v819
1, v43, v740
1, v244, v243
1, v117, v118
1, v327, v371
1, v420, v423
1, v744, v3
1, v815, v819
1, v823, v824
1, v640, v647
1, v118, v106
1, v49, v3
1, v534, v451
1, v848, v6
1, v203, v2
1, v232, v225
1, v732, v725
1, v857, v861
assign xmm0 to v837:0
assign 0 to v837:0
assign xmm0 to v836:0
assign 0 to v836:0
assign xmm0 to v826:0
assign 0 to v826:0
blocking v826 pick register xmm0
assign xmm0 to v826:3
assign 0 to v826:3
assign xmm0 to v826:2
assign 0 to v826:2
assign xmm0 to v812:0
assign 0 to v812:0
assign xmm1 to v813:0
assign 1 to v813:0
assign xmm2 to v810:0
assign 2 to v810:0
assign xmm1 to v808:0
assign 1 to v808:0
assign xmm0 to v809:0
assign 0 to v809:0
assign xmm2 to v806:0
assign 2 to v806:0
assign xmm0 to v807:0
assign 0 to v807:0
assign xmm0 to v805:0
assign 0 to v805:0
assign xmm0 to v776:0
assign 0 to v776:0
assign xmm1 to v775:0
assign 1 to v775:0
assign xmm2 to v778:0
assign 2 to v778:0
assign xmm4 to v777:0
assign 4 to v777:0
assign xmm5 to v774:0
assign 5 to v774:0
assign xmm6 to v773:0
assign 6 to v773:0
blocking v775 pick register xmm1
blocking v777 pick register xmm4
blocking v773 pick register xmm6
assign xmm6 to v773:3
assign 6 to v773:3
assign xmm5 to v774:2
assign 5 to v774:2
assign xmm4 to v777:3
assign 4 to v777:3
assign xmm2 to v778:2
assign 2 to v778:2
assign xmm1 to v775:3
assign 1 to v775:3
assign xmm0 to v776:2
assign 0 to v776:2
assign xmm4 to v777:2
assign 4 to v777:2
assign xmm2 to v771:0
assign 2 to v771:0
assign xmm1 to v775:2
assign 1 to v775:2
assign xmm0 to v772:0
assign 0 to v772:0
assign xmm6 to v773:2
assign 6 to v773:2
assign xmm1 to v769:0
assign 1 to v769:0
assign xmm0 to v770:0
assign 0 to v770:0
assign xmm0 to v768:0
assign 0 to v768:0
assign xmm0 to v727:0
assign 0 to v727:0
assign xmm1 to v37:1
assign 1 to v37:1
assign xmm0 to v718:0
assign 0 to v718:0
assign xmm0 to v711:0
assign 0 to v711:0
blocking v37 pick register xmm0
assign xmm1 to v37:4
assign 1 to v37:4
assign xmm0 to v680:0
assign 0 to v680:0
assign xmm1 to v37:3
assign 1 to v37:3
blocking v37 pick register xmm0
assign xmm0 to v651:0
assign 0 to v651:0
assign xmm1 to v37:8
assign 1 to v37:8
blocking v37 pick register xmm0
assign xmm0 to v622:0
assign 0 to v622:0
assign xmm1 to v37:11
assign 1 to v37:11
blocking v37 pick register xmm0
assign xmm0 to v590:0
assign 0 to v590:0
assign xmm1 to v37:14
assign 1 to v37:14
assign xmm0 to v583:0
assign 0 to v583:0
blocking v37 pick register xmm0
assign xmm1 to v37:17
assign 1 to v37:17
assign xmm0 to v553:0
assign 0 to v553:0
assign xmm1 to v37:16
assign 1 to v37:16
assign xmm0 to v491:0
assign 0 to v491:0
assign xmm1 to v525:0
assign 1 to v525:0
assign xmm2 to v489:0
assign 2 to v489:0
assign xmm4 to v528:0
assign 4 to v528:0
assign xmm3 to v527:0
assign 3 to v527:0
assign xmm4 to v519:0
assign 4 to v519:0
assign xmm5 to v526:0
assign 5 to v526:0
assign xmm1 to v524:0
assign 1 to v524:0
assign xmm3 to v520:0
assign 3 to v520:0
assign xmm5 to v523:0
assign 5 to v523:0
assign xmm1 to v507:1
assign 1 to v507:1
assign xmm5 to v522:0
assign 5 to v522:0
assign xmm1 to v507:2
assign 1 to v507:2
assign xmm5 to v521:0
assign 5 to v521:0
assign xmm3 to v459:0
assign 3 to v459:0
assign xmm4 to v461:0
assign 4 to v461:0
assign xmm5 to v497:0
assign 5 to v497:0
assign xmm6 to v509:0
assign 6 to v509:0
assign xmm6 to v510:0
assign 6 to v510:0
assign xmm6 to v508:0
assign 6 to v508:0
assign xmm6 to v505:0
assign 6 to v505:0
assign xmm7 to v502:0
assign 7 to v502:0
assign xmm1 to v506:0
assign 1 to v506:0
assign xmm1 to v504:1
assign 1 to v504:1
assign xmm7 to v503:0
assign 7 to v503:0
assign xmm7 to v433:0
assign 7 to v433:0
assign xmm1 to v498:0
assign 1 to v498:0
assign xmm1 to v493:0
assign 1 to v493:0
assign xmm5 to v496:0
assign 5 to v496:0
assign xmm6 to v495:0
assign 6 to v495:0
assign xmm2 to v490:0
assign 2 to v490:0
assign xmm0 to v492:0
assign 0 to v492:0
assign xmm1 to v494:0
assign 1 to v494:0
assign xmm1 to v481:0
assign 1 to v481:0
assign xmm0 to v486:0
assign 0 to v486:0
assign xmm2 to v487:0
assign 2 to v487:0
assign xmm5 to v467:0
assign 5 to v467:0
assign xmm6 to v465:0
assign 6 to v465:0
assign xmm2 to v479:0
assign 2 to v479:0
assign xmm0 to v480:0
assign 0 to v480:0
blocking v467 pick register xmm5
blocking v465 pick register xmm6
blocking v433 pick register xmm7
blocking v37 pick register xmm0
assign xmm0 to v480:2
assign 0 to v480:2
assign xmm2 to v479:2
assign 2 to v479:2
assign xmm6 to v465:3
assign 6 to v465:3
assign xmm5 to v467:3
assign 5 to v467:3
assign xmm1 to v481:2
assign 1 to v481:2
assign xmm4 to v461:2
assign 4 to v461:2
assign xmm3 to v459:2
assign 3 to v459:2
assign xmm7 to v433:3
assign 7 to v433:3
assign xmm5 to v467:2
assign 5 to v467:2
assign xmm6 to v465:2
assign 6 to v465:2
assign xmm0 to v470:0
assign 0 to v470:0
assign xmm2 to v471:0
assign 2 to v471:0
assign xmm1 to v472:0
assign 1 to v472:0
assign xmm8 to v475:0
assign 8 to v475:0
assign xmm9 to v478:0
assign 9 to v478:0
assign xmm9 to v473:0
assign 9 to v473:0
assign xmm10 to v477:0
assign 10 to v477:0
assign xmm10 to v474:0
assign 10 to v474:0
assign xmm8 to v476:0
assign 8 to v476:0
assign xmm8 to v460:0
assign 8 to v460:0
assign xmm9 to v466:0
assign 9 to v466:0
assign xmm10 to v468:0
assign 10 to v468:0
assign xmm2 to v454:0
assign 2 to v454:0
assign xmm0 to v453:0
assign 0 to v453:0
assign xmm0 to v453:2
assign 0 to v453:2
assign xmm2 to v454:2
assign 2 to v454:2
assign xmm8 to v460:2
assign 8 to v460:2
assign xmm6 to v465:5
assign 6 to v465:5
assign xmm5 to v467:5
assign 5 to v467:5
assign xmm7 to v433:5
assign 7 to v433:5
assign xmm3 to v459:4
assign 3 to v459:4
assign xmm4 to v461:4
assign 4 to v461:4
assign xmm7 to v433:7
assign 7 to v433:7
assign xmm7 to v433:2
assign 7 to v433:2
assign xmm0 to v421:0
assign 0 to v421:0
assign xmm1 to v37:21
assign 1 to v37:21
blocking v37 pick register xmm0
assign xmm0 to v393:0
assign 0 to v393:0
assign xmm1 to v37:24
assign 1 to v37:24
assign xmm0 to v329:0
assign 0 to v329:0
assign xmm1 to v363:0
assign 1 to v363:0
assign xmm2 to v327:0
assign 2 to v327:0
assign xmm4 to v366:0
assign 4 to v366:0
assign xmm3 to v365:0
assign 3 to v365:0
assign xmm4 to v357:0
assign 4 to v357:0
assign xmm5 to v364:0
assign 5 to v364:0
assign xmm1 to v362:0
assign 1 to v362:0
assign xmm3 to v358:0
assign 3 to v358:0
assign xmm5 to v361:0
assign 5 to v361:0
assign xmm1 to v345:1
assign 1 to v345:1
assign xmm5 to v360:0
assign 5 to v360:0
assign xmm1 to v345:2
assign 1 to v345:2
assign xmm5 to v359:0
assign 5 to v359:0
assign xmm3 to v295:0
assign 3 to v295:0
assign xmm4 to v297:0
assign 4 to v297:0
assign xmm5 to v335:0
assign 5 to v335:0
assign xmm6 to v347:0
assign 6 to v347:0
assign xmm6 to v348:0
assign 6 to v348:0
assign xmm6 to v346:0
assign 6 to v346:0
assign xmm6 to v343:0
assign 6 to v343:0
assign xmm7 to v340:0
assign 7 to v340:0
assign xmm1 to v344:0
assign 1 to v344:0
assign xmm1 to v342:1
assign 1 to v342:1
assign xmm7 to v341:0
assign 7 to v341:0
assign xmm7 to v269:0
assign 7 to v269:0
assign xmm1 to v336:0
assign 1 to v336:0
assign xmm1 to v331:0
assign 1 to v331:0
assign xmm5 to v334:0
assign 5 to v334:0
assign xmm6 to v333:0
assign 6 to v333:0
assign xmm2 to v328:0
assign 2 to v328:0
assign xmm0 to v330:0
assign 0 to v330:0
assign xmm1 to v332:0
assign 1 to v332:0
assign xmm1 to v319:0
assign 1 to v319:0
assign xmm0 to v324:0
assign 0 to v324:0
assign xmm2 to v325:0
assign 2 to v325:0
assign xmm5 to v305:0
assign 5 to v305:0
assign xmm6 to v303:0
assign 6 to v303:0
assign xmm2 to v317:0
assign 2 to v317:0
assign xmm0 to v318:0
assign 0 to v318:0
blocking v305 pick register xmm5
blocking v303 pick register xmm6
blocking v269 pick register xmm7
blocking v37 pick register xmm0
assign xmm0 to v318:2
assign 0 to v318:2
assign xmm2 to v317:2
assign 2 to v317:2
assign xmm6 to v303:3
assign 6 to v303:3
assign xmm5 to v305:3
assign 5 to v305:3
assign xmm1 to v319:2
assign 1 to v319:2
assign xmm4 to v297:2
assign 4 to v297:2
assign xmm3 to v295:2
assign 3 to v295:2
assign xmm7 to v269:3
assign 7 to v269:3
assign xmm5 to v305:2
assign 5 to v305:2
assign xmm6 to v303:2
assign 6 to v303:2
assign xmm0 to v308:0
assign 0 to v308:0
assign xmm2 to v309:0
assign 2 to v309:0
assign xmm1 to v310:0
assign 1 to v310:0
assign xmm8 to v313:0
assign 8 to v313:0
assign xmm9 to v316:0
assign 9 to v316:0
assign xmm9 to v311:0
assign 9 to v311:0
assign xmm10 to v315:0
assign 10 to v315:0
assign xmm10 to v312:0
assign 10 to v312:0
assign xmm8 to v314:0
assign 8 to v314:0
assign xmm8 to v296:0
assign 8 to v296:0
assign xmm9 to v304:0
assign 9 to v304:0
assign xmm10 to v306:0
assign 10 to v306:0
assign xmm2 to v290:0
assign 2 to v290:0
assign xmm0 to v289:0
assign 0 to v289:0
assign xmm0 to v289:2
assign 0 to v289:2
assign xmm2 to v290:2
assign 2 to v290:2
assign xmm8 to v296:2
assign 8 to v296:2
assign xmm6 to v303:5
assign 6 to v303:5
assign xmm5 to v305:5
assign 5 to v305:5
assign xmm7 to v269:5
assign 7 to v269:5
assign xmm3 to v295:4
assign 3 to v295:4
assign xmm4 to v297:4
assign 4 to v297:4
assign xmm7 to v269:7
assign 7 to v269:7
assign xmm7 to v269:2
assign 7 to v269:2
assign xmm0 to v249:0
assign 0 to v249:0
assign xmm1 to v37:27
assign 1 to v37:27
assign xmm0 to v244:0
assign 0 to v244:0
assign xmm0 to v238:0
assign 0 to v238:0
blocking v37 pick register xmm0
assign xmm1 to v37:30
assign 1 to v37:30
assign xmm0 to v209:0
assign 0 to v209:0
assign xmm1 to v37:29
assign 1 to v37:29
blocking v37 pick register xmm0
assign xmm0 to v180:0
assign 0 to v180:0
assign xmm1 to v37:34
assign 1 to v37:34
blocking v37 pick register xmm0
assign xmm0 to v148:0
assign 0 to v148:0
assign xmm1 to v37:37
assign 1 to v37:37
assign xmm0 to v141:0
assign 0 to v141:0
blocking v37 pick register xmm0
assign xmm1 to v37:40
assign 1 to v37:40
assign xmm0 to v112:0
assign 0 to v112:0
assign xmm1 to v37:39
assign 1 to v37:39
blocking v37 pick register xmm0
assign xmm0 to v83:0
assign 0 to v83:0
assign xmm1 to v37:44
assign 1 to v37:44
blocking v37 pick register xmm0
assign xmm0 to v53:0
assign 0 to v53:0
assign xmm1 to v37:47
assign 1 to v37:47
assign xmm0 to v37:49
assign 0 to v37:49
assign xmm1 to v38:0
assign 1 to v38:0
spill count : 55
--- Raw source ---
() {
      // calc current normals
      var CurN = new Array();
      var i = 5;
      Q.LastPx = 0;
      for (; i > -1; i--) CurN[i] = VMulti2(MQube, Q.Normal[i]);
      if (CurN[0][2] < 0) {
        if (!Q.Line[0]) { DrawLine(Q[0], Q[1]); Q.Line[0] = true; };
        if (!Q.Line[1]) { DrawLine(Q[1], Q[2]); Q.Line[1] = true; };
        if (!Q.Line[2]) { DrawLine(Q[2], Q[3]); Q.Line[2] = true; };
        if (!Q.Line[3]) { DrawLine(Q[3], Q[0]); Q.Line[3] = true; };
      }
      if (CurN[1][2] < 0) {
        if (!Q.Line[2]) { DrawLine(Q[3], Q[2]); Q.Line[2] = true; };
        if (!Q.Line[9]) { DrawLine(Q[2], Q[6]); Q.Line[9] = true; };
        if (!Q.Line[6]) { DrawLine(Q[6], Q[7]); Q.Line[6] = true; };
        if (!Q.Line[10]) { DrawLine(Q[7], Q[3]); Q.Line[10] = true; };
      }
      if (CurN[2][2] < 0) {
        if (!Q.Line[4]) { DrawLine(Q[4], Q[5]); Q.Line[4] = true; };
        if (!Q.Line[5]) { DrawLine(Q[5], Q[6]); Q.Line[5] = true; };
        if (!Q.Line[6]) { DrawLine(Q[6], Q[7]); Q.Line[6] = true; };
        if (!Q.Line[7]) { DrawLine(Q[7], Q[4]); Q.Line[7] = true; };
      }
      if (CurN[3][2] < 0) {
        if (!Q.Line[4]) { DrawLine(Q[4], Q[5]); Q.Line[4] = true; };
        if (!Q.Line[8]) { DrawLine(Q[5], Q[1]); Q.Line[8] = true; };
        if (!Q.Line[0]) { DrawLine(Q[1], Q[0]); Q.Line[0] = true; };
        if (!Q.Line[11]) { DrawLine(Q[0], Q[4]); Q.Line[11] = true; };
      }
      if (CurN[4][2] < 0) {
        if (!Q.Line[11]) { DrawLine(Q[4], Q[0]); Q.Line[11] = true; };
        if (!Q.Line[3]) { DrawLine(Q[0], Q[3]); Q.Line[3] = true; };
        if (!Q.Line[10]) { DrawLine(Q[3], Q[7]); Q.Line[10] = true; };
        if (!Q.Line[7]) { DrawLine(Q[7], Q[4]); Q.Line[7] = true; };
      }
      if (CurN[5][2] < 0) {
        if (!Q.Line[8]) { DrawLine(Q[1], Q[5]); Q.Line[8] = true; };
        if (!Q.Line[5]) { DrawLine(Q[5], Q[6]); Q.Line[5] = true; };
        if (!Q.Line[9]) { DrawLine(Q[6], Q[2]); Q.Line[9] = true; };
        if (!Q.Line[1]) { DrawLine(Q[2], Q[1]); Q.Line[1] = true; };
      }
      Q.Line = [false,false,false,false,false,false,false,false,false,false,false,false];
      Q.LastPx = 0;
    }


--- Optimized code ---
optimization_id = 11
source_position = 4412
kind = TURBOFAN
name = DrawQube
stack_slots = 30
compiler = turbofan
address = 0x19db0008a6a1

Instructions (size = 17948)
0x19db0008a6e0     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db0008a6e7     7  483bd9         REX.W cmpq rbx,rcx
0x19db0008a6ea     a  7418           jz 0x19db0008a704  <+0x24>
0x19db0008a6ec     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db0008a6f6    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db0008a700    20  41ffd2         call r10
0x19db0008a703    23  cc             int3l
0x19db0008a704    24  8b59d0         movl rbx,[rcx-0x30]
0x19db0008a707    27  4903dd         REX.W addq rbx,r13
0x19db0008a70a    2a  f6430701       testb [rbx+0x7],0x1
0x19db0008a70e    2e  740d           jz 0x19db0008a71d  <+0x3d>
0x19db0008a710    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db0008a71a    3a  41ffe2         jmp r10
0x19db0008a71d    3d  55             push rbp
0x19db0008a71e    3e  4889e5         REX.W movq rbp,rsp
0x19db0008a721    41  56             push rsi
0x19db0008a722    42  57             push rdi
0x19db0008a723    43  50             push rax
0x19db0008a724    44  4881ecc8000000 REX.W subq rsp,0xc8
0x19db0008a72b    4b  488975d8       REX.W movq [rbp-0x28],rsi
0x19db0008a72f    4f  48897de0       REX.W movq [rbp-0x20],rdi
0x19db0008a733    53  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008a737    57  0f86ca2d0000   jna 0x19db0008d507  <+0x2e27>
0x19db0008a73d    5d  48b9f87d6d5555550000 REX.W movq rcx,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db0008a747    67  4c8b01         REX.W movq r8,[rcx]
0x19db0008a74a    6a  4d8d4828       REX.W leaq r9,[r8+0x28]
0x19db0008a74e    6e  49bb007e6d5555550000 REX.W movq r11,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db0008a758    78  4d390b         REX.W cmpq [r11],r9
0x19db0008a75b    7b  0f86df2d0000   jna 0x19db0008d540  <+0x2e60>
0x19db0008a761    81  4d8d4818       REX.W leaq r9,[r8+0x18]
0x19db0008a765    85  4c8909         REX.W movq [rcx],r9
0x19db0008a768    88  4983c001       REX.W addq r8,0x1
0x19db0008a76c    8c  4d8ba5d0000000 REX.W movq r12,[r13+0xd0] (root (fixed_array_map))
0x19db0008a773    93  458960ff       movl [r8-0x1],r12
0x19db0008a777    97  41c7400308000000 movl [r8+0x3],0x8
0x19db0008a77f    9f  4d8ba598000000 REX.W movq r12,[r13+0x98] (root (the_hole_value))
0x19db0008a786    a6  45896007       movl [r8+0x7],r12
0x19db0008a78a    aa  4589600b       movl [r8+0xb],r12
0x19db0008a78e    ae  4589600f       movl [r8+0xf],r12
0x19db0008a792    b2  45896013       movl [r8+0x13],r12
0x19db0008a796    b6  4d8d7110       REX.W leaq r14,[r9+0x10]
0x19db0008a79a    ba  4c8931         REX.W movq [rcx],r14
0x19db0008a79d    bd  4983c101       REX.W addq r9,0x1
0x19db0008a7a1    c1  41becd9f3008   movl r14,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008a7a7    c7  458971ff       movl [r9-0x1],r14
0x19db0008a7ab    cb  4d8bbd58010000 REX.W movq r15,[r13+0x158] (root (empty_fixed_array))
0x19db0008a7b2    d2  45897903       movl [r9+0x3],r15
0x19db0008a7b6    d6  45894107       movl [r9+0x7],r8
0x19db0008a7ba    da  41c7410b00000000 movl [r9+0xb],0x0
0x19db0008a7c2    e2  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db0008a7c6    e6  418b400f       movl rax,[r8+0xf]
0x19db0008a7ca    ea  4903c5         REX.W addq rax,r13
0x19db0008a7cd    ed  a801           test al,0x1
0x19db0008a7cf    ef  0f84bc3b0000   jz 0x19db0008e391  <+0x3cb1>
0x19db0008a7d5    f5  4c894dd0       REX.W movq [rbp-0x30],r9
0x19db0008a7d9    f9  488945c8       REX.W movq [rbp-0x38],rax
0x19db0008a7dd    fd  ba6ddc3008     movl rdx,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008a7e2   102  3950ff         cmpl [rax-0x1],rdx
0x19db0008a7e5   105  0f8437000000   jz 0x19db0008a822  <+0x142>
0x19db0008a7eb   10b  be45dc3008     movl rsi,0x830dc45      ;; (compressed) object: 0x19db0830dc45 <Map(PACKED_ELEMENTS)>
0x19db0008a7f0   110  3970ff         cmpl [rax-0x1],rsi
0x19db0008a7f3   113  0f859f3b0000   jnz 0x19db0008e398  <+0x3cb8>
0x19db0008a7f9   119  8b7003         movl rsi,[rax+0x3]
0x19db0008a7fc   11c  4903f5         REX.W addq rsi,r13
0x19db0008a7ff   11f  8950ff         movl [rax-0x1],rdx
0x19db0008a802   122  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0008a809   129  4823d8         REX.W andq rbx,rax
0x19db0008a80c   12c  f6430804       testb [rbx+0x8],0x4
0x19db0008a810   130  0f85343b0000   jnz 0x19db0008e34a  <+0x3c6a>
0x19db0008a816   136  c7461700000000 movl [rsi+0x17],0x0
0x19db0008a81d   13d  e90d000000     jmp 0x19db0008a82f  <+0x14f>
0x19db0008a822   142  8b7003         movl rsi,[rax+0x3]
0x19db0008a825   145  4903f5         REX.W addq rsi,r13
0x19db0008a828   148  c7461700000000 movl [rsi+0x17],0x0
0x19db0008a82f   14f  bb05000000     movl rbx,0x5
0x19db0008a834   154  bea59f3008     movl rsi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008a839   159  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008a83e   15e  e92d000000     jmp 0x19db0008a870  <+0x190>
0x19db0008a843   163  660f1f840000000000 nop
0x19db0008a84c   16c  0f1f4000       nop
0x19db0008a850   170  498bd9         REX.W movq rbx,r9
0x19db0008a853   173  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db0008a857   177  488b45c8       REX.W movq rax,[rbp-0x38]
0x19db0008a85b   17b  4d8bbd58010000 REX.W movq r15,[r13+0x158] (root (empty_fixed_array))
0x19db0008a862   182  488b0dd6feffff REX.W movq rcx,[rip+0xfffffed6]
0x19db0008a869   189  4d8ba598000000 REX.W movq r12,[r13+0x98] (root (the_hole_value))
0x19db0008a870   190  83fbff         cmpl rbx,0xff
0x19db0008a873   193  0f8eee040000   jle 0x19db0008ad67  <+0x687>
0x19db0008a879   199  418b5043       movl rdx,[r8+0x43]
0x19db0008a87d   19d  4903d5         REX.W addq rdx,r13
0x19db0008a880   1a0  458b4817       movl r9,[r8+0x17]
0x19db0008a884   1a4  4d03cd         REX.W addq r9,r13
0x19db0008a887   1a7  448b4003       movl r8,[rax+0x3]
0x19db0008a88b   1ab  4d03c5         REX.W addq r8,r13
0x19db0008a88e   1ae  458b400b       movl r8,[r8+0xb]
0x19db0008a892   1b2  4d03c5         REX.W addq r8,r13
0x19db0008a895   1b5  41f6c001       testb r8,0x1
0x19db0008a899   1b9  0f84003b0000   jz 0x19db0008e39f  <+0x3cbf>
0x19db0008a89f   1bf  413970ff       cmpl [r8-0x1],rsi
0x19db0008a8a3   1c3  0f85fd3a0000   jnz 0x19db0008e3a6  <+0x3cc6>
0x19db0008a8a9   1c9  418b4007       movl rax,[r8+0x7]
0x19db0008a8ad   1cd  4903c5         REX.W addq rax,r13
0x19db0008a8b0   1d0  458b400b       movl r8,[r8+0xb]
0x19db0008a8b4   1d4  41d1f8         sarl r8, 1
0x19db0008a8b7   1d7  413bd8         cmpl rbx,r8
0x19db0008a8ba   1da  0f83ed3a0000   jnc 0x19db0008e3ad  <+0x3ccd>
0x19db0008a8c0   1e0  4c8d049d07000000 REX.W leaq r8,[rbx*4+0x7]
0x19db0008a8c8   1e8  8b449807       movl rax,[rax+rbx*4+0x7]
0x19db0008a8cc   1ec  4903c5         REX.W addq rax,r13
0x19db0008a8cf   1ef  f6c201         testb rdx,0x1
0x19db0008a8d2   1f2  0f84dc3a0000   jz 0x19db0008e3b4  <+0x3cd4>
0x19db0008a8d8   1f8  4c8945b8       REX.W movq [rbp-0x48],r8
0x19db0008a8dc   1fc  448b42ff       movl r8,[rdx-0x1]
0x19db0008a8e0   200  4d03c5         REX.W addq r8,r13
0x19db0008a8e3   203  66418178072c04 cmpw [r8+0x7],0x42c
0x19db0008a8ea   20a  0f85cb3a0000   jnz 0x19db0008e3bb  <+0x3cdb>
0x19db0008a8f0   210  448b4213       movl r8,[rdx+0x13]
0x19db0008a8f4   214  4d03c5         REX.W addq r8,r13
0x19db0008a8f7   217  48895dc0       REX.W movq [rbp-0x40],rbx
0x19db0008a8fb   21b  48bbe9422f08db190000 REX.W movq rbx,0x19db082f42e9    ;; object: 0x19db082f42e9 <FeedbackCell[many closures]>
0x19db0008a905   225  493bd8         REX.W cmpq rbx,r8
0x19db0008a908   228  0f85b43a0000   jnz 0x19db0008e3c2  <+0x3ce2>
0x19db0008a90e   22e  448b420f       movl r8,[rdx+0xf]
0x19db0008a912   232  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db0008a91c   23c  4d3bd0         REX.W cmpq r10,r8
0x19db0008a91f   23f  7715           ja 0x19db0008a936  <+0x256>
0x19db0008a921   241  48ba0200000000000000 REX.W movq rdx,0x2
0x19db0008a92b   24b  4c8b15c6fdffff REX.W movq r10,[rip+0xfffffdc6]
0x19db0008a932   252  41ffd2         call r10
0x19db0008a935   255  cc             int3l
0x19db0008a936   256  488955a8       REX.W movq [rbp-0x58],rdx
0x19db0008a93a   25a  4c894590       REX.W movq [rbp-0x70],r8
0x19db0008a93e   25e  41f6c401       testb r12,0x1
0x19db0008a942   262  0f85212c0000   jnz 0x19db0008d569  <+0x2e89>
0x19db0008a948   268  4c89e3         REX.W movq rbx,r12
0x19db0008a94b   26b  d1fb           sarl rbx, 1
0x19db0008a94d   26d  c5832ac3       vcvtlsi2sd xmm0,xmm15,rbx
0x19db0008a951   271  488b19         REX.W movq rbx,[rcx]
0x19db0008a954   274  4c8d6338       REX.W leaq r12,[rbx+0x38]
0x19db0008a958   278  4d3923         REX.W cmpq [r11],r12
0x19db0008a95b   27b  0f86142c0000   jna 0x19db0008d575  <+0x2e95>
0x19db0008a961   281  4c8d6328       REX.W leaq r12,[rbx+0x28]
0x19db0008a965   285  4c8921         REX.W movq [rcx],r12
0x19db0008a968   288  4c8d4301       REX.W leaq r8,[rbx+0x1]
0x19db0008a96c   28c  4d8bb5d8010000 REX.W movq r14,[r13+0x1d8] (root (fixed_double_array_map))
0x19db0008a973   293  458970ff       movl [r8-0x1],r14
0x19db0008a977   297  41c7400308000000 movl [r8+0x3],0x8
0x19db0008a97f   29f  c4c17b114007   vmovsd [r8+0x7],xmm0
0x19db0008a985   2a5  c4c17b11400f   vmovsd [r8+0xf],xmm0
0x19db0008a98b   2ab  c4c17b114017   vmovsd [r8+0x17],xmm0
0x19db0008a991   2b1  c4c17b11401f   vmovsd [r8+0x1f],xmm0
0x19db0008a997   2b7  498d542410     REX.W leaq rdx,[r12+0x10]
0x19db0008a99c   2bc  488911         REX.W movq [rcx],rdx
0x19db0008a99f   2bf  4983c401       REX.W addq r12,0x1
0x19db0008a9a3   2c3  4d89e6         REX.W movq r14,r12
0x19db0008a9a6   2c6  41897eff       movl [r14-0x1],rdi
0x19db0008a9aa   2ca  45897e03       movl [r14+0x3],r15
0x19db0008a9ae   2ce  45894607       movl [r14+0x7],r8
0x19db0008a9b2   2d2  41c7460b00000000 movl [r14+0xb],0x0
0x19db0008a9ba   2da  41f6c101       testb r9,0x1
0x19db0008a9be   2de  0f84053a0000   jz 0x19db0008e3c9  <+0x3ce9>
0x19db0008a9c4   2e4  413971ff       cmpl [r9-0x1],rsi
0x19db0008a9c8   2e8  0f85023a0000   jnz 0x19db0008e3d0  <+0x3cf0>
0x19db0008a9ce   2ee  458b6107       movl r12,[r9+0x7]
0x19db0008a9d2   2f2  4d03e5         REX.W addq r12,r13
0x19db0008a9d5   2f5  418b510b       movl rdx,[r9+0xb]
0x19db0008a9d9   2f9  d1fa           sarl rdx, 1
0x19db0008a9db   2fb  83fa00         cmpl rdx,0x0
0x19db0008a9de   2fe  0f86f3390000   jna 0x19db0008e3d7  <+0x3cf7>
0x19db0008a9e4   304  418b542407     movl rdx,[r12+0x7]
0x19db0008a9e9   309  4903d5         REX.W addq rdx,r13
0x19db0008a9ec   30c  f6c201         testb rdx,0x1
0x19db0008a9ef   30f  0f84e9390000   jz 0x19db0008e3de  <+0x3cfe>
0x19db0008a9f5   315  397aff         cmpl [rdx-0x1],rdi
0x19db0008a9f8   318  0f85e7390000   jnz 0x19db0008e3e5  <+0x3d05>
0x19db0008a9fe   31e  448b6207       movl r12,[rdx+0x7]
0x19db0008aa02   322  4d03e5         REX.W addq r12,r13
0x19db0008aa05   325  8b520b         movl rdx,[rdx+0xb]
0x19db0008aa08   328  d1fa           sarl rdx, 1
0x19db0008aa0a   32a  83fa00         cmpl rdx,0x0
0x19db0008aa0d   32d  0f86d9390000   jna 0x19db0008e3ec  <+0x3d0c>
0x19db0008aa13   333  c4c17b10442407 vmovsd xmm0,[r12+0x7]
0x19db0008aa1a   33a  a801           test al,0x1
0x19db0008aa1c   33c  0f84d1390000   jz 0x19db0008e3f3  <+0x3d13>
0x19db0008aa22   342  3978ff         cmpl [rax-0x1],rdi
0x19db0008aa25   345  0f85cf390000   jnz 0x19db0008e3fa  <+0x3d1a>
0x19db0008aa2b   34b  8b4807         movl rcx,[rax+0x7]
0x19db0008aa2e   34e  4903cd         REX.W addq rcx,r13
0x19db0008aa31   351  448b780b       movl r15,[rax+0xb]
0x19db0008aa35   355  41d1ff         sarl r15, 1
0x19db0008aa38   358  4183ff00       cmpl r15,0x0
0x19db0008aa3c   35c  0f86bf390000   jna 0x19db0008e401  <+0x3d21>
0x19db0008aa42   362  83fa01         cmpl rdx,0x1
0x19db0008aa45   365  0f86bd390000   jna 0x19db0008e408  <+0x3d28>
0x19db0008aa4b   36b  c4c17b104c240f vmovsd xmm1,[r12+0xf]
0x19db0008aa52   372  4183ff01       cmpl r15,0x1
0x19db0008aa56   376  0f86b3390000   jna 0x19db0008e40f  <+0x3d2f>
0x19db0008aa5c   37c  83fa02         cmpl rdx,0x2
0x19db0008aa5f   37f  0f86b1390000   jna 0x19db0008e416  <+0x3d36>
0x19db0008aa65   385  c4c17b10542417 vmovsd xmm2,[r12+0x17]
0x19db0008aa6c   38c  4183ff02       cmpl r15,0x2
0x19db0008aa70   390  0f86a7390000   jna 0x19db0008e41d  <+0x3d3d>
0x19db0008aa76   396  c5f359490f     vmulsd xmm1,xmm1,[rcx+0xf]
0x19db0008aa7b   39b  c5fb594107     vmulsd xmm0,xmm0,[rcx+0x7]
0x19db0008aa80   3a0  c5eb595117     vmulsd xmm2,xmm2,[rcx+0x17]
0x19db0008aa85   3a5  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db0008aa89   3a9  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db0008aa8d   3ad  41c7460b02000000 movl [r14+0xb],0x2
0x19db0008aa95   3b5  c4c17b114007   vmovsd [r8+0x7],xmm0
0x19db0008aa9b   3bb  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008aa9f   3bf  0f86272b0000   jna 0x19db0008d5cc  <+0x2eec>
0x19db0008aaa5   3c5  b901000000     movl rcx,0x1
0x19db0008aaaa   3ca  4c8bc0         REX.W movq r8,rax
0x19db0008aaad   3cd  e911000000     jmp 0x19db0008aac3  <+0x3e3>
0x19db0008aab2   3d2  660f1f840000000000 nop
0x19db0008aabb   3db  0f1f440000     nop
0x19db0008aac0   3e0  4c89e1         REX.W movq rcx,r12
0x19db0008aac3   3e3  83f903         cmpl rcx,0x3
0x19db0008aac6   3e6  0f836c010000   jnc 0x19db0008ac38  <+0x558>
0x19db0008aacc   3ec  458b6107       movl r12,[r9+0x7]
0x19db0008aad0   3f0  4d03e5         REX.W addq r12,r13
0x19db0008aad3   3f3  458b790b       movl r15,[r9+0xb]
0x19db0008aad7   3f7  41d1ff         sarl r15, 1
0x19db0008aada   3fa  413bcf         cmpl rcx,r15
0x19db0008aadd   3fd  0f8341390000   jnc 0x19db0008e424  <+0x3d44>
0x19db0008aae3   403  418b448c07     movl rax,[r12+rcx*4+0x7]
0x19db0008aae8   408  4903c5         REX.W addq rax,r13
0x19db0008aaeb   40b  a801           test al,0x1
0x19db0008aaed   40d  0f8438390000   jz 0x19db0008e42b  <+0x3d4b>
0x19db0008aaf3   413  3978ff         cmpl [rax-0x1],rdi
0x19db0008aaf6   416  0f8536390000   jnz 0x19db0008e432  <+0x3d52>
0x19db0008aafc   41c  448b6007       movl r12,[rax+0x7]
0x19db0008ab00   420  4d03e5         REX.W addq r12,r13
0x19db0008ab03   423  448b780b       movl r15,[rax+0xb]
0x19db0008ab07   427  41d1ff         sarl r15, 1
0x19db0008ab0a   42a  4183ff00       cmpl r15,0x0
0x19db0008ab0e   42e  0f8625390000   jna 0x19db0008e439  <+0x3d59>
0x19db0008ab14   434  c4c17b10442407 vmovsd xmm0,[r12+0x7]
0x19db0008ab1b   43b  418b4007       movl rax,[r8+0x7]
0x19db0008ab1f   43f  4903c5         REX.W addq rax,r13
0x19db0008ab22   442  418b500b       movl rdx,[r8+0xb]
0x19db0008ab26   446  d1fa           sarl rdx, 1
0x19db0008ab28   448  83fa00         cmpl rdx,0x0
0x19db0008ab2b   44b  0f860f390000   jna 0x19db0008e440  <+0x3d60>
0x19db0008ab31   451  c5fb104807     vmovsd xmm1,[rax+0x7]
0x19db0008ab36   456  4183ff01       cmpl r15,0x1
0x19db0008ab3a   45a  0f8607390000   jna 0x19db0008e447  <+0x3d67>
0x19db0008ab40   460  c4c17b1054240f vmovsd xmm2,[r12+0xf]
0x19db0008ab47   467  83fa01         cmpl rdx,0x1
0x19db0008ab4a   46a  0f86fe380000   jna 0x19db0008e44e  <+0x3d6e>
0x19db0008ab50   470  c5fb10600f     vmovsd xmm4,[rax+0xf]
0x19db0008ab55   475  4183ff02       cmpl r15,0x2
0x19db0008ab59   479  0f86f6380000   jna 0x19db0008e455  <+0x3d75>
0x19db0008ab5f   47f  c4c17b106c2417 vmovsd xmm5,[r12+0x17]
0x19db0008ab66   486  83fa02         cmpl rdx,0x2
0x19db0008ab69   489  0f86ed380000   jna 0x19db0008e45c  <+0x3d7c>
0x19db0008ab6f   48f  c5fb107017     vmovsd xmm6,[rax+0x17]
0x19db0008ab74   494  458b6607       movl r12,[r14+0x7]
0x19db0008ab78   498  4d03e5         REX.W addq r12,r13
0x19db0008ab7b   49b  458b7e0b       movl r15,[r14+0xb]
0x19db0008ab7f   49f  418b442403     movl rax,[r12+0x3]
0x19db0008ab84   4a4  d1f8           sarl rax, 1
0x19db0008ab86   4a6  41d1ff         sarl r15, 1
0x19db0008ab89   4a9  418d5701       leal rdx,[r15+0x1]
0x19db0008ab8d   4ad  4c8b1580fdffff REX.W movq r10,[rip+0xfffffd80]
0x19db0008ab94   4b4  4c3bd2         REX.W cmpq r10,rdx
0x19db0008ab97   4b7  7712           ja 0x19db0008abab  <+0x4cb>
0x19db0008ab99   4b9  488b1583fdffff REX.W movq rdx,[rip+0xfffffd83]
0x19db0008aba0   4c0  4c8b1551fbffff REX.W movq r10,[rip+0xfffffb51]
0x19db0008aba7   4c7  41ffd2         call r10
0x19db0008abaa   4ca  cc             int3l
0x19db0008abab   4cb  3bca           cmpl rcx,rdx
0x19db0008abad   4cd  0f83b0380000   jnc 0x19db0008e463  <+0x3d83>
0x19db0008abb3   4d3  3bc8           cmpl rcx,rax
0x19db0008abb5   4d5  0f83652a0000   jnc 0x19db0008d620  <+0x2f40>
0x19db0008abbb   4db  4c89e0         REX.W movq rax,r12
0x19db0008abbe   4de  448d6101       leal r12,[rcx+0x1]
0x19db0008abc2   4e2  4c8b154bfdffff REX.W movq r10,[rip+0xfffffd4b]
0x19db0008abc9   4e9  4d39e2         REX.W cmpq r10,r12
0x19db0008abcc   4ec  7712           ja 0x19db0008abe0  <+0x500>
0x19db0008abce   4ee  488b154efdffff REX.W movq rdx,[rip+0xfffffd4e]
0x19db0008abd5   4f5  4c8b151cfbffff REX.W movq r10,[rip+0xfffffb1c]
0x19db0008abdc   4fc  41ffd2         call r10
0x19db0008abdf   4ff  cc             int3l
0x19db0008abe0   500  413bcf         cmpl rcx,r15
0x19db0008abe3   503  0f8226000000   jc 0x19db0008ac0f  <+0x52f>
0x19db0008abe9   509  478d3c24       leal r15,[r12+r12*1]
0x19db0008abed   50d  4c8b1520fdffff REX.W movq r10,[rip+0xfffffd20]
0x19db0008abf4   514  4d3bd7         REX.W cmpq r10,r15
0x19db0008abf7   517  7712           ja 0x19db0008ac0b  <+0x52b>
0x19db0008abf9   519  488b1523fdffff REX.W movq rdx,[rip+0xfffffd23]
0x19db0008ac00   520  4c8b15f1faffff REX.W movq r10,[rip+0xfffffaf1]
0x19db0008ac07   527  41ffd2         call r10
0x19db0008ac0a   52a  cc             int3l
0x19db0008ac0b   52b  45897e0b       movl [r14+0xb],r15
0x19db0008ac0f   52f  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db0008ac13   533  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db0008ac17   537  c5cb59cd       vmulsd xmm1,xmm6,xmm5
0x19db0008ac1b   53b  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db0008ac1f   53f  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db0008ac23   543  c5fb1144c807   vmovsd [rax+rcx*8+0x7],xmm0
0x19db0008ac29   549  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008ac2d   54d  0f878dfeffff   ja 0x19db0008aac0  <+0x3e0>
0x19db0008ac33   553  e9ca2a0000     jmp 0x19db0008d702  <+0x3022>
0x19db0008ac38   558  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008ac3c   55c  b9cd9f3008     movl rcx,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008ac41   561  413948ff       cmpl [r8-0x1],rcx
0x19db0008ac45   565  0f851f380000   jnz 0x19db0008e46a  <+0x3d8a>
0x19db0008ac4b   56b  458b4807       movl r9,[r8+0x7]
0x19db0008ac4f   56f  4d03cd         REX.W addq r9,r13
0x19db0008ac52   572  458b600b       movl r12,[r8+0xb]
0x19db0008ac56   576  458b7903       movl r15,[r9+0x3]
0x19db0008ac5a   57a  41d1ff         sarl r15, 1
0x19db0008ac5d   57d  418d8700040000 leal rax,[r15+0x400]
0x19db0008ac64   584  4c8b15a9fcffff REX.W movq r10,[rip+0xfffffca9]
0x19db0008ac6b   58b  4c3bd0         REX.W cmpq r10,rax
0x19db0008ac6e   58e  7712           ja 0x19db0008ac82  <+0x5a2>
0x19db0008ac70   590  488b15acfcffff REX.W movq rdx,[rip+0xfffffcac]
0x19db0008ac77   597  4c8b157afaffff REX.W movq r10,[rip+0xfffffa7a]
0x19db0008ac7e   59e  41ffd2         call r10
0x19db0008ac81   5a1  cc             int3l
0x19db0008ac82   5a2  488b5dc0       REX.W movq rbx,[rbp-0x40]
0x19db0008ac86   5a6  3bd8           cmpl rbx,rax
0x19db0008ac88   5a8  0f83e3370000   jnc 0x19db0008e471  <+0x3d91>
0x19db0008ac8e   5ae  413bdf         cmpl rbx,r15
0x19db0008ac91   5b1  0f83c12a0000   jnc 0x19db0008d758  <+0x3078>
0x19db0008ac97   5b7  458b79ff       movl r15,[r9-0x1]
0x19db0008ac9b   5bb  4c8b1572fcffff REX.W movq r10,[rip+0xfffffc72]
0x19db0008aca2   5c2  4d3bd7         REX.W cmpq r10,r15
0x19db0008aca5   5c5  7712           ja 0x19db0008acb9  <+0x5d9>
0x19db0008aca7   5c7  488b1575fcffff REX.W movq rdx,[rip+0xfffffc75]
0x19db0008acae   5ce  4c8b1543faffff REX.W movq r10,[rip+0xfffffa43]
0x19db0008acb5   5d5  41ffd2         call r10
0x19db0008acb8   5d8  cc             int3l
0x19db0008acb9   5d9  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db0008acc0   5e0  0f85102b0000   jnz 0x19db0008d7d6  <+0x30f6>
0x19db0008acc6   5e6  41d1fc         sarl r12, 1
0x19db0008acc9   5e9  4439e3         cmpl rbx,r12
0x19db0008accc   5ec  0f8247000000   jc 0x19db0008ad19  <+0x639>
0x19db0008acd2   5f2  448d6301       leal r12,[rbx+0x1]
0x19db0008acd6   5f6  4c8b1537fcffff REX.W movq r10,[rip+0xfffffc37]
0x19db0008acdd   5fd  4d39e2         REX.W cmpq r10,r12
0x19db0008ace0   600  7712           ja 0x19db0008acf4  <+0x614>
0x19db0008ace2   602  488b153afcffff REX.W movq rdx,[rip+0xfffffc3a]
0x19db0008ace9   609  4c8b1508faffff REX.W movq r10,[rip+0xfffffa08]
0x19db0008acf0   610  41ffd2         call r10
0x19db0008acf3   613  cc             int3l
0x19db0008acf4   614  41d1e4         shll r12, 1
0x19db0008acf7   617  4c8b1516fcffff REX.W movq r10,[rip+0xfffffc16]
0x19db0008acfe   61e  4d39e2         REX.W cmpq r10,r12
0x19db0008ad01   621  7712           ja 0x19db0008ad15  <+0x635>
0x19db0008ad03   623  488b1519fcffff REX.W movq rdx,[rip+0xfffffc19]
0x19db0008ad0a   62a  4c8b15e7f9ffff REX.W movq r10,[rip+0xfffff9e7]
0x19db0008ad11   631  41ffd2         call r10
0x19db0008ad14   634  cc             int3l
0x19db0008ad15   635  4589600b       movl [r8+0xb],r12
0x19db0008ad19   639  4c8b65b8       REX.W movq r12,[rbp-0x48]
0x19db0008ad1d   63d  47893421       movl [r9+r12*1],r14
0x19db0008ad21   641  49c7c70000fcff REX.W movq r15,0xfffc0000
0x19db0008ad28   648  4d23f9         REX.W andq r15,r9
0x19db0008ad2b   64b  41f6470804     testb [r15+0x8],0x4
0x19db0008ad30   650  0f85cd350000   jnz 0x19db0008e303  <+0x3c23>
0x19db0008ad36   656  448d4bff       leal r9,[rbx-0x1]
0x19db0008ad3a   65a  4c8b15d3fbffff REX.W movq r10,[rip+0xfffffbd3]
0x19db0008ad41   661  4d3bd1         REX.W cmpq r10,r9
0x19db0008ad44   664  7712           ja 0x19db0008ad58  <+0x678>
0x19db0008ad46   666  488b15d6fbffff REX.W movq rdx,[rip+0xfffffbd6]
0x19db0008ad4d   66d  4c8b15a4f9ffff REX.W movq r10,[rip+0xfffff9a4]
0x19db0008ad54   674  41ffd2         call r10
0x19db0008ad57   677  cc             int3l
0x19db0008ad58   678  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008ad5c   67c  0f87eefaffff   ja 0x19db0008a850  <+0x170>
0x19db0008ad62   682  e9ba2a0000     jmp 0x19db0008d821  <+0x3141>
0x19db0008ad67   687  4c8b65d0       REX.W movq r12,[rbp-0x30]
0x19db0008ad6b   68b  41b9cd9f3008   movl r9,0x8309fcd       ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008ad71   691  45394c24ff     cmpl [r12-0x1],r9
0x19db0008ad76   696  0f85fc360000   jnz 0x19db0008e478  <+0x3d98>
0x19db0008ad7c   69c  458b742407     movl r14,[r12+0x7]
0x19db0008ad81   6a1  4d03f5         REX.W addq r14,r13
0x19db0008ad84   6a4  418b54240b     movl rdx,[r12+0xb]
0x19db0008ad89   6a9  d1fa           sarl rdx, 1
0x19db0008ad8b   6ab  83fa00         cmpl rdx,0x0
0x19db0008ad8e   6ae  0f86eb360000   jna 0x19db0008e47f  <+0x3d9f>
0x19db0008ad94   6b4  418b4e07       movl rcx,[r14+0x7]
0x19db0008ad98   6b8  4903cd         REX.W addq rcx,r13
0x19db0008ad9b   6bb  41398d98000000 cmpl [r13+0x98] (root (the_hole_value)),rcx
0x19db0008ada2   6c2  0f84c02a0000   jz 0x19db0008d868  <+0x3188>
0x19db0008ada8   6c8  f6c101         testb rcx,0x1
0x19db0008adab   6cb  0f84d5360000   jz 0x19db0008e486  <+0x3da6>
0x19db0008adb1   6d1  3979ff         cmpl [rcx-0x1],rdi
0x19db0008adb4   6d4  0f85d3360000   jnz 0x19db0008e48d  <+0x3dad>
0x19db0008adba   6da  448b4907       movl r9,[rcx+0x7]
0x19db0008adbe   6de  4d03cd         REX.W addq r9,r13
0x19db0008adc1   6e1  8b490b         movl rcx,[rcx+0xb]
0x19db0008adc4   6e4  d1f9           sarl rcx, 1
0x19db0008adc6   6e6  83f902         cmpl rcx,0x2
0x19db0008adc9   6e9  0f86c5360000   jna 0x19db0008e494  <+0x3db4>
0x19db0008adcf   6ef  c4c17b104117   vmovsd xmm0,[r9+0x17]
0x19db0008add5   6f5  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008add9   6f9  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008addd   6fd  0f87f8260000   ja 0x19db0008d4db  <+0x2dfb>
0x19db0008ade3   703  83fa01         cmpl rdx,0x1
0x19db0008ade6   706  0f86af360000   jna 0x19db0008e49b  <+0x3dbb>
0x19db0008adec   70c  418b4e0b       movl rcx,[r14+0xb]
0x19db0008adf0   710  4903cd         REX.W addq rcx,r13
0x19db0008adf3   713  41398d98000000 cmpl [r13+0x98] (root (the_hole_value)),rcx
0x19db0008adfa   71a  0f84742a0000   jz 0x19db0008d874  <+0x3194>
0x19db0008ae00   720  f6c101         testb rcx,0x1
0x19db0008ae03   723  0f8499360000   jz 0x19db0008e4a2  <+0x3dc2>
0x19db0008ae09   729  3979ff         cmpl [rcx-0x1],rdi
0x19db0008ae0c   72c  0f8597360000   jnz 0x19db0008e4a9  <+0x3dc9>
0x19db0008ae12   732  448b4907       movl r9,[rcx+0x7]
0x19db0008ae16   736  4d03cd         REX.W addq r9,r13
0x19db0008ae19   739  8b490b         movl rcx,[rcx+0xb]
0x19db0008ae1c   73c  d1f9           sarl rcx, 1
0x19db0008ae1e   73e  83f902         cmpl rcx,0x2
0x19db0008ae21   741  0f8689360000   jna 0x19db0008e4b0  <+0x3dd0>
0x19db0008ae27   747  c4c17b104117   vmovsd xmm0,[r9+0x17]
0x19db0008ae2d   74d  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008ae31   751  0f8711000000   ja 0x19db0008ae48  <+0x768>
0x19db0008ae37   757  498bc8         REX.W movq rcx,r8
0x19db0008ae3a   75a  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008ae40   760  4c8bde         REX.W movq r11,rsi
0x19db0008ae43   763  e9c1070000     jmp 0x19db0008b609  <+0xf29>
0x19db0008ae48   768  488bc8         REX.W movq rcx,rax
0x19db0008ae4b   76b  448b4903       movl r9,[rcx+0x3]
0x19db0008ae4f   76f  4d03cd         REX.W addq r9,r13
0x19db0008ae52   772  458b490f       movl r9,[r9+0xf]
0x19db0008ae56   776  4d03cd         REX.W addq r9,r13
0x19db0008ae59   779  41f6c101       testb r9,0x1
0x19db0008ae5d   77d  0f8454360000   jz 0x19db0008e4b7  <+0x3dd7>
0x19db0008ae63   783  4c8bf6         REX.W movq r14,rsi
0x19db0008ae66   786  453971ff       cmpl [r9-0x1],r14
0x19db0008ae6a   78a  0f854e360000   jnz 0x19db0008e4be  <+0x3dde>
0x19db0008ae70   790  418b4107       movl rax,[r9+0x7]
0x19db0008ae74   794  4903c5         REX.W addq rax,r13
0x19db0008ae77   797  458b490b       movl r9,[r9+0xb]
0x19db0008ae7b   79b  41d1f9         sarl r9, 1
0x19db0008ae7e   79e  4183f902       cmpl r9,0x2
0x19db0008ae82   7a2  0f863d360000   jna 0x19db0008e4c5  <+0x3de5>
0x19db0008ae88   7a8  448b480f       movl r9,[rax+0xf]
0x19db0008ae8c   7ac  4d03cd         REX.W addq r9,r13
0x19db0008ae8f   7af  41f6c101       testb r9,0x1
0x19db0008ae93   7b3  0f840f2a0000   jz 0x19db0008d8a8  <+0x31c8>
0x19db0008ae99   7b9  45398db0000000 cmpl [r13+0xb0] (root (false_value)),r9
0x19db0008aea0   7c0  0f843d000000   jz 0x19db0008aee3  <+0x803>
0x19db0008aea6   7c6  45398db8000000 cmpl [r13+0xb8] (root (empty_string)),r9
0x19db0008aead   7cd  0f8430000000   jz 0x19db0008aee3  <+0x803>
0x19db0008aeb3   7d3  418b41ff       movl rax,[r9-0x1]
0x19db0008aeb7   7d7  4903c5         REX.W addq rax,r13
0x19db0008aeba   7da  f6400910       testb [rax+0x9],0x10
0x19db0008aebe   7de  0f851f000000   jnz 0x19db0008aee3  <+0x803>
0x19db0008aec4   7e4  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db0008aecb   7eb  0f84c2290000   jz 0x19db0008d893  <+0x31b3>
0x19db0008aed1   7f1  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db0008aed8   7f8  0f84a2290000   jz 0x19db0008d880  <+0x31a0>
0x19db0008aede   7fe  e94f010000     jmp 0x19db0008b032  <+0x952>
0x19db0008aee3   803  458b482b       movl r9,[r8+0x2b]
0x19db0008aee7   807  4d03cd         REX.W addq r9,r13
0x19db0008aeea   80a  8b4107         movl rax,[rcx+0x7]
0x19db0008aeed   80d  4903c5         REX.W addq rax,r13
0x19db0008aef0   810  8b490b         movl rcx,[rcx+0xb]
0x19db0008aef3   813  d1f9           sarl rcx, 1
0x19db0008aef5   815  83f903         cmpl rcx,0x3
0x19db0008aef8   818  0f86ce350000   jna 0x19db0008e4cc  <+0x3dec>
0x19db0008aefe   81e  8b5013         movl rdx,[rax+0x13]
0x19db0008af01   821  4903d5         REX.W addq rdx,r13
0x19db0008af04   824  83f902         cmpl rcx,0x2
0x19db0008af07   827  0f86c6350000   jna 0x19db0008e4d3  <+0x3df3>
0x19db0008af0d   82d  8b480f         movl rcx,[rax+0xf]
0x19db0008af10   830  4903cd         REX.W addq rcx,r13
0x19db0008af13   833  41f6c101       testb r9,0x1
0x19db0008af17   837  0f84bd350000   jz 0x19db0008e4da  <+0x3dfa>
0x19db0008af1d   83d  418b41ff       movl rax,[r9-0x1]
0x19db0008af21   841  4903c5         REX.W addq rax,r13
0x19db0008af24   844  668178072c04   cmpw [rax+0x7],0x42c
0x19db0008af2a   84a  0f85b1350000   jnz 0x19db0008e4e1  <+0x3e01>
0x19db0008af30   850  418b4113       movl rax,[r9+0x13]
0x19db0008af34   854  4903c5         REX.W addq rax,r13
0x19db0008af37   857  48bea1422f08db190000 REX.W movq rsi,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008af41   861  483bf0         REX.W cmpq rsi,rax
0x19db0008af44   864  0f859e350000   jnz 0x19db0008e4e8  <+0x3e08>
0x19db0008af4a   86a  51             push rcx
0x19db0008af4b   86b  52             push rdx
0x19db0008af4c   86c  498b8d90000000 REX.W movq rcx,[r13+0x90] (root (undefined_value))
0x19db0008af53   873  51             push rcx
0x19db0008af54   874  b802000000     movl rax,0x2
0x19db0008af59   879  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008af63   883  498bce         REX.W movq rcx,r14
0x19db0008af66   886  4c8bf7         REX.W movq r14,rdi
0x19db0008af69   889  498bf9         REX.W movq rdi,r9
0x19db0008af6c   88c  4c8bc8         REX.W movq r9,rax
0x19db0008af6f   88f  49ba8079b8f5ff7f0000 REX.W movq r10,0x7ffff5b87980  (Call_ReceiverIsNullOrUndefined)    ;; off heap target
0x19db0008af79   899  41ffd2         call r10
0x19db0008af7c   89c  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008af80   8a0  448b410f       movl r8,[rcx+0xf]
0x19db0008af84   8a4  4d03c5         REX.W addq r8,r13
0x19db0008af87   8a7  41f6c001       testb r8,0x1
0x19db0008af8b   8ab  0f8465350000   jz 0x19db0008e4f6  <+0x3e16>
0x19db0008af91   8b1  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008af97   8b7  453948ff       cmpl [r8-0x1],r9
0x19db0008af9b   8bb  0f855c350000   jnz 0x19db0008e4fd  <+0x3e1d>
0x19db0008afa1   8c1  458b6003       movl r12,[r8+0x3]
0x19db0008afa5   8c5  4d03e5         REX.W addq r12,r13
0x19db0008afa8   8c8  418b44240f     movl rax,[r12+0xf]
0x19db0008afad   8cd  4903c5         REX.W addq rax,r13
0x19db0008afb0   8d0  a801           test al,0x1
0x19db0008afb2   8d2  0f844c350000   jz 0x19db0008e504  <+0x3e24>
0x19db0008afb8   8d8  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008afbe   8de  443958ff       cmpl [rax-0x1],r11
0x19db0008afc2   8e2  0f8543350000   jnz 0x19db0008e50b  <+0x3e2b>
0x19db0008afc8   8e8  448b6007       movl r12,[rax+0x7]
0x19db0008afcc   8ec  4d03e5         REX.W addq r12,r13
0x19db0008afcf   8ef  448b700b       movl r14,[rax+0xb]
0x19db0008afd3   8f3  41d1fe         sarl r14, 1
0x19db0008afd6   8f6  4183fe02       cmpl r14,0x2
0x19db0008afda   8fa  0f8632350000   jna 0x19db0008e512  <+0x3e32>
0x19db0008afe0   900  458b4424ff     movl r8,[r12-0x1]
0x19db0008afe5   905  4c8b1528f9ffff REX.W movq r10,[rip+0xfffff928]
0x19db0008afec   90c  4d3bd0         REX.W cmpq r10,r8
0x19db0008afef   90f  7712           ja 0x19db0008b003  <+0x923>
0x19db0008aff1   911  488b152bf9ffff REX.W movq rdx,[rip+0xfffff92b]
0x19db0008aff8   918  4c8b15f9f6ffff REX.W movq r10,[rip+0xfffff6f9]
0x19db0008afff   91f  41ffd2         call r10
0x19db0008b002   922  cc             int3l
0x19db0008b003   923  453985d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r8
0x19db0008b00a   92a  0f85a7280000   jnz 0x19db0008d8b7  <+0x31d7>
0x19db0008b010   930  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db0008b017   937  458944240f     movl [r12+0xf],r8
0x19db0008b01c   93c  4c8bc1         REX.W movq r8,rcx
0x19db0008b01f   93f  4c8b65d0       REX.W movq r12,[rbp-0x30]
0x19db0008b023   943  4d8bf3         REX.W movq r14,r11
0x19db0008b026   946  4c8b1d23f7ffff REX.W movq r11,[rip+0xfffff723]
0x19db0008b02d   94d  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008b032   952  498bc8         REX.W movq rcx,r8
0x19db0008b035   955  448b410f       movl r8,[rcx+0xf]
0x19db0008b039   959  4d03c5         REX.W addq r8,r13
0x19db0008b03c   95c  41f6c001       testb r8,0x1
0x19db0008b040   960  0f84d3340000   jz 0x19db0008e519  <+0x3e39>
0x19db0008b046   966  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008b04c   96c  453948ff       cmpl [r8-0x1],r9
0x19db0008b050   970  0f85ca340000   jnz 0x19db0008e520  <+0x3e40>
0x19db0008b056   976  458b7803       movl r15,[r8+0x3]
0x19db0008b05a   97a  4d03fd         REX.W addq r15,r13
0x19db0008b05d   97d  458b7f0f       movl r15,[r15+0xf]
0x19db0008b061   981  4d03fd         REX.W addq r15,r13
0x19db0008b064   984  41f6c701       testb r15,0x1
0x19db0008b068   988  0f84b9340000   jz 0x19db0008e527  <+0x3e47>
0x19db0008b06e   98e  453977ff       cmpl [r15-0x1],r14
0x19db0008b072   992  0f85b6340000   jnz 0x19db0008e52e  <+0x3e4e>
0x19db0008b078   998  418b4707       movl rax,[r15+0x7]
0x19db0008b07c   99c  4903c5         REX.W addq rax,r13
0x19db0008b07f   99f  458b7f0b       movl r15,[r15+0xb]
0x19db0008b083   9a3  41d1ff         sarl r15, 1
0x19db0008b086   9a6  4183ff09       cmpl r15,0x9
0x19db0008b08a   9aa  0f86a5340000   jna 0x19db0008e535  <+0x3e55>
0x19db0008b090   9b0  448b782b       movl r15,[rax+0x2b]
0x19db0008b094   9b4  4d03fd         REX.W addq r15,r13
0x19db0008b097   9b7  41f6c701       testb r15,0x1
0x19db0008b09b   9bb  0f8466280000   jz 0x19db0008d907  <+0x3227>
0x19db0008b0a1   9c1  4539bdb0000000 cmpl [r13+0xb0] (root (false_value)),r15
0x19db0008b0a8   9c8  0f843d000000   jz 0x19db0008b0eb  <+0xa0b>
0x19db0008b0ae   9ce  4539bdb8000000 cmpl [r13+0xb8] (root (empty_string)),r15
0x19db0008b0b5   9d5  0f8430000000   jz 0x19db0008b0eb  <+0xa0b>
0x19db0008b0bb   9db  418b47ff       movl rax,[r15-0x1]
0x19db0008b0bf   9df  4903c5         REX.W addq rax,r13
0x19db0008b0c2   9e2  f6400910       testb [rax+0x9],0x10
0x19db0008b0c6   9e6  0f851f000000   jnz 0x19db0008b0eb  <+0xa0b>
0x19db0008b0cc   9ec  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db0008b0d3   9f3  0f8415280000   jz 0x19db0008d8ee  <+0x320e>
0x19db0008b0d9   9f9  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db0008b0e0   a00  0f84f5270000   jz 0x19db0008d8db  <+0x31fb>
0x19db0008b0e6   a06  e93b010000     jmp 0x19db0008b226  <+0xb46>
0x19db0008b0eb   a0b  448b792b       movl r15,[rcx+0x2b]
0x19db0008b0ef   a0f  4d03fd         REX.W addq r15,r13
0x19db0008b0f2   a12  418b4007       movl rax,[r8+0x7]
0x19db0008b0f6   a16  4903c5         REX.W addq rax,r13
0x19db0008b0f9   a19  418b500b       movl rdx,[r8+0xb]
0x19db0008b0fd   a1d  d1fa           sarl rdx, 1
0x19db0008b0ff   a1f  83fa02         cmpl rdx,0x2
0x19db0008b102   a22  0f8634340000   jna 0x19db0008e53c  <+0x3e5c>
0x19db0008b108   a28  8b700f         movl rsi,[rax+0xf]
0x19db0008b10b   a2b  4903f5         REX.W addq rsi,r13
0x19db0008b10e   a2e  83fa06         cmpl rdx,0x6
0x19db0008b111   a31  0f862c340000   jna 0x19db0008e543  <+0x3e63>
0x19db0008b117   a37  8b401f         movl rax,[rax+0x1f]
0x19db0008b11a   a3a  4903c5         REX.W addq rax,r13
0x19db0008b11d   a3d  41f6c701       testb r15,0x1
0x19db0008b121   a41  0f8423340000   jz 0x19db0008e54a  <+0x3e6a>
0x19db0008b127   a47  418b57ff       movl rdx,[r15-0x1]
0x19db0008b12b   a4b  4903d5         REX.W addq rdx,r13
0x19db0008b12e   a4e  66817a072c04   cmpw [rdx+0x7],0x42c
0x19db0008b134   a54  0f8517340000   jnz 0x19db0008e551  <+0x3e71>
0x19db0008b13a   a5a  418b5713       movl rdx,[r15+0x13]
0x19db0008b13e   a5e  4903d5         REX.W addq rdx,r13
0x19db0008b141   a61  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008b14b   a6b  483bda         REX.W cmpq rbx,rdx
0x19db0008b14e   a6e  0f8504340000   jnz 0x19db0008e558  <+0x3e78>
0x19db0008b154   a74  50             push rax
0x19db0008b155   a75  56             push rsi
0x19db0008b156   a76  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db0008b15d   a7d  4150           push r8
0x19db0008b15f   a7f  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008b169   a89  4c8bc7         REX.W movq r8,rdi
0x19db0008b16c   a8c  498bff         REX.W movq rdi,r15
0x19db0008b16f   a8f  b802000000     movl rax,0x2
0x19db0008b174   a94  4c8b15f6fdffff REX.W movq r10,[rip+0xfffffdf6]
0x19db0008b17b   a9b  41ffd2         call r10
0x19db0008b17e   a9e  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008b182   aa2  448b410f       movl r8,[rcx+0xf]
0x19db0008b186   aa6  4d03c5         REX.W addq r8,r13
0x19db0008b189   aa9  41f6c001       testb r8,0x1
0x19db0008b18d   aad  0f84d3330000   jz 0x19db0008e566  <+0x3e86>
0x19db0008b193   ab3  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008b199   ab9  453948ff       cmpl [r8-0x1],r9
0x19db0008b19d   abd  0f85ca330000   jnz 0x19db0008e56d  <+0x3e8d>
0x19db0008b1a3   ac3  458b6003       movl r12,[r8+0x3]
0x19db0008b1a7   ac7  4d03e5         REX.W addq r12,r13
0x19db0008b1aa   aca  458b64240f     movl r12,[r12+0xf]
0x19db0008b1af   acf  4d03e5         REX.W addq r12,r13
0x19db0008b1b2   ad2  41f6c401       testb r12,0x1
0x19db0008b1b6   ad6  0f84b8330000   jz 0x19db0008e574  <+0x3e94>
0x19db0008b1bc   adc  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008b1c2   ae2  45395c24ff     cmpl [r12-0x1],r11
0x19db0008b1c7   ae7  0f85ae330000   jnz 0x19db0008e57b  <+0x3e9b>
0x19db0008b1cd   aed  418b442407     movl rax,[r12+0x7]
0x19db0008b1d2   af2  4903c5         REX.W addq rax,r13
0x19db0008b1d5   af5  448b70ff       movl r14,[rax-0x1]
0x19db0008b1d9   af9  4c8b1534f7ffff REX.W movq r10,[rip+0xfffff734]
0x19db0008b1e0   b00  4d3bd6         REX.W cmpq r10,r14
0x19db0008b1e3   b03  7712           ja 0x19db0008b1f7  <+0xb17>
0x19db0008b1e5   b05  488b1537f7ffff REX.W movq rdx,[rip+0xfffff737]
0x19db0008b1ec   b0c  4c8b1505f5ffff REX.W movq r10,[rip+0xfffff505]
0x19db0008b1f3   b13  41ffd2         call r10
0x19db0008b1f6   b16  cc             int3l
0x19db0008b1f7   b17  4539b5d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r14
0x19db0008b1fe   b1e  0f857e330000   jnz 0x19db0008e582  <+0x3ea2>
0x19db0008b204   b24  458b64240b     movl r12,[r12+0xb]
0x19db0008b209   b29  41d1fc         sarl r12, 1
0x19db0008b20c   b2c  4183fc09       cmpl r12,0x9
0x19db0008b210   b30  0f8673330000   jna 0x19db0008e589  <+0x3ea9>
0x19db0008b216   b36  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db0008b21d   b3d  4489402b       movl [rax+0x2b],r8
0x19db0008b221   b41  e903000000     jmp 0x19db0008b229  <+0xb49>
0x19db0008b226   b46  4d8bde         REX.W movq r11,r14
0x19db0008b229   b49  448b410f       movl r8,[rcx+0xf]
0x19db0008b22d   b4d  4d03c5         REX.W addq r8,r13
0x19db0008b230   b50  41f6c001       testb r8,0x1
0x19db0008b234   b54  0f8456330000   jz 0x19db0008e590  <+0x3eb0>
0x19db0008b23a   b5a  453948ff       cmpl [r8-0x1],r9
0x19db0008b23e   b5e  0f8553330000   jnz 0x19db0008e597  <+0x3eb7>
0x19db0008b244   b64  458b6003       movl r12,[r8+0x3]
0x19db0008b248   b68  4d03e5         REX.W addq r12,r13
0x19db0008b24b   b6b  458b64240f     movl r12,[r12+0xf]
0x19db0008b250   b70  4d03e5         REX.W addq r12,r13
0x19db0008b253   b73  41f6c401       testb r12,0x1
0x19db0008b257   b77  0f8441330000   jz 0x19db0008e59e  <+0x3ebe>
0x19db0008b25d   b7d  45395c24ff     cmpl [r12-0x1],r11
0x19db0008b262   b82  0f853d330000   jnz 0x19db0008e5a5  <+0x3ec5>
0x19db0008b268   b88  418b442407     movl rax,[r12+0x7]
0x19db0008b26d   b8d  4903c5         REX.W addq rax,r13
0x19db0008b270   b90  458b64240b     movl r12,[r12+0xb]
0x19db0008b275   b95  41d1fc         sarl r12, 1
0x19db0008b278   b98  4183fc06       cmpl r12,0x6
0x19db0008b27c   b9c  0f862a330000   jna 0x19db0008e5ac  <+0x3ecc>
0x19db0008b282   ba2  448b601f       movl r12,[rax+0x1f]
0x19db0008b286   ba6  4d03e5         REX.W addq r12,r13
0x19db0008b289   ba9  41f6c401       testb r12,0x1
0x19db0008b28d   bad  0f84b1260000   jz 0x19db0008d944  <+0x3264>
0x19db0008b293   bb3  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db0008b29a   bba  0f843e000000   jz 0x19db0008b2de  <+0xbfe>
0x19db0008b2a0   bc0  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db0008b2a7   bc7  0f8431000000   jz 0x19db0008b2de  <+0xbfe>
0x19db0008b2ad   bcd  418b4424ff     movl rax,[r12-0x1]
0x19db0008b2b2   bd2  4903c5         REX.W addq rax,r13
0x19db0008b2b5   bd5  f6400910       testb [rax+0x9],0x10
0x19db0008b2b9   bd9  0f851f000000   jnz 0x19db0008b2de  <+0xbfe>
0x19db0008b2bf   bdf  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db0008b2c6   be6  0f845e260000   jz 0x19db0008d92a  <+0x324a>
0x19db0008b2cc   bec  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db0008b2d3   bf3  0f843d260000   jz 0x19db0008d916  <+0x3236>
0x19db0008b2d9   bf9  e93e010000     jmp 0x19db0008b41c  <+0xd3c>
0x19db0008b2de   bfe  8b792b         movl rdi,[rcx+0x2b]
0x19db0008b2e1   c01  4903fd         REX.W addq rdi,r13
0x19db0008b2e4   c04  458b6007       movl r12,[r8+0x7]
0x19db0008b2e8   c08  4d03e5         REX.W addq r12,r13
0x19db0008b2eb   c0b  458b700b       movl r14,[r8+0xb]
0x19db0008b2ef   c0f  41d1fe         sarl r14, 1
0x19db0008b2f2   c12  4183fe06       cmpl r14,0x6
0x19db0008b2f6   c16  0f86b7320000   jna 0x19db0008e5b3  <+0x3ed3>
0x19db0008b2fc   c1c  418b44241f     movl rax,[r12+0x1f]
0x19db0008b301   c21  4903c5         REX.W addq rax,r13
0x19db0008b304   c24  4183fe07       cmpl r14,0x7
0x19db0008b308   c28  0f86ac320000   jna 0x19db0008e5ba  <+0x3eda>
0x19db0008b30e   c2e  458b642423     movl r12,[r12+0x23]
0x19db0008b313   c33  4d03e5         REX.W addq r12,r13
0x19db0008b316   c36  40f6c701       testb rdi,0x1
0x19db0008b31a   c3a  0f84a1320000   jz 0x19db0008e5c1  <+0x3ee1>
0x19db0008b320   c40  448b77ff       movl r14,[rdi-0x1]
0x19db0008b324   c44  4d03f5         REX.W addq r14,r13
0x19db0008b327   c47  6641817e072c04 cmpw [r14+0x7],0x42c
0x19db0008b32e   c4e  0f8594320000   jnz 0x19db0008e5c8  <+0x3ee8>
0x19db0008b334   c54  448b7713       movl r14,[rdi+0x13]
0x19db0008b338   c58  4d03f5         REX.W addq r14,r13
0x19db0008b33b   c5b  49bfa1422f08db190000 REX.W movq r15,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008b345   c65  4d3bfe         REX.W cmpq r15,r14
0x19db0008b348   c68  0f8581320000   jnz 0x19db0008e5cf  <+0x3eef>
0x19db0008b34e   c6e  4154           push r12
0x19db0008b350   c70  50             push rax
0x19db0008b351   c71  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db0008b358   c78  4150           push r8
0x19db0008b35a   c7a  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008b364   c84  b802000000     movl rax,0x2
0x19db0008b369   c89  41b8559f3008   movl r8,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008b36f   c8f  4c8b15fbfbffff REX.W movq r10,[rip+0xfffffbfb]
0x19db0008b376   c96  41ffd2         call r10
0x19db0008b379   c99  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008b37d   c9d  448b410f       movl r8,[rcx+0xf]
0x19db0008b381   ca1  4d03c5         REX.W addq r8,r13
0x19db0008b384   ca4  41f6c001       testb r8,0x1
0x19db0008b388   ca8  0f844f320000   jz 0x19db0008e5dd  <+0x3efd>
0x19db0008b38e   cae  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008b394   cb4  453948ff       cmpl [r8-0x1],r9
0x19db0008b398   cb8  0f8546320000   jnz 0x19db0008e5e4  <+0x3f04>
0x19db0008b39e   cbe  458b6003       movl r12,[r8+0x3]
0x19db0008b3a2   cc2  4d03e5         REX.W addq r12,r13
0x19db0008b3a5   cc5  458b64240f     movl r12,[r12+0xf]
0x19db0008b3aa   cca  4d03e5         REX.W addq r12,r13
0x19db0008b3ad   ccd  41f6c401       testb r12,0x1
0x19db0008b3b1   cd1  0f8434320000   jz 0x19db0008e5eb  <+0x3f0b>
0x19db0008b3b7   cd7  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008b3bd   cdd  45395c24ff     cmpl [r12-0x1],r11
0x19db0008b3c2   ce2  0f852a320000   jnz 0x19db0008e5f2  <+0x3f12>
0x19db0008b3c8   ce8  418b442407     movl rax,[r12+0x7]
0x19db0008b3cd   ced  4903c5         REX.W addq rax,r13
0x19db0008b3d0   cf0  448b70ff       movl r14,[rax-0x1]
0x19db0008b3d4   cf4  4c8b1539f5ffff REX.W movq r10,[rip+0xfffff539]
0x19db0008b3db   cfb  4d3bd6         REX.W cmpq r10,r14
0x19db0008b3de   cfe  7712           ja 0x19db0008b3f2  <+0xd12>
0x19db0008b3e0   d00  488b153cf5ffff REX.W movq rdx,[rip+0xfffff53c]
0x19db0008b3e7   d07  4c8b150af3ffff REX.W movq r10,[rip+0xfffff30a]
0x19db0008b3ee   d0e  41ffd2         call r10
0x19db0008b3f1   d11  cc             int3l
0x19db0008b3f2   d12  4539b5d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r14
0x19db0008b3f9   d19  0f85fa310000   jnz 0x19db0008e5f9  <+0x3f19>
0x19db0008b3ff   d1f  458b64240b     movl r12,[r12+0xb]
0x19db0008b404   d24  41d1fc         sarl r12, 1
0x19db0008b407   d27  4183fc06       cmpl r12,0x6
0x19db0008b40b   d2b  0f86ef310000   jna 0x19db0008e600  <+0x3f20>
0x19db0008b411   d31  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db0008b418   d38  4489401f       movl [rax+0x1f],r8
0x19db0008b41c   d3c  448b410f       movl r8,[rcx+0xf]
0x19db0008b420   d40  4d03c5         REX.W addq r8,r13
0x19db0008b423   d43  41f6c001       testb r8,0x1
0x19db0008b427   d47  0f84da310000   jz 0x19db0008e607  <+0x3f27>
0x19db0008b42d   d4d  453948ff       cmpl [r8-0x1],r9
0x19db0008b431   d51  0f85d7310000   jnz 0x19db0008e60e  <+0x3f2e>
0x19db0008b437   d57  458b6003       movl r12,[r8+0x3]
0x19db0008b43b   d5b  4d03e5         REX.W addq r12,r13
0x19db0008b43e   d5e  458b64240f     movl r12,[r12+0xf]
0x19db0008b443   d63  4d03e5         REX.W addq r12,r13
0x19db0008b446   d66  41f6c401       testb r12,0x1
0x19db0008b44a   d6a  0f84c5310000   jz 0x19db0008e615  <+0x3f35>
0x19db0008b450   d70  45395c24ff     cmpl [r12-0x1],r11
0x19db0008b455   d75  0f85c1310000   jnz 0x19db0008e61c  <+0x3f3c>
0x19db0008b45b   d7b  418b442407     movl rax,[r12+0x7]
0x19db0008b460   d80  4903c5         REX.W addq rax,r13
0x19db0008b463   d83  458b64240b     movl r12,[r12+0xb]
0x19db0008b468   d88  41d1fc         sarl r12, 1
0x19db0008b46b   d8b  4183fc0a       cmpl r12,0xa
0x19db0008b46f   d8f  0f86ae310000   jna 0x19db0008e623  <+0x3f43>
0x19db0008b475   d95  448b602f       movl r12,[rax+0x2f]
0x19db0008b479   d99  4d03e5         REX.W addq r12,r13
0x19db0008b47c   d9c  41f6c401       testb r12,0x1
0x19db0008b480   da0  0f84fb240000   jz 0x19db0008d981  <+0x32a1>
0x19db0008b486   da6  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db0008b48d   dad  0f843e000000   jz 0x19db0008b4d1  <+0xdf1>
0x19db0008b493   db3  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db0008b49a   dba  0f8431000000   jz 0x19db0008b4d1  <+0xdf1>
0x19db0008b4a0   dc0  418b4424ff     movl rax,[r12-0x1]
0x19db0008b4a5   dc5  4903c5         REX.W addq rax,r13
0x19db0008b4a8   dc8  f6400910       testb [rax+0x9],0x10
0x19db0008b4ac   dcc  0f851f000000   jnz 0x19db0008b4d1  <+0xdf1>
0x19db0008b4b2   dd2  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db0008b4b9   dd9  0f84a8240000   jz 0x19db0008d967  <+0x3287>
0x19db0008b4bf   ddf  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db0008b4c6   de6  0f8487240000   jz 0x19db0008d953  <+0x3273>
0x19db0008b4cc   dec  e938010000     jmp 0x19db0008b609  <+0xf29>
0x19db0008b4d1   df1  8b792b         movl rdi,[rcx+0x2b]
0x19db0008b4d4   df4  4903fd         REX.W addq rdi,r13
0x19db0008b4d7   df7  458b6007       movl r12,[r8+0x7]
0x19db0008b4db   dfb  4d03e5         REX.W addq r12,r13
0x19db0008b4de   dfe  458b700b       movl r14,[r8+0xb]
0x19db0008b4e2   e02  41d1fe         sarl r14, 1
0x19db0008b4e5   e05  4183fe07       cmpl r14,0x7
0x19db0008b4e9   e09  0f863b310000   jna 0x19db0008e62a  <+0x3f4a>
0x19db0008b4ef   e0f  418b442423     movl rax,[r12+0x23]
0x19db0008b4f4   e14  4903c5         REX.W addq rax,r13
0x19db0008b4f7   e17  4183fe03       cmpl r14,0x3
0x19db0008b4fb   e1b  0f8630310000   jna 0x19db0008e631  <+0x3f51>
0x19db0008b501   e21  458b642413     movl r12,[r12+0x13]
0x19db0008b506   e26  4d03e5         REX.W addq r12,r13
0x19db0008b509   e29  40f6c701       testb rdi,0x1
0x19db0008b50d   e2d  0f8425310000   jz 0x19db0008e638  <+0x3f58>
0x19db0008b513   e33  448b77ff       movl r14,[rdi-0x1]
0x19db0008b517   e37  4d03f5         REX.W addq r14,r13
0x19db0008b51a   e3a  6641817e072c04 cmpw [r14+0x7],0x42c
0x19db0008b521   e41  0f8518310000   jnz 0x19db0008e63f  <+0x3f5f>
0x19db0008b527   e47  448b7713       movl r14,[rdi+0x13]
0x19db0008b52b   e4b  4d03f5         REX.W addq r14,r13
0x19db0008b52e   e4e  49bfa1422f08db190000 REX.W movq r15,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008b538   e58  4d3bfe         REX.W cmpq r15,r14
0x19db0008b53b   e5b  0f8505310000   jnz 0x19db0008e646  <+0x3f66>
0x19db0008b541   e61  4154           push r12
0x19db0008b543   e63  50             push rax
0x19db0008b544   e64  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db0008b54b   e6b  4150           push r8
0x19db0008b54d   e6d  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008b557   e77  b802000000     movl rax,0x2
0x19db0008b55c   e7c  4c8b150efaffff REX.W movq r10,[rip+0xfffffa0e]
0x19db0008b563   e83  41ffd2         call r10
0x19db0008b566   e86  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008b56a   e8a  448b410f       movl r8,[rcx+0xf]
0x19db0008b56e   e8e  4d03c5         REX.W addq r8,r13
0x19db0008b571   e91  41f6c001       testb r8,0x1
0x19db0008b575   e95  0f84d9300000   jz 0x19db0008e654  <+0x3f74>
0x19db0008b57b   e9b  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008b581   ea1  453948ff       cmpl [r8-0x1],r9
0x19db0008b585   ea5  0f85d0300000   jnz 0x19db0008e65b  <+0x3f7b>
0x19db0008b58b   eab  458b6003       movl r12,[r8+0x3]
0x19db0008b58f   eaf  4d03e5         REX.W addq r12,r13
0x19db0008b592   eb2  458b64240f     movl r12,[r12+0xf]
0x19db0008b597   eb7  4d03e5         REX.W addq r12,r13
0x19db0008b59a   eba  41f6c401       testb r12,0x1
0x19db0008b59e   ebe  0f84be300000   jz 0x19db0008e662  <+0x3f82>
0x19db0008b5a4   ec4  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008b5aa   eca  45395c24ff     cmpl [r12-0x1],r11
0x19db0008b5af   ecf  0f85b4300000   jnz 0x19db0008e669  <+0x3f89>
0x19db0008b5b5   ed5  418b442407     movl rax,[r12+0x7]
0x19db0008b5ba   eda  4903c5         REX.W addq rax,r13
0x19db0008b5bd   edd  448b70ff       movl r14,[rax-0x1]
0x19db0008b5c1   ee1  4c8b154cf3ffff REX.W movq r10,[rip+0xfffff34c]
0x19db0008b5c8   ee8  4d3bd6         REX.W cmpq r10,r14
0x19db0008b5cb   eeb  7712           ja 0x19db0008b5df  <+0xeff>
0x19db0008b5cd   eed  488b154ff3ffff REX.W movq rdx,[rip+0xfffff34f]
0x19db0008b5d4   ef4  4c8b151df1ffff REX.W movq r10,[rip+0xfffff11d]
0x19db0008b5db   efb  41ffd2         call r10
0x19db0008b5de   efe  cc             int3l
0x19db0008b5df   eff  4539b5d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r14
0x19db0008b5e6   f06  0f8584300000   jnz 0x19db0008e670  <+0x3f90>
0x19db0008b5ec   f0c  458b64240b     movl r12,[r12+0xb]
0x19db0008b5f1   f11  41d1fc         sarl r12, 1
0x19db0008b5f4   f14  4183fc0a       cmpl r12,0xa
0x19db0008b5f8   f18  0f8679300000   jna 0x19db0008e677  <+0x3f97>
0x19db0008b5fe   f1e  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db0008b605   f25  4489402f       movl [rax+0x2f],r8
0x19db0008b609   f29  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008b60d   f2d  41bccd9f3008   movl r12,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008b613   f33  453960ff       cmpl [r8-0x1],r12
0x19db0008b617   f37  0f8561300000   jnz 0x19db0008e67e  <+0x3f9e>
0x19db0008b61d   f3d  458b7007       movl r14,[r8+0x7]
0x19db0008b621   f41  4d03f5         REX.W addq r14,r13
0x19db0008b624   f44  458b780b       movl r15,[r8+0xb]
0x19db0008b628   f48  41d1ff         sarl r15, 1
0x19db0008b62b   f4b  4183ff02       cmpl r15,0x2
0x19db0008b62f   f4f  0f8650300000   jna 0x19db0008e685  <+0x3fa5>
0x19db0008b635   f55  458b760f       movl r14,[r14+0xf]
0x19db0008b639   f59  4d03f5         REX.W addq r14,r13
0x19db0008b63c   f5c  4539b598000000 cmpl [r13+0x98] (root (the_hole_value)),r14
0x19db0008b643   f63  0f8447230000   jz 0x19db0008d990  <+0x32b0>
0x19db0008b649   f69  41f6c601       testb r14,0x1
0x19db0008b64d   f6d  0f8439300000   jz 0x19db0008e68c  <+0x3fac>
0x19db0008b653   f73  41bf559f3008   movl r15,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008b659   f79  45397eff       cmpl [r14-0x1],r15
0x19db0008b65d   f7d  0f8530300000   jnz 0x19db0008e693  <+0x3fb3>
0x19db0008b663   f83  418b4607       movl rax,[r14+0x7]
0x19db0008b667   f87  4903c5         REX.W addq rax,r13
0x19db0008b66a   f8a  458b760b       movl r14,[r14+0xb]
0x19db0008b66e   f8e  41d1fe         sarl r14, 1
0x19db0008b671   f91  4183fe02       cmpl r14,0x2
0x19db0008b675   f95  0f861f300000   jna 0x19db0008e69a  <+0x3fba>
0x19db0008b67b   f9b  c5fb104017     vmovsd xmm0,[rax+0x17]
0x19db0008b680   fa0  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008b684   fa4  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008b688   fa8  0f86950e0000   jna 0x19db0008c523  <+0x1e43>
0x19db0008b68e   fae  448b710f       movl r14,[rcx+0xf]
0x19db0008b692   fb2  4d03f5         REX.W addq r14,r13
0x19db0008b695   fb5  41f6c601       testb r14,0x1
0x19db0008b699   fb9  0f8402300000   jz 0x19db0008e6a1  <+0x3fc1>
0x19db0008b69f   fbf  45394eff       cmpl [r14-0x1],r9
0x19db0008b6a3   fc3  0f85ff2f0000   jnz 0x19db0008e6a8  <+0x3fc8>
0x19db0008b6a9   fc9  418b4603       movl rax,[r14+0x3]
0x19db0008b6ad   fcd  4903c5         REX.W addq rax,r13
0x19db0008b6b0   fd0  8b400f         movl rax,[rax+0xf]
0x19db0008b6b3   fd3  4903c5         REX.W addq rax,r13
0x19db0008b6b6   fd6  a801           test al,0x1
0x19db0008b6b8   fd8  0f84f12f0000   jz 0x19db0008e6af  <+0x3fcf>
0x19db0008b6be   fde  443958ff       cmpl [rax-0x1],r11
0x19db0008b6c2   fe2  0f85ee2f0000   jnz 0x19db0008e6b6  <+0x3fd6>
0x19db0008b6c8   fe8  8b5007         movl rdx,[rax+0x7]
0x19db0008b6cb   feb  4903d5         REX.W addq rdx,r13
0x19db0008b6ce   fee  8b400b         movl rax,[rax+0xb]
0x19db0008b6d1   ff1  d1f8           sarl rax, 1
0x19db0008b6d3   ff3  83f804         cmpl rax,0x4
0x19db0008b6d6   ff6  0f86e12f0000   jna 0x19db0008e6bd  <+0x3fdd>
0x19db0008b6dc   ffc  8b4217         movl rax,[rdx+0x17]
0x19db0008b6df   fff  4903c5         REX.W addq rax,r13
0x19db0008b6e2  1002  a801           test al,0x1
0x19db0008b6e4  1004  0f84d8220000   jz 0x19db0008d9c2  <+0x32e2>
0x19db0008b6ea  100a  413985b0000000 cmpl [r13+0xb0] (root (false_value)),rax
0x19db0008b6f1  1011  0f843c000000   jz 0x19db0008b733  <+0x1053>
0x19db0008b6f7  1017  413985b8000000 cmpl [r13+0xb8] (root (empty_string)),rax
0x19db0008b6fe  101e  0f842f000000   jz 0x19db0008b733  <+0x1053>
0x19db0008b704  1024  8b50ff         movl rdx,[rax-0x1]
0x19db0008b707  1027  4903d5         REX.W addq rdx,r13
0x19db0008b70a  102a  f6420910       testb [rdx+0x9],0x10
0x19db0008b70e  102e  0f851f000000   jnz 0x19db0008b733  <+0x1053>
0x19db0008b714  1034  41399530010000 cmpl [r13+0x130] (root (heap_number_map)),rdx
0x19db0008b71b  103b  0f848d220000   jz 0x19db0008d9ae  <+0x32ce>
0x19db0008b721  1041  413995b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rdx
0x19db0008b728  1048  0f846e220000   jz 0x19db0008d99c  <+0x32bc>
0x19db0008b72e  104e  e93f010000     jmp 0x19db0008b872  <+0x1192>
0x19db0008b733  1053  8b792b         movl rdi,[rcx+0x2b]
0x19db0008b736  1056  4903fd         REX.W addq rdi,r13
0x19db0008b739  1059  418b4607       movl rax,[r14+0x7]
0x19db0008b73d  105d  4903c5         REX.W addq rax,r13
0x19db0008b740  1060  458b760b       movl r14,[r14+0xb]
0x19db0008b744  1064  41d1fe         sarl r14, 1
0x19db0008b747  1067  4183fe04       cmpl r14,0x4
0x19db0008b74b  106b  0f86732f0000   jna 0x19db0008e6c4  <+0x3fe4>
0x19db0008b751  1071  8b5017         movl rdx,[rax+0x17]
0x19db0008b754  1074  4903d5         REX.W addq rdx,r13
0x19db0008b757  1077  4183fe05       cmpl r14,0x5
0x19db0008b75b  107b  0f866a2f0000   jna 0x19db0008e6cb  <+0x3feb>
0x19db0008b761  1081  448b701b       movl r14,[rax+0x1b]
0x19db0008b765  1085  4d03f5         REX.W addq r14,r13
0x19db0008b768  1088  40f6c701       testb rdi,0x1
0x19db0008b76c  108c  0f84602f0000   jz 0x19db0008e6d2  <+0x3ff2>
0x19db0008b772  1092  8b47ff         movl rax,[rdi-0x1]
0x19db0008b775  1095  4903c5         REX.W addq rax,r13
0x19db0008b778  1098  668178072c04   cmpw [rax+0x7],0x42c
0x19db0008b77e  109e  0f85552f0000   jnz 0x19db0008e6d9  <+0x3ff9>
0x19db0008b784  10a4  8b4713         movl rax,[rdi+0x13]
0x19db0008b787  10a7  4903c5         REX.W addq rax,r13
0x19db0008b78a  10aa  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008b794  10b4  483bd8         REX.W cmpq rbx,rax
0x19db0008b797  10b7  0f85432f0000   jnz 0x19db0008e6e0  <+0x4000>
0x19db0008b79d  10bd  4156           push r14
0x19db0008b79f  10bf  52             push rdx
0x19db0008b7a0  10c0  4d8bb590000000 REX.W movq r14,[r13+0x90] (root (undefined_value))
0x19db0008b7a7  10c7  4156           push r14
0x19db0008b7a9  10c9  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008b7b3  10d3  b802000000     movl rax,0x2
0x19db0008b7b8  10d8  4c8b15b2f7ffff REX.W movq r10,[rip+0xfffff7b2]
0x19db0008b7bf  10df  41ffd2         call r10
0x19db0008b7c2  10e2  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008b7c6  10e6  448b410f       movl r8,[rcx+0xf]
0x19db0008b7ca  10ea  4d03c5         REX.W addq r8,r13
0x19db0008b7cd  10ed  41f6c001       testb r8,0x1
0x19db0008b7d1  10f1  0f84172f0000   jz 0x19db0008e6ee  <+0x400e>
0x19db0008b7d7  10f7  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008b7dd  10fd  453948ff       cmpl [r8-0x1],r9
0x19db0008b7e1  1101  0f850e2f0000   jnz 0x19db0008e6f5  <+0x4015>
0x19db0008b7e7  1107  458b6003       movl r12,[r8+0x3]
0x19db0008b7eb  110b  4d03e5         REX.W addq r12,r13
0x19db0008b7ee  110e  418b44240f     movl rax,[r12+0xf]
0x19db0008b7f3  1113  4903c5         REX.W addq rax,r13
0x19db0008b7f6  1116  a801           test al,0x1
0x19db0008b7f8  1118  0f84fe2e0000   jz 0x19db0008e6fc  <+0x401c>
0x19db0008b7fe  111e  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008b804  1124  443958ff       cmpl [rax-0x1],r11
0x19db0008b808  1128  0f85f52e0000   jnz 0x19db0008e703  <+0x4023>
0x19db0008b80e  112e  448b6007       movl r12,[rax+0x7]
0x19db0008b812  1132  4d03e5         REX.W addq r12,r13
0x19db0008b815  1135  448b700b       movl r14,[rax+0xb]
0x19db0008b819  1139  41d1fe         sarl r14, 1
0x19db0008b81c  113c  4183fe04       cmpl r14,0x4
0x19db0008b820  1140  0f86e42e0000   jna 0x19db0008e70a  <+0x402a>
0x19db0008b826  1146  458b4424ff     movl r8,[r12-0x1]
0x19db0008b82b  114b  4c8b15e2f0ffff REX.W movq r10,[rip+0xfffff0e2]
0x19db0008b832  1152  4d3bd0         REX.W cmpq r10,r8
0x19db0008b835  1155  7712           ja 0x19db0008b849  <+0x1169>
0x19db0008b837  1157  488b15e5f0ffff REX.W movq rdx,[rip+0xfffff0e5]
0x19db0008b83e  115e  4c8b15b3eeffff REX.W movq r10,[rip+0xffffeeb3]
0x19db0008b845  1165  41ffd2         call r10
0x19db0008b848  1168  cc             int3l
0x19db0008b849  1169  453985d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r8
0x19db0008b850  1170  0f857a210000   jnz 0x19db0008d9d0  <+0x32f0>
0x19db0008b856  1176  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db0008b85d  117d  4589442417     movl [r12+0x17],r8
0x19db0008b862  1182  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008b866  1186  41bf559f3008   movl r15,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008b86c  118c  41bccd9f3008   movl r12,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008b872  1192  448b710f       movl r14,[rcx+0xf]
0x19db0008b876  1196  4d03f5         REX.W addq r14,r13
0x19db0008b879  1199  41f6c601       testb r14,0x1
0x19db0008b87d  119d  0f848e2e0000   jz 0x19db0008e711  <+0x4031>
0x19db0008b883  11a3  45394eff       cmpl [r14-0x1],r9
0x19db0008b887  11a7  0f858b2e0000   jnz 0x19db0008e718  <+0x4038>
0x19db0008b88d  11ad  418b4603       movl rax,[r14+0x3]
0x19db0008b891  11b1  4903c5         REX.W addq rax,r13
0x19db0008b894  11b4  8b400f         movl rax,[rax+0xf]
0x19db0008b897  11b7  4903c5         REX.W addq rax,r13
0x19db0008b89a  11ba  a801           test al,0x1
0x19db0008b89c  11bc  0f847d2e0000   jz 0x19db0008e71f  <+0x403f>
0x19db0008b8a2  11c2  443958ff       cmpl [rax-0x1],r11
0x19db0008b8a6  11c6  0f857a2e0000   jnz 0x19db0008e726  <+0x4046>
0x19db0008b8ac  11cc  8b5007         movl rdx,[rax+0x7]
0x19db0008b8af  11cf  4903d5         REX.W addq rdx,r13
0x19db0008b8b2  11d2  8b400b         movl rax,[rax+0xb]
0x19db0008b8b5  11d5  d1f8           sarl rax, 1
0x19db0008b8b7  11d7  83f805         cmpl rax,0x5
0x19db0008b8ba  11da  0f866d2e0000   jna 0x19db0008e72d  <+0x404d>
0x19db0008b8c0  11e0  8b721b         movl rsi,[rdx+0x1b]
0x19db0008b8c3  11e3  4903f5         REX.W addq rsi,r13
0x19db0008b8c6  11e6  4c8975c8       REX.W movq [rbp-0x38],r14
0x19db0008b8ca  11ea  488955c0       REX.W movq [rbp-0x40],rdx
0x19db0008b8ce  11ee  488945b8       REX.W movq [rbp-0x48],rax
0x19db0008b8d2  11f2  40f6c601       testb rsi,0x1
0x19db0008b8d6  11f6  0f8442210000   jz 0x19db0008da1e  <+0x333e>
0x19db0008b8dc  11fc  4139b5b0000000 cmpl [r13+0xb0] (root (false_value)),rsi
0x19db0008b8e3  1203  0f843c000000   jz 0x19db0008b925  <+0x1245>
0x19db0008b8e9  1209  4139b5b8000000 cmpl [r13+0xb8] (root (empty_string)),rsi
0x19db0008b8f0  1210  0f842f000000   jz 0x19db0008b925  <+0x1245>
0x19db0008b8f6  1216  8b7eff         movl rdi,[rsi-0x1]
0x19db0008b8f9  1219  4903fd         REX.W addq rdi,r13
0x19db0008b8fc  121c  f6470910       testb [rdi+0x9],0x10
0x19db0008b900  1220  0f851f000000   jnz 0x19db0008b925  <+0x1245>
0x19db0008b906  1226  4139bd30010000 cmpl [r13+0x130] (root (heap_number_map)),rdi
0x19db0008b90d  122d  0f84f3200000   jz 0x19db0008da06  <+0x3326>
0x19db0008b913  1233  4139bdb0010000 cmpl [r13+0x1b0] (root (bigint_map)),rdi
0x19db0008b91a  123a  0f84d4200000   jz 0x19db0008d9f4  <+0x3314>
0x19db0008b920  1240  e9ef040000     jmp 0x19db0008be14  <+0x1734>
0x19db0008b925  1245  8b712b         movl rsi,[rcx+0x2b]
0x19db0008b928  1248  4903f5         REX.W addq rsi,r13
0x19db0008b92b  124b  418b7e07       movl rdi,[r14+0x7]
0x19db0008b92f  124f  4903fd         REX.W addq rdi,r13
0x19db0008b932  1252  418b4e0b       movl rcx,[r14+0xb]
0x19db0008b936  1256  d1f9           sarl rcx, 1
0x19db0008b938  1258  83f905         cmpl rcx,0x5
0x19db0008b93b  125b  0f86f32d0000   jna 0x19db0008e734  <+0x4054>
0x19db0008b941  1261  448b771b       movl r14,[rdi+0x1b]
0x19db0008b945  1265  4d03f5         REX.W addq r14,r13
0x19db0008b948  1268  83f906         cmpl rcx,0x6
0x19db0008b94b  126b  0f86ea2d0000   jna 0x19db0008e73b  <+0x405b>
0x19db0008b951  1271  8b4f1f         movl rcx,[rdi+0x1f]
0x19db0008b954  1274  4903cd         REX.W addq rcx,r13
0x19db0008b957  1277  40f6c601       testb rsi,0x1
0x19db0008b95b  127b  0f84e12d0000   jz 0x19db0008e742  <+0x4062>
0x19db0008b961  1281  8b7eff         movl rdi,[rsi-0x1]
0x19db0008b964  1284  4903fd         REX.W addq rdi,r13
0x19db0008b967  1287  66817f072c04   cmpw [rdi+0x7],0x42c
0x19db0008b96d  128d  0f85d62d0000   jnz 0x19db0008e749  <+0x4069>
0x19db0008b973  1293  8b7e13         movl rdi,[rsi+0x13]
0x19db0008b976  1296  4903fd         REX.W addq rdi,r13
0x19db0008b979  1299  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008b983  12a3  483bdf         REX.W cmpq rbx,rdi
0x19db0008b986  12a6  0f85c42d0000   jnz 0x19db0008e750  <+0x4070>
0x19db0008b98c  12ac  8b7e0f         movl rdi,[rsi+0xf]
0x19db0008b98f  12af  4903fd         REX.W addq rdi,r13
0x19db0008b992  12b2  48897598       REX.W movq [rbp-0x68],rsi
0x19db0008b996  12b6  48897d80       REX.W movq [rbp-0x80],rdi
0x19db0008b99a  12ba  41f6c601       testb r14,0x1
0x19db0008b99e  12be  0f84b32d0000   jz 0x19db0008e757  <+0x4077>
0x19db0008b9a4  12c4  418b46ff       movl rax,[r14-0x1]
0x19db0008b9a8  12c8  4c8b1565efffff REX.W movq r10,[rip+0xffffef65]
0x19db0008b9af  12cf  4c3bd0         REX.W cmpq r10,rax
0x19db0008b9b2  12d2  7712           ja 0x19db0008b9c6  <+0x12e6>
0x19db0008b9b4  12d4  488b1568efffff REX.W movq rdx,[rip+0xffffef68]
0x19db0008b9bb  12db  4c8b1536edffff REX.W movq r10,[rip+0xffffed36]
0x19db0008b9c2  12e2  41ffd2         call r10
0x19db0008b9c5  12e5  cc             int3l
0x19db0008b9c6  12e6  4c897590       REX.W movq [rbp-0x70],r14
0x19db0008b9ca  12ea  48894d88       REX.W movq [rbp-0x78],rcx
0x19db0008b9ce  12ee  bba5db3008     movl rbx,0x830dba5      ;; (compressed) object: 0x19db0830dba5 <Map(HOLEY_ELEMENTS)>
0x19db0008b9d3  12f3  3bc3           cmpl rax,rbx
0x19db0008b9d5  12f5  0f842d000000   jz 0x19db0008ba08  <+0x1328>
0x19db0008b9db  12fb  41bb5ddd3008   movl r11,0x830dd5d      ;; (compressed) object: 0x19db0830dd5d <Map(HOLEY_ELEMENTS)>
0x19db0008b9e1  1301  443bd8         cmpl r11,rax
0x19db0008b9e4  1304  0f841e000000   jz 0x19db0008ba08  <+0x1328>
0x19db0008b9ea  130a  41bb4dde3008   movl r11,0x830de4d      ;; (compressed) object: 0x19db0830de4d <Map(HOLEY_ELEMENTS)>
0x19db0008b9f0  1310  443bd8         cmpl r11,rax
0x19db0008b9f3  1313  0f840f000000   jz 0x19db0008ba08  <+0x1328>
0x19db0008b9f9  1319  41bb3ddf3008   movl r11,0x830df3d      ;; (compressed) object: 0x19db0830df3d <Map(HOLEY_ELEMENTS)>
0x19db0008b9ff  131f  443bd8         cmpl r11,rax
0x19db0008ba02  1322  0f85562d0000   jnz 0x19db0008e75e  <+0x407e>
0x19db0008ba08  1328  418b460b       movl rax,[r14+0xb]
0x19db0008ba0c  132c  4903c5         REX.W addq rax,r13
0x19db0008ba0f  132f  4d8bdf         REX.W movq r11,r15
0x19db0008ba12  1332  443958ff       cmpl [rax-0x1],r11
0x19db0008ba16  1336  0f85492d0000   jnz 0x19db0008e765  <+0x4085>
0x19db0008ba1c  133c  448b7807       movl r15,[rax+0x7]
0x19db0008ba20  1340  4d03fd         REX.W addq r15,r13
0x19db0008ba23  1343  8b400b         movl rax,[rax+0xb]
0x19db0008ba26  1346  d1f8           sarl rax, 1
0x19db0008ba28  1348  83f800         cmpl rax,0x0
0x19db0008ba2b  134b  0f863b2d0000   jna 0x19db0008e76c  <+0x408c>
0x19db0008ba31  1351  c4c17b104707   vmovsd xmm0,[r15+0x7]
0x19db0008ba37  1357  f6c101         testb rcx,0x1
0x19db0008ba3a  135a  0f84332d0000   jz 0x19db0008e773  <+0x4093>
0x19db0008ba40  1360  8b51ff         movl rdx,[rcx-0x1]
0x19db0008ba43  1363  4c8b15caeeffff REX.W movq r10,[rip+0xffffeeca]
0x19db0008ba4a  136a  4c3bd2         REX.W cmpq r10,rdx
0x19db0008ba4d  136d  7712           ja 0x19db0008ba61  <+0x1381>
0x19db0008ba4f  136f  488b15cdeeffff REX.W movq rdx,[rip+0xffffeecd]
0x19db0008ba56  1376  4c8b159becffff REX.W movq r10,[rip+0xffffec9b]
0x19db0008ba5d  137d  41ffd2         call r10
0x19db0008ba60  1380  cc             int3l
0x19db0008ba61  1381  3bda           cmpl rbx,rdx
0x19db0008ba63  1383  0f8427000000   jz 0x19db0008ba90  <+0x13b0>
0x19db0008ba69  1389  bb5ddd3008     movl rbx,0x830dd5d      ;; (compressed) object: 0x19db0830dd5d <Map(HOLEY_ELEMENTS)>
0x19db0008ba6e  138e  3bda           cmpl rbx,rdx
0x19db0008ba70  1390  0f841a000000   jz 0x19db0008ba90  <+0x13b0>
0x19db0008ba76  1396  bb4dde3008     movl rbx,0x830de4d      ;; (compressed) object: 0x19db0830de4d <Map(HOLEY_ELEMENTS)>
0x19db0008ba7b  139b  3bda           cmpl rbx,rdx
0x19db0008ba7d  139d  0f840d000000   jz 0x19db0008ba90  <+0x13b0>
0x19db0008ba83  13a3  bb3ddf3008     movl rbx,0x830df3d      ;; (compressed) object: 0x19db0830df3d <Map(HOLEY_ELEMENTS)>
0x19db0008ba88  13a8  3bda           cmpl rbx,rdx
0x19db0008ba8a  13aa  0f85ea2c0000   jnz 0x19db0008e77a  <+0x409a>
0x19db0008ba90  13b0  8b510b         movl rdx,[rcx+0xb]
0x19db0008ba93  13b3  4903d5         REX.W addq rdx,r13
0x19db0008ba96  13b6  44395aff       cmpl [rdx-0x1],r11
0x19db0008ba9a  13ba  0f85e12c0000   jnz 0x19db0008e781  <+0x40a1>
0x19db0008baa0  13c0  8b4a07         movl rcx,[rdx+0x7]
0x19db0008baa3  13c3  4903cd         REX.W addq rcx,r13
0x19db0008baa6  13c6  8b520b         movl rdx,[rdx+0xb]
0x19db0008baa9  13c9  d1fa           sarl rdx, 1
0x19db0008baab  13cb  83fa00         cmpl rdx,0x0
0x19db0008baae  13ce  0f86d42c0000   jna 0x19db0008e788  <+0x40a8>
0x19db0008bab4  13d4  c5fb104907     vmovsd xmm1,[rcx+0x7]
0x19db0008bab9  13d9  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008babd  13dd  0f8310000000   jnc 0x19db0008bad3  <+0x13f3>
0x19db0008bac3  13e3  48c78520ffffffffffffff REX.W movq [rbp-0xe0],0xffffffff
0x19db0008bace  13ee  e90b000000     jmp 0x19db0008bade  <+0x13fe>
0x19db0008bad3  13f3  48c78520ffffff01000000 REX.W movq [rbp-0xe0],0x1
0x19db0008bade  13fe  83f801         cmpl rax,0x1
0x19db0008bae1  1401  0f86a82c0000   jna 0x19db0008e78f  <+0x40af>
0x19db0008bae7  1407  c4c17b10570f   vmovsd xmm2,[r15+0xf]
0x19db0008baed  140d  83fa01         cmpl rdx,0x1
0x19db0008baf0  1410  0f86a02c0000   jna 0x19db0008e796  <+0x40b6>
0x19db0008baf6  1416  c5fb10610f     vmovsd xmm4,[rcx+0xf]
0x19db0008bafb  141b  bbffffffff     movl rbx,0xffffffff
0x19db0008bb00  1420  c5f92ee2       vucomisd xmm4,xmm2
0x19db0008bb04  1424  0f8308000000   jnc 0x19db0008bb12  <+0x1432>
0x19db0008bb0a  142a  488bcb         REX.W movq rcx,rbx
0x19db0008bb0d  142d  e905000000     jmp 0x19db0008bb17  <+0x1437>
0x19db0008bb12  1432  b901000000     movl rcx,0x1
0x19db0008bb17  1437  c5db5cda       vsubsd xmm3,xmm4,xmm2
0x19db0008bb1b  143b  c5d176ed       vpcmpeqd xmm5,xmm5,xmm5
0x19db0008bb1f  143f  c5d173d501     vpsrlq xmm5,xmm5,1
0x19db0008bb24  1444  c5d154e3       vandpd xmm4,xmm5,xmm3
0x19db0008bb28  1448  c5f35cc8       vsubsd xmm1,xmm1,xmm0
0x19db0008bb2c  144c  c5d176ed       vpcmpeqd xmm5,xmm5,xmm5
0x19db0008bb30  1450  c5d173d501     vpsrlq xmm5,xmm5,1
0x19db0008bb35  1455  c5d154d9       vandpd xmm3,xmm5,xmm1
0x19db0008bb39  1459  c5f92edc       vucomisd xmm3,xmm4
0x19db0008bb3d  145d  0f8333000000   jnc 0x19db0008bb76  <+0x1496>
0x19db0008bb43  1463  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008bb47  1467  c5f173f137     vpsllq xmm1,xmm1,55
0x19db0008bb4c  146c  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0008bb51  1471  c5db59e9       vmulsd xmm5,xmm4,xmm1
0x19db0008bb55  1475  488bd1         REX.W movq rdx,rcx
0x19db0008bb58  1478  c57928fb       vmovapd xmm15,xmm3
0x19db0008bb5c  147c  c5f928dc       vmovapd xmm3,xmm4
0x19db0008bb60  1480  c4c17928e7     vmovapd xmm4,xmm15
0x19db0008bb65  1485  33c0           xorl rax,rax
0x19db0008bb67  1487  488b8d20ffffff REX.W movq rcx,[rbp-0xe0]
0x19db0008bb6e  148e  4c8bf8         REX.W movq r15,rax
0x19db0008bb71  1491  e921000000     jmp 0x19db0008bb97  <+0x14b7>
0x19db0008bb76  1496  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008bb7a  149a  c5f173f137     vpsllq xmm1,xmm1,55
0x19db0008bb7f  149f  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0008bb84  14a4  c5e359e9       vmulsd xmm5,xmm3,xmm1
0x19db0008bb88  14a8  4c8bf9         REX.W movq r15,rcx
0x19db0008bb8b  14ab  33c9           xorl rcx,rcx
0x19db0008bb8d  14ad  488b8520ffffff REX.W movq rax,[rbp-0xe0]
0x19db0008bb94  14b4  488bd1         REX.W movq rdx,rcx
0x19db0008bb97  14b7  49bb09652e08db190000 REX.W movq r11,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db0008bba1  14c1  41be39692e08   movl r14,0x82e6939      ;; (compressed) object: 0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)>
0x19db0008bba7  14c7  4539730b       cmpl [r11+0xb],r14
0x19db0008bbab  14cb  0f85ec2b0000   jnz 0x19db0008e79d  <+0x40bd>
0x19db0008bbb1  14d1  458b7303       movl r14,[r11+0x3]
0x19db0008bbb5  14d5  4d03f5         REX.W addq r14,r13
0x19db0008bbb8  14d8  458b7663       movl r14,[r14+0x63]
0x19db0008bbbc  14dc  4c8b1551edffff REX.W movq r10,[rip+0xffffed51]
0x19db0008bbc3  14e3  4d3bd6         REX.W cmpq r10,r14
0x19db0008bbc6  14e6  7712           ja 0x19db0008bbda  <+0x14fa>
0x19db0008bbc8  14e8  488b1554edffff REX.W movq rdx,[rip+0xffffed54]
0x19db0008bbcf  14ef  4c8b1522ebffff REX.W movq r10,[rip+0xffffeb22]
0x19db0008bbd6  14f6  41ffd2         call r10
0x19db0008bbd9  14f9  cc             int3l
0x19db0008bbda  14fa  8b770f         movl rsi,[rdi+0xf]
0x19db0008bbdd  14fd  4903f5         REX.W addq rsi,r13
0x19db0008bbe0  1500  40f6c601       testb rsi,0x1
0x19db0008bbe4  1504  0f84ba2b0000   jz 0x19db0008e7a4  <+0x40c4>
0x19db0008bbea  150a  44394eff       cmpl [rsi-0x1],r9
0x19db0008bbee  150e  0f85b72b0000   jnz 0x19db0008e7ab  <+0x40cb>
0x19db0008bbf4  1514  8b7603         movl rsi,[rsi+0x3]
0x19db0008bbf7  1517  4903f5         REX.W addq rsi,r13
0x19db0008bbfa  151a  448b4e17       movl r9,[rsi+0x17]
0x19db0008bbfe  151e  4d03cd         REX.W addq r9,r13
0x19db0008bc01  1521  41f6c101       testb r9,0x1
0x19db0008bc05  1525  410f94c3       setzl r11l
0x19db0008bc09  1529  450fb6db       movzxbl r11,r11
0x19db0008bc0d  152d  498bd9         REX.W movq rbx,r9
0x19db0008bc10  1530  d1fb           sarl rbx, 1
0x19db0008bc12  1532  488975b0       REX.W movq [rbp-0x50],rsi
0x19db0008bc16  1536  4183fb00       cmpl r11,0x0
0x19db0008bc1a  153a  0f852e000000   jnz 0x19db0008bc4e  <+0x156e>
0x19db0008bc20  1540  418b71ff       movl rsi,[r9-0x1]
0x19db0008bc24  1544  4903f5         REX.W addq rsi,r13
0x19db0008bc27  1547  4139b530010000 cmpl [r13+0x130] (root (heap_number_map)),rsi
0x19db0008bc2e  154e  0f840b000000   jz 0x19db0008bc3f  <+0x155f>
0x19db0008bc34  1554  66837e0743     cmpw [rsi+0x7],0x43
0x19db0008bc39  1559  0f85732b0000   jnz 0x19db0008e7b2  <+0x40d2>
0x19db0008bc3f  155f  c4c17b107103   vmovsd xmm6,[r9+0x3]
0x19db0008bc45  1565  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db0008bc49  1569  e904000000     jmp 0x19db0008bc52  <+0x1572>
0x19db0008bc4e  156e  c5832af3       vcvtlsi2sd xmm6,xmm15,rbx
0x19db0008bc52  1572  c5cb58f3       vaddsd xmm6,xmm6,xmm3
0x19db0008bc56  1576  c4e3410bfe0a   vroundsd xmm7,xmm7,xmm6,0xa
0x19db0008bc5c  157c  c5c35cc9       vsubsd xmm1,xmm7,xmm1
0x19db0008bc60  1580  c5f92ef1       vucomisd xmm6,xmm1
0x19db0008bc64  1584  0f8312000000   jnc 0x19db0008bc7c  <+0x159c>
0x19db0008bc6a  158a  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008bc6e  158e  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0008bc73  1593  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0008bc78  1598  c5c35cf9       vsubsd xmm7,xmm7,xmm1
0x19db0008bc7c  159c  c57b2ccf       vcvttsd2si r9,xmm7
0x19db0008bc80  15a0  be59682e08     movl rsi,0x82e6859      ;; (compressed) object: 0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)>
0x19db0008bc85  15a5  413bf6         cmpl rsi,r14
0x19db0008bc88  15a8  0f852b2b0000   jnz 0x19db0008e7b9  <+0x40d9>
0x19db0008bc8e  15ae  c4c1032ac9     vcvtlsi2sd xmm1,xmm15,r9
0x19db0008bc93  15b3  4183fb00       cmpl r11,0x0
0x19db0008bc97  15b7  0f84232b0000   jz 0x19db0008e7c0  <+0x40e0>
0x19db0008bc9d  15bd  c5f92ecf       vucomisd xmm1,xmm7
0x19db0008bca1  15c1  0f8a202b0000   jpe 0x19db0008e7c7  <+0x40e7>
0x19db0008bca7  15c7  0f851a2b0000   jnz 0x19db0008e7c7  <+0x40e7>
0x19db0008bcad  15cd  413bd9         cmpl rbx,r9
0x19db0008bcb0  15d0  0f8dcc000000   jge 0x19db0008bd82  <+0x16a2>
0x19db0008bcb6  15d6  c5d358cc       vaddsd xmm1,xmm5,xmm4
0x19db0008bcba  15da  c5f92ecb       vucomisd xmm1,xmm3
0x19db0008bcbe  15de  0f8215000000   jc 0x19db0008bcd9  <+0x15f9>
0x19db0008bcc4  15e4  c4c1032aef     vcvtlsi2sd xmm5,xmm15,r15
0x19db0008bcc9  15e9  c5832af1       vcvtlsi2sd xmm6,xmm15,rcx
0x19db0008bccd  15ed  c5d358d2       vaddsd xmm2,xmm5,xmm2
0x19db0008bcd1  15f1  c5cb58c0       vaddsd xmm0,xmm6,xmm0
0x19db0008bcd5  15f5  c5f35ccb       vsubsd xmm1,xmm1,xmm3
0x19db0008bcd9  15f9  c5832aea       vcvtlsi2sd xmm5,xmm15,rdx
0x19db0008bcdd  15fd  c5832af0       vcvtlsi2sd xmm6,xmm15,rax
0x19db0008bce1  1601  83c301         addl rbx,0x1
0x19db0008bce4  1604  0f80e42a0000   jo 0x19db0008e7ce  <+0x40ee>
0x19db0008bcea  160a  c5eb58d5       vaddsd xmm2,xmm2,xmm5
0x19db0008bcee  160e  c5fb58c6       vaddsd xmm0,xmm0,xmm6
0x19db0008bcf2  1612  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008bcf6  1616  0f871c000000   ja 0x19db0008bd18  <+0x1638>
0x19db0008bcfc  161c  e92b1d0000     jmp 0x19db0008da2c  <+0x334c>
0x19db0008bd01  1621  660f1f840000000000 nop
0x19db0008bd0a  162a  660f1f440000   nop
0x19db0008bd10  1630  498bdb         REX.W movq rbx,r11
0x19db0008bd13  1633  c4c17928c8     vmovapd xmm1,xmm8
0x19db0008bd18  1638  413bd9         cmpl rbx,r9
0x19db0008bd1b  163b  0f8d61000000   jge 0x19db0008bd82  <+0x16a2>
0x19db0008bd21  1641  c57358c4       vaddsd xmm8,xmm1,xmm4
0x19db0008bd25  1645  c5792ec3       vucomisd xmm8,xmm3
0x19db0008bd29  1649  0f830d000000   jnc 0x19db0008bd3c  <+0x165c>
0x19db0008bd2f  164f  c57928d2       vmovapd xmm10,xmm2
0x19db0008bd33  1653  c57928c8       vmovapd xmm9,xmm0
0x19db0008bd37  1657  e924000000     jmp 0x19db0008bd60  <+0x1680>
0x19db0008bd3c  165c  c441032acf     vcvtlsi2sd xmm9,xmm15,r15
0x19db0008bd41  1661  c53358ca       vaddsd xmm9,xmm9,xmm2
0x19db0008bd45  1665  c5032ad1       vcvtlsi2sd xmm10,xmm15,rcx
0x19db0008bd49  1669  c52b58d0       vaddsd xmm10,xmm10,xmm0
0x19db0008bd4d  166d  c53b5cc3       vsubsd xmm8,xmm8,xmm3
0x19db0008bd51  1671  c4417928fa     vmovapd xmm15,xmm10
0x19db0008bd56  1676  c4417928d1     vmovapd xmm10,xmm9
0x19db0008bd5b  167b  c4417928cf     vmovapd xmm9,xmm15
0x19db0008bd60  1680  4c8bdb         REX.W movq r11,rbx
0x19db0008bd63  1683  4183c301       addl r11,0x1
0x19db0008bd67  1687  0f80682a0000   jo 0x19db0008e7d5  <+0x40f5>
0x19db0008bd6d  168d  c4c15358d2     vaddsd xmm2,xmm5,xmm10
0x19db0008bd72  1692  c4c14b58c1     vaddsd xmm0,xmm6,xmm9
0x19db0008bd77  1697  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008bd7b  169b  7793           ja 0x19db0008bd10  <+0x1630>
0x19db0008bd7d  169d  e9a81d0000     jmp 0x19db0008db2a  <+0x344a>
0x19db0008bd82  16a2  4183f900       cmpl r9,0x0
0x19db0008bd86  16a6  0f84991e0000   jz 0x19db0008dc25  <+0x3545>
0x19db0008bd8c  16ac  498bc9         REX.W movq rcx,r9
0x19db0008bd8f  16af  4103c9         addl rcx,r9
0x19db0008bd92  16b2  0f80a61e0000   jo 0x19db0008dc3e  <+0x355e>
0x19db0008bd98  16b8  4c8b4db0       REX.W movq r9,[rbp-0x50]
0x19db0008bd9c  16bc  41894917       movl [r9+0x17],rcx
0x19db0008bda0  16c0  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0008bda7  16c7  4d23d9         REX.W andq r11,r9
0x19db0008bdaa  16ca  41f6430804     testb [r11+0x8],0x4
0x19db0008bdaf  16cf  0f85ff240000   jnz 0x19db0008e2b4  <+0x3bd4>
0x19db0008bdb5  16d5  488b4dc0       REX.W movq rcx,[rbp-0x40]
0x19db0008bdb9  16d9  448b49ff       movl r9,[rcx-0x1]
0x19db0008bdbd  16dd  4c8b1550ebffff REX.W movq r10,[rip+0xffffeb50]
0x19db0008bdc4  16e4  4d3bd1         REX.W cmpq r10,r9
0x19db0008bdc7  16e7  7712           ja 0x19db0008bddb  <+0x16fb>
0x19db0008bdc9  16e9  488b1553ebffff REX.W movq rdx,[rip+0xffffeb53]
0x19db0008bdd0  16f0  4c8b1521e9ffff REX.W movq r10,[rip+0xffffe921]
0x19db0008bdd7  16f7  41ffd2         call r10
0x19db0008bdda  16fa  cc             int3l
0x19db0008bddb  16fb  45398dd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r9
0x19db0008bde2  1702  0f85f4290000   jnz 0x19db0008e7dc  <+0x40fc>
0x19db0008bde8  1708  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db0008bdef  170f  4489491b       movl [rcx+0x1b],r9
0x19db0008bdf3  1713  488bd1         REX.W movq rdx,rcx
0x19db0008bdf6  1716  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008bdfa  171a  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008be00  1720  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008be06  1726  41bf559f3008   movl r15,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008be0c  172c  4c8b75c8       REX.W movq r14,[rbp-0x38]
0x19db0008be10  1730  488b45b8       REX.W movq rax,[rbp-0x48]
0x19db0008be14  1734  83f806         cmpl rax,0x6
0x19db0008be17  1737  0f86c6290000   jna 0x19db0008e7e3  <+0x4103>
0x19db0008be1d  173d  8b421f         movl rax,[rdx+0x1f]
0x19db0008be20  1740  4903c5         REX.W addq rax,r13
0x19db0008be23  1743  a801           test al,0x1
0x19db0008be25  1745  0f84b41e0000   jz 0x19db0008dcdf  <+0x35ff>
0x19db0008be2b  174b  413985b0000000 cmpl [r13+0xb0] (root (false_value)),rax
0x19db0008be32  1752  0f843c000000   jz 0x19db0008be74  <+0x1794>
0x19db0008be38  1758  413985b8000000 cmpl [r13+0xb8] (root (empty_string)),rax
0x19db0008be3f  175f  0f842f000000   jz 0x19db0008be74  <+0x1794>
0x19db0008be45  1765  8b50ff         movl rdx,[rax-0x1]
0x19db0008be48  1768  4903d5         REX.W addq rdx,r13
0x19db0008be4b  176b  f6420910       testb [rdx+0x9],0x10
0x19db0008be4f  176f  0f851f000000   jnz 0x19db0008be74  <+0x1794>
0x19db0008be55  1775  41399530010000 cmpl [r13+0x130] (root (heap_number_map)),rdx
0x19db0008be5c  177c  0f84651e0000   jz 0x19db0008dcc7  <+0x35e7>
0x19db0008be62  1782  413995b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rdx
0x19db0008be69  1789  0f84461e0000   jz 0x19db0008dcb5  <+0x35d5>
0x19db0008be6f  178f  e92d010000     jmp 0x19db0008bfa1  <+0x18c1>
0x19db0008be74  1794  8b792b         movl rdi,[rcx+0x2b]
0x19db0008be77  1797  4903fd         REX.W addq rdi,r13
0x19db0008be7a  179a  418b4607       movl rax,[r14+0x7]
0x19db0008be7e  179e  4903c5         REX.W addq rax,r13
0x19db0008be81  17a1  418b560b       movl rdx,[r14+0xb]
0x19db0008be85  17a5  d1fa           sarl rdx, 1
0x19db0008be87  17a7  83fa06         cmpl rdx,0x6
0x19db0008be8a  17aa  0f865a290000   jna 0x19db0008e7ea  <+0x410a>
0x19db0008be90  17b0  8b701f         movl rsi,[rax+0x1f]
0x19db0008be93  17b3  4903f5         REX.W addq rsi,r13
0x19db0008be96  17b6  83fa07         cmpl rdx,0x7
0x19db0008be99  17b9  0f8652290000   jna 0x19db0008e7f1  <+0x4111>
0x19db0008be9f  17bf  8b4023         movl rax,[rax+0x23]
0x19db0008bea2  17c2  4903c5         REX.W addq rax,r13
0x19db0008bea5  17c5  40f6c701       testb rdi,0x1
0x19db0008bea9  17c9  0f8449290000   jz 0x19db0008e7f8  <+0x4118>
0x19db0008beaf  17cf  8b57ff         movl rdx,[rdi-0x1]
0x19db0008beb2  17d2  4903d5         REX.W addq rdx,r13
0x19db0008beb5  17d5  66817a072c04   cmpw [rdx+0x7],0x42c
0x19db0008bebb  17db  0f853e290000   jnz 0x19db0008e7ff  <+0x411f>
0x19db0008bec1  17e1  8b5713         movl rdx,[rdi+0x13]
0x19db0008bec4  17e4  4903d5         REX.W addq rdx,r13
0x19db0008bec7  17e7  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008bed1  17f1  483bda         REX.W cmpq rbx,rdx
0x19db0008bed4  17f4  0f852c290000   jnz 0x19db0008e806  <+0x4126>
0x19db0008beda  17fa  50             push rax
0x19db0008bedb  17fb  56             push rsi
0x19db0008bedc  17fc  4d8bb590000000 REX.W movq r14,[r13+0x90] (root (undefined_value))
0x19db0008bee3  1803  4156           push r14
0x19db0008bee5  1805  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008beef  180f  b802000000     movl rax,0x2
0x19db0008bef4  1814  4c8b1576f0ffff REX.W movq r10,[rip+0xfffff076]
0x19db0008befb  181b  41ffd2         call r10
0x19db0008befe  181e  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008bf02  1822  448b410f       movl r8,[rcx+0xf]
0x19db0008bf06  1826  4d03c5         REX.W addq r8,r13
0x19db0008bf09  1829  41f6c001       testb r8,0x1
0x19db0008bf0d  182d  0f8401290000   jz 0x19db0008e814  <+0x4134>
0x19db0008bf13  1833  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008bf19  1839  453948ff       cmpl [r8-0x1],r9
0x19db0008bf1d  183d  0f85f8280000   jnz 0x19db0008e81b  <+0x413b>
0x19db0008bf23  1843  458b6003       movl r12,[r8+0x3]
0x19db0008bf27  1847  4d03e5         REX.W addq r12,r13
0x19db0008bf2a  184a  458b64240f     movl r12,[r12+0xf]
0x19db0008bf2f  184f  4d03e5         REX.W addq r12,r13
0x19db0008bf32  1852  41f6c401       testb r12,0x1
0x19db0008bf36  1856  0f84e6280000   jz 0x19db0008e822  <+0x4142>
0x19db0008bf3c  185c  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008bf42  1862  45395c24ff     cmpl [r12-0x1],r11
0x19db0008bf47  1867  0f85dc280000   jnz 0x19db0008e829  <+0x4149>
0x19db0008bf4d  186d  418b442407     movl rax,[r12+0x7]
0x19db0008bf52  1872  4903c5         REX.W addq rax,r13
0x19db0008bf55  1875  448b70ff       movl r14,[rax-0x1]
0x19db0008bf59  1879  4c8b15b4e9ffff REX.W movq r10,[rip+0xffffe9b4]
0x19db0008bf60  1880  4d3bd6         REX.W cmpq r10,r14
0x19db0008bf63  1883  7712           ja 0x19db0008bf77  <+0x1897>
0x19db0008bf65  1885  488b15b7e9ffff REX.W movq rdx,[rip+0xffffe9b7]
0x19db0008bf6c  188c  4c8b1585e7ffff REX.W movq r10,[rip+0xffffe785]
0x19db0008bf73  1893  41ffd2         call r10
0x19db0008bf76  1896  cc             int3l
0x19db0008bf77  1897  4539b5d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r14
0x19db0008bf7e  189e  0f85ac280000   jnz 0x19db0008e830  <+0x4150>
0x19db0008bf84  18a4  458b64240b     movl r12,[r12+0xb]
0x19db0008bf89  18a9  41d1fc         sarl r12, 1
0x19db0008bf8c  18ac  4183fc06       cmpl r12,0x6
0x19db0008bf90  18b0  0f86a1280000   jna 0x19db0008e837  <+0x4157>
0x19db0008bf96  18b6  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db0008bf9d  18bd  4489401f       movl [rax+0x1f],r8
0x19db0008bfa1  18c1  448b410f       movl r8,[rcx+0xf]
0x19db0008bfa5  18c5  4d03c5         REX.W addq r8,r13
0x19db0008bfa8  18c8  41f6c001       testb r8,0x1
0x19db0008bfac  18cc  0f848c280000   jz 0x19db0008e83e  <+0x415e>
0x19db0008bfb2  18d2  453948ff       cmpl [r8-0x1],r9
0x19db0008bfb6  18d6  0f8589280000   jnz 0x19db0008e845  <+0x4165>
0x19db0008bfbc  18dc  458b6003       movl r12,[r8+0x3]
0x19db0008bfc0  18e0  4d03e5         REX.W addq r12,r13
0x19db0008bfc3  18e3  458b64240f     movl r12,[r12+0xf]
0x19db0008bfc8  18e8  4d03e5         REX.W addq r12,r13
0x19db0008bfcb  18eb  41f6c401       testb r12,0x1
0x19db0008bfcf  18ef  0f8477280000   jz 0x19db0008e84c  <+0x416c>
0x19db0008bfd5  18f5  45395c24ff     cmpl [r12-0x1],r11
0x19db0008bfda  18fa  0f8573280000   jnz 0x19db0008e853  <+0x4173>
0x19db0008bfe0  1900  418b442407     movl rax,[r12+0x7]
0x19db0008bfe5  1905  4903c5         REX.W addq rax,r13
0x19db0008bfe8  1908  458b64240b     movl r12,[r12+0xb]
0x19db0008bfed  190d  41d1fc         sarl r12, 1
0x19db0008bff0  1910  4183fc07       cmpl r12,0x7
0x19db0008bff4  1914  0f8660280000   jna 0x19db0008e85a  <+0x417a>
0x19db0008bffa  191a  448b6023       movl r12,[rax+0x23]
0x19db0008bffe  191e  4d03e5         REX.W addq r12,r13
0x19db0008c001  1921  4c8945c0       REX.W movq [rbp-0x40],r8
0x19db0008c005  1925  488945c8       REX.W movq [rbp-0x38],rax
0x19db0008c009  1929  41f6c401       testb r12,0x1
0x19db0008c00d  192d  0f84081d0000   jz 0x19db0008dd1b  <+0x363b>
0x19db0008c013  1933  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db0008c01a  193a  0f843e000000   jz 0x19db0008c05e  <+0x197e>
0x19db0008c020  1940  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db0008c027  1947  0f8431000000   jz 0x19db0008c05e  <+0x197e>
0x19db0008c02d  194d  418b5424ff     movl rdx,[r12-0x1]
0x19db0008c032  1952  4903d5         REX.W addq rdx,r13
0x19db0008c035  1955  f6420910       testb [rdx+0x9],0x10
0x19db0008c039  1959  0f851f000000   jnz 0x19db0008c05e  <+0x197e>
0x19db0008c03f  195f  41399530010000 cmpl [r13+0x130] (root (heap_number_map)),rdx
0x19db0008c046  1966  0f84b51c0000   jz 0x19db0008dd01  <+0x3621>
0x19db0008c04c  196c  413995b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rdx
0x19db0008c053  1973  0f84941c0000   jz 0x19db0008dced  <+0x360d>
0x19db0008c059  1979  e9c5040000     jmp 0x19db0008c523  <+0x1e43>
0x19db0008c05e  197e  448b612b       movl r12,[rcx+0x2b]
0x19db0008c062  1982  4d03e5         REX.W addq r12,r13
0x19db0008c065  1985  458b7007       movl r14,[r8+0x7]
0x19db0008c069  1989  4d03f5         REX.W addq r14,r13
0x19db0008c06c  198c  458b780b       movl r15,[r8+0xb]
0x19db0008c070  1990  41d1ff         sarl r15, 1
0x19db0008c073  1993  4183ff07       cmpl r15,0x7
0x19db0008c077  1997  0f86e4270000   jna 0x19db0008e861  <+0x4181>
0x19db0008c07d  199d  418b5623       movl rdx,[r14+0x23]
0x19db0008c081  19a1  4903d5         REX.W addq rdx,r13
0x19db0008c084  19a4  4183ff04       cmpl r15,0x4
0x19db0008c088  19a8  0f86da270000   jna 0x19db0008e868  <+0x4188>
0x19db0008c08e  19ae  458b7617       movl r14,[r14+0x17]
0x19db0008c092  19b2  4d03f5         REX.W addq r14,r13
0x19db0008c095  19b5  41f6c401       testb r12,0x1
0x19db0008c099  19b9  0f84d0270000   jz 0x19db0008e86f  <+0x418f>
0x19db0008c09f  19bf  418b4c24ff     movl rcx,[r12-0x1]
0x19db0008c0a4  19c4  4903cd         REX.W addq rcx,r13
0x19db0008c0a7  19c7  668179072c04   cmpw [rcx+0x7],0x42c
0x19db0008c0ad  19cd  0f85c3270000   jnz 0x19db0008e876  <+0x4196>
0x19db0008c0b3  19d3  418b4c2413     movl rcx,[r12+0x13]
0x19db0008c0b8  19d8  4903cd         REX.W addq rcx,r13
0x19db0008c0bb  19db  49bfa1422f08db190000 REX.W movq r15,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008c0c5  19e5  4c3bf9         REX.W cmpq r15,rcx
0x19db0008c0c8  19e8  0f85af270000   jnz 0x19db0008e87d  <+0x419d>
0x19db0008c0ce  19ee  418b4c240f     movl rcx,[r12+0xf]
0x19db0008c0d3  19f3  4903cd         REX.W addq rcx,r13
0x19db0008c0d6  19f6  4c8965a0       REX.W movq [rbp-0x60],r12
0x19db0008c0da  19fa  48894d88       REX.W movq [rbp-0x78],rcx
0x19db0008c0de  19fe  f6c201         testb rdx,0x1
0x19db0008c0e1  1a01  0f849d270000   jz 0x19db0008e884  <+0x41a4>
0x19db0008c0e7  1a07  448b7aff       movl r15,[rdx-0x1]
0x19db0008c0eb  1a0b  4c8b1522e8ffff REX.W movq r10,[rip+0xffffe822]
0x19db0008c0f2  1a12  4d3bd7         REX.W cmpq r10,r15
0x19db0008c0f5  1a15  7712           ja 0x19db0008c109  <+0x1a29>
0x19db0008c0f7  1a17  488b1525e8ffff REX.W movq rdx,[rip+0xffffe825]
0x19db0008c0fe  1a1e  4c8b15f3e5ffff REX.W movq r10,[rip+0xffffe5f3]
0x19db0008c105  1a25  41ffd2         call r10
0x19db0008c108  1a28  cc             int3l
0x19db0008c109  1a29  bba5db3008     movl rbx,0x830dba5      ;; (compressed) object: 0x19db0830dba5 <Map(HOLEY_ELEMENTS)>
0x19db0008c10e  1a2e  443bfb         cmpl r15,rbx
0x19db0008c111  1a31  0f842a000000   jz 0x19db0008c141  <+0x1a61>
0x19db0008c117  1a37  be5ddd3008     movl rsi,0x830dd5d      ;; (compressed) object: 0x19db0830dd5d <Map(HOLEY_ELEMENTS)>
0x19db0008c11c  1a3c  413bf7         cmpl rsi,r15
0x19db0008c11f  1a3f  0f841c000000   jz 0x19db0008c141  <+0x1a61>
0x19db0008c125  1a45  be4dde3008     movl rsi,0x830de4d      ;; (compressed) object: 0x19db0830de4d <Map(HOLEY_ELEMENTS)>
0x19db0008c12a  1a4a  413bf7         cmpl rsi,r15
0x19db0008c12d  1a4d  0f840e000000   jz 0x19db0008c141  <+0x1a61>
0x19db0008c133  1a53  be3ddf3008     movl rsi,0x830df3d      ;; (compressed) object: 0x19db0830df3d <Map(HOLEY_ELEMENTS)>
0x19db0008c138  1a58  413bf7         cmpl rsi,r15
0x19db0008c13b  1a5b  0f854a270000   jnz 0x19db0008e88b  <+0x41ab>
0x19db0008c141  1a61  448b7a0b       movl r15,[rdx+0xb]
0x19db0008c145  1a65  4d03fd         REX.W addq r15,r13
0x19db0008c148  1a68  be559f3008     movl rsi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008c14d  1a6d  413977ff       cmpl [r15-0x1],rsi
0x19db0008c151  1a71  0f853b270000   jnz 0x19db0008e892  <+0x41b2>
0x19db0008c157  1a77  418b7f07       movl rdi,[r15+0x7]
0x19db0008c15b  1a7b  4903fd         REX.W addq rdi,r13
0x19db0008c15e  1a7e  458b7f0b       movl r15,[r15+0xb]
0x19db0008c162  1a82  41d1ff         sarl r15, 1
0x19db0008c165  1a85  4183ff00       cmpl r15,0x0
0x19db0008c169  1a89  0f862a270000   jna 0x19db0008e899  <+0x41b9>
0x19db0008c16f  1a8f  c5fb104707     vmovsd xmm0,[rdi+0x7]
0x19db0008c174  1a94  41f6c601       testb r14,0x1
0x19db0008c178  1a98  0f8422270000   jz 0x19db0008e8a0  <+0x41c0>
0x19db0008c17e  1a9e  458b46ff       movl r8,[r14-0x1]
0x19db0008c182  1aa2  4c8b158be7ffff REX.W movq r10,[rip+0xffffe78b]
0x19db0008c189  1aa9  4d3bd0         REX.W cmpq r10,r8
0x19db0008c18c  1aac  7712           ja 0x19db0008c1a0  <+0x1ac0>
0x19db0008c18e  1aae  488b158ee7ffff REX.W movq rdx,[rip+0xffffe78e]
0x19db0008c195  1ab5  4c8b155ce5ffff REX.W movq r10,[rip+0xffffe55c]
0x19db0008c19c  1abc  41ffd2         call r10
0x19db0008c19f  1abf  cc             int3l
0x19db0008c1a0  1ac0  413bd8         cmpl rbx,r8
0x19db0008c1a3  1ac3  0f842a000000   jz 0x19db0008c1d3  <+0x1af3>
0x19db0008c1a9  1ac9  bb5ddd3008     movl rbx,0x830dd5d      ;; (compressed) object: 0x19db0830dd5d <Map(HOLEY_ELEMENTS)>
0x19db0008c1ae  1ace  413bd8         cmpl rbx,r8
0x19db0008c1b1  1ad1  0f841c000000   jz 0x19db0008c1d3  <+0x1af3>
0x19db0008c1b7  1ad7  bb4dde3008     movl rbx,0x830de4d      ;; (compressed) object: 0x19db0830de4d <Map(HOLEY_ELEMENTS)>
0x19db0008c1bc  1adc  413bd8         cmpl rbx,r8
0x19db0008c1bf  1adf  0f840e000000   jz 0x19db0008c1d3  <+0x1af3>
0x19db0008c1c5  1ae5  bb3ddf3008     movl rbx,0x830df3d      ;; (compressed) object: 0x19db0830df3d <Map(HOLEY_ELEMENTS)>
0x19db0008c1ca  1aea  413bd8         cmpl rbx,r8
0x19db0008c1cd  1aed  0f85d4260000   jnz 0x19db0008e8a7  <+0x41c7>
0x19db0008c1d3  1af3  458b460b       movl r8,[r14+0xb]
0x19db0008c1d7  1af7  4d03c5         REX.W addq r8,r13
0x19db0008c1da  1afa  413970ff       cmpl [r8-0x1],rsi
0x19db0008c1de  1afe  0f85ca260000   jnz 0x19db0008e8ae  <+0x41ce>
0x19db0008c1e4  1b04  418b7007       movl rsi,[r8+0x7]
0x19db0008c1e8  1b08  4903f5         REX.W addq rsi,r13
0x19db0008c1eb  1b0b  458b400b       movl r8,[r8+0xb]
0x19db0008c1ef  1b0f  41d1f8         sarl r8, 1
0x19db0008c1f2  1b12  4183f800       cmpl r8,0x0
0x19db0008c1f6  1b16  0f86b9260000   jna 0x19db0008e8b5  <+0x41d5>
0x19db0008c1fc  1b1c  c5fb104e07     vmovsd xmm1,[rsi+0x7]
0x19db0008c201  1b21  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008c205  1b25  0f830a000000   jnc 0x19db0008c215  <+0x1b35>
0x19db0008c20b  1b2b  bbffffffff     movl rbx,0xffffffff
0x19db0008c210  1b30  e905000000     jmp 0x19db0008c21a  <+0x1b3a>
0x19db0008c215  1b35  bb01000000     movl rbx,0x1
0x19db0008c21a  1b3a  4183ff01       cmpl r15,0x1
0x19db0008c21e  1b3e  0f8698260000   jna 0x19db0008e8bc  <+0x41dc>
0x19db0008c224  1b44  c5fb10570f     vmovsd xmm2,[rdi+0xf]
0x19db0008c229  1b49  4183f801       cmpl r8,0x1
0x19db0008c22d  1b4d  0f8690260000   jna 0x19db0008e8c3  <+0x41e3>
0x19db0008c233  1b53  c5fb10660f     vmovsd xmm4,[rsi+0xf]
0x19db0008c238  1b58  c5f92ee2       vucomisd xmm4,xmm2
0x19db0008c23c  1b5c  0f830b000000   jnc 0x19db0008c24d  <+0x1b6d>
0x19db0008c242  1b62  41b8ffffffff   movl r8,0xffffffff
0x19db0008c248  1b68  e906000000     jmp 0x19db0008c253  <+0x1b73>
0x19db0008c24d  1b6d  41b801000000   movl r8,0x1
0x19db0008c253  1b73  c5db5cda       vsubsd xmm3,xmm4,xmm2
0x19db0008c257  1b77  c5d176ed       vpcmpeqd xmm5,xmm5,xmm5
0x19db0008c25b  1b7b  c5d173d501     vpsrlq xmm5,xmm5,1
0x19db0008c260  1b80  c5d154e3       vandpd xmm4,xmm5,xmm3
0x19db0008c264  1b84  c5f35cc8       vsubsd xmm1,xmm1,xmm0
0x19db0008c268  1b88  c5d176ed       vpcmpeqd xmm5,xmm5,xmm5
0x19db0008c26c  1b8c  c5d173d501     vpsrlq xmm5,xmm5,1
0x19db0008c271  1b91  c5d154d9       vandpd xmm3,xmm5,xmm1
0x19db0008c275  1b95  c5f92edc       vucomisd xmm3,xmm4
0x19db0008c279  1b99  0f832f000000   jnc 0x19db0008c2ae  <+0x1bce>
0x19db0008c27f  1b9f  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008c283  1ba3  c5f173f137     vpsllq xmm1,xmm1,55
0x19db0008c288  1ba8  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0008c28d  1bad  c5db59e9       vmulsd xmm5,xmm4,xmm1
0x19db0008c291  1bb1  498bf0         REX.W movq rsi,r8
0x19db0008c294  1bb4  c57928fb       vmovapd xmm15,xmm3
0x19db0008c298  1bb8  c5f928dc       vmovapd xmm3,xmm4
0x19db0008c29c  1bbc  c4c17928e7     vmovapd xmm4,xmm15
0x19db0008c2a1  1bc1  4c8bc3         REX.W movq r8,rbx
0x19db0008c2a4  1bc4  33db           xorl rbx,rbx
0x19db0008c2a6  1bc6  4c8bfb         REX.W movq r15,rbx
0x19db0008c2a9  1bc9  e91a000000     jmp 0x19db0008c2c8  <+0x1be8>
0x19db0008c2ae  1bce  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008c2b2  1bd2  c5f173f137     vpsllq xmm1,xmm1,55
0x19db0008c2b7  1bd7  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0008c2bc  1bdc  c5e359e9       vmulsd xmm5,xmm3,xmm1
0x19db0008c2c0  1be0  33f6           xorl rsi,rsi
0x19db0008c2c2  1be2  4d8bf8         REX.W movq r15,r8
0x19db0008c2c5  1be5  4c8bc6         REX.W movq r8,rsi
0x19db0008c2c8  1be8  48bf09652e08db190000 REX.W movq rdi,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db0008c2d2  1bf2  b839692e08     movl rax,0x82e6939      ;; (compressed) object: 0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)>
0x19db0008c2d7  1bf7  39470b         cmpl [rdi+0xb],rax
0x19db0008c2da  1bfa  0f85ea250000   jnz 0x19db0008e8ca  <+0x41ea>
0x19db0008c2e0  1c00  8b4703         movl rax,[rdi+0x3]
0x19db0008c2e3  1c03  4903c5         REX.W addq rax,r13
0x19db0008c2e6  1c06  8b4063         movl rax,[rax+0x63]
0x19db0008c2e9  1c09  4c8b1524e6ffff REX.W movq r10,[rip+0xffffe624]
0x19db0008c2f0  1c10  4c3bd0         REX.W cmpq r10,rax
0x19db0008c2f3  1c13  7712           ja 0x19db0008c307  <+0x1c27>
0x19db0008c2f5  1c15  488b1527e6ffff REX.W movq rdx,[rip+0xffffe627]
0x19db0008c2fc  1c1c  4c8b15f5e3ffff REX.W movq r10,[rip+0xffffe3f5]
0x19db0008c303  1c23  41ffd2         call r10
0x19db0008c306  1c26  cc             int3l
0x19db0008c307  1c27  8b790f         movl rdi,[rcx+0xf]
0x19db0008c30a  1c2a  4903fd         REX.W addq rdi,r13
0x19db0008c30d  1c2d  40f6c701       testb rdi,0x1
0x19db0008c311  1c31  0f84ba250000   jz 0x19db0008e8d1  <+0x41f1>
0x19db0008c317  1c37  44394fff       cmpl [rdi-0x1],r9
0x19db0008c31b  1c3b  0f85b7250000   jnz 0x19db0008e8d8  <+0x41f8>
0x19db0008c321  1c41  8b7f03         movl rdi,[rdi+0x3]
0x19db0008c324  1c44  4903fd         REX.W addq rdi,r13
0x19db0008c327  1c47  448b4f17       movl r9,[rdi+0x17]
0x19db0008c32b  1c4b  4d03cd         REX.W addq r9,r13
0x19db0008c32e  1c4e  41f6c101       testb r9,0x1
0x19db0008c332  1c52  410f94c3       setzl r11l
0x19db0008c336  1c56  450fb6db       movzxbl r11,r11
0x19db0008c33a  1c5a  48897db8       REX.W movq [rbp-0x48],rdi
0x19db0008c33e  1c5e  498bf9         REX.W movq rdi,r9
0x19db0008c341  1c61  d1ff           sarl rdi, 1
0x19db0008c343  1c63  4183fb00       cmpl r11,0x0
0x19db0008c347  1c67  0f852e000000   jnz 0x19db0008c37b  <+0x1c9b>
0x19db0008c34d  1c6d  418b49ff       movl rcx,[r9-0x1]
0x19db0008c351  1c71  4903cd         REX.W addq rcx,r13
0x19db0008c354  1c74  41398d30010000 cmpl [r13+0x130] (root (heap_number_map)),rcx
0x19db0008c35b  1c7b  0f840b000000   jz 0x19db0008c36c  <+0x1c8c>
0x19db0008c361  1c81  6683790743     cmpw [rcx+0x7],0x43
0x19db0008c366  1c86  0f8573250000   jnz 0x19db0008e8df  <+0x41ff>
0x19db0008c36c  1c8c  c4c17b107103   vmovsd xmm6,[r9+0x3]
0x19db0008c372  1c92  488b4d88       REX.W movq rcx,[rbp-0x78]
0x19db0008c376  1c96  e904000000     jmp 0x19db0008c37f  <+0x1c9f>
0x19db0008c37b  1c9b  c5832af7       vcvtlsi2sd xmm6,xmm15,rdi
0x19db0008c37f  1c9f  c5cb58f3       vaddsd xmm6,xmm6,xmm3
0x19db0008c383  1ca3  c4e3410bfe0a   vroundsd xmm7,xmm7,xmm6,0xa
0x19db0008c389  1ca9  c5c35cc9       vsubsd xmm1,xmm7,xmm1
0x19db0008c38d  1cad  c5f92ef1       vucomisd xmm6,xmm1
0x19db0008c391  1cb1  0f8312000000   jnc 0x19db0008c3a9  <+0x1cc9>
0x19db0008c397  1cb7  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008c39b  1cbb  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0008c3a0  1cc0  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0008c3a5  1cc5  c5c35cf9       vsubsd xmm7,xmm7,xmm1
0x19db0008c3a9  1cc9  c57b2ccf       vcvttsd2si r9,xmm7
0x19db0008c3ad  1ccd  b959682e08     movl rcx,0x82e6859      ;; (compressed) object: 0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)>
0x19db0008c3b2  1cd2  3bc8           cmpl rcx,rax
0x19db0008c3b4  1cd4  0f852c250000   jnz 0x19db0008e8e6  <+0x4206>
0x19db0008c3ba  1cda  c4c1032ac9     vcvtlsi2sd xmm1,xmm15,r9
0x19db0008c3bf  1cdf  4183fb00       cmpl r11,0x0
0x19db0008c3c3  1ce3  0f8424250000   jz 0x19db0008e8ed  <+0x420d>
0x19db0008c3c9  1ce9  c5f92ecf       vucomisd xmm1,xmm7
0x19db0008c3cd  1ced  0f8a21250000   jpe 0x19db0008e8f4  <+0x4214>
0x19db0008c3d3  1cf3  0f851b250000   jnz 0x19db0008e8f4  <+0x4214>
0x19db0008c3d9  1cf9  413bf9         cmpl rdi,r9
0x19db0008c3dc  1cfc  0f8dc0000000   jge 0x19db0008c4a2  <+0x1dc2>
0x19db0008c3e2  1d02  c5d358cc       vaddsd xmm1,xmm5,xmm4
0x19db0008c3e6  1d06  c5f92ecb       vucomisd xmm1,xmm3
0x19db0008c3ea  1d0a  0f8216000000   jc 0x19db0008c406  <+0x1d26>
0x19db0008c3f0  1d10  c4c1032aef     vcvtlsi2sd xmm5,xmm15,r15
0x19db0008c3f5  1d15  c4c1032af0     vcvtlsi2sd xmm6,xmm15,r8
0x19db0008c3fa  1d1a  c5d358d2       vaddsd xmm2,xmm5,xmm2
0x19db0008c3fe  1d1e  c5cb58c0       vaddsd xmm0,xmm6,xmm0
0x19db0008c402  1d22  c5f35ccb       vsubsd xmm1,xmm1,xmm3
0x19db0008c406  1d26  c5832aee       vcvtlsi2sd xmm5,xmm15,rsi
0x19db0008c40a  1d2a  c5832af3       vcvtlsi2sd xmm6,xmm15,rbx
0x19db0008c40e  1d2e  83c701         addl rdi,0x1
0x19db0008c411  1d31  0f80e4240000   jo 0x19db0008e8fb  <+0x421b>
0x19db0008c417  1d37  c5eb58d5       vaddsd xmm2,xmm2,xmm5
0x19db0008c41b  1d3b  c5fb58c6       vaddsd xmm0,xmm0,xmm6
0x19db0008c41f  1d3f  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008c423  1d43  0f870f000000   ja 0x19db0008c438  <+0x1d58>
0x19db0008c429  1d49  e9fc180000     jmp 0x19db0008dd2a  <+0x364a>
0x19db0008c42e  1d4e  6690           nop
0x19db0008c430  1d50  488bf9         REX.W movq rdi,rcx
0x19db0008c433  1d53  c4c17928c8     vmovapd xmm1,xmm8
0x19db0008c438  1d58  413bf9         cmpl rdi,r9
0x19db0008c43b  1d5b  0f8d61000000   jge 0x19db0008c4a2  <+0x1dc2>
0x19db0008c441  1d61  c57358c4       vaddsd xmm8,xmm1,xmm4
0x19db0008c445  1d65  c5792ec3       vucomisd xmm8,xmm3
0x19db0008c449  1d69  0f830d000000   jnc 0x19db0008c45c  <+0x1d7c>
0x19db0008c44f  1d6f  c57928d2       vmovapd xmm10,xmm2
0x19db0008c453  1d73  c57928c8       vmovapd xmm9,xmm0
0x19db0008c457  1d77  e925000000     jmp 0x19db0008c481  <+0x1da1>
0x19db0008c45c  1d7c  c441032acf     vcvtlsi2sd xmm9,xmm15,r15
0x19db0008c461  1d81  c53358ca       vaddsd xmm9,xmm9,xmm2
0x19db0008c465  1d85  c441032ad0     vcvtlsi2sd xmm10,xmm15,r8
0x19db0008c46a  1d8a  c52b58d0       vaddsd xmm10,xmm10,xmm0
0x19db0008c46e  1d8e  c53b5cc3       vsubsd xmm8,xmm8,xmm3
0x19db0008c472  1d92  c4417928fa     vmovapd xmm15,xmm10
0x19db0008c477  1d97  c4417928d1     vmovapd xmm10,xmm9
0x19db0008c47c  1d9c  c4417928cf     vmovapd xmm9,xmm15
0x19db0008c481  1da1  488bcf         REX.W movq rcx,rdi
0x19db0008c484  1da4  83c101         addl rcx,0x1
0x19db0008c487  1da7  0f8075240000   jo 0x19db0008e902  <+0x4222>
0x19db0008c48d  1dad  c4c15358d2     vaddsd xmm2,xmm5,xmm10
0x19db0008c492  1db2  c4c14b58c1     vaddsd xmm0,xmm6,xmm9
0x19db0008c497  1db7  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008c49b  1dbb  7793           ja 0x19db0008c430  <+0x1d50>
0x19db0008c49d  1dbd  e986190000     jmp 0x19db0008de28  <+0x3748>
0x19db0008c4a2  1dc2  4183f900       cmpl r9,0x0
0x19db0008c4a6  1dc6  0f847a1a0000   jz 0x19db0008df26  <+0x3846>
0x19db0008c4ac  1dcc  498bc9         REX.W movq rcx,r9
0x19db0008c4af  1dcf  4103c9         addl rcx,r9
0x19db0008c4b2  1dd2  0f80871a0000   jo 0x19db0008df3f  <+0x385f>
0x19db0008c4b8  1dd8  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db0008c4bc  1ddc  41894817       movl [r8+0x17],rcx
0x19db0008c4c0  1de0  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0008c4c7  1de7  4d23c8         REX.W andq r9,r8
0x19db0008c4ca  1dea  41f6410804     testb [r9+0x8],0x4
0x19db0008c4cf  1def  0f85901d0000   jnz 0x19db0008e265  <+0x3b85>
0x19db0008c4d5  1df5  488b4dc8       REX.W movq rcx,[rbp-0x38]
0x19db0008c4d9  1df9  448b41ff       movl r8,[rcx-0x1]
0x19db0008c4dd  1dfd  4c8b1530e4ffff REX.W movq r10,[rip+0xffffe430]
0x19db0008c4e4  1e04  4d3bd0         REX.W cmpq r10,r8
0x19db0008c4e7  1e07  7712           ja 0x19db0008c4fb  <+0x1e1b>
0x19db0008c4e9  1e09  488b1533e4ffff REX.W movq rdx,[rip+0xffffe433]
0x19db0008c4f0  1e10  4c8b1501e2ffff REX.W movq r10,[rip+0xffffe201]
0x19db0008c4f7  1e17  41ffd2         call r10
0x19db0008c4fa  1e1a  cc             int3l
0x19db0008c4fb  1e1b  453985d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r8
0x19db0008c502  1e22  0f8501240000   jnz 0x19db0008e909  <+0x4229>
0x19db0008c508  1e28  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db0008c50f  1e2f  44894123       movl [rcx+0x23],r8
0x19db0008c513  1e33  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008c517  1e37  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008c51d  1e3d  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008c523  1e43  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008c527  1e47  41bccd9f3008   movl r12,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008c52d  1e4d  453960ff       cmpl [r8-0x1],r12
0x19db0008c531  1e51  0f85d9230000   jnz 0x19db0008e910  <+0x4230>
0x19db0008c537  1e57  458b7007       movl r14,[r8+0x7]
0x19db0008c53b  1e5b  4d03f5         REX.W addq r14,r13
0x19db0008c53e  1e5e  458b780b       movl r15,[r8+0xb]
0x19db0008c542  1e62  41d1ff         sarl r15, 1
0x19db0008c545  1e65  4183ff03       cmpl r15,0x3
0x19db0008c549  1e69  0f86c8230000   jna 0x19db0008e917  <+0x4237>
0x19db0008c54f  1e6f  458b7613       movl r14,[r14+0x13]
0x19db0008c553  1e73  4d03f5         REX.W addq r14,r13
0x19db0008c556  1e76  4539b598000000 cmpl [r13+0x98] (root (the_hole_value)),r14
0x19db0008c55d  1e7d  0f843e1a0000   jz 0x19db0008dfa1  <+0x38c1>
0x19db0008c563  1e83  41f6c601       testb r14,0x1
0x19db0008c567  1e87  0f84b1230000   jz 0x19db0008e91e  <+0x423e>
0x19db0008c56d  1e8d  41bf559f3008   movl r15,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008c573  1e93  45397eff       cmpl [r14-0x1],r15
0x19db0008c577  1e97  0f85a8230000   jnz 0x19db0008e925  <+0x4245>
0x19db0008c57d  1e9d  418b4607       movl rax,[r14+0x7]
0x19db0008c581  1ea1  4903c5         REX.W addq rax,r13
0x19db0008c584  1ea4  458b760b       movl r14,[r14+0xb]
0x19db0008c588  1ea8  41d1fe         sarl r14, 1
0x19db0008c58b  1eab  4183fe02       cmpl r14,0x2
0x19db0008c58f  1eaf  0f8697230000   jna 0x19db0008e92c  <+0x424c>
0x19db0008c595  1eb5  c5fb104017     vmovsd xmm0,[rax+0x17]
0x19db0008c59a  1eba  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008c59e  1ebe  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008c5a2  1ec2  0f863d060000   jna 0x19db0008cbe5  <+0x2505>
0x19db0008c5a8  1ec8  448b710f       movl r14,[rcx+0xf]
0x19db0008c5ac  1ecc  4d03f5         REX.W addq r14,r13
0x19db0008c5af  1ecf  41f6c601       testb r14,0x1
0x19db0008c5b3  1ed3  0f847a230000   jz 0x19db0008e933  <+0x4253>
0x19db0008c5b9  1ed9  45394eff       cmpl [r14-0x1],r9
0x19db0008c5bd  1edd  0f8577230000   jnz 0x19db0008e93a  <+0x425a>
0x19db0008c5c3  1ee3  418b4603       movl rax,[r14+0x3]
0x19db0008c5c7  1ee7  4903c5         REX.W addq rax,r13
0x19db0008c5ca  1eea  8b400f         movl rax,[rax+0xf]
0x19db0008c5cd  1eed  4903c5         REX.W addq rax,r13
0x19db0008c5d0  1ef0  a801           test al,0x1
0x19db0008c5d2  1ef2  0f8469230000   jz 0x19db0008e941  <+0x4261>
0x19db0008c5d8  1ef8  443958ff       cmpl [rax-0x1],r11
0x19db0008c5dc  1efc  0f8566230000   jnz 0x19db0008e948  <+0x4268>
0x19db0008c5e2  1f02  8b5007         movl rdx,[rax+0x7]
0x19db0008c5e5  1f05  4903d5         REX.W addq rdx,r13
0x19db0008c5e8  1f08  8b400b         movl rax,[rax+0xb]
0x19db0008c5eb  1f0b  d1f8           sarl rax, 1
0x19db0008c5ed  1f0d  83f804         cmpl rax,0x4
0x19db0008c5f0  1f10  0f8659230000   jna 0x19db0008e94f  <+0x426f>
0x19db0008c5f6  1f16  8b7217         movl rsi,[rdx+0x17]
0x19db0008c5f9  1f19  4903f5         REX.W addq rsi,r13
0x19db0008c5fc  1f1c  40f6c601       testb rsi,0x1
0x19db0008c600  1f20  0f84cd190000   jz 0x19db0008dfd3  <+0x38f3>
0x19db0008c606  1f26  4139b5b0000000 cmpl [r13+0xb0] (root (false_value)),rsi
0x19db0008c60d  1f2d  0f843c000000   jz 0x19db0008c64f  <+0x1f6f>
0x19db0008c613  1f33  4139b5b8000000 cmpl [r13+0xb8] (root (empty_string)),rsi
0x19db0008c61a  1f3a  0f842f000000   jz 0x19db0008c64f  <+0x1f6f>
0x19db0008c620  1f40  8b7eff         movl rdi,[rsi-0x1]
0x19db0008c623  1f43  4903fd         REX.W addq rdi,r13
0x19db0008c626  1f46  f6470910       testb [rdi+0x9],0x10
0x19db0008c62a  1f4a  0f851f000000   jnz 0x19db0008c64f  <+0x1f6f>
0x19db0008c630  1f50  4139bd30010000 cmpl [r13+0x130] (root (heap_number_map)),rdi
0x19db0008c637  1f57  0f8482190000   jz 0x19db0008dfbf  <+0x38df>
0x19db0008c63d  1f5d  4139bdb0010000 cmpl [r13+0x1b0] (root (bigint_map)),rdi
0x19db0008c644  1f64  0f8463190000   jz 0x19db0008dfad  <+0x38cd>
0x19db0008c64a  1f6a  e927000000     jmp 0x19db0008c676  <+0x1f96>
0x19db0008c64f  1f6f  448b492b       movl r9,[rcx+0x2b]
0x19db0008c653  1f73  4c8b15bae2ffff REX.W movq r10,[rip+0xffffe2ba]
0x19db0008c65a  1f7a  4d3bd1         REX.W cmpq r10,r9
0x19db0008c65d  1f7d  7712           ja 0x19db0008c671  <+0x1f91>
0x19db0008c65f  1f7f  488b15bde2ffff REX.W movq rdx,[rip+0xffffe2bd]
0x19db0008c666  1f86  4c8b158be0ffff REX.W movq r10,[rip+0xffffe08b]
0x19db0008c66d  1f8d  41ffd2         call r10
0x19db0008c670  1f90  cc             int3l
0x19db0008c671  1f91  e9e2250000     jmp 0x19db0008ec58  <+0x4578>
0x19db0008c676  1f96  83f808         cmpl rax,0x8
0x19db0008c679  1f99  0f86de220000   jna 0x19db0008e95d  <+0x427d>
0x19db0008c67f  1f9f  8b4227         movl rax,[rdx+0x27]
0x19db0008c682  1fa2  4903c5         REX.W addq rax,r13
0x19db0008c685  1fa5  a801           test al,0x1
0x19db0008c687  1fa7  0f847f190000   jz 0x19db0008e00c  <+0x392c>
0x19db0008c68d  1fad  413985b0000000 cmpl [r13+0xb0] (root (false_value)),rax
0x19db0008c694  1fb4  0f843c000000   jz 0x19db0008c6d6  <+0x1ff6>
0x19db0008c69a  1fba  413985b8000000 cmpl [r13+0xb8] (root (empty_string)),rax
0x19db0008c6a1  1fc1  0f842f000000   jz 0x19db0008c6d6  <+0x1ff6>
0x19db0008c6a7  1fc7  8b50ff         movl rdx,[rax-0x1]
0x19db0008c6aa  1fca  4903d5         REX.W addq rdx,r13
0x19db0008c6ad  1fcd  f6420910       testb [rdx+0x9],0x10
0x19db0008c6b1  1fd1  0f851f000000   jnz 0x19db0008c6d6  <+0x1ff6>
0x19db0008c6b7  1fd7  41399530010000 cmpl [r13+0x130] (root (heap_number_map)),rdx
0x19db0008c6be  1fde  0f8434190000   jz 0x19db0008dff8  <+0x3918>
0x19db0008c6c4  1fe4  413995b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rdx
0x19db0008c6cb  1feb  0f8415190000   jz 0x19db0008dfe6  <+0x3906>
0x19db0008c6d1  1ff1  e935010000     jmp 0x19db0008c80b  <+0x212b>
0x19db0008c6d6  1ff6  8b792b         movl rdi,[rcx+0x2b]
0x19db0008c6d9  1ff9  4903fd         REX.W addq rdi,r13
0x19db0008c6dc  1ffc  418b4607       movl rax,[r14+0x7]
0x19db0008c6e0  2000  4903c5         REX.W addq rax,r13
0x19db0008c6e3  2003  458b760b       movl r14,[r14+0xb]
0x19db0008c6e7  2007  41d1fe         sarl r14, 1
0x19db0008c6ea  200a  4183fe05       cmpl r14,0x5
0x19db0008c6ee  200e  0f8670220000   jna 0x19db0008e964  <+0x4284>
0x19db0008c6f4  2014  8b501b         movl rdx,[rax+0x1b]
0x19db0008c6f7  2017  4903d5         REX.W addq rdx,r13
0x19db0008c6fa  201a  4183fe01       cmpl r14,0x1
0x19db0008c6fe  201e  0f8667220000   jna 0x19db0008e96b  <+0x428b>
0x19db0008c704  2024  448b700b       movl r14,[rax+0xb]
0x19db0008c708  2028  4d03f5         REX.W addq r14,r13
0x19db0008c70b  202b  40f6c701       testb rdi,0x1
0x19db0008c70f  202f  0f845d220000   jz 0x19db0008e972  <+0x4292>
0x19db0008c715  2035  8b47ff         movl rax,[rdi-0x1]
0x19db0008c718  2038  4903c5         REX.W addq rax,r13
0x19db0008c71b  203b  668178072c04   cmpw [rax+0x7],0x42c
0x19db0008c721  2041  0f8552220000   jnz 0x19db0008e979  <+0x4299>
0x19db0008c727  2047  8b4713         movl rax,[rdi+0x13]
0x19db0008c72a  204a  4903c5         REX.W addq rax,r13
0x19db0008c72d  204d  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008c737  2057  483bd8         REX.W cmpq rbx,rax
0x19db0008c73a  205a  0f8540220000   jnz 0x19db0008e980  <+0x42a0>
0x19db0008c740  2060  4156           push r14
0x19db0008c742  2062  52             push rdx
0x19db0008c743  2063  4d8bb590000000 REX.W movq r14,[r13+0x90] (root (undefined_value))
0x19db0008c74a  206a  4156           push r14
0x19db0008c74c  206c  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008c756  2076  b802000000     movl rax,0x2
0x19db0008c75b  207b  4d8bf7         REX.W movq r14,r15
0x19db0008c75e  207e  4c8b150ce8ffff REX.W movq r10,[rip+0xffffe80c]
0x19db0008c765  2085  41ffd2         call r10
0x19db0008c768  2088  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008c76c  208c  448b410f       movl r8,[rcx+0xf]
0x19db0008c770  2090  4d03c5         REX.W addq r8,r13
0x19db0008c773  2093  41f6c001       testb r8,0x1
0x19db0008c777  2097  0f8411220000   jz 0x19db0008e98e  <+0x42ae>
0x19db0008c77d  209d  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008c783  20a3  453948ff       cmpl [r8-0x1],r9
0x19db0008c787  20a7  0f8508220000   jnz 0x19db0008e995  <+0x42b5>
0x19db0008c78d  20ad  458b6003       movl r12,[r8+0x3]
0x19db0008c791  20b1  4d03e5         REX.W addq r12,r13
0x19db0008c794  20b4  458b64240f     movl r12,[r12+0xf]
0x19db0008c799  20b9  4d03e5         REX.W addq r12,r13
0x19db0008c79c  20bc  41f6c401       testb r12,0x1
0x19db0008c7a0  20c0  0f84f6210000   jz 0x19db0008e99c  <+0x42bc>
0x19db0008c7a6  20c6  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008c7ac  20cc  45395c24ff     cmpl [r12-0x1],r11
0x19db0008c7b1  20d1  0f85ec210000   jnz 0x19db0008e9a3  <+0x42c3>
0x19db0008c7b7  20d7  418b442407     movl rax,[r12+0x7]
0x19db0008c7bc  20dc  4903c5         REX.W addq rax,r13
0x19db0008c7bf  20df  448b70ff       movl r14,[rax-0x1]
0x19db0008c7c3  20e3  4c8b154ae1ffff REX.W movq r10,[rip+0xffffe14a]
0x19db0008c7ca  20ea  4d3bd6         REX.W cmpq r10,r14
0x19db0008c7cd  20ed  7712           ja 0x19db0008c7e1  <+0x2101>
0x19db0008c7cf  20ef  488b154de1ffff REX.W movq rdx,[rip+0xffffe14d]
0x19db0008c7d6  20f6  4c8b151bdfffff REX.W movq r10,[rip+0xffffdf1b]
0x19db0008c7dd  20fd  41ffd2         call r10
0x19db0008c7e0  2100  cc             int3l
0x19db0008c7e1  2101  4539b5d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r14
0x19db0008c7e8  2108  0f85bc210000   jnz 0x19db0008e9aa  <+0x42ca>
0x19db0008c7ee  210e  458b64240b     movl r12,[r12+0xb]
0x19db0008c7f3  2113  41d1fc         sarl r12, 1
0x19db0008c7f6  2116  4183fc08       cmpl r12,0x8
0x19db0008c7fa  211a  0f86b1210000   jna 0x19db0008e9b1  <+0x42d1>
0x19db0008c800  2120  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db0008c807  2127  44894027       movl [rax+0x27],r8
0x19db0008c80b  212b  448b410f       movl r8,[rcx+0xf]
0x19db0008c80f  212f  4d03c5         REX.W addq r8,r13
0x19db0008c812  2132  41f6c001       testb r8,0x1
0x19db0008c816  2136  0f849c210000   jz 0x19db0008e9b8  <+0x42d8>
0x19db0008c81c  213c  453948ff       cmpl [r8-0x1],r9
0x19db0008c820  2140  0f8599210000   jnz 0x19db0008e9bf  <+0x42df>
0x19db0008c826  2146  458b6003       movl r12,[r8+0x3]
0x19db0008c82a  214a  4d03e5         REX.W addq r12,r13
0x19db0008c82d  214d  458b64240f     movl r12,[r12+0xf]
0x19db0008c832  2152  4d03e5         REX.W addq r12,r13
0x19db0008c835  2155  41f6c401       testb r12,0x1
0x19db0008c839  2159  0f8487210000   jz 0x19db0008e9c6  <+0x42e6>
0x19db0008c83f  215f  45395c24ff     cmpl [r12-0x1],r11
0x19db0008c844  2164  0f8583210000   jnz 0x19db0008e9cd  <+0x42ed>
0x19db0008c84a  216a  418b442407     movl rax,[r12+0x7]
0x19db0008c84f  216f  4903c5         REX.W addq rax,r13
0x19db0008c852  2172  458b64240b     movl r12,[r12+0xb]
0x19db0008c857  2177  41d1fc         sarl r12, 1
0x19db0008c85a  217a  4183fc00       cmpl r12,0x0
0x19db0008c85e  217e  0f8670210000   jna 0x19db0008e9d4  <+0x42f4>
0x19db0008c864  2184  448b6007       movl r12,[rax+0x7]
0x19db0008c868  2188  4d03e5         REX.W addq r12,r13
0x19db0008c86b  218b  41f6c401       testb r12,0x1
0x19db0008c86f  218f  0f84d3170000   jz 0x19db0008e048  <+0x3968>
0x19db0008c875  2195  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db0008c87c  219c  0f843e000000   jz 0x19db0008c8c0  <+0x21e0>
0x19db0008c882  21a2  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db0008c889  21a9  0f8431000000   jz 0x19db0008c8c0  <+0x21e0>
0x19db0008c88f  21af  418b4424ff     movl rax,[r12-0x1]
0x19db0008c894  21b4  4903c5         REX.W addq rax,r13
0x19db0008c897  21b7  f6400910       testb [rax+0x9],0x10
0x19db0008c89b  21bb  0f851f000000   jnz 0x19db0008c8c0  <+0x21e0>
0x19db0008c8a1  21c1  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db0008c8a8  21c8  0f8480170000   jz 0x19db0008e02e  <+0x394e>
0x19db0008c8ae  21ce  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db0008c8b5  21d5  0f845f170000   jz 0x19db0008e01a  <+0x393a>
0x19db0008c8bb  21db  e938010000     jmp 0x19db0008c9f8  <+0x2318>
0x19db0008c8c0  21e0  8b792b         movl rdi,[rcx+0x2b]
0x19db0008c8c3  21e3  4903fd         REX.W addq rdi,r13
0x19db0008c8c6  21e6  458b6007       movl r12,[r8+0x7]
0x19db0008c8ca  21ea  4d03e5         REX.W addq r12,r13
0x19db0008c8cd  21ed  458b700b       movl r14,[r8+0xb]
0x19db0008c8d1  21f1  41d1fe         sarl r14, 1
0x19db0008c8d4  21f4  4183fe01       cmpl r14,0x1
0x19db0008c8d8  21f8  0f86fd200000   jna 0x19db0008e9db  <+0x42fb>
0x19db0008c8de  21fe  418b44240b     movl rax,[r12+0xb]
0x19db0008c8e3  2203  4903c5         REX.W addq rax,r13
0x19db0008c8e6  2206  4183fe00       cmpl r14,0x0
0x19db0008c8ea  220a  0f86f2200000   jna 0x19db0008e9e2  <+0x4302>
0x19db0008c8f0  2210  458b642407     movl r12,[r12+0x7]
0x19db0008c8f5  2215  4d03e5         REX.W addq r12,r13
0x19db0008c8f8  2218  40f6c701       testb rdi,0x1
0x19db0008c8fc  221c  0f84e7200000   jz 0x19db0008e9e9  <+0x4309>
0x19db0008c902  2222  448b77ff       movl r14,[rdi-0x1]
0x19db0008c906  2226  4d03f5         REX.W addq r14,r13
0x19db0008c909  2229  6641817e072c04 cmpw [r14+0x7],0x42c
0x19db0008c910  2230  0f85da200000   jnz 0x19db0008e9f0  <+0x4310>
0x19db0008c916  2236  448b7713       movl r14,[rdi+0x13]
0x19db0008c91a  223a  4d03f5         REX.W addq r14,r13
0x19db0008c91d  223d  49bfa1422f08db190000 REX.W movq r15,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008c927  2247  4d3bfe         REX.W cmpq r15,r14
0x19db0008c92a  224a  0f85c7200000   jnz 0x19db0008e9f7  <+0x4317>
0x19db0008c930  2250  4154           push r12
0x19db0008c932  2252  50             push rax
0x19db0008c933  2253  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db0008c93a  225a  4150           push r8
0x19db0008c93c  225c  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008c946  2266  b802000000     movl rax,0x2
0x19db0008c94b  226b  4c8b151fe6ffff REX.W movq r10,[rip+0xffffe61f]
0x19db0008c952  2272  41ffd2         call r10
0x19db0008c955  2275  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008c959  2279  448b410f       movl r8,[rcx+0xf]
0x19db0008c95d  227d  4d03c5         REX.W addq r8,r13
0x19db0008c960  2280  41f6c001       testb r8,0x1
0x19db0008c964  2284  0f849b200000   jz 0x19db0008ea05  <+0x4325>
0x19db0008c96a  228a  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008c970  2290  453948ff       cmpl [r8-0x1],r9
0x19db0008c974  2294  0f8592200000   jnz 0x19db0008ea0c  <+0x432c>
0x19db0008c97a  229a  458b6003       movl r12,[r8+0x3]
0x19db0008c97e  229e  4d03e5         REX.W addq r12,r13
0x19db0008c981  22a1  458b64240f     movl r12,[r12+0xf]
0x19db0008c986  22a6  4d03e5         REX.W addq r12,r13
0x19db0008c989  22a9  41f6c401       testb r12,0x1
0x19db0008c98d  22ad  0f8480200000   jz 0x19db0008ea13  <+0x4333>
0x19db0008c993  22b3  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008c999  22b9  45395c24ff     cmpl [r12-0x1],r11
0x19db0008c99e  22be  0f8576200000   jnz 0x19db0008ea1a  <+0x433a>
0x19db0008c9a4  22c4  418b442407     movl rax,[r12+0x7]
0x19db0008c9a9  22c9  4903c5         REX.W addq rax,r13
0x19db0008c9ac  22cc  448b70ff       movl r14,[rax-0x1]
0x19db0008c9b0  22d0  4c8b155ddfffff REX.W movq r10,[rip+0xffffdf5d]
0x19db0008c9b7  22d7  4d3bd6         REX.W cmpq r10,r14
0x19db0008c9ba  22da  7712           ja 0x19db0008c9ce  <+0x22ee>
0x19db0008c9bc  22dc  488b1560dfffff REX.W movq rdx,[rip+0xffffdf60]
0x19db0008c9c3  22e3  4c8b152eddffff REX.W movq r10,[rip+0xffffdd2e]
0x19db0008c9ca  22ea  41ffd2         call r10
0x19db0008c9cd  22ed  cc             int3l
0x19db0008c9ce  22ee  4539b5d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r14
0x19db0008c9d5  22f5  0f8546200000   jnz 0x19db0008ea21  <+0x4341>
0x19db0008c9db  22fb  458b64240b     movl r12,[r12+0xb]
0x19db0008c9e0  2300  41d1fc         sarl r12, 1
0x19db0008c9e3  2303  4183fc00       cmpl r12,0x0
0x19db0008c9e7  2307  0f863b200000   jna 0x19db0008ea28  <+0x4348>
0x19db0008c9ed  230d  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db0008c9f4  2314  44894007       movl [rax+0x7],r8
0x19db0008c9f8  2318  448b410f       movl r8,[rcx+0xf]
0x19db0008c9fc  231c  4d03c5         REX.W addq r8,r13
0x19db0008c9ff  231f  41f6c001       testb r8,0x1
0x19db0008ca03  2323  0f8426200000   jz 0x19db0008ea2f  <+0x434f>
0x19db0008ca09  2329  453948ff       cmpl [r8-0x1],r9
0x19db0008ca0d  232d  0f8523200000   jnz 0x19db0008ea36  <+0x4356>
0x19db0008ca13  2333  458b6003       movl r12,[r8+0x3]
0x19db0008ca17  2337  4d03e5         REX.W addq r12,r13
0x19db0008ca1a  233a  458b64240f     movl r12,[r12+0xf]
0x19db0008ca1f  233f  4d03e5         REX.W addq r12,r13
0x19db0008ca22  2342  41f6c401       testb r12,0x1
0x19db0008ca26  2346  0f8411200000   jz 0x19db0008ea3d  <+0x435d>
0x19db0008ca2c  234c  45395c24ff     cmpl [r12-0x1],r11
0x19db0008ca31  2351  0f850d200000   jnz 0x19db0008ea44  <+0x4364>
0x19db0008ca37  2357  418b442407     movl rax,[r12+0x7]
0x19db0008ca3c  235c  4903c5         REX.W addq rax,r13
0x19db0008ca3f  235f  458b64240b     movl r12,[r12+0xb]
0x19db0008ca44  2364  41d1fc         sarl r12, 1
0x19db0008ca47  2367  4183fc0b       cmpl r12,0xb
0x19db0008ca4b  236b  0f86fa1f0000   jna 0x19db0008ea4b  <+0x436b>
0x19db0008ca51  2371  448b6033       movl r12,[rax+0x33]
0x19db0008ca55  2375  4d03e5         REX.W addq r12,r13
0x19db0008ca58  2378  41f6c401       testb r12,0x1
0x19db0008ca5c  237c  0f8423160000   jz 0x19db0008e085  <+0x39a5>
0x19db0008ca62  2382  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db0008ca69  2389  0f843e000000   jz 0x19db0008caad  <+0x23cd>
0x19db0008ca6f  238f  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db0008ca76  2396  0f8431000000   jz 0x19db0008caad  <+0x23cd>
0x19db0008ca7c  239c  418b4424ff     movl rax,[r12-0x1]
0x19db0008ca81  23a1  4903c5         REX.W addq rax,r13
0x19db0008ca84  23a4  f6400910       testb [rax+0x9],0x10
0x19db0008ca88  23a8  0f851f000000   jnz 0x19db0008caad  <+0x23cd>
0x19db0008ca8e  23ae  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db0008ca95  23b5  0f84d0150000   jz 0x19db0008e06b  <+0x398b>
0x19db0008ca9b  23bb  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db0008caa2  23c2  0f84af150000   jz 0x19db0008e057  <+0x3977>
0x19db0008caa8  23c8  e938010000     jmp 0x19db0008cbe5  <+0x2505>
0x19db0008caad  23cd  8b792b         movl rdi,[rcx+0x2b]
0x19db0008cab0  23d0  4903fd         REX.W addq rdi,r13
0x19db0008cab3  23d3  458b6007       movl r12,[r8+0x7]
0x19db0008cab7  23d7  4d03e5         REX.W addq r12,r13
0x19db0008caba  23da  458b700b       movl r14,[r8+0xb]
0x19db0008cabe  23de  41d1fe         sarl r14, 1
0x19db0008cac1  23e1  4183fe00       cmpl r14,0x0
0x19db0008cac5  23e5  0f86871f0000   jna 0x19db0008ea52  <+0x4372>
0x19db0008cacb  23eb  418b442407     movl rax,[r12+0x7]
0x19db0008cad0  23f0  4903c5         REX.W addq rax,r13
0x19db0008cad3  23f3  4183fe04       cmpl r14,0x4
0x19db0008cad7  23f7  0f867c1f0000   jna 0x19db0008ea59  <+0x4379>
0x19db0008cadd  23fd  458b642417     movl r12,[r12+0x17]
0x19db0008cae2  2402  4d03e5         REX.W addq r12,r13
0x19db0008cae5  2405  40f6c701       testb rdi,0x1
0x19db0008cae9  2409  0f84711f0000   jz 0x19db0008ea60  <+0x4380>
0x19db0008caef  240f  448b77ff       movl r14,[rdi-0x1]
0x19db0008caf3  2413  4d03f5         REX.W addq r14,r13
0x19db0008caf6  2416  6641817e072c04 cmpw [r14+0x7],0x42c
0x19db0008cafd  241d  0f85641f0000   jnz 0x19db0008ea67  <+0x4387>
0x19db0008cb03  2423  448b7713       movl r14,[rdi+0x13]
0x19db0008cb07  2427  4d03f5         REX.W addq r14,r13
0x19db0008cb0a  242a  49bfa1422f08db190000 REX.W movq r15,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008cb14  2434  4d3bfe         REX.W cmpq r15,r14
0x19db0008cb17  2437  0f85511f0000   jnz 0x19db0008ea6e  <+0x438e>
0x19db0008cb1d  243d  4154           push r12
0x19db0008cb1f  243f  50             push rax
0x19db0008cb20  2440  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db0008cb27  2447  4150           push r8
0x19db0008cb29  2449  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008cb33  2453  b802000000     movl rax,0x2
0x19db0008cb38  2458  4c8b1532e4ffff REX.W movq r10,[rip+0xffffe432]
0x19db0008cb3f  245f  41ffd2         call r10
0x19db0008cb42  2462  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008cb46  2466  448b410f       movl r8,[rcx+0xf]
0x19db0008cb4a  246a  4d03c5         REX.W addq r8,r13
0x19db0008cb4d  246d  41f6c001       testb r8,0x1
0x19db0008cb51  2471  0f84251f0000   jz 0x19db0008ea7c  <+0x439c>
0x19db0008cb57  2477  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008cb5d  247d  453948ff       cmpl [r8-0x1],r9
0x19db0008cb61  2481  0f851c1f0000   jnz 0x19db0008ea83  <+0x43a3>
0x19db0008cb67  2487  458b6003       movl r12,[r8+0x3]
0x19db0008cb6b  248b  4d03e5         REX.W addq r12,r13
0x19db0008cb6e  248e  458b64240f     movl r12,[r12+0xf]
0x19db0008cb73  2493  4d03e5         REX.W addq r12,r13
0x19db0008cb76  2496  41f6c401       testb r12,0x1
0x19db0008cb7a  249a  0f840a1f0000   jz 0x19db0008ea8a  <+0x43aa>
0x19db0008cb80  24a0  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008cb86  24a6  45395c24ff     cmpl [r12-0x1],r11
0x19db0008cb8b  24ab  0f85001f0000   jnz 0x19db0008ea91  <+0x43b1>
0x19db0008cb91  24b1  418b442407     movl rax,[r12+0x7]
0x19db0008cb96  24b6  4903c5         REX.W addq rax,r13
0x19db0008cb99  24b9  448b70ff       movl r14,[rax-0x1]
0x19db0008cb9d  24bd  4c8b1570ddffff REX.W movq r10,[rip+0xffffdd70]
0x19db0008cba4  24c4  4d3bd6         REX.W cmpq r10,r14
0x19db0008cba7  24c7  7712           ja 0x19db0008cbbb  <+0x24db>
0x19db0008cba9  24c9  488b1573ddffff REX.W movq rdx,[rip+0xffffdd73]
0x19db0008cbb0  24d0  4c8b1541dbffff REX.W movq r10,[rip+0xffffdb41]
0x19db0008cbb7  24d7  41ffd2         call r10
0x19db0008cbba  24da  cc             int3l
0x19db0008cbbb  24db  4539b5d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r14
0x19db0008cbc2  24e2  0f85d01e0000   jnz 0x19db0008ea98  <+0x43b8>
0x19db0008cbc8  24e8  458b64240b     movl r12,[r12+0xb]
0x19db0008cbcd  24ed  41d1fc         sarl r12, 1
0x19db0008cbd0  24f0  4183fc0b       cmpl r12,0xb
0x19db0008cbd4  24f4  0f86c51e0000   jna 0x19db0008ea9f  <+0x43bf>
0x19db0008cbda  24fa  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db0008cbe1  2501  44894033       movl [rax+0x33],r8
0x19db0008cbe5  2505  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008cbe9  2509  41bccd9f3008   movl r12,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008cbef  250f  453960ff       cmpl [r8-0x1],r12
0x19db0008cbf3  2513  0f85ad1e0000   jnz 0x19db0008eaa6  <+0x43c6>
0x19db0008cbf9  2519  458b7007       movl r14,[r8+0x7]
0x19db0008cbfd  251d  4d03f5         REX.W addq r14,r13
0x19db0008cc00  2520  458b780b       movl r15,[r8+0xb]
0x19db0008cc04  2524  41d1ff         sarl r15, 1
0x19db0008cc07  2527  4183ff04       cmpl r15,0x4
0x19db0008cc0b  252b  0f869c1e0000   jna 0x19db0008eaad  <+0x43cd>
0x19db0008cc11  2531  458b7617       movl r14,[r14+0x17]
0x19db0008cc15  2535  4d03f5         REX.W addq r14,r13
0x19db0008cc18  2538  4539b598000000 cmpl [r13+0x98] (root (the_hole_value)),r14
0x19db0008cc1f  253f  0f846f140000   jz 0x19db0008e094  <+0x39b4>
0x19db0008cc25  2545  41f6c601       testb r14,0x1
0x19db0008cc29  2549  0f84851e0000   jz 0x19db0008eab4  <+0x43d4>
0x19db0008cc2f  254f  41bf559f3008   movl r15,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008cc35  2555  45397eff       cmpl [r14-0x1],r15
0x19db0008cc39  2559  0f857c1e0000   jnz 0x19db0008eabb  <+0x43db>
0x19db0008cc3f  255f  418b4607       movl rax,[r14+0x7]
0x19db0008cc43  2563  4903c5         REX.W addq rax,r13
0x19db0008cc46  2566  458b760b       movl r14,[r14+0xb]
0x19db0008cc4a  256a  41d1fe         sarl r14, 1
0x19db0008cc4d  256d  4183fe02       cmpl r14,0x2
0x19db0008cc51  2571  0f866b1e0000   jna 0x19db0008eac2  <+0x43e2>
0x19db0008cc57  2577  c5fb104017     vmovsd xmm0,[rax+0x17]
0x19db0008cc5c  257c  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008cc60  2580  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008cc64  2584  0f8708000000   ja 0x19db0008cc72  <+0x2592>
0x19db0008cc6a  258a  4c8bc1         REX.W movq r8,rcx
0x19db0008cc6d  258d  e992060000     jmp 0x19db0008d304  <+0x2c24>
0x19db0008cc72  2592  448b710f       movl r14,[rcx+0xf]
0x19db0008cc76  2596  4d03f5         REX.W addq r14,r13
0x19db0008cc79  2599  41f6c601       testb r14,0x1
0x19db0008cc7d  259d  0f84461e0000   jz 0x19db0008eac9  <+0x43e9>
0x19db0008cc83  25a3  45394eff       cmpl [r14-0x1],r9
0x19db0008cc87  25a7  0f85431e0000   jnz 0x19db0008ead0  <+0x43f0>
0x19db0008cc8d  25ad  418b4603       movl rax,[r14+0x3]
0x19db0008cc91  25b1  4903c5         REX.W addq rax,r13
0x19db0008cc94  25b4  8b400f         movl rax,[rax+0xf]
0x19db0008cc97  25b7  4903c5         REX.W addq rax,r13
0x19db0008cc9a  25ba  a801           test al,0x1
0x19db0008cc9c  25bc  0f84351e0000   jz 0x19db0008ead7  <+0x43f7>
0x19db0008cca2  25c2  443958ff       cmpl [rax-0x1],r11
0x19db0008cca6  25c6  0f85321e0000   jnz 0x19db0008eade  <+0x43fe>
0x19db0008ccac  25cc  8b5007         movl rdx,[rax+0x7]
0x19db0008ccaf  25cf  4903d5         REX.W addq rdx,r13
0x19db0008ccb2  25d2  8b400b         movl rax,[rax+0xb]
0x19db0008ccb5  25d5  d1f8           sarl rax, 1
0x19db0008ccb7  25d7  83f80b         cmpl rax,0xb
0x19db0008ccba  25da  0f86251e0000   jna 0x19db0008eae5  <+0x4405>
0x19db0008ccc0  25e0  8b4233         movl rax,[rdx+0x33]
0x19db0008ccc3  25e3  4903c5         REX.W addq rax,r13
0x19db0008ccc6  25e6  a801           test al,0x1
0x19db0008ccc8  25e8  0f84f8130000   jz 0x19db0008e0c6  <+0x39e6>
0x19db0008ccce  25ee  413985b0000000 cmpl [r13+0xb0] (root (false_value)),rax
0x19db0008ccd5  25f5  0f843c000000   jz 0x19db0008cd17  <+0x2637>
0x19db0008ccdb  25fb  413985b8000000 cmpl [r13+0xb8] (root (empty_string)),rax
0x19db0008cce2  2602  0f842f000000   jz 0x19db0008cd17  <+0x2637>
0x19db0008cce8  2608  8b50ff         movl rdx,[rax-0x1]
0x19db0008cceb  260b  4903d5         REX.W addq rdx,r13
0x19db0008ccee  260e  f6420910       testb [rdx+0x9],0x10
0x19db0008ccf2  2612  0f851f000000   jnz 0x19db0008cd17  <+0x2637>
0x19db0008ccf8  2618  41399530010000 cmpl [r13+0x130] (root (heap_number_map)),rdx
0x19db0008ccff  261f  0f84ad130000   jz 0x19db0008e0b2  <+0x39d2>
0x19db0008cd05  2625  413995b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rdx
0x19db0008cd0c  262c  0f848e130000   jz 0x19db0008e0a0  <+0x39c0>
0x19db0008cd12  2632  e932010000     jmp 0x19db0008ce49  <+0x2769>
0x19db0008cd17  2637  8b792b         movl rdi,[rcx+0x2b]
0x19db0008cd1a  263a  4903fd         REX.W addq rdi,r13
0x19db0008cd1d  263d  418b4607       movl rax,[r14+0x7]
0x19db0008cd21  2641  4903c5         REX.W addq rax,r13
0x19db0008cd24  2644  458b760b       movl r14,[r14+0xb]
0x19db0008cd28  2648  41d1fe         sarl r14, 1
0x19db0008cd2b  264b  4183fe04       cmpl r14,0x4
0x19db0008cd2f  264f  0f86b71d0000   jna 0x19db0008eaec  <+0x440c>
0x19db0008cd35  2655  8b5017         movl rdx,[rax+0x17]
0x19db0008cd38  2658  4903d5         REX.W addq rdx,r13
0x19db0008cd3b  265b  4183fe00       cmpl r14,0x0
0x19db0008cd3f  265f  0f86ae1d0000   jna 0x19db0008eaf3  <+0x4413>
0x19db0008cd45  2665  448b7007       movl r14,[rax+0x7]
0x19db0008cd49  2669  4d03f5         REX.W addq r14,r13
0x19db0008cd4c  266c  40f6c701       testb rdi,0x1
0x19db0008cd50  2670  0f84a41d0000   jz 0x19db0008eafa  <+0x441a>
0x19db0008cd56  2676  8b47ff         movl rax,[rdi-0x1]
0x19db0008cd59  2679  4903c5         REX.W addq rax,r13
0x19db0008cd5c  267c  668178072c04   cmpw [rax+0x7],0x42c
0x19db0008cd62  2682  0f85991d0000   jnz 0x19db0008eb01  <+0x4421>
0x19db0008cd68  2688  8b4713         movl rax,[rdi+0x13]
0x19db0008cd6b  268b  4903c5         REX.W addq rax,r13
0x19db0008cd6e  268e  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008cd78  2698  483bd8         REX.W cmpq rbx,rax
0x19db0008cd7b  269b  0f85871d0000   jnz 0x19db0008eb08  <+0x4428>
0x19db0008cd81  26a1  4156           push r14
0x19db0008cd83  26a3  52             push rdx
0x19db0008cd84  26a4  4d8bb590000000 REX.W movq r14,[r13+0x90] (root (undefined_value))
0x19db0008cd8b  26ab  4156           push r14
0x19db0008cd8d  26ad  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008cd97  26b7  b802000000     movl rax,0x2
0x19db0008cd9c  26bc  4c8b15cee1ffff REX.W movq r10,[rip+0xffffe1ce]
0x19db0008cda3  26c3  41ffd2         call r10
0x19db0008cda6  26c6  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008cdaa  26ca  448b410f       movl r8,[rcx+0xf]
0x19db0008cdae  26ce  4d03c5         REX.W addq r8,r13
0x19db0008cdb1  26d1  41f6c001       testb r8,0x1
0x19db0008cdb5  26d5  0f845b1d0000   jz 0x19db0008eb16  <+0x4436>
0x19db0008cdbb  26db  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008cdc1  26e1  453948ff       cmpl [r8-0x1],r9
0x19db0008cdc5  26e5  0f85521d0000   jnz 0x19db0008eb1d  <+0x443d>
0x19db0008cdcb  26eb  458b6003       movl r12,[r8+0x3]
0x19db0008cdcf  26ef  4d03e5         REX.W addq r12,r13
0x19db0008cdd2  26f2  458b64240f     movl r12,[r12+0xf]
0x19db0008cdd7  26f7  4d03e5         REX.W addq r12,r13
0x19db0008cdda  26fa  41f6c401       testb r12,0x1
0x19db0008cdde  26fe  0f84401d0000   jz 0x19db0008eb24  <+0x4444>
0x19db0008cde4  2704  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008cdea  270a  45395c24ff     cmpl [r12-0x1],r11
0x19db0008cdef  270f  0f85361d0000   jnz 0x19db0008eb2b  <+0x444b>
0x19db0008cdf5  2715  418b442407     movl rax,[r12+0x7]
0x19db0008cdfa  271a  4903c5         REX.W addq rax,r13
0x19db0008cdfd  271d  448b70ff       movl r14,[rax-0x1]
0x19db0008ce01  2721  4c8b150cdbffff REX.W movq r10,[rip+0xffffdb0c]
0x19db0008ce08  2728  4d3bd6         REX.W cmpq r10,r14
0x19db0008ce0b  272b  7712           ja 0x19db0008ce1f  <+0x273f>
0x19db0008ce0d  272d  488b150fdbffff REX.W movq rdx,[rip+0xffffdb0f]
0x19db0008ce14  2734  4c8b15ddd8ffff REX.W movq r10,[rip+0xffffd8dd]
0x19db0008ce1b  273b  41ffd2         call r10
0x19db0008ce1e  273e  cc             int3l
0x19db0008ce1f  273f  4539b5d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r14
0x19db0008ce26  2746  0f85061d0000   jnz 0x19db0008eb32  <+0x4452>
0x19db0008ce2c  274c  458b64240b     movl r12,[r12+0xb]
0x19db0008ce31  2751  41d1fc         sarl r12, 1
0x19db0008ce34  2754  4183fc0b       cmpl r12,0xb
0x19db0008ce38  2758  0f86fb1c0000   jna 0x19db0008eb39  <+0x4459>
0x19db0008ce3e  275e  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db0008ce45  2765  44894033       movl [rax+0x33],r8
0x19db0008ce49  2769  448b410f       movl r8,[rcx+0xf]
0x19db0008ce4d  276d  4d03c5         REX.W addq r8,r13
0x19db0008ce50  2770  41f6c001       testb r8,0x1
0x19db0008ce54  2774  0f84e61c0000   jz 0x19db0008eb40  <+0x4460>
0x19db0008ce5a  277a  453948ff       cmpl [r8-0x1],r9
0x19db0008ce5e  277e  0f85e31c0000   jnz 0x19db0008eb47  <+0x4467>
0x19db0008ce64  2784  458b6003       movl r12,[r8+0x3]
0x19db0008ce68  2788  4d03e5         REX.W addq r12,r13
0x19db0008ce6b  278b  458b64240f     movl r12,[r12+0xf]
0x19db0008ce70  2790  4d03e5         REX.W addq r12,r13
0x19db0008ce73  2793  41f6c401       testb r12,0x1
0x19db0008ce77  2797  0f84d11c0000   jz 0x19db0008eb4e  <+0x446e>
0x19db0008ce7d  279d  45395c24ff     cmpl [r12-0x1],r11
0x19db0008ce82  27a2  0f85cd1c0000   jnz 0x19db0008eb55  <+0x4475>
0x19db0008ce88  27a8  418b442407     movl rax,[r12+0x7]
0x19db0008ce8d  27ad  4903c5         REX.W addq rax,r13
0x19db0008ce90  27b0  458b64240b     movl r12,[r12+0xb]
0x19db0008ce95  27b5  41d1fc         sarl r12, 1
0x19db0008ce98  27b8  4183fc03       cmpl r12,0x3
0x19db0008ce9c  27bc  0f86ba1c0000   jna 0x19db0008eb5c  <+0x447c>
0x19db0008cea2  27c2  448b6013       movl r12,[rax+0x13]
0x19db0008cea6  27c6  4d03e5         REX.W addq r12,r13
0x19db0008cea9  27c9  41f6c401       testb r12,0x1
0x19db0008cead  27cd  0f844f120000   jz 0x19db0008e102  <+0x3a22>
0x19db0008ceb3  27d3  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db0008ceba  27da  0f843e000000   jz 0x19db0008cefe  <+0x281e>
0x19db0008cec0  27e0  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db0008cec7  27e7  0f8431000000   jz 0x19db0008cefe  <+0x281e>
0x19db0008cecd  27ed  418b4424ff     movl rax,[r12-0x1]
0x19db0008ced2  27f2  4903c5         REX.W addq rax,r13
0x19db0008ced5  27f5  f6400910       testb [rax+0x9],0x10
0x19db0008ced9  27f9  0f851f000000   jnz 0x19db0008cefe  <+0x281e>
0x19db0008cedf  27ff  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db0008cee6  2806  0f84fc110000   jz 0x19db0008e0e8  <+0x3a08>
0x19db0008ceec  280c  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db0008cef3  2813  0f84db110000   jz 0x19db0008e0d4  <+0x39f4>
0x19db0008cef9  2819  e938010000     jmp 0x19db0008d036  <+0x2956>
0x19db0008cefe  281e  8b792b         movl rdi,[rcx+0x2b]
0x19db0008cf01  2821  4903fd         REX.W addq rdi,r13
0x19db0008cf04  2824  458b6007       movl r12,[r8+0x7]
0x19db0008cf08  2828  4d03e5         REX.W addq r12,r13
0x19db0008cf0b  282b  458b700b       movl r14,[r8+0xb]
0x19db0008cf0f  282f  41d1fe         sarl r14, 1
0x19db0008cf12  2832  4183fe00       cmpl r14,0x0
0x19db0008cf16  2836  0f86471c0000   jna 0x19db0008eb63  <+0x4483>
0x19db0008cf1c  283c  418b442407     movl rax,[r12+0x7]
0x19db0008cf21  2841  4903c5         REX.W addq rax,r13
0x19db0008cf24  2844  4183fe03       cmpl r14,0x3
0x19db0008cf28  2848  0f863c1c0000   jna 0x19db0008eb6a  <+0x448a>
0x19db0008cf2e  284e  458b642413     movl r12,[r12+0x13]
0x19db0008cf33  2853  4d03e5         REX.W addq r12,r13
0x19db0008cf36  2856  40f6c701       testb rdi,0x1
0x19db0008cf3a  285a  0f84311c0000   jz 0x19db0008eb71  <+0x4491>
0x19db0008cf40  2860  448b77ff       movl r14,[rdi-0x1]
0x19db0008cf44  2864  4d03f5         REX.W addq r14,r13
0x19db0008cf47  2867  6641817e072c04 cmpw [r14+0x7],0x42c
0x19db0008cf4e  286e  0f85241c0000   jnz 0x19db0008eb78  <+0x4498>
0x19db0008cf54  2874  448b7713       movl r14,[rdi+0x13]
0x19db0008cf58  2878  4d03f5         REX.W addq r14,r13
0x19db0008cf5b  287b  49bfa1422f08db190000 REX.W movq r15,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008cf65  2885  4d3bfe         REX.W cmpq r15,r14
0x19db0008cf68  2888  0f85111c0000   jnz 0x19db0008eb7f  <+0x449f>
0x19db0008cf6e  288e  4154           push r12
0x19db0008cf70  2890  50             push rax
0x19db0008cf71  2891  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db0008cf78  2898  4150           push r8
0x19db0008cf7a  289a  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008cf84  28a4  b802000000     movl rax,0x2
0x19db0008cf89  28a9  4c8b15e1dfffff REX.W movq r10,[rip+0xffffdfe1]
0x19db0008cf90  28b0  41ffd2         call r10
0x19db0008cf93  28b3  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008cf97  28b7  448b410f       movl r8,[rcx+0xf]
0x19db0008cf9b  28bb  4d03c5         REX.W addq r8,r13
0x19db0008cf9e  28be  41f6c001       testb r8,0x1
0x19db0008cfa2  28c2  0f84e51b0000   jz 0x19db0008eb8d  <+0x44ad>
0x19db0008cfa8  28c8  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008cfae  28ce  453948ff       cmpl [r8-0x1],r9
0x19db0008cfb2  28d2  0f85dc1b0000   jnz 0x19db0008eb94  <+0x44b4>
0x19db0008cfb8  28d8  458b6003       movl r12,[r8+0x3]
0x19db0008cfbc  28dc  4d03e5         REX.W addq r12,r13
0x19db0008cfbf  28df  458b64240f     movl r12,[r12+0xf]
0x19db0008cfc4  28e4  4d03e5         REX.W addq r12,r13
0x19db0008cfc7  28e7  41f6c401       testb r12,0x1
0x19db0008cfcb  28eb  0f84ca1b0000   jz 0x19db0008eb9b  <+0x44bb>
0x19db0008cfd1  28f1  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008cfd7  28f7  45395c24ff     cmpl [r12-0x1],r11
0x19db0008cfdc  28fc  0f85c01b0000   jnz 0x19db0008eba2  <+0x44c2>
0x19db0008cfe2  2902  418b442407     movl rax,[r12+0x7]
0x19db0008cfe7  2907  4903c5         REX.W addq rax,r13
0x19db0008cfea  290a  448b70ff       movl r14,[rax-0x1]
0x19db0008cfee  290e  4c8b151fd9ffff REX.W movq r10,[rip+0xffffd91f]
0x19db0008cff5  2915  4d3bd6         REX.W cmpq r10,r14
0x19db0008cff8  2918  7712           ja 0x19db0008d00c  <+0x292c>
0x19db0008cffa  291a  488b1522d9ffff REX.W movq rdx,[rip+0xffffd922]
0x19db0008d001  2921  4c8b15f0d6ffff REX.W movq r10,[rip+0xffffd6f0]
0x19db0008d008  2928  41ffd2         call r10
0x19db0008d00b  292b  cc             int3l
0x19db0008d00c  292c  4539b5d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r14
0x19db0008d013  2933  0f85901b0000   jnz 0x19db0008eba9  <+0x44c9>
0x19db0008d019  2939  458b64240b     movl r12,[r12+0xb]
0x19db0008d01e  293e  41d1fc         sarl r12, 1
0x19db0008d021  2941  4183fc03       cmpl r12,0x3
0x19db0008d025  2945  0f86851b0000   jna 0x19db0008ebb0  <+0x44d0>
0x19db0008d02b  294b  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db0008d032  2952  44894013       movl [rax+0x13],r8
0x19db0008d036  2956  448b410f       movl r8,[rcx+0xf]
0x19db0008d03a  295a  4d03c5         REX.W addq r8,r13
0x19db0008d03d  295d  41f6c001       testb r8,0x1
0x19db0008d041  2961  0f84701b0000   jz 0x19db0008ebb7  <+0x44d7>
0x19db0008d047  2967  453948ff       cmpl [r8-0x1],r9
0x19db0008d04b  296b  0f856d1b0000   jnz 0x19db0008ebbe  <+0x44de>
0x19db0008d051  2971  458b6003       movl r12,[r8+0x3]
0x19db0008d055  2975  4d03e5         REX.W addq r12,r13
0x19db0008d058  2978  458b64240f     movl r12,[r12+0xf]
0x19db0008d05d  297d  4d03e5         REX.W addq r12,r13
0x19db0008d060  2980  41f6c401       testb r12,0x1
0x19db0008d064  2984  0f845b1b0000   jz 0x19db0008ebc5  <+0x44e5>
0x19db0008d06a  298a  45395c24ff     cmpl [r12-0x1],r11
0x19db0008d06f  298f  0f85571b0000   jnz 0x19db0008ebcc  <+0x44ec>
0x19db0008d075  2995  418b442407     movl rax,[r12+0x7]
0x19db0008d07a  299a  4903c5         REX.W addq rax,r13
0x19db0008d07d  299d  458b64240b     movl r12,[r12+0xb]
0x19db0008d082  29a2  41d1fc         sarl r12, 1
0x19db0008d085  29a5  4183fc0a       cmpl r12,0xa
0x19db0008d089  29a9  0f86441b0000   jna 0x19db0008ebd3  <+0x44f3>
0x19db0008d08f  29af  448b602f       movl r12,[rax+0x2f]
0x19db0008d093  29b3  4d03e5         REX.W addq r12,r13
0x19db0008d096  29b6  41f6c401       testb r12,0x1
0x19db0008d09a  29ba  0f849f100000   jz 0x19db0008e13f  <+0x3a5f>
0x19db0008d0a0  29c0  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db0008d0a7  29c7  0f843e000000   jz 0x19db0008d0eb  <+0x2a0b>
0x19db0008d0ad  29cd  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db0008d0b4  29d4  0f8431000000   jz 0x19db0008d0eb  <+0x2a0b>
0x19db0008d0ba  29da  418b4424ff     movl rax,[r12-0x1]
0x19db0008d0bf  29df  4903c5         REX.W addq rax,r13
0x19db0008d0c2  29e2  f6400910       testb [rax+0x9],0x10
0x19db0008d0c6  29e6  0f851f000000   jnz 0x19db0008d0eb  <+0x2a0b>
0x19db0008d0cc  29ec  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db0008d0d3  29f3  0f844c100000   jz 0x19db0008e125  <+0x3a45>
0x19db0008d0d9  29f9  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db0008d0e0  2a00  0f842b100000   jz 0x19db0008e111  <+0x3a31>
0x19db0008d0e6  2a06  e93b010000     jmp 0x19db0008d226  <+0x2b46>
0x19db0008d0eb  2a0b  8b792b         movl rdi,[rcx+0x2b]
0x19db0008d0ee  2a0e  4903fd         REX.W addq rdi,r13
0x19db0008d0f1  2a11  458b6007       movl r12,[r8+0x7]
0x19db0008d0f5  2a15  4d03e5         REX.W addq r12,r13
0x19db0008d0f8  2a18  458b700b       movl r14,[r8+0xb]
0x19db0008d0fc  2a1c  41d1fe         sarl r14, 1
0x19db0008d0ff  2a1f  4183fe03       cmpl r14,0x3
0x19db0008d103  2a23  0f86d11a0000   jna 0x19db0008ebda  <+0x44fa>
0x19db0008d109  2a29  418b442413     movl rax,[r12+0x13]
0x19db0008d10e  2a2e  4903c5         REX.W addq rax,r13
0x19db0008d111  2a31  4183fe07       cmpl r14,0x7
0x19db0008d115  2a35  0f86c61a0000   jna 0x19db0008ebe1  <+0x4501>
0x19db0008d11b  2a3b  458b642423     movl r12,[r12+0x23]
0x19db0008d120  2a40  4d03e5         REX.W addq r12,r13
0x19db0008d123  2a43  40f6c701       testb rdi,0x1
0x19db0008d127  2a47  0f84bb1a0000   jz 0x19db0008ebe8  <+0x4508>
0x19db0008d12d  2a4d  448b77ff       movl r14,[rdi-0x1]
0x19db0008d131  2a51  4d03f5         REX.W addq r14,r13
0x19db0008d134  2a54  6641817e072c04 cmpw [r14+0x7],0x42c
0x19db0008d13b  2a5b  0f85ae1a0000   jnz 0x19db0008ebef  <+0x450f>
0x19db0008d141  2a61  448b7713       movl r14,[rdi+0x13]
0x19db0008d145  2a65  4d03f5         REX.W addq r14,r13
0x19db0008d148  2a68  49bfa1422f08db190000 REX.W movq r15,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db0008d152  2a72  4d3bfe         REX.W cmpq r15,r14
0x19db0008d155  2a75  0f859b1a0000   jnz 0x19db0008ebf6  <+0x4516>
0x19db0008d15b  2a7b  4154           push r12
0x19db0008d15d  2a7d  50             push rax
0x19db0008d15e  2a7e  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db0008d165  2a85  4150           push r8
0x19db0008d167  2a87  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008d171  2a91  b802000000     movl rax,0x2
0x19db0008d176  2a96  4c8b15f4ddffff REX.W movq r10,[rip+0xffffddf4]
0x19db0008d17d  2a9d  41ffd2         call r10
0x19db0008d180  2aa0  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db0008d184  2aa4  418b480f       movl rcx,[r8+0xf]
0x19db0008d188  2aa8  4903cd         REX.W addq rcx,r13
0x19db0008d18b  2aab  f6c101         testb rcx,0x1
0x19db0008d18e  2aae  0f84701a0000   jz 0x19db0008ec04  <+0x4524>
0x19db0008d194  2ab4  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008d19a  2aba  443949ff       cmpl [rcx-0x1],r9
0x19db0008d19e  2abe  0f85671a0000   jnz 0x19db0008ec0b  <+0x452b>
0x19db0008d1a4  2ac4  448b6103       movl r12,[rcx+0x3]
0x19db0008d1a8  2ac8  4d03e5         REX.W addq r12,r13
0x19db0008d1ab  2acb  458b64240f     movl r12,[r12+0xf]
0x19db0008d1b0  2ad0  4d03e5         REX.W addq r12,r13
0x19db0008d1b3  2ad3  41f6c401       testb r12,0x1
0x19db0008d1b7  2ad7  0f84551a0000   jz 0x19db0008ec12  <+0x4532>
0x19db0008d1bd  2add  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008d1c3  2ae3  45395c24ff     cmpl [r12-0x1],r11
0x19db0008d1c8  2ae8  0f854b1a0000   jnz 0x19db0008ec19  <+0x4539>
0x19db0008d1ce  2aee  418b442407     movl rax,[r12+0x7]
0x19db0008d1d3  2af3  4903c5         REX.W addq rax,r13
0x19db0008d1d6  2af6  448b70ff       movl r14,[rax-0x1]
0x19db0008d1da  2afa  4c8b1533d7ffff REX.W movq r10,[rip+0xffffd733]
0x19db0008d1e1  2b01  4d3bd6         REX.W cmpq r10,r14
0x19db0008d1e4  2b04  7712           ja 0x19db0008d1f8  <+0x2b18>
0x19db0008d1e6  2b06  488b1536d7ffff REX.W movq rdx,[rip+0xffffd736]
0x19db0008d1ed  2b0d  4c8b1504d5ffff REX.W movq r10,[rip+0xffffd504]
0x19db0008d1f4  2b14  41ffd2         call r10
0x19db0008d1f7  2b17  cc             int3l
0x19db0008d1f8  2b18  4539b5d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r14
0x19db0008d1ff  2b1f  0f851b1a0000   jnz 0x19db0008ec20  <+0x4540>
0x19db0008d205  2b25  458b64240b     movl r12,[r12+0xb]
0x19db0008d20a  2b2a  41d1fc         sarl r12, 1
0x19db0008d20d  2b2d  4183fc0a       cmpl r12,0xa
0x19db0008d211  2b31  0f86101a0000   jna 0x19db0008ec27  <+0x4547>
0x19db0008d217  2b37  498b8da8000000 REX.W movq rcx,[r13+0xa8] (root (true_value))
0x19db0008d21e  2b3e  89482f         movl [rax+0x2f],rcx
0x19db0008d221  2b41  e903000000     jmp 0x19db0008d229  <+0x2b49>
0x19db0008d226  2b46  4c8bc1         REX.W movq r8,rcx
0x19db0008d229  2b49  418b480f       movl rcx,[r8+0xf]
0x19db0008d22d  2b4d  4903cd         REX.W addq rcx,r13
0x19db0008d230  2b50  f6c101         testb rcx,0x1
0x19db0008d233  2b53  0f84f5190000   jz 0x19db0008ec2e  <+0x454e>
0x19db0008d239  2b59  443949ff       cmpl [rcx-0x1],r9
0x19db0008d23d  2b5d  0f85f2190000   jnz 0x19db0008ec35  <+0x4555>
0x19db0008d243  2b63  448b6103       movl r12,[rcx+0x3]
0x19db0008d247  2b67  4d03e5         REX.W addq r12,r13
0x19db0008d24a  2b6a  458b64240f     movl r12,[r12+0xf]
0x19db0008d24f  2b6f  4d03e5         REX.W addq r12,r13
0x19db0008d252  2b72  41f6c401       testb r12,0x1
0x19db0008d256  2b76  0f84e0190000   jz 0x19db0008ec3c  <+0x455c>
0x19db0008d25c  2b7c  45395c24ff     cmpl [r12-0x1],r11
0x19db0008d261  2b81  0f85dc190000   jnz 0x19db0008ec43  <+0x4563>
0x19db0008d267  2b87  418b442407     movl rax,[r12+0x7]
0x19db0008d26c  2b8c  4903c5         REX.W addq rax,r13
0x19db0008d26f  2b8f  458b64240b     movl r12,[r12+0xb]
0x19db0008d274  2b94  41d1fc         sarl r12, 1
0x19db0008d277  2b97  4183fc07       cmpl r12,0x7
0x19db0008d27b  2b9b  0f86c9190000   jna 0x19db0008ec4a  <+0x456a>
0x19db0008d281  2ba1  448b6023       movl r12,[rax+0x23]
0x19db0008d285  2ba5  4d03e5         REX.W addq r12,r13
0x19db0008d288  2ba8  41f6c401       testb r12,0x1
0x19db0008d28c  2bac  0f84ea0e0000   jz 0x19db0008e17c  <+0x3a9c>
0x19db0008d292  2bb2  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db0008d299  2bb9  0f843e000000   jz 0x19db0008d2dd  <+0x2bfd>
0x19db0008d29f  2bbf  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db0008d2a6  2bc6  0f8431000000   jz 0x19db0008d2dd  <+0x2bfd>
0x19db0008d2ac  2bcc  418b4424ff     movl rax,[r12-0x1]
0x19db0008d2b1  2bd1  4903c5         REX.W addq rax,r13
0x19db0008d2b4  2bd4  f6400910       testb [rax+0x9],0x10
0x19db0008d2b8  2bd8  0f851f000000   jnz 0x19db0008d2dd  <+0x2bfd>
0x19db0008d2be  2bde  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db0008d2c5  2be5  0f84970e0000   jz 0x19db0008e162  <+0x3a82>
0x19db0008d2cb  2beb  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db0008d2d2  2bf2  0f84760e0000   jz 0x19db0008e14e  <+0x3a6e>
0x19db0008d2d8  2bf8  e927000000     jmp 0x19db0008d304  <+0x2c24>
0x19db0008d2dd  2bfd  458b482b       movl r9,[r8+0x2b]
0x19db0008d2e1  2c01  4c8b152cd6ffff REX.W movq r10,[rip+0xffffd62c]
0x19db0008d2e8  2c08  4d3bd1         REX.W cmpq r10,r9
0x19db0008d2eb  2c0b  7712           ja 0x19db0008d2ff  <+0x2c1f>
0x19db0008d2ed  2c0d  488b152fd6ffff REX.W movq rdx,[rip+0xffffd62f]
0x19db0008d2f4  2c14  4c8b15fdd3ffff REX.W movq r10,[rip+0xffffd3fd]
0x19db0008d2fb  2c1b  41ffd2         call r10
0x19db0008d2fe  2c1e  cc             int3l
0x19db0008d2ff  2c1f  e94d190000     jmp 0x19db0008ec51  <+0x4571>
0x19db0008d304  2c24  4c8b65d0       REX.W movq r12,[rbp-0x30]
0x19db0008d308  2c28  b9cd9f3008     movl rcx,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008d30d  2c2d  41394c24ff     cmpl [r12-0x1],rcx
0x19db0008d312  2c32  0f85e5180000   jnz 0x19db0008ebfd  <+0x451d>
0x19db0008d318  2c38  418b4c2407     movl rcx,[r12+0x7]
0x19db0008d31d  2c3d  4903cd         REX.W addq rcx,r13
0x19db0008d320  2c40  458b74240b     movl r14,[r12+0xb]
0x19db0008d325  2c45  41d1fe         sarl r14, 1
0x19db0008d328  2c48  4183fe05       cmpl r14,0x5
0x19db0008d32c  2c4c  0f8654180000   jna 0x19db0008eb86  <+0x44a6>
0x19db0008d332  2c52  8b491b         movl rcx,[rcx+0x1b]
0x19db0008d335  2c55  4903cd         REX.W addq rcx,r13
0x19db0008d338  2c58  41398d98000000 cmpl [r13+0x98] (root (the_hole_value)),rcx
0x19db0008d33f  2c5f  0f844b0e0000   jz 0x19db0008e190  <+0x3ab0>
0x19db0008d345  2c65  f6c101         testb rcx,0x1
0x19db0008d348  2c68  0f84c1170000   jz 0x19db0008eb0f  <+0x442f>
0x19db0008d34e  2c6e  41be559f3008   movl r14,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008d354  2c74  443971ff       cmpl [rcx-0x1],r14
0x19db0008d358  2c78  0f8517170000   jnz 0x19db0008ea75  <+0x4395>
0x19db0008d35e  2c7e  448b7107       movl r14,[rcx+0x7]
0x19db0008d362  2c82  4d03f5         REX.W addq r14,r13
0x19db0008d365  2c85  8b490b         movl rcx,[rcx+0xb]
0x19db0008d368  2c88  d1f9           sarl rcx, 1
0x19db0008d36a  2c8a  83f902         cmpl rcx,0x2
0x19db0008d36d  2c8d  0f868b160000   jna 0x19db0008e9fe  <+0x431e>
0x19db0008d373  2c93  c4c17b104e17   vmovsd xmm1,[r14+0x17]
0x19db0008d379  2c99  c5f957c0       vxorpd xmm0,xmm0,xmm0
0x19db0008d37d  2c9d  c5f92ec1       vucomisd xmm0,xmm1
0x19db0008d381  2ca1  0f870e010000   ja 0x19db0008d495  <+0x2db5>
0x19db0008d387  2ca7  418b480f       movl rcx,[r8+0xf]
0x19db0008d38b  2cab  4903cd         REX.W addq rcx,r13
0x19db0008d38e  2cae  4c8b25aad3ffff REX.W movq r12,[rip+0xffffd3aa]
0x19db0008d395  2cb5  4d8b3424       REX.W movq r14,[r12]
0x19db0008d399  2cb9  4d8d7e10       REX.W leaq r15,[r14+0x10]
0x19db0008d39d  2cbd  488b05acd3ffff REX.W movq rax,[rip+0xffffd3ac]
0x19db0008d3a4  2cc4  4c3938         REX.W cmpq [rax],r15
0x19db0008d3a7  2cc7  0f86ef0d0000   jna 0x19db0008e19c  <+0x3abc>
0x19db0008d3ad  2ccd  4d8d7e10       REX.W leaq r15,[r14+0x10]
0x19db0008d3b1  2cd1  4d893c24       REX.W movq [r12],r15
0x19db0008d3b5  2cd5  4d8d6601       REX.W leaq r12,[r14+0x1]
0x19db0008d3b9  2cd9  45895c24ff     movl [r12-0x1],r11
0x19db0008d3be  2cde  4d8b9d58010000 REX.W movq r11,[r13+0x158] (root (empty_fixed_array))
0x19db0008d3c5  2ce5  45895c2403     movl [r12+0x3],r11
0x19db0008d3ca  2cea  b8715d2f08     movl rax,0x82f5d71      ;; (compressed) object: 0x19db082f5d71 <FixedArray[12]>
0x19db0008d3cf  2cef  4189442407     movl [r12+0x7],rax
0x19db0008d3d4  2cf4  41c744240b18000000 movl [r12+0xb],0x18
0x19db0008d3dd  2cfd  f6c101         testb rcx,0x1
0x19db0008d3e0  2d00  0f84a1150000   jz 0x19db0008e987  <+0x42a7>
0x19db0008d3e6  2d06  443949ff       cmpl [rcx-0x1],r9
0x19db0008d3ea  2d0a  0f8566150000   jnz 0x19db0008e956  <+0x4276>
0x19db0008d3f0  2d10  8b4903         movl rcx,[rcx+0x3]
0x19db0008d3f3  2d13  4903cd         REX.W addq rcx,r13
0x19db0008d3f6  2d16  4489610f       movl [rcx+0xf],r12
0x19db0008d3fa  2d1a  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0008d401  2d21  4c23d9         REX.W andq r11,rcx
0x19db0008d404  2d24  41f6430804     testb [r11+0x8],0x4
0x19db0008d409  2d29  0f850f0e0000   jnz 0x19db0008e21e  <+0x3b3e>
0x19db0008d40f  2d2f  418b480f       movl rcx,[r8+0xf]
0x19db0008d413  2d33  4903cd         REX.W addq rcx,r13
0x19db0008d416  2d36  f6c101         testb rcx,0x1
0x19db0008d419  2d39  0f84ee130000   jz 0x19db0008e80d  <+0x412d>
0x19db0008d41f  2d3f  443949ff       cmpl [rcx-0x1],r9
0x19db0008d423  2d43  0f843d000000   jz 0x19db0008d466  <+0x2d86>
0x19db0008d429  2d49  41bc45dc3008   movl r12,0x830dc45      ;; (compressed) object: 0x19db0830dc45 <Map(PACKED_ELEMENTS)>
0x19db0008d42f  2d4f  443961ff       cmpl [rcx-0x1],r12
0x19db0008d433  2d53  0f85ae120000   jnz 0x19db0008e6e7  <+0x4007>
0x19db0008d439  2d59  448b4103       movl r8,[rcx+0x3]
0x19db0008d43d  2d5d  4d03c5         REX.W addq r8,r13
0x19db0008d440  2d60  448949ff       movl [rcx-0x1],r9
0x19db0008d444  2d64  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0008d44b  2d6b  4c23d9         REX.W andq r11,rcx
0x19db0008d44e  2d6e  41f6430804     testb [r11+0x8],0x4
0x19db0008d453  2d73  0f857a0d0000   jnz 0x19db0008e1d3  <+0x3af3>
0x19db0008d459  2d79  41c7401700000000 movl [r8+0x17],0x0
0x19db0008d461  2d81  e90d000000     jmp 0x19db0008d473  <+0x2d93>
0x19db0008d466  2d86  8b4903         movl rcx,[rcx+0x3]
0x19db0008d469  2d89  4903cd         REX.W addq rcx,r13
0x19db0008d46c  2d8c  c7411700000000 movl [rcx+0x17],0x0
0x19db0008d473  2d93  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db0008d47a  2d9a  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db0008d47e  2d9e  488be5         REX.W movq rsp,rbp
0x19db0008d481  2da1  5d             pop rbp
0x19db0008d482  2da2  4883f900       REX.W cmpq rcx,0x0
0x19db0008d486  2da6  7f03           jg 0x19db0008d48b  <+0x2dab>
0x19db0008d488  2da8  c20800         ret 0x8
0x19db0008d48b  2dab  415a           pop r10
0x19db0008d48d  2dad  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db0008d492  2db2  4152           push r10
0x19db0008d494  2db4  c3             retl
0x19db0008d495  2db5  418b480f       movl rcx,[r8+0xf]
0x19db0008d499  2db9  4903cd         REX.W addq rcx,r13
0x19db0008d49c  2dbc  f6c101         testb rcx,0x1
0x19db0008d49f  2dbf  0f84a8110000   jz 0x19db0008e64d  <+0x3f6d>
0x19db0008d4a5  2dc5  443949ff       cmpl [rcx-0x1],r9
0x19db0008d4a9  2dc9  0f8527110000   jnz 0x19db0008e5d6  <+0x3ef6>
0x19db0008d4af  2dcf  8b4903         movl rcx,[rcx+0x3]
0x19db0008d4b2  2dd2  4903cd         REX.W addq rcx,r13
0x19db0008d4b5  2dd5  8b490f         movl rcx,[rcx+0xf]
0x19db0008d4b8  2dd8  4c8b1555d4ffff REX.W movq r10,[rip+0xffffd455]
0x19db0008d4bf  2ddf  4c3bd1         REX.W cmpq r10,rcx
0x19db0008d4c2  2de2  7712           ja 0x19db0008d4d6  <+0x2df6>
0x19db0008d4c4  2de4  488b1558d4ffff REX.W movq rdx,[rip+0xffffd458]
0x19db0008d4cb  2deb  4c8b1526d2ffff REX.W movq r10,[rip+0xffffd226]
0x19db0008d4d2  2df2  41ffd2         call r10
0x19db0008d4d5  2df5  cc             int3l
0x19db0008d4d6  2df6  e984170000     jmp 0x19db0008ec5f  <+0x457f>
0x19db0008d4db  2dfb  8b4803         movl rcx,[rax+0x3]
0x19db0008d4de  2dfe  4903cd         REX.W addq rcx,r13
0x19db0008d4e1  2e01  8b490f         movl rcx,[rcx+0xf]
0x19db0008d4e4  2e04  4c8b1529d4ffff REX.W movq r10,[rip+0xffffd429]
0x19db0008d4eb  2e0b  4c3bd1         REX.W cmpq r10,rcx
0x19db0008d4ee  2e0e  7712           ja 0x19db0008d502  <+0x2e22>
0x19db0008d4f0  2e10  488b152cd4ffff REX.W movq rdx,[rip+0xffffd42c]
0x19db0008d4f7  2e17  4c8b15fad1ffff REX.W movq r10,[rip+0xffffd1fa]
0x19db0008d4fe  2e1e  41ffd2         call r10
0x19db0008d501  2e21  cc             int3l
0x19db0008d502  2e22  e95f170000     jmp 0x19db0008ec66  <+0x4586>
0x19db0008d507  2e27  48b91001000000000000 REX.W movq rcx,0x110
0x19db0008d511  2e31  51             push rcx
0x19db0008d512  2e32  b801000000     movl rax,0x1
0x19db0008d517  2e37  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db0008d521  2e41  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008d52b  2e4b  488bc8         REX.W movq rcx,rax
0x19db0008d52e  2e4e  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db0008d538  2e58  41ffd2         call r10
0x19db0008d53b  2e5b  e9fdd1ffff     jmp 0x19db0008a73d  <+0x5d>
0x19db0008d540  2e60  ba28000000     movl rdx,0x28
0x19db0008d545  2e65  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db0008d54f  2e6f  41ffd2         call r10
0x19db0008d552  2e72  4c8d40ff       REX.W leaq r8,[rax-0x1]
0x19db0008d556  2e76  4c8b1df3d1ffff REX.W movq r11,[rip+0xffffd1f3]
0x19db0008d55d  2e7d  488b0ddbd1ffff REX.W movq rcx,[rip+0xffffd1db]
0x19db0008d564  2e84  e9f8d1ffff     jmp 0x19db0008a761  <+0x81>
0x19db0008d569  2e89  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db0008d570  2e90  e9dcd3ffff     jmp 0x19db0008a951  <+0x271>
0x19db0008d575  2e95  4c894da0       REX.W movq [rbp-0x60],r9
0x19db0008d579  2e99  48894598       REX.W movq [rbp-0x68],rax
0x19db0008d57d  2e9d  c5fb1145b0     vmovsd [rbp-0x50],xmm0
0x19db0008d582  2ea2  4c8be2         REX.W movq r12,rdx
0x19db0008d585  2ea5  ba38000000     movl rdx,0x38
0x19db0008d58a  2eaa  4c8b15b6ffffff REX.W movq r10,[rip+0xffffffb6]
0x19db0008d591  2eb1  41ffd2         call r10
0x19db0008d594  2eb4  488d48ff       REX.W leaq rcx,[rax-0x1]
0x19db0008d598  2eb8  488bd9         REX.W movq rbx,rcx
0x19db0008d59b  2ebb  4d8bbd58010000 REX.W movq r15,[r13+0x158] (root (empty_fixed_array))
0x19db0008d5a2  2ec2  bea59f3008     movl rsi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008d5a7  2ec7  488b0d91d1ffff REX.W movq rcx,[rip+0xffffd191]
0x19db0008d5ae  2ece  4c8b1d9bd1ffff REX.W movq r11,[rip+0xffffd19b]
0x19db0008d5b5  2ed5  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008d5ba  2eda  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0008d5be  2ede  488b4598       REX.W movq rax,[rbp-0x68]
0x19db0008d5c2  2ee2  c5fb1045b0     vmovsd xmm0,[rbp-0x50]
0x19db0008d5c7  2ee7  e995d3ffff     jmp 0x19db0008a961  <+0x281>
0x19db0008d5cc  2eec  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0008d5d0  2ef0  4c894da0       REX.W movq [rbp-0x60],r9
0x19db0008d5d4  2ef4  48894598       REX.W movq [rbp-0x68],rax
0x19db0008d5d8  2ef8  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db0008d5e2  2f02  488bc8         REX.W movq rcx,rax
0x19db0008d5e5  2f05  33c0           xorl rax,rax
0x19db0008d5e7  2f07  4c8bc6         REX.W movq r8,rsi
0x19db0008d5ea  2f0a  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008d5f4  2f14  4c8b1535ffffff REX.W movq r10,[rip+0xffffff35]
0x19db0008d5fb  2f1b  41ffd2         call r10
0x19db0008d5fe  2f1e  bea59f3008     movl rsi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008d603  2f23  4c8b1d46d1ffff REX.W movq r11,[rip+0xffffd146]
0x19db0008d60a  2f2a  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008d60f  2f2f  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0008d613  2f33  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0008d617  2f37  488b4598       REX.W movq rax,[rbp-0x68]
0x19db0008d61b  2f3b  e985d4ffff     jmp 0x19db0008aaa5  <+0x3c5>
0x19db0008d620  2f40  8d1c09         leal rbx,[rcx+rcx*1]
0x19db0008d623  2f43  4c8b15ead2ffff REX.W movq r10,[rip+0xffffd2ea]
0x19db0008d62a  2f4a  4c3bd3         REX.W cmpq r10,rbx
0x19db0008d62d  2f4d  7712           ja 0x19db0008d641  <+0x2f61>
0x19db0008d62f  2f4f  488b15edd2ffff REX.W movq rdx,[rip+0xffffd2ed]
0x19db0008d636  2f56  4c8b15bbd0ffff REX.W movq r10,[rip+0xffffd0bb]
0x19db0008d63d  2f5d  41ffd2         call r10
0x19db0008d640  2f60  cc             int3l
0x19db0008d641  2f61  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0008d645  2f65  4c894da0       REX.W movq [rbp-0x60],r9
0x19db0008d649  2f69  4c894598       REX.W movq [rbp-0x68],r8
0x19db0008d64d  2f6d  c5fb117580     vmovsd [rbp-0x80],xmm6
0x19db0008d652  2f72  c5fb11ad78ffffff vmovsd [rbp-0x88],xmm5
0x19db0008d65a  2f7a  c5fb118d70ffffff vmovsd [rbp-0x90],xmm1
0x19db0008d662  2f82  c5fb118568ffffff vmovsd [rbp-0x98],xmm0
0x19db0008d66a  2f8a  c5fb11a560ffffff vmovsd [rbp-0xa0],xmm4
0x19db0008d672  2f92  c5fb119558ffffff vmovsd [rbp-0xa8],xmm2
0x19db0008d67a  2f9a  48898d50ffffff REX.W movq [rbp-0xb0],rcx
0x19db0008d681  2fa1  4c89bd48ffffff REX.W movq [rbp-0xb8],r15
0x19db0008d688  2fa8  498bc6         REX.W movq rax,r14
0x19db0008d68b  2fab  4c8be6         REX.W movq r12,rsi
0x19db0008d68e  2fae  33f6           xorl rsi,rsi
0x19db0008d690  2fb0  49ba20e7baf5ff7f0000 REX.W movq r10,0x7ffff5bae720  (GrowFastDoubleElements)    ;; off heap target
0x19db0008d69a  2fba  41ffd2         call r10
0x19db0008d69d  2fbd  a801           test al,0x1
0x19db0008d69f  2fbf  0f84ba0e0000   jz 0x19db0008e55f  <+0x3e7f>
0x19db0008d6a5  2fc5  4c8bbd48ffffff REX.W movq r15,[rbp-0xb8]
0x19db0008d6ac  2fcc  bea59f3008     movl rsi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008d6b1  2fd1  4c8b1d98d0ffff REX.W movq r11,[rip+0xffffd098]
0x19db0008d6b8  2fd8  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008d6bd  2fdd  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0008d6c1  2fe1  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0008d6c5  2fe5  4c8b4598       REX.W movq r8,[rbp-0x68]
0x19db0008d6c9  2fe9  c5fb107580     vmovsd xmm6,[rbp-0x80]
0x19db0008d6ce  2fee  c5fb10ad78ffffff vmovsd xmm5,[rbp-0x88]
0x19db0008d6d6  2ff6  c5fb108d70ffffff vmovsd xmm1,[rbp-0x90]
0x19db0008d6de  2ffe  c5fb108568ffffff vmovsd xmm0,[rbp-0x98]
0x19db0008d6e6  3006  c5fb10a560ffffff vmovsd xmm4,[rbp-0xa0]
0x19db0008d6ee  300e  c5fb109558ffffff vmovsd xmm2,[rbp-0xa8]
0x19db0008d6f6  3016  488b8d50ffffff REX.W movq rcx,[rbp-0xb0]
0x19db0008d6fd  301d  e9bcd4ffff     jmp 0x19db0008abbe  <+0x4de>
0x19db0008d702  3022  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0008d706  3026  4c894da0       REX.W movq [rbp-0x60],r9
0x19db0008d70a  302a  4c894598       REX.W movq [rbp-0x68],r8
0x19db0008d70e  302e  4c896588       REX.W movq [rbp-0x78],r12
0x19db0008d712  3032  488b1dc1feffff REX.W movq rbx,[rip+0xfffffec1]
0x19db0008d719  3039  33c0           xorl rax,rax
0x19db0008d71b  303b  488bce         REX.W movq rcx,rsi
0x19db0008d71e  303e  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008d728  3048  4c8b1501feffff REX.W movq r10,[rip+0xfffffe01]
0x19db0008d72f  304f  41ffd2         call r10
0x19db0008d732  3052  bea59f3008     movl rsi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008d737  3057  4c8b1d12d0ffff REX.W movq r11,[rip+0xffffd012]
0x19db0008d73e  305e  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008d743  3063  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0008d747  3067  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0008d74b  306b  4c8b4598       REX.W movq r8,[rbp-0x68]
0x19db0008d74f  306f  4c8b6588       REX.W movq r12,[rbp-0x78]
0x19db0008d753  3073  e968d3ffff     jmp 0x19db0008aac0  <+0x3e0>
0x19db0008d758  3078  448d0c1b       leal r9,[rbx+rbx*1]
0x19db0008d75c  307c  4c8b15b1d1ffff REX.W movq r10,[rip+0xffffd1b1]
0x19db0008d763  3083  4d3bd1         REX.W cmpq r10,r9
0x19db0008d766  3086  7712           ja 0x19db0008d77a  <+0x309a>
0x19db0008d768  3088  488b15b4d1ffff REX.W movq rdx,[rip+0xffffd1b4]
0x19db0008d76f  308f  4c8b1582cfffff REX.W movq r10,[rip+0xffffcf82]
0x19db0008d776  3096  41ffd2         call r10
0x19db0008d779  3099  cc             int3l
0x19db0008d77a  309a  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0008d77e  309e  4c8965a8       REX.W movq [rbp-0x58],r12
0x19db0008d782  30a2  498bc0         REX.W movq rax,r8
0x19db0008d785  30a5  4c8bd3         REX.W movq r10,rbx
0x19db0008d788  30a8  498bd9         REX.W movq rbx,r9
0x19db0008d78b  30ab  4d8bca         REX.W movq r9,r10
0x19db0008d78e  30ae  4c8bfe         REX.W movq r15,rsi
0x19db0008d791  30b1  33f6           xorl rsi,rsi
0x19db0008d793  30b3  49bae0eebaf5ff7f0000 REX.W movq r10,0x7ffff5baeee0  (GrowFastSmiOrObjectElements)    ;; off heap target
0x19db0008d79d  30bd  41ffd2         call r10
0x19db0008d7a0  30c0  a801           test al,0x1
0x19db0008d7a2  30c2  0f84470d0000   jz 0x19db0008e4ef  <+0x3e0f>
0x19db0008d7a8  30c8  4c8bc8         REX.W movq r9,rax
0x19db0008d7ab  30cb  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008d7af  30cf  bea59f3008     movl rsi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008d7b4  30d4  4c8b1d95cfffff REX.W movq r11,[rip+0xffffcf95]
0x19db0008d7bb  30db  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008d7c0  30e0  b9cd9f3008     movl rcx,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008d7c5  30e5  488b5dc0       REX.W movq rbx,[rbp-0x40]
0x19db0008d7c9  30e9  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0008d7cd  30ed  4c8b65a8       REX.W movq r12,[rbp-0x58]
0x19db0008d7d1  30f1  e9c1d4ffff     jmp 0x19db0008ac97  <+0x5b7>
0x19db0008d7d6  30f6  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0008d7da  30fa  4c8965a8       REX.W movq [rbp-0x58],r12
0x19db0008d7de  30fe  498bc0         REX.W movq rax,r8
0x19db0008d7e1  3101  4c8bce         REX.W movq r9,rsi
0x19db0008d7e4  3104  33f6           xorl rsi,rsi
0x19db0008d7e6  3106  49bac0dfbaf5ff7f0000 REX.W movq r10,0x7ffff5badfc0  (CopyFastSmiOrObjectElements)    ;; off heap target
0x19db0008d7f0  3110  41ffd2         call r10
0x19db0008d7f3  3113  4c8bc8         REX.W movq r9,rax
0x19db0008d7f6  3116  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008d7fa  311a  bea59f3008     movl rsi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008d7ff  311f  4c8b1d4acfffff REX.W movq r11,[rip+0xffffcf4a]
0x19db0008d806  3126  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008d80b  312b  b9cd9f3008     movl rcx,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008d810  3130  488b5dc0       REX.W movq rbx,[rbp-0x40]
0x19db0008d814  3134  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0008d818  3138  4c8b65a8       REX.W movq r12,[rbp-0x58]
0x19db0008d81c  313c  e9a5d4ffff     jmp 0x19db0008acc6  <+0x5e6>
0x19db0008d821  3141  4c894dc0       REX.W movq [rbp-0x40],r9
0x19db0008d825  3145  488b1daefdffff REX.W movq rbx,[rip+0xfffffdae]
0x19db0008d82c  314c  33c0           xorl rax,rax
0x19db0008d82e  314e  4c8be6         REX.W movq r12,rsi
0x19db0008d831  3151  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008d83b  315b  4c8b15eefcffff REX.W movq r10,[rip+0xfffffcee]
0x19db0008d842  3162  41ffd2         call r10
0x19db0008d845  3165  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008d849  3169  bea59f3008     movl rsi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008d84e  316e  4c8b1dfbceffff REX.W movq r11,[rip+0xffffcefb]
0x19db0008d855  3175  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008d85a  317a  b9cd9f3008     movl rcx,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008d85f  317f  4c8b4dc0       REX.W movq r9,[rbp-0x40]
0x19db0008d863  3183  e9e8cfffff     jmp 0x19db0008a850  <+0x170>
0x19db0008d868  3188  498b8d90000000 REX.W movq rcx,[r13+0x90] (root (undefined_value))
0x19db0008d86f  318f  e934d5ffff     jmp 0x19db0008ada8  <+0x6c8>
0x19db0008d874  3194  498b8d90000000 REX.W movq rcx,[r13+0x90] (root (undefined_value))
0x19db0008d87b  319b  e980d5ffff     jmp 0x19db0008ae00  <+0x720>
0x19db0008d880  31a0  41f74103feffff7f testl [r9+0x3],0x7ffffffe
0x19db0008d888  31a8  0f85a4d7ffff   jnz 0x19db0008b032  <+0x952>
0x19db0008d88e  31ae  e950d6ffff     jmp 0x19db0008aee3  <+0x803>
0x19db0008d893  31b3  c4c17b104103   vmovsd xmm0,[r9+0x3]
0x19db0008d899  31b9  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008d89d  31bd  0f858fd7ffff   jnz 0x19db0008b032  <+0x952>
0x19db0008d8a3  31c3  e93bd6ffff     jmp 0x19db0008aee3  <+0x803>
0x19db0008d8a8  31c8  4183f900       cmpl r9,0x0
0x19db0008d8ac  31cc  0f8580d7ffff   jnz 0x19db0008b032  <+0x952>
0x19db0008d8b2  31d2  e92cd6ffff     jmp 0x19db0008aee3  <+0x803>
0x19db0008d8b7  31d7  33f6           xorl rsi,rsi
0x19db0008d8b9  31d9  4c8b1528ffffff REX.W movq r10,[rip+0xffffff28]
0x19db0008d8c0  31e0  41ffd2         call r10
0x19db0008d8c3  31e3  4c8be0         REX.W movq r12,rax
0x19db0008d8c6  31e6  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008d8ca  31ea  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008d8d0  31f0  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008d8d6  31f6  e935d7ffff     jmp 0x19db0008b010  <+0x930>
0x19db0008d8db  31fb  41f74703feffff7f testl [r15+0x3],0x7ffffffe
0x19db0008d8e3  3203  0f853dd9ffff   jnz 0x19db0008b226  <+0xb46>
0x19db0008d8e9  3209  e9fdd7ffff     jmp 0x19db0008b0eb  <+0xa0b>
0x19db0008d8ee  320e  c4c17b104703   vmovsd xmm0,[r15+0x3]
0x19db0008d8f4  3214  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008d8f8  3218  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008d8fc  321c  0f8524d9ffff   jnz 0x19db0008b226  <+0xb46>
0x19db0008d902  3222  e9e4d7ffff     jmp 0x19db0008b0eb  <+0xa0b>
0x19db0008d907  3227  4183ff00       cmpl r15,0x0
0x19db0008d90b  322b  0f8515d9ffff   jnz 0x19db0008b226  <+0xb46>
0x19db0008d911  3231  e9d5d7ffff     jmp 0x19db0008b0eb  <+0xa0b>
0x19db0008d916  3236  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db0008d91f  323f  0f85f7daffff   jnz 0x19db0008b41c  <+0xd3c>
0x19db0008d925  3245  e9b4d9ffff     jmp 0x19db0008b2de  <+0xbfe>
0x19db0008d92a  324a  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db0008d931  3251  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008d935  3255  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008d939  3259  0f85dddaffff   jnz 0x19db0008b41c  <+0xd3c>
0x19db0008d93f  325f  e99ad9ffff     jmp 0x19db0008b2de  <+0xbfe>
0x19db0008d944  3264  4183fc00       cmpl r12,0x0
0x19db0008d948  3268  0f85cedaffff   jnz 0x19db0008b41c  <+0xd3c>
0x19db0008d94e  326e  e98bd9ffff     jmp 0x19db0008b2de  <+0xbfe>
0x19db0008d953  3273  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db0008d95c  327c  0f85a7dcffff   jnz 0x19db0008b609  <+0xf29>
0x19db0008d962  3282  e96adbffff     jmp 0x19db0008b4d1  <+0xdf1>
0x19db0008d967  3287  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db0008d96e  328e  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008d972  3292  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008d976  3296  0f858ddcffff   jnz 0x19db0008b609  <+0xf29>
0x19db0008d97c  329c  e950dbffff     jmp 0x19db0008b4d1  <+0xdf1>
0x19db0008d981  32a1  4183fc00       cmpl r12,0x0
0x19db0008d985  32a5  0f857edcffff   jnz 0x19db0008b609  <+0xf29>
0x19db0008d98b  32ab  e941dbffff     jmp 0x19db0008b4d1  <+0xdf1>
0x19db0008d990  32b0  4d8bb590000000 REX.W movq r14,[r13+0x90] (root (undefined_value))
0x19db0008d997  32b7  e9addcffff     jmp 0x19db0008b649  <+0xf69>
0x19db0008d99c  32bc  f74003feffff7f testl [rax+0x3],0x7ffffffe
0x19db0008d9a3  32c3  0f85c9deffff   jnz 0x19db0008b872  <+0x1192>
0x19db0008d9a9  32c9  e985ddffff     jmp 0x19db0008b733  <+0x1053>
0x19db0008d9ae  32ce  c5fb104003     vmovsd xmm0,[rax+0x3]
0x19db0008d9b3  32d3  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008d9b7  32d7  0f85b5deffff   jnz 0x19db0008b872  <+0x1192>
0x19db0008d9bd  32dd  e971ddffff     jmp 0x19db0008b733  <+0x1053>
0x19db0008d9c2  32e2  83f800         cmpl rax,0x0
0x19db0008d9c5  32e5  0f85a7deffff   jnz 0x19db0008b872  <+0x1192>
0x19db0008d9cb  32eb  e963ddffff     jmp 0x19db0008b733  <+0x1053>
0x19db0008d9d0  32f0  33f6           xorl rsi,rsi
0x19db0008d9d2  32f2  4c8b150ffeffff REX.W movq r10,[rip+0xfffffe0f]
0x19db0008d9d9  32f9  41ffd2         call r10
0x19db0008d9dc  32fc  4c8be0         REX.W movq r12,rax
0x19db0008d9df  32ff  488b4dd8       REX.W movq rcx,[rbp-0x28]
0x19db0008d9e3  3303  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008d9e9  3309  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008d9ef  330f  e962deffff     jmp 0x19db0008b856  <+0x1176>
0x19db0008d9f4  3314  f74603feffff7f testl [rsi+0x3],0x7ffffffe
0x19db0008d9fb  331b  0f8513e4ffff   jnz 0x19db0008be14  <+0x1734>
0x19db0008da01  3321  e91fdfffff     jmp 0x19db0008b925  <+0x1245>
0x19db0008da06  3326  c5fb104603     vmovsd xmm0,[rsi+0x3]
0x19db0008da0b  332b  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008da0f  332f  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008da13  3333  0f85fbe3ffff   jnz 0x19db0008be14  <+0x1734>
0x19db0008da19  3339  e907dfffff     jmp 0x19db0008b925  <+0x1245>
0x19db0008da1e  333e  83fe00         cmpl rsi,0x0
0x19db0008da21  3341  0f85ede3ffff   jnz 0x19db0008be14  <+0x1734>
0x19db0008da27  3347  e9f9deffff     jmp 0x19db0008b925  <+0x1245>
0x19db0008da2c  334c  c5fb117da8     vmovsd [rbp-0x58],xmm7
0x19db0008da31  3351  4c894da0       REX.W movq [rbp-0x60],r9
0x19db0008da35  3355  48898d78ffffff REX.W movq [rbp-0x88],rcx
0x19db0008da3c  335c  4c89bd70ffffff REX.W movq [rbp-0x90],r15
0x19db0008da43  3363  48898520ffffff REX.W movq [rbp-0xe0],rax
0x19db0008da4a  336a  48899568ffffff REX.W movq [rbp-0x98],rdx
0x19db0008da51  3371  c5fb119d60ffffff vmovsd [rbp-0xa0],xmm3
0x19db0008da59  3379  c5fb11a550ffffff vmovsd [rbp-0xb0],xmm4
0x19db0008da61  3381  c5fb11b548ffffff vmovsd [rbp-0xb8],xmm6
0x19db0008da69  3389  c5fb11ad40ffffff vmovsd [rbp-0xc0],xmm5
0x19db0008da71  3391  c5fb119538ffffff vmovsd [rbp-0xc8],xmm2
0x19db0008da79  3399  c5fb118530ffffff vmovsd [rbp-0xd0],xmm0
0x19db0008da81  33a1  c5fb118d58ffffff vmovsd [rbp-0xa8],xmm1
0x19db0008da89  33a9  48899d28ffffff REX.W movq [rbp-0xd8],rbx
0x19db0008da90  33b0  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008da9a  33ba  4c8bf3         REX.W movq r14,rbx
0x19db0008da9d  33bd  488b1d36fbffff REX.W movq rbx,[rip+0xfffffb36]
0x19db0008daa4  33c4  4c8bd8         REX.W movq r11,rax
0x19db0008daa7  33c7  33c0           xorl rax,rax
0x19db0008daa9  33c9  4c8b1580faffff REX.W movq r10,[rip+0xfffffa80]
0x19db0008dab0  33d0  41ffd2         call r10
0x19db0008dab3  33d3  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008dab7  33d7  41bccd9f3008   movl r12,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008dabd  33dd  c5fb107da8     vmovsd xmm7,[rbp-0x58]
0x19db0008dac2  33e2  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0008dac6  33e6  488b7d80       REX.W movq rdi,[rbp-0x80]
0x19db0008daca  33ea  488b8d78ffffff REX.W movq rcx,[rbp-0x88]
0x19db0008dad1  33f1  4c8bbd70ffffff REX.W movq r15,[rbp-0x90]
0x19db0008dad8  33f8  488b8520ffffff REX.W movq rax,[rbp-0xe0]
0x19db0008dadf  33ff  488b9568ffffff REX.W movq rdx,[rbp-0x98]
0x19db0008dae6  3406  c5fb109d60ffffff vmovsd xmm3,[rbp-0xa0]
0x19db0008daee  340e  c5fb10a550ffffff vmovsd xmm4,[rbp-0xb0]
0x19db0008daf6  3416  c5fb10b548ffffff vmovsd xmm6,[rbp-0xb8]
0x19db0008dafe  341e  c5fb10ad40ffffff vmovsd xmm5,[rbp-0xc0]
0x19db0008db06  3426  c5fb109538ffffff vmovsd xmm2,[rbp-0xc8]
0x19db0008db0e  342e  c5fb108530ffffff vmovsd xmm0,[rbp-0xd0]
0x19db0008db16  3436  c5fb108d58ffffff vmovsd xmm1,[rbp-0xa8]
0x19db0008db1e  343e  488b9d28ffffff REX.W movq rbx,[rbp-0xd8]
0x19db0008db25  3445  e9eee1ffff     jmp 0x19db0008bd18  <+0x1638>
0x19db0008db2a  344a  c5fb117da8     vmovsd [rbp-0x58],xmm7
0x19db0008db2f  344f  4c894da0       REX.W movq [rbp-0x60],r9
0x19db0008db33  3453  c5fb118530ffffff vmovsd [rbp-0xd0],xmm0
0x19db0008db3b  345b  c5fb119538ffffff vmovsd [rbp-0xc8],xmm2
0x19db0008db43  3463  48898d78ffffff REX.W movq [rbp-0x88],rcx
0x19db0008db4a  346a  4c89bd70ffffff REX.W movq [rbp-0x90],r15
0x19db0008db51  3471  48898520ffffff REX.W movq [rbp-0xe0],rax
0x19db0008db58  3478  48899568ffffff REX.W movq [rbp-0x98],rdx
0x19db0008db5f  347f  c5fb119d60ffffff vmovsd [rbp-0xa0],xmm3
0x19db0008db67  3487  c57b118558ffffff vmovsd [rbp-0xa8],xmm8
0x19db0008db6f  348f  c5fb11a550ffffff vmovsd [rbp-0xb0],xmm4
0x19db0008db77  3497  4c899d28ffffff REX.W movq [rbp-0xd8],r11
0x19db0008db7e  349e  c5fb11b548ffffff vmovsd [rbp-0xb8],xmm6
0x19db0008db86  34a6  c5fb11ad40ffffff vmovsd [rbp-0xc0],xmm5
0x19db0008db8e  34ae  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008db98  34b8  488b1d3bfaffff REX.W movq rbx,[rip+0xfffffa3b]
0x19db0008db9f  34bf  4c8bf0         REX.W movq r14,rax
0x19db0008dba2  34c2  33c0           xorl rax,rax
0x19db0008dba4  34c4  4c8b1585f9ffff REX.W movq r10,[rip+0xfffff985]
0x19db0008dbab  34cb  41ffd2         call r10
0x19db0008dbae  34ce  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008dbb2  34d2  41bccd9f3008   movl r12,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008dbb8  34d8  c5fb107da8     vmovsd xmm7,[rbp-0x58]
0x19db0008dbbd  34dd  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0008dbc1  34e1  488b7d80       REX.W movq rdi,[rbp-0x80]
0x19db0008dbc5  34e5  c5fb108530ffffff vmovsd xmm0,[rbp-0xd0]
0x19db0008dbcd  34ed  c5fb109538ffffff vmovsd xmm2,[rbp-0xc8]
0x19db0008dbd5  34f5  488b8d78ffffff REX.W movq rcx,[rbp-0x88]
0x19db0008dbdc  34fc  4c8bbd70ffffff REX.W movq r15,[rbp-0x90]
0x19db0008dbe3  3503  488b8520ffffff REX.W movq rax,[rbp-0xe0]
0x19db0008dbea  350a  488b9568ffffff REX.W movq rdx,[rbp-0x98]
0x19db0008dbf1  3511  c5fb109d60ffffff vmovsd xmm3,[rbp-0xa0]
0x19db0008dbf9  3519  c57b108558ffffff vmovsd xmm8,[rbp-0xa8]
0x19db0008dc01  3521  c5fb10a550ffffff vmovsd xmm4,[rbp-0xb0]
0x19db0008dc09  3529  4c8b9d28ffffff REX.W movq r11,[rbp-0xd8]
0x19db0008dc10  3530  c5fb10b548ffffff vmovsd xmm6,[rbp-0xb8]
0x19db0008dc18  3538  c5fb10ad40ffffff vmovsd xmm5,[rbp-0xc0]
0x19db0008dc20  3540  e9ebe0ffff     jmp 0x19db0008bd10  <+0x1630>
0x19db0008dc25  3545  c4e37916f901   vpextrd rcx,xmm7,0x1,
0x19db0008dc2b  354b  c5fb117da8     vmovsd [rbp-0x58],xmm7
0x19db0008dc30  3550  83f900         cmpl rcx,0x0
0x19db0008dc33  3553  0f8c0a000000   jl 0x19db0008dc43  <+0x3563>
0x19db0008dc39  3559  e94ee1ffff     jmp 0x19db0008bd8c  <+0x16ac>
0x19db0008dc3e  355e  c5fb117da8     vmovsd [rbp-0x58],xmm7
0x19db0008dc43  3563  488b0df5caffff REX.W movq rcx,[rip+0xffffcaf5]
0x19db0008dc4a  356a  4c8b09         REX.W movq r9,[rcx]
0x19db0008dc4d  356d  4d8d710c       REX.W leaq r14,[r9+0xc]
0x19db0008dc51  3571  4c8b1df8caffff REX.W movq r11,[rip+0xffffcaf8]
0x19db0008dc58  3578  4d3933         REX.W cmpq [r11],r14
0x19db0008dc5b  357b  0f872b000000   ja 0x19db0008dc8c  <+0x35ac>
0x19db0008dc61  3581  ba0c000000     movl rdx,0xc
0x19db0008dc66  3586  4c8b15daf8ffff REX.W movq r10,[rip+0xfffff8da]
0x19db0008dc6d  358d  41ffd2         call r10
0x19db0008dc70  3590  4c8d48ff       REX.W leaq r9,[rax-0x1]
0x19db0008dc74  3594  41bccd9f3008   movl r12,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008dc7a  359a  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0008dc7e  359e  488b0dbacaffff REX.W movq rcx,[rip+0xffffcaba]
0x19db0008dc85  35a5  4c8b1dc4caffff REX.W movq r11,[rip+0xffffcac4]
0x19db0008dc8c  35ac  4d8d710c       REX.W leaq r14,[r9+0xc]
0x19db0008dc90  35b0  4c8931         REX.W movq [rcx],r14
0x19db0008dc93  35b3  4983c101       REX.W addq r9,0x1
0x19db0008dc97  35b7  4d8bb530010000 REX.W movq r14,[r13+0x130] (root (heap_number_map))
0x19db0008dc9e  35be  458971ff       movl [r9-0x1],r14
0x19db0008dca2  35c2  c5fb107da8     vmovsd xmm7,[rbp-0x58]
0x19db0008dca7  35c7  c4c17b117903   vmovsd [r9+0x3],xmm7
0x19db0008dcad  35cd  498bc9         REX.W movq rcx,r9
0x19db0008dcb0  35d0  e9e3e0ffff     jmp 0x19db0008bd98  <+0x16b8>
0x19db0008dcb5  35d5  f74003feffff7f testl [rax+0x3],0x7ffffffe
0x19db0008dcbc  35dc  0f85dfe2ffff   jnz 0x19db0008bfa1  <+0x18c1>
0x19db0008dcc2  35e2  e9ade1ffff     jmp 0x19db0008be74  <+0x1794>
0x19db0008dcc7  35e7  c5fb104003     vmovsd xmm0,[rax+0x3]
0x19db0008dccc  35ec  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008dcd0  35f0  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008dcd4  35f4  0f85c7e2ffff   jnz 0x19db0008bfa1  <+0x18c1>
0x19db0008dcda  35fa  e995e1ffff     jmp 0x19db0008be74  <+0x1794>
0x19db0008dcdf  35ff  83f800         cmpl rax,0x0
0x19db0008dce2  3602  0f85b9e2ffff   jnz 0x19db0008bfa1  <+0x18c1>
0x19db0008dce8  3608  e987e1ffff     jmp 0x19db0008be74  <+0x1794>
0x19db0008dced  360d  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db0008dcf6  3616  0f8527e8ffff   jnz 0x19db0008c523  <+0x1e43>
0x19db0008dcfc  361c  e95de3ffff     jmp 0x19db0008c05e  <+0x197e>
0x19db0008dd01  3621  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db0008dd08  3628  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008dd0c  362c  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008dd10  3630  0f850de8ffff   jnz 0x19db0008c523  <+0x1e43>
0x19db0008dd16  3636  e943e3ffff     jmp 0x19db0008c05e  <+0x197e>
0x19db0008dd1b  363b  4183fc00       cmpl r12,0x0
0x19db0008dd1f  363f  0f85fee7ffff   jnz 0x19db0008c523  <+0x1e43>
0x19db0008dd25  3645  e934e3ffff     jmp 0x19db0008c05e  <+0x197e>
0x19db0008dd2a  364a  c5fb117db0     vmovsd [rbp-0x50],xmm7
0x19db0008dd2f  364f  4c894da8       REX.W movq [rbp-0x58],r9
0x19db0008dd33  3653  48895598       REX.W movq [rbp-0x68],rdx
0x19db0008dd37  3657  4c897590       REX.W movq [rbp-0x70],r14
0x19db0008dd3b  365b  4c894580       REX.W movq [rbp-0x80],r8
0x19db0008dd3f  365f  4c89bd78ffffff REX.W movq [rbp-0x88],r15
0x19db0008dd46  3666  48899d70ffffff REX.W movq [rbp-0x90],rbx
0x19db0008dd4d  366d  4889b568ffffff REX.W movq [rbp-0x98],rsi
0x19db0008dd54  3674  c5fb119d60ffffff vmovsd [rbp-0xa0],xmm3
0x19db0008dd5c  367c  c5fb11a550ffffff vmovsd [rbp-0xb0],xmm4
0x19db0008dd64  3684  c5fb11b548ffffff vmovsd [rbp-0xb8],xmm6
0x19db0008dd6c  368c  c5fb11ad40ffffff vmovsd [rbp-0xc0],xmm5
0x19db0008dd74  3694  c5fb119538ffffff vmovsd [rbp-0xc8],xmm2
0x19db0008dd7c  369c  c5fb118530ffffff vmovsd [rbp-0xd0],xmm0
0x19db0008dd84  36a4  c5fb118d58ffffff vmovsd [rbp-0xa8],xmm1
0x19db0008dd8c  36ac  4889bd28ffffff REX.W movq [rbp-0xd8],rdi
0x19db0008dd93  36b3  488bcb         REX.W movq rcx,rbx
0x19db0008dd96  36b6  488b1d3df8ffff REX.W movq rbx,[rip+0xfffff83d]
0x19db0008dd9d  36bd  33c0           xorl rax,rax
0x19db0008dd9f  36bf  4c8bde         REX.W movq r11,rsi
0x19db0008dda2  36c2  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008ddac  36cc  4c8b157df7ffff REX.W movq r10,[rip+0xfffff77d]
0x19db0008ddb3  36d3  41ffd2         call r10
0x19db0008ddb6  36d6  c5fb107db0     vmovsd xmm7,[rbp-0x50]
0x19db0008ddbb  36db  4c8b4da8       REX.W movq r9,[rbp-0x58]
0x19db0008ddbf  36df  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db0008ddc3  36e3  488b5598       REX.W movq rdx,[rbp-0x68]
0x19db0008ddc7  36e7  4c8b7590       REX.W movq r14,[rbp-0x70]
0x19db0008ddcb  36eb  4c8b4580       REX.W movq r8,[rbp-0x80]
0x19db0008ddcf  36ef  4c8bbd78ffffff REX.W movq r15,[rbp-0x88]
0x19db0008ddd6  36f6  488b9d70ffffff REX.W movq rbx,[rbp-0x90]
0x19db0008dddd  36fd  488bb568ffffff REX.W movq rsi,[rbp-0x98]
0x19db0008dde4  3704  c5fb109d60ffffff vmovsd xmm3,[rbp-0xa0]
0x19db0008ddec  370c  c5fb10a550ffffff vmovsd xmm4,[rbp-0xb0]
0x19db0008ddf4  3714  c5fb10b548ffffff vmovsd xmm6,[rbp-0xb8]
0x19db0008ddfc  371c  c5fb10ad40ffffff vmovsd xmm5,[rbp-0xc0]
0x19db0008de04  3724  c5fb109538ffffff vmovsd xmm2,[rbp-0xc8]
0x19db0008de0c  372c  c5fb108530ffffff vmovsd xmm0,[rbp-0xd0]
0x19db0008de14  3734  c5fb108d58ffffff vmovsd xmm1,[rbp-0xa8]
0x19db0008de1c  373c  488bbd28ffffff REX.W movq rdi,[rbp-0xd8]
0x19db0008de23  3743  e910e6ffff     jmp 0x19db0008c438  <+0x1d58>
0x19db0008de28  3748  c5fb117db0     vmovsd [rbp-0x50],xmm7
0x19db0008de2d  374d  4c894da8       REX.W movq [rbp-0x58],r9
0x19db0008de31  3751  48895598       REX.W movq [rbp-0x68],rdx
0x19db0008de35  3755  4c897590       REX.W movq [rbp-0x70],r14
0x19db0008de39  3759  c5fb118530ffffff vmovsd [rbp-0xd0],xmm0
0x19db0008de41  3761  c5fb119538ffffff vmovsd [rbp-0xc8],xmm2
0x19db0008de49  3769  4c894580       REX.W movq [rbp-0x80],r8
0x19db0008de4d  376d  4c89bd78ffffff REX.W movq [rbp-0x88],r15
0x19db0008de54  3774  48899d70ffffff REX.W movq [rbp-0x90],rbx
0x19db0008de5b  377b  4889b568ffffff REX.W movq [rbp-0x98],rsi
0x19db0008de62  3782  c5fb119d60ffffff vmovsd [rbp-0xa0],xmm3
0x19db0008de6a  378a  c57b118558ffffff vmovsd [rbp-0xa8],xmm8
0x19db0008de72  3792  c5fb11a550ffffff vmovsd [rbp-0xb0],xmm4
0x19db0008de7a  379a  48898d28ffffff REX.W movq [rbp-0xd8],rcx
0x19db0008de81  37a1  c5fb11b548ffffff vmovsd [rbp-0xb8],xmm6
0x19db0008de89  37a9  c5fb11ad40ffffff vmovsd [rbp-0xc0],xmm5
0x19db0008de91  37b1  4c8bdb         REX.W movq r11,rbx
0x19db0008de94  37b4  488b1d3ff7ffff REX.W movq rbx,[rip+0xfffff73f]
0x19db0008de9b  37bb  33c0           xorl rax,rax
0x19db0008de9d  37bd  488bfe         REX.W movq rdi,rsi
0x19db0008dea0  37c0  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008deaa  37ca  4c8b157ff6ffff REX.W movq r10,[rip+0xfffff67f]
0x19db0008deb1  37d1  41ffd2         call r10
0x19db0008deb4  37d4  c5fb107db0     vmovsd xmm7,[rbp-0x50]
0x19db0008deb9  37d9  4c8b4da8       REX.W movq r9,[rbp-0x58]
0x19db0008debd  37dd  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db0008dec1  37e1  488b5598       REX.W movq rdx,[rbp-0x68]
0x19db0008dec5  37e5  4c8b7590       REX.W movq r14,[rbp-0x70]
0x19db0008dec9  37e9  c5fb108530ffffff vmovsd xmm0,[rbp-0xd0]
0x19db0008ded1  37f1  c5fb109538ffffff vmovsd xmm2,[rbp-0xc8]
0x19db0008ded9  37f9  4c8b4580       REX.W movq r8,[rbp-0x80]
0x19db0008dedd  37fd  4c8bbd78ffffff REX.W movq r15,[rbp-0x88]
0x19db0008dee4  3804  488b9d70ffffff REX.W movq rbx,[rbp-0x90]
0x19db0008deeb  380b  488bb568ffffff REX.W movq rsi,[rbp-0x98]
0x19db0008def2  3812  c5fb109d60ffffff vmovsd xmm3,[rbp-0xa0]
0x19db0008defa  381a  c57b108558ffffff vmovsd xmm8,[rbp-0xa8]
0x19db0008df02  3822  c5fb10a550ffffff vmovsd xmm4,[rbp-0xb0]
0x19db0008df0a  382a  488b8d28ffffff REX.W movq rcx,[rbp-0xd8]
0x19db0008df11  3831  c5fb10b548ffffff vmovsd xmm6,[rbp-0xb8]
0x19db0008df19  3839  c5fb10ad40ffffff vmovsd xmm5,[rbp-0xc0]
0x19db0008df21  3841  e90ae5ffff     jmp 0x19db0008c430  <+0x1d50>
0x19db0008df26  3846  c4e37916f901   vpextrd rcx,xmm7,0x1,
0x19db0008df2c  384c  c5fb117db0     vmovsd [rbp-0x50],xmm7
0x19db0008df31  3851  83f900         cmpl rcx,0x0
0x19db0008df34  3854  0f8c0a000000   jl 0x19db0008df44  <+0x3864>
0x19db0008df3a  385a  e96de5ffff     jmp 0x19db0008c4ac  <+0x1dcc>
0x19db0008df3f  385f  c5fb117db0     vmovsd [rbp-0x50],xmm7
0x19db0008df44  3864  488b0df4c7ffff REX.W movq rcx,[rip+0xffffc7f4]
0x19db0008df4b  386b  4c8b01         REX.W movq r8,[rcx]
0x19db0008df4e  386e  4d8d480c       REX.W leaq r9,[r8+0xc]
0x19db0008df52  3872  4c8b1df7c7ffff REX.W movq r11,[rip+0xffffc7f7]
0x19db0008df59  3879  4d390b         REX.W cmpq [r11],r9
0x19db0008df5c  387c  0f8713000000   ja 0x19db0008df75  <+0x3895>
0x19db0008df62  3882  ba0c000000     movl rdx,0xc
0x19db0008df67  3887  4c8b15d9f5ffff REX.W movq r10,[rip+0xfffff5d9]
0x19db0008df6e  388e  41ffd2         call r10
0x19db0008df71  3891  4c8d40ff       REX.W leaq r8,[rax-0x1]
0x19db0008df75  3895  498d480c       REX.W leaq rcx,[r8+0xc]
0x19db0008df79  3899  4c8b0dbfc7ffff REX.W movq r9,[rip+0xffffc7bf]
0x19db0008df80  38a0  498909         REX.W movq [r9],rcx
0x19db0008df83  38a3  498d4801       REX.W leaq rcx,[r8+0x1]
0x19db0008df87  38a7  4d8b8530010000 REX.W movq r8,[r13+0x130] (root (heap_number_map))
0x19db0008df8e  38ae  448941ff       movl [rcx-0x1],r8
0x19db0008df92  38b2  c5fb107db0     vmovsd xmm7,[rbp-0x50]
0x19db0008df97  38b7  c5fb117903     vmovsd [rcx+0x3],xmm7
0x19db0008df9c  38bc  e917e5ffff     jmp 0x19db0008c4b8  <+0x1dd8>
0x19db0008dfa1  38c1  4d8bb590000000 REX.W movq r14,[r13+0x90] (root (undefined_value))
0x19db0008dfa8  38c8  e9b6e5ffff     jmp 0x19db0008c563  <+0x1e83>
0x19db0008dfad  38cd  f74603feffff7f testl [rsi+0x3],0x7ffffffe
0x19db0008dfb4  38d4  0f85bce6ffff   jnz 0x19db0008c676  <+0x1f96>
0x19db0008dfba  38da  e990e6ffff     jmp 0x19db0008c64f  <+0x1f6f>
0x19db0008dfbf  38df  c5fb104603     vmovsd xmm0,[rsi+0x3]
0x19db0008dfc4  38e4  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008dfc8  38e8  0f85a8e6ffff   jnz 0x19db0008c676  <+0x1f96>
0x19db0008dfce  38ee  e97ce6ffff     jmp 0x19db0008c64f  <+0x1f6f>
0x19db0008dfd3  38f3  83fe00         cmpl rsi,0x0
0x19db0008dfd6  38f6  0f859ae6ffff   jnz 0x19db0008c676  <+0x1f96>
0x19db0008dfdc  38fc  e96ee6ffff     jmp 0x19db0008c64f  <+0x1f6f>
0x19db0008dfe1  3901  e990e6ffff     jmp 0x19db0008c676  <+0x1f96>
0x19db0008dfe6  3906  f74003feffff7f testl [rax+0x3],0x7ffffffe
0x19db0008dfed  390d  0f8518e8ffff   jnz 0x19db0008c80b  <+0x212b>
0x19db0008dff3  3913  e9dee6ffff     jmp 0x19db0008c6d6  <+0x1ff6>
0x19db0008dff8  3918  c5fb104003     vmovsd xmm0,[rax+0x3]
0x19db0008dffd  391d  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008e001  3921  0f8504e8ffff   jnz 0x19db0008c80b  <+0x212b>
0x19db0008e007  3927  e9cae6ffff     jmp 0x19db0008c6d6  <+0x1ff6>
0x19db0008e00c  392c  83f800         cmpl rax,0x0
0x19db0008e00f  392f  0f85f6e7ffff   jnz 0x19db0008c80b  <+0x212b>
0x19db0008e015  3935  e9bce6ffff     jmp 0x19db0008c6d6  <+0x1ff6>
0x19db0008e01a  393a  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db0008e023  3943  0f85cfe9ffff   jnz 0x19db0008c9f8  <+0x2318>
0x19db0008e029  3949  e992e8ffff     jmp 0x19db0008c8c0  <+0x21e0>
0x19db0008e02e  394e  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db0008e035  3955  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008e039  3959  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008e03d  395d  0f85b5e9ffff   jnz 0x19db0008c9f8  <+0x2318>
0x19db0008e043  3963  e978e8ffff     jmp 0x19db0008c8c0  <+0x21e0>
0x19db0008e048  3968  4183fc00       cmpl r12,0x0
0x19db0008e04c  396c  0f85a6e9ffff   jnz 0x19db0008c9f8  <+0x2318>
0x19db0008e052  3972  e969e8ffff     jmp 0x19db0008c8c0  <+0x21e0>
0x19db0008e057  3977  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db0008e060  3980  0f857febffff   jnz 0x19db0008cbe5  <+0x2505>
0x19db0008e066  3986  e942eaffff     jmp 0x19db0008caad  <+0x23cd>
0x19db0008e06b  398b  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db0008e072  3992  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008e076  3996  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008e07a  399a  0f8565ebffff   jnz 0x19db0008cbe5  <+0x2505>
0x19db0008e080  39a0  e928eaffff     jmp 0x19db0008caad  <+0x23cd>
0x19db0008e085  39a5  4183fc00       cmpl r12,0x0
0x19db0008e089  39a9  0f8556ebffff   jnz 0x19db0008cbe5  <+0x2505>
0x19db0008e08f  39af  e919eaffff     jmp 0x19db0008caad  <+0x23cd>
0x19db0008e094  39b4  4d8bb590000000 REX.W movq r14,[r13+0x90] (root (undefined_value))
0x19db0008e09b  39bb  e985ebffff     jmp 0x19db0008cc25  <+0x2545>
0x19db0008e0a0  39c0  f74003feffff7f testl [rax+0x3],0x7ffffffe
0x19db0008e0a7  39c7  0f859cedffff   jnz 0x19db0008ce49  <+0x2769>
0x19db0008e0ad  39cd  e965ecffff     jmp 0x19db0008cd17  <+0x2637>
0x19db0008e0b2  39d2  c5fb104003     vmovsd xmm0,[rax+0x3]
0x19db0008e0b7  39d7  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008e0bb  39db  0f8588edffff   jnz 0x19db0008ce49  <+0x2769>
0x19db0008e0c1  39e1  e951ecffff     jmp 0x19db0008cd17  <+0x2637>
0x19db0008e0c6  39e6  83f800         cmpl rax,0x0
0x19db0008e0c9  39e9  0f857aedffff   jnz 0x19db0008ce49  <+0x2769>
0x19db0008e0cf  39ef  e943ecffff     jmp 0x19db0008cd17  <+0x2637>
0x19db0008e0d4  39f4  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db0008e0dd  39fd  0f8553efffff   jnz 0x19db0008d036  <+0x2956>
0x19db0008e0e3  3a03  e916eeffff     jmp 0x19db0008cefe  <+0x281e>
0x19db0008e0e8  3a08  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db0008e0ef  3a0f  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008e0f3  3a13  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008e0f7  3a17  0f8539efffff   jnz 0x19db0008d036  <+0x2956>
0x19db0008e0fd  3a1d  e9fcedffff     jmp 0x19db0008cefe  <+0x281e>
0x19db0008e102  3a22  4183fc00       cmpl r12,0x0
0x19db0008e106  3a26  0f852aefffff   jnz 0x19db0008d036  <+0x2956>
0x19db0008e10c  3a2c  e9ededffff     jmp 0x19db0008cefe  <+0x281e>
0x19db0008e111  3a31  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db0008e11a  3a3a  0f8506f1ffff   jnz 0x19db0008d226  <+0x2b46>
0x19db0008e120  3a40  e9c6efffff     jmp 0x19db0008d0eb  <+0x2a0b>
0x19db0008e125  3a45  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db0008e12c  3a4c  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008e130  3a50  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008e134  3a54  0f85ecf0ffff   jnz 0x19db0008d226  <+0x2b46>
0x19db0008e13a  3a5a  e9acefffff     jmp 0x19db0008d0eb  <+0x2a0b>
0x19db0008e13f  3a5f  4183fc00       cmpl r12,0x0
0x19db0008e143  3a63  0f85ddf0ffff   jnz 0x19db0008d226  <+0x2b46>
0x19db0008e149  3a69  e99defffff     jmp 0x19db0008d0eb  <+0x2a0b>
0x19db0008e14e  3a6e  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db0008e157  3a77  0f85a7f1ffff   jnz 0x19db0008d304  <+0x2c24>
0x19db0008e15d  3a7d  e97bf1ffff     jmp 0x19db0008d2dd  <+0x2bfd>
0x19db0008e162  3a82  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db0008e169  3a89  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008e16d  3a8d  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008e171  3a91  0f858df1ffff   jnz 0x19db0008d304  <+0x2c24>
0x19db0008e177  3a97  e961f1ffff     jmp 0x19db0008d2dd  <+0x2bfd>
0x19db0008e17c  3a9c  4183fc00       cmpl r12,0x0
0x19db0008e180  3aa0  0f857ef1ffff   jnz 0x19db0008d304  <+0x2c24>
0x19db0008e186  3aa6  e952f1ffff     jmp 0x19db0008d2dd  <+0x2bfd>
0x19db0008e18b  3aab  e974f1ffff     jmp 0x19db0008d304  <+0x2c24>
0x19db0008e190  3ab0  498b8d90000000 REX.W movq rcx,[r13+0x90] (root (undefined_value))
0x19db0008e197  3ab7  e9a9f1ffff     jmp 0x19db0008d345  <+0x2c65>
0x19db0008e19c  3abc  48894dd0       REX.W movq [rbp-0x30],rcx
0x19db0008e1a0  3ac0  ba10000000     movl rdx,0x10
0x19db0008e1a5  3ac5  4c8b159bf3ffff REX.W movq r10,[rip+0xfffff39b]
0x19db0008e1ac  3acc  41ffd2         call r10
0x19db0008e1af  3acf  4c8d70ff       REX.W leaq r14,[rax-0x1]
0x19db0008e1b3  3ad3  4c8b2585c5ffff REX.W movq r12,[rip+0xffffc585]
0x19db0008e1ba  3ada  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db0008e1be  3ade  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008e1c4  3ae4  488b4dd0       REX.W movq rcx,[rbp-0x30]
0x19db0008e1c8  3ae8  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008e1ce  3aee  e9daf1ffff     jmp 0x19db0008d3ad  <+0x2ccd>
0x19db0008e1d3  3af3  458bc9         movl r9,r9
0x19db0008e1d6  3af6  4d03cd         REX.W addq r9,r13
0x19db0008e1d9  3af9  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0008e1e0  3b00  4d23d9         REX.W andq r11,r9
0x19db0008e1e3  3b03  41f6430802     testb [r11+0x8],0x2
0x19db0008e1e8  3b08  0f846bf2ffff   jz 0x19db0008d459  <+0x2d79>
0x19db0008e1ee  3b0e  4c8d61ff       REX.W leaq r12,[rcx-0x1]
0x19db0008e1f2  3b12  50             push rax
0x19db0008e1f3  3b13  51             push rcx
0x19db0008e1f4  3b14  52             push rdx
0x19db0008e1f5  3b15  56             push rsi
0x19db0008e1f6  3b16  57             push rdi
0x19db0008e1f7  3b17  4c89e6         REX.W movq rsi,r12
0x19db0008e1fa  3b1a  488bf9         REX.W movq rdi,rcx
0x19db0008e1fd  3b1d  488b151fc7ffff REX.W movq rdx,[rip+0xffffc71f]
0x19db0008e204  3b24  488bca         REX.W movq rcx,rdx
0x19db0008e207  3b27  49bac065b8f5ff7f0000 REX.W movq r10,0x7ffff5b865c0  (RecordWrite)    ;; off heap target
0x19db0008e211  3b31  41ffd2         call r10
0x19db0008e214  3b34  5f             pop rdi
0x19db0008e215  3b35  5e             pop rsi
0x19db0008e216  3b36  5a             pop rdx
0x19db0008e217  3b37  59             pop rcx
0x19db0008e218  3b38  58             pop rax
0x19db0008e219  3b39  e93bf2ffff     jmp 0x19db0008d459  <+0x2d79>
0x19db0008e21e  3b3e  4589e4         movl r12,r12
0x19db0008e221  3b41  4d03e5         REX.W addq r12,r13
0x19db0008e224  3b44  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0008e22b  3b4b  4d21e3         REX.W andq r11,r12
0x19db0008e22e  3b4e  41f6430802     testb [r11+0x8],0x2
0x19db0008e233  3b53  0f84d6f1ffff   jz 0x19db0008d40f  <+0x2d2f>
0x19db0008e239  3b59  4c8d710f       REX.W leaq r14,[rcx+0xf]
0x19db0008e23d  3b5d  50             push rax
0x19db0008e23e  3b5e  51             push rcx
0x19db0008e23f  3b5f  52             push rdx
0x19db0008e240  3b60  56             push rsi
0x19db0008e241  3b61  57             push rdi
0x19db0008e242  3b62  498bf6         REX.W movq rsi,r14
0x19db0008e245  3b65  488bf9         REX.W movq rdi,rcx
0x19db0008e248  3b68  33d2           xorl rdx,rdx
0x19db0008e24a  3b6a  488b0dd2c6ffff REX.W movq rcx,[rip+0xffffc6d2]
0x19db0008e251  3b71  4c8b15b1ffffff REX.W movq r10,[rip+0xffffffb1]
0x19db0008e258  3b78  41ffd2         call r10
0x19db0008e25b  3b7b  5f             pop rdi
0x19db0008e25c  3b7c  5e             pop rsi
0x19db0008e25d  3b7d  5a             pop rdx
0x19db0008e25e  3b7e  59             pop rcx
0x19db0008e25f  3b7f  58             pop rax
0x19db0008e260  3b80  e9aaf1ffff     jmp 0x19db0008d40f  <+0x2d2f>
0x19db0008e265  3b85  f6c101         testb rcx,0x1
0x19db0008e268  3b88  0f8467e2ffff   jz 0x19db0008c4d5  <+0x1df5>
0x19db0008e26e  3b8e  8bc9           movl rcx,rcx
0x19db0008e270  3b90  4903cd         REX.W addq rcx,r13
0x19db0008e273  3b93  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0008e27a  3b9a  4c23c9         REX.W andq r9,rcx
0x19db0008e27d  3b9d  41f6410802     testb [r9+0x8],0x2
0x19db0008e282  3ba2  0f844de2ffff   jz 0x19db0008c4d5  <+0x1df5>
0x19db0008e288  3ba8  4d8d5817       REX.W leaq r11,[r8+0x17]
0x19db0008e28c  3bac  50             push rax
0x19db0008e28d  3bad  51             push rcx
0x19db0008e28e  3bae  52             push rdx
0x19db0008e28f  3baf  56             push rsi
0x19db0008e290  3bb0  57             push rdi
0x19db0008e291  3bb1  498bf3         REX.W movq rsi,r11
0x19db0008e294  3bb4  498bf8         REX.W movq rdi,r8
0x19db0008e297  3bb7  33d2           xorl rdx,rdx
0x19db0008e299  3bb9  488b0d83c6ffff REX.W movq rcx,[rip+0xffffc683]
0x19db0008e2a0  3bc0  4c8b1562ffffff REX.W movq r10,[rip+0xffffff62]
0x19db0008e2a7  3bc7  41ffd2         call r10
0x19db0008e2aa  3bca  5f             pop rdi
0x19db0008e2ab  3bcb  5e             pop rsi
0x19db0008e2ac  3bcc  5a             pop rdx
0x19db0008e2ad  3bcd  59             pop rcx
0x19db0008e2ae  3bce  58             pop rax
0x19db0008e2af  3bcf  e921e2ffff     jmp 0x19db0008c4d5  <+0x1df5>
0x19db0008e2b4  3bd4  f6c101         testb rcx,0x1
0x19db0008e2b7  3bd7  0f84f8daffff   jz 0x19db0008bdb5  <+0x16d5>
0x19db0008e2bd  3bdd  8bc9           movl rcx,rcx
0x19db0008e2bf  3bdf  4903cd         REX.W addq rcx,r13
0x19db0008e2c2  3be2  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0008e2c9  3be9  4c23d9         REX.W andq r11,rcx
0x19db0008e2cc  3bec  41f6430802     testb [r11+0x8],0x2
0x19db0008e2d1  3bf1  0f84dedaffff   jz 0x19db0008bdb5  <+0x16d5>
0x19db0008e2d7  3bf7  4d8d7117       REX.W leaq r14,[r9+0x17]
0x19db0008e2db  3bfb  50             push rax
0x19db0008e2dc  3bfc  51             push rcx
0x19db0008e2dd  3bfd  52             push rdx
0x19db0008e2de  3bfe  56             push rsi
0x19db0008e2df  3bff  57             push rdi
0x19db0008e2e0  3c00  498bf6         REX.W movq rsi,r14
0x19db0008e2e3  3c03  498bf9         REX.W movq rdi,r9
0x19db0008e2e6  3c06  33d2           xorl rdx,rdx
0x19db0008e2e8  3c08  488b0d34c6ffff REX.W movq rcx,[rip+0xffffc634]
0x19db0008e2ef  3c0f  4c8b1513ffffff REX.W movq r10,[rip+0xffffff13]
0x19db0008e2f6  3c16  41ffd2         call r10
0x19db0008e2f9  3c19  5f             pop rdi
0x19db0008e2fa  3c1a  5e             pop rsi
0x19db0008e2fb  3c1b  5a             pop rdx
0x19db0008e2fc  3c1c  59             pop rcx
0x19db0008e2fd  3c1d  58             pop rax
0x19db0008e2fe  3c1e  e9b2daffff     jmp 0x19db0008bdb5  <+0x16d5>
0x19db0008e303  3c23  458bf6         movl r14,r14
0x19db0008e306  3c26  4d03f5         REX.W addq r14,r13
0x19db0008e309  3c29  49c7c70000fcff REX.W movq r15,0xfffc0000
0x19db0008e310  3c30  4d23fe         REX.W andq r15,r14
0x19db0008e313  3c33  41f6470802     testb [r15+0x8],0x2
0x19db0008e318  3c38  0f8418caffff   jz 0x19db0008ad36  <+0x656>
0x19db0008e31e  3c3e  4b8d0421       REX.W leaq rax,[r9+r12*1]
0x19db0008e322  3c42  50             push rax
0x19db0008e323  3c43  51             push rcx
0x19db0008e324  3c44  52             push rdx
0x19db0008e325  3c45  56             push rsi
0x19db0008e326  3c46  57             push rdi
0x19db0008e327  3c47  488bf0         REX.W movq rsi,rax
0x19db0008e32a  3c4a  498bf9         REX.W movq rdi,r9
0x19db0008e32d  3c4d  33d2           xorl rdx,rdx
0x19db0008e32f  3c4f  488b0dedc5ffff REX.W movq rcx,[rip+0xffffc5ed]
0x19db0008e336  3c56  4c8b15ccfeffff REX.W movq r10,[rip+0xfffffecc]
0x19db0008e33d  3c5d  41ffd2         call r10
0x19db0008e340  3c60  5f             pop rdi
0x19db0008e341  3c61  5e             pop rsi
0x19db0008e342  3c62  5a             pop rdx
0x19db0008e343  3c63  59             pop rcx
0x19db0008e344  3c64  58             pop rax
0x19db0008e345  3c65  e9ecc9ffff     jmp 0x19db0008ad36  <+0x656>
0x19db0008e34a  3c6a  8bd2           movl rdx,rdx
0x19db0008e34c  3c6c  4903d5         REX.W addq rdx,r13
0x19db0008e34f  3c6f  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0008e356  3c76  4823da         REX.W andq rbx,rdx
0x19db0008e359  3c79  f6430802       testb [rbx+0x8],0x2
0x19db0008e35d  3c7d  0f84b3c4ffff   jz 0x19db0008a816  <+0x136>
0x19db0008e363  3c83  488d78ff       REX.W leaq rdi,[rax-0x1]
0x19db0008e367  3c87  50             push rax
0x19db0008e368  3c88  51             push rcx
0x19db0008e369  3c89  52             push rdx
0x19db0008e36a  3c8a  56             push rsi
0x19db0008e36b  3c8b  57             push rdi
0x19db0008e36c  3c8c  488bf7         REX.W movq rsi,rdi
0x19db0008e36f  3c8f  488bf8         REX.W movq rdi,rax
0x19db0008e372  3c92  488b15aac5ffff REX.W movq rdx,[rip+0xffffc5aa]
0x19db0008e379  3c99  488bca         REX.W movq rcx,rdx
0x19db0008e37c  3c9c  4c8b1586feffff REX.W movq r10,[rip+0xfffffe86]
0x19db0008e383  3ca3  41ffd2         call r10
0x19db0008e386  3ca6  5f             pop rdi
0x19db0008e387  3ca7  5e             pop rsi
0x19db0008e388  3ca8  5a             pop rdx
0x19db0008e389  3ca9  59             pop rcx
0x19db0008e38a  3caa  58             pop rax
0x19db0008e38b  3cab  e986c4ffff     jmp 0x19db0008a816  <+0x136>
0x19db0008e390  3cb0  90             nop
0x19db0008e391  3cb1  41ff95f8360000 call [r13+0x36f8]
0x19db0008e398  3cb8  41ff95f8360000 call [r13+0x36f8]
0x19db0008e39f  3cbf  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3a6  3cc6  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3ad  3ccd  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3b4  3cd4  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3bb  3cdb  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3c2  3ce2  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3c9  3ce9  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3d0  3cf0  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3d7  3cf7  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3de  3cfe  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3e5  3d05  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3ec  3d0c  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3f3  3d13  41ff95f8360000 call [r13+0x36f8]
0x19db0008e3fa  3d1a  41ff95f8360000 call [r13+0x36f8]
0x19db0008e401  3d21  41ff95f8360000 call [r13+0x36f8]
0x19db0008e408  3d28  41ff95f8360000 call [r13+0x36f8]
0x19db0008e40f  3d2f  41ff95f8360000 call [r13+0x36f8]
0x19db0008e416  3d36  41ff95f8360000 call [r13+0x36f8]
0x19db0008e41d  3d3d  41ff95f8360000 call [r13+0x36f8]
0x19db0008e424  3d44  41ff95f8360000 call [r13+0x36f8]
0x19db0008e42b  3d4b  41ff95f8360000 call [r13+0x36f8]
0x19db0008e432  3d52  41ff95f8360000 call [r13+0x36f8]
0x19db0008e439  3d59  41ff95f8360000 call [r13+0x36f8]
0x19db0008e440  3d60  41ff95f8360000 call [r13+0x36f8]
0x19db0008e447  3d67  41ff95f8360000 call [r13+0x36f8]
0x19db0008e44e  3d6e  41ff95f8360000 call [r13+0x36f8]
0x19db0008e455  3d75  41ff95f8360000 call [r13+0x36f8]
0x19db0008e45c  3d7c  41ff95f8360000 call [r13+0x36f8]
0x19db0008e463  3d83  41ff95f8360000 call [r13+0x36f8]
0x19db0008e46a  3d8a  41ff95f8360000 call [r13+0x36f8]
0x19db0008e471  3d91  41ff95f8360000 call [r13+0x36f8]
0x19db0008e478  3d98  41ff95f8360000 call [r13+0x36f8]
0x19db0008e47f  3d9f  41ff95f8360000 call [r13+0x36f8]
0x19db0008e486  3da6  41ff95f8360000 call [r13+0x36f8]
0x19db0008e48d  3dad  41ff95f8360000 call [r13+0x36f8]
0x19db0008e494  3db4  41ff95f8360000 call [r13+0x36f8]
0x19db0008e49b  3dbb  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4a2  3dc2  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4a9  3dc9  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4b0  3dd0  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4b7  3dd7  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4be  3dde  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4c5  3de5  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4cc  3dec  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4d3  3df3  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4da  3dfa  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4e1  3e01  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4e8  3e08  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4ef  3e0f  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4f6  3e16  41ff95f8360000 call [r13+0x36f8]
0x19db0008e4fd  3e1d  41ff95f8360000 call [r13+0x36f8]
0x19db0008e504  3e24  41ff95f8360000 call [r13+0x36f8]
0x19db0008e50b  3e2b  41ff95f8360000 call [r13+0x36f8]
0x19db0008e512  3e32  41ff95f8360000 call [r13+0x36f8]
0x19db0008e519  3e39  41ff95f8360000 call [r13+0x36f8]
0x19db0008e520  3e40  41ff95f8360000 call [r13+0x36f8]
0x19db0008e527  3e47  41ff95f8360000 call [r13+0x36f8]
0x19db0008e52e  3e4e  41ff95f8360000 call [r13+0x36f8]
0x19db0008e535  3e55  41ff95f8360000 call [r13+0x36f8]
0x19db0008e53c  3e5c  41ff95f8360000 call [r13+0x36f8]
0x19db0008e543  3e63  41ff95f8360000 call [r13+0x36f8]
0x19db0008e54a  3e6a  41ff95f8360000 call [r13+0x36f8]
0x19db0008e551  3e71  41ff95f8360000 call [r13+0x36f8]
0x19db0008e558  3e78  41ff95f8360000 call [r13+0x36f8]
0x19db0008e55f  3e7f  41ff95f8360000 call [r13+0x36f8]
0x19db0008e566  3e86  41ff95f8360000 call [r13+0x36f8]
0x19db0008e56d  3e8d  41ff95f8360000 call [r13+0x36f8]
0x19db0008e574  3e94  41ff95f8360000 call [r13+0x36f8]
0x19db0008e57b  3e9b  41ff95f8360000 call [r13+0x36f8]
0x19db0008e582  3ea2  41ff95f8360000 call [r13+0x36f8]
0x19db0008e589  3ea9  41ff95f8360000 call [r13+0x36f8]
0x19db0008e590  3eb0  41ff95f8360000 call [r13+0x36f8]
0x19db0008e597  3eb7  41ff95f8360000 call [r13+0x36f8]
0x19db0008e59e  3ebe  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5a5  3ec5  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5ac  3ecc  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5b3  3ed3  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5ba  3eda  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5c1  3ee1  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5c8  3ee8  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5cf  3eef  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5d6  3ef6  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5dd  3efd  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5e4  3f04  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5eb  3f0b  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5f2  3f12  41ff95f8360000 call [r13+0x36f8]
0x19db0008e5f9  3f19  41ff95f8360000 call [r13+0x36f8]
0x19db0008e600  3f20  41ff95f8360000 call [r13+0x36f8]
0x19db0008e607  3f27  41ff95f8360000 call [r13+0x36f8]
0x19db0008e60e  3f2e  41ff95f8360000 call [r13+0x36f8]
0x19db0008e615  3f35  41ff95f8360000 call [r13+0x36f8]
0x19db0008e61c  3f3c  41ff95f8360000 call [r13+0x36f8]
0x19db0008e623  3f43  41ff95f8360000 call [r13+0x36f8]
0x19db0008e62a  3f4a  41ff95f8360000 call [r13+0x36f8]
0x19db0008e631  3f51  41ff95f8360000 call [r13+0x36f8]
0x19db0008e638  3f58  41ff95f8360000 call [r13+0x36f8]
0x19db0008e63f  3f5f  41ff95f8360000 call [r13+0x36f8]
0x19db0008e646  3f66  41ff95f8360000 call [r13+0x36f8]
0x19db0008e64d  3f6d  41ff95f8360000 call [r13+0x36f8]
0x19db0008e654  3f74  41ff95f8360000 call [r13+0x36f8]
0x19db0008e65b  3f7b  41ff95f8360000 call [r13+0x36f8]
0x19db0008e662  3f82  41ff95f8360000 call [r13+0x36f8]
0x19db0008e669  3f89  41ff95f8360000 call [r13+0x36f8]
0x19db0008e670  3f90  41ff95f8360000 call [r13+0x36f8]
0x19db0008e677  3f97  41ff95f8360000 call [r13+0x36f8]
0x19db0008e67e  3f9e  41ff95f8360000 call [r13+0x36f8]
0x19db0008e685  3fa5  41ff95f8360000 call [r13+0x36f8]
0x19db0008e68c  3fac  41ff95f8360000 call [r13+0x36f8]
0x19db0008e693  3fb3  41ff95f8360000 call [r13+0x36f8]
0x19db0008e69a  3fba  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6a1  3fc1  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6a8  3fc8  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6af  3fcf  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6b6  3fd6  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6bd  3fdd  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6c4  3fe4  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6cb  3feb  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6d2  3ff2  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6d9  3ff9  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6e0  4000  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6e7  4007  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6ee  400e  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6f5  4015  41ff95f8360000 call [r13+0x36f8]
0x19db0008e6fc  401c  41ff95f8360000 call [r13+0x36f8]
0x19db0008e703  4023  41ff95f8360000 call [r13+0x36f8]
0x19db0008e70a  402a  41ff95f8360000 call [r13+0x36f8]
0x19db0008e711  4031  41ff95f8360000 call [r13+0x36f8]
0x19db0008e718  4038  41ff95f8360000 call [r13+0x36f8]
0x19db0008e71f  403f  41ff95f8360000 call [r13+0x36f8]
0x19db0008e726  4046  41ff95f8360000 call [r13+0x36f8]
0x19db0008e72d  404d  41ff95f8360000 call [r13+0x36f8]
0x19db0008e734  4054  41ff95f8360000 call [r13+0x36f8]
0x19db0008e73b  405b  41ff95f8360000 call [r13+0x36f8]
0x19db0008e742  4062  41ff95f8360000 call [r13+0x36f8]
0x19db0008e749  4069  41ff95f8360000 call [r13+0x36f8]
0x19db0008e750  4070  41ff95f8360000 call [r13+0x36f8]
0x19db0008e757  4077  41ff95f8360000 call [r13+0x36f8]
0x19db0008e75e  407e  41ff95f8360000 call [r13+0x36f8]
0x19db0008e765  4085  41ff95f8360000 call [r13+0x36f8]
0x19db0008e76c  408c  41ff95f8360000 call [r13+0x36f8]
0x19db0008e773  4093  41ff95f8360000 call [r13+0x36f8]
0x19db0008e77a  409a  41ff95f8360000 call [r13+0x36f8]
0x19db0008e781  40a1  41ff95f8360000 call [r13+0x36f8]
0x19db0008e788  40a8  41ff95f8360000 call [r13+0x36f8]
0x19db0008e78f  40af  41ff95f8360000 call [r13+0x36f8]
0x19db0008e796  40b6  41ff95f8360000 call [r13+0x36f8]
0x19db0008e79d  40bd  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7a4  40c4  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7ab  40cb  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7b2  40d2  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7b9  40d9  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7c0  40e0  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7c7  40e7  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7ce  40ee  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7d5  40f5  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7dc  40fc  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7e3  4103  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7ea  410a  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7f1  4111  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7f8  4118  41ff95f8360000 call [r13+0x36f8]
0x19db0008e7ff  411f  41ff95f8360000 call [r13+0x36f8]
0x19db0008e806  4126  41ff95f8360000 call [r13+0x36f8]
0x19db0008e80d  412d  41ff95f8360000 call [r13+0x36f8]
0x19db0008e814  4134  41ff95f8360000 call [r13+0x36f8]
0x19db0008e81b  413b  41ff95f8360000 call [r13+0x36f8]
0x19db0008e822  4142  41ff95f8360000 call [r13+0x36f8]
0x19db0008e829  4149  41ff95f8360000 call [r13+0x36f8]
0x19db0008e830  4150  41ff95f8360000 call [r13+0x36f8]
0x19db0008e837  4157  41ff95f8360000 call [r13+0x36f8]
0x19db0008e83e  415e  41ff95f8360000 call [r13+0x36f8]
0x19db0008e845  4165  41ff95f8360000 call [r13+0x36f8]
0x19db0008e84c  416c  41ff95f8360000 call [r13+0x36f8]
0x19db0008e853  4173  41ff95f8360000 call [r13+0x36f8]
0x19db0008e85a  417a  41ff95f8360000 call [r13+0x36f8]
0x19db0008e861  4181  41ff95f8360000 call [r13+0x36f8]
0x19db0008e868  4188  41ff95f8360000 call [r13+0x36f8]
0x19db0008e86f  418f  41ff95f8360000 call [r13+0x36f8]
0x19db0008e876  4196  41ff95f8360000 call [r13+0x36f8]
0x19db0008e87d  419d  41ff95f8360000 call [r13+0x36f8]
0x19db0008e884  41a4  41ff95f8360000 call [r13+0x36f8]
0x19db0008e88b  41ab  41ff95f8360000 call [r13+0x36f8]
0x19db0008e892  41b2  41ff95f8360000 call [r13+0x36f8]
0x19db0008e899  41b9  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8a0  41c0  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8a7  41c7  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8ae  41ce  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8b5  41d5  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8bc  41dc  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8c3  41e3  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8ca  41ea  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8d1  41f1  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8d8  41f8  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8df  41ff  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8e6  4206  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8ed  420d  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8f4  4214  41ff95f8360000 call [r13+0x36f8]
0x19db0008e8fb  421b  41ff95f8360000 call [r13+0x36f8]
0x19db0008e902  4222  41ff95f8360000 call [r13+0x36f8]
0x19db0008e909  4229  41ff95f8360000 call [r13+0x36f8]
0x19db0008e910  4230  41ff95f8360000 call [r13+0x36f8]
0x19db0008e917  4237  41ff95f8360000 call [r13+0x36f8]
0x19db0008e91e  423e  41ff95f8360000 call [r13+0x36f8]
0x19db0008e925  4245  41ff95f8360000 call [r13+0x36f8]
0x19db0008e92c  424c  41ff95f8360000 call [r13+0x36f8]
0x19db0008e933  4253  41ff95f8360000 call [r13+0x36f8]
0x19db0008e93a  425a  41ff95f8360000 call [r13+0x36f8]
0x19db0008e941  4261  41ff95f8360000 call [r13+0x36f8]
0x19db0008e948  4268  41ff95f8360000 call [r13+0x36f8]
0x19db0008e94f  426f  41ff95f8360000 call [r13+0x36f8]
0x19db0008e956  4276  41ff95f8360000 call [r13+0x36f8]
0x19db0008e95d  427d  41ff95f8360000 call [r13+0x36f8]
0x19db0008e964  4284  41ff95f8360000 call [r13+0x36f8]
0x19db0008e96b  428b  41ff95f8360000 call [r13+0x36f8]
0x19db0008e972  4292  41ff95f8360000 call [r13+0x36f8]
0x19db0008e979  4299  41ff95f8360000 call [r13+0x36f8]
0x19db0008e980  42a0  41ff95f8360000 call [r13+0x36f8]
0x19db0008e987  42a7  41ff95f8360000 call [r13+0x36f8]
0x19db0008e98e  42ae  41ff95f8360000 call [r13+0x36f8]
0x19db0008e995  42b5  41ff95f8360000 call [r13+0x36f8]
0x19db0008e99c  42bc  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9a3  42c3  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9aa  42ca  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9b1  42d1  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9b8  42d8  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9bf  42df  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9c6  42e6  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9cd  42ed  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9d4  42f4  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9db  42fb  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9e2  4302  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9e9  4309  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9f0  4310  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9f7  4317  41ff95f8360000 call [r13+0x36f8]
0x19db0008e9fe  431e  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea05  4325  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea0c  432c  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea13  4333  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea1a  433a  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea21  4341  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea28  4348  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea2f  434f  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea36  4356  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea3d  435d  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea44  4364  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea4b  436b  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea52  4372  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea59  4379  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea60  4380  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea67  4387  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea6e  438e  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea75  4395  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea7c  439c  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea83  43a3  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea8a  43aa  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea91  43b1  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea98  43b8  41ff95f8360000 call [r13+0x36f8]
0x19db0008ea9f  43bf  41ff95f8360000 call [r13+0x36f8]
0x19db0008eaa6  43c6  41ff95f8360000 call [r13+0x36f8]
0x19db0008eaad  43cd  41ff95f8360000 call [r13+0x36f8]
0x19db0008eab4  43d4  41ff95f8360000 call [r13+0x36f8]
0x19db0008eabb  43db  41ff95f8360000 call [r13+0x36f8]
0x19db0008eac2  43e2  41ff95f8360000 call [r13+0x36f8]
0x19db0008eac9  43e9  41ff95f8360000 call [r13+0x36f8]
0x19db0008ead0  43f0  41ff95f8360000 call [r13+0x36f8]
0x19db0008ead7  43f7  41ff95f8360000 call [r13+0x36f8]
0x19db0008eade  43fe  41ff95f8360000 call [r13+0x36f8]
0x19db0008eae5  4405  41ff95f8360000 call [r13+0x36f8]
0x19db0008eaec  440c  41ff95f8360000 call [r13+0x36f8]
0x19db0008eaf3  4413  41ff95f8360000 call [r13+0x36f8]
0x19db0008eafa  441a  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb01  4421  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb08  4428  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb0f  442f  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb16  4436  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb1d  443d  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb24  4444  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb2b  444b  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb32  4452  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb39  4459  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb40  4460  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb47  4467  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb4e  446e  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb55  4475  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb5c  447c  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb63  4483  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb6a  448a  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb71  4491  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb78  4498  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb7f  449f  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb86  44a6  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb8d  44ad  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb94  44b4  41ff95f8360000 call [r13+0x36f8]
0x19db0008eb9b  44bb  41ff95f8360000 call [r13+0x36f8]
0x19db0008eba2  44c2  41ff95f8360000 call [r13+0x36f8]
0x19db0008eba9  44c9  41ff95f8360000 call [r13+0x36f8]
0x19db0008ebb0  44d0  41ff95f8360000 call [r13+0x36f8]
0x19db0008ebb7  44d7  41ff95f8360000 call [r13+0x36f8]
0x19db0008ebbe  44de  41ff95f8360000 call [r13+0x36f8]
0x19db0008ebc5  44e5  41ff95f8360000 call [r13+0x36f8]
0x19db0008ebcc  44ec  41ff95f8360000 call [r13+0x36f8]
0x19db0008ebd3  44f3  41ff95f8360000 call [r13+0x36f8]
0x19db0008ebda  44fa  41ff95f8360000 call [r13+0x36f8]
0x19db0008ebe1  4501  41ff95f8360000 call [r13+0x36f8]
0x19db0008ebe8  4508  41ff95f8360000 call [r13+0x36f8]
0x19db0008ebef  450f  41ff95f8360000 call [r13+0x36f8]
0x19db0008ebf6  4516  41ff95f8360000 call [r13+0x36f8]
0x19db0008ebfd  451d  41ff95f8360000 call [r13+0x36f8]
0x19db0008ec04  4524  41ff95f8360000 call [r13+0x36f8]
0x19db0008ec0b  452b  41ff95f8360000 call [r13+0x36f8]
0x19db0008ec12  4532  41ff95f8360000 call [r13+0x36f8]
0x19db0008ec19  4539  41ff95f8360000 call [r13+0x36f8]
0x19db0008ec20  4540  41ff95f8360000 call [r13+0x36f8]
0x19db0008ec27  4547  41ff95f8360000 call [r13+0x36f8]
0x19db0008ec2e  454e  41ff95f8360000 call [r13+0x36f8]
0x19db0008ec35  4555  41ff95f8360000 call [r13+0x36f8]
0x19db0008ec3c  455c  41ff95f8360000 call [r13+0x36f8]
0x19db0008ec43  4563  41ff95f8360000 call [r13+0x36f8]
0x19db0008ec4a  456a  41ff95f8360000 call [r13+0x36f8]
0x19db0008ec51  4571  41ff9500370000 call [r13+0x3700]
0x19db0008ec58  4578  41ff9500370000 call [r13+0x3700]
0x19db0008ec5f  457f  41ff9500370000 call [r13+0x3700]
0x19db0008ec66  4586  41ff9500370000 call [r13+0x3700]
0x19db0008ec6d  458d  41ff9510370000 call [r13+0x3710]
0x19db0008ec74  4594  41ff9510370000 call [r13+0x3710]
0x19db0008ec7b  459b  41ff9510370000 call [r13+0x3710]
0x19db0008ec82  45a2  41ff9510370000 call [r13+0x3710]
0x19db0008ec89  45a9  41ff9510370000 call [r13+0x3710]
0x19db0008ec90  45b0  41ff9510370000 call [r13+0x3710]
0x19db0008ec97  45b7  41ff9510370000 call [r13+0x3710]
0x19db0008ec9e  45be  41ff9510370000 call [r13+0x3710]
0x19db0008eca5  45c5  41ff9510370000 call [r13+0x3710]
0x19db0008ecac  45cc  41ff9510370000 call [r13+0x3710]
0x19db0008ecb3  45d3  41ff9510370000 call [r13+0x3710]
0x19db0008ecba  45da  41ff9510370000 call [r13+0x3710]
0x19db0008ecc1  45e1  41ff9510370000 call [r13+0x3710]
0x19db0008ecc8  45e8  41ff9510370000 call [r13+0x3710]
0x19db0008eccf  45ef  41ff9510370000 call [r13+0x3710]
0x19db0008ecd6  45f6  41ff9510370000 call [r13+0x3710]
0x19db0008ecdd  45fd  41ff9510370000 call [r13+0x3710]
0x19db0008ece4  4604  41ff9510370000 call [r13+0x3710]
0x19db0008eceb  460b  41ff9510370000 call [r13+0x3710]
0x19db0008ecf2  4612  41ff9510370000 call [r13+0x3710]
0x19db0008ecf9  4619  0f1f00         nop

Source positions:
 pc offset  position
       874      4412
      2eec      3001
      3141      4412
      334c       647
      364a       647

Inlined functions (count = 2)
 0x19db082f3e95 <SharedFunctionInfo VMulti2>
 0x19db082f3d45 <SharedFunctionInfo DrawLine>

Deoptimization Input Data (deopt points = 344)
 index  bytecode-offset    pc
     0               21    NA 
     1               21    NA 
     2               27    NA 
     3               27    NA 
     4               27    NA 
     5               27    NA 
     6               27    NA 
     7               27    NA 
     8               17    NA 
     9               17    NA 
    10               17    NA 
    11               17    NA 
    12               17    NA 
    13               17    NA 
    14               17    NA 
    15               17    NA 
    16               17    NA 
    17               17    NA 
    18               17    NA 
    19               17    NA 
    20               17    NA 
    21               17    NA 
    22               17    NA 
    23               17    NA 
    24               17    NA 
    25               17    NA 
    26               17    NA 
    27               17    NA 
    28               17    NA 
    29               17    NA 
    30               17    NA 
    31               62    NA 
    32               62    NA 
    33               27    NA 
    34               27    NA 
    35               27    NA 
    36               27    NA 
    37               27    NA 
    38               27    NA 
    39               27    NA 
    40               27    NA 
    41               27    NA 
    42               27    NA 
    43               27    NA 
    44               27    NA 
    45               27    NA 
    46               27    NA 
    47               27    NA 
    48               27    NA 
    49               27    NA 
    50               62    NA 
    51              430    NA 
    52              430    NA 
    53              430    NA 
    54              430    NA 
    55              430    NA 
    56              449    NA 
    57              449    NA 
    58              449    NA 
    59              449    NA 
    60              449    NA 
    61              449    NA 
    62              449    NA 
    63              449    NA 
    64              449    NA 
    65              449    NA 
    66               17    NA 
    67              497    NA 
    68              497    NA 
    69              497    NA 
    70              497    NA 
    71              497    NA 
    72              497    NA 
    73              516    NA 
    74              516    NA 
    75              516    NA 
    76              516    NA 
    77              516    NA 
    78              516    NA 
    79              516    NA 
    80              516    NA 
    81              516    NA 
    82              516    NA 
    83             1506    NA 
    84              564    NA 
    85              564    NA 
    86              564    NA 
    87              564    NA 
    88              564    NA 
    89              564    NA 
    90              583    NA 
    91              583    NA 
    92              583    NA 
    93              583    NA 
    94              583    NA 
    95              583    NA 
    96              583    NA 
    97              583    NA 
    98              583    NA 
    99              583    NA 
   100             1506    NA 
   101              631    NA 
   102              631    NA 
   103              631    NA 
   104              631    NA 
   105              631    NA 
   106              631    NA 
   107              648    NA 
   108              648    NA 
   109              648    NA 
   110              648    NA 
   111              648    NA 
   112              648    NA 
   113              648    NA 
   114              648    NA 
   115              648    NA 
   116              648    NA 
   117              648    NA 
   118              648    NA 
   119              648    NA 
   120              648    NA 
   121              648    NA 
   122             1874    NA 
   123              718    NA 
   124              718    NA 
   125              718    NA 
   126              718    NA 
   127              718    NA 
   128              737    NA 
   129              737    NA 
   130              737    NA 
   131              737    NA 
   132              737    NA 
   133              737    NA 
   134              737    NA 
   135              737    NA 
   136              737    NA 
   137              737    NA 
   138                0    NA 
   139                0    NA 
   140                0    NA 
   141                0    NA 
   142                0    NA 
   143                0    NA 
   144                0    NA 
   145                0    NA 
   146                0    NA 
   147                0    NA 
   148                0    NA 
   149                0    NA 
   150                0    NA 
   151                0    NA 
   152                0    NA 
   153                0    NA 
   154                0    NA 
   155                0    NA 
   156              260    NA 
   157              785    NA 
   158              804    NA 
   159              804    NA 
   160              804    NA 
   161              804    NA 
   162              804    NA 
   163              804    NA 
   164             1874    NA 
   165              852    NA 
   166              852    NA 
   167              852    NA 
   168              852    NA 
   169              852    NA 
   170              852    NA 
   171              871    NA 
   172              871    NA 
   173              871    NA 
   174              871    NA 
   175              871    NA 
   176              871    NA 
   177              871    NA 
   178              871    NA 
   179              871    NA 
   180              871    NA 
   181                0    NA 
   182                0    NA 
   183                0    NA 
   184                0    NA 
   185                0    NA 
   186                0    NA 
   187                0    NA 
   188                0    NA 
   189                0    NA 
   190                0    NA 
   191                0    NA 
   192                0    NA 
   193                0    NA 
   194                0    NA 
   195                0    NA 
   196                0    NA 
   197                0    NA 
   198                0    NA 
   199              260    NA 
   200              919    NA 
   201              936    NA 
   202              936    NA 
   203              936    NA 
   204              936    NA 
   205              936    NA 
   206              936    NA 
   207              936    NA 
   208              936    NA 
   209              936    NA 
   210              936    NA 
   211             1861    NA 
   212              936    NA 
   213              936    NA 
   214              936    NA 
   215              936    NA 
   216              936    NA 
   217              936    NA 
   218             1861    NA 
   219             1073    NA 
   220             1073    NA 
   221             1073    NA 
   222             1073    NA 
   223             1073    NA 
   224             1073    NA 
   225             1092    NA 
   226             1092    NA 
   227             1092    NA 
   228             1092    NA 
   229             1092    NA 
   230             1092    NA 
   231             1092    NA 
   232             1092    NA 
   233             1092    NA 
   234             1092    NA 
   235             1506    NA 
   236             1138    NA 
   237             1138    NA 
   238             1138    NA 
   239             1138    NA 
   240             1138    NA 
   241             1138    NA 
   242             1156    NA 
   243             1156    NA 
   244             1156    NA 
   245             1156    NA 
   246             1156    NA 
   247             1156    NA 
   248             1156    NA 
   249             1156    NA 
   250             1156    NA 
   251             1156    NA 
   252             1506    NA 
   253             1203    NA 
   254             1203    NA 
   255             1203    NA 
   256             1203    NA 
   257             1203    NA 
   258             1203    NA 
   259             1220    NA 
   260             1220    NA 
   261             1220    NA 
   262             1220    NA 
   263             1220    NA 
   264             1220    NA 
   265             1220    NA 
   266             1220    NA 
   267             1220    NA 
   268             1220    NA 
   269             1220    NA 
   270             1220    NA 
   271             1220    NA 
   272             1220    NA 
   273             1220    NA 
   274             1506    NA 
   275             1289    NA 
   276             1289    NA 
   277             1289    NA 
   278             1289    NA 
   279             1289    NA 
   280             1289    NA 
   281             1308    NA 
   282             1308    NA 
   283             1308    NA 
   284             1308    NA 
   285             1308    NA 
   286             1308    NA 
   287             1308    NA 
   288             1308    NA 
   289             1308    NA 
   290             1308    NA 
   291             1506    NA 
   292             1355    NA 
   293             1355    NA 
   294             1355    NA 
   295             1355    NA 
   296             1355    NA 
   297             1355    NA 
   298             1374    NA 
   299             1374    NA 
   300             1374    NA 
   301             1374    NA 
   302             1374    NA 
   303             1374    NA 
   304             1374    NA 
   305             1374    NA 
   306             1374    NA 
   307             1374    NA 
   308             1506    NA 
   309             1422    NA 
   310             1422    NA 
   311             1422    NA 
   312             1422    NA 
   313             1422    NA 
   314             1422    NA 
   315             1441    NA 
   316             1441    NA 
   317             1441    NA 
   318             1441    NA 
   319             1441    NA 
   320             1464    NA 
   321              981    NA 
   322             1536    NA 
   323              105    NA 
   324              421   89c 
   325              488   a9e 
   326              555   c99 
   327              622   e86 
   328              709  10e2 
   329              843  181e 
   330             1064  2088 
   331             1129  2275 
   332             1194  2462 
   333             1280  26c6 
   334             1346  28b3 
   335             1413  2aa0 
   336               -1  2e5b 
   337              106  2f1e 
   338              106  3052 
   339               72  3165 
   340              338  33d3 
   341              338  34ce 
   342              338  36d6 
   343              338  37d4 

Safepoints (size = 488)
0x19db0008af7c     89c  458d  000000000000000000000011100000 (sp -> fp)     324
0x19db0008b17e     a9e  4594  000000000000000000000011100000 (sp -> fp)     325
0x19db0008b379     c99  459b  000000000000000000000011100000 (sp -> fp)     326
0x19db0008b566     e86  45a2  000000000000000000000011100000 (sp -> fp)     327
0x19db0008b7c2    10e2  45a9  000000000000000000000011100000 (sp -> fp)     328
0x19db0008befe    181e  45b0  000000000000000000000011100000 (sp -> fp)     329
0x19db0008c768    2088  45b7  000000000000000000000011100000 (sp -> fp)     330
0x19db0008c955    2275  45be  000000000000000000000011100000 (sp -> fp)     331
0x19db0008cb42    2462  45c5  000000000000000000000011100000 (sp -> fp)     332
0x19db0008cda6    26c6  45cc  000000000000000000000011100000 (sp -> fp)     333
0x19db0008cf93    28b3  45d3  000000000000000000000011100000 (sp -> fp)     334
0x19db0008d180    2aa0  45da  000000000000000000000011100000 (sp -> fp)     335
0x19db0008d53b    2e5b  45e1  000000000000000000000001100000 (sp -> fp)     336
0x19db0008d552    2e72    NA  000000000000000000000001100000 (sp -> fp)  <none>
0x19db0008d594    2eb4    NA  000000000000001111000111100000 (sp -> fp)  <none>
0x19db0008d5fe    2f1e  45e8  000000000000001111100111100000 (sp -> fp)     337
0x19db0008d69d    2fbd    NA  000000000000001111100111100000 (sp -> fp)  <none>
0x19db0008d732    3052  45ef  000000000000001111100111100000 (sp -> fp)     338
0x19db0008d7a0    30c0    NA  000000000000000000100111100000 (sp -> fp)  <none>
0x19db0008d7f3    3113    NA  000000000000000000100111100000 (sp -> fp)  <none>
0x19db0008d845    3165  45f6  000000000000000000000111100000 (sp -> fp)     339
0x19db0008d8c3    31e3    NA  000000000000000000000011100000 (sp -> fp)  <none>
0x19db0008d9dc    32fc    NA  000000000000000000000011100000 (sp -> fp)  <none>
0x19db0008dab3    33d3  45fd  000000000000111100101111100000 (sp -> fp)     340
0x19db0008dbae    34ce  4604  000000000000111100101111100000 (sp -> fp)     341
0x19db0008dc70    3590    NA  000000000000000000101111100000 (sp -> fp)  <none>
0x19db0008ddb6    36d6  460b  000000000000011110011111100000 (sp -> fp)     342
0x19db0008deb4    37d4  4612  000000000000011110011111100000 (sp -> fp)     343
0x19db0008df71    3891    NA  000000000000000000011111100000 (sp -> fp)  <none>
0x19db0008e1af    3acf    NA  000000000000000000000011100000 (sp -> fp)  <none>

RelocInfo (size = 365)
0x19db0008a6f8  off heap target
0x19db0008a712  off heap target
0x19db0008a73f  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db0008a750  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db0008a7a3  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008a7de  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008a7ec  compressed embedded object  (0x19db0830dc45 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008a835  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008a83a  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008a8fd  full embedded object  (0x19db082f42e9 <FeedbackCell[many closures]>)
0x19db0008ac3d  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008ad6d  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008ae3c  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008af39  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008af5b  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008af71  off heap target
0x19db0008af93  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008afba  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008b02e  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008b048  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008b143  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008b161  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008b195  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008b1be  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008b33d  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008b35c  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008b36b  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008b390  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008b3b9  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008b530  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008b54f  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008b57d  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008b5a6  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008b60f  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008b655  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008b78c  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008b7ab  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008b7d9  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008b800  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008b868  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008b86e  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008b97b  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008b9cf  compressed embedded object  (0x19db0830dba5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008b9dd  compressed embedded object  (0x19db0830dd5d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008b9ec  compressed embedded object  (0x19db0830de4d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008b9fb  compressed embedded object  (0x19db0830df3d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008ba6a  compressed embedded object  (0x19db0830dd5d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008ba77  compressed embedded object  (0x19db0830de4d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008ba84  compressed embedded object  (0x19db0830df3d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008bb99  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db0008bba3  compressed embedded object  (0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)> compressed)
0x19db0008bc81  compressed embedded object  (0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)> compressed)
0x19db0008bdfc  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008be02  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008be08  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008bec9  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008bee7  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008bf15  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008bf3e  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008c0bd  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008c10a  compressed embedded object  (0x19db0830dba5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008c118  compressed embedded object  (0x19db0830dd5d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008c126  compressed embedded object  (0x19db0830de4d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008c134  compressed embedded object  (0x19db0830df3d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008c149  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008c1aa  compressed embedded object  (0x19db0830dd5d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008c1b8  compressed embedded object  (0x19db0830de4d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008c1c6  compressed embedded object  (0x19db0830df3d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008c2ca  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db0008c2d3  compressed embedded object  (0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)> compressed)
0x19db0008c3ae  compressed embedded object  (0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)> compressed)
0x19db0008c519  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008c51f  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008c529  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008c56f  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008c72f  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008c74e  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008c77f  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008c7a8  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008c91f  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008c93e  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008c96c  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008c995  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008cb0c  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008cb2b  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008cb59  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008cb82  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008cbeb  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008cc31  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008cd70  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008cd8f  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008cdbd  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008cde6  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008cf5d  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008cf7c  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008cfaa  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008cfd3  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d14a  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0008d169  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008d196  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d1bf  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d309  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008d350  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008d3cb  compressed embedded object  (0x19db082f5d71 <FixedArray[12]> compressed)
0x19db0008d42b  compressed embedded object  (0x19db0830dc45 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d519  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db0008d523  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008d530  off heap target
0x19db0008d547  off heap target
0x19db0008d5a3  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d5b6  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008d5da  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db0008d5ec  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008d5ff  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d60b  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008d692  off heap target
0x19db0008d6ad  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d6b9  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008d720  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008d733  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d73f  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008d795  off heap target
0x19db0008d7b0  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d7bc  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008d7c1  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008d7e8  off heap target
0x19db0008d7fb  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d807  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008d80c  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008d833  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008d84a  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d856  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008d85b  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008d8cc  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d8d2  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d9e5  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008d9eb  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008da92  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008dab9  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008db90  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008dbb4  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008dc76  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008dda4  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008dea2  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008e1c0  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008e1ca  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008e209  off heap target

--- End code ---
assign 0 to v-1:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
assign 3 to v-4:0
assign 2 to v-3:0
assign 1 to v-2:0
assign 6 to v-7:0
assign 7 to v-8:0
assign 8 to v-9:0
assign 9 to v-10:0
assign 11 to v-12:0
assign 12 to v-13:0
assign 14 to v-15:0
assign 15 to v-16:0
assign 0 to v-33:0
assign 1 to v-34:0
assign 2 to v-35:0
assign 3 to v-36:0
assign 4 to v-37:0
assign 5 to v-38:0
assign 6 to v-39:0
assign 7 to v-40:0
assign 8 to v-41:0
assign 9 to v-42:0
assign 10 to v-43:0
assign 11 to v-44:0
assign 12 to v-45:0
assign 13 to v-46:0
assign 14 to v-47:0
------------------------
function: DrawLine
add v116->v131
add v129->v131
add v132->v131
add v69->v129
add v116->v127
add v125->v127
add v128->v127
add v70->v125
add v116->v122
add v120->v122
add v123->v122
add v71->v120
add v116->v72
add v113->v72
add v115->v72
add v110->v113
add v99->v98
add v97->v98
add v83->v97
add v95->v29
add v96->v95
add v1->v95
add v93->v1
add v94->v93
add v91->v93
add v18->v13
add v14->v16
add v12->v10
add v9->v10
add v8->v6
add v7->v6
add v2->v1
gap () () 
          [rsi|R|t] = ArchNop
gap (v29(-) = [rsi|R|t];) () 
          [stack:-3|t] = ArchNop
gap (v28(-) = [stack:-3|t];) () 
          [stack:-1|t] = ArchNop
gap (v26(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v27(-) = [stack:-2|t];) () 
          [rdi|R|t] = ArchNop
gap (v25(-) = [rdi|R|t];) () 
          [constant:111] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:130] [immediate:131]
gap () () 
          [constant:136] = ArchNop
gap () () 
          [constant:135] = ArchNop
gap () () 
          v134(R) = ArchStackCheckOffset
gap () () 
          X64Push v134(-)
gap () ([rbx|R|w64] = v135(-); [rax|R|w64] = v111(-); [rsi|R|t] = v136(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:129] #-1 #27 v25(S) v26(S) v27(S) v28(S) v29(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:128]
gap () () 
          ArchJmp [immediate:127]
gap () () 
          [constant:41] = ArchNop
gap () () 
          [constant:124] = ArchNop
gap () () 
          [constant:118] = ArchNop
gap () ([rdx|R|t] = v27(-); [rcx|R|t] = v118(-); [rax|R|w64] = v124(-); [rsi|R|t] = v29(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:126] #-1 #26 v25(S) v26(S) v27(S) v28(S) v29(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v131(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v131 #1 #25 v25(S) v26(-) v27(-) v28(-) v29(S) v131(-) [immediate:125]
gap () () 
          [constant:116] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v131(R) [immediate:123] v116(R) #24 v25(S) v26(-) v27(-) v28(-) v29(S) v131(-) [immediate:124]
gap () () 
          v129(R) = X64MovqDecompressTaggedPointer : MRI v131(R) [immediate:122]
gap () () 
          v132(R) = X64MovqDecompressTaggedSigned : MRI v131(R) [immediate:121]
gap () (v130(R) = v132(-);) 
          v130(1) = X64Sar32 v130(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v130 #0 #23 v25(S) v26(-) v27(-) v28(-) v29(S) v131(-) [immediate:120]
gap () () 
          v69(R) = X64Movsd : MRI v129(R) [immediate:119]
gap () () 
          [constant:119] = ArchNop
gap () ([rdx|R|t] = v28(-); [rcx|R|t] = v118(-); [rax|R|w64] = v119(-); [rsi|R|t] = v29(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:118] #-1 #22 v25(S) v26(S) v27(S) v28(S) v29(S) v69(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v127(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v127 #1 #21 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v127(-) [immediate:117]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v127(R) [immediate:115] v116(R) #20 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v127(-) [immediate:116]
gap () () 
          v125(R) = X64MovqDecompressTaggedPointer : MRI v127(R) [immediate:114]
gap () () 
          v128(R) = X64MovqDecompressTaggedSigned : MRI v127(R) [immediate:113]
gap () (v126(R) = v128(-);) 
          v126(1) = X64Sar32 v126(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v126 #0 #19 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v127(-) [immediate:112]
gap () () 
          v70(R) = X64Movsd : MRI v125(R) [immediate:111]
gap () ([rdx|R|t] = v27(-); [rcx|R|t] = v118(-); [rax|R|w64] = v124(-); [rsi|R|t] = v29(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:110] #-1 #18 v25(S) v26(S) v27(S) v28(S) v29(S) v69(S) v70(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v122(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v122 #1 #17 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v122(-) [immediate:109]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v122(R) [immediate:107] v116(R) #16 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v122(-) [immediate:108]
gap () () 
          v120(R) = X64MovqDecompressTaggedPointer : MRI v122(R) [immediate:106]
gap () () 
          v123(R) = X64MovqDecompressTaggedSigned : MRI v122(R) [immediate:105]
gap () (v121(R) = v123(-);) 
          v121(1) = X64Sar32 v121(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v121 #1 #15 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v122(-) [immediate:104]
gap () () 
          v71(R) = X64Movsd : MRI v120(R) [immediate:103]
gap () ([rdx|R|t] = v28(-); [rcx|R|t] = v118(-); [rax|R|w64] = v119(-); [rsi|R|t] = v29(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:102] #-1 #14 v25(S) v26(S) v27(S) v28(S) v29(S) v69(S) v70(S) v71(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v72(-) = [rax|R|t];) () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v70(R) v69 [immediate:100] [immediate:101]
gap () () 
          [constant:117] = ArchNop
gap () (v101 = v117(-);) 
          ArchJmp [immediate:99]
gap () (v101 = v111(-);) 
          ArchJmp [immediate:98]
gap () () 
          X64Test32 && deoptimize if equal v72 #1 #13 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:97]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v72(R) [immediate:95] v116(R) #12 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:96]
gap () () 
          v113(R) = X64MovqDecompressTaggedPointer : MRI v72(R) [immediate:94]
gap () () 
          v115(R) = X64MovqDecompressTaggedSigned : MRI v72(R) [immediate:93]
gap () (v114(R) = v115(-);) 
          v114(1) = X64Sar32 v114(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v114 #1 #11 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:92]
gap () () 
          v110(R) = X64Movsd : MRI v113(R) [immediate:91]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v110(R) v71 [immediate:89] [immediate:90]
gap () () 
          [constant:112] = ArchNop
gap () (v100 = v112(-);) 
          ArchJmp [immediate:88]
gap () (v100 = v111(-);) 
          ArchJmp [immediate:87]
gap () () 
          [constant:89] = ArchNop
gap () () 
          v109(R) = AVXFloat64Sub v110(R) v71
gap () () 
          v102(R) = AVXFloat64Abs v109
gap () () 
          v107(R) = AVXFloat64Sub v70(R) v69
gap () () 
          v103(R) = AVXFloat64Abs v107
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v103(R) v102 [immediate:85] [immediate:86]
gap () () 
          v105(R) = AVXFloat64Mul v102(R) v89
gap () (v35 = v100(-); v33 = v41(-); v34 = v41(-); v32 = v101(-); v38 = v103(-); v79 = v105(-); v36 = v102(-);) 
          ArchJmp [immediate:84]
gap () () 
          v104(R) = AVXFloat64Mul v103(R) v89
gap () (v35 = v41(-); v33 = v100(-); v34 = v101(-); v32 = v41(-); v38 = v102(-); v79 = v104(-); v36 = v103(-);) 
          ArchJmp [immediate:83]
gap () () 
          [constant:98] = ArchNop
gap () () 
          [constant:99] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v98(R) [immediate:81] v99(R) #10 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:82]
gap () () 
          v97(R) = X64MovqDecompressTaggedPointer : MRI v98(R) [immediate:80]
gap () () 
          v83(R) = X64Movl : MRI v97(R) [immediate:79]
gap () () 
          v95(R) = X64MovqDecompressAnyTagged : MRI v29(R) [immediate:78]
gap () () 
          X64Test32 && deoptimize if equal v95 #1 #9 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:77]
gap () () 
          [constant:96] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v95(R) [immediate:75] v96(R) #8 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:76]
gap () () 
          v1(R) = X64MovqDecompressTaggedPointer : MRI v95(R) [immediate:74]
gap () () 
          v93(R) = X64MovqDecompressAnyTagged : MRI v1(R) [immediate:73]
gap () (v68(R) = v93(-);) 
          v68(1) = X64Sar32 v68(R) #1
gap () () 
          v81(R) = X64Test32 && set if equal v93 #1
gap () () 
          X64Cmp32 && branch if not equal v81 #0 [immediate:71] [immediate:72]
gap () () 
          v94(R) = X64MovqDecompressTaggedPointer : MRI v93(R) [immediate:70]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v94(R) [immediate:68] [immediate:69]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v94(R) [immediate:66] #67 #7 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:67]
gap () () 
          ArchJmp [immediate:65]
gap () () 
          ArchJmp [immediate:64]
gap () () 
          v91(R) = X64Movsd : MRI v93(R) [immediate:63]
gap () (v90 = v91(-);) 
          ArchJmp [immediate:62]
gap () () 
          v92(R) = SSEInt32ToFloat64 v68
gap () (v90 = v92(-);) 
          ArchJmp [immediate:61]
gap () () 
          v87(R) = AVXFloat64Add v90(R) v36
gap () () 
          v84(R) = SSEFloat64Round v87(R)
gap () () 
          v88(R) = AVXFloat64Sub v84(R) v89
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v87(R) v88 [immediate:59] [immediate:60]
gap () () 
          [constant:86] = ArchNop
gap () () 
          v85(R) = AVXFloat64Sub v84(R) v86
gap () (v7 = v85(-);) 
          ArchJmp [immediate:58]
gap () (v7 = v84(-);) 
          ArchJmp [immediate:57]
gap () () 
          v22(R) = SSEFloat64ToInt32 v7
gap () () 
          [constant:82] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v82(R) v83 #6 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:56]
gap () () 
          v80(R) = SSEInt32ToFloat64 v22
gap () () 
          X64Cmp32 && deoptimize if equal v81 #0 #5 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:55]
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v80(R) v7 #4 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:54]
gap () () 
          X64Cmp32 && branch if signed less than v68(R) v22 [immediate:52] [immediate:53]
gap () () 
          ArchJmp [immediate:51]
gap () () 
          v73(R) = AVXFloat64Add v79(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v73(R) v36 [immediate:49] [immediate:50]
gap () (v59 = v73(-); v67 = v71(-); v66 = v69(-);) 
          ArchJmp [immediate:48]
gap () () 
          v78(R) = SSEInt32ToFloat64 v33
gap () () 
          v77(R) = SSEInt32ToFloat64 v32
gap () () 
          v74(R) = AVXFloat64Sub v73(R) v36
gap () () 
          v75(R) = AVXFloat64Add v78(R) v71
gap () () 
          v76(R) = AVXFloat64Add v77(R) v69
gap () (v59 = v74(-); v67 = v75(-); v66 = v76(-);) 
          ArchJmp [immediate:47]
gap () () 
          v46(R) = SSEInt32ToFloat64 v35
gap () () 
          v44(R) = SSEInt32ToFloat64 v34
gap () (v65(R) = v68(-);) 
          v65(1) = X64Add32 && deoptimize if overflow v65(R) #1 #3 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:46]
gap () () 
          v58(R) = AVXFloat64Add v67(R) v46
gap () () 
          v60(R) = AVXFloat64Add v66(R) v44
gap () (v61 = v65(-);) 
          v61(1) = ArchNop v61
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:44] [immediate:45]
gap () () 
          [constant:64] = ArchNop
gap () () 
          [constant:63] = ArchNop
gap () ([rbx|R|w64] = v63(-); [rax|R|w64] = v41(-); [rsi|R|t] = v64(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:43] #-1 #2 v25(S) v26(S) v27(S) v28(S) v29(S) v60(S) v58(S) v32(S) v33(S) v34(S) v35(S) v36(S) v59(S) v38(S) v7(S) v61(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:42]
gap () () 
          ArchJmp [immediate:41]
gap () (v50 = v58(-); v51 = v59(-); v49 = v60(-); v48 = v61(-);) 
          ArchJmp [immediate:40]
gap () () 
          X64Cmp32 && branch if signed less than v48(R) v22 [immediate:38] [immediate:39]
gap () () 
          v53(R) = AVXFloat64Add v51(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v53(R) v36 [immediate:36] [immediate:37]
gap () (v47 = v50(-); v37 = v53(-); v45 = v49(-);) 
          ArchJmp [immediate:35]
gap () () 
          v57(R) = SSEInt32ToFloat64 v33
gap () () 
          v52(R) = AVXFloat64Add v57(R) v50
gap () () 
          v54(R) = AVXFloat64Sub v53(R) v36
gap () () 
          v56(R) = SSEInt32ToFloat64 v32
gap () () 
          v55(R) = AVXFloat64Add v56(R) v49
gap () (v47 = v52(-); v37 = v54(-); v45 = v55(-);) 
          ArchJmp [immediate:34]
gap () (v43(R) = v48(-);) 
          v43(1) = X64Add32 && deoptimize if overflow v43(R) #1 #1 v25(S) v26(-) v27(-) v28(-) v29(S) v49(-) v50(-) v32(-) v33(-) v34(-) v35(-) v36(-) v51(-) v38(-) v7(-) v48(-) v7(-)
gap () () 
          v31(R) = AVXFloat64Add v46(R) v47
gap () () 
          v30(R) = AVXFloat64Add v44(R) v45
gap () (v39 = v43(-);) 
          v39(1) = ArchNop v39
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:32] [immediate:33]
gap () () 
          [constant:42] = ArchNop
gap () () 
          [constant:40] = ArchNop
gap () ([rbx|R|w64] = v40(-); [rax|R|w64] = v41(-); [rsi|R|t] = v42(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:31] #-1 #0 v25(S) v26(S) v27(S) v28(S) v29(S) v30(S) v31(S) v32(S) v33(S) v34(S) v35(S) v36(S) v37(S) v38(S) v7(S) v39(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:30]
gap () () 
          ArchJmp [immediate:29]
gap () (v50 = v31(-); v51 = v37(-); v49 = v30(-); v48 = v39(-);) 
          ArchJmp [immediate:28]
gap () () 
          ArchJmp [immediate:27]
gap () () 
          X64Cmp32 && branch if equal v22 #0 [immediate:25] [immediate:26]
gap () () 
          ArchJmp [immediate:24]
gap () () 
          v23(R) = SSEFloat64ExtractHighWord32 v7
gap () () 
          X64Cmp32 && branch if signed less than v23 #0 [immediate:22] [immediate:23]
gap () () 
          ArchJmp [immediate:21]
gap () (v21(R) = v22(-);) 
          v21(1) = X64Add32 && branch if overflow v21(R) v22(R) [immediate:17] [immediate:18] [immediate:19] [immediate:20]
gap () (v20 = v21(-);) 
          v20(1) = ArchNop v20
gap () (v2 = v20(-);) 
          ArchJmp [immediate:16]
gap () () 
          ArchJmp [immediate:15]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          [constant:17] = ArchNop
gap () () 
          [constant:11] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () () 
          v13(R) = X64Movq : MR v11(R)
gap () () 
          [constant:19] = ArchNop
gap () () 
          v18(R) = X64Lea : MRI v13(R) [immediate:13]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v19(R) v18(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () ([rdx|R|w64] = v17(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:9] #-1 [rdx|R|w64]
gap (v16(-) = [rax|R|tp];) () 
          v14(R) = X64Lea : MRI v16(R) [immediate:8]
gap () (v10 = v14(-);) 
          ArchJmp [immediate:7]
gap () (v10 = v13(-);) 
          ArchJmp [immediate:6]
gap () () 
          v12(R) = X64Lea : MRI v10(R) [immediate:5]
gap () () 
          X64Movq : MR v11(R) v12(R)
gap () () 
          v9(R) = X64Lea : MRI v10(R) [immediate:4]
gap () (v6 = v9(-);) 
          v6(1) = ArchNop v6
gap () () 
          X64MovqCompressTagged : MRI v6(R) [immediate:3] v8(R)
gap () () 
          X64Movsd : MRI v6(R) [immediate:2] v7(R)
gap () (v2 = v6(-);) 
          ArchJmp [immediate:1]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1(R) [immediate:0] v2(R)
gap () () 
          [constant:0] = ArchNop
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
print modrm pairs
1, v2, v1
1, v7, v6
1, v18, v13
1, v91, v93
1, v1, v95
1, v97, v98
1, v129, v131
1, v94, v93
1, v9, v10
1, v99, v98
1, v110, v113
1, v115, v72
1, v113, v72
1, v120, v122
1, v8, v6
1, v12, v10
1, v70, v125
1, v14, v16
1, v96, v95
1, v128, v127
1, v83, v97
1, v69, v129
1, v95, v29
1, v123, v122
1, v125, v127
1, v132, v131
1, v71, v120
1, v93, v1
1, v116, v122
1, v116, v127
1, v116, v72
1, v116, v131
assign rdi to v134:0
assign 7 to v134:0
assign rax to v111:1
assign 0 to v111:1
assign rbx to v135:1
assign 3 to v135:1
assign rsi to v136:1
assign 6 to v136:1
assign rdi to v111:2
assign 7 to v111:2
assign rcx to v118:1
assign 1 to v118:1
assign rax to v124:1
assign 0 to v124:1
assign rdi to v118:2
assign 7 to v118:2
assign r8 to v124:2
assign 8 to v124:2
assign rax to v131:0
assign 0 to v131:0
v116:1 not intersect with v122:0, removed
v116:2 intersect with v122:0, adding
v116:1 not intersect with v127:0, removed
v116:2 intersect with v127:0, adding
v116:1 not intersect with v72:0, removed
v116:2 intersect with v72:0, adding
assign rdi to v116:1
assign 7 to v116:1
assign r8 to v129:0
assign 8 to v129:0
assign r9 to v132:0
assign 9 to v132:0
assign r9 to v130:0
assign 9 to v130:0
assign rax to v119:1
assign 0 to v119:1
assign r8 to v119:2
assign 8 to v119:2
blocking v116 pick register rdi
assign rax to v127:0
assign 0 to v127:0
assign rdi to v116:3
assign 7 to v116:3
assign r8 to v125:0
assign 8 to v125:0
assign r9 to v128:0
assign 9 to v128:0
assign r9 to v126:0
assign 9 to v126:0
blocking v116 pick register rdi
assign rax to v122:0
assign 0 to v122:0
assign rdi to v116:5
assign 7 to v116:5
assign r8 to v120:0
assign 8 to v120:0
assign r9 to v123:0
assign 9 to v123:0
assign r9 to v121:0
assign 9 to v121:0
blocking v116 pick register rdi
assign rax to v72:0
assign 0 to v72:0
assign rdi to v117:1
assign 7 to v117:1
assign rdi to v101:0
assign 7 to v101:0
assign r8 to v116:7
assign 8 to v116:7
assign r8 to v113:0
assign 8 to v113:0
assign r9 to v115:0
assign 9 to v115:0
assign r9 to v114:0
assign 9 to v114:0
assign r8 to v112:1
assign 8 to v112:1
assign r8 to v100:0
assign 8 to v100:0
assign r9 to v41:1
assign 9 to v41:1
assign r9 to v41:3
assign 9 to v41:3
assign rdi to v32:0
assign 7 to v32:0
assign r8 to v33:0
assign 8 to v33:0
assign r11 to v34:0
assign 11 to v34:0
assign r12 to v35:0
assign 12 to v35:0
assign r14 to v98:1
assign 14 to v98:1
assign r15 to v99:1
assign 15 to v99:1
assign r14 to v97:0
assign 14 to v97:0
assign r14 to v83:0
assign 14 to v83:0
assign r15 to v29:1
assign 15 to v29:1
assign rdx to v95:0
assign 2 to v95:0
assign rcx to v96:1
assign 1 to v96:1
assign rdx to v1:0
assign 2 to v1:0
assign rcx to v93:0
assign 1 to v93:0
assign rbx to v68:0
assign 3 to v68:0
assign rsi to v81:0
assign 6 to v81:0
blocking v94 pick register rdx
assign rdx to v94:0
assign 2 to v94:0
v1:0 not intersect with v95:0, removed
v1:0 not intersect with v2:0, removed
v1:1 intersect with v2:0, adding
v1:1 intersect with v93:0, adding
v1:1 not intersect with v2:0, removed
v1:3 intersect with v2:0, adding
assign rdx to v1:3
assign 2 to v1:3
assign rcx to v22:0
assign 1 to v22:0
blocking v82 pick register rdx
assign rdx to v82:1
assign 2 to v82:1
v1:3 not intersect with v2:0, removed
v1:4 intersect with v2:0, adding
assign rbx to v65:0
assign 3 to v65:0
assign rbx to v61:0
assign 3 to v61:0
assign r14 to v63:1
assign 14 to v63:1
assign rsi to v64:1
assign 6 to v64:1
assign r14 to v61:1
assign 14 to v61:1
blocking v22 pick register rcx
assign rbx to v61:3
assign 3 to v61:3
assign r15 to v29:3
assign 15 to v29:3
assign r12 to v35:2
assign 12 to v35:2
assign r11 to v34:2
assign 11 to v34:2
assign r9 to v41:5
assign 9 to v41:5
assign r8 to v33:2
assign 8 to v33:2
assign rdi to v32:2
assign 7 to v32:2
assign rcx to v22:3
assign 1 to v22:3
assign rbx to v48:0
assign 3 to v48:0
assign r14 to v43:0
assign 14 to v43:0
assign r14 to v39:0
assign 14 to v39:0
assign rbx to v40:1
assign 3 to v40:1
assign rsi to v42:1
assign 6 to v42:1
assign r14 to v39:2
assign 14 to v39:2
assign rcx to v22:5
assign 1 to v22:5
assign rdi to v32:4
assign 7 to v32:4
assign r8 to v33:4
assign 8 to v33:4
assign r9 to v41:7
assign 9 to v41:7
assign r11 to v34:4
assign 11 to v34:4
assign r12 to v35:4
assign 12 to v35:4
assign r15 to v29:5
assign 15 to v29:5
assign rdi to v23:0
assign 7 to v23:0
assign rcx to v22:2
assign 1 to v22:2
assign rdi to v21:0
assign 7 to v21:0
assign rdi to v20:0
assign 7 to v20:0
assign rdi to v11:1
assign 7 to v11:1
assign r8 to v13:0
assign 8 to v13:0
assign r9 to v18:0
assign 9 to v18:0
assign r11 to v19:1
assign 11 to v19:1
assign rdx to v17:1
assign 2 to v17:1
blocking v11 pick register rdi
assign rax to v16:0
assign 0 to v16:0
assign r8 to v14:0
assign 8 to v14:0
assign rdi to v11:4
assign 7 to v11:4
assign r8 to v10:0
assign 8 to v10:0
assign rdi to v12:0
assign 7 to v12:0
assign r9 to v11:3
assign 9 to v11:3
assign rdi to v9:0
assign 7 to v9:0
assign rdi to v6:0
assign 7 to v6:0
assign r8 to v8:1
assign 8 to v8:1
assign rdi to v2:0
assign 7 to v2:0
assign r8 to v1:2
assign 8 to v1:2
assign r9 to v3:0
assign 9 to v3:0
assign r11 to v4:0
assign 11 to v4:0
assign rax to v0:1
assign 0 to v0:1
spill count : 26
add v116->v131
add v129->v131
add v132->v131
add v69->v129
add v116->v127
add v125->v127
add v128->v127
add v70->v125
add v116->v122
add v120->v122
add v123->v122
add v71->v120
add v116->v72
add v113->v72
add v115->v72
add v110->v113
add v99->v98
add v97->v98
add v83->v97
add v95->v29
add v96->v95
add v1->v95
add v93->v1
add v94->v93
add v91->v93
add v18->v13
add v14->v16
add v12->v10
add v9->v10
add v8->v6
add v7->v6
add v2->v1
gap () () 
          [rsi|R|t] = ArchNop
gap (v29(-) = [rsi|R|t];) () 
          [stack:-3|t] = ArchNop
gap (v28(-) = [stack:-3|t];) () 
          [stack:-1|t] = ArchNop
gap (v26(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v27(-) = [stack:-2|t];) () 
          [rdi|R|t] = ArchNop
gap (v25(-) = [rdi|R|t];) () 
          [constant:111] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:130] [immediate:131]
gap () () 
          [constant:136] = ArchNop
gap () () 
          [constant:135] = ArchNop
gap () () 
          v134(R) = ArchStackCheckOffset
gap () () 
          X64Push v134(-)
gap () ([rbx|R|w64] = v135(-); [rax|R|w64] = v111(-); [rsi|R|t] = v136(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:129] #-1 #27 v25(S) v26(S) v27(S) v28(S) v29(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:128]
gap () () 
          ArchJmp [immediate:127]
gap () () 
          [constant:41] = ArchNop
gap () () 
          [constant:124] = ArchNop
gap () () 
          [constant:118] = ArchNop
gap () ([rdx|R|t] = v27(-); [rcx|R|t] = v118(-); [rax|R|w64] = v124(-); [rsi|R|t] = v29(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:126] #-1 #26 v25(S) v26(S) v27(S) v28(S) v29(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v131(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v131 #1 #25 v25(S) v26(-) v27(-) v28(-) v29(S) v131(-) [immediate:125]
gap () () 
          [constant:116] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v131(R) [immediate:123] v116(R) #24 v25(S) v26(-) v27(-) v28(-) v29(S) v131(-) [immediate:124]
gap () () 
          v129(R) = X64MovqDecompressTaggedPointer : MRI v131(R) [immediate:122]
gap () () 
          v132(R) = X64MovqDecompressTaggedSigned : MRI v131(R) [immediate:121]
gap () (v130(R) = v132(-);) 
          v130(1) = X64Sar32 v130(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v130 #0 #23 v25(S) v26(-) v27(-) v28(-) v29(S) v131(-) [immediate:120]
gap () () 
          v69(R) = X64Movsd : MRI v129(R) [immediate:119]
gap () () 
          [constant:119] = ArchNop
gap () ([rdx|R|t] = v28(-); [rcx|R|t] = v118(-); [rax|R|w64] = v119(-); [rsi|R|t] = v29(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:118] #-1 #22 v25(S) v26(S) v27(S) v28(S) v29(S) v69(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v127(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v127 #1 #21 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v127(-) [immediate:117]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v127(R) [immediate:115] v116(R) #20 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v127(-) [immediate:116]
gap () () 
          v125(R) = X64MovqDecompressTaggedPointer : MRI v127(R) [immediate:114]
gap () () 
          v128(R) = X64MovqDecompressTaggedSigned : MRI v127(R) [immediate:113]
gap () (v126(R) = v128(-);) 
          v126(1) = X64Sar32 v126(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v126 #0 #19 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v127(-) [immediate:112]
gap () () 
          v70(R) = X64Movsd : MRI v125(R) [immediate:111]
gap () ([rdx|R|t] = v27(-); [rcx|R|t] = v118(-); [rax|R|w64] = v124(-); [rsi|R|t] = v29(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:110] #-1 #18 v25(S) v26(S) v27(S) v28(S) v29(S) v69(S) v70(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v122(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v122 #1 #17 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v122(-) [immediate:109]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v122(R) [immediate:107] v116(R) #16 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v122(-) [immediate:108]
gap () () 
          v120(R) = X64MovqDecompressTaggedPointer : MRI v122(R) [immediate:106]
gap () () 
          v123(R) = X64MovqDecompressTaggedSigned : MRI v122(R) [immediate:105]
gap () (v121(R) = v123(-);) 
          v121(1) = X64Sar32 v121(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v121 #1 #15 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v122(-) [immediate:104]
gap () () 
          v71(R) = X64Movsd : MRI v120(R) [immediate:103]
gap () ([rdx|R|t] = v28(-); [rcx|R|t] = v118(-); [rax|R|w64] = v119(-); [rsi|R|t] = v29(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:102] #-1 #14 v25(S) v26(S) v27(S) v28(S) v29(S) v69(S) v70(S) v71(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v72(-) = [rax|R|t];) () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v70(R) v69 [immediate:100] [immediate:101]
gap () () 
          [constant:117] = ArchNop
gap () (v101 = v117(-);) 
          ArchJmp [immediate:99]
gap () (v101 = v111(-);) 
          ArchJmp [immediate:98]
gap () () 
          X64Test32 && deoptimize if equal v72 #1 #13 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:97]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v72(R) [immediate:95] v116(R) #12 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:96]
gap () () 
          v113(R) = X64MovqDecompressTaggedPointer : MRI v72(R) [immediate:94]
gap () () 
          v115(R) = X64MovqDecompressTaggedSigned : MRI v72(R) [immediate:93]
gap () (v114(R) = v115(-);) 
          v114(1) = X64Sar32 v114(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v114 #1 #11 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:92]
gap () () 
          v110(R) = X64Movsd : MRI v113(R) [immediate:91]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v110(R) v71 [immediate:89] [immediate:90]
gap () () 
          [constant:112] = ArchNop
gap () (v100 = v112(-);) 
          ArchJmp [immediate:88]
gap () (v100 = v111(-);) 
          ArchJmp [immediate:87]
gap () () 
          [constant:89] = ArchNop
gap () () 
          v109(R) = AVXFloat64Sub v110(R) v71
gap () () 
          v102(R) = AVXFloat64Abs v109
gap () () 
          v107(R) = AVXFloat64Sub v70(R) v69
gap () () 
          v103(R) = AVXFloat64Abs v107
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v103(R) v102 [immediate:85] [immediate:86]
gap () () 
          v105(R) = AVXFloat64Mul v102(R) v89
gap () (v35 = v100(-); v33 = v41(-); v34 = v41(-); v32 = v101(-); v38 = v103(-); v79 = v105(-); v36 = v102(-);) 
          ArchJmp [immediate:84]
gap () () 
          v104(R) = AVXFloat64Mul v103(R) v89
gap () (v35 = v41(-); v33 = v100(-); v34 = v101(-); v32 = v41(-); v38 = v102(-); v79 = v104(-); v36 = v103(-);) 
          ArchJmp [immediate:83]
gap () () 
          [constant:98] = ArchNop
gap () () 
          [constant:99] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v98(R) [immediate:81] v99(R) #10 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:82]
gap () () 
          v97(R) = X64MovqDecompressTaggedPointer : MRI v98(R) [immediate:80]
gap () () 
          v83(R) = X64Movl : MRI v97(R) [immediate:79]
gap () () 
          v95(R) = X64MovqDecompressAnyTagged : MRI v29(R) [immediate:78]
gap () () 
          X64Test32 && deoptimize if equal v95 #1 #9 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:77]
gap () () 
          [constant:96] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v95(R) [immediate:75] v96(R) #8 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:76]
gap () () 
          v1(R) = X64MovqDecompressTaggedPointer : MRI v95(R) [immediate:74]
gap () () 
          v93(R) = X64MovqDecompressAnyTagged : MRI v1(R) [immediate:73]
gap () (v68(R) = v93(-);) 
          v68(1) = X64Sar32 v68(R) #1
gap () () 
          v81(R) = X64Test32 && set if equal v93 #1
gap () () 
          X64Cmp32 && branch if not equal v81 #0 [immediate:71] [immediate:72]
gap () () 
          v94(R) = X64MovqDecompressTaggedPointer : MRI v93(R) [immediate:70]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v94(R) [immediate:68] [immediate:69]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v94(R) [immediate:66] #67 #7 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:67]
gap () () 
          ArchJmp [immediate:65]
gap () () 
          ArchJmp [immediate:64]
gap () () 
          v91(R) = X64Movsd : MRI v93(R) [immediate:63]
gap () (v90 = v91(-);) 
          ArchJmp [immediate:62]
gap () () 
          v92(R) = SSEInt32ToFloat64 v68
gap () (v90 = v92(-);) 
          ArchJmp [immediate:61]
gap () () 
          v87(R) = AVXFloat64Add v90(R) v36
gap () () 
          v84(R) = SSEFloat64Round v87(R)
gap () () 
          v88(R) = AVXFloat64Sub v84(R) v89
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v87(R) v88 [immediate:59] [immediate:60]
gap () () 
          [constant:86] = ArchNop
gap () () 
          v85(R) = AVXFloat64Sub v84(R) v86
gap () (v7 = v85(-);) 
          ArchJmp [immediate:58]
gap () (v7 = v84(-);) 
          ArchJmp [immediate:57]
gap () () 
          v22(R) = SSEFloat64ToInt32 v7
gap () () 
          [constant:82] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v82(R) v83 #6 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:56]
gap () () 
          v80(R) = SSEInt32ToFloat64 v22
gap () () 
          X64Cmp32 && deoptimize if equal v81 #0 #5 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:55]
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v80(R) v7 #4 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:54]
gap () () 
          X64Cmp32 && branch if signed less than v68(R) v22 [immediate:52] [immediate:53]
gap () () 
          ArchJmp [immediate:51]
gap () () 
          v73(R) = AVXFloat64Add v79(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v73(R) v36 [immediate:49] [immediate:50]
gap () (v59 = v73(-); v67 = v71(-); v66 = v69(-);) 
          ArchJmp [immediate:48]
gap () () 
          v78(R) = SSEInt32ToFloat64 v33
gap () () 
          v77(R) = SSEInt32ToFloat64 v32
gap () () 
          v74(R) = AVXFloat64Sub v73(R) v36
gap () () 
          v75(R) = AVXFloat64Add v78(R) v71
gap () () 
          v76(R) = AVXFloat64Add v77(R) v69
gap () (v59 = v74(-); v67 = v75(-); v66 = v76(-);) 
          ArchJmp [immediate:47]
gap () () 
          v46(R) = SSEInt32ToFloat64 v35
gap () () 
          v44(R) = SSEInt32ToFloat64 v34
gap () (v65(R) = v68(-);) 
          v65(1) = X64Add32 && deoptimize if overflow v65(R) #1 #3 v25(S) v26(-) v27(-) v28(-) v29(S) v69(-) v70(-) v71(-) v72(-) [immediate:46]
gap () () 
          v58(R) = AVXFloat64Add v67(R) v46
gap () () 
          v60(R) = AVXFloat64Add v66(R) v44
gap () (v61 = v65(-);) 
          v61(1) = ArchNop v61
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:44] [immediate:45]
gap () () 
          [constant:64] = ArchNop
gap () () 
          [constant:63] = ArchNop
gap () ([rbx|R|w64] = v63(-); [rax|R|w64] = v41(-); [rsi|R|t] = v64(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:43] #-1 #2 v25(S) v26(S) v27(S) v28(S) v29(S) v60(S) v58(S) v32(S) v33(S) v34(S) v35(S) v36(S) v59(S) v38(S) v7(S) v61(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:42]
gap () () 
          ArchJmp [immediate:41]
gap () (v50 = v58(-); v51 = v59(-); v49 = v60(-); v48 = v61(-);) 
          ArchJmp [immediate:40]
gap () () 
          X64Cmp32 && branch if signed less than v48(R) v22 [immediate:38] [immediate:39]
gap () () 
          v53(R) = AVXFloat64Add v51(R) v38
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v53(R) v36 [immediate:36] [immediate:37]
gap () (v47 = v50(-); v37 = v53(-); v45 = v49(-);) 
          ArchJmp [immediate:35]
gap () () 
          v57(R) = SSEInt32ToFloat64 v33
gap () () 
          v52(R) = AVXFloat64Add v57(R) v50
gap () () 
          v54(R) = AVXFloat64Sub v53(R) v36
gap () () 
          v56(R) = SSEInt32ToFloat64 v32
gap () () 
          v55(R) = AVXFloat64Add v56(R) v49
gap () (v47 = v52(-); v37 = v54(-); v45 = v55(-);) 
          ArchJmp [immediate:34]
gap () (v43(R) = v48(-);) 
          v43(1) = X64Add32 && deoptimize if overflow v43(R) #1 #1 v25(S) v26(-) v27(-) v28(-) v29(S) v49(-) v50(-) v32(-) v33(-) v34(-) v35(-) v36(-) v51(-) v38(-) v7(-) v48(-) v7(-)
gap () () 
          v31(R) = AVXFloat64Add v46(R) v47
gap () () 
          v30(R) = AVXFloat64Add v44(R) v45
gap () (v39 = v43(-);) 
          v39(1) = ArchNop v39
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:32] [immediate:33]
gap () () 
          [constant:42] = ArchNop
gap () () 
          [constant:40] = ArchNop
gap () ([rbx|R|w64] = v40(-); [rax|R|w64] = v41(-); [rsi|R|t] = v42(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:31] #-1 #0 v25(S) v26(S) v27(S) v28(S) v29(S) v30(S) v31(S) v32(S) v33(S) v34(S) v35(S) v36(S) v37(S) v38(S) v7(S) v39(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:30]
gap () () 
          ArchJmp [immediate:29]
gap () (v50 = v31(-); v51 = v37(-); v49 = v30(-); v48 = v39(-);) 
          ArchJmp [immediate:28]
gap () () 
          ArchJmp [immediate:27]
gap () () 
          X64Cmp32 && branch if equal v22 #0 [immediate:25] [immediate:26]
gap () () 
          ArchJmp [immediate:24]
gap () () 
          v23(R) = SSEFloat64ExtractHighWord32 v7
gap () () 
          X64Cmp32 && branch if signed less than v23 #0 [immediate:22] [immediate:23]
gap () () 
          ArchJmp [immediate:21]
gap () (v21(R) = v22(-);) 
          v21(1) = X64Add32 && branch if overflow v21(R) v22(R) [immediate:17] [immediate:18] [immediate:19] [immediate:20]
gap () (v20 = v21(-);) 
          v20(1) = ArchNop v20
gap () (v2 = v20(-);) 
          ArchJmp [immediate:16]
gap () () 
          ArchJmp [immediate:15]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          [constant:17] = ArchNop
gap () () 
          [constant:11] = ArchNop
gap () () 
          [constant:8] = ArchNop
gap () () 
          v13(R) = X64Movq : MR v11(R)
gap () () 
          [constant:19] = ArchNop
gap () () 
          v18(R) = X64Lea : MRI v13(R) [immediate:13]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v19(R) v18(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () ([rdx|R|w64] = v17(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:9] #-1 [rdx|R|w64]
gap (v16(-) = [rax|R|tp];) () 
          v14(R) = X64Lea : MRI v16(R) [immediate:8]
gap () (v10 = v14(-);) 
          ArchJmp [immediate:7]
gap () (v10 = v13(-);) 
          ArchJmp [immediate:6]
gap () () 
          v12(R) = X64Lea : MRI v10(R) [immediate:5]
gap () () 
          X64Movq : MR v11(R) v12(R)
gap () () 
          v9(R) = X64Lea : MRI v10(R) [immediate:4]
gap () (v6 = v9(-);) 
          v6(1) = ArchNop v6
gap () () 
          X64MovqCompressTagged : MRI v6(R) [immediate:3] v8(R)
gap () () 
          X64Movsd : MRI v6(R) [immediate:2] v7(R)
gap () (v2 = v6(-);) 
          ArchJmp [immediate:1]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1(R) [immediate:0] v2(R)
gap () () 
          [constant:0] = ArchNop
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
print modrm pairs
1, v2, v1
1, v7, v6
1, v18, v13
1, v91, v93
1, v1, v95
1, v97, v98
1, v115, v72
1, v113, v72
1, v116, v72
1, v71, v120
1, v120, v122
1, v8, v6
1, v12, v10
1, v70, v125
1, v14, v16
1, v96, v95
1, v128, v127
1, v132, v131
1, v125, v127
1, v94, v93
1, v129, v131
1, v83, v97
1, v69, v129
1, v95, v29
1, v123, v122
1, v110, v113
1, v116, v122
1, v9, v10
1, v99, v98
1, v116, v127
1, v93, v1
1, v116, v131
v69:0 not intersect with v129:0, removed
assign xmm0 to v69:0
assign 0 to v69:0
v70:0 not intersect with v125:0, removed
assign xmm0 to v70:0
assign 0 to v70:0
blocking v70 pick register xmm0
v71:0 not intersect with v120:0, removed
assign xmm0 to v71:0
assign 0 to v71:0
assign xmm0 to v70:2
assign 0 to v70:2
assign xmm1 to v110:0
assign 1 to v110:0
assign xmm1 to v109:0
assign 1 to v109:0
assign xmm2 to v102:0
assign 2 to v102:0
assign xmm3 to v108:0
assign 3 to v108:0
assign xmm1 to v107:0
assign 1 to v107:0
assign xmm3 to v103:0
assign 3 to v103:0
assign xmm4 to v106:0
assign 4 to v106:0
assign xmm1 to v89:1
assign 1 to v89:1
assign xmm4 to v105:0
assign 4 to v105:0
assign xmm1 to v89:2
assign 1 to v89:2
assign xmm4 to v104:0
assign 4 to v104:0
assign xmm3 to v36:0
assign 3 to v36:0
assign xmm2 to v38:0
assign 2 to v38:0
assign xmm4 to v79:0
assign 4 to v79:0
assign xmm5 to v91:0
assign 5 to v91:0
assign xmm5 to v92:0
assign 5 to v92:0
assign xmm5 to v90:0
assign 5 to v90:0
assign xmm5 to v87:0
assign 5 to v87:0
assign xmm6 to v84:0
assign 6 to v84:0
assign xmm1 to v88:0
assign 1 to v88:0
assign xmm1 to v86:1
assign 1 to v86:1
assign xmm6 to v85:0
assign 6 to v85:0
assign xmm6 to v7:0
assign 6 to v7:0
assign xmm1 to v80:0
assign 1 to v80:0
assign xmm1 to v73:0
assign 1 to v73:0
assign xmm4 to v78:0
assign 4 to v78:0
assign xmm5 to v77:0
assign 5 to v77:0
assign xmm1 to v74:0
assign 1 to v74:0
assign xmm4 to v75:0
assign 4 to v75:0
assign xmm5 to v76:0
assign 5 to v76:0
assign xmm1 to v59:0
assign 1 to v59:0
assign xmm5 to v66:0
assign 5 to v66:0
assign xmm4 to v67:0
assign 4 to v67:0
assign xmm7 to v46:0
assign 7 to v46:0
assign xmm8 to v44:0
assign 8 to v44:0
assign xmm0 to v58:0
assign 0 to v58:0
assign xmm4 to v60:0
assign 4 to v60:0
blocking v7 pick register xmm6
blocking v46 pick register xmm7
blocking v44 pick register xmm8
assign xmm4 to v60:2
assign 4 to v60:2
assign xmm0 to v58:2
assign 0 to v58:2
assign xmm8 to v44:3
assign 8 to v44:3
assign xmm7 to v46:3
assign 7 to v46:3
assign xmm1 to v59:2
assign 1 to v59:2
assign xmm3 to v36:2
assign 3 to v36:2
assign xmm2 to v38:2
assign 2 to v38:2
assign xmm6 to v7:3
assign 6 to v7:3
assign xmm7 to v46:2
assign 7 to v46:2
assign xmm8 to v44:2
assign 8 to v44:2
assign xmm4 to v49:0
assign 4 to v49:0
assign xmm0 to v50:0
assign 0 to v50:0
assign xmm1 to v51:0
assign 1 to v51:0
assign xmm5 to v53:0
assign 5 to v53:0
assign xmm9 to v57:0
assign 9 to v57:0
assign xmm9 to v52:0
assign 9 to v52:0
assign xmm5 to v54:0
assign 5 to v54:0
assign xmm10 to v56:0
assign 10 to v56:0
assign xmm10 to v55:0
assign 10 to v55:0
assign xmm5 to v37:0
assign 5 to v37:0
assign xmm9 to v45:0
assign 9 to v45:0
assign xmm10 to v47:0
assign 10 to v47:0
assign xmm0 to v31:0
assign 0 to v31:0
assign xmm4 to v30:0
assign 4 to v30:0
assign xmm4 to v30:2
assign 4 to v30:2
assign xmm0 to v31:2
assign 0 to v31:2
assign xmm5 to v37:2
assign 5 to v37:2
assign xmm8 to v44:5
assign 8 to v44:5
assign xmm7 to v46:5
assign 7 to v46:5
assign xmm6 to v7:5
assign 6 to v7:5
assign xmm2 to v38:4
assign 2 to v38:4
assign xmm3 to v36:4
assign 3 to v36:4
assign xmm6 to v7:7
assign 6 to v7:7
assign xmm6 to v7:2
assign 6 to v7:2
spill count : 20
--- Raw source ---
(From, To) {
      var x1 = From.V[0];
      var x2 = To.V[0];
      var y1 = From.V[1];
      var y2 = To.V[1];
      var dx = Math.abs(x2 - x1);
      var dy = Math.abs(y2 - y1);
      var x = x1;
      var y = y1;
      var IncX1, IncY1;
      var IncX2, IncY2;  
      var Den;
      var Num;
      var NumAdd;
      var NumPix;

      if (x2 >= x1) {  IncX1 = 1; IncX2 = 1;  }
      else { IncX1 = -1; IncX2 = -1; }
      if (y2 >= y1)  {  IncY1 = 1; IncY2 = 1; }
      else { IncY1 = -1; IncY2 = -1; }
      if (dx >= dy) {
        IncX1 = 0;
        IncY2 = 0;
        Den = dx;
        Num = dx / 2;
        NumAdd = dy;
        NumPix = dx;
      }
      else {
        IncX2 = 0;
        IncY1 = 0;
        Den = dy;
        Num = dy / 2;
        NumAdd = dx;
        NumPix = dy;
      }

      NumPix = Math.round(Q.LastPx + NumPix);

      var i = Q.LastPx;
      for (; i < NumPix; i++) {
        Num += NumAdd;
        if (Num >= Den) {
          Num -= Den;
          x += IncX1;
          y += IncY1;
        }
        x += IncX2;
        y += IncY2;
      }
      Q.LastPx = NumPix;
    }


--- Optimized code ---
optimization_id = 12
source_position = 647
kind = TURBOFAN
name = DrawLine
stack_slots = 22
compiler = turbofan
address = 0x19db0008ef01

Instructions (size = 2132)
0x19db0008ef40     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db0008ef47     7  483bd9         REX.W cmpq rbx,rcx
0x19db0008ef4a     a  7418           jz 0x19db0008ef64  <+0x24>
0x19db0008ef4c     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db0008ef56    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db0008ef60    20  41ffd2         call r10
0x19db0008ef63    23  cc             int3l
0x19db0008ef64    24  8b59d0         movl rbx,[rcx-0x30]
0x19db0008ef67    27  4903dd         REX.W addq rbx,r13
0x19db0008ef6a    2a  f6430701       testb [rbx+0x7],0x1
0x19db0008ef6e    2e  740d           jz 0x19db0008ef7d  <+0x3d>
0x19db0008ef70    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db0008ef7a    3a  41ffe2         jmp r10
0x19db0008ef7d    3d  55             push rbp
0x19db0008ef7e    3e  4889e5         REX.W movq rbp,rsp
0x19db0008ef81    41  56             push rsi
0x19db0008ef82    42  57             push rdi
0x19db0008ef83    43  50             push rax
0x19db0008ef84    44  4881ec88000000 REX.W subq rsp,0x88
0x19db0008ef8b    4b  488975c0       REX.W movq [rbp-0x40],rsi
0x19db0008ef8f    4f  48897dc8       REX.W movq [rbp-0x38],rdi
0x19db0008ef93    53  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008ef97    57  0f8696040000   jna 0x19db0008f433  <+0x4f3>
0x19db0008ef9d    5d  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0008efa7    67  33c0           xorl rax,rax
0x19db0008efa9    69  488b5518       REX.W movq rdx,[rbp+0x18]
0x19db0008efad    6d  488b75c0       REX.W movq rsi,[rbp-0x40]
0x19db0008efb1    71  488bf9         REX.W movq rdi,rcx
0x19db0008efb4    74  4c8bc0         REX.W movq r8,rax
0x19db0008efb7    77  49bac00acdf5ff7f0000 REX.W movq r10,0x7ffff5cd0ac0  (LoadICTrampoline_Megamorphic)    ;; off heap target
0x19db0008efc1    81  41ffd2         call r10
0x19db0008efc4    84  a801           test al,0x1
0x19db0008efc6    86  0f8402070000   jz 0x19db0008f6ce  <+0x78e>
0x19db0008efcc    8c  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008efd1    91  3978ff         cmpl [rax-0x1],rdi
0x19db0008efd4    94  0f85fb060000   jnz 0x19db0008f6d5  <+0x795>
0x19db0008efda    9a  448b4007       movl r8,[rax+0x7]
0x19db0008efde    9e  4d03c5         REX.W addq r8,r13
0x19db0008efe1    a1  448b480b       movl r9,[rax+0xb]
0x19db0008efe5    a5  41d1f9         sarl r9, 1
0x19db0008efe8    a8  4183f900       cmpl r9,0x0
0x19db0008efec    ac  0f86ea060000   jna 0x19db0008f6dc  <+0x79c>
0x19db0008eff2    b2  c4c17b104007   vmovsd xmm0,[r8+0x7]
0x19db0008eff8    b8  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db0008f000    c0  b808000000     movl rax,0x8
0x19db0008f005    c5  488b5520       REX.W movq rdx,[rbp+0x20]
0x19db0008f009    c9  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0008f013    d3  488b75c0       REX.W movq rsi,[rbp-0x40]
0x19db0008f017    d7  4c8bc0         REX.W movq r8,rax
0x19db0008f01a    da  4c8b1598ffffff REX.W movq r10,[rip+0xffffff98]
0x19db0008f021    e1  41ffd2         call r10
0x19db0008f024    e4  a801           test al,0x1
0x19db0008f026    e6  0f84b7060000   jz 0x19db0008f6e3  <+0x7a3>
0x19db0008f02c    ec  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008f031    f1  3978ff         cmpl [rax-0x1],rdi
0x19db0008f034    f4  0f85b0060000   jnz 0x19db0008f6ea  <+0x7aa>
0x19db0008f03a    fa  448b4007       movl r8,[rax+0x7]
0x19db0008f03e    fe  4d03c5         REX.W addq r8,r13
0x19db0008f041   101  448b480b       movl r9,[rax+0xb]
0x19db0008f045   105  41d1f9         sarl r9, 1
0x19db0008f048   108  4183f900       cmpl r9,0x0
0x19db0008f04c   10c  0f869f060000   jna 0x19db0008f6f1  <+0x7b1>
0x19db0008f052   112  c4c17b104007   vmovsd xmm0,[r8+0x7]
0x19db0008f058   118  c5fb118568ffffff vmovsd [rbp-0x98],xmm0
0x19db0008f060   120  488b5518       REX.W movq rdx,[rbp+0x18]
0x19db0008f064   124  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0008f06e   12e  33c0           xorl rax,rax
0x19db0008f070   130  488b75c0       REX.W movq rsi,[rbp-0x40]
0x19db0008f074   134  4c8b153effffff REX.W movq r10,[rip+0xffffff3e]
0x19db0008f07b   13b  41ffd2         call r10
0x19db0008f07e   13e  a801           test al,0x1
0x19db0008f080   140  0f8472060000   jz 0x19db0008f6f8  <+0x7b8>
0x19db0008f086   146  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008f08b   14b  3978ff         cmpl [rax-0x1],rdi
0x19db0008f08e   14e  0f856b060000   jnz 0x19db0008f6ff  <+0x7bf>
0x19db0008f094   154  448b4007       movl r8,[rax+0x7]
0x19db0008f098   158  4d03c5         REX.W addq r8,r13
0x19db0008f09b   15b  448b480b       movl r9,[rax+0xb]
0x19db0008f09f   15f  41d1f9         sarl r9, 1
0x19db0008f0a2   162  4183f901       cmpl r9,0x1
0x19db0008f0a6   166  0f865a060000   jna 0x19db0008f706  <+0x7c6>
0x19db0008f0ac   16c  c4c17b10400f   vmovsd xmm0,[r8+0xf]
0x19db0008f0b2   172  c5fb118560ffffff vmovsd [rbp-0xa0],xmm0
0x19db0008f0ba   17a  488b5520       REX.W movq rdx,[rbp+0x20]
0x19db0008f0be   17e  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0008f0c8   188  b808000000     movl rax,0x8
0x19db0008f0cd   18d  488b75c0       REX.W movq rsi,[rbp-0x40]
0x19db0008f0d1   191  4c8b15e1feffff REX.W movq r10,[rip+0xfffffee1]
0x19db0008f0d8   198  41ffd2         call r10
0x19db0008f0db   19b  c5fb108568ffffff vmovsd xmm0,[rbp-0x98]
0x19db0008f0e3   1a3  c5f92e8570ffffff vucomisd xmm0,[rbp-0x90]
0x19db0008f0eb   1ab  0f830a000000   jnc 0x19db0008f0fb  <+0x1bb>
0x19db0008f0f1   1b1  bfffffffff     movl rdi,0xffffffff
0x19db0008f0f6   1b6  e905000000     jmp 0x19db0008f100  <+0x1c0>
0x19db0008f0fb   1bb  bf01000000     movl rdi,0x1
0x19db0008f100   1c0  a801           test al,0x1
0x19db0008f102   1c2  0f8405060000   jz 0x19db0008f70d  <+0x7cd>
0x19db0008f108   1c8  41b8559f3008   movl r8,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008f10e   1ce  443940ff       cmpl [rax-0x1],r8
0x19db0008f112   1d2  0f85fc050000   jnz 0x19db0008f714  <+0x7d4>
0x19db0008f118   1d8  448b4007       movl r8,[rax+0x7]
0x19db0008f11c   1dc  4d03c5         REX.W addq r8,r13
0x19db0008f11f   1df  448b480b       movl r9,[rax+0xb]
0x19db0008f123   1e3  41d1f9         sarl r9, 1
0x19db0008f126   1e6  4183f901       cmpl r9,0x1
0x19db0008f12a   1ea  0f86eb050000   jna 0x19db0008f71b  <+0x7db>
0x19db0008f130   1f0  c4c17b10480f   vmovsd xmm1,[r8+0xf]
0x19db0008f136   1f6  c5f92e8d60ffffff vucomisd xmm1,[rbp-0xa0]
0x19db0008f13e   1fe  0f830b000000   jnc 0x19db0008f14f  <+0x20f>
0x19db0008f144   204  41b8ffffffff   movl r8,0xffffffff
0x19db0008f14a   20a  e906000000     jmp 0x19db0008f155  <+0x215>
0x19db0008f14f   20f  41b801000000   movl r8,0x1
0x19db0008f155   215  c5f35c8d60ffffff vsubsd xmm1,xmm1,[rbp-0xa0]
0x19db0008f15d   21d  c5e176db       vpcmpeqd xmm3,xmm3,xmm3
0x19db0008f161   221  c5e173d301     vpsrlq xmm3,xmm3,1
0x19db0008f166   226  c5e154d1       vandpd xmm2,xmm3,xmm1
0x19db0008f16a   22a  c5fb5c8d70ffffff vsubsd xmm1,xmm0,[rbp-0x90]
0x19db0008f172   232  c5d976e4       vpcmpeqd xmm4,xmm4,xmm4
0x19db0008f176   236  c5d973d401     vpsrlq xmm4,xmm4,1
0x19db0008f17b   23b  c5d954d9       vandpd xmm3,xmm4,xmm1
0x19db0008f17f   23f  c5f92eda       vucomisd xmm3,xmm2
0x19db0008f183   243  0f832d000000   jnc 0x19db0008f1b6  <+0x276>
0x19db0008f189   249  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008f18d   24d  c5f173f137     vpsllq xmm1,xmm1,55
0x19db0008f192   252  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0008f197   257  c5eb59e1       vmulsd xmm4,xmm2,xmm1
0x19db0008f19b   25b  c57928fb       vmovapd xmm15,xmm3
0x19db0008f19f   25f  c5f928da       vmovapd xmm3,xmm2
0x19db0008f1a3   263  c4c17928d7     vmovapd xmm2,xmm15
0x19db0008f1a8   268  4d8be0         REX.W movq r12,r8
0x19db0008f1ab   26b  4533c0         xorl r8,r8
0x19db0008f1ae   26e  4d8bd8         REX.W movq r11,r8
0x19db0008f1b1   271  e91a000000     jmp 0x19db0008f1d0  <+0x290>
0x19db0008f1b6   276  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008f1ba   27a  c5f173f137     vpsllq xmm1,xmm1,55
0x19db0008f1bf   27f  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0008f1c4   284  c5e359e1       vmulsd xmm4,xmm3,xmm1
0x19db0008f1c8   288  4c8bdf         REX.W movq r11,rdi
0x19db0008f1cb   28b  33ff           xorl rdi,rdi
0x19db0008f1cd   28d  4c8be7         REX.W movq r12,rdi
0x19db0008f1d0   290  41bf39692e08   movl r15,0x82e6939      ;; (compressed) object: 0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)>
0x19db0008f1d6   296  49be09652e08db190000 REX.W movq r14,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db0008f1e0   2a0  45397e0b       cmpl [r14+0xb],r15
0x19db0008f1e4   2a4  0f8538050000   jnz 0x19db0008f722  <+0x7e2>
0x19db0008f1ea   2aa  458b7603       movl r14,[r14+0x3]
0x19db0008f1ee   2ae  4d03f5         REX.W addq r14,r13
0x19db0008f1f1   2b1  458b7663       movl r14,[r14+0x63]
0x19db0008f1f5   2b5  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db0008f1ff   2bf  4d3bd6         REX.W cmpq r10,r14
0x19db0008f202   2c2  7715           ja 0x19db0008f219  <+0x2d9>
0x19db0008f204   2c4  48ba0200000000000000 REX.W movq rdx,0x2
0x19db0008f20e   2ce  4c8b1543fdffff REX.W movq r10,[rip+0xfffffd43]
0x19db0008f215   2d5  41ffd2         call r10
0x19db0008f218   2d8  cc             int3l
0x19db0008f219   2d9  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db0008f21d   2dd  418b570f       movl rdx,[r15+0xf]
0x19db0008f221   2e1  4903d5         REX.W addq rdx,r13
0x19db0008f224   2e4  f6c201         testb rdx,0x1
0x19db0008f227   2e7  0f84fc040000   jz 0x19db0008f729  <+0x7e9>
0x19db0008f22d   2ed  b96ddc3008     movl rcx,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008f232   2f2  394aff         cmpl [rdx-0x1],rcx
0x19db0008f235   2f5  0f85f5040000   jnz 0x19db0008f730  <+0x7f0>
0x19db0008f23b   2fb  8b5203         movl rdx,[rdx+0x3]
0x19db0008f23e   2fe  4903d5         REX.W addq rdx,r13
0x19db0008f241   301  8b4a17         movl rcx,[rdx+0x17]
0x19db0008f244   304  4903cd         REX.W addq rcx,r13
0x19db0008f247   307  488bd9         REX.W movq rbx,rcx
0x19db0008f24a   30a  d1fb           sarl rbx, 1
0x19db0008f24c   30c  f6c101         testb rcx,0x1
0x19db0008f24f   30f  400f94c6       setzl sil
0x19db0008f253   313  400fb6f6       movzxbl rsi,rsi
0x19db0008f257   317  4533c9         xorl r9,r9
0x19db0008f25a   31a  488955e0       REX.W movq [rbp-0x20],rdx
0x19db0008f25e   31e  83fe00         cmpl rsi,0x0
0x19db0008f261   321  0f852c000000   jnz 0x19db0008f293  <+0x353>
0x19db0008f267   327  8b51ff         movl rdx,[rcx-0x1]
0x19db0008f26a   32a  4903d5         REX.W addq rdx,r13
0x19db0008f26d   32d  41399530010000 cmpl [r13+0x130] (root (heap_number_map)),rdx
0x19db0008f274   334  0f840b000000   jz 0x19db0008f285  <+0x345>
0x19db0008f27a   33a  66837a0743     cmpw [rdx+0x7],0x43
0x19db0008f27f   33f  0f85b2040000   jnz 0x19db0008f737  <+0x7f7>
0x19db0008f285   345  c5fb106903     vmovsd xmm5,[rcx+0x3]
0x19db0008f28a   34a  488b55e0       REX.W movq rdx,[rbp-0x20]
0x19db0008f28e   34e  e904000000     jmp 0x19db0008f297  <+0x357>
0x19db0008f293   353  c5832aeb       vcvtlsi2sd xmm5,xmm15,rbx
0x19db0008f297   357  c5d358eb       vaddsd xmm5,xmm5,xmm3
0x19db0008f29b   35b  c4e3490bf50a   vroundsd xmm6,xmm6,xmm5,0xa
0x19db0008f2a1   361  c5cb5cc9       vsubsd xmm1,xmm6,xmm1
0x19db0008f2a5   365  c5f92ee9       vucomisd xmm5,xmm1
0x19db0008f2a9   369  0f8312000000   jnc 0x19db0008f2c1  <+0x381>
0x19db0008f2af   36f  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0008f2b3   373  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0008f2b8   378  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0008f2bd   37d  c5cb5cf1       vsubsd xmm6,xmm6,xmm1
0x19db0008f2c1   381  c5fb2cce       vcvttsd2si rcx,xmm6
0x19db0008f2c5   385  ba59682e08     movl rdx,0x82e6859      ;; (compressed) object: 0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)>
0x19db0008f2ca   38a  413bd6         cmpl rdx,r14
0x19db0008f2cd   38d  0f856b040000   jnz 0x19db0008f73e  <+0x7fe>
0x19db0008f2d3   393  c5832ac9       vcvtlsi2sd xmm1,xmm15,rcx
0x19db0008f2d7   397  83fe00         cmpl rsi,0x0
0x19db0008f2da   39a  0f8465040000   jz 0x19db0008f745  <+0x805>
0x19db0008f2e0   3a0  c5f92ece       vucomisd xmm1,xmm6
0x19db0008f2e4   3a4  0f8a62040000   jpe 0x19db0008f74c  <+0x80c>
0x19db0008f2ea   3aa  0f855c040000   jnz 0x19db0008f74c  <+0x80c>
0x19db0008f2f0   3b0  3bd9           cmpl rbx,rcx
0x19db0008f2f2   3b2  0f8de8000000   jge 0x19db0008f3e0  <+0x4a0>
0x19db0008f2f8   3b8  c5db58ca       vaddsd xmm1,xmm4,xmm2
0x19db0008f2fc   3bc  c5f92ecb       vucomisd xmm1,xmm3
0x19db0008f300   3c0  0f8315000000   jnc 0x19db0008f31b  <+0x3db>
0x19db0008f306   3c6  c5fb10ad70ffffff vmovsd xmm5,[rbp-0x90]
0x19db0008f30e   3ce  c5fb10a560ffffff vmovsd xmm4,[rbp-0xa0]
0x19db0008f316   3d6  e91d000000     jmp 0x19db0008f338  <+0x3f8>
0x19db0008f31b   3db  c4c1032ae0     vcvtlsi2sd xmm4,xmm15,r8
0x19db0008f320   3e0  c5832aef       vcvtlsi2sd xmm5,xmm15,rdi
0x19db0008f324   3e4  c5f35ccb       vsubsd xmm1,xmm1,xmm3
0x19db0008f328   3e8  c5db58a560ffffff vaddsd xmm4,xmm4,[rbp-0xa0]
0x19db0008f330   3f0  c5d358ad70ffffff vaddsd xmm5,xmm5,[rbp-0x90]
0x19db0008f338   3f8  c4c1032afc     vcvtlsi2sd xmm7,xmm15,r12
0x19db0008f33d   3fd  c441032ac3     vcvtlsi2sd xmm8,xmm15,r11
0x19db0008f342   402  83c301         addl rbx,0x1
0x19db0008f345   405  0f8008040000   jo 0x19db0008f753  <+0x813>
0x19db0008f34b   40b  c5db58c7       vaddsd xmm0,xmm4,xmm7
0x19db0008f34f   40f  c4c15358e0     vaddsd xmm4,xmm5,xmm8
0x19db0008f354   414  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008f358   418  0f8719000000   ja 0x19db0008f377  <+0x437>
0x19db0008f35e   41e  e909010000     jmp 0x19db0008f46c  <+0x52c>
0x19db0008f363   423  660f1f840000000000 nop
0x19db0008f36c   42c  0f1f4000       nop
0x19db0008f370   430  498bde         REX.W movq rbx,r14
0x19db0008f373   433  c5f928cd       vmovapd xmm1,xmm5
0x19db0008f377   437  3bd9           cmpl rbx,rcx
0x19db0008f379   439  0f8d61000000   jge 0x19db0008f3e0  <+0x4a0>
0x19db0008f37f   43f  c5f358ea       vaddsd xmm5,xmm1,xmm2
0x19db0008f383   443  c5f92eeb       vucomisd xmm5,xmm3
0x19db0008f387   447  0f830d000000   jnc 0x19db0008f39a  <+0x45a>
0x19db0008f38d   44d  c57928d0       vmovapd xmm10,xmm0
0x19db0008f391   451  c57928cc       vmovapd xmm9,xmm4
0x19db0008f395   455  e924000000     jmp 0x19db0008f3be  <+0x47e>
0x19db0008f39a   45a  c441032ac8     vcvtlsi2sd xmm9,xmm15,r8
0x19db0008f39f   45f  c53358c8       vaddsd xmm9,xmm9,xmm0
0x19db0008f3a3   463  c5d35ceb       vsubsd xmm5,xmm5,xmm3
0x19db0008f3a7   467  c5032ad7       vcvtlsi2sd xmm10,xmm15,rdi
0x19db0008f3ab   46b  c52b58d4       vaddsd xmm10,xmm10,xmm4
0x19db0008f3af   46f  c4417928fa     vmovapd xmm15,xmm10
0x19db0008f3b4   474  c4417928d1     vmovapd xmm10,xmm9
0x19db0008f3b9   479  c4417928cf     vmovapd xmm9,xmm15
0x19db0008f3be   47e  4c8bf3         REX.W movq r14,rbx
0x19db0008f3c1   481  4183c601       addl r14,0x1
0x19db0008f3c5   485  0f808f030000   jo 0x19db0008f75a  <+0x81a>
0x19db0008f3cb   48b  c4c14358c2     vaddsd xmm0,xmm7,xmm10
0x19db0008f3d0   490  c4c13b58e1     vaddsd xmm4,xmm8,xmm9
0x19db0008f3d5   495  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008f3d9   499  7795           ja 0x19db0008f370  <+0x430>
0x19db0008f3db   49b  e954010000     jmp 0x19db0008f534  <+0x5f4>
0x19db0008f3e0   4a0  83f900         cmpl rcx,0x0
0x19db0008f3e3   4a3  0f840d020000   jz 0x19db0008f5f6  <+0x6b6>
0x19db0008f3e9   4a9  488bf9         REX.W movq rdi,rcx
0x19db0008f3ec   4ac  03f9           addl rdi,rcx
0x19db0008f3ee   4ae  0f801b020000   jo 0x19db0008f60f  <+0x6cf>
0x19db0008f3f4   4b4  4c8b45e0       REX.W movq r8,[rbp-0x20]
0x19db0008f3f8   4b8  41897817       movl [r8+0x17],rdi
0x19db0008f3fc   4bc  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0008f403   4c3  4d23c8         REX.W andq r9,r8
0x19db0008f406   4c6  41f6410804     testb [r9+0x8],0x4
0x19db0008f40b   4cb  0f8569020000   jnz 0x19db0008f67a  <+0x73a>
0x19db0008f411   4d1  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db0008f418   4d8  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db0008f41c   4dc  488be5         REX.W movq rsp,rbp
0x19db0008f41f   4df  5d             pop rbp
0x19db0008f420   4e0  4883f902       REX.W cmpq rcx,0x2
0x19db0008f424   4e4  7f03           jg 0x19db0008f429  <+0x4e9>
0x19db0008f426   4e6  c21800         ret 0x18
0x19db0008f429   4e9  415a           pop r10
0x19db0008f42b   4eb  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db0008f430   4f0  4152           push r10
0x19db0008f432   4f2  c3             retl
0x19db0008f433   4f3  48bf9000000000000000 REX.W movq rdi,0x90
0x19db0008f43d   4fd  57             push rdi
0x19db0008f43e   4fe  b801000000     movl rax,0x1
0x19db0008f443   503  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db0008f44d   50d  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008f457   517  488bf8         REX.W movq rdi,rax
0x19db0008f45a   51a  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db0008f464   524  41ffd2         call r10
0x19db0008f467   527  e931fbffff     jmp 0x19db0008ef9d  <+0x5d>
0x19db0008f46c   52c  c5fb1175d8     vmovsd [rbp-0x28],xmm6
0x19db0008f471   531  48894dd0       REX.W movq [rbp-0x30],rcx
0x19db0008f475   535  48897db8       REX.W movq [rbp-0x48],rdi
0x19db0008f479   539  4c8945b0       REX.W movq [rbp-0x50],r8
0x19db0008f47d   53d  4c895da8       REX.W movq [rbp-0x58],r11
0x19db0008f481   541  4c8965a0       REX.W movq [rbp-0x60],r12
0x19db0008f485   545  c5fb115d98     vmovsd [rbp-0x68],xmm3
0x19db0008f48a   54a  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db0008f48f   54f  c57b114580     vmovsd [rbp-0x80],xmm8
0x19db0008f494   554  c5fb11bd78ffffff vmovsd [rbp-0x88],xmm7
0x19db0008f49c   55c  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db0008f4a4   564  c5fb114d90     vmovsd [rbp-0x70],xmm1
0x19db0008f4a9   569  c5fb11a568ffffff vmovsd [rbp-0x98],xmm4
0x19db0008f4b1   571  48899d60ffffff REX.W movq [rbp-0xa0],rbx
0x19db0008f4b8   578  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008f4c2   582  4c8bf3         REX.W movq r14,rbx
0x19db0008f4c5   585  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db0008f4cf   58f  498bc1         REX.W movq rax,r9
0x19db0008f4d2   592  4c8b1583ffffff REX.W movq r10,[rip+0xffffff83]
0x19db0008f4d9   599  41ffd2         call r10
0x19db0008f4dc   59c  c5fb1075d8     vmovsd xmm6,[rbp-0x28]
0x19db0008f4e1   5a1  488b4dd0       REX.W movq rcx,[rbp-0x30]
0x19db0008f4e5   5a5  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db0008f4e9   5a9  488b7db8       REX.W movq rdi,[rbp-0x48]
0x19db0008f4ed   5ad  4c8b45b0       REX.W movq r8,[rbp-0x50]
0x19db0008f4f1   5b1  4c8b5da8       REX.W movq r11,[rbp-0x58]
0x19db0008f4f5   5b5  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db0008f4f9   5b9  c5fb105d98     vmovsd xmm3,[rbp-0x68]
0x19db0008f4fe   5be  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db0008f503   5c3  4533c9         xorl r9,r9
0x19db0008f506   5c6  c57b104580     vmovsd xmm8,[rbp-0x80]
0x19db0008f50b   5cb  c5fb10bd78ffffff vmovsd xmm7,[rbp-0x88]
0x19db0008f513   5d3  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db0008f51b   5db  c5fb104d90     vmovsd xmm1,[rbp-0x70]
0x19db0008f520   5e0  c5fb10a568ffffff vmovsd xmm4,[rbp-0x98]
0x19db0008f528   5e8  488b9d60ffffff REX.W movq rbx,[rbp-0xa0]
0x19db0008f52f   5ef  e943feffff     jmp 0x19db0008f377  <+0x437>
0x19db0008f534   5f4  c5fb1175d8     vmovsd [rbp-0x28],xmm6
0x19db0008f539   5f9  48894dd0       REX.W movq [rbp-0x30],rcx
0x19db0008f53d   5fd  c5fb11a568ffffff vmovsd [rbp-0x98],xmm4
0x19db0008f545   605  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db0008f54d   60d  48897db8       REX.W movq [rbp-0x48],rdi
0x19db0008f551   611  4c8945b0       REX.W movq [rbp-0x50],r8
0x19db0008f555   615  4c895da8       REX.W movq [rbp-0x58],r11
0x19db0008f559   619  4c8965a0       REX.W movq [rbp-0x60],r12
0x19db0008f55d   61d  c5fb115d98     vmovsd [rbp-0x68],xmm3
0x19db0008f562   622  c5fb116d90     vmovsd [rbp-0x70],xmm5
0x19db0008f567   627  c5fb115588     vmovsd [rbp-0x78],xmm2
0x19db0008f56c   62c  4c89b560ffffff REX.W movq [rbp-0xa0],r14
0x19db0008f573   633  c57b114580     vmovsd [rbp-0x80],xmm8
0x19db0008f578   638  c5fb11bd78ffffff vmovsd [rbp-0x88],xmm7
0x19db0008f580   640  488b1d40ffffff REX.W movq rbx,[rip+0xffffff40]
0x19db0008f587   647  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0008f591   651  498bc1         REX.W movq rax,r9
0x19db0008f594   654  4c8b15c1feffff REX.W movq r10,[rip+0xfffffec1]
0x19db0008f59b   65b  41ffd2         call r10
0x19db0008f59e   65e  c5fb1075d8     vmovsd xmm6,[rbp-0x28]
0x19db0008f5a3   663  488b4dd0       REX.W movq rcx,[rbp-0x30]
0x19db0008f5a7   667  4c8b7dc0       REX.W movq r15,[rbp-0x40]
0x19db0008f5ab   66b  c5fb10a568ffffff vmovsd xmm4,[rbp-0x98]
0x19db0008f5b3   673  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db0008f5bb   67b  488b7db8       REX.W movq rdi,[rbp-0x48]
0x19db0008f5bf   67f  4c8b45b0       REX.W movq r8,[rbp-0x50]
0x19db0008f5c3   683  4c8b5da8       REX.W movq r11,[rbp-0x58]
0x19db0008f5c7   687  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db0008f5cb   68b  c5fb105d98     vmovsd xmm3,[rbp-0x68]
0x19db0008f5d0   690  c5fb106d90     vmovsd xmm5,[rbp-0x70]
0x19db0008f5d5   695  c5fb105588     vmovsd xmm2,[rbp-0x78]
0x19db0008f5da   69a  4c8bb560ffffff REX.W movq r14,[rbp-0xa0]
0x19db0008f5e1   6a1  4533c9         xorl r9,r9
0x19db0008f5e4   6a4  c57b104580     vmovsd xmm8,[rbp-0x80]
0x19db0008f5e9   6a9  c5fb10bd78ffffff vmovsd xmm7,[rbp-0x88]
0x19db0008f5f1   6b1  e97afdffff     jmp 0x19db0008f370  <+0x430>
0x19db0008f5f6   6b6  c4e37916f701   vpextrd rdi,xmm6,0x1,
0x19db0008f5fc   6bc  c5fb1175d8     vmovsd [rbp-0x28],xmm6
0x19db0008f601   6c1  83ff00         cmpl rdi,0x0
0x19db0008f604   6c4  0f8c0a000000   jl 0x19db0008f614  <+0x6d4>
0x19db0008f60a   6ca  e9dafdffff     jmp 0x19db0008f3e9  <+0x4a9>
0x19db0008f60f   6cf  c5fb1175d8     vmovsd [rbp-0x28],xmm6
0x19db0008f614   6d4  48bff87d6d5555550000 REX.W movq rdi,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db0008f61e   6de  4c8b07         REX.W movq r8,[rdi]
0x19db0008f621   6e1  4d8d480c       REX.W leaq r9,[r8+0xc]
0x19db0008f625   6e5  49bb007e6d5555550000 REX.W movq r11,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db0008f62f   6ef  4d390b         REX.W cmpq [r11],r9
0x19db0008f632   6f2  0f8716000000   ja 0x19db0008f64e  <+0x70e>
0x19db0008f638   6f8  ba0c000000     movl rdx,0xc
0x19db0008f63d   6fd  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db0008f647   707  41ffd2         call r10
0x19db0008f64a   70a  4c8d40ff       REX.W leaq r8,[rax-0x1]
0x19db0008f64e   70e  498d780c       REX.W leaq rdi,[r8+0xc]
0x19db0008f652   712  4c8b0dbdffffff REX.W movq r9,[rip+0xffffffbd]
0x19db0008f659   719  498939         REX.W movq [r9],rdi
0x19db0008f65c   71c  498d7801       REX.W leaq rdi,[r8+0x1]
0x19db0008f660   720  4d8b8530010000 REX.W movq r8,[r13+0x130] (root (heap_number_map))
0x19db0008f667   727  448947ff       movl [rdi-0x1],r8
0x19db0008f66b   72b  c5fb1075d8     vmovsd xmm6,[rbp-0x28]
0x19db0008f670   730  c5fb117703     vmovsd [rdi+0x3],xmm6
0x19db0008f675   735  e97afdffff     jmp 0x19db0008f3f4  <+0x4b4>
0x19db0008f67a   73a  40f6c701       testb rdi,0x1
0x19db0008f67e   73e  0f848dfdffff   jz 0x19db0008f411  <+0x4d1>
0x19db0008f684   744  8bff           movl rdi,rdi
0x19db0008f686   746  4903fd         REX.W addq rdi,r13
0x19db0008f689   749  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0008f690   750  4c23cf         REX.W andq r9,rdi
0x19db0008f693   753  41f6410802     testb [r9+0x8],0x2
0x19db0008f698   758  0f8473fdffff   jz 0x19db0008f411  <+0x4d1>
0x19db0008f69e   75e  4d8d5817       REX.W leaq r11,[r8+0x17]
0x19db0008f6a2   762  50             push rax
0x19db0008f6a3   763  51             push rcx
0x19db0008f6a4   764  52             push rdx
0x19db0008f6a5   765  56             push rsi
0x19db0008f6a6   766  57             push rdi
0x19db0008f6a7   767  498bf3         REX.W movq rsi,r11
0x19db0008f6aa   76a  498bf8         REX.W movq rdi,r8
0x19db0008f6ad   76d  33d2           xorl rdx,rdx
0x19db0008f6af   76f  488b0d50fbffff REX.W movq rcx,[rip+0xfffffb50]
0x19db0008f6b6   776  49bac065b8f5ff7f0000 REX.W movq r10,0x7ffff5b865c0  (RecordWrite)    ;; off heap target
0x19db0008f6c0   780  41ffd2         call r10
0x19db0008f6c3   783  5f             pop rdi
0x19db0008f6c4   784  5e             pop rsi
0x19db0008f6c5   785  5a             pop rdx
0x19db0008f6c6   786  59             pop rcx
0x19db0008f6c7   787  58             pop rax
0x19db0008f6c8   788  e944fdffff     jmp 0x19db0008f411  <+0x4d1>
0x19db0008f6cd   78d  90             nop
0x19db0008f6ce   78e  41ff95f8360000 call [r13+0x36f8]
0x19db0008f6d5   795  41ff95f8360000 call [r13+0x36f8]
0x19db0008f6dc   79c  41ff95f8360000 call [r13+0x36f8]
0x19db0008f6e3   7a3  41ff95f8360000 call [r13+0x36f8]
0x19db0008f6ea   7aa  41ff95f8360000 call [r13+0x36f8]
0x19db0008f6f1   7b1  41ff95f8360000 call [r13+0x36f8]
0x19db0008f6f8   7b8  41ff95f8360000 call [r13+0x36f8]
0x19db0008f6ff   7bf  41ff95f8360000 call [r13+0x36f8]
0x19db0008f706   7c6  41ff95f8360000 call [r13+0x36f8]
0x19db0008f70d   7cd  41ff95f8360000 call [r13+0x36f8]
0x19db0008f714   7d4  41ff95f8360000 call [r13+0x36f8]
0x19db0008f71b   7db  41ff95f8360000 call [r13+0x36f8]
0x19db0008f722   7e2  41ff95f8360000 call [r13+0x36f8]
0x19db0008f729   7e9  41ff95f8360000 call [r13+0x36f8]
0x19db0008f730   7f0  41ff95f8360000 call [r13+0x36f8]
0x19db0008f737   7f7  41ff95f8360000 call [r13+0x36f8]
0x19db0008f73e   7fe  41ff95f8360000 call [r13+0x36f8]
0x19db0008f745   805  41ff95f8360000 call [r13+0x36f8]
0x19db0008f74c   80c  41ff95f8360000 call [r13+0x36f8]
0x19db0008f753   813  41ff95f8360000 call [r13+0x36f8]
0x19db0008f75a   81a  41ff95f8360000 call [r13+0x36f8]
0x19db0008f761   821  41ff9510370000 call [r13+0x3710]
0x19db0008f768   828  41ff9510370000 call [r13+0x3710]
0x19db0008f76f   82f  41ff9510370000 call [r13+0x3710]
0x19db0008f776   836  41ff9510370000 call [r13+0x3710]
0x19db0008f77d   83d  41ff9510370000 call [r13+0x3710]
0x19db0008f784   844  41ff9510370000 call [r13+0x3710]
0x19db0008f78b   84b  41ff9510370000 call [r13+0x3710]
0x19db0008f792   852  6690           nop

Source positions:
 pc offset  position
        5d       647

Inlined functions (count = 0)

Deoptimization Input Data (deopt points = 28)
 index  bytecode-offset    pc
     0                7    NA 
     1                7    NA 
     2                7    NA 
     3               19    NA 
     4               19    NA 
     5               19    NA 
     6               32    NA 
     7               32    NA 
     8               32    NA 
     9               45    NA 
    10               45    NA 
    11               45    NA 
    12               45    NA 
    13               45    NA 
    14               45    NA 
    15               45    NA 
    16               45    NA 
    17               45    NA 
    18               45    NA 
    19               45    NA 
    20              260    NA 
    21                0    84 
    22               12    e4 
    23               24   13e 
    24               37   19b 
    25               -1   527 
    26              338   59c 
    27              338   65e 

Safepoints (size = 128)
0x19db0008efc4      84   821  0000000000001100000000 (sp -> fp)      21
0x19db0008f024      e4   828  0000000000001100000000 (sp -> fp)      22
0x19db0008f07e     13e   82f  0000000000001100000000 (sp -> fp)      23
0x19db0008f0db     19b   836  0000000000001100000000 (sp -> fp)      24
0x19db0008f467     527   83d  0000000000001100000000 (sp -> fp)      25
0x19db0008f4dc     59c   844  0000000000001100100000 (sp -> fp)      26
0x19db0008f59e     65e   84b  0000000000001100100000 (sp -> fp)      27
0x19db0008f64a     70a    NA  0000000000000000100000 (sp -> fp)  <none>

RelocInfo (size = 60)
0x19db0008ef58  off heap target
0x19db0008ef72  off heap target
0x19db0008ef9f  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0008efb9  off heap target
0x19db0008efcd  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008f00b  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0008f02d  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008f066  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0008f087  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008f0c0  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0008f10a  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008f1d2  compressed embedded object  (0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)> compressed)
0x19db0008f1d8  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db0008f22e  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008f2c6  compressed embedded object  (0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)> compressed)
0x19db0008f445  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db0008f44f  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008f45c  off heap target
0x19db0008f4ba  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008f4c7  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db0008f589  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0008f616  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db0008f627  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db0008f63f  off heap target
0x19db0008f6b8  off heap target

--- End code ---
assign 0 to v-1:0
assign 3 to v-4:0
assign 2 to v-3:0
assign 1 to v-2:0
assign 6 to v-7:0
assign 7 to v-8:0
assign 8 to v-9:0
assign 9 to v-10:0
assign 11 to v-12:0
assign 12 to v-13:0
assign 14 to v-15:0
assign 15 to v-16:0
assign 0 to v-33:0
assign 1 to v-34:0
assign 2 to v-35:0
assign 3 to v-36:0
assign 4 to v-37:0
assign 5 to v-38:0
assign 6 to v-39:0
assign 7 to v-40:0
assign 8 to v-41:0
assign 9 to v-42:0
assign 10 to v-43:0
assign 11 to v-44:0
assign 12 to v-45:0
assign 13 to v-46:0
assign 14 to v-47:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
------------------------
function: Init
add v1479->v3
add v1496->v1492
add v1493->v1495
add v1491->v1490
add v1489->v1490
add v178->v1480
add v185->v1480
add v1488->v1480
add v471->v1479
add v1487->v1479
add v471->v1479
add v1480->v1479
add v1480->v1479
add v1375->v3
add v67->v1375
add v1478->v1375
add v1475->v1375
add v67->v1375
add v1474->v1375
add v1471->v1375
add v1468->v1375
add v67->v1375
add v1466->v1375
add v1463->v1375
add v1461->v1375
add v67->v1375
add v1459->v1375
add v1456->v1375
add v1454->v1375
add v67->v1375
add v1452->v1375
add v1451->v1375
add v1450->v1449
add v1446->v1441
add v1442->v1444
add v1439->v1438
add v1436->v1438
add v1434->v1425
add v1433->v1425
add v1431->v1425
add v1431->v1425
add v1428->v1375
add v1425->v1375
add v1424->v1375
add v1422->v1424
add v67->v1375
add v1420->v1375
add v1416->v1375
add v1417->v1375
add v1415->v1375
add v1413->v1415
add v67->v1375
add v1411->v1375
add v1407->v1375
add v1408->v1375
add v1406->v1375
add v1404->v1406
add v67->v1375
add v1402->v1375
add v1401->v1375
add v1384->v1401
add v1383->v1401
add v1382->v1401
add v1394->v1401
add v1400->v1395
add v1396->v1398
add v1392->v1391
add v1389->v1391
add v1387->v1376
add v1386->v1376
add v1384->v1376
add v1383->v1376
add v1382->v1376
add v1381->v1376
add v1381->v1376
add v1374->v1376
add v67->v1375
add v1376->v1375
add v1373->v1375
add v1374->v1373
add v1372->v1367
add v1368->v1370
add v1363->v1366
add v1365->v1366
add v178->v1352
add v185->v1352
add v1364->v1352
add v1360->v1363
add v1362->v1363
add v178->v1351
add v185->v1351
add v1361->v1351
add v1357->v1360
add v1359->v1360
add v178->v1350
add v185->v1350
add v1358->v1350
add v1354->v1357
add v1356->v1357
add v178->v1349
add v185->v1349
add v1355->v1349
add v1348->v1354
add v1353->v1354
add v388->v1346
add v1352->v1346
add v1351->v1346
add v1350->v1346
add v1349->v1346
add v1342->v1348
add v1347->v1348
add v184->v1343
add v185->v1343
add v1346->v1343
add v1343->v3
add v1339->v1342
add v1341->v1342
add v178->v1328
add v185->v1328
add v1340->v1328
add v1336->v1339
add v1338->v1339
add v178->v1327
add v185->v1327
add v1337->v1327
add v1333->v1336
add v1335->v1336
add v178->v1326
add v185->v1326
add v1334->v1326
add v1330->v1333
add v1332->v1333
add v178->v1325
add v185->v1325
add v1331->v1325
add v1324->v1330
add v1329->v1330
add v388->v1322
add v1328->v1322
add v1327->v1322
add v1326->v1322
add v1325->v1322
add v1318->v1324
add v1323->v1324
add v184->v1319
add v185->v1319
add v1322->v1319
add v1319->v3
add v1315->v1318
add v1317->v1318
add v178->v1304
add v185->v1304
add v1316->v1304
add v1312->v1315
add v1314->v1315
add v178->v1303
add v185->v1303
add v1313->v1303
add v1309->v1312
add v1311->v1312
add v178->v1302
add v185->v1302
add v1310->v1302
add v1306->v1309
add v1308->v1309
add v178->v1301
add v185->v1301
add v1307->v1301
add v1300->v1306
add v1305->v1306
add v388->v1298
add v1304->v1298
add v1303->v1298
add v1302->v1298
add v1301->v1298
add v1290->v1300
add v1299->v1300
add v184->v1295
add v185->v1295
add v1298->v1295
add v1295->v3
add v4->v3
add v5->v3
add v1291->v1290
add v1289->v1290
add v1288->v1285
add v1286->v1285
add v178->v4
add v184->v4
add v184->v4
add v1278->v4
add v1271->v4
add v1277->v4
add v1275->v1271
add v1276->v1266
add v1270->v1267
add v1248->v1263
add v1256->v4
add v1262->v4
add v1260->v1256
add v1261->v1251
add v1255->v1252
add v1248->v1247
add v1216->v3
add v1246->v3
add v184->v1216
add v530->v1216
add v1238->v1216
add v1245->v1216
add v1244->v1238
add v1243->v1233
add v1237->v1234
add v1213->v1230
add v1222->v1216
add v1229->v1216
add v1228->v1222
add v1227->v1217
add v1221->v1218
add v1213->v1212
add v1182->v3
add v1211->v3
add v184->v1182
add v530->v1182
add v1204->v1182
add v1210->v1182
add v1209->v1204
add v1208->v1199
add v1203->v1200
add v1179->v1196
add v1188->v1182
add v1195->v1182
add v1194->v1188
add v1193->v1183
add v1187->v1184
add v1179->v1178
add v1148->v3
add v1177->v3
add v184->v1148
add v530->v1148
add v1170->v1148
add v1176->v1148
add v1175->v1170
add v1174->v1165
add v1169->v1166
add v1145->v1162
add v1154->v1148
add v1161->v1148
add v1160->v1154
add v1159->v1149
add v1153->v1150
add v1145->v1144
add v1114->v3
add v1143->v3
add v184->v1114
add v530->v1114
add v1136->v1114
add v1142->v1114
add v1141->v1136
add v1140->v1131
add v1135->v1132
add v1111->v1128
add v1120->v1114
add v1127->v1114
add v1126->v1120
add v1125->v1115
add v1119->v1116
add v1111->v1110
add v1080->v3
add v1109->v3
add v184->v1080
add v530->v1080
add v1102->v1080
add v1108->v1080
add v1107->v1102
add v1106->v1097
add v1101->v1098
add v1077->v1094
add v1086->v1080
add v1093->v1080
add v1092->v1086
add v1091->v1081
add v1085->v1082
add v1077->v1076
add v1046->v3
add v1075->v3
add v184->v1046
add v530->v1046
add v1068->v1046
add v1074->v1046
add v1073->v1068
add v1072->v1063
add v1067->v1064
add v1043->v1060
add v1052->v1046
add v1059->v1046
add v1058->v1052
add v1057->v1047
add v1051->v1048
add v1043->v1042
add v1011->v3
add v1040->v3
add v184->v1011
add v530->v1011
add v1033->v1011
add v1039->v1011
add v1038->v1033
add v1037->v1028
add v1032->v1029
add v1008->v1025
add v1017->v1011
add v1024->v1011
add v1023->v1017
add v1022->v1012
add v1016->v1013
add v1008->v1007
add v974->v3
add v1003->v3
add v184->v974
add v530->v974
add v996->v974
add v1002->v974
add v1001->v996
add v1000->v991
add v995->v992
add v971->v988
add v980->v974
add v987->v974
add v986->v980
add v985->v975
add v979->v976
add v971->v970
add v891->v3
add v969->v964
add v965->v967
add v960->v963
add v962->v963
add v178->v943
add v185->v943
add v961->v943
add v957->v960
add v959->v960
add v178->v942
add v185->v942
add v958->v942
add v954->v957
add v956->v957
add v178->v941
add v185->v941
add v955->v941
add v951->v954
add v953->v954
add v178->v940
add v185->v940
add v952->v940
add v948->v951
add v950->v951
add v178->v939
add v185->v939
add v949->v939
add v945->v948
add v947->v948
add v178->v938
add v185->v938
add v946->v938
add v937->v945
add v944->v945
add v388->v935
add v943->v935
add v942->v935
add v941->v935
add v940->v935
add v939->v935
add v938->v935
add v927->v937
add v936->v937
add v184->v911
add v185->v911
add v935->v911
add v530->v891
add v184->v891
add v934->v891
add v933->v932
add v928->v927
add v925->v927
add v923->v914
add v922->v914
add v920->v914
add v920->v914
add v911->v914
add v917->v891
add v914->v891
add v910->v891
add v911->v910
add v909->v905
add v906->v908
add v901->v904
add v903->v904
add v388->v899
add v812->v899
add v812->v899
add v812->v899
add v812->v899
add v902->v901
add v900->v901
add v184->v888
add v185->v888
add v899->v888
add v530->v891
add v898->v891
add v892->v891
add v895->v891
add v888->v892
add v887->v891
add v888->v887
add v885->v812
add v581->v3
add v883->v581
add v575->v581
add v879->v575
add v184->v879
add v881->v879
add v603->v575
add v623->v3
add v878->v879
adding pairs 2, v606:0x7fffb42211a0, v878:0x7fffb40b8c50
add v178->v877
add v874->v877
add v876->v877
add v871->v874
add v869->v581
add v872->v581
adding pairs 2, v873:0x7fffb40b91f0, v869:0x7fffb40b90b0
add v854->v3
add v866->v854
add v864->v854
add v863->v864
add v184->v863
add v860->v863
add v862->v863
adding pairs 2, v606:0x7fffb42211a0, v860:0x7fffb40b9760
add v178->v859
add v856->v859
add v858->v859
add v852->v856
add v850->v854
add v853->v854
adding pairs 2, v855:0x7fffb40b9da0, v850:0x7fffb40b9c60
add v834->v3
add v847->v834
add v845->v834
add v844->v845
add v184->v844
add v840->v844
add v843->v844
adding pairs 2, v606:0x7fffb42211a0, v840:0x7fffb40ba310
add v178->v839
add v836->v839
add v838->v839
add v832->v836
add v830->v834
add v833->v834
adding pairs 2, v835:0x7fffb40ba950, v830:0x7fffb40ba810
add v827->v623
add v826->v623
add v627->v623
add v824->v819
add v820->v822
add v816->v818
add v817->v818
add v388->v795
add v812->v795
add v812->v795
add v812->v795
add v812->v795
add v814->v816
add v815->v816
add v178->v664
add v185->v664
add v795->v664
add v810->v814
add v813->v814
add v388->v780
add v812->v780
add v812->v780
add v812->v780
add v812->v780
add v811->v810
add v809->v810
add v178->v665
add v185->v665
add v780->v665
add v178->v624
add v806->v624
add v808->v624
add v802->v806
add v178->v625
add v789->v625
add v805->v625
add v803->v789
add v797->v795
add v178->v626
add v792->v626
add v794->v626
add v787->v792
add v791->v625
add v788->v789
add v782->v780
add v775->v624
add v777->v624
adding pairs 2, v710:0x7fffb4043088, v775:0x7fffb40bc970
add v772->v625
add v774->v625
adding pairs 2, v710:0x7fffb4043088, v772:0x7fffb40bcbf0
add v758->v664
add v765->v664
add v766->v758
add v764->v753
add v757->v754
add v713->v710
add v752->v664
adding pairs 2, v710:0x7fffb4043088, v747:0x7fffb4042e58
add v744->v626
add v746->v626
adding pairs 2, v710:0x7fffb4043088, v744:0x7fffb40bda20
add v741->v625
add v743->v625
adding pairs 2, v710:0x7fffb4043088, v741:0x7fffb40bdca0
add v727->v665
add v734->v665
add v735->v727
add v733->v722
add v726->v723
add v721->v665
adding pairs 2, v710:0x7fffb4043088, v715:0x7fffb4042c28
add v663->v627
add v711->v663
add v709->v663
add v666->v663
add v707->v703
add v704->v706
add v699->v702
add v701->v702
add v190->v621
add v189->v621
add v189->v621
add v189->v621
add v189->v621
add v700->v699
add v698->v699
add v39->v600
add v185->v600
add v621->v600
add v661->v664
add v697->v664
add v692->v661
add v660->v665
add v696->v665
add v693->v660
add v694->v661
add v695->v660
add v683->v621
add v679->v660
add v680->v661
add v671->v621
add v670->v660
add v658->v661
add v659->v660
add v648->v621
add v641->v650
add v642->v621
add v649->v621
add v640->v641
add v638->v621
adding pairs 3, v631:0x7fffb40429f8, v621:0x7fffb40bf248
adding pairs 3, v631:0x7fffb40429f8, v621:0x7fffb40bf248
add v628->v631
add v430->v621
add v184->v603
add v612->v603
add v619->v603
add v620->v612
add v618->v607
add v611->v608
add v596->v606
add v605->v603
add v594->v589
add v590->v592
add v569->v588
add v587->v588
add v184->v576
add v185->v576
add v586->v576
add v530->v581
add v585->v581
add v582->v581
add v576->v575
add v576->v575
add v524->v3
add v570->v569
add v568->v569
add v567->v564
add v565->v564
add v530->v524
add v562->v524
add v561->v524
add v544->v561
add v543->v561
add v542->v561
add v554->v561
add v560->v555
add v556->v558
add v552->v551
add v549->v551
add v547->v535
add v546->v535
add v544->v535
add v543->v535
add v542->v535
add v541->v535
add v541->v535
add v532->v535
add v538->v524
add v535->v524
add v531->v524
add v532->v531
add v529->v524
add v527->v524
add v526->v527
add v509->v3
add v525->v509
add v523->v509
add v510->v509
add v522->v518
add v519->v521
add v514->v517
add v516->v517
add v388->v512
add v515->v514
add v513->v514
add v178->v511
add v185->v511
add v512->v511
add v498->v3
add v504->v498
add v502->v498
add v501->v502
add v478->v3
add v499->v478
add v497->v478
add v479->v478
add v495->v490
add v491->v493
add v486->v489
add v488->v489
add v388->v484
add v487->v486
add v485->v486
add v178->v481
add v185->v481
add v484->v481
add v410->v3
add v411->v3
add v465->v3
add v471->v465
add v470->v465
add v178->v470
add v467->v470
add v469->v470
add v412->v467
add v413->v467
add v414->v467
add v466->v410
assign 0 to v-1:0
add v464->v410
add v415->v410
add v462->v457
add v458->v460
add v453->v456
add v455->v456
add v178->v451
add v185->v451
add v454->v451
add v450->v453
add v452->v453
add v388->v422
add v451->v422
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
add v448->v450
add v449->v450
assign 6 to v-23:0
assign 7 to v-24:0
add v184->v418
assign 8 to v-25:0
assign 9 to v-26:0
add v185->v418
assign 11 to v-28:0
assign 12 to v-29:0
add v422->v418
assign 14 to v-31:0
assign 15 to v-32:0
add v446->v448
assign 0 to v-49:0
assign 1 to v-50:0
add v447->v448
add v190->v442
assign 2 to v-51:0
add v430->v442
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
add v53->v442
add v53->v442
add v53->v442
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
add v440->v446
add v445->v446
add v39->v441
add v185->v441
add v442->v441
add v443->v442
add v441->v422
add v438->v440
add v439->v440
add v190->v434
add v53->v434
add v430->v434
add v53->v434
add v53->v434
add v432->v438
add v437->v438
add v39->v433
add v185->v433
add v434->v433
add v435->v434
add v433->v422
add v428->v432
add v431->v432
add v190->v424
add v53->v424
add v53->v424
add v430->v424
add v53->v424
add v429->v428
add v427->v428
add v39->v423
add v185->v423
add v424->v423
add v425->v424
add v423->v422
add v416->v415
add v421->v416
add v420->v416
add v215->v3
add v214->v3
add v216->v3
add v407->v214
add v406->v214
add v217->v214
add v404->v399
add v400->v402
add v396->v398
add v397->v398
assign 3 to v-4:0
assign 2 to v-3:0
assign 1 to v-2:0
assign 6 to v-7:0
add v39->v387
add v185->v387
add v185->v387
assign 7 to v-8:0
assign 8 to v-9:0
add v394->v396
assign 9 to v-10:0
assign 11 to v-12:0
assign 12 to v-13:0
assign 14 to v-15:0
assign 15 to v-16:0
add v395->v396
assign 0 to v-33:0
assign 1 to v-34:0
assign 2 to v-35:0
add v39->v386
assign 3 to v-36:0
assign 4 to v-37:0
add v185->v386
add v185->v386
assign 5 to v-38:0
assign 6 to v-39:0
add v392->v394
assign 7 to v-40:0
assign 8 to v-41:0
assign 9 to v-42:0
assign 10 to v-43:0
add v393->v394
assign 11 to v-44:0
assign 12 to v-45:0
add v39->v385
assign 13 to v-46:0
assign 14 to v-47:0
add v185->v385
add v185->v385
add v390->v392
add v391->v392
add v39->v384
add v185->v384
add v185->v384
add v382->v390
add v389->v390
add v388->v380
add v387->v380
add v386->v380
add v385->v380
add v384->v380
add v383->v382
add v381->v382
add v184->v210
add v185->v210
add v380->v210
add v377->v210
add v379->v210
adding pairs 2, v220:0x7fffb4041df0, v377:0x7fffb40c96d8
add v184->v215
add v349->v215
add v376->v215
adding pairs 2, v220:0x7fffb4041df0, v349:0x7fffb40c9958
add v178->v372
add v39->v372
add v356->v372
add v371->v372
add v320->v356
add v184->v216
add v341->v216
add v370->v216
add v367->v341
add v178->v367
add v39->v367
add v364->v367
add v366->v367
add v319->v364
add v322->v356
add v361->v341
add v178->v361
add v39->v361
add v358->v361
add v360->v361
add v321->v358
add v318->v356
add v353->v341
add v178->v353
add v39->v353
add v350->v353
add v352->v353
add v317->v350
adding pairs 2, v220:0x7fffb4041df0, v349:0x7fffb40c9958
add v178->v346
add v39->v346
add v343->v346
add v345->v346
add v314->v343
add v338->v341
add v178->v338
add v39->v338
add v335->v338
add v337->v338
add v313->v335
add v178->v323
add v39->v323
add v325->v323
add v332->v323
add v330->v325
add v331->v324
add v308->v306
add v301->v210
add v303->v210
adding pairs 2, v220:0x7fffb4041df0, v301:0x7fffb40cc3a0
add v272->v215
add v300->v215
adding pairs 2, v220:0x7fffb4041df0, v272:0x7fffb40cc620
add v178->v296
add v39->v296
add v280->v296
add v295->v296
add v239->v280
add v264->v216
add v294->v216
add v291->v264
add v178->v291
add v39->v291
add v288->v291
add v290->v291
adding pairs 3, v245:0x7fffb4041bc0, v288:0x7fffb40ccff0
add v241->v280
add v285->v264
add v178->v285
add v39->v285
add v282->v285
add v284->v285
adding pairs 3, v245:0x7fffb4041bc0, v282:0x7fffb40cd4d8
add v237->v280
add v277->v264
add v178->v277
add v39->v277
add v274->v277
add v276->v277
adding pairs 3, v245:0x7fffb4041bc0, v274:0x7fffb40cd9c0
adding pairs 2, v220:0x7fffb4041df0, v272:0x7fffb40cc620
add v178->v269
add v39->v269
add v266->v269
add v268->v269
add v233->v266
add v261->v264
add v178->v261
add v39->v261
add v258->v261
add v260->v261
adding pairs 3, v245:0x7fffb4041bc0, v258:0x7fffb40ce250
add v178->v242
add v39->v242
add v247->v242
add v255->v242
add v254->v247
add v253->v246
add v222->v245
add v244->v242
adding pairs 3, v245:0x7fffb4041bc0, v224:0x7fffb40de320
add v218->v220
add v210->v3
add v207->v3
add v209->v207
add v203->v207
add v206->v207
adding pairs 2, v97:0x7fffb40de208, v203:0x7fffb40d76a8
add v107->v3
add v108->v3
add v201->v107
add v200->v107
add v110->v107
add v198->v193
add v194->v196
add v187->v192
add v191->v192
add v190->v156
add v189->v156
add v189->v156
add v189->v156
add v189->v156
add v188->v187
add v186->v187
add v39->v104
add v185->v104
add v156->v104
add v184->v108
add v181->v108
add v183->v108
add v180->v181
add v39->v180
add v171->v180
add v179->v180
add v168->v171
add v178->v109
add v39->v109
add v164->v109
add v173->v109
add v169->v171
add v167->v171
add v163->v171
add v158->v156
add v151->v108
add v153->v108
adding pairs 2, v133:0x7fffb40ddfd8, v151:0x7fffb40d93a8
add v39->v150
add v146->v150
add v149->v150
add v128->v146
add v144->v109
add v148->v109
add v127->v144
add v130->v146
add v129->v144
add v126->v146
add v125->v144
add v122->v146
add v121->v144
add v135->v104
add v142->v104
add v143->v135
add v141->v134
add v111->v133
add v132->v104
adding pairs 3, v133:0x7fffb40ddfd8, v113:0x7fffb40ddec0
add v100->v97
add v94->v3
add v98->v94
add v96->v94
add v63->v3
add v67->v63
add v92->v63
add v91->v63
add v72->v91
add v71->v91
add v70->v91
add v83->v91
add v89->v84
add v85->v87
add v81->v79
add v77->v79
add v75->v64
add v74->v64
add v72->v64
add v71->v64
add v70->v64
add v56->v64
add v56->v64
add v62->v64
add v67->v63
add v64->v63
add v61->v63
add v62->v61
add v55->v3
add v60->v55
add v59->v55
add v48->v3
add v51->v48
add v50->v48
add v42->v48
add v46->v48
adding pairs 2, v22:0x7fffb421ede0, v46:0x7fffb40dc5b0
add v41->v26
add v40->v26
add v39->v26
add v31->v26
add v38->v31
adding pairs 3, v30:0x7fffb40dda60, v31:0x7fffb40dc9f8
add v27->v30
add v17->v22
add v14->v3
add v13->v8
add v10->v8
gap () () 
          [rsi|R|t] = ArchNop
gap (v3(-) = [rsi|R|t];) () 
          [stack:-1|t] = ArchNop
gap (v1(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v2(-) = [stack:-2|t];) () 
          [rdi|R|t] = ArchNop
gap (v0(-) = [rdi|R|t];) () 
          [constant:327] = ArchNop
gap () () 
          [constant:35] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:2458] [immediate:2459]
gap () () 
          [constant:1500] = ArchNop
gap () () 
          [constant:1499] = ArchNop
gap () () 
          v1498(R) = ArchStackCheckOffset
gap () () 
          X64Push v1498(-)
gap () ([rbx|R|w64] = v1499(-); [rax|R|w64] = v35(-); [rsi|R|t] = v1500(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2457] #-1 #323 v0(S) v1(S) v2(S) v3(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:2456]
gap () () 
          ArchJmp [immediate:2455]
gap () () 
          [constant:982] = ArchNop
gap () () 
          [constant:80] = ArchNop
gap () () 
          [constant:90] = ArchNop
gap () () 
          v1479(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:2454]
gap () () 
          v1492(R) = X64Movq : MR v80(R)
gap () () 
          v1496(R) = X64Lea : MRI v1492(R) [immediate:2453]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v1496(R) [immediate:2451] [immediate:2452]
gap () () 
          ArchJmp [immediate:2450]
gap () ([rdx|R|w64] = v982(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:2449] #-1 [rdx|R|w64]
gap (v1495(-) = [rax|R|tp];) () 
          v1493(R) = X64Lea : MRI v1495(R) [immediate:2448]
gap () (v1490 = v1493(-);) 
          ArchJmp [immediate:2447]
gap () (v1490 = v1492(-);) 
          ArchJmp [immediate:2446]
gap () () 
          [constant:178] = ArchNop
gap () () 
          [constant:185] = ArchNop
gap () () 
          [constant:1122] = ArchNop
gap () () 
          [constant:20] = ArchNop
gap () () 
          [constant:471] = ArchNop
gap () () 
          v1491(R) = X64Lea : MRI v1490(R) [immediate:2445]
gap () () 
          X64Movq : MR v80(R) v1491(R)
gap () () 
          v1489(R) = X64Lea : MRI v1490(R) [immediate:2444]
gap () (v1480 = v1489(-);) 
          v1480(1) = ArchNop v1480
gap () () 
          X64MovqCompressTagged : MRI v1480(R) [immediate:2443] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1480(R) [immediate:2442] v185(R)
gap () () 
          [constant:1488] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1480(R) [immediate:2441] v1488(R)
gap () () 
          X64MovqCompressTagged : MRI v1480(R) [immediate:2439] [immediate:2440]
gap () () 
          X64Test32 && deoptimize if equal v1479 #1 #322 v0(S) v1(-) v2(-) v3(S) v1479(-) v1480(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v1479(R) [immediate:2436] v471(R) [immediate:2437] [immediate:2438]
gap () () 
          [constant:1487] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1479(R) [immediate:2435] v1487(R) #321 v0(S) v1(-) v2(-) v3(S) v1479(-) v1480(-)
gap () () 
          ArchStoreWithWriteBarrier : MRI v1479(R) [immediate:2434] v471(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v1479(R) [immediate:2433] v1480(R)
gap () () 
          ArchJmp [immediate:2432]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1479(R) [immediate:2431] v1480(R)
gap () () 
          ArchJmp [immediate:2430]
gap () () 
          [constant:67] = ArchNop
gap () () 
          v1375(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:2429]
gap () () 
          X64Test32 && deoptimize if equal v1375 #1 #320 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2428]
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2425] v67(R) [immediate:2426] [immediate:2427]
gap () () 
          [constant:1478] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2423] v1478(R) #319 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2424]
gap () () 
          [constant:1475] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2422] v1475(R)
gap () () 
          X64MovqCompressTagged : MRI v1375(R) [immediate:2420] [immediate:2421]
gap () () 
          ArchJmp [immediate:2419]
gap () () 
          X64MovqCompressTagged : MRI v1375(R) [immediate:2417] [immediate:2418]
gap () () 
          ArchJmp [immediate:2416]
gap () () 
          [constant:1469] = ArchNop
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2413] v67(R) [immediate:2414] [immediate:2415]
gap () () 
          [constant:1474] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2411] v1474(R) #318 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2412]
gap () () 
          [constant:1471] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2410] v1471(R)
gap () () 
          X64MovqCompressTagged : MRI v1375(R) [immediate:2408] [immediate:2409]
gap () () 
          ArchJmp [immediate:2407]
gap () () 
          [constant:1470] = ArchNop
gap () () 
          v1468(R) = X64MovqDecompressTaggedSigned : MRI v1375(R) [immediate:2406]
gap () ([rdx|R|ts] = v1468(-); [rax|R|w64] = v1469(-); [rsi|R|w64] = v1470(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2405] #-1 [rdx|R|ts] [rax|R|w64] [rsi|R|w64]
gap (v1467(-) = [rax|R|t];) () 
          X64Cmp32 : Root && deoptimize if not equal #168 v1467(R) #317 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2404]
gap () () 
          ArchJmp [immediate:2403]
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2400] v67(R) [immediate:2401] [immediate:2402]
gap () () 
          [constant:1466] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2398] v1466(R) #316 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2399]
gap () () 
          [constant:1463] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2397] v1463(R)
gap () () 
          X64MovqCompressTagged : MRI v1375(R) [immediate:2395] [immediate:2396]
gap () () 
          ArchJmp [immediate:2394]
gap () () 
          [constant:1462] = ArchNop
gap () () 
          v1461(R) = X64MovqDecompressTaggedSigned : MRI v1375(R) [immediate:2393]
gap () ([rdx|R|ts] = v1461(-); [rax|R|w64] = v327(-); [rsi|R|w64] = v1462(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2392] #-1 [rdx|R|ts] [rax|R|w64] [rsi|R|w64]
gap (v1460(-) = [rax|R|t];) () 
          X64Cmp32 : Root && deoptimize if not equal #168 v1460(R) #315 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2391]
gap () () 
          ArchJmp [immediate:2390]
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2387] v67(R) [immediate:2388] [immediate:2389]
gap () () 
          [constant:1456] = ArchNop
gap () () 
          [constant:1459] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2385] v1459(R) #314 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2386]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2384] v1456(R)
gap () () 
          X64MovqCompressTagged : MRI v1375(R) [immediate:2382] [immediate:2383]
gap () () 
          ArchJmp [immediate:2381]
gap () () 
          [constant:1455] = ArchNop
gap () () 
          v1454(R) = X64MovqDecompressTaggedSigned : MRI v1375(R) [immediate:2380]
gap () ([rdx|R|ts] = v1454(-); [rax|R|w64] = v327(-); [rsi|R|w64] = v1455(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2379] #-1 [rdx|R|ts] [rax|R|w64] [rsi|R|w64]
gap (v1453(-) = [rax|R|t];) () 
          X64Cmp32 : Root && deoptimize if not equal #168 v1453(R) #313 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2378]
gap () () 
          ArchJmp [immediate:2377]
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2374] v67(R) [immediate:2375] [immediate:2376]
gap () () 
          [constant:1445] = ArchNop
gap () () 
          [constant:1452] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2372] v1452(R) #312 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2373]
gap () () 
          v1451(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2371]
gap () () 
          X64Test32 && branch if equal v1451 #1 [immediate:2369] [immediate:2370]
gap () (v1449 = v327(-);) 
          ArchJmp [immediate:2368]
gap () (v1449 = v1451(-);) 
          ArchJmp [immediate:2367]
gap () () 
          [constant:1428] = ArchNop
gap () () 
          X64Test32 && branch if equal v1449 #1 [immediate:2365] [immediate:2366]
gap () () 
          v1450(R) = X64Movsd : MRI v1449(R) [immediate:2364]
gap () () 
          v1448(R) = SSEFloat64ToInt32 v1450
gap () (v1440 = v1448(-);) 
          ArchJmp [immediate:2363]
gap () (v1447(R) = v1449(-);) 
          v1447(1) = X64Sar32 v1447(R) #1
gap () (v1440 = v1447(-);) 
          ArchJmp [immediate:2362]
gap () () 
          v1441(R) = X64Movq : MR v80(R)
gap () () 
          v1446(R) = X64Lea : MRI v1441(R) [immediate:2361]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v1446(R) [immediate:2359] [immediate:2360]
gap () () 
          ArchJmp [immediate:2358]
gap () ([rdx|R|w64] = v1445(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:2357] #-1 [rdx|R|w64]
gap (v1444(-) = [rax|R|tp];) () 
          v1442(R) = X64Lea : MRI v1444(R) [immediate:2356]
gap () (v1438 = v1442(-);) 
          ArchJmp [immediate:2355]
gap () (v1438 = v1441(-);) 
          ArchJmp [immediate:2354]
gap () () 
          [constant:1431] = ArchNop
gap () () 
          [constant:1434] = ArchNop
gap () () 
          v1439(R) = X64Lea : MRI v1438(R) [immediate:2353]
gap () (v1437(R) = v1440(-);) 
          v1437(1) = X64Shl32 v1437(R) #10
gap () () 
          X64Movq : MR v80(R) v1439(R)
gap () () 
          v1436(R) = X64Lea : MRI v1438(R) [immediate:2352]
gap () (v1435(R) = v1437(-);) 
          v1435(1) = X64Or32 v1435(R) #3
gap () (v1425 = v1436(-);) 
          v1425(1) = ArchNop v1425
gap () () 
          v1433(R) = X64Lea32 : MR1 v1435(R) v1435(R)
gap () () 
          X64MovqCompressTagged : MRI v1425(R) [immediate:2351] v1434(R)
gap () () 
          X64MovqCompressTagged : MRI v1425(R) [immediate:2350] v1433(R)
gap () () 
          X64MovqCompressTagged : MRI v1425(R) [immediate:2349] v1431(R)
gap () () 
          X64MovqCompressTagged : MRI v1425(R) [immediate:2348] v1431(R)
gap () () 
          X64MovqCompressTagged : MRI v1425(R) [immediate:2346] [immediate:2347]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2345] v1428(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2344] v1425(R)
gap () () 
          ArchJmp [immediate:2343]
gap () () 
          [constant:1423] = ArchNop
gap () () 
          v1424(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2342]
gap () () 
          v1422(R) = X64MovqDecompressTaggedSigned : MRI v1424(R) [immediate:2341]
gap () ([rdx|R|ts] = v1422(-); [rax|R|w64] = v327(-); [rsi|R|w64] = v1423(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2340] #-1 [rdx|R|ts] [rax|R|w64] [rsi|R|w64]
gap (v1421(-) = [rax|R|t];) () 
          X64Cmp32 : Root && deoptimize if not equal #168 v1421(R) #311 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2339]
gap () () 
          ArchJmp [immediate:2338]
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2335] v67(R) [immediate:2336] [immediate:2337]
gap () () 
          [constant:1420] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2333] v1420(R) #310 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2334]
gap () () 
          v1416(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2332]
gap () () 
          [constant:1417] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2331] v1417(R)
gap () () 
          X64MovqCompressTagged : MRI v1416(R) [immediate:2329] [immediate:2330]
gap () () 
          ArchJmp [immediate:2328]
gap () () 
          [constant:1414] = ArchNop
gap () () 
          v1415(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2327]
gap () () 
          v1413(R) = X64MovqDecompressTaggedSigned : MRI v1415(R) [immediate:2326]
gap () ([rdx|R|ts] = v1413(-); [rax|R|w64] = v327(-); [rsi|R|w64] = v1414(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2325] #-1 [rdx|R|ts] [rax|R|w64] [rsi|R|w64]
gap (v1412(-) = [rax|R|t];) () 
          X64Cmp32 : Root && deoptimize if not equal #168 v1412(R) #309 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2324]
gap () () 
          ArchJmp [immediate:2323]
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2320] v67(R) [immediate:2321] [immediate:2322]
gap () () 
          [constant:1408] = ArchNop
gap () () 
          [constant:1411] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2318] v1411(R) #308 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2319]
gap () () 
          v1407(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2317]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2316] v1408(R)
gap () () 
          X64MovqCompressTagged : MRI v1407(R) [immediate:2314] [immediate:2315]
gap () () 
          ArchJmp [immediate:2313]
gap () () 
          [constant:1405] = ArchNop
gap () () 
          v1406(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2312]
gap () () 
          v1404(R) = X64MovqDecompressTaggedSigned : MRI v1406(R) [immediate:2311]
gap () ([rdx|R|ts] = v1404(-); [rax|R|w64] = v327(-); [rsi|R|w64] = v1405(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2310] #-1 [rdx|R|ts] [rax|R|w64] [rsi|R|w64]
gap (v1403(-) = [rax|R|t];) () 
          X64Cmp32 : Root && deoptimize if not equal #168 v1403(R) #307 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2309]
gap () () 
          ArchJmp [immediate:2308]
gap () () 
          [constant:1374] = ArchNop
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2305] v67(R) [immediate:2306] [immediate:2307]
gap () () 
          [constant:1402] = ArchNop
gap () () 
          [constant:1399] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2303] v1402(R) #306 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2304]
gap () () 
          v1401(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2302]
gap () () 
          v1384(R) = X64Movl : MRI v1401(R) [immediate:2301]
gap () () 
          v1383(R) = X64Movl : MRI v1401(R) [immediate:2300]
gap () () 
          v1382(R) = X64Movl : MRI v1401(R) [immediate:2299]
gap () () 
          v1394(R) = X64MovqDecompressTaggedSigned : MRI v1401(R) [immediate:2298]
gap () () 
          v1395(R) = X64Movq : MR v80(R)
gap () () 
          v1400(R) = X64Lea : MRI v1395(R) [immediate:2297]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v1400(R) [immediate:2295] [immediate:2296]
gap () () 
          ArchJmp [immediate:2294]
gap () ([rdx|R|w64] = v1399(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:2293] #-1 [rdx|R|w64]
gap (v1398(-) = [rax|R|tp];) () 
          v1396(R) = X64Lea : MRI v1398(R) [immediate:2292]
gap () (v1391 = v1396(-);) 
          ArchJmp [immediate:2291]
gap () (v1391 = v1395(-);) 
          ArchJmp [immediate:2290]
gap () () 
          [constant:1381] = ArchNop
gap () () 
          [constant:1387] = ArchNop
gap () (v1393(R) = v1394(-);) 
          v1393(1) = X64Sar32 v1393(R) #1
gap () () 
          v1392(R) = X64Lea : MRI v1391(R) [immediate:2289]
gap () (v1390(R) = v1393(-);) 
          v1390(1) = X64And32 v1390(R) #1073740800
gap () () 
          X64Movq : MR v80(R) v1392(R)
gap () () 
          v1389(R) = X64Lea : MRI v1391(R) [immediate:2288]
gap () (v1388(R) = v1390(-);) 
          v1388(1) = X64Or32 v1388(R) #6
gap () (v1376 = v1389(-);) 
          v1376(1) = ArchNop v1376
gap () () 
          v1386(R) = X64Lea32 : MR1 v1388(R) v1388(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2287] v1387(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2286] v1386(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2285] v1384(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2284] v1383(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2283] v1382(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2282] v1381(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2281] v1381(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2280] v1374(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2279] v67(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2278] v1376(R)
gap () () 
          ArchJmp [immediate:2277]
gap () () 
          v1373(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2276]
gap () () 
          X64MovqCompressTagged : MRI v1373(R) [immediate:2275] v1374(R)
gap () () 
          ArchJmp [immediate:2274]
gap () () 
          v1367(R) = X64Movq : MR v80(R)
gap () () 
          [constant:1371] = ArchNop
gap () () 
          v1372(R) = X64Lea : MRI v1367(R) [immediate:2273]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v1372(R) [immediate:2271] [immediate:2272]
gap () () 
          ArchJmp [immediate:2270]
gap () ([rdx|R|w64] = v1371(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:2269] #-1 [rdx|R|w64]
gap (v1370(-) = [rax|R|tp];) () 
          v1368(R) = X64Lea : MRI v1370(R) [immediate:2268]
gap () (v1366 = v1368(-);) 
          ArchJmp [immediate:2267]
gap () (v1366 = v1367(-);) 
          ArchJmp [immediate:2266]
gap () () 
          [constant:388] = ArchNop
gap () () 
          [constant:184] = ArchNop
gap () () 
          v1363(R) = X64Lea : MRI v1366(R) [immediate:2265]
gap () () 
          X64Movq : MR v80(R) v1363(R)
gap () () 
          v1365(R) = X64Lea : MRI v1366(R) [immediate:2264]
gap () (v1352 = v1365(-);) 
          v1352(1) = ArchNop v1352
gap () () 
          X64MovqCompressTagged : MRI v1352(R) [immediate:2263] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1352(R) [immediate:2262] v185(R)
gap () () 
          [constant:1364] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1352(R) [immediate:2261] v1364(R)
gap () () 
          X64MovqCompressTagged : MRI v1352(R) [immediate:2259] [immediate:2260]
gap () () 
          v1360(R) = X64Lea : MRI v1363(R) [immediate:2258]
gap () () 
          X64Movq : MR v80(R) v1360(R)
gap () () 
          v1362(R) = X64Lea : MRI v1363(R) [immediate:2257]
gap () (v1351 = v1362(-);) 
          v1351(1) = ArchNop v1351
gap () () 
          X64MovqCompressTagged : MRI v1351(R) [immediate:2256] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1351(R) [immediate:2255] v185(R)
gap () () 
          [constant:1361] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1351(R) [immediate:2254] v1361(R)
gap () () 
          X64MovqCompressTagged : MRI v1351(R) [immediate:2252] [immediate:2253]
gap () () 
          v1357(R) = X64Lea : MRI v1360(R) [immediate:2251]
gap () () 
          X64Movq : MR v80(R) v1357(R)
gap () () 
          v1359(R) = X64Lea : MRI v1360(R) [immediate:2250]
gap () (v1350 = v1359(-);) 
          v1350(1) = ArchNop v1350
gap () () 
          X64MovqCompressTagged : MRI v1350(R) [immediate:2249] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1350(R) [immediate:2248] v185(R)
gap () () 
          [constant:1358] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1350(R) [immediate:2247] v1358(R)
gap () () 
          X64MovqCompressTagged : MRI v1350(R) [immediate:2245] [immediate:2246]
gap () () 
          v1354(R) = X64Lea : MRI v1357(R) [immediate:2244]
gap () () 
          X64Movq : MR v80(R) v1354(R)
gap () () 
          v1356(R) = X64Lea : MRI v1357(R) [immediate:2243]
gap () (v1349 = v1356(-);) 
          v1349(1) = ArchNop v1349
gap () () 
          X64MovqCompressTagged : MRI v1349(R) [immediate:2242] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1349(R) [immediate:2241] v185(R)
gap () () 
          [constant:1355] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1349(R) [immediate:2240] v1355(R)
gap () () 
          X64MovqCompressTagged : MRI v1349(R) [immediate:2238] [immediate:2239]
gap () () 
          v1348(R) = X64Lea : MRI v1354(R) [immediate:2237]
gap () () 
          X64Movq : MR v80(R) v1348(R)
gap () () 
          v1353(R) = X64Lea : MRI v1354(R) [immediate:2236]
gap () (v1346 = v1353(-);) 
          v1346(1) = ArchNop v1346
gap () () 
          X64MovqCompressTagged : MRI v1346(R) [immediate:2235] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v1346(R) [immediate:2233] [immediate:2234]
gap () () 
          X64MovqCompressTagged : MRI v1346(R) [immediate:2232] v1352(R)
gap () () 
          X64MovqCompressTagged : MRI v1346(R) [immediate:2231] v1351(R)
gap () () 
          X64MovqCompressTagged : MRI v1346(R) [immediate:2230] v1350(R)
gap () () 
          X64MovqCompressTagged : MRI v1346(R) [immediate:2229] v1349(R)
gap () () 
          v1342(R) = X64Lea : MRI v1348(R) [immediate:2228]
gap () () 
          X64Movq : MR v80(R) v1342(R)
gap () () 
          v1347(R) = X64Lea : MRI v1348(R) [immediate:2227]
gap () (v1343 = v1347(-);) 
          v1343(1) = ArchNop v1343
gap () () 
          X64MovqCompressTagged : MRI v1343(R) [immediate:2226] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v1343(R) [immediate:2225] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v1343(R) [immediate:2224] v1346(R)
gap () () 
          X64MovqCompressTagged : MRI v1343(R) [immediate:2222] [immediate:2223]
gap () () 
          ArchStoreWithWriteBarrier : MRI v3(R) [immediate:2221] v1343(R)
gap () () 
          v1339(R) = X64Lea : MRI v1342(R) [immediate:2220]
gap () () 
          X64Movq : MR v80(R) v1339(R)
gap () () 
          v1341(R) = X64Lea : MRI v1342(R) [immediate:2219]
gap () (v1328 = v1341(-);) 
          v1328(1) = ArchNop v1328
gap () () 
          X64MovqCompressTagged : MRI v1328(R) [immediate:2218] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1328(R) [immediate:2217] v185(R)
gap () () 
          [constant:1340] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1328(R) [immediate:2216] v1340(R)
gap () () 
          X64MovqCompressTagged : MRI v1328(R) [immediate:2214] [immediate:2215]
gap () () 
          v1336(R) = X64Lea : MRI v1339(R) [immediate:2213]
gap () () 
          X64Movq : MR v80(R) v1336(R)
gap () () 
          v1338(R) = X64Lea : MRI v1339(R) [immediate:2212]
gap () (v1327 = v1338(-);) 
          v1327(1) = ArchNop v1327
gap () () 
          X64MovqCompressTagged : MRI v1327(R) [immediate:2211] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1327(R) [immediate:2210] v185(R)
gap () () 
          [constant:1337] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1327(R) [immediate:2209] v1337(R)
gap () () 
          X64MovqCompressTagged : MRI v1327(R) [immediate:2207] [immediate:2208]
gap () () 
          v1333(R) = X64Lea : MRI v1336(R) [immediate:2206]
gap () () 
          X64Movq : MR v80(R) v1333(R)
gap () () 
          v1335(R) = X64Lea : MRI v1336(R) [immediate:2205]
gap () (v1326 = v1335(-);) 
          v1326(1) = ArchNop v1326
gap () () 
          X64MovqCompressTagged : MRI v1326(R) [immediate:2204] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1326(R) [immediate:2203] v185(R)
gap () () 
          [constant:1334] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1326(R) [immediate:2202] v1334(R)
gap () () 
          X64MovqCompressTagged : MRI v1326(R) [immediate:2200] [immediate:2201]
gap () () 
          v1330(R) = X64Lea : MRI v1333(R) [immediate:2199]
gap () () 
          X64Movq : MR v80(R) v1330(R)
gap () () 
          v1332(R) = X64Lea : MRI v1333(R) [immediate:2198]
gap () (v1325 = v1332(-);) 
          v1325(1) = ArchNop v1325
gap () () 
          X64MovqCompressTagged : MRI v1325(R) [immediate:2197] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1325(R) [immediate:2196] v185(R)
gap () () 
          [constant:1331] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1325(R) [immediate:2195] v1331(R)
gap () () 
          X64MovqCompressTagged : MRI v1325(R) [immediate:2193] [immediate:2194]
gap () () 
          v1324(R) = X64Lea : MRI v1330(R) [immediate:2192]
gap () () 
          X64Movq : MR v80(R) v1324(R)
gap () () 
          v1329(R) = X64Lea : MRI v1330(R) [immediate:2191]
gap () (v1322 = v1329(-);) 
          v1322(1) = ArchNop v1322
gap () () 
          X64MovqCompressTagged : MRI v1322(R) [immediate:2190] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v1322(R) [immediate:2188] [immediate:2189]
gap () () 
          X64MovqCompressTagged : MRI v1322(R) [immediate:2187] v1328(R)
gap () () 
          X64MovqCompressTagged : MRI v1322(R) [immediate:2186] v1327(R)
gap () () 
          X64MovqCompressTagged : MRI v1322(R) [immediate:2185] v1326(R)
gap () () 
          X64MovqCompressTagged : MRI v1322(R) [immediate:2184] v1325(R)
gap () () 
          v1318(R) = X64Lea : MRI v1324(R) [immediate:2183]
gap () () 
          X64Movq : MR v80(R) v1318(R)
gap () () 
          v1323(R) = X64Lea : MRI v1324(R) [immediate:2182]
gap () (v1319 = v1323(-);) 
          v1319(1) = ArchNop v1319
gap () () 
          X64MovqCompressTagged : MRI v1319(R) [immediate:2181] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v1319(R) [immediate:2180] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v1319(R) [immediate:2179] v1322(R)
gap () () 
          X64MovqCompressTagged : MRI v1319(R) [immediate:2177] [immediate:2178]
gap () () 
          ArchStoreWithWriteBarrier : MRI v3(R) [immediate:2176] v1319(R)
gap () () 
          v1315(R) = X64Lea : MRI v1318(R) [immediate:2175]
gap () () 
          X64Movq : MR v80(R) v1315(R)
gap () () 
          v1317(R) = X64Lea : MRI v1318(R) [immediate:2174]
gap () (v1304 = v1317(-);) 
          v1304(1) = ArchNop v1304
gap () () 
          X64MovqCompressTagged : MRI v1304(R) [immediate:2173] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1304(R) [immediate:2172] v185(R)
gap () () 
          [constant:1316] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1304(R) [immediate:2171] v1316(R)
gap () () 
          X64MovqCompressTagged : MRI v1304(R) [immediate:2169] [immediate:2170]
gap () () 
          v1312(R) = X64Lea : MRI v1315(R) [immediate:2168]
gap () () 
          X64Movq : MR v80(R) v1312(R)
gap () () 
          v1314(R) = X64Lea : MRI v1315(R) [immediate:2167]
gap () (v1303 = v1314(-);) 
          v1303(1) = ArchNop v1303
gap () () 
          X64MovqCompressTagged : MRI v1303(R) [immediate:2166] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1303(R) [immediate:2165] v185(R)
gap () () 
          [constant:1313] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1303(R) [immediate:2164] v1313(R)
gap () () 
          X64MovqCompressTagged : MRI v1303(R) [immediate:2162] [immediate:2163]
gap () () 
          v1309(R) = X64Lea : MRI v1312(R) [immediate:2161]
gap () () 
          X64Movq : MR v80(R) v1309(R)
gap () () 
          v1311(R) = X64Lea : MRI v1312(R) [immediate:2160]
gap () (v1302 = v1311(-);) 
          v1302(1) = ArchNop v1302
gap () () 
          X64MovqCompressTagged : MRI v1302(R) [immediate:2159] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1302(R) [immediate:2158] v185(R)
gap () () 
          [constant:1310] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1302(R) [immediate:2157] v1310(R)
gap () () 
          X64MovqCompressTagged : MRI v1302(R) [immediate:2155] [immediate:2156]
gap () () 
          v1306(R) = X64Lea : MRI v1309(R) [immediate:2154]
gap () () 
          X64Movq : MR v80(R) v1306(R)
gap () () 
          v1308(R) = X64Lea : MRI v1309(R) [immediate:2153]
gap () (v1301 = v1308(-);) 
          v1301(1) = ArchNop v1301
gap () () 
          X64MovqCompressTagged : MRI v1301(R) [immediate:2152] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1301(R) [immediate:2151] v185(R)
gap () () 
          [constant:1307] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1301(R) [immediate:2150] v1307(R)
gap () () 
          X64MovqCompressTagged : MRI v1301(R) [immediate:2148] [immediate:2149]
gap () () 
          v1300(R) = X64Lea : MRI v1306(R) [immediate:2147]
gap () () 
          X64Movq : MR v80(R) v1300(R)
gap () () 
          v1305(R) = X64Lea : MRI v1306(R) [immediate:2146]
gap () (v1298 = v1305(-);) 
          v1298(1) = ArchNop v1298
gap () () 
          X64MovqCompressTagged : MRI v1298(R) [immediate:2145] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v1298(R) [immediate:2143] [immediate:2144]
gap () () 
          X64MovqCompressTagged : MRI v1298(R) [immediate:2142] v1304(R)
gap () () 
          X64MovqCompressTagged : MRI v1298(R) [immediate:2141] v1303(R)
gap () () 
          X64MovqCompressTagged : MRI v1298(R) [immediate:2140] v1302(R)
gap () () 
          X64MovqCompressTagged : MRI v1298(R) [immediate:2139] v1301(R)
gap () () 
          v1290(R) = X64Lea : MRI v1300(R) [immediate:2138]
gap () () 
          X64Movq : MR v80(R) v1290(R)
gap () () 
          v1299(R) = X64Lea : MRI v1300(R) [immediate:2137]
gap () (v1295 = v1299(-);) 
          v1295(1) = ArchNop v1295
gap () () 
          X64MovqCompressTagged : MRI v1295(R) [immediate:2136] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v1295(R) [immediate:2135] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v1295(R) [immediate:2134] v1298(R)
gap () () 
          X64MovqCompressTagged : MRI v1295(R) [immediate:2132] [immediate:2133]
gap () () 
          ArchStoreWithWriteBarrier : MRI v3(R) [immediate:2131] v1295(R)
gap () () 
          v4(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:2130]
gap () () 
          v5(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:2129]
gap () (v574(R) = v2(-);) 
          v574(1) = X64Sar32 v574(R) #1
gap () () 
          X64Test32 && deoptimize if not equal v2 #1 #305 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:2128] v5(-) v2(-)
gap () (v1294(R) = v20(-);) 
          v1294(1) = X64Sub32 && deoptimize if overflow v1294(R) v574 #304 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:2127] v5(-) v2(-)
gap () (v1287 = v1294(-);) 
          v1287(1) = ArchNop v1287
gap () () 
          X64Cmp32 && branch if equal v1287 #0 [immediate:2125] [immediate:2126]
gap () (v1293(R) = v1287(-);) 
          v1293(1) = X64Add32 && branch if overflow v1293(R) v1287(R) [immediate:2121] [immediate:2122] [immediate:2123] [immediate:2124]
gap () (v1292 = v1293(-);) 
          v1292(1) = ArchNop v1292
gap () (v1041 = v1292(-);) 
          ArchJmp [immediate:2120]
gap () () 
          [constant:1288] = ArchNop
gap () () 
          v1291(R) = X64Lea : MRI v1290(R) [immediate:2119]
gap () () 
          X64Movq : MR v80(R) v1291(R)
gap () () 
          v1289(R) = X64Lea : MRI v1290(R) [immediate:2118]
gap () (v1285 = v1289(-);) 
          v1285(1) = ArchNop v1285
gap () () 
          X64MovqCompressTagged : MRI v1285(R) [immediate:2117] v1288(R)
gap () () 
          v1286(R) = SSEInt32ToFloat64 v1287
gap () () 
          X64Movsd : MRI v1285(R) [immediate:2116] v1286(R)
gap () (v1041 = v1285(-);) 
          ArchJmp [immediate:2115]
gap () () 
          [constant:1283] = ArchNop
gap () () 
          [constant:1282] = ArchNop
gap () () 
          [constant:1281] = ArchNop
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v1282(-)
gap () ([rdi|R|t] = v5(-); [rdx|R|t] = v5(-); [rax|R|w64] = v1281(-); [rsi|R|t] = v1283(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2113] #-1 #303 v0(S) v1(S) v2(S) v3(S) v4(S) [immediate:2114] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v1248(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v4 #1 #302 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:2112] v1248(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v4(R) [immediate:2109] v178(R) [immediate:2110] [immediate:2111]
gap () () 
          ArchJmp [immediate:2108]
gap () () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:2107] v184(R)
gap () () 
          ArchJmp [immediate:2106]
gap () () 
          X64Cmp32 : MRI && branch if equal v4(R) [immediate:2103] v184(R) [immediate:2104] [immediate:2105]
gap () () 
          [constant:1278] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v4(R) [immediate:2101] v1278(R) #301 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:2102] v1248(-)
gap () () 
          v1271(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:2100]
gap () () 
          v1277(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:2099]
gap () () 
          v1275(R) = X64MovqDecompressTaggedSigned : MRI v1271(R) [immediate:2098]
gap () (v1266(R) = v1277(-);) 
          v1266(1) = X64Sar32 v1266(R) #1
gap () () 
          v1276(R) = X64Lea32 : MRI v1266(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v1276 #0 [immediate:2096] [immediate:2097]
gap () () 
          ArchDebugBreak
gap () () 
          ArchThrowTerminator
gap () (v1274(R) = v1275(-);) 
          v1274(1) = X64Sar32 v1274(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v1274 #0 [immediate:2094] [immediate:2095]
gap () () 
          [constant:1273] = ArchNop
gap () ([rax|R|t] = v4(-); [rbx|R|w64] = v327(-); [rsi|R|w64] = v1273(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2093] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1272(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1272 #1 #300 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:2092] v1248(-)
gap () (v1267 = v1272(-);) 
          ArchJmp [immediate:2091]
gap () (v1267 = v1271(-);) 
          ArchJmp [immediate:2090]
gap () () 
          v1270(R) = X64Movl : MRI v1267(R) [immediate:2089]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1270(R) [immediate:2087] [immediate:2088]
gap () () 
          [constant:1269] = ArchNop
gap () ([rax|R|t] = v4(-); [rsi|R|w64] = v1269(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2086] #-1 [rax|R|t] [rsi|R|w64]
gap (v1268(-) = [rax|R|t];) (v1263 = v1268(-);) 
          ArchJmp [immediate:2085]
gap () (v1263 = v1267(-);) 
          ArchJmp [immediate:2084]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1266 #0 [immediate:2082] [immediate:2083]
gap () () 
          X64MovqCompressTagged : MRI v4(R) [immediate:2080] [immediate:2081]
gap () () 
          ArchJmp [immediate:2079]
gap () () 
          ArchJmp [immediate:2078]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1263(R) [immediate:2077] v1248(R)
gap () () 
          ArchJmp [immediate:2076]
gap () () 
          v1256(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:2075]
gap () () 
          v1262(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:2074]
gap () () 
          v1260(R) = X64MovqDecompressTaggedSigned : MRI v1256(R) [immediate:2073]
gap () (v1251(R) = v1262(-);) 
          v1251(1) = X64Sar32 v1251(R) #1
gap () () 
          v1261(R) = X64Lea32 : MRI v1251(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v1261 #0 [immediate:2071] [immediate:2072]
gap () () 
          ArchDebugBreak
gap () () 
          ArchThrowTerminator
gap () (v1259(R) = v1260(-);) 
          v1259(1) = X64Sar32 v1259(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v1259 #0 [immediate:2069] [immediate:2070]
gap () () 
          [constant:1258] = ArchNop
gap () ([rax|R|t] = v4(-); [rbx|R|w64] = v327(-); [rsi|R|w64] = v1258(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2068] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1257(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1257 #1 #299 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:2067] v1248(-)
gap () (v1252 = v1257(-);) 
          ArchJmp [immediate:2066]
gap () (v1252 = v1256(-);) 
          ArchJmp [immediate:2065]
gap () () 
          v1255(R) = X64Movl : MRI v1252(R) [immediate:2064]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1255(R) [immediate:2062] [immediate:2063]
gap () () 
          [constant:1254] = ArchNop
gap () ([rax|R|t] = v4(-); [rsi|R|w64] = v1254(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2061] #-1 [rax|R|t] [rsi|R|w64]
gap (v1253(-) = [rax|R|t];) (v1247 = v1253(-);) 
          ArchJmp [immediate:2060]
gap () (v1247 = v1252(-);) 
          ArchJmp [immediate:2059]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1251 #0 [immediate:2057] [immediate:2058]
gap () () 
          X64MovqCompressTagged : MRI v4(R) [immediate:2055] [immediate:2056]
gap () () 
          ArchJmp [immediate:2054]
gap () () 
          ArchJmp [immediate:2053]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1247(R) [immediate:2052] v1248(R)
gap () () 
          ArchJmp [immediate:2051]
gap () () 
          [constant:1006] = ArchNop
gap () () 
          [constant:1005] = ArchNop
gap () () 
          [constant:1004] = ArchNop
gap () () 
          [constant:530] = ArchNop
gap () () 
          [constant:1054] = ArchNop
gap () () 
          [constant:1190] = ArchNop
gap () () 
          v1216(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:2050]
gap () () 
          v1246(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:2049]
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v1005(-)
gap () ([rdi|R|t] = v1246(-); [rdx|R|t] = v1246(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2047] #-1 #298 v0(S) v1(S) v2(S) v3(S) v1216(S) [immediate:2048] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v1213(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1216 #1 #297 v0(S) v1(-) v2(-) v3(S) v1216(-) [immediate:2046] v1213(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v1216(R) [immediate:2043] v184(R) [immediate:2044] [immediate:2045]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1216(R) [immediate:2041] v530(R) #296 v0(S) v1(-) v2(-) v3(S) v1216(-) [immediate:2042] v1213(-)
gap () () 
          v1238(R) = X64MovqDecompressTaggedPointer : MRI v1216(R) [immediate:2040]
gap () () 
          v1245(R) = X64MovqDecompressTaggedSigned : MRI v1216(R) [immediate:2039]
gap () (v1233(R) = v1245(-);) 
          v1233(1) = X64Sar32 v1233(R) #1
gap () () 
          v1244(R) = X64MovqDecompressTaggedSigned : MRI v1238(R) [immediate:2038]
gap () (v1242(R) = v1244(-);) 
          v1242(1) = X64Sar32 v1242(R) #1
gap () () 
          v1243(R) = X64Lea32 : MRI v1233(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1243 #1 #295 v0(S) v1(-) v2(-) v3(S) v1216(-) [immediate:2037] v1213(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1242 #1 [immediate:2035] [immediate:2036]
gap () () 
          [constant:1240] = ArchNop
gap () () 
          [constant:1241] = ArchNop
gap () ([rax|R|t] = v1216(-); [rbx|R|w64] = v1240(-); [rsi|R|w64] = v1241(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2034] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1239(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1239 #1 #294 v0(S) v1(-) v2(-) v3(S) v1216(-) [immediate:2033] v1213(-)
gap () (v1234 = v1239(-);) 
          ArchJmp [immediate:2032]
gap () (v1234 = v1238(-);) 
          ArchJmp [immediate:2031]
gap () () 
          v1237(R) = X64Movl : MRI v1234(R) [immediate:2030]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1237(R) [immediate:2028] [immediate:2029]
gap () () 
          [constant:1236] = ArchNop
gap () ([rax|R|t] = v1216(-); [rsi|R|w64] = v1236(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2027] #-1 [rax|R|t] [rsi|R|w64]
gap (v1235(-) = [rax|R|t];) (v1230 = v1235(-);) 
          ArchJmp [immediate:2026]
gap () (v1230 = v1234(-);) 
          ArchJmp [immediate:2025]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1233 #1 [immediate:2023] [immediate:2024]
gap () () 
          X64MovqCompressTagged : MRI v1216(R) [immediate:2021] [immediate:2022]
gap () () 
          ArchJmp [immediate:2020]
gap () () 
          ArchJmp [immediate:2019]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1230(R) [immediate:2018] v1213(R)
gap () () 
          ArchJmp [immediate:2017]
gap () () 
          v1222(R) = X64MovqDecompressTaggedPointer : MRI v1216(R) [immediate:2016]
gap () () 
          v1229(R) = X64MovqDecompressTaggedSigned : MRI v1216(R) [immediate:2015]
gap () (v1217(R) = v1229(-);) 
          v1217(1) = X64Sar32 v1217(R) #1
gap () () 
          v1228(R) = X64MovqDecompressTaggedSigned : MRI v1222(R) [immediate:2014]
gap () (v1226(R) = v1228(-);) 
          v1226(1) = X64Sar32 v1226(R) #1
gap () () 
          v1227(R) = X64Lea32 : MRI v1217(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1227 #1 #293 v0(S) v1(-) v2(-) v3(S) v1216(-) [immediate:2013] v1213(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1226 #1 [immediate:2011] [immediate:2012]
gap () () 
          [constant:1224] = ArchNop
gap () () 
          [constant:1225] = ArchNop
gap () ([rax|R|t] = v1216(-); [rbx|R|w64] = v1224(-); [rsi|R|w64] = v1225(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2010] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1223(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1223 #1 #292 v0(S) v1(-) v2(-) v3(S) v1216(-) [immediate:2009] v1213(-)
gap () (v1218 = v1223(-);) 
          ArchJmp [immediate:2008]
gap () (v1218 = v1222(-);) 
          ArchJmp [immediate:2007]
gap () () 
          v1221(R) = X64Movl : MRI v1218(R) [immediate:2006]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1221(R) [immediate:2004] [immediate:2005]
gap () () 
          [constant:1220] = ArchNop
gap () ([rax|R|t] = v1216(-); [rsi|R|w64] = v1220(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2003] #-1 [rax|R|t] [rsi|R|w64]
gap (v1219(-) = [rax|R|t];) (v1212 = v1219(-);) 
          ArchJmp [immediate:2002]
gap () (v1212 = v1218(-);) 
          ArchJmp [immediate:2001]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1217 #1 [immediate:1999] [immediate:2000]
gap () () 
          X64MovqCompressTagged : MRI v1216(R) [immediate:1997] [immediate:1998]
gap () () 
          ArchJmp [immediate:1996]
gap () () 
          ArchJmp [immediate:1995]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1212(R) [immediate:1994] v1213(R)
gap () () 
          ArchJmp [immediate:1993]
gap () () 
          [constant:176] = ArchNop
gap () () 
          [constant:1156] = ArchNop
gap () () 
          v1182(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1992]
gap () () 
          v1211(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1991]
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1005(-)
gap () ([rdi|R|t] = v1211(-); [rdx|R|t] = v1211(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1989] #-1 #291 v0(S) v1(S) v2(S) v3(S) v1182(S) [immediate:1990] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v1179(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1182 #1 #290 v0(S) v1(-) v2(-) v3(S) v1182(-) [immediate:1988] v1179(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v1182(R) [immediate:1985] v184(R) [immediate:1986] [immediate:1987]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1182(R) [immediate:1983] v530(R) #289 v0(S) v1(-) v2(-) v3(S) v1182(-) [immediate:1984] v1179(-)
gap () () 
          v1204(R) = X64MovqDecompressTaggedPointer : MRI v1182(R) [immediate:1982]
gap () () 
          v1210(R) = X64MovqDecompressTaggedSigned : MRI v1182(R) [immediate:1981]
gap () (v1199(R) = v1210(-);) 
          v1199(1) = X64Sar32 v1199(R) #1
gap () () 
          v1209(R) = X64MovqDecompressTaggedSigned : MRI v1204(R) [immediate:1980]
gap () (v1207(R) = v1209(-);) 
          v1207(1) = X64Sar32 v1207(R) #1
gap () () 
          v1208(R) = X64Lea32 : MRI v1199(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1208 #2 #288 v0(S) v1(-) v2(-) v3(S) v1182(-) [immediate:1979] v1179(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1207 #2 [immediate:1977] [immediate:1978]
gap () () 
          [constant:1206] = ArchNop
gap () ([rax|R|t] = v1182(-); [rbx|R|w64] = v1190(-); [rsi|R|w64] = v1206(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1976] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1205(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1205 #1 #287 v0(S) v1(-) v2(-) v3(S) v1182(-) [immediate:1975] v1179(-)
gap () (v1200 = v1205(-);) 
          ArchJmp [immediate:1974]
gap () (v1200 = v1204(-);) 
          ArchJmp [immediate:1973]
gap () () 
          v1203(R) = X64Movl : MRI v1200(R) [immediate:1972]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1203(R) [immediate:1970] [immediate:1971]
gap () () 
          [constant:1202] = ArchNop
gap () ([rax|R|t] = v1182(-); [rsi|R|w64] = v1202(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1969] #-1 [rax|R|t] [rsi|R|w64]
gap (v1201(-) = [rax|R|t];) (v1196 = v1201(-);) 
          ArchJmp [immediate:1968]
gap () (v1196 = v1200(-);) 
          ArchJmp [immediate:1967]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1199 #2 [immediate:1965] [immediate:1966]
gap () () 
          X64MovqCompressTagged : MRI v1182(R) [immediate:1963] [immediate:1964]
gap () () 
          ArchJmp [immediate:1962]
gap () () 
          ArchJmp [immediate:1961]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1196(R) [immediate:1960] v1179(R)
gap () () 
          ArchJmp [immediate:1959]
gap () () 
          v1188(R) = X64MovqDecompressTaggedPointer : MRI v1182(R) [immediate:1958]
gap () () 
          v1195(R) = X64MovqDecompressTaggedSigned : MRI v1182(R) [immediate:1957]
gap () (v1183(R) = v1195(-);) 
          v1183(1) = X64Sar32 v1183(R) #1
gap () () 
          v1194(R) = X64MovqDecompressTaggedSigned : MRI v1188(R) [immediate:1956]
gap () (v1192(R) = v1194(-);) 
          v1192(1) = X64Sar32 v1192(R) #1
gap () () 
          v1193(R) = X64Lea32 : MRI v1183(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1193 #2 #286 v0(S) v1(-) v2(-) v3(S) v1182(-) [immediate:1955] v1179(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1192 #2 [immediate:1953] [immediate:1954]
gap () () 
          [constant:1191] = ArchNop
gap () ([rax|R|t] = v1182(-); [rbx|R|w64] = v1190(-); [rsi|R|w64] = v1191(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1952] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1189(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1189 #1 #285 v0(S) v1(-) v2(-) v3(S) v1182(-) [immediate:1951] v1179(-)
gap () (v1184 = v1189(-);) 
          ArchJmp [immediate:1950]
gap () (v1184 = v1188(-);) 
          ArchJmp [immediate:1949]
gap () () 
          v1187(R) = X64Movl : MRI v1184(R) [immediate:1948]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1187(R) [immediate:1946] [immediate:1947]
gap () () 
          [constant:1186] = ArchNop
gap () ([rax|R|t] = v1182(-); [rsi|R|w64] = v1186(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1945] #-1 [rax|R|t] [rsi|R|w64]
gap (v1185(-) = [rax|R|t];) (v1178 = v1185(-);) 
          ArchJmp [immediate:1944]
gap () (v1178 = v1184(-);) 
          ArchJmp [immediate:1943]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1183 #2 [immediate:1941] [immediate:1942]
gap () () 
          X64MovqCompressTagged : MRI v1182(R) [immediate:1939] [immediate:1940]
gap () () 
          ArchJmp [immediate:1938]
gap () () 
          ArchJmp [immediate:1937]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1178(R) [immediate:1936] v1179(R)
gap () () 
          ArchJmp [immediate:1935]
gap () () 
          v1148(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1934]
gap () () 
          v1177(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1933]
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1005(-)
gap () ([rdi|R|t] = v1177(-); [rdx|R|t] = v1177(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1931] #-1 #284 v0(S) v1(S) v2(S) v3(S) v1148(S) [immediate:1932] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v1145(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1148 #1 #283 v0(S) v1(-) v2(-) v3(S) v1148(-) [immediate:1930] v1145(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v1148(R) [immediate:1927] v184(R) [immediate:1928] [immediate:1929]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1148(R) [immediate:1925] v530(R) #282 v0(S) v1(-) v2(-) v3(S) v1148(-) [immediate:1926] v1145(-)
gap () () 
          v1170(R) = X64MovqDecompressTaggedPointer : MRI v1148(R) [immediate:1924]
gap () () 
          v1176(R) = X64MovqDecompressTaggedSigned : MRI v1148(R) [immediate:1923]
gap () (v1165(R) = v1176(-);) 
          v1165(1) = X64Sar32 v1165(R) #1
gap () () 
          v1175(R) = X64MovqDecompressTaggedSigned : MRI v1170(R) [immediate:1922]
gap () (v1173(R) = v1175(-);) 
          v1173(1) = X64Sar32 v1173(R) #1
gap () () 
          v1174(R) = X64Lea32 : MRI v1165(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1174 #3 #281 v0(S) v1(-) v2(-) v3(S) v1148(-) [immediate:1921] v1145(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1173 #3 [immediate:1919] [immediate:1920]
gap () () 
          [constant:1172] = ArchNop
------------------------
gap () ([rax|R|t] = v1148(-); [rbx|R|w64] = v1156(-); [rsi|R|w64] = v1172(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1918] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
function: DrawQube
gap (v1171(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1171 #1 #280 v0(S) v1(-) v2(-) v3(S) v1148(-) [immediate:1917] v1145(-)
gap () (v1166 = v1171(-);) 
          ArchJmp [immediate:1916]
gap () (v1166 = v1170(-);) 
          ArchJmp [immediate:1915]
gap () () 
          v1169(R) = X64Movl : MRI v1166(R) [immediate:1914]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1169(R) [immediate:1912] [immediate:1913]
gap () () 
          [constant:1168] = ArchNop
gap () ([rax|R|t] = v1148(-); [rsi|R|w64] = v1168(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1911] #-1 [rax|R|t] [rsi|R|w64]
gap (v1167(-) = [rax|R|t];) (v1162 = v1167(-);) 
          ArchJmp [immediate:1910]
gap () (v1162 = v1166(-);) 
          ArchJmp [immediate:1909]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1165 #3 [immediate:1907] [immediate:1908]
gap () () 
          X64MovqCompressTagged : MRI v1148(R) [immediate:1905] [immediate:1906]
gap () () 
          ArchJmp [immediate:1904]
gap () () 
          ArchJmp [immediate:1903]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1162(R) [immediate:1902] v1145(R)
gap () () 
          ArchJmp [immediate:1901]
gap () () 
          v1154(R) = X64MovqDecompressTaggedPointer : MRI v1148(R) [immediate:1900]
gap () () 
          v1161(R) = X64MovqDecompressTaggedSigned : MRI v1148(R) [immediate:1899]
gap () (v1149(R) = v1161(-);) 
          v1149(1) = X64Sar32 v1149(R) #1
gap () () 
          v1160(R) = X64MovqDecompressTaggedSigned : MRI v1154(R) [immediate:1898]
gap () (v1158(R) = v1160(-);) 
          v1158(1) = X64Sar32 v1158(R) #1
gap () () 
          v1159(R) = X64Lea32 : MRI v1149(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1159 #3 #279 v0(S) v1(-) v2(-) v3(S) v1148(-) [immediate:1897] v1145(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1158 #3 [immediate:1895] [immediate:1896]
gap () () 
          [constant:1157] = ArchNop
gap () ([rax|R|t] = v1148(-); [rbx|R|w64] = v1156(-); [rsi|R|w64] = v1157(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1894] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1155(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1155 #1 #278 v0(S) v1(-) v2(-) v3(S) v1148(-) [immediate:1893] v1145(-)
gap () (v1150 = v1155(-);) 
          ArchJmp [immediate:1892]
gap () (v1150 = v1154(-);) 
          ArchJmp [immediate:1891]
gap () () 
          v1153(R) = X64Movl : MRI v1150(R) [immediate:1890]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1153(R) [immediate:1888] [immediate:1889]
gap () () 
          [constant:1152] = ArchNop
gap () ([rax|R|t] = v1148(-); [rsi|R|w64] = v1152(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1887] #-1 [rax|R|t] [rsi|R|w64]
gap (v1151(-) = [rax|R|t];) (v1144 = v1151(-);) 
          ArchJmp [immediate:1886]
add v891->v886
gap () (v1144 = v1150(-);) 
          ArchJmp [immediate:1885]
add v887->v889
gap () () 
          X64Cmp32 && branch if unsigned greater than v1149 #3 [immediate:1883] [immediate:1884]
add v881->v885
add v884->v885
gap () () 
          X64MovqCompressTagged : MRI v1148(R) [immediate:1881] [immediate:1882]
add v883->v879
gap () () 
          ArchJmp [immediate:1880]
add v863->v879
gap () () 
          ArchJmp [immediate:1879]
add v863->v879
add v863->v879
add v863->v879
gap () () 
          ArchStoreWithWriteBarrier : MRI v1144(R) [immediate:1878] v1145(R)
add v882->v881
gap () () 
          ArchJmp [immediate:1877]
add v880->v881
gap () () 
          [constant:1088] = ArchNop
add v49->v3
gap () () 
          v1114(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1876]
add v24->v3
add v879->v3
gap () () 
          v1143(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1875]
add v6->v2
gap () () 
          X64Push v1041(-)
add v10->v6
gap () () 
          X64Push v1041(-)
add v878->v6
gap () () 
          X64Push v1041(-)
add v875->v6
add v10->v6
gap () () 
          X64Push v1005(-)
add v874->v6
add v783->v2
add v784->v2
add v872->v6
add v871->v872
add v25->v871
gap () ([rdi|R|t] = v1143(-); [rdx|R|t] = v1143(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1873] #-1 #277 v0(S) v1(S) v2(S) v3(S) v1114(S) [immediate:1874] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
add v867->v871
add v870->v871
adding pairs 2, v729:0x7fffbc127170, v867:0x7fffbc026238
gap (v1111(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1114 #1 #276 v0(S) v1(-) v2(-) v3(S) v1114(-) [immediate:1872] v1111(-)
add v866->v783
add v865->v783
gap () () 
          X64Cmp32 : MRI && branch if equal v1114(R) [immediate:1869] v184(R) [immediate:1870] [immediate:1871]
add v786->v783
add v861->v863
add v859->v854
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1114(R) [immediate:1867] v530(R) #275 v0(S) v1(-) v2(-) v3(S) v1114(-) [immediate:1868] v1111(-)
add v855->v857
add v848->v853
gap () () 
          v1136(R) = X64MovqDecompressTaggedPointer : MRI v1114(R) [immediate:1866]
add v852->v853
gap () () 
          v1142(R) = X64MovqDecompressTaggedSigned : MRI v1114(R) [immediate:1865]
add v851->v827
add v850->v827
add v850->v827
gap () (v1131(R) = v1142(-);) 
          v1131(1) = X64Sar32 v1131(R) #1
add v850->v827
add v850->v827
gap () () 
          v1141(R) = X64MovqDecompressTaggedSigned : MRI v1136(R) [immediate:1864]
add v849->v848
add v847->v848
gap () (v1139(R) = v1141(-);) 
          v1139(1) = X64Sar32 v1139(R) #1
add v43->v764
add v24->v764
gap () () 
          v1140(R) = X64Lea32 : MRI v1131(R) #1
add v827->v764
add v25->v784
add v844->v784
add v846->v784
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1140 #4 #274 v0(S) v1(-) v2(-) v3(S) v1114(-) [immediate:1863] v1111(-)
add v843->v844
add v43->v843
gap () () 
          X64Cmp32 && branch if unsigned greater than v1139 #4 [immediate:1861] [immediate:1862]
add v839->v843
gap () () 
          [constant:1138] = ArchNop
add v842->v843
add v836->v839
add v43->v785
add v835->v785
gap () ([rax|R|t] = v1114(-); [rbx|R|w64] = v1122(-); [rsi|R|w64] = v1138(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1860] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
add v841->v785
add v837->v839
add v834->v839
gap (v1137(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1137 #1 #273 v0(S) v1(-) v2(-) v3(S) v1114(-) [immediate:1859] v1111(-)
add v829->v827
add v822->v784
gap () (v1132 = v1137(-);) 
          ArchJmp [immediate:1858]
add v824->v784
adding pairs 2, v805:0x7fffbc126e28, v822:0x7fffbc155ec8
gap () (v1132 = v1136(-);) 
          ArchJmp [immediate:1857]
add v43->v821
gap () () 
          v1135(R) = X64Movl : MRI v1132(R) [immediate:1856]
add v817->v821
add v820->v821
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1135(R) [immediate:1854] [immediate:1855]
add v800->v817
gap () () 
          [constant:1134] = ArchNop
add v815->v785
add v819->v785
add v799->v815
gap () ([rax|R|t] = v1114(-); [rsi|R|w64] = v1134(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1853] #-1 [rax|R|t] [rsi|R|w64]
add v802->v817
add v801->v815
gap (v1133(-) = [rax|R|t];) (v1128 = v1133(-);) 
          ArchJmp [immediate:1852]
add v798->v817
add v797->v815
gap () (v1128 = v1132(-);) 
          ArchJmp [immediate:1851]
add v807->v764
add v813->v764
gap () () 
          X64Cmp32 && branch if unsigned greater than v1131 #4 [immediate:1849] [immediate:1850]
add v814->v807
add v812->v806
gap () () 
          X64MovqCompressTagged : MRI v1114(R) [immediate:1847] [immediate:1848]
add v787->v805
gap () () 
          ArchJmp [immediate:1846]
add v804->v764
gap () () 
          ArchJmp [immediate:1845]
adding pairs 3, v805:0x7fffbc126e28, v789:0x7fffbc126d10
gap () () 
          ArchStoreWithWriteBarrier : MRI v1128(R) [immediate:1844] v1111(R)
add v49->v3
gap () () 
          ArchJmp [immediate:1843]
add v775->v3
add v771->v3
gap () () 
          v1120(R) = X64MovqDecompressTaggedPointer : MRI v1114(R) [immediate:1842]
add v781->v775
add v780->v779
gap () () 
          v1127(R) = X64MovqDecompressTaggedSigned : MRI v1114(R) [immediate:1841]
add v774->v772
add v769->v729
gap () (v1115(R) = v1127(-);) 
          v1115(1) = X64Sar32 v1115(R) #1
add v768->v3
gap () () 
          v1126(R) = X64MovqDecompressTaggedSigned : MRI v1120(R) [immediate:1840]
add v760->v729
add v49->v3
add v749->v3
gap () (v1124(R) = v1126(-);) 
          v1124(1) = X64Sar32 v1124(R) #1
add v758->v3
gap () () 
          v1125(R) = X64Lea32 : MRI v1115(R) #1
add v756->v749
add v43->v755
add v752->v755
add v754->v755
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1125 #4 #272 v0(S) v1(-) v2(-) v3(S) v1114(-) [immediate:1839] v1111(-)
add v751->v752
add v747->v749
gap () () 
          X64Cmp32 && branch if unsigned greater than v1124 #4 [immediate:1837] [immediate:1838]
add v43->v746
gap () () 
          [constant:1123] = ArchNop
add v743->v746
add v745->v746
add v742->v743
add v741->v6
gap () ([rax|R|t] = v1114(-); [rbx|R|w64] = v1122(-); [rsi|R|w64] = v1123(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1836] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
add v740->v741
add v25->v740
add v737->v740
add v739->v740
gap (v1121(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1121 #1 #271 v0(S) v1(-) v2(-) v3(S) v1114(-) [immediate:1835] v1111(-)
add v734->v737
gap () (v1116 = v1121(-);) 
          ArchJmp [immediate:1834]
add v736->v734
add v735->v734
gap () (v1116 = v1120(-);) 
          ArchJmp [immediate:1833]
add v722->v2
gap () () 
          v1119(R) = X64Movl : MRI v1116(R) [immediate:1832]
add v731->v6
add v733->v6
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1119(R) [immediate:1830] [immediate:1831]
add v724->v731
gap () () 
          [constant:1118] = ArchNop
add v725->v731
add v730->v722
gap () ([rax|R|t] = v1114(-); [rsi|R|w64] = v1118(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1829] #-1 [rax|R|t] [rsi|R|w64]
add v728->v722
add v718->v2
gap (v1117(-) = [rax|R|t];) (v1110 = v1117(-);) 
          ArchJmp [immediate:1828]
add v10->v718
add v720->v718
gap () (v1110 = v1116(-);) 
          ArchJmp [immediate:1827]
add v715->v720
add v25->v715
gap () () 
          X64Cmp32 && branch if unsigned greater than v1115 #4 [immediate:1825] [immediate:1826]
add v713->v715
add v719->v715
gap () () 
          X64MovqCompressTagged : MRI v1114(R) [immediate:1823] [immediate:1824]
gap () () 
          ArchJmp [immediate:1822]
add v716->v713
gap () () 
          ArchJmp [immediate:1821]
add v712->v711
gap () () 
          ArchStoreWithWriteBarrier : MRI v1110(R) [immediate:1820] v1111(R)
add v698->v2
gap () () 
          ArchJmp [immediate:1819]
add v10->v698
add v710->v698
gap () () 
          v1080(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1818]
add v709->v710
add v25->v709
gap () () 
          v1109(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1817]
add v706->v709
gap () () 
          X64Push v1041(-)
add v708->v709
gap () () 
          X64Push v2(-)
add v703->v706
gap () () 
          X64Push v1041(-)
add v705->v703
gap () () 
          X64Push v1005(-)
add v704->v703
add v691->v2
add v700->v698
add v702->v698
add v693->v700
add v694->v700
gap () ([rdi|R|t] = v1109(-); [rdx|R|t] = v1109(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1815] #-1 #270 v0(S) v1(S) v2(S) v3(S) v1080(S) [immediate:1816] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
add v699->v691
add v697->v691
add v685->v2
add v10->v685
gap (v1077(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1080 #1 #269 v0(S) v1(-) v2(-) v3(S) v1080(-) [immediate:1814] v1077(-)
add v689->v685
add v687->v689
gap () () 
          X64Cmp32 : MRI && branch if equal v1080(R) [immediate:1811] v184(R) [immediate:1812] [immediate:1813]
add v25->v687
add v682->v687
add v688->v682
add v686->v687
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1080(R) [immediate:1809] v530(R) #268 v0(S) v1(-) v2(-) v3(S) v1080(-) [immediate:1810] v1077(-)
add v683->v682
add v669->v2
gap () () 
          v1102(R) = X64MovqDecompressTaggedPointer : MRI v1080(R) [immediate:1808]
add v10->v669
add v681->v669
gap () () 
          v1108(R) = X64MovqDecompressTaggedSigned : MRI v1080(R) [immediate:1807]
add v680->v681
add v25->v680
gap () (v1097(R) = v1108(-);) 
          v1097(1) = X64Sar32 v1097(R) #1
add v677->v680
add v679->v680
gap () () 
          v1107(R) = X64MovqDecompressTaggedSigned : MRI v1102(R) [immediate:1806]
add v674->v677
add v676->v674
gap () (v1105(R) = v1107(-);) 
          v1105(1) = X64Sar32 v1105(R) #1
add v675->v674
gap () () 
          v1106(R) = X64Lea32 : MRI v1097(R) #1
add v662->v2
add v671->v669
add v673->v669
add v664->v671
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1106 #5 #267 v0(S) v1(-) v2(-) v3(S) v1080(-) [immediate:1805] v1077(-)
add v665->v671
add v670->v662
gap () () 
          X64Cmp32 && branch if unsigned greater than v1105 #5 [immediate:1803] [immediate:1804]
add v668->v662
gap () () 
          [constant:1104] = ArchNop
add v656->v2
add v10->v656
add v660->v656
add v658->v660
gap () ([rax|R|t] = v1080(-); [rbx|R|w64] = v1088(-); [rsi|R|w64] = v1104(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1802] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
add v25->v658
add v653->v658
add v659->v653
add v657->v658
gap (v1103(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1103 #1 #266 v0(S) v1(-) v2(-) v3(S) v1080(-) [immediate:1801] v1077(-)
add v654->v653
gap () (v1098 = v1103(-);) 
          ArchJmp [immediate:1800]
add v640->v2
add v10->v640
gap () (v1098 = v1102(-);) 
          ArchJmp [immediate:1799]
add v652->v640
add v651->v652
gap () () 
          v1101(R) = X64Movl : MRI v1098(R) [immediate:1798]
add v25->v651
add v648->v651
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1101(R) [immediate:1796] [immediate:1797]
add v650->v651
gap () () 
          [constant:1100] = ArchNop
add v645->v648
add v647->v645
add v646->v645
gap () ([rax|R|t] = v1080(-); [rsi|R|w64] = v1100(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1795] #-1 [rax|R|t] [rsi|R|w64]
add v633->v2
add v642->v640
gap (v1099(-) = [rax|R|t];) (v1094 = v1099(-);) 
          ArchJmp [immediate:1794]
add v644->v640
add v635->v642
gap () (v1094 = v1098(-);) 
          ArchJmp [immediate:1793]
add v636->v642
add v641->v633
gap () () 
          X64Cmp32 && branch if unsigned greater than v1097 #5 [immediate:1791] [immediate:1792]
add v639->v633
add v627->v2
gap () () 
          X64MovqCompressTagged : MRI v1080(R) [immediate:1789] [immediate:1790]
add v10->v627
gap () () 
          ArchJmp [immediate:1788]
add v631->v627
gap () () 
          ArchJmp [immediate:1787]
add v629->v631
add v25->v629
gap () () 
          ArchStoreWithWriteBarrier : MRI v1094(R) [immediate:1786] v1077(R)
add v624->v629
gap () () 
          ArchJmp [immediate:1785]
add v630->v624
gap () () 
          v1086(R) = X64MovqDecompressTaggedPointer : MRI v1080(R) [immediate:1784]
add v628->v629
add v625->v624
gap () () 
          v1093(R) = X64MovqDecompressTaggedSigned : MRI v1080(R) [immediate:1783]
add v49->v3
add v621->v3
gap () (v1081(R) = v1093(-);) 
          v1081(1) = X64Sar32 v1081(R) #1
add v623->v3
add v619->v621
gap () () 
          v1092(R) = X64MovqDecompressTaggedSigned : MRI v1086(R) [immediate:1782]
add v43->v618
add v615->v618
gap () (v1090(R) = v1092(-);) 
          v1090(1) = X64Sar32 v1090(R) #1
add v617->v618
add v614->v615
gap () () 
          v1091(R) = X64Lea32 : MRI v1081(R) #1
add v605->v2
add v10->v605
add v613->v605
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1091 #5 #265 v0(S) v1(-) v2(-) v3(S) v1080(-) [immediate:1781] v1077(-)
add v612->v613
add v25->v612
gap () () 
          X64Cmp32 && branch if unsigned greater than v1090 #5 [immediate:1779] [immediate:1780]
add v609->v612
gap () () 
          [constant:1089] = ArchNop
add v611->v612
add v606->v609
add v608->v606
add v607->v606
gap () ([rax|R|t] = v1080(-); [rbx|R|w64] = v1088(-); [rsi|R|w64] = v1089(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1778] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
add v594->v2
add v602->v605
add v604->v605
add v596->v602
gap (v1087(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1087 #1 #264 v0(S) v1(-) v2(-) v3(S) v1080(-) [immediate:1777] v1077(-)
add v597->v602
gap () (v1082 = v1087(-);) 
          ArchJmp [immediate:1776]
add v601->v594
add v600->v594
gap () (v1082 = v1086(-);) 
          ArchJmp [immediate:1775]
add v590->v2
gap () () 
          v1085(R) = X64Movl : MRI v1082(R) [immediate:1774]
add v10->v590
add v592->v590
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1085(R) [immediate:1772] [immediate:1773]
add v586->v592
gap () () 
          [constant:1084] = ArchNop
add v25->v586
add v584->v586
add v591->v586
gap () ([rax|R|t] = v1080(-); [rsi|R|w64] = v1084(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1771] #-1 [rax|R|t] [rsi|R|w64]
gap (v1083(-) = [rax|R|t];) (v1076 = v1083(-);) 
          ArchJmp [immediate:1770]
add v588->v584
gap () (v1076 = v1082(-);) 
          ArchJmp [immediate:1769]
add v583->v582
add v569->v2
gap () () 
          X64Cmp32 && branch if unsigned greater than v1081 #5 [immediate:1767] [immediate:1768]
add v10->v569
gap () () 
          X64MovqCompressTagged : MRI v1080(R) [immediate:1765] [immediate:1766]
add v581->v569
gap () () 
          ArchJmp [immediate:1764]
add v580->v581
gap () () 
          ArchJmp [immediate:1763]
add v25->v580
add v577->v580
gap () () 
          ArchStoreWithWriteBarrier : MRI v1076(R) [immediate:1762] v1077(R)
add v579->v580
gap () () 
          ArchJmp [immediate:1761]
add v574->v577
gap () () 
          [constant:1019] = ArchNop
add v576->v574
gap () () 
          v1046(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1760]
add v575->v574
add v467->v2
gap () () 
          v1075(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1759]
add v571->v569
gap () () 
          X64Push v1041(-)
add v573->v569
gap () () 
          X64Push v2(-)
add v468->v571
gap () () 
          X64Push v2(-)
add v469->v571
gap () () 
          X64Push v1005(-)
add v570->v467
add v568->v467
add v470->v467
add v43->v565
add v563->v565
add v566->v565
gap () ([rdi|R|t] = v1075(-); [rdx|R|t] = v1075(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1757] #-1 #263 v0(S) v1(S) v2(S) v3(S) v1046(S) [immediate:1758] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
add v507->v563
add v43->v561
add v559->v561
add v562->v561
gap (v1043(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1046 #1 #262 v0(S) v1(-) v2(-) v3(S) v1046(-) [immediate:1756] v1043(-)
add v508->v559
add v43->v556
add v554->v556
gap () () 
          X64Cmp32 : MRI && branch if equal v1046(R) [immediate:1753] v184(R) [immediate:1754] [immediate:1755]
add v557->v556
add v509->v554
add v43->v510
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1046(R) [immediate:1751] v530(R) #261 v0(S) v1(-) v2(-) v3(S) v1046(-) [immediate:1752] v1043(-)
add v548->v510
add v550->v510
gap () () 
          v1068(R) = X64MovqDecompressTaggedPointer : MRI v1046(R) [immediate:1750]
add v547->v548
gap () () 
          v1074(R) = X64MovqDecompressTaggedSigned : MRI v1046(R) [immediate:1749]
add v536->v535
add v534->v535
gap () (v1063(R) = v1074(-);) 
          v1063(1) = X64Sar32 v1063(R) #1
add v521->v534
add v533->v470
gap () () 
          v1073(R) = X64MovqDecompressTaggedSigned : MRI v1068(R) [immediate:1748]
add v10->v533
add v445->v533
gap () (v1071(R) = v1073(-);) 
          v1071(1) = X64Sar32 v1071(R) #1
add v531->v445
gap () () 
          v1072(R) = X64Lea32 : MRI v1063(R) #1
add v532->v531
add v529->v531
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1072 #6 #260 v0(S) v1(-) v2(-) v3(S) v1046(-) [immediate:1747] v1043(-)
add v461->v456
add v457->v459
gap () () 
          X64Cmp32 && branch if unsigned greater than v1071 #6 [immediate:1745] [immediate:1746]
add v455->v454
gap () () 
          [constant:1070] = ArchNop
add v453->v454
add v452->v450
add v451->v450
add v446->v445
gap () ([rax|R|t] = v1046(-); [rbx|R|w64] = v1054(-); [rsi|R|w64] = v1070(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1744] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
add v440->v2
add v10->v440
add v444->v440
add v442->v444
gap (v1069(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1069 #1 #259 v0(S) v1(-) v2(-) v3(S) v1046(-) [immediate:1743] v1043(-)
add v25->v442
add v437->v442
gap () (v1064 = v1069(-);) 
          ArchJmp [immediate:1742]
add v443->v437
add v441->v442
gap () (v1064 = v1068(-);) 
          ArchJmp [immediate:1741]
add v438->v437
gap () () 
          v1067(R) = X64Movl : MRI v1064(R) [immediate:1740]
add v424->v2
add v10->v424
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1067(R) [immediate:1738] [immediate:1739]
add v436->v424
gap () () 
          [constant:1066] = ArchNop
add v435->v436
add v25->v435
add v432->v435
gap () ([rax|R|t] = v1046(-); [rsi|R|w64] = v1066(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1737] #-1 [rax|R|t] [rsi|R|w64]
add v434->v435
add v429->v432
gap (v1065(-) = [rax|R|t];) (v1060 = v1065(-);) 
          ArchJmp [immediate:1736]
add v431->v429
add v430->v429
gap () (v1060 = v1064(-);) 
          ArchJmp [immediate:1735]
add v417->v2
add v426->v424
gap () () 
          X64Cmp32 && branch if unsigned greater than v1063 #6 [immediate:1733] [immediate:1734]
add v428->v424
gap () () 
          X64MovqCompressTagged : MRI v1046(R) [immediate:1731] [immediate:1732]
add v419->v426
gap () () 
          ArchJmp [immediate:1730]
add v420->v426
gap () () 
          ArchJmp [immediate:1729]
add v425->v417
add v423->v417
gap () () 
          ArchStoreWithWriteBarrier : MRI v1060(R) [immediate:1728] v1043(R)
add v411->v2
gap () () 
          ArchJmp [immediate:1727]
add v10->v411
add v415->v411
gap () () 
          v1052(R) = X64MovqDecompressTaggedPointer : MRI v1046(R) [immediate:1726]
add v413->v415
gap () () 
          v1059(R) = X64MovqDecompressTaggedSigned : MRI v1046(R) [immediate:1725]
add v25->v413
add v408->v413
gap () (v1047(R) = v1059(-);) 
          v1047(1) = X64Sar32 v1047(R) #1
add v414->v408
add v412->v413
gap () () 
          v1058(R) = X64MovqDecompressTaggedSigned : MRI v1052(R) [immediate:1724]
add v409->v408
add v395->v2
gap () (v1056(R) = v1058(-);) 
          v1056(1) = X64Sar32 v1056(R) #1
add v10->v395
add v407->v395
gap () () 
          v1057(R) = X64Lea32 : MRI v1047(R) #1
add v406->v407
add v25->v406
add v403->v406
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1057 #6 #258 v0(S) v1(-) v2(-) v3(S) v1046(-) [immediate:1723] v1043(-)
add v405->v406
add v400->v403
gap () () 
          X64Cmp32 && branch if unsigned greater than v1056 #6 [immediate:1721] [immediate:1722]
add v402->v400
gap () () 
          [constant:1055] = ArchNop
add v401->v400
add v289->v2
add v397->v395
add v399->v395
gap () ([rax|R|t] = v1046(-); [rbx|R|w64] = v1054(-); [rsi|R|w64] = v1055(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1720] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
add v290->v397
add v291->v397
add v396->v289
add v394->v289
gap (v1053(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1053 #1 #257 v0(S) v1(-) v2(-) v3(S) v1046(-) [immediate:1719] v1043(-)
add v292->v289
gap () (v1048 = v1053(-);) 
          ArchJmp [immediate:1718]
add v43->v391
add v389->v391
gap () (v1048 = v1052(-);) 
          ArchJmp [immediate:1717]
add v392->v391
gap () () 
          v1051(R) = X64Movl : MRI v1048(R) [immediate:1716]
add v331->v389
add v43->v387
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1051(R) [immediate:1714] [immediate:1715]
add v385->v387
gap () () 
          [constant:1050] = ArchNop
add v388->v387
add v332->v385
gap () ([rax|R|t] = v1046(-); [rsi|R|w64] = v1050(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1713] #-1 [rax|R|t] [rsi|R|w64]
add v43->v382
add v380->v382
add v383->v382
gap (v1049(-) = [rax|R|t];) (v1042 = v1049(-);) 
          ArchJmp [immediate:1712]
add v333->v380
gap () (v1042 = v1048(-);) 
          ArchJmp [immediate:1711]
add v43->v334
add v374->v334
gap () () 
          X64Cmp32 && branch if unsigned greater than v1047 #6 [immediate:1709] [immediate:1710]
add v376->v334
add v371->v374
gap () () 
          X64MovqCompressTagged : MRI v1046(R) [immediate:1707] [immediate:1708]
add v360->v359
gap () () 
          ArchJmp [immediate:1706]
add v358->v359
gap () () 
          ArchJmp [immediate:1705]
add v345->v358
add v357->v292
gap () () 
          ArchStoreWithWriteBarrier : MRI v1042(R) [immediate:1704] v1043(R)
add v10->v357
gap () () 
          ArchJmp [immediate:1703]
add v267->v357
add v355->v267
gap () () 
          v1011(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1702]
add v356->v355
gap () () 
          v1040(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1701]
add v353->v355
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v1041(-)
add v283->v278
gap () () 
          X64Push v2(-)
add v279->v281
gap () () 
          X64Push v1005(-)
add v277->v276
add v275->v276
add v274->v272
add v273->v272
add v268->v267
add v262->v2
add v10->v262
gap () ([rdi|R|t] = v1040(-); [rdx|R|t] = v1040(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1699] #-1 #256 v0(S) v1(S) v2(S) v3(S) v1011(S) [immediate:1700] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
add v266->v262
add v264->v266
add v25->v264
add v259->v264
gap (v1008(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1011 #1 #255 v0(S) v1(-) v2(-) v3(S) v1011(-) [immediate:1698] v1008(-)
add v265->v259
add v263->v264
gap () () 
          X64Cmp32 : MRI && branch if equal v1011(R) [immediate:1695] v184(R) [immediate:1696] [immediate:1697]
add v260->v259
add v49->v3
add v256->v3
add v258->v3
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1011(R) [immediate:1693] v530(R) #254 v0(S) v1(-) v2(-) v3(S) v1011(-) [immediate:1694] v1008(-)
add v254->v256
add v43->v253
gap () () 
          v1033(R) = X64MovqDecompressTaggedPointer : MRI v1011(R) [immediate:1692]
add v250->v253
add v252->v253
gap () () 
          v1039(R) = X64MovqDecompressTaggedSigned : MRI v1011(R) [immediate:1691]
add v249->v250
add v236->v2
gap () (v1028(R) = v1039(-);) 
          v1028(1) = X64Sar32 v1028(R) #1
add v10->v236
add v248->v236
gap () () 
          v1038(R) = X64MovqDecompressTaggedSigned : MRI v1033(R) [immediate:1690]
add v247->v248
add v25->v247
gap () (v1036(R) = v1038(-);) 
          v1036(1) = X64Sar32 v1036(R) #1
add v240->v247
add v246->v247
gap () () 
          v1037(R) = X64Lea32 : MRI v1028(R) #1
add v243->v240
add v245->v243
add v244->v243
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1037 #7 #253 v0(S) v1(-) v2(-) v3(S) v1011(-) [immediate:1689] v1008(-)
add v242->v2
add v237->v240
gap () () 
          X64Cmp32 && branch if unsigned greater than v1036 #7 [immediate:1687] [immediate:1688]
add v239->v237
gap () () 
          [constant:1035] = ArchNop
add v238->v237
add v225->v2
add v233->v236
add v235->v236
gap () ([rax|R|t] = v1011(-); [rbx|R|w64] = v1019(-); [rsi|R|w64] = v1035(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1686] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
add v227->v233
add v228->v233
add v232->v225
add v231->v225
gap (v1034(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1034 #1 #252 v0(S) v1(-) v2(-) v3(S) v1011(-) [immediate:1685] v1008(-)
add v219->v2
add v10->v219
gap () (v1029 = v1034(-);) 
          ArchJmp [immediate:1684]
add v223->v219
gap () (v1029 = v1033(-);) 
          ArchJmp [immediate:1683]
add v221->v223
add v25->v221
gap () () 
          v1032(R) = X64Movl : MRI v1029(R) [immediate:1682]
add v216->v221
add v222->v216
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1032(R) [immediate:1680] [immediate:1681]
add v220->v221
gap () () 
          [constant:1031] = ArchNop
add v217->v216
add v203->v2
add v10->v203
gap () ([rax|R|t] = v1011(-); [rsi|R|w64] = v1031(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1679] #-1 [rax|R|t] [rsi|R|w64]
add v215->v203
add v214->v215
gap (v1030(-) = [rax|R|t];) (v1025 = v1030(-);) 
          ArchJmp [immediate:1678]
add v25->v214
add v211->v214
gap () (v1025 = v1029(-);) 
          ArchJmp [immediate:1677]
add v213->v214
add v208->v211
gap () () 
          X64Cmp32 && branch if unsigned greater than v1028 #7 [immediate:1675] [immediate:1676]
add v210->v208
gap () () 
          X64MovqCompressTagged : MRI v1011(R) [immediate:1673] [immediate:1674]
add v209->v208
gap () () 
          ArchJmp [immediate:1672]
add v196->v2
gap () () 
          ArchJmp [immediate:1671]
add v205->v203
add v207->v203
gap () () 
          ArchStoreWithWriteBarrier : MRI v1025(R) [immediate:1670] v1008(R)
add v198->v205
gap () () 
          ArchJmp [immediate:1669]
add v199->v205
add v204->v196
gap () () 
          v1017(R) = X64MovqDecompressTaggedPointer : MRI v1011(R) [immediate:1668]
add v202->v196
gap () () 
          v1024(R) = X64MovqDecompressTaggedSigned : MRI v1011(R) [immediate:1667]
add v190->v2
add v10->v190
gap () (v1012(R) = v1024(-);) 
          v1012(1) = X64Sar32 v1012(R) #1
add v194->v190
add v192->v194
gap () () 
          v1023(R) = X64MovqDecompressTaggedSigned : MRI v1017(R) [immediate:1666]
add v25->v192
add v187->v192
gap () (v1021(R) = v1023(-);) 
          v1021(1) = X64Sar32 v1021(R) #1
add v193->v187
add v191->v192
gap () () 
          v1022(R) = X64Lea32 : MRI v1012(R) #1
add v188->v187
add v174->v2
add v10->v174
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1022 #7 #251 v0(S) v1(-) v2(-) v3(S) v1011(-) [immediate:1665] v1008(-)
add v186->v174
add v185->v186
gap () () 
          X64Cmp32 && branch if unsigned greater than v1021 #7 [immediate:1663] [immediate:1664]
add v25->v185
gap () () 
          [constant:1020] = ArchNop
add v182->v185
add v184->v185
add v179->v182
add v181->v179
gap () ([rax|R|t] = v1011(-); [rbx|R|w64] = v1019(-); [rsi|R|w64] = v1020(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1662] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
add v180->v179
add v167->v2
add v176->v174
add v178->v174
gap (v1018(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1018 #1 #250 v0(S) v1(-) v2(-) v3(S) v1011(-) [immediate:1661] v1008(-)
gap () (v1013 = v1018(-);) 
          ArchJmp [immediate:1660]
add v169->v176
gap () (v1013 = v1017(-);) 
          ArchJmp [immediate:1659]
add v170->v176
gap () () 
          v1016(R) = X64Movl : MRI v1013(R) [immediate:1658]
add v175->v167
add v173->v167
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1016(R) [immediate:1656] [immediate:1657]
add v161->v2
gap () () 
          [constant:1015] = ArchNop
add v10->v161
add v165->v161
add v163->v165
gap () ([rax|R|t] = v1011(-); [rsi|R|w64] = v1015(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1655] #-1 [rax|R|t] [rsi|R|w64]
add v25->v163
add v158->v163
gap (v1014(-) = [rax|R|t];) (v1007 = v1014(-);) 
          ArchJmp [immediate:1654]
add v164->v158
add v162->v163
gap () (v1007 = v1013(-);) 
          ArchJmp [immediate:1653]
add v159->v158
add v49->v3
gap () () 
          X64Cmp32 && branch if unsigned greater than v1012 #7 [immediate:1651] [immediate:1652]
gap () () 
          X64MovqCompressTagged : MRI v1011(R) [immediate:1649] [immediate:1650]
gap () () 
          ArchJmp [immediate:1648]
gap () () 
          ArchJmp [immediate:1647]
add v155->v3
gap () () 
          ArchStoreWithWriteBarrier : MRI v1007(R) [immediate:1646] v1008(R)
add v157->v3
gap () () 
          ArchJmp [immediate:1645]
add v153->v155
add v43->v152
gap () () 
          v974(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1644]
add v149->v152
add v151->v152
gap () () 
          v1003(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1643]
add v148->v149
gap () () 
          X64Push [immediate:1640]
add v139->v2
gap () () 
          X64Push [immediate:1641]
add v10->v139
gap () () 
          X64Push [immediate:1642]
add v147->v139
gap () () 
          X64Push v1005(-)
add v146->v147
add v25->v146
add v143->v146
add v145->v146
add v140->v143
add v142->v140
gap () ([rdi|R|t] = v1003(-); [rdx|R|t] = v1003(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1638] #-1 #249 v0(S) v1(S) v2(S) v3(S) v974(S) [immediate:1639] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
add v141->v140
add v128->v2
add v136->v139
add v138->v139
gap (v971(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v974 #1 #248 v0(S) v1(-) v2(-) v3(S) v974(-) [immediate:1637] v971(-)
add v130->v136
add v131->v136
add v135->v128
gap () () 
          X64Cmp32 : MRI && branch if equal v974(R) [immediate:1634] v184(R) [immediate:1635] [immediate:1636]
add v134->v128
add v122->v2
add v10->v122
add v126->v122
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v974(R) [immediate:1632] v530(R) #247 v0(S) v1(-) v2(-) v3(S) v974(-) [immediate:1633] v971(-)
add v124->v126
gap () () 
          v996(R) = X64MovqDecompressTaggedPointer : MRI v974(R) [immediate:1631]
add v25->v124
add v119->v124
gap () () 
          v1002(R) = X64MovqDecompressTaggedSigned : MRI v974(R) [immediate:1630]
add v125->v119
add v123->v124
gap () (v991(R) = v1002(-);) 
          v991(1) = X64Sar32 v991(R) #1
add v120->v119
add v106->v2
gap () () 
          v1001(R) = X64MovqDecompressTaggedSigned : MRI v996(R) [immediate:1629]
add v10->v106
add v118->v106
gap () (v999(R) = v1001(-);) 
          v999(1) = X64Sar32 v999(R) #1
add v117->v118
add v25->v117
gap () () 
          v1000(R) = X64Lea32 : MRI v991(R) #1
add v114->v117
add v116->v117
add v111->v114
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1000 #8 #246 v0(S) v1(-) v2(-) v3(S) v974(-) [immediate:1628] v971(-)
add v113->v111
add v112->v111
gap () () 
          X64Cmp32 && branch if unsigned greater than v999 #8 [immediate:1626] [immediate:1627]
add v99->v2
gap () () 
          [constant:998] = ArchNop
add v108->v106
add v110->v106
add v101->v108
add v102->v108
gap () ([rax|R|t] = v974(-); [rbx|R|w64] = v982(-); [rsi|R|w64] = v998(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1625] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
add v107->v99
add v105->v99
add v93->v2
add v10->v93
gap (v997(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v997 #1 #245 v0(S) v1(-) v2(-) v3(S) v974(-) [immediate:1624] v971(-)
add v97->v93
add v95->v97
gap () (v992 = v997(-);) 
          ArchJmp [immediate:1623]
add v25->v95
add v90->v95
gap () (v992 = v996(-);) 
          ArchJmp [immediate:1622]
add v96->v90
gap () () 
          v995(R) = X64Movl : MRI v992(R) [immediate:1621]
add v94->v95
add v91->v90
gap () () 
          X64Cmp32 : Root && branch if equal #208 v995(R) [immediate:1619] [immediate:1620]
add v77->v2
gap () () 
          [constant:994] = ArchNop
add v10->v77
add v89->v77
add v88->v89
gap () ([rax|R|t] = v974(-); [rsi|R|w64] = v994(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1618] #-1 [rax|R|t] [rsi|R|w64]
add v25->v88
add v85->v88
gap (v993(-) = [rax|R|t];) (v988 = v993(-);) 
          ArchJmp [immediate:1617]
add v87->v88
add v82->v85
gap () (v988 = v992(-);) 
          ArchJmp [immediate:1616]
add v84->v82
add v83->v82
gap () () 
          X64Cmp32 && branch if unsigned greater than v991 #8 [immediate:1614] [immediate:1615]
add v69->v2
gap () () 
          X64MovqCompressTagged : MRI v974(R) [immediate:1612] [immediate:1613]
add v79->v77
gap () () 
          ArchJmp [immediate:1611]
add v81->v77
gap () () 
          ArchJmp [immediate:1610]
add v72->v79
add v73->v79
gap () () 
          ArchStoreWithWriteBarrier : MRI v988(R) [immediate:1609] v971(R)
add v78->v69
gap () () 
          ArchJmp [immediate:1608]
add v76->v69
add v63->v2
gap () () 
          v980(R) = X64MovqDecompressTaggedPointer : MRI v974(R) [immediate:1607]
add v10->v63
add v67->v63
gap () () 
          v987(R) = X64MovqDecompressTaggedSigned : MRI v974(R) [immediate:1606]
add v65->v67
add v25->v65
gap () (v975(R) = v987(-);) 
          v975(1) = X64Sar32 v975(R) #1
add v60->v65
add v66->v60
gap () () 
          v986(R) = X64MovqDecompressTaggedSigned : MRI v980(R) [immediate:1605]
add v64->v65
add v61->v60
gap () (v984(R) = v986(-);) 
          v984(1) = X64Sar32 v984(R) #1
add v51->v2
add v10->v51
gap () () 
          v985(R) = X64Lea32 : MRI v975(R) #1
add v59->v51
add v58->v59
add v25->v58
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v985 #8 #244 v0(S) v1(-) v2(-) v3(S) v974(-) [immediate:1604] v971(-)
add v55->v58
add v57->v58
gap () () 
          X64Cmp32 && branch if unsigned greater than v984 #8 [immediate:1602] [immediate:1603]
add v52->v55
gap () () 
          [constant:983] = ArchNop
add v54->v52
add v53->v52
add v50->v2
add v49->v3
gap () ([rax|R|t] = v974(-); [rbx|R|w64] = v982(-); [rsi|R|w64] = v983(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1601] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
add v46->v3
add v48->v3
add v44->v46
add v43->v42
gap (v981(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v981 #1 #243 v0(S) v1(-) v2(-) v3(S) v974(-) [immediate:1600] v971(-)
add v39->v42
add v41->v42
gap () (v976 = v981(-);) 
          ArchJmp [immediate:1599]
add v38->v39
gap () (v976 = v980(-);) 
          ArchJmp [immediate:1598]
add v22->v2
gap () () 
          v979(R) = X64Movl : MRI v976(R) [immediate:1597]
add v35->v30
add v31->v33
gap () () 
          X64Cmp32 : Root && branch if equal #208 v979(R) [immediate:1595] [immediate:1596]
add v29->v27
gap () () 
          [constant:978] = ArchNop
add v26->v27
add v25->v19
add v24->v19
gap () ([rax|R|t] = v974(-); [rsi|R|w64] = v978(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1594] #-1 [rax|R|t] [rsi|R|w64]
add v23->v19
add v10->v22
gap (v977(-) = [rax|R|t];) (v970 = v977(-);) 
          ArchJmp [immediate:1593]
add v18->v22
add v19->v18
gap () (v970 = v976(-);) 
          ArchJmp [immediate:1592]
add v13->v2
add v10->v13
gap () () 
          X64Cmp32 && branch if unsigned greater than v975 #8 [immediate:1590] [immediate:1591]
add v17->v13
add v14->v13
gap () () 
          X64MovqCompressTagged : MRI v974(R) [immediate:1588] [immediate:1589]
add v10->v13
gap () () 
          ArchJmp [immediate:1587]
add v12->v13
gap () () 
          ArchJmp [immediate:1586]
add v9->v2
add v10->v9
gap () () 
          ArchStoreWithWriteBarrier : MRI v970(R) [immediate:1585] v971(R)
add v8->v9
gap () () 
          ArchJmp [immediate:1584]
add v7->v8
add v5->v6
gap () () 
          v891(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1583]
add v4->v5
gap () () 
          v964(R) = X64Movq : MR v80(R)
gap () () 
          [constant:968] = ArchNop
gap () () 
          [rsi|R|t] = ArchNop
gap (v2(-) = [rsi|R|t];) () 
          [stack:-1|t] = ArchNop
gap (v1(-) = [stack:-1|t];) () 
          [rdi|R|t] = ArchNop
gap (v0(-) = [rdi|R|t];) () 
          [constant:372] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1694] [immediate:1695]
gap () () 
          [constant:895] = ArchNop
gap () () 
          [constant:894] = ArchNop
gap () () 
          v893(R) = ArchStackCheckOffset
gap () () 
          X64Push v893(-)
gap () ([rbx|R|w64] = v894(-); [rax|R|w64] = v372(-); [rsi|R|t] = v895(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1693] #-1 #369 v0(S) v1(S) v2(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1692]
gap () () 
          ArchJmp [immediate:1691]
gap () () 
          [constant:28] = ArchNop
gap () () 
          [constant:36] = ArchNop
gap () () 
          [constant:890] = ArchNop
gap () () 
          v886(R) = X64Movq : MR v28(R)
gap () () 
          v891(R) = X64Lea : MRI v886(R) [immediate:1690]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v891(R) [immediate:1688] [immediate:1689]
gap () () 
          ArchJmp [immediate:1687]
gap () ([rdx|R|w64] = v890(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1686] #-1 [rdx|R|w64]
gap (v889(-) = [rax|R|tp];) () 
          v887(R) = X64Lea : MRI v889(R) [immediate:1685]
gap () (v885 = v887(-);) 
          ArchJmp [immediate:1684]
gap () (v885 = v886(-);) 
          ArchJmp [immediate:1683]
gap () () 
          v881(R) = X64Lea : MRI v885(R) [immediate:1682]
gap () () 
          X64Movq : MR v28(R) v881(R)
gap () () 
          v884(R) = X64Lea : MRI v885(R) [immediate:1681]
gap () (v879 = v884(-);) 
          v879(1) = ArchNop v879
gap () () 
          [constant:883] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v879(R) [immediate:1680] v883(R)
gap () () 
          X64MovqCompressTagged : MRI v879(R) [immediate:1678] [immediate:1679]
gap () () 
          [constant:863] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v879(R) [immediate:1677] v863(R)
gap () () 
          X64MovqCompressTagged : MRI v879(R) [immediate:1676] v863(R)
gap () () 
          X64MovqCompressTagged : MRI v879(R) [immediate:1675] v863(R)
gap () () 
          [constant:34] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v879(R) [immediate:1674] v863(R)
gap () () 
          v882(R) = X64Lea : MRI v881(R) [immediate:1673]
gap () () 
          X64Movq : MR v28(R) v882(R)
gap () () 
          v880(R) = X64Lea : MRI v881(R) [immediate:1672]
gap () (v3 = v880(-);) 
          v3(1) = ArchNop v3
gap () () 
          [constant:49] = ArchNop
gap () () 
          [constant:304] = ArchNop
gap () () 
          [constant:24] = ArchNop
gap () () 
          [constant:10] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1671] v49(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1670] v24(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1669] v879(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1667] [immediate:1668]
gap () () 
          v6(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1666]
gap () () 
          X64Test32 && deoptimize if equal v6 #1 #368 v0(S) v1(-) v2(S) v3(-) [immediate:1664] v6(-) [immediate:1665]
gap () () 
          X64Cmp32 : MRI && branch if equal v6(R) [immediate:1661] v10(R) [immediate:1662] [immediate:1663]
gap () () 
          [constant:878] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v6(R) [immediate:1658] v878(R) #367 v0(S) v1(-) v2(S) v3(-) [immediate:1659] v6(-) [immediate:1660]
gap () () 
          v875(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1657]
gap () () 
          ArchStoreWithWriteBarrier : MRI v6(R) [immediate:1656] v10(R)
gap () () 
          X64MovqCompressTagged : MRI v875(R) [immediate:1654] [immediate:1655]
gap () () 
          ArchJmp [immediate:1653]
gap () () 
          v874(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1652]
gap () () 
          X64MovqCompressTagged : MRI v874(R) [immediate:1650] [immediate:1651]
gap () () 
          ArchJmp [immediate:1649]
gap () () 
          [constant:873] = ArchNop
gap () () 
          [constant:43] = ArchNop
gap () () 
          [constant:70] = ArchNop
gap () () 
          [constant:25] = ArchNop
gap () () 
          [constant:587] = ArchNop
gap () () 
          [constant:303] = ArchNop
gap () () 
          [constant:373] = ArchNop
gap () (v729 = v873(-);) 
          ArchJmp [immediate:1648]
gap () () 
          X64Cmp32 && branch if signed greater than v729 #-1 [immediate:1646] [immediate:1647]
gap () () 
          v783(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1645]
gap () () 
          v784(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1644]
gap () () 
          v872(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1643]
gap () () 
          v871(R) = X64MovqDecompressAnyTagged : MRI v872(R) [immediate:1642]
gap () () 
          X64Test32 && deoptimize if equal v871 #1 #366 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1641]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v871(R) [immediate:1639] v25(R) #365 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1640]
gap () () 
          v867(R) = X64MovqDecompressTaggedPointer : MRI v871(R) [immediate:1638]
gap () () 
          v870(R) = X64MovqDecompressTaggedSigned : MRI v871(R) [immediate:1637]
gap () (v869(R) = v870(-);) 
          v869(1) = X64Sar32 v869(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v729(R) v869 #364 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1636]
gap () () 
          v763(R) = X64Lea : M4I v729(R) [immediate:1635]
gap () () 
          v785(R) = X64MovqDecompressAnyTagged : MR4I v867(R) v729(R) [immediate:1634]
gap () () 
          X64Test32 && deoptimize if equal v783 #1 #363 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1633]
gap () () 
          v866(R) = X64MovqDecompressTaggedPointer : MRI v783(R) [immediate:1632]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v866(R) [immediate:1630] #1068 #362 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1631]
gap () () 
          [constant:864] = ArchNop
gap () () 
          v865(R) = X64MovqDecompressTaggedPointer : MRI v783(R) [immediate:1629]
gap () () 
          X64Cmp && deoptimize if not equal v864(R) v865 #361 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1628]
gap () () 
          v786(R) = X64Movl : MRI v783(R) [immediate:1627]
gap () () 
          X64Test32 && branch if equal v863 #1 [immediate:1625] [immediate:1626]
gap () () 
          v861(R) = X64Movsd : MRI v863(R) [immediate:1624]
gap () (v850 = v861(-);) 
          ArchJmp [immediate:1623]
gap () (v862(R) = v863(-);) 
          v862(1) = X64Sar32 v862(R) #1
gap () () 
          v860(R) = SSEInt32ToFloat64 v862
gap () (v850 = v860(-);) 
          ArchJmp [immediate:1622]
gap () () 
          v854(R) = X64Movq : MR v28(R)
gap () () 
          [constant:858] = ArchNop
gap () () 
          v859(R) = X64Lea : MRI v854(R) [immediate:1621]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v859(R) [immediate:1619] [immediate:1620]
gap () () 
          ArchJmp [immediate:1618]
gap () ([rdx|R|w64] = v858(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1617] #-1 [rdx|R|w64]
gap (v857(-) = [rax|R|tp];) () 
          v855(R) = X64Lea : MRI v857(R) [immediate:1616]
gap () (v853 = v855(-);) 
          ArchJmp [immediate:1615]
gap () (v853 = v854(-);) 
          ArchJmp [immediate:1614]
gap () () 
          v848(R) = X64Lea : MRI v853(R) [immediate:1613]
gap () () 
          X64Movq : MR v28(R) v848(R)
gap () () 
          v852(R) = X64Lea : MRI v853(R) [immediate:1612]
gap () (v827 = v852(-);) 
          v827(1) = ArchNop v827
gap () () 
          [constant:851] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v827(R) [immediate:1611] v851(R)
gap () () 
          X64MovqCompressTagged : MRI v827(R) [immediate:1609] [immediate:1610]
gap () () 
          X64Movsd : MRI v827(R) [immediate:1608] v850(R)
gap () () 
          X64Movsd : MRI v827(R) [immediate:1607] v850(R)
gap () () 
          X64Movsd : MRI v827(R) [immediate:1606] v850(R)
gap () () 
          X64Movsd : MRI v827(R) [immediate:1605] v850(R)
gap () () 
          v849(R) = X64Lea : MRI v848(R) [immediate:1604]
gap () () 
          X64Movq : MR v28(R) v849(R)
gap () () 
          v847(R) = X64Lea : MRI v848(R) [immediate:1603]
gap () (v764 = v847(-);) 
          v764(1) = ArchNop v764
gap () () 
          X64MovqCompressTagged : MRI v764(R) [immediate:1602] v43(R)
gap () () 
          X64MovqCompressTagged : MRI v764(R) [immediate:1601] v24(R)
gap () () 
          X64MovqCompressTagged : MRI v764(R) [immediate:1600] v827(R)
gap () () 
          X64MovqCompressTagged : MRI v764(R) [immediate:1598] [immediate:1599]
gap () () 
          X64Test32 && deoptimize if equal v784 #1 #360 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1595] v784(-) v785(-) v786(S) v764(-) [immediate:1596] [immediate:1597]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v784(R) [immediate:1591] v25(R) #359 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1592] v784(-) v785(-) v786(S) v764(-) [immediate:1593] [immediate:1594]
gap () () 
          v844(R) = X64MovqDecompressTaggedPointer : MRI v784(R) [immediate:1590]
gap () () 
          v846(R) = X64MovqDecompressTaggedSigned : MRI v784(R) [immediate:1589]
gap () (v845(R) = v846(-);) 
          v845(1) = X64Sar32 v845(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v845 #0 #358 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1586] v784(-) v785(-) v786(S) v764(-) [immediate:1587] [immediate:1588]
gap () () 
          v843(R) = X64MovqDecompressAnyTagged : MRI v844(R) [immediate:1585]
gap () () 
          X64Test32 && deoptimize if equal v843 #1 #357 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1582] v784(-) v785(-) v786(S) v764(-) [immediate:1583] [immediate:1584]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v843(R) [immediate:1578] v43(R) #356 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1579] v784(-) v785(-) v786(S) v764(-) [immediate:1580] [immediate:1581]
gap () () 
          v839(R) = X64MovqDecompressTaggedPointer : MRI v843(R) [immediate:1577]
gap () () 
          v842(R) = X64MovqDecompressTaggedSigned : MRI v843(R) [immediate:1576]
gap () (v840(R) = v842(-);) 
          v840(1) = X64Sar32 v840(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v840 #0 #355 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1573] v784(-) v785(-) v786(S) v764(-) [immediate:1574] [immediate:1575]
gap () () 
          v836(R) = X64Movsd : MRI v839(R) [immediate:1572]
gap () () 
          X64Test32 && deoptimize if equal v785 #1 #354 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1569] v784(-) v785(-) v786(S) v764(-) [immediate:1570] [immediate:1571]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v785(R) [immediate:1565] v43(R) #353 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1566] v784(-) v785(-) v786(S) v764(-) [immediate:1567] [immediate:1568]
gap () () 
          v835(R) = X64MovqDecompressTaggedPointer : MRI v785(R) [immediate:1564]
gap () () 
          v841(R) = X64MovqDecompressTaggedSigned : MRI v785(R) [immediate:1563]
gap () (v838(R) = v841(-);) 
          v838(1) = X64Sar32 v838(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v838 #0 #352 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1560] v784(-) v785(-) v786(S) v764(-) [immediate:1561] [immediate:1562]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v840 #1 #351 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1557] v784(-) v785(-) v786(S) v764(-) [immediate:1558] [immediate:1559]
gap () () 
          v837(R) = X64Movsd : MRI v839(R) [immediate:1556]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v838 #1 #350 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1553] v784(-) v785(-) v786(S) v764(-) [immediate:1554] [immediate:1555]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v840 #2 #349 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1550] v784(-) v785(-) v786(S) v764(-) [immediate:1551] [immediate:1552]
gap () () 
          v834(R) = X64Movsd : MRI v839(R) [immediate:1549]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v838 #2 #348 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1546] v784(-) v785(-) v786(S) v764(-) [immediate:1547] [immediate:1548]
gap () () 
          v832(R) = AVXFloat64Mul : MRI v837(R) v835(R) [immediate:1545]
gap () () 
          v833(R) = AVXFloat64Mul : MRI v836(R) v835(R) [immediate:1544]
gap () () 
          v830(R) = AVXFloat64Mul : MRI v834(R) v835(R) [immediate:1543]
gap () () 
          v831(R) = AVXFloat64Add v832(R) v833
gap () () 
          v829(R) = AVXFloat64Add v830(R) v831
gap () () 
          X64MovqCompressTagged : MRI v764(R) [immediate:1541] [immediate:1542]
gap () () 
          X64Movsd : MRI v827(R) [immediate:1540] v829(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1538] [immediate:1539]
gap () () 
          [constant:826] = ArchNop
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v826(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1536] #-1 #347 v0(S) v1(S) v2(S) v3(S) v729(S) v783(S) [immediate:1537] v784(S) v785(S) v786(S) v764(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1535]
gap () () 
          ArchJmp [immediate:1534]
gap () (v805 = v372(-);) 
          ArchJmp [immediate:1533]
gap () () 
          X64Cmp32 && branch if unsigned less than v805 #3 [immediate:1531] [immediate:1532]
gap () () 
          v822(R) = X64MovqDecompressTaggedPointer : MRI v784(R) [immediate:1530]
gap () () 
          v824(R) = X64MovqDecompressTaggedSigned : MRI v784(R) [immediate:1529]
gap () (v823(R) = v824(-);) 
          v823(1) = X64Sar32 v823(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v805(R) v823 #346 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1527] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1528]
gap () () 
          v821(R) = X64MovqDecompressAnyTagged : MR4I v822(R) v805(R) [immediate:1526]
gap () () 
          X64Test32 && deoptimize if equal v821 #1 #345 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1524] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1525]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v821(R) [immediate:1521] v43(R) #344 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1522] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1523]
gap () () 
          v817(R) = X64MovqDecompressTaggedPointer : MRI v821(R) [immediate:1520]
gap () () 
          v820(R) = X64MovqDecompressTaggedSigned : MRI v821(R) [immediate:1519]
gap () (v818(R) = v820(-);) 
          v818(1) = X64Sar32 v818(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v818 #0 #343 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1517] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1518]
gap () () 
          v800(R) = X64Movsd : MRI v817(R) [immediate:1516]
gap () () 
          v815(R) = X64MovqDecompressTaggedPointer : MRI v785(R) [immediate:1515]
gap () () 
          v819(R) = X64MovqDecompressTaggedSigned : MRI v785(R) [immediate:1514]
gap () (v816(R) = v819(-);) 
          v816(1) = X64Sar32 v816(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v816 #0 #342 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1512] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1513]
gap () () 
          v799(R) = X64Movsd : MRI v815(R) [immediate:1511]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v818 #1 #341 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1509] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1510]
gap () () 
          v802(R) = X64Movsd : MRI v817(R) [immediate:1508]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v816 #1 #340 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1506] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1507]
gap () () 
          v801(R) = X64Movsd : MRI v815(R) [immediate:1505]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v818 #2 #339 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1503] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1504]
gap () () 
          v798(R) = X64Movsd : MRI v817(R) [immediate:1502]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v816 #2 #338 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1500] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1501]
gap () () 
          v797(R) = X64Movsd : MRI v815(R) [immediate:1499]
gap () () 
          v807(R) = X64MovqDecompressTaggedPointer : MRI v764(R) [immediate:1498]
gap () () 
          v813(R) = X64MovqDecompressTaggedSigned : MRI v764(R) [immediate:1497]
gap () () 
          v814(R) = X64MovqDecompressTaggedSigned : MRI v807(R) [immediate:1496]
gap () (v811(R) = v814(-);) 
          v811(1) = X64Sar32 v811(R) #1
gap () (v806(R) = v813(-);) 
          v806(1) = X64Sar32 v806(R) #1
gap () () 
          v812(R) = X64Lea32 : MRI v806(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v805(R) v812 #337 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1494] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1495]
gap () () 
          X64Cmp32 && branch if unsigned less than v805(R) v811 [immediate:1492] [immediate:1493]
gap () () 
          v810(R) = X64Lea32 : MR1 v805(R) v805(R)
gap () ([rax|R|t] = v764(-); [rbx|R|w32] = v810(-); [rsi|R|w64] = v587(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1491] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v808(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v808 #1 #336 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1489] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1490]
gap () (v789 = v808(-);) 
          ArchJmp [immediate:1488]
gap () (v789 = v807(-);) 
          ArchJmp [immediate:1487]
gap () () 
          v787(R) = X64Lea32 : MRI v805(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v805(R) v806 [immediate:1485] [immediate:1486]
gap () () 
          v804(R) = X64Lea32 : MR1 v787(R) v787(R)
gap () () 
          X64MovqCompressTagged : MRI v764(R) [immediate:1484] v804(R)
gap () () 
          ArchJmp [immediate:1483]
gap () () 
          ArchJmp [immediate:1482]
gap () () 
          v795(R) = AVXFloat64Mul v801(R) v802
gap () () 
          v796(R) = AVXFloat64Mul v799(R) v800
gap () () 
          v793(R) = AVXFloat64Mul v797(R) v798
gap () () 
          v794(R) = AVXFloat64Add v795(R) v796
gap () () 
          v792(R) = AVXFloat64Add v793(R) v794
gap () () 
          X64Movsd : MR8I v789(R) v805(R) [immediate:1481] v792(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1479] [immediate:1480]
gap () () 
          [constant:788] = ArchNop
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v788(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1477] #-1 #335 v0(S) v1(S) v2(S) v3(S) v729(S) v783(S) [immediate:1478] v784(S) v785(S) v786(S) v764(S) v787(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1476]
gap () () 
          ArchJmp [immediate:1475]
gap () (v805 = v787(-);) 
          ArchJmp [immediate:1474]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:1473] v49(R) #334 v0(S) v1(-) v2(S) v3(-) v729(-) v764(-)
gap () () 
          v775(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:1472]
gap () () 
          v771(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:1471]
gap () () 
          v781(R) = X64MovqDecompressTaggedSigned : MRI v775(R) [immediate:1470]
gap () (v779(R) = v781(-);) 
          v779(1) = X64Sar32 v779(R) #1
gap () () 
          v780(R) = X64Lea32 : MRI v779(R) #1024
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v729(R) v780 #333 v0(S) v1(-) v2(S) v3(-) v729(-) v764(-)
gap () () 
          X64Cmp32 && branch if unsigned less than v729(R) v779 [immediate:1468] [immediate:1469]
gap () () 
          v778(R) = X64Lea32 : MR1 v729(R) v729(R)
gap () ([rax|R|t] = v3(-); [rbx|R|w32] = v778(-); [rsi|R|w64] = v587(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1467] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v776(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v776 #1 #332 v0(S) v1(-) v2(S) v3(-) v729(-) v764(-)
gap () (v772 = v776(-);) 
          ArchJmp [immediate:1466]
gap () (v772 = v775(-);) 
          ArchJmp [immediate:1465]
gap () () 
          v774(R) = X64Movl : MRI v772(R) [immediate:1464]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v774(R) [immediate:1462] [immediate:1463]
gap () ([rax|R|t] = v3(-); [rsi|R|w64] = v587(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1461] #-1 [rax|R|t] [rsi|R|w64]
gap (v773(-) = [rax|R|t];) (v762 = v773(-);) 
          ArchJmp [immediate:1460]
gap () (v762 = v772(-);) 
          ArchJmp [immediate:1459]
gap () (v770(R) = v771(-);) 
          v770(1) = X64Sar32 v770(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v729(R) v770 [immediate:1457] [immediate:1458]
gap () () 
          v769(R) = X64Lea32 : MRI v729(R) #1
gap () () 
          v768(R) = X64Lea32 : MR1 v769(R) v769(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1456] v768(R)
gap () () 
          ArchJmp [immediate:1455]
gap () () 
          ArchJmp [immediate:1454]
gap () () 
          ArchStoreWithWriteBarrier : MR1 v762(R) v763(R) v764(R)
gap () () 
          v760(R) = X64Lea32 : MRI v729(R) #-1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1452] [immediate:1453]
gap () () 
          [constant:761] = ArchNop
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v761(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1451] #-1 #331 v0(S) v1(S) v2(S) v3(S) v760(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1450]
gap () () 
          ArchJmp [immediate:1449]
gap () (v729 = v760(-);) 
          ArchJmp [immediate:1448]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:1446] v49(R) #330 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1447]
gap () () 
          v749(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:1445]
gap () () 
          v758(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:1444]
gap () (v750(R) = v758(-);) 
          v750(1) = X64Sar32 v750(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v750 #0 #329 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1443]
gap () () 
          v756(R) = X64MovqDecompressAnyTagged : MRI v749(R) [immediate:1442]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v756(R) [immediate:1440] [immediate:1441]
gap () (v755 = v756(-);) 
          ArchJmp [immediate:1439]
gap () () 
          [constant:757] = ArchNop
gap () (v755 = v757(-);) 
          ArchJmp [immediate:1438]
gap () () 
          [constant:37] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v755 #1 #328 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1437]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v755(R) [immediate:1435] v43(R) #327 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1436]
gap () () 
          v752(R) = X64MovqDecompressTaggedPointer : MRI v755(R) [immediate:1434]
gap () () 
          v754(R) = X64MovqDecompressTaggedSigned : MRI v755(R) [immediate:1433]
gap () (v753(R) = v754(-);) 
          v753(1) = X64Sar32 v753(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v753 #2 #326 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1432]
gap () () 
          v751(R) = X64Movsd : MRI v752(R) [immediate:1431]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v751 [immediate:1429] [immediate:1430]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v750 #1 #325 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1428]
gap () () 
          v747(R) = X64MovqDecompressAnyTagged : MRI v749(R) [immediate:1427]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v747(R) [immediate:1425] [immediate:1426]
gap () (v746 = v747(-);) 
          ArchJmp [immediate:1424]
gap () () 
          [constant:748] = ArchNop
gap () (v746 = v748(-);) 
          ArchJmp [immediate:1423]
gap () () 
          X64Test32 && deoptimize if equal v746 #1 #324 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1422]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v746(R) [immediate:1420] v43(R) #323 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1421]
gap () () 
          v743(R) = X64MovqDecompressTaggedPointer : MRI v746(R) [immediate:1419]
gap () () 
          v745(R) = X64MovqDecompressTaggedSigned : MRI v746(R) [immediate:1418]
gap () (v744(R) = v745(-);) 
          v744(1) = X64Sar32 v744(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v744 #2 #322 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1417]
gap () () 
          v742(R) = X64Movsd : MRI v743(R) [immediate:1416]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v742 [immediate:1414] [immediate:1415]
gap () () 
          ArchJmp [immediate:1413]
gap () () 
          v741(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1412]
gap () () 
          v740(R) = X64MovqDecompressAnyTagged : MRI v741(R) [immediate:1411]
gap () () 
          X64Test32 && deoptimize if equal v740 #1 #321 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1410]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v740(R) [immediate:1408] v25(R) #320 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1409]
gap () () 
          v737(R) = X64MovqDecompressTaggedPointer : MRI v740(R) [immediate:1407]
gap () () 
          v739(R) = X64MovqDecompressTaggedSigned : MRI v740(R) [immediate:1406]
gap () (v738(R) = v739(-);) 
          v738(1) = X64Sar32 v738(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v738 #2 #319 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1405]
gap () () 
          v734(R) = X64MovqDecompressAnyTagged : MRI v737(R) [immediate:1404]
gap () () 
          X64Test32 && branch if equal v734 #1 [immediate:1402] [immediate:1403]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v734(R) [immediate:1400] [immediate:1401]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v734(R) [immediate:1398] [immediate:1399]
gap () () 
          v736(R) = X64MovqDecompressTaggedPointer : MRI v734(R) [immediate:1397]
gap () () 
          X64Test8 : MRI && branch if equal v736(R) [immediate:1394] #16 [immediate:1395] [immediate:1396]
gap () () 
          ArchJmp [immediate:1393]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v736(R) [immediate:1391] [immediate:1392]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v736(R) [immediate:1389] [immediate:1390]
gap () () 
          ArchJmp [immediate:1388]
gap () () 
          X64Test32 : MRI && branch if not equal v734(R) [immediate:1385] #2147483646 [immediate:1386] [immediate:1387]
gap () () 
          ArchJmp [immediate:1384]
gap () () 
          ArchJmp [immediate:1383]
gap () () 
          v735(R) = X64Movsd : MRI v734(R) [immediate:1382]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v735 [immediate:1380] [immediate:1381]
gap () () 
          ArchJmp [immediate:1379]
gap () () 
          ArchJmp [immediate:1378]
gap () () 
          ArchJmp [immediate:1377]
gap () () 
          ArchJmp [immediate:1376]
gap () () 
          X64Cmp32 && branch if not equal v734 [immediate:1373] [immediate:1374] [immediate:1375]
gap () () 
          ArchJmp [immediate:1372]
gap () () 
          [constant:727] = ArchNop
gap () () 
          [constant:726] = ArchNop
gap () () 
          [constant:723] = ArchNop
gap () () 
          v722(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1371]
gap () () 
          v731(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1370]
gap () () 
          v733(R) = X64MovqDecompressTaggedSigned : MRI v6(R) [immediate:1369]
gap () (v732(R) = v733(-);) 
          v732(1) = X64Sar32 v732(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v732 #3 #318 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1368]
gap () () 
          v724(R) = X64MovqDecompressAnyTagged : MRI v731(R) [immediate:1367]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v732 #2 #317 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1366]
gap () () 
          v725(R) = X64MovqDecompressAnyTagged : MRI v731(R) [immediate:1365]
gap () () 
          X64Test32 && deoptimize if equal v722 #1 #316 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1364]
gap () () 
          v730(R) = X64MovqDecompressTaggedPointer : MRI v722(R) [immediate:1363]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v730(R) [immediate:1361] #1068 #315 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1362]
gap () () 
          v728(R) = X64MovqDecompressTaggedPointer : MRI v722(R) [immediate:1360]
gap () () 
          X64Cmp && deoptimize if not equal v727(R) v728 #314 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1359]
gap () () 
          X64Push v725(-)
gap () () 
          X64Push v724(-)
gap () () 
          X64Push v723(-)
gap () ([rdi|R|t] = v722(-); [rax|R|w64] = v70(-); [rsi|R|t] = v726(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1358] #-1 #313 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v718(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1357]
gap () () 
          X64Test32 && deoptimize if equal v718 #1 #312 v0(S) v1(-) v2(S) v3(-) v718(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v718(R) [immediate:1356] v10(R) #311 v0(S) v1(-) v2(S) v3(-) v718(-)
gap () () 
          v720(R) = X64MovqDecompressTaggedPointer : MRI v718(R) [immediate:1355]
gap () () 
          v715(R) = X64MovqDecompressAnyTagged : MRI v720(R) [immediate:1354]
gap () () 
          X64Test32 && deoptimize if equal v715 #1 #310 v0(S) v1(-) v2(S) v3(-) v718(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v715(R) [immediate:1353] v25(R) #309 v0(S) v1(-) v2(S) v3(-) v718(-)
gap () () 
          v713(R) = X64MovqDecompressTaggedPointer : MRI v715(R) [immediate:1352]
gap () () 
          v719(R) = X64MovqDecompressTaggedSigned : MRI v715(R) [immediate:1351]
gap () (v717(R) = v719(-);) 
          v717(1) = X64Sar32 v717(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v717 #2 #308 v0(S) v1(-) v2(S) v3(-) v718(-)
gap () () 
          v716(R) = X64Movl : MRI v713(R) [immediate:1350]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v716(R) [immediate:1348] [immediate:1349]
gap () ([rax|R|t] = v715(-); [rsi|R|w64] = v587(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1347] #-1 [rax|R|t] [rsi|R|w64]
gap (v714(-) = [rax|R|t];) (v711 = v714(-);) 
          ArchJmp [immediate:1346]
gap () (v711 = v713(-);) 
          ArchJmp [immediate:1345]
gap () () 
          [constant:712] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v711(R) [immediate:1344] v712(R)
gap () () 
          ArchJmp [immediate:1343]
gap () () 
          ArchJmp [immediate:1342]
gap () () 
          ArchJmp [immediate:1341]
gap () () 
          v698(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1340]
gap () () 
          X64Test32 && deoptimize if equal v698 #1 #307 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v698(R) [immediate:1339] v10(R) #306 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v710(R) = X64MovqDecompressTaggedPointer : MRI v698(R) [immediate:1338]
gap () () 
          v709(R) = X64MovqDecompressAnyTagged : MRI v710(R) [immediate:1337]
gap () () 
          X64Test32 && deoptimize if equal v709 #1 #305 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v709(R) [immediate:1336] v25(R) #304 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v706(R) = X64MovqDecompressTaggedPointer : MRI v709(R) [immediate:1335]
gap () () 
          v708(R) = X64MovqDecompressTaggedSigned : MRI v709(R) [immediate:1334]
gap () (v707(R) = v708(-);) 
          v707(1) = X64Sar32 v707(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v707 #9 #303 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v703(R) = X64MovqDecompressAnyTagged : MRI v706(R) [immediate:1333]
gap () () 
          X64Test32 && branch if equal v703 #1 [immediate:1331] [immediate:1332]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v703(R) [immediate:1329] [immediate:1330]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v703(R) [immediate:1327] [immediate:1328]
gap () () 
          v705(R) = X64MovqDecompressTaggedPointer : MRI v703(R) [immediate:1326]
gap () () 
          X64Test8 : MRI && branch if equal v705(R) [immediate:1323] #16 [immediate:1324] [immediate:1325]
gap () () 
          ArchJmp [immediate:1322]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v705(R) [immediate:1320] [immediate:1321]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v705(R) [immediate:1318] [immediate:1319]
gap () () 
          ArchJmp [immediate:1317]
gap () () 
          X64Test32 : MRI && branch if not equal v703(R) [immediate:1314] #2147483646 [immediate:1315] [immediate:1316]
gap () () 
          ArchJmp [immediate:1313]
gap () () 
          ArchJmp [immediate:1312]
gap () () 
          v704(R) = X64Movsd : MRI v703(R) [immediate:1311]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v704 [immediate:1309] [immediate:1310]
gap () () 
          ArchJmp [immediate:1308]
gap () () 
          ArchJmp [immediate:1307]
gap () () 
          ArchJmp [immediate:1306]
gap () () 
          ArchJmp [immediate:1305]
gap () () 
          X64Cmp32 && branch if not equal v703 [immediate:1302] [immediate:1303] [immediate:1304]
gap () () 
          ArchJmp [immediate:1301]
gap () () 
          [constant:696] = ArchNop
gap () () 
          [constant:695] = ArchNop
gap () () 
          [constant:692] = ArchNop
gap () () 
          [constant:683] = ArchNop
gap () () 
          v691(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1300]
gap () () 
          v700(R) = X64MovqDecompressTaggedPointer : MRI v698(R) [immediate:1299]
gap () () 
          v702(R) = X64MovqDecompressTaggedSigned : MRI v698(R) [immediate:1298]
gap () (v701(R) = v702(-);) 
          v701(1) = X64Sar32 v701(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v701 #2 #302 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v693(R) = X64MovqDecompressAnyTagged : MRI v700(R) [immediate:1297]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v701 #6 #301 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v694(R) = X64MovqDecompressAnyTagged : MRI v700(R) [immediate:1296]
gap () () 
          X64Test32 && deoptimize if equal v691 #1 #300 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v699(R) = X64MovqDecompressTaggedPointer : MRI v691(R) [immediate:1295]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v699(R) [immediate:1294] #1068 #299 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v697(R) = X64MovqDecompressTaggedPointer : MRI v691(R) [immediate:1293]
gap () () 
          X64Cmp && deoptimize if not equal v696(R) v697 #298 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          X64Push v694(-)
gap () () 
          X64Push v693(-)
gap () () 
          X64Push v692(-)
gap () ([rdi|R|t] = v691(-); [rax|R|w64] = v70(-); [rsi|R|t] = v695(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1292] #-1 #297 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v685(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1291]
gap () () 
          X64Test32 && deoptimize if equal v685 #1 #296 v0(S) v1(-) v2(S) v3(-) v685(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v685(R) [immediate:1290] v10(R) #295 v0(S) v1(-) v2(S) v3(-) v685(-)
gap () () 
          v689(R) = X64MovqDecompressTaggedPointer : MRI v685(R) [immediate:1289]
gap () () 
          v687(R) = X64MovqDecompressAnyTagged : MRI v689(R) [immediate:1288]
gap () () 
          X64Test32 && deoptimize if equal v687 #1 #294 v0(S) v1(-) v2(S) v3(-) v685(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v687(R) [immediate:1287] v25(R) #293 v0(S) v1(-) v2(S) v3(-) v685(-)
gap () () 
          v682(R) = X64MovqDecompressTaggedPointer : MRI v687(R) [immediate:1286]
gap () () 
          v688(R) = X64Movl : MRI v682(R) [immediate:1285]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v688(R) #292 v0(S) v1(-) v2(S) v3(-) v685(-)
gap () () 
          v686(R) = X64MovqDecompressTaggedSigned : MRI v687(R) [immediate:1284]
gap () (v684(R) = v686(-);) 
          v684(1) = X64Sar32 v684(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v684 #9 #291 v0(S) v1(-) v2(S) v3(-) v685(-)
gap () () 
          X64MovqCompressTagged : MRI v682(R) [immediate:1283] v683(R)
gap () () 
          ArchJmp [immediate:1282]
gap () () 
          ArchJmp [immediate:1281]
gap () () 
          ArchJmp [immediate:1280]
gap () () 
          v669(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1279]
gap () () 
          X64Test32 && deoptimize if equal v669 #1 #290 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v669(R) [immediate:1278] v10(R) #289 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          v681(R) = X64MovqDecompressTaggedPointer : MRI v669(R) [immediate:1277]
gap () () 
          v680(R) = X64MovqDecompressAnyTagged : MRI v681(R) [immediate:1276]
gap () () 
          X64Test32 && deoptimize if equal v680 #1 #288 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v680(R) [immediate:1275] v25(R) #287 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          v677(R) = X64MovqDecompressTaggedPointer : MRI v680(R) [immediate:1274]
gap () () 
          v679(R) = X64MovqDecompressTaggedSigned : MRI v680(R) [immediate:1273]
gap () (v678(R) = v679(-);) 
          v678(1) = X64Sar32 v678(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v678 #6 #286 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          v674(R) = X64MovqDecompressAnyTagged : MRI v677(R) [immediate:1272]
gap () () 
          X64Test32 && branch if equal v674 #1 [immediate:1270] [immediate:1271]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v674(R) [immediate:1268] [immediate:1269]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v674(R) [immediate:1266] [immediate:1267]
gap () () 
          v676(R) = X64MovqDecompressTaggedPointer : MRI v674(R) [immediate:1265]
gap () () 
          X64Test8 : MRI && branch if equal v676(R) [immediate:1262] #16 [immediate:1263] [immediate:1264]
gap () () 
          ArchJmp [immediate:1261]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v676(R) [immediate:1259] [immediate:1260]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v676(R) [immediate:1257] [immediate:1258]
gap () () 
          ArchJmp [immediate:1256]
gap () () 
          X64Test32 : MRI && branch if not equal v674(R) [immediate:1253] #2147483646 [immediate:1254] [immediate:1255]
gap () () 
          ArchJmp [immediate:1252]
gap () () 
          ArchJmp [immediate:1251]
gap () () 
          v675(R) = X64Movsd : MRI v674(R) [immediate:1250]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v675 [immediate:1248] [immediate:1249]
gap () () 
          ArchJmp [immediate:1247]
gap () () 
          ArchJmp [immediate:1246]
gap () () 
          ArchJmp [immediate:1245]
gap () () 
          ArchJmp [immediate:1244]
gap () () 
          X64Cmp32 && branch if not equal v674 [immediate:1241] [immediate:1242] [immediate:1243]
gap () () 
          ArchJmp [immediate:1240]
gap () () 
          [constant:667] = ArchNop
gap () () 
          [constant:666] = ArchNop
gap () () 
          [constant:663] = ArchNop
gap () () 
          [constant:654] = ArchNop
gap () () 
          v662(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1239]
gap () () 
          v671(R) = X64MovqDecompressTaggedPointer : MRI v669(R) [immediate:1238]
gap () () 
          v673(R) = X64MovqDecompressTaggedSigned : MRI v669(R) [immediate:1237]
gap () (v672(R) = v673(-);) 
          v672(1) = X64Sar32 v672(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v672 #6 #285 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          v664(R) = X64MovqDecompressAnyTagged : MRI v671(R) [immediate:1236]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v672 #7 #284 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          v665(R) = X64MovqDecompressAnyTagged : MRI v671(R) [immediate:1235]
gap () () 
          X64Test32 && deoptimize if equal v662 #1 #283 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          v670(R) = X64MovqDecompressTaggedPointer : MRI v662(R) [immediate:1234]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v670(R) [immediate:1233] #1068 #282 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          v668(R) = X64MovqDecompressTaggedPointer : MRI v662(R) [immediate:1232]
gap () () 
          X64Cmp && deoptimize if not equal v667(R) v668 #281 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          X64Push v665(-)
gap () () 
          X64Push v664(-)
gap () () 
          X64Push v663(-)
gap () ([rdi|R|t] = v662(-); [rax|R|w64] = v70(-); [rsi|R|t] = v666(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1231] #-1 #280 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v656(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1230]
gap () () 
          X64Test32 && deoptimize if equal v656 #1 #279 v0(S) v1(-) v2(S) v3(-) v656(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v656(R) [immediate:1229] v10(R) #278 v0(S) v1(-) v2(S) v3(-) v656(-)
gap () () 
          v660(R) = X64MovqDecompressTaggedPointer : MRI v656(R) [immediate:1228]
gap () () 
          v658(R) = X64MovqDecompressAnyTagged : MRI v660(R) [immediate:1227]
gap () () 
          X64Test32 && deoptimize if equal v658 #1 #277 v0(S) v1(-) v2(S) v3(-) v656(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v658(R) [immediate:1226] v25(R) #276 v0(S) v1(-) v2(S) v3(-) v656(-)
gap () () 
          v653(R) = X64MovqDecompressTaggedPointer : MRI v658(R) [immediate:1225]
gap () () 
          v659(R) = X64Movl : MRI v653(R) [immediate:1224]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v659(R) #275 v0(S) v1(-) v2(S) v3(-) v656(-)
gap () () 
          v657(R) = X64MovqDecompressTaggedSigned : MRI v658(R) [immediate:1223]
gap () (v655(R) = v657(-);) 
          v655(1) = X64Sar32 v655(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v655 #6 #274 v0(S) v1(-) v2(S) v3(-) v656(-)
gap () () 
          X64MovqCompressTagged : MRI v653(R) [immediate:1222] v654(R)
gap () () 
          ArchJmp [immediate:1221]
gap () () 
          ArchJmp [immediate:1220]
gap () () 
          ArchJmp [immediate:1219]
gap () () 
          v640(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1218]
gap () () 
          X64Test32 && deoptimize if equal v640 #1 #273 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v640(R) [immediate:1217] v10(R) #272 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v652(R) = X64MovqDecompressTaggedPointer : MRI v640(R) [immediate:1216]
gap () () 
          v651(R) = X64MovqDecompressAnyTagged : MRI v652(R) [immediate:1215]
gap () () 
          X64Test32 && deoptimize if equal v651 #1 #271 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v651(R) [immediate:1214] v25(R) #270 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v648(R) = X64MovqDecompressTaggedPointer : MRI v651(R) [immediate:1213]
gap () () 
          v650(R) = X64MovqDecompressTaggedSigned : MRI v651(R) [immediate:1212]
gap () (v649(R) = v650(-);) 
          v649(1) = X64Sar32 v649(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v649 #10 #269 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v645(R) = X64MovqDecompressAnyTagged : MRI v648(R) [immediate:1211]
gap () () 
          X64Test32 && branch if equal v645 #1 [immediate:1209] [immediate:1210]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v645(R) [immediate:1207] [immediate:1208]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v645(R) [immediate:1205] [immediate:1206]
gap () () 
          v647(R) = X64MovqDecompressTaggedPointer : MRI v645(R) [immediate:1204]
gap () () 
          X64Test8 : MRI && branch if equal v647(R) [immediate:1201] #16 [immediate:1202] [immediate:1203]
gap () () 
          ArchJmp [immediate:1200]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v647(R) [immediate:1198] [immediate:1199]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v647(R) [immediate:1196] [immediate:1197]
gap () () 
          ArchJmp [immediate:1195]
gap () () 
          X64Test32 : MRI && branch if not equal v645(R) [immediate:1192] #2147483646 [immediate:1193] [immediate:1194]
gap () () 
          ArchJmp [immediate:1191]
gap () () 
          ArchJmp [immediate:1190]
gap () () 
          v646(R) = X64Movsd : MRI v645(R) [immediate:1189]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v646 [immediate:1187] [immediate:1188]
gap () () 
          ArchJmp [immediate:1186]
gap () () 
          ArchJmp [immediate:1185]
gap () () 
          ArchJmp [immediate:1184]
gap () () 
          ArchJmp [immediate:1183]
gap () () 
          X64Cmp32 && branch if not equal v645 [immediate:1180] [immediate:1181] [immediate:1182]
gap () () 
          ArchJmp [immediate:1179]
gap () () 
          [constant:638] = ArchNop
gap () () 
          [constant:637] = ArchNop
gap () () 
          [constant:634] = ArchNop
gap () () 
          [constant:625] = ArchNop
gap () () 
          v633(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1178]
gap () () 
          v642(R) = X64MovqDecompressTaggedPointer : MRI v640(R) [immediate:1177]
gap () () 
          v644(R) = X64MovqDecompressTaggedSigned : MRI v640(R) [immediate:1176]
gap () (v643(R) = v644(-);) 
          v643(1) = X64Sar32 v643(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v643 #7 #268 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v635(R) = X64MovqDecompressAnyTagged : MRI v642(R) [immediate:1175]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v643 #3 #267 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v636(R) = X64MovqDecompressAnyTagged : MRI v642(R) [immediate:1174]
gap () () 
          X64Test32 && deoptimize if equal v633 #1 #266 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v641(R) = X64MovqDecompressTaggedPointer : MRI v633(R) [immediate:1173]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v641(R) [immediate:1172] #1068 #265 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v639(R) = X64MovqDecompressTaggedPointer : MRI v633(R) [immediate:1171]
gap () () 
          X64Cmp && deoptimize if not equal v638(R) v639 #264 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          X64Push v636(-)
gap () () 
          X64Push v635(-)
gap () () 
          X64Push v634(-)
gap () ([rdi|R|t] = v633(-); [rax|R|w64] = v70(-); [rsi|R|t] = v637(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1170] #-1 #263 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v627(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1169]
gap () () 
          X64Test32 && deoptimize if equal v627 #1 #262 v0(S) v1(-) v2(S) v3(-) v627(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v627(R) [immediate:1168] v10(R) #261 v0(S) v1(-) v2(S) v3(-) v627(-)
gap () () 
          v631(R) = X64MovqDecompressTaggedPointer : MRI v627(R) [immediate:1167]
gap () () 
          v629(R) = X64MovqDecompressAnyTagged : MRI v631(R) [immediate:1166]
gap () () 
          X64Test32 && deoptimize if equal v629 #1 #260 v0(S) v1(-) v2(S) v3(-) v627(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v629(R) [immediate:1165] v25(R) #259 v0(S) v1(-) v2(S) v3(-) v627(-)
gap () () 
          v624(R) = X64MovqDecompressTaggedPointer : MRI v629(R) [immediate:1164]
gap () () 
          v630(R) = X64Movl : MRI v624(R) [immediate:1163]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v630(R) #258 v0(S) v1(-) v2(S) v3(-) v627(-)
gap () () 
          v628(R) = X64MovqDecompressTaggedSigned : MRI v629(R) [immediate:1162]
gap () (v626(R) = v628(-);) 
          v626(1) = X64Sar32 v626(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v626 #10 #257 v0(S) v1(-) v2(S) v3(-) v627(-)
gap () () 
          X64MovqCompressTagged : MRI v624(R) [immediate:1161] v625(R)
gap () () 
          ArchJmp [immediate:1160]
gap () () 
          ArchJmp [immediate:1159]
gap () () 
          ArchJmp [immediate:1158]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:1156] v49(R) #256 v0(S) v1(-) v2(S) v3(-) [immediate:1157]
gap () () 
          v621(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:1155]
gap () () 
          v623(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:1154]
gap () (v622(R) = v623(-);) 
          v622(1) = X64Sar32 v622(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v622 #2 #255 v0(S) v1(-) v2(S) v3(-) [immediate:1153]
gap () () 
          v619(R) = X64MovqDecompressAnyTagged : MRI v621(R) [immediate:1152]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v619(R) [immediate:1150] [immediate:1151]
gap () (v618 = v619(-);) 
          ArchJmp [immediate:1149]
gap () () 
          [constant:620] = ArchNop
gap () (v618 = v620(-);) 
          ArchJmp [immediate:1148]
gap () () 
          X64Test32 && deoptimize if equal v618 #1 #254 v0(S) v1(-) v2(S) v3(-) [immediate:1147]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v618(R) [immediate:1145] v43(R) #253 v0(S) v1(-) v2(S) v3(-) [immediate:1146]
gap () () 
          v615(R) = X64MovqDecompressTaggedPointer : MRI v618(R) [immediate:1144]
gap () () 
          v617(R) = X64MovqDecompressTaggedSigned : MRI v618(R) [immediate:1143]
gap () (v616(R) = v617(-);) 
          v616(1) = X64Sar32 v616(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v616 #2 #252 v0(S) v1(-) v2(S) v3(-) [immediate:1142]
gap () () 
          v614(R) = X64Movsd : MRI v615(R) [immediate:1141]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v614 [immediate:1139] [immediate:1140]
gap () () 
          ArchJmp [immediate:1138]
gap () () 
          v605(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1137]
gap () () 
          X64Test32 && deoptimize if equal v605 #1 #251 v0(S) v1(-) v2(S) v3(-) [immediate:1136]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v605(R) [immediate:1134] v10(R) #250 v0(S) v1(-) v2(S) v3(-) [immediate:1135]
gap () () 
          v613(R) = X64MovqDecompressTaggedPointer : MRI v605(R) [immediate:1133]
gap () () 
          v612(R) = X64MovqDecompressAnyTagged : MRI v613(R) [immediate:1132]
gap () () 
          X64Test32 && deoptimize if equal v612 #1 #249 v0(S) v1(-) v2(S) v3(-) [immediate:1131]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v612(R) [immediate:1129] v25(R) #248 v0(S) v1(-) v2(S) v3(-) [immediate:1130]
gap () () 
          v609(R) = X64MovqDecompressTaggedPointer : MRI v612(R) [immediate:1128]
gap () () 
          v611(R) = X64MovqDecompressTaggedSigned : MRI v612(R) [immediate:1127]
gap () (v610(R) = v611(-);) 
          v610(1) = X64Sar32 v610(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v610 #4 #247 v0(S) v1(-) v2(S) v3(-) [immediate:1126]
gap () () 
          v606(R) = X64MovqDecompressAnyTagged : MRI v609(R) [immediate:1125]
gap () () 
          X64Test32 && branch if equal v606 #1 [immediate:1123] [immediate:1124]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v606(R) [immediate:1121] [immediate:1122]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v606(R) [immediate:1119] [immediate:1120]
gap () () 
          v608(R) = X64MovqDecompressTaggedPointer : MRI v606(R) [immediate:1118]
gap () () 
          X64Test8 : MRI && branch if equal v608(R) [immediate:1115] #16 [immediate:1116] [immediate:1117]
gap () () 
          ArchJmp [immediate:1114]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v608(R) [immediate:1112] [immediate:1113]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v608(R) [immediate:1110] [immediate:1111]
gap () () 
          ArchJmp [immediate:1109]
gap () () 
          X64Test32 : MRI && branch if not equal v606(R) [immediate:1106] #2147483646 [immediate:1107] [immediate:1108]
gap () () 
          ArchJmp [immediate:1105]
gap () () 
          ArchJmp [immediate:1104]
gap () () 
          v607(R) = X64Movsd : MRI v606(R) [immediate:1103]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v607 [immediate:1101] [immediate:1102]
gap () () 
          ArchJmp [immediate:1100]
gap () () 
          ArchJmp [immediate:1099]
gap () () 
          ArchJmp [immediate:1098]
gap () () 
          ArchJmp [immediate:1097]
gap () () 
          X64Cmp32 && branch if not equal v606 [immediate:1094] [immediate:1095] [immediate:1096]
gap () () 
          ArchJmp [immediate:1093]
gap () () 
          [constant:599] = ArchNop
gap () () 
          [constant:598] = ArchNop
gap () () 
          [constant:595] = ArchNop
gap () () 
          v594(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1092]
gap () () 
          v602(R) = X64MovqDecompressTaggedPointer : MRI v605(R) [immediate:1091]
gap () () 
          v604(R) = X64MovqDecompressTaggedSigned : MRI v605(R) [immediate:1090]
gap () (v603(R) = v604(-);) 
          v603(1) = X64Sar32 v603(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v603 #4 #246 v0(S) v1(-) v2(S) v3(-) [immediate:1089]
gap () () 
          v596(R) = X64MovqDecompressAnyTagged : MRI v602(R) [immediate:1088]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v603 #5 #245 v0(S) v1(-) v2(S) v3(-) [immediate:1087]
gap () () 
          v597(R) = X64MovqDecompressAnyTagged : MRI v602(R) [immediate:1086]
gap () () 
          X64Test32 && deoptimize if equal v594 #1 #244 v0(S) v1(-) v2(S) v3(-) [immediate:1085]
gap () () 
          v601(R) = X64MovqDecompressTaggedPointer : MRI v594(R) [immediate:1084]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v601(R) [immediate:1082] #1068 #243 v0(S) v1(-) v2(S) v3(-) [immediate:1083]
gap () () 
          v600(R) = X64MovqDecompressTaggedPointer : MRI v594(R) [immediate:1081]
gap () () 
          X64Cmp && deoptimize if not equal v599(R) v600 #242 v0(S) v1(-) v2(S) v3(-) [immediate:1080]
gap () () 
          X64Push v597(-)
gap () () 
          X64Push v596(-)
gap () () 
          X64Push v595(-)
gap () ([rdi|R|t] = v594(-); [rax|R|w64] = v70(-); [rsi|R|t] = v598(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1079] #-1 #241 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v590(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1078]
gap () () 
          X64Test32 && deoptimize if equal v590 #1 #240 v0(S) v1(-) v2(S) v3(-) v590(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v590(R) [immediate:1077] v10(R) #239 v0(S) v1(-) v2(S) v3(-) v590(-)
gap () () 
          v592(R) = X64MovqDecompressTaggedPointer : MRI v590(R) [immediate:1076]
gap () () 
          v586(R) = X64MovqDecompressAnyTagged : MRI v592(R) [immediate:1075]
gap () () 
          X64Test32 && deoptimize if equal v586 #1 #238 v0(S) v1(-) v2(S) v3(-) v590(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v586(R) [immediate:1074] v25(R) #237 v0(S) v1(-) v2(S) v3(-) v590(-)
gap () () 
          v584(R) = X64MovqDecompressTaggedPointer : MRI v586(R) [immediate:1073]
gap () () 
          v591(R) = X64MovqDecompressTaggedSigned : MRI v586(R) [immediate:1072]
gap () (v589(R) = v591(-);) 
          v589(1) = X64Sar32 v589(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v589 #4 #236 v0(S) v1(-) v2(S) v3(-) v590(-)
gap () () 
          v588(R) = X64Movl : MRI v584(R) [immediate:1071]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v588(R) [immediate:1069] [immediate:1070]
gap () ([rax|R|t] = v586(-); [rsi|R|w64] = v587(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1068] #-1 [rax|R|t] [rsi|R|w64]
gap (v585(-) = [rax|R|t];) (v582 = v585(-);) 
          ArchJmp [immediate:1067]
gap () (v582 = v584(-);) 
          ArchJmp [immediate:1066]
gap () () 
          [constant:583] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v582(R) [immediate:1065] v583(R)
gap () () 
          ArchJmp [immediate:1064]
gap () () 
          ArchJmp [immediate:1063]
gap () () 
          ArchJmp [immediate:1062]
gap () () 
          v569(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1061]
gap () () 
          X64Test32 && deoptimize if equal v569 #1 #235 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v569(R) [immediate:1060] v10(R) #234 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v581(R) = X64MovqDecompressTaggedPointer : MRI v569(R) [immediate:1059]
gap () () 
          v580(R) = X64MovqDecompressAnyTagged : MRI v581(R) [immediate:1058]
gap () () 
          X64Test32 && deoptimize if equal v580 #1 #233 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v580(R) [immediate:1057] v25(R) #232 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v577(R) = X64MovqDecompressTaggedPointer : MRI v580(R) [immediate:1056]
gap () () 
          v579(R) = X64MovqDecompressTaggedSigned : MRI v580(R) [immediate:1055]
gap () (v578(R) = v579(-);) 
          v578(1) = X64Sar32 v578(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v578 #5 #231 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v574(R) = X64MovqDecompressAnyTagged : MRI v577(R) [immediate:1054]
gap () () 
          X64Test32 && branch if equal v574 #1 [immediate:1052] [immediate:1053]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v574(R) [immediate:1050] [immediate:1051]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v574(R) [immediate:1048] [immediate:1049]
gap () () 
          v576(R) = X64MovqDecompressTaggedPointer : MRI v574(R) [immediate:1047]
gap () () 
          X64Test8 : MRI && branch if equal v576(R) [immediate:1044] #16 [immediate:1045] [immediate:1046]
gap () () 
          ArchJmp [immediate:1043]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v576(R) [immediate:1041] [immediate:1042]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v576(R) [immediate:1039] [immediate:1040]
gap () () 
          ArchJmp [immediate:1038]
gap () () 
          X64Test32 : MRI && branch if not equal v574(R) [immediate:1035] #2147483646 [immediate:1036] [immediate:1037]
gap () () 
          ArchJmp [immediate:1034]
gap () () 
          ArchJmp [immediate:1033]
gap () () 
          v575(R) = X64Movsd : MRI v574(R) [immediate:1032]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v575 [immediate:1030] [immediate:1031]
gap () () 
          ArchJmp [immediate:1029]
gap () () 
          ArchJmp [immediate:1028]
gap () () 
          ArchJmp [immediate:1027]
gap () () 
          ArchJmp [immediate:1026]
gap () () 
          X64Cmp32 && branch if not equal v574 [immediate:1023] [immediate:1024] [immediate:1025]
gap () () 
          ArchJmp [immediate:1022]
gap () () 
          [constant:567] = ArchNop
gap () () 
          [constant:553] = ArchNop
gap () () 
          [constant:558] = ArchNop
gap () () 
          [constant:551] = ArchNop
gap () () 
          [constant:552] = ArchNop
gap () () 
          [constant:536] = ArchNop
gap () () 
          [constant:520] = ArchNop
gap () () 
          v467(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1021]
gap () () 
          v571(R) = X64MovqDecompressTaggedPointer : MRI v569(R) [immediate:1020]
gap () () 
          v573(R) = X64MovqDecompressTaggedSigned : MRI v569(R) [immediate:1019]
gap () (v572(R) = v573(-);) 
          v572(1) = X64Sar32 v572(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v572 #5 #230 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v468(R) = X64MovqDecompressAnyTagged : MRI v571(R) [immediate:1018]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v572 #6 #229 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v469(R) = X64MovqDecompressAnyTagged : MRI v571(R) [immediate:1017]
gap () () 
          X64Test32 && deoptimize if equal v467 #1 #228 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v570(R) = X64MovqDecompressTaggedPointer : MRI v467(R) [immediate:1016]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v570(R) [immediate:1015] #1068 #227 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v568(R) = X64MovqDecompressTaggedPointer : MRI v467(R) [immediate:1014]
gap () () 
          X64Cmp && deoptimize if not equal v567(R) v568 #226 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v470(R) = X64MovqDecompressTaggedPointer : MRI v467(R) [immediate:1013]
gap () ([rdx|R|t] = v468(-); [rcx|R|t] = v551(-); [rax|R|w64] = v558(-); [rbx|R|t] = v553(-); [rsi|R|tp] = v470(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1011] #-1 #225 v0(S) v1(S) v2(S) v3(S) v467(S) [immediate:1012] v468(S) v469(S) v470(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v565(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v565 #1 #224 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:1009] v468(-) v469(-) v470(S) v565(-) [immediate:1010]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v565(R) [immediate:1006] v43(R) #223 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:1007] v468(-) v469(-) v470(S) v565(-) [immediate:1008]
gap () () 
          v563(R) = X64MovqDecompressTaggedPointer : MRI v565(R) [immediate:1005]
gap () () 
          v566(R) = X64MovqDecompressTaggedSigned : MRI v565(R) [immediate:1004]
gap () (v564(R) = v566(-);) 
          v564(1) = X64Sar32 v564(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v564 #0 #222 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:1002] v468(-) v469(-) v470(S) v565(-) [immediate:1003]
gap () () 
          v507(R) = X64Movsd : MRI v563(R) [immediate:1001]
gap () ([rdx|R|t] = v469(-); [rcx|R|t] = v551(-); [rax|R|w64] = v552(-); [rbx|R|t] = v553(-); [rsi|R|tp] = v470(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:999] #-1 #221 v0(S) v1(S) v2(S) v3(S) v467(S) [immediate:1000] v468(S) v469(S) v470(S) v507(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v561(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v561 #1 #220 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:997] v468(-) v469(-) v470(S) v507(-) v561(-) [immediate:998]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v561(R) [immediate:994] v43(R) #219 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:995] v468(-) v469(-) v470(S) v507(-) v561(-) [immediate:996]
gap () () 
          v559(R) = X64MovqDecompressTaggedPointer : MRI v561(R) [immediate:993]
gap () () 
          v562(R) = X64MovqDecompressTaggedSigned : MRI v561(R) [immediate:992]
gap () (v560(R) = v562(-);) 
          v560(1) = X64Sar32 v560(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v560 #0 #218 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:990] v468(-) v469(-) v470(S) v507(-) v561(-) [immediate:991]
gap () () 
          v508(R) = X64Movsd : MRI v559(R) [immediate:989]
gap () ([rdx|R|t] = v468(-); [rcx|R|t] = v551(-); [rax|R|w64] = v558(-); [rbx|R|t] = v553(-); [rsi|R|tp] = v470(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:987] #-1 #217 v0(S) v1(S) v2(S) v3(S) v467(S) [immediate:988] v468(S) v469(S) v470(S) v507(S) v508(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v556(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v556 #1 #216 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:985] v468(-) v469(-) v470(S) v507(-) v508(-) v556(-) [immediate:986]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v556(R) [immediate:982] v43(R) #215 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:983] v468(-) v469(-) v470(S) v507(-) v508(-) v556(-) [immediate:984]
gap () () 
          v554(R) = X64MovqDecompressTaggedPointer : MRI v556(R) [immediate:981]
gap () () 
          v557(R) = X64MovqDecompressTaggedSigned : MRI v556(R) [immediate:980]
gap () (v555(R) = v557(-);) 
          v555(1) = X64Sar32 v555(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v555 #1 #214 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:978] v468(-) v469(-) v470(S) v507(-) v508(-) v556(-) [immediate:979]
gap () () 
          v509(R) = X64Movsd : MRI v554(R) [immediate:977]
gap () ([rdx|R|t] = v469(-); [rcx|R|t] = v551(-); [rax|R|w64] = v552(-); [rbx|R|t] = v553(-); [rsi|R|tp] = v470(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:975] #-1 #213 v0(S) v1(S) v2(S) v3(S) v467(S) [immediate:976] v468(S) v469(S) v470(S) v507(S) v508(S) v509(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v510(-) = [rax|R|t];) () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v508(R) v507 [immediate:973] [immediate:974]
gap () (v538 = v373(-);) 
          ArchJmp [immediate:972]
gap () (v538 = v372(-);) 
          ArchJmp [immediate:971]
gap () () 
          X64Test32 && deoptimize if equal v510 #1 #212 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:969] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:970]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v510(R) [immediate:966] v43(R) #211 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:967] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:968]
gap () () 
          v548(R) = X64MovqDecompressTaggedPointer : MRI v510(R) [immediate:965]
gap () () 
          v550(R) = X64MovqDecompressTaggedSigned : MRI v510(R) [immediate:964]
gap () (v549(R) = v550(-);) 
          v549(1) = X64Sar32 v549(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v549 #1 #210 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:962] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:963]
gap () () 
          v547(R) = X64Movsd : MRI v548(R) [immediate:961]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v547(R) v509 [immediate:959] [immediate:960]
gap () (v537 = v373(-);) 
          ArchJmp [immediate:958]
gap () (v537 = v372(-);) 
          ArchJmp [immediate:957]
gap () () 
          [constant:527] = ArchNop
gap () () 
          v546(R) = AVXFloat64Sub v547(R) v509
gap () () 
          v539(R) = AVXFloat64Abs v546
gap () () 
          v544(R) = AVXFloat64Sub v508(R) v507
gap () () 
          v540(R) = AVXFloat64Abs v544
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v540(R) v539 [immediate:955] [immediate:956]
gap () () 
          v542(R) = AVXFloat64Mul v539(R) v527
gap () (v476 = v537(-); v474 = v304(-); v475 = v304(-); v473 = v538(-); v479 = v540(-); v517 = v542(-); v477 = v539(-);) 
          ArchJmp [immediate:954]
gap () () 
          v541(R) = AVXFloat64Mul v540(R) v527
gap () (v476 = v304(-); v474 = v537(-); v475 = v538(-); v473 = v304(-); v479 = v539(-); v517 = v541(-); v477 = v540(-);) 
          ArchJmp [immediate:953]
gap () () 
          [constant:535] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v535(R) [immediate:950] v536(R) #209 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:951] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:952]
gap () () 
          v534(R) = X64MovqDecompressTaggedPointer : MRI v535(R) [immediate:949]
gap () () 
          v521(R) = X64Movl : MRI v534(R) [immediate:948]
gap () () 
          v533(R) = X64MovqDecompressAnyTagged : MRI v470(R) [immediate:947]
gap () () 
          X64Test32 && deoptimize if equal v533 #1 #208 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:945] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:946]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v533(R) [immediate:942] v10(R) #207 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:943] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:944]
gap () () 
          v445(R) = X64MovqDecompressTaggedPointer : MRI v533(R) [immediate:941]
gap () () 
          v531(R) = X64MovqDecompressAnyTagged : MRI v445(R) [immediate:940]
gap () () 
          v519(R) = X64Test32 && set if equal v531 #1
gap () (v506(R) = v531(-);) 
          v506(1) = X64Sar32 v506(R) #1
gap () () 
          X64Cmp32 && branch if not equal v519 #0 [immediate:938] [immediate:939]
gap () () 
          v532(R) = X64MovqDecompressTaggedPointer : MRI v531(R) [immediate:937]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v532(R) [immediate:935] [immediate:936]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v532(R) [immediate:932] #67 #206 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:933] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:934]
gap () () 
          ArchJmp [immediate:931]
gap () () 
          ArchJmp [immediate:930]
gap () () 
          v529(R) = X64Movsd : MRI v531(R) [immediate:929]
gap () (v528 = v529(-);) 
          ArchJmp [immediate:928]
gap () () 
          v530(R) = SSEInt32ToFloat64 v506
gap () (v528 = v530(-);) 
          ArchJmp [immediate:927]
gap () () 
          v525(R) = AVXFloat64Add v528(R) v477
gap () () 
          v522(R) = SSEFloat64Round v525(R)
gap () () 
          v526(R) = AVXFloat64Sub v522(R) v527
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v525(R) v526 [immediate:925] [immediate:926]
gap () () 
          [constant:524] = ArchNop
gap () () 
          v523(R) = AVXFloat64Sub v522(R) v524
gap () (v451 = v523(-);) 
          ArchJmp [immediate:924]
gap () (v451 = v522(-);) 
          ArchJmp [immediate:923]
gap () () 
          v464(R) = SSEFloat64ToInt32 v451
gap () () 
          X64Cmp32 && deoptimize if not equal v520(R) v521 #205 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:921] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:922]
gap () () 
          v518(R) = SSEInt32ToFloat64 v464
gap () () 
          X64Cmp32 && deoptimize if equal v519 #0 #204 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:919] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:920]
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v518(R) v451 #203 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:917] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:918]
gap () () 
          X64Cmp32 && branch if signed less than v506(R) v464 [immediate:915] [immediate:916]
gap () () 
          ArchJmp [immediate:914]
gap () () 
          v513(R) = AVXFloat64Add v517(R) v479
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v513(R) v477 [immediate:912] [immediate:913]
gap () (v505 = v509(-); v504 = v507(-); v499 = v513(-);) 
          ArchJmp [immediate:911]
gap () () 
          v516(R) = SSEInt32ToFloat64 v474
gap () () 
          v515(R) = SSEInt32ToFloat64 v473
gap () () 
          v511(R) = AVXFloat64Add v516(R) v509
gap () () 
          v512(R) = AVXFloat64Add v515(R) v507
gap () () 
          v514(R) = AVXFloat64Sub v513(R) v477
gap () (v505 = v511(-); v504 = v512(-); v499 = v514(-);) 
          ArchJmp [immediate:910]
gap () () 
          v485(R) = SSEInt32ToFloat64 v476
gap () () 
          v483(R) = SSEInt32ToFloat64 v475
gap () (v503(R) = v506(-);) 
          v503(1) = X64Add32 && deoptimize if overflow v503(R) #1 #202 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:908] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:909]
gap () () 
          v497(R) = AVXFloat64Add v505(R) v485
gap () () 
          v498(R) = AVXFloat64Add v504(R) v483
gap () (v500 = v503(-);) 
          v500(1) = ArchNop v500
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:906] [immediate:907]
gap () () 
          [constant:502] = ArchNop
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v502(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:904] #-1 #201 v0(S) v1(S) v2(S) v3(S) v467(S) [immediate:905] v468(S) v469(S) v470(S) v498(S) v497(S) v473(S) v474(S) v475(S) v476(S) v477(S) v499(S) v479(S) v451(S) v500(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:903]
gap () () 
          ArchJmp [immediate:902]
gap () (v489 = v497(-); v488 = v498(-); v490 = v499(-); v487 = v500(-);) 
          ArchJmp [immediate:901]
gap () () 
          X64Cmp32 && branch if signed less than v487(R) v464 [immediate:899] [immediate:900]
gap () () 
          v493(R) = AVXFloat64Add v490(R) v479
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v493(R) v477 [immediate:897] [immediate:898]
gap () (v486 = v489(-); v484 = v488(-); v478 = v493(-);) 
          ArchJmp [immediate:896]
gap () () 
          v496(R) = SSEInt32ToFloat64 v474
gap () () 
          v491(R) = AVXFloat64Add v496(R) v489
gap () () 
          v495(R) = SSEInt32ToFloat64 v473
gap () () 
          v492(R) = AVXFloat64Add v495(R) v488
gap () () 
          v494(R) = AVXFloat64Sub v493(R) v477
gap () (v486 = v491(-); v484 = v492(-); v478 = v494(-);) 
          ArchJmp [immediate:895]
gap () (v482(R) = v487(-);) 
          v482(1) = X64Add32 && deoptimize if overflow v482(R) #1 #200 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:894] v468(-) v469(-) v470(S) v488(-) v489(-) v473(-) v474(-) v475(-) v476(-) v477(-) v490(-) v479(-) v451(-) v487(-) v451(-)
gap () () 
          v472(R) = AVXFloat64Add v485(R) v486
gap () () 
          v471(R) = AVXFloat64Add v483(R) v484
gap () (v480 = v482(-);) 
          v480(1) = ArchNop v480
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:892] [immediate:893]
gap () () 
          [constant:481] = ArchNop
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v481(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:890] #-1 #199 v0(S) v1(S) v2(S) v3(S) v467(S) [immediate:891] v468(S) v469(S) v470(S) v471(S) v472(S) v473(S) v474(S) v475(S) v476(S) v477(S) v478(S) v479(S) v451(S) v480(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:889]
gap () () 
          ArchJmp [immediate:888]
gap () (v489 = v472(-); v488 = v471(-); v490 = v478(-); v487 = v480(-);) 
          ArchJmp [immediate:887]
gap () () 
          ArchJmp [immediate:886]
gap () () 
          X64Cmp32 && branch if equal v464 #0 [immediate:884] [immediate:885]
gap () () 
          ArchJmp [immediate:883]
gap () () 
          v465(R) = SSEFloat64ExtractHighWord32 v451
gap () () 
          X64Cmp32 && branch if signed less than v465 #0 [immediate:881] [immediate:882]
gap () () 
          ArchJmp [immediate:880]
gap () (v463(R) = v464(-);) 
          v463(1) = X64Add32 && branch if overflow v463(R) v464(R) [immediate:876] [immediate:877] [immediate:878] [immediate:879]
gap () (v462 = v463(-);) 
          v462(1) = ArchNop v462
gap () (v446 = v462(-);) 
          ArchJmp [immediate:875]
gap () () 
          ArchJmp [immediate:874]
gap () () 
          ArchJmp [immediate:873]
gap () () 
          [constant:460] = ArchNop
gap () () 
          v456(R) = X64Movq : MR v28(R)
gap () () 
          v461(R) = X64Lea : MRI v456(R) [immediate:872]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v461(R) [immediate:870] [immediate:871]
gap () () 
          ArchJmp [immediate:869]
gap () ([rdx|R|w64] = v460(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:868] #-1 [rdx|R|w64]
gap (v459(-) = [rax|R|tp];) () 
          v457(R) = X64Lea : MRI v459(R) [immediate:867]
gap () (v454 = v457(-);) 
          ArchJmp [immediate:866]
gap () (v454 = v456(-);) 
          ArchJmp [immediate:865]
gap () () 
          [constant:452] = ArchNop
gap () () 
          v455(R) = X64Lea : MRI v454(R) [immediate:864]
gap () () 
          X64Movq : MR v28(R) v455(R)
gap () () 
          v453(R) = X64Lea : MRI v454(R) [immediate:863]
gap () (v450 = v453(-);) 
          v450(1) = ArchNop v450
gap () () 
          X64MovqCompressTagged : MRI v450(R) [immediate:862] v452(R)
gap () () 
          X64Movsd : MRI v450(R) [immediate:861] v451(R)
gap () (v446 = v450(-);) 
          ArchJmp [immediate:860]
gap () () 
          [constant:438] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v445(R) [immediate:859] v446(R)
gap () () 
          v440(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:858]
gap () () 
          X64Test32 && deoptimize if equal v440 #1 #198 v0(S) v1(-) v2(S) v3(-) v440(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v440(R) [immediate:857] v10(R) #197 v0(S) v1(-) v2(S) v3(-) v440(-)
gap () () 
          v444(R) = X64MovqDecompressTaggedPointer : MRI v440(R) [immediate:856]
gap () () 
          v442(R) = X64MovqDecompressAnyTagged : MRI v444(R) [immediate:855]
gap () () 
          X64Test32 && deoptimize if equal v442 #1 #196 v0(S) v1(-) v2(S) v3(-) v440(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v442(R) [immediate:854] v25(R) #195 v0(S) v1(-) v2(S) v3(-) v440(-)
gap () () 
          v437(R) = X64MovqDecompressTaggedPointer : MRI v442(R) [immediate:853]
gap () () 
          v443(R) = X64Movl : MRI v437(R) [immediate:852]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v443(R) #194 v0(S) v1(-) v2(S) v3(-) v440(-)
gap () () 
          v441(R) = X64MovqDecompressTaggedSigned : MRI v442(R) [immediate:851]
gap () (v439(R) = v441(-);) 
          v439(1) = X64Sar32 v439(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v439 #5 #193 v0(S) v1(-) v2(S) v3(-) v440(-)
gap () () 
          X64MovqCompressTagged : MRI v437(R) [immediate:850] v438(R)
gap () () 
          ArchJmp [immediate:849]
gap () () 
          ArchJmp [immediate:848]
gap () () 
          ArchJmp [immediate:847]
gap () () 
          v424(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:846]
gap () () 
          X64Test32 && deoptimize if equal v424 #1 #192 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v424(R) [immediate:845] v10(R) #191 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v436(R) = X64MovqDecompressTaggedPointer : MRI v424(R) [immediate:844]
gap () () 
          v435(R) = X64MovqDecompressAnyTagged : MRI v436(R) [immediate:843]
gap () () 
          X64Test32 && deoptimize if equal v435 #1 #190 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v435(R) [immediate:842] v25(R) #189 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v432(R) = X64MovqDecompressTaggedPointer : MRI v435(R) [immediate:841]
gap () () 
          v434(R) = X64MovqDecompressTaggedSigned : MRI v435(R) [immediate:840]
gap () (v433(R) = v434(-);) 
          v433(1) = X64Sar32 v433(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v433 #6 #188 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v429(R) = X64MovqDecompressAnyTagged : MRI v432(R) [immediate:839]
gap () () 
          X64Test32 && branch if equal v429 #1 [immediate:837] [immediate:838]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v429(R) [immediate:835] [immediate:836]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v429(R) [immediate:833] [immediate:834]
gap () () 
          v431(R) = X64MovqDecompressTaggedPointer : MRI v429(R) [immediate:832]
gap () () 
          X64Test8 : MRI && branch if equal v431(R) [immediate:829] #16 [immediate:830] [immediate:831]
gap () () 
          ArchJmp [immediate:828]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v431(R) [immediate:826] [immediate:827]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v431(R) [immediate:824] [immediate:825]
gap () () 
          ArchJmp [immediate:823]
gap () () 
          X64Test32 : MRI && branch if not equal v429(R) [immediate:820] #2147483646 [immediate:821] [immediate:822]
gap () () 
          ArchJmp [immediate:819]
gap () () 
          ArchJmp [immediate:818]
gap () () 
          v430(R) = X64Movsd : MRI v429(R) [immediate:817]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v430 [immediate:815] [immediate:816]
gap () () 
          ArchJmp [immediate:814]
gap () () 
          ArchJmp [immediate:813]
gap () () 
          ArchJmp [immediate:812]
gap () () 
          ArchJmp [immediate:811]
gap () () 
          X64Cmp32 && branch if not equal v429 [immediate:808] [immediate:809] [immediate:810]
gap () () 
          ArchJmp [immediate:807]
gap () () 
          [constant:422] = ArchNop
gap () () 
          [constant:421] = ArchNop
gap () () 
          [constant:418] = ArchNop
gap () () 
          [constant:409] = ArchNop
gap () () 
          v417(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:806]
gap () () 
          v426(R) = X64MovqDecompressTaggedPointer : MRI v424(R) [immediate:805]
gap () () 
          v428(R) = X64MovqDecompressTaggedSigned : MRI v424(R) [immediate:804]
gap () (v427(R) = v428(-);) 
          v427(1) = X64Sar32 v427(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v427 #6 #187 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v419(R) = X64MovqDecompressAnyTagged : MRI v426(R) [immediate:803]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v427 #7 #186 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v420(R) = X64MovqDecompressAnyTagged : MRI v426(R) [immediate:802]
gap () () 
          X64Test32 && deoptimize if equal v417 #1 #185 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v425(R) = X64MovqDecompressTaggedPointer : MRI v417(R) [immediate:801]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v425(R) [immediate:800] #1068 #184 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v423(R) = X64MovqDecompressTaggedPointer : MRI v417(R) [immediate:799]
gap () () 
          X64Cmp && deoptimize if not equal v422(R) v423 #183 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          X64Push v420(-)
gap () () 
          X64Push v419(-)
gap () () 
          X64Push v418(-)
gap () ([rdi|R|t] = v417(-); [rax|R|w64] = v70(-); [rsi|R|t] = v421(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:798] #-1 #182 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v411(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:797]
gap () () 
          X64Test32 && deoptimize if equal v411 #1 #181 v0(S) v1(-) v2(S) v3(-) v411(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v411(R) [immediate:796] v10(R) #180 v0(S) v1(-) v2(S) v3(-) v411(-)
gap () () 
          v415(R) = X64MovqDecompressTaggedPointer : MRI v411(R) [immediate:795]
gap () () 
          v413(R) = X64MovqDecompressAnyTagged : MRI v415(R) [immediate:794]
gap () () 
          X64Test32 && deoptimize if equal v413 #1 #179 v0(S) v1(-) v2(S) v3(-) v411(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v413(R) [immediate:793] v25(R) #178 v0(S) v1(-) v2(S) v3(-) v411(-)
gap () () 
          v408(R) = X64MovqDecompressTaggedPointer : MRI v413(R) [immediate:792]
gap () () 
          v414(R) = X64Movl : MRI v408(R) [immediate:791]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v414(R) #177 v0(S) v1(-) v2(S) v3(-) v411(-)
gap () () 
          v412(R) = X64MovqDecompressTaggedSigned : MRI v413(R) [immediate:790]
gap () (v410(R) = v412(-);) 
          v410(1) = X64Sar32 v410(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v410 #6 #176 v0(S) v1(-) v2(S) v3(-) v411(-)
gap () () 
          X64MovqCompressTagged : MRI v408(R) [immediate:789] v409(R)
gap () () 
          ArchJmp [immediate:788]
gap () () 
          ArchJmp [immediate:787]
gap () () 
          ArchJmp [immediate:786]
gap () () 
          v395(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:785]
gap () () 
          X64Test32 && deoptimize if equal v395 #1 #175 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v395(R) [immediate:784] v10(R) #174 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v407(R) = X64MovqDecompressTaggedPointer : MRI v395(R) [immediate:783]
gap () () 
          v406(R) = X64MovqDecompressAnyTagged : MRI v407(R) [immediate:782]
gap () () 
          X64Test32 && deoptimize if equal v406 #1 #173 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v406(R) [immediate:781] v25(R) #172 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v403(R) = X64MovqDecompressTaggedPointer : MRI v406(R) [immediate:780]
gap () () 
          v405(R) = X64MovqDecompressTaggedSigned : MRI v406(R) [immediate:779]
gap () (v404(R) = v405(-);) 
          v404(1) = X64Sar32 v404(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v404 #7 #171 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v400(R) = X64MovqDecompressAnyTagged : MRI v403(R) [immediate:778]
gap () () 
          X64Test32 && branch if equal v400 #1 [immediate:776] [immediate:777]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v400(R) [immediate:774] [immediate:775]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v400(R) [immediate:772] [immediate:773]
gap () () 
          v402(R) = X64MovqDecompressTaggedPointer : MRI v400(R) [immediate:771]
gap () () 
          X64Test8 : MRI && branch if equal v402(R) [immediate:768] #16 [immediate:769] [immediate:770]
gap () () 
          ArchJmp [immediate:767]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v402(R) [immediate:765] [immediate:766]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v402(R) [immediate:763] [immediate:764]
gap () () 
          ArchJmp [immediate:762]
gap () () 
          X64Test32 : MRI && branch if not equal v400(R) [immediate:759] #2147483646 [immediate:760] [immediate:761]
gap () () 
          ArchJmp [immediate:758]
gap () () 
          ArchJmp [immediate:757]
gap () () 
          v401(R) = X64Movsd : MRI v400(R) [immediate:756]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v401 [immediate:754] [immediate:755]
gap () () 
          ArchJmp [immediate:753]
gap () () 
          ArchJmp [immediate:752]
gap () () 
          ArchJmp [immediate:751]
gap () () 
          ArchJmp [immediate:750]
gap () () 
          X64Cmp32 && branch if not equal v400 [immediate:747] [immediate:748] [immediate:749]
gap () () 
          ArchJmp [immediate:746]
gap () () 
          [constant:393] = ArchNop
gap () () 
          [constant:351] = ArchNop
gap () () 
          v289(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:745]
gap () () 
          v397(R) = X64MovqDecompressTaggedPointer : MRI v395(R) [immediate:744]
gap () () 
          v399(R) = X64MovqDecompressTaggedSigned : MRI v395(R) [immediate:743]
gap () (v398(R) = v399(-);) 
          v398(1) = X64Sar32 v398(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v398 #7 #170 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v290(R) = X64MovqDecompressAnyTagged : MRI v397(R) [immediate:742]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v398 #4 #169 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v291(R) = X64MovqDecompressAnyTagged : MRI v397(R) [immediate:741]
gap () () 
          X64Test32 && deoptimize if equal v289 #1 #168 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v396(R) = X64MovqDecompressTaggedPointer : MRI v289(R) [immediate:740]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v396(R) [immediate:739] #1068 #167 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v394(R) = X64MovqDecompressTaggedPointer : MRI v289(R) [immediate:738]
gap () () 
          X64Cmp && deoptimize if not equal v393(R) v394 #166 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v292(R) = X64MovqDecompressTaggedPointer : MRI v289(R) [immediate:737]
gap () () 
          [constant:379] = ArchNop
gap () () 
          [constant:384] = ArchNop
gap () () 
          [constant:377] = ArchNop
gap () ([rdx|R|t] = v290(-); [rcx|R|t] = v377(-); [rax|R|w64] = v384(-); [rbx|R|t] = v379(-); [rsi|R|tp] = v292(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:735] #-1 #165 v0(S) v1(S) v2(S) v3(S) v289(S) [immediate:736] v290(S) v291(S) v292(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v391(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v391 #1 #164 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:733] v290(-) v291(-) v292(S) v391(-) [immediate:734]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v391(R) [immediate:730] v43(R) #163 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:731] v290(-) v291(-) v292(S) v391(-) [immediate:732]
gap () () 
          v389(R) = X64MovqDecompressTaggedPointer : MRI v391(R) [immediate:729]
gap () () 
          v392(R) = X64MovqDecompressTaggedSigned : MRI v391(R) [immediate:728]
gap () (v390(R) = v392(-);) 
          v390(1) = X64Sar32 v390(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v390 #0 #162 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:726] v290(-) v291(-) v292(S) v391(-) [immediate:727]
gap () () 
          v331(R) = X64Movsd : MRI v389(R) [immediate:725]
gap () () 
          [constant:378] = ArchNop
gap () ([rdx|R|t] = v291(-); [rcx|R|t] = v377(-); [rax|R|w64] = v378(-); [rbx|R|t] = v379(-); [rsi|R|tp] = v292(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:723] #-1 #161 v0(S) v1(S) v2(S) v3(S) v289(S) [immediate:724] v290(S) v291(S) v292(S) v331(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v387(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v387 #1 #160 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:721] v290(-) v291(-) v292(S) v331(-) v387(-) [immediate:722]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v387(R) [immediate:718] v43(R) #159 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:719] v290(-) v291(-) v292(S) v331(-) v387(-) [immediate:720]
gap () () 
          v385(R) = X64MovqDecompressTaggedPointer : MRI v387(R) [immediate:717]
gap () () 
          v388(R) = X64MovqDecompressTaggedSigned : MRI v387(R) [immediate:716]
gap () (v386(R) = v388(-);) 
          v386(1) = X64Sar32 v386(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v386 #0 #158 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:714] v290(-) v291(-) v292(S) v331(-) v387(-) [immediate:715]
gap () () 
          v332(R) = X64Movsd : MRI v385(R) [immediate:713]
gap () ([rdx|R|t] = v290(-); [rcx|R|t] = v377(-); [rax|R|w64] = v384(-); [rbx|R|t] = v379(-); [rsi|R|tp] = v292(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:711] #-1 #157 v0(S) v1(S) v2(S) v3(S) v289(S) [immediate:712] v290(S) v291(S) v292(S) v331(S) v332(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v382(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v382 #1 #156 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:709] v290(-) v291(-) v292(S) v331(-) v332(-) v382(-) [immediate:710]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v382(R) [immediate:706] v43(R) #155 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:707] v290(-) v291(-) v292(S) v331(-) v332(-) v382(-) [immediate:708]
gap () () 
          v380(R) = X64MovqDecompressTaggedPointer : MRI v382(R) [immediate:705]
gap () () 
          v383(R) = X64MovqDecompressTaggedSigned : MRI v382(R) [immediate:704]
gap () (v381(R) = v383(-);) 
          v381(1) = X64Sar32 v381(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v381 #1 #154 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:702] v290(-) v291(-) v292(S) v331(-) v332(-) v382(-) [immediate:703]
gap () () 
          v333(R) = X64Movsd : MRI v380(R) [immediate:701]
gap () ([rdx|R|t] = v291(-); [rcx|R|t] = v377(-); [rax|R|w64] = v378(-); [rbx|R|t] = v379(-); [rsi|R|tp] = v292(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:699] #-1 #153 v0(S) v1(S) v2(S) v3(S) v289(S) [immediate:700] v290(S) v291(S) v292(S) v331(S) v332(S) v333(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v334(-) = [rax|R|t];) () 
          [constant:359] = ArchNop
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v332(R) v331 [immediate:697] [immediate:698]
gap () (v362 = v373(-);) 
          ArchJmp [immediate:696]
gap () (v362 = v372(-);) 
          ArchJmp [immediate:695]
gap () () 
          X64Test32 && deoptimize if equal v334 #1 #152 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:693] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:694]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v334(R) [immediate:690] v43(R) #151 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:691] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:692]
gap () () 
          v374(R) = X64MovqDecompressTaggedPointer : MRI v334(R) [immediate:689]
gap () () 
          v376(R) = X64MovqDecompressTaggedSigned : MRI v334(R) [immediate:688]
gap () (v375(R) = v376(-);) 
          v375(1) = X64Sar32 v375(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v375 #1 #150 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:686] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:687]
gap () () 
          v371(R) = X64Movsd : MRI v374(R) [immediate:685]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v371(R) v333 [immediate:683] [immediate:684]
gap () (v361 = v373(-);) 
          ArchJmp [immediate:682]
gap () (v361 = v372(-);) 
          ArchJmp [immediate:681]
gap () () 
          v370(R) = AVXFloat64Sub v371(R) v333
gap () () 
          v363(R) = AVXFloat64Abs v370
gap () () 
          v368(R) = AVXFloat64Sub v332(R) v331
gap () () 
          v364(R) = AVXFloat64Abs v368
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v364(R) v363 [immediate:679] [immediate:680]
gap () () 
          v366(R) = AVXFloat64Mul v363(R) v351
gap () (v298 = v361(-); v296 = v304(-); v297 = v304(-); v295 = v362(-); v301 = v364(-); v341 = v366(-); v299 = v363(-);) 
          ArchJmp [immediate:678]
gap () () 
          v365(R) = AVXFloat64Mul v364(R) v351
gap () (v298 = v304(-); v296 = v361(-); v297 = v362(-); v295 = v304(-); v301 = v363(-); v341 = v365(-); v299 = v364(-);) 
          ArchJmp [immediate:677]
gap () () 
          [constant:360] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v359(R) [immediate:674] v360(R) #149 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:675] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:676]
gap () () 
          v358(R) = X64MovqDecompressTaggedPointer : MRI v359(R) [immediate:673]
gap () () 
          v345(R) = X64Movl : MRI v358(R) [immediate:672]
gap () () 
          v357(R) = X64MovqDecompressAnyTagged : MRI v292(R) [immediate:671]
gap () () 
          X64Test32 && deoptimize if equal v357 #1 #148 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:669] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:670]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v357(R) [immediate:666] v10(R) #147 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:667] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:668]
gap () () 
          v267(R) = X64MovqDecompressTaggedPointer : MRI v357(R) [immediate:665]
gap () () 
          v355(R) = X64MovqDecompressAnyTagged : MRI v267(R) [immediate:664]
gap () () 
          v343(R) = X64Test32 && set if equal v355 #1
gap () (v330(R) = v355(-);) 
          v330(1) = X64Sar32 v330(R) #1
gap () () 
          X64Cmp32 && branch if not equal v343 #0 [immediate:662] [immediate:663]
gap () () 
          v356(R) = X64MovqDecompressTaggedPointer : MRI v355(R) [immediate:661]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v356(R) [immediate:659] [immediate:660]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v356(R) [immediate:656] #67 #146 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:657] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:658]
gap () () 
          ArchJmp [immediate:655]
gap () () 
          ArchJmp [immediate:654]
gap () () 
          v353(R) = X64Movsd : MRI v355(R) [immediate:653]
gap () (v352 = v353(-);) 
          ArchJmp [immediate:652]
gap () () 
          v354(R) = SSEInt32ToFloat64 v330
gap () (v352 = v354(-);) 
          ArchJmp [immediate:651]
gap () () 
          v349(R) = AVXFloat64Add v352(R) v299
gap () () 
          v346(R) = SSEFloat64Round v349(R)
gap () () 
          v350(R) = AVXFloat64Sub v346(R) v351
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v349(R) v350 [immediate:649] [immediate:650]
gap () () 
          [constant:348] = ArchNop
gap () () 
          v347(R) = AVXFloat64Sub v346(R) v348
gap () (v273 = v347(-);) 
          ArchJmp [immediate:648]
gap () (v273 = v346(-);) 
          ArchJmp [immediate:647]
gap () () 
          v286(R) = SSEFloat64ToInt32 v273
gap () () 
          [constant:344] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v344(R) v345 #145 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:645] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:646]
gap () () 
          v342(R) = SSEInt32ToFloat64 v286
gap () () 
          X64Cmp32 && deoptimize if equal v343 #0 #144 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:643] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:644]
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v342(R) v273 #143 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:641] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:642]
gap () () 
          X64Cmp32 && branch if signed less than v330(R) v286 [immediate:639] [immediate:640]
gap () () 
          ArchJmp [immediate:638]
gap () () 
          v337(R) = AVXFloat64Add v341(R) v301
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v337(R) v299 [immediate:636] [immediate:637]
gap () (v329 = v333(-); v328 = v331(-); v323 = v337(-);) 
          ArchJmp [immediate:635]
gap () () 
          v340(R) = SSEInt32ToFloat64 v296
gap () () 
          v339(R) = SSEInt32ToFloat64 v295
gap () () 
          v335(R) = AVXFloat64Add v340(R) v333
gap () () 
          v336(R) = AVXFloat64Add v339(R) v331
gap () () 
          v338(R) = AVXFloat64Sub v337(R) v299
gap () (v329 = v335(-); v328 = v336(-); v323 = v338(-);) 
          ArchJmp [immediate:634]
gap () () 
          v309(R) = SSEInt32ToFloat64 v298
gap () () 
          v307(R) = SSEInt32ToFloat64 v297
gap () (v327(R) = v330(-);) 
          v327(1) = X64Add32 && deoptimize if overflow v327(R) #1 #142 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:632] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:633]
gap () () 
          v321(R) = AVXFloat64Add v329(R) v309
gap () () 
          v322(R) = AVXFloat64Add v328(R) v307
gap () (v324 = v327(-);) 
          v324(1) = ArchNop v324
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:630] [immediate:631]
gap () () 
          [constant:326] = ArchNop
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v326(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:628] #-1 #141 v0(S) v1(S) v2(S) v3(S) v289(S) [immediate:629] v290(S) v291(S) v292(S) v322(S) v321(S) v295(S) v296(S) v297(S) v298(S) v299(S) v323(S) v301(S) v273(S) v324(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:627]
gap () () 
          ArchJmp [immediate:626]
gap () (v313 = v321(-); v312 = v322(-); v314 = v323(-); v311 = v324(-);) 
          ArchJmp [immediate:625]
gap () () 
          X64Cmp32 && branch if signed less than v311(R) v286 [immediate:623] [immediate:624]
gap () () 
          v317(R) = AVXFloat64Add v314(R) v301
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v317(R) v299 [immediate:621] [immediate:622]
gap () (v310 = v313(-); v308 = v312(-); v300 = v317(-);) 
          ArchJmp [immediate:620]
gap () () 
          v320(R) = SSEInt32ToFloat64 v296
gap () () 
          v315(R) = AVXFloat64Add v320(R) v313
gap () () 
          v319(R) = SSEInt32ToFloat64 v295
gap () () 
          v316(R) = AVXFloat64Add v319(R) v312
gap () () 
          v318(R) = AVXFloat64Sub v317(R) v299
gap () (v310 = v315(-); v308 = v316(-); v300 = v318(-);) 
          ArchJmp [immediate:619]
gap () (v306(R) = v311(-);) 
          v306(1) = X64Add32 && deoptimize if overflow v306(R) #1 #140 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:618] v290(-) v291(-) v292(S) v312(-) v313(-) v295(-) v296(-) v297(-) v298(-) v299(-) v314(-) v301(-) v273(-) v311(-) v273(-)
gap () () 
          v294(R) = AVXFloat64Add v309(R) v310
gap () () 
          v293(R) = AVXFloat64Add v307(R) v308
gap () (v302 = v306(-);) 
          v302(1) = ArchNop v302
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:616] [immediate:617]
gap () () 
          [constant:305] = ArchNop
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v305(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:614] #-1 #139 v0(S) v1(S) v2(S) v3(S) v289(S) [immediate:615] v290(S) v291(S) v292(S) v293(S) v294(S) v295(S) v296(S) v297(S) v298(S) v299(S) v300(S) v301(S) v273(S) v302(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:613]
gap () () 
          ArchJmp [immediate:612]
gap () (v313 = v294(-); v312 = v293(-); v314 = v300(-); v311 = v302(-);) 
          ArchJmp [immediate:611]
gap () () 
          ArchJmp [immediate:610]
gap () () 
          X64Cmp32 && branch if equal v286 #0 [immediate:608] [immediate:609]
gap () () 
          ArchJmp [immediate:607]
gap () () 
          v287(R) = SSEFloat64ExtractHighWord32 v273
gap () () 
          X64Cmp32 && branch if signed less than v287 #0 [immediate:605] [immediate:606]
gap () () 
          ArchJmp [immediate:604]
gap () (v285(R) = v286(-);) 
          v285(1) = X64Add32 && branch if overflow v285(R) v286(R) [immediate:600] [immediate:601] [immediate:602] [immediate:603]
gap () (v284 = v285(-);) 
          v284(1) = ArchNop v284
gap () (v268 = v284(-);) 
          ArchJmp [immediate:599]
gap () () 
          ArchJmp [immediate:598]
gap () () 
          ArchJmp [immediate:597]
gap () () 
          [constant:274] = ArchNop
gap () () 
          [constant:282] = ArchNop
gap () () 
          v278(R) = X64Movq : MR v28(R)
gap () () 
          v283(R) = X64Lea : MRI v278(R) [immediate:596]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v283(R) [immediate:594] [immediate:595]
gap () () 
          ArchJmp [immediate:593]
gap () ([rdx|R|w64] = v282(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:592] #-1 [rdx|R|w64]
gap (v281(-) = [rax|R|tp];) () 
          v279(R) = X64Lea : MRI v281(R) [immediate:591]
gap () (v276 = v279(-);) 
          ArchJmp [immediate:590]
gap () (v276 = v278(-);) 
          ArchJmp [immediate:589]
gap () () 
          v277(R) = X64Lea : MRI v276(R) [immediate:588]
gap () () 
          X64Movq : MR v28(R) v277(R)
gap () () 
          v275(R) = X64Lea : MRI v276(R) [immediate:587]
gap () (v272 = v275(-);) 
          v272(1) = ArchNop v272
gap () () 
          X64MovqCompressTagged : MRI v272(R) [immediate:586] v274(R)
gap () () 
          X64Movsd : MRI v272(R) [immediate:585] v273(R)
gap () (v268 = v272(-);) 
          ArchJmp [immediate:584]
gap () () 
          [constant:260] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v267(R) [immediate:583] v268(R)
gap () () 
          v262(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:582]
gap () () 
          X64Test32 && deoptimize if equal v262 #1 #138 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v262(R) [immediate:581] v10(R) #137 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v266(R) = X64MovqDecompressTaggedPointer : MRI v262(R) [immediate:580]
gap () () 
          v264(R) = X64MovqDecompressAnyTagged : MRI v266(R) [immediate:579]
gap () () 
          X64Test32 && deoptimize if equal v264 #1 #136 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v264(R) [immediate:578] v25(R) #135 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v259(R) = X64MovqDecompressTaggedPointer : MRI v264(R) [immediate:577]
gap () () 
          v265(R) = X64Movl : MRI v259(R) [immediate:576]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v265(R) #134 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v263(R) = X64MovqDecompressTaggedSigned : MRI v264(R) [immediate:575]
gap () (v261(R) = v263(-);) 
          v261(1) = X64Sar32 v261(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v261 #7 #133 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          X64MovqCompressTagged : MRI v259(R) [immediate:574] v260(R)
gap () () 
          ArchJmp [immediate:573]
gap () () 
          ArchJmp [immediate:572]
gap () () 
          ArchJmp [immediate:571]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:569] v49(R) #132 v0(S) v1(-) v2(S) v3(-) [immediate:570]
gap () () 
          v256(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:568]
gap () () 
          v258(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:567]
gap () (v257(R) = v258(-);) 
          v257(1) = X64Sar32 v257(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v257 #3 #131 v0(S) v1(-) v2(S) v3(-) [immediate:566]
gap () () 
          v254(R) = X64MovqDecompressAnyTagged : MRI v256(R) [immediate:565]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v254(R) [immediate:563] [immediate:564]
gap () (v253 = v254(-);) 
          ArchJmp [immediate:562]
gap () () 
          [constant:255] = ArchNop
gap () (v253 = v255(-);) 
          ArchJmp [immediate:561]
gap () () 
          X64Test32 && deoptimize if equal v253 #1 #130 v0(S) v1(-) v2(S) v3(-) [immediate:560]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v253(R) [immediate:558] v43(R) #129 v0(S) v1(-) v2(S) v3(-) [immediate:559]
gap () () 
          v250(R) = X64MovqDecompressTaggedPointer : MRI v253(R) [immediate:557]
gap () () 
          v252(R) = X64MovqDecompressTaggedSigned : MRI v253(R) [immediate:556]
gap () (v251(R) = v252(-);) 
          v251(1) = X64Sar32 v251(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v251 #2 #128 v0(S) v1(-) v2(S) v3(-) [immediate:555]
gap () () 
          v249(R) = X64Movsd : MRI v250(R) [immediate:554]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v249 [immediate:552] [immediate:553]
gap () () 
          ArchJmp [immediate:551]
gap () () 
          v236(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:550]
gap () () 
          X64Test32 && deoptimize if equal v236 #1 #127 v0(S) v1(-) v2(S) v3(-) [immediate:549]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v236(R) [immediate:547] v10(R) #126 v0(S) v1(-) v2(S) v3(-) [immediate:548]
gap () () 
          v248(R) = X64MovqDecompressTaggedPointer : MRI v236(R) [immediate:546]
gap () () 
          v247(R) = X64MovqDecompressAnyTagged : MRI v248(R) [immediate:545]
gap () () 
          X64Test32 && deoptimize if equal v247 #1 #125 v0(S) v1(-) v2(S) v3(-) [immediate:544]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v247(R) [immediate:542] v25(R) #124 v0(S) v1(-) v2(S) v3(-) [immediate:543]
gap () () 
          v240(R) = X64MovqDecompressTaggedPointer : MRI v247(R) [immediate:541]
gap () () 
          v246(R) = X64MovqDecompressTaggedSigned : MRI v247(R) [immediate:540]
gap () (v241(R) = v246(-);) 
          v241(1) = X64Sar32 v241(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v241 #4 #123 v0(S) v1(-) v2(S) v3(-) [immediate:539]
gap () () 
          v243(R) = X64MovqDecompressAnyTagged : MRI v240(R) [immediate:538]
gap () () 
          X64Test32 && branch if equal v243 #1 [immediate:536] [immediate:537]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v243(R) [immediate:534] [immediate:535]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v243(R) [immediate:532] [immediate:533]
gap () () 
          v245(R) = X64MovqDecompressTaggedPointer : MRI v243(R) [immediate:531]
gap () () 
          X64Test8 : MRI && branch if equal v245(R) [immediate:528] #16 [immediate:529] [immediate:530]
gap () () 
          ArchJmp [immediate:527]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v245(R) [immediate:525] [immediate:526]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v245(R) [immediate:523] [immediate:524]
gap () () 
          ArchJmp [immediate:522]
gap () () 
          X64Test32 : MRI && branch if not equal v243(R) [immediate:519] #2147483646 [immediate:520] [immediate:521]
gap () () 
          ArchJmp [immediate:518]
gap () () 
          ArchJmp [immediate:517]
gap () () 
          v244(R) = X64Movsd : MRI v243(R) [immediate:516]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v244 [immediate:514] [immediate:515]
gap () () 
          ArchJmp [immediate:513]
gap () () 
          ArchJmp [immediate:512]
gap () () 
          ArchJmp [immediate:511]
gap () () 
          ArchJmp [immediate:510]
gap () () 
          X64Cmp32 && branch if not equal v243 [immediate:507] [immediate:508] [immediate:509]
gap () () 
          ArchJmp [immediate:506]
gap () () 
          v242(R) = X64Movl : MRI v2(R) [immediate:505]
gap () () 
          ArchDeoptimize #122 v0(S) v1(-) v2(S) v3(-) v242(-) v236(-) [immediate:504]
gap () () 
          ArchJmp [immediate:503]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v241 #8 #121 v0(S) v1(-) v2(S) v3(-) [immediate:502]
gap () () 
          v237(R) = X64MovqDecompressAnyTagged : MRI v240(R) [immediate:501]
gap () () 
          X64Test32 && branch if equal v237 #1 [immediate:499] [immediate:500]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v237(R) [immediate:497] [immediate:498]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v237(R) [immediate:495] [immediate:496]
gap () () 
          v239(R) = X64MovqDecompressTaggedPointer : MRI v237(R) [immediate:494]
gap () () 
          X64Test8 : MRI && branch if equal v239(R) [immediate:491] #16 [immediate:492] [immediate:493]
gap () () 
          ArchJmp [immediate:490]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v239(R) [immediate:488] [immediate:489]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v239(R) [immediate:486] [immediate:487]
gap () () 
          ArchJmp [immediate:485]
gap () () 
          X64Test32 : MRI && branch if not equal v237(R) [immediate:482] #2147483646 [immediate:483] [immediate:484]
gap () () 
          ArchJmp [immediate:481]
gap () () 
          ArchJmp [immediate:480]
gap () () 
          v238(R) = X64Movsd : MRI v237(R) [immediate:479]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v238 [immediate:477] [immediate:478]
gap () () 
          ArchJmp [immediate:476]
gap () () 
          ArchJmp [immediate:475]
gap () () 
          ArchJmp [immediate:474]
gap () () 
          ArchJmp [immediate:473]
gap () () 
          X64Cmp32 && branch if not equal v237 [immediate:470] [immediate:471] [immediate:472]
gap () () 
          ArchJmp [immediate:469]
gap () () 
          v225(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:468]
gap () () 
          v233(R) = X64MovqDecompressTaggedPointer : MRI v236(R) [immediate:467]
gap () () 
          v235(R) = X64MovqDecompressTaggedSigned : MRI v236(R) [immediate:466]
gap () (v234(R) = v235(-);) 
          v234(1) = X64Sar32 v234(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v234 #5 #120 v0(S) v1(-) v2(S) v3(-) [immediate:465]
gap () () 
          v227(R) = X64MovqDecompressAnyTagged : MRI v233(R) [immediate:464]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v234 #1 #119 v0(S) v1(-) v2(S) v3(-) [immediate:463]
gap () () 
          v228(R) = X64MovqDecompressAnyTagged : MRI v233(R) [immediate:462]
gap () () 
          X64Test32 && deoptimize if equal v225 #1 #118 v0(S) v1(-) v2(S) v3(-) [immediate:461]
gap () () 
          v232(R) = X64MovqDecompressTaggedPointer : MRI v225(R) [immediate:460]
gap () () 
          [constant:230] = ArchNop
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v232(R) [immediate:458] #1068 #117 v0(S) v1(-) v2(S) v3(-) [immediate:459]
gap () () 
          v231(R) = X64MovqDecompressTaggedPointer : MRI v225(R) [immediate:457]
gap () () 
          [constant:229] = ArchNop
gap () () 
          [constant:226] = ArchNop
gap () () 
          X64Cmp && deoptimize if not equal v230(R) v231 #116 v0(S) v1(-) v2(S) v3(-) [immediate:456]
gap () () 
          X64Push v228(-)
gap () () 
          X64Push v227(-)
gap () () 
          X64Push v226(-)
gap () ([rdi|R|t] = v225(-); [rax|R|w64] = v70(-); [rsi|R|t] = v229(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:455] #-1 #115 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v219(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:454]
gap () () 
          X64Test32 && deoptimize if equal v219 #1 #114 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v219(R) [immediate:453] v10(R) #113 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          v223(R) = X64MovqDecompressTaggedPointer : MRI v219(R) [immediate:452]
gap () () 
          v221(R) = X64MovqDecompressAnyTagged : MRI v223(R) [immediate:451]
gap () () 
          X64Test32 && deoptimize if equal v221 #1 #112 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v221(R) [immediate:450] v25(R) #111 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          v216(R) = X64MovqDecompressTaggedPointer : MRI v221(R) [immediate:449]
gap () () 
          v222(R) = X64Movl : MRI v216(R) [immediate:448]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v222(R) #110 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          v220(R) = X64MovqDecompressTaggedSigned : MRI v221(R) [immediate:447]
gap () (v218(R) = v220(-);) 
          v218(1) = X64Sar32 v218(R) #1
gap () () 
          [constant:217] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v218 #8 #109 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          X64MovqCompressTagged : MRI v216(R) [immediate:446] v217(R)
gap () () 
          ArchJmp [immediate:445]
gap () () 
          ArchJmp [immediate:444]
gap () () 
          ArchJmp [immediate:443]
gap () () 
          v203(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:442]
gap () () 
          X64Test32 && deoptimize if equal v203 #1 #108 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v203(R) [immediate:441] v10(R) #107 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v215(R) = X64MovqDecompressTaggedPointer : MRI v203(R) [immediate:440]
gap () () 
          v214(R) = X64MovqDecompressAnyTagged : MRI v215(R) [immediate:439]
gap () () 
          X64Test32 && deoptimize if equal v214 #1 #106 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v214(R) [immediate:438] v25(R) #105 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v211(R) = X64MovqDecompressTaggedPointer : MRI v214(R) [immediate:437]
gap () () 
          v213(R) = X64MovqDecompressTaggedSigned : MRI v214(R) [immediate:436]
gap () (v212(R) = v213(-);) 
          v212(1) = X64Sar32 v212(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v212 #0 #104 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v208(R) = X64MovqDecompressAnyTagged : MRI v211(R) [immediate:435]
gap () () 
          X64Test32 && branch if equal v208 #1 [immediate:433] [immediate:434]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v208(R) [immediate:431] [immediate:432]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v208(R) [immediate:429] [immediate:430]
gap () () 
          v210(R) = X64MovqDecompressTaggedPointer : MRI v208(R) [immediate:428]
gap () () 
          X64Test8 : MRI && branch if equal v210(R) [immediate:425] #16 [immediate:426] [immediate:427]
gap () () 
          ArchJmp [immediate:424]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v210(R) [immediate:422] [immediate:423]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v210(R) [immediate:420] [immediate:421]
gap () () 
          ArchJmp [immediate:419]
gap () () 
          X64Test32 : MRI && branch if not equal v208(R) [immediate:416] #2147483646 [immediate:417] [immediate:418]
gap () () 
          ArchJmp [immediate:415]
gap () () 
          ArchJmp [immediate:414]
gap () () 
          v209(R) = X64Movsd : MRI v208(R) [immediate:413]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v209 [immediate:411] [immediate:412]
gap () () 
          ArchJmp [immediate:410]
gap () () 
          ArchJmp [immediate:409]
gap () () 
          ArchJmp [immediate:408]
gap () () 
          ArchJmp [immediate:407]
gap () () 
          X64Cmp32 && branch if not equal v208 [immediate:404] [immediate:405] [immediate:406]
gap () () 
          ArchJmp [immediate:403]
gap () () 
          [constant:201] = ArchNop
gap () () 
          [constant:200] = ArchNop
gap () () 
          [constant:197] = ArchNop
gap () () 
          [constant:188] = ArchNop
gap () () 
          v196(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:402]
gap () () 
          v205(R) = X64MovqDecompressTaggedPointer : MRI v203(R) [immediate:401]
gap () () 
          v207(R) = X64MovqDecompressTaggedSigned : MRI v203(R) [immediate:400]
gap () (v206(R) = v207(-);) 
          v206(1) = X64Sar32 v206(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v206 #1 #103 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v198(R) = X64MovqDecompressAnyTagged : MRI v205(R) [immediate:399]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v206 #0 #102 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v199(R) = X64MovqDecompressAnyTagged : MRI v205(R) [immediate:398]
gap () () 
          X64Test32 && deoptimize if equal v196 #1 #101 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v204(R) = X64MovqDecompressTaggedPointer : MRI v196(R) [immediate:397]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v204(R) [immediate:396] #1068 #100 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v202(R) = X64MovqDecompressTaggedPointer : MRI v196(R) [immediate:395]
gap () () 
          X64Cmp && deoptimize if not equal v201(R) v202 #99 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          X64Push v199(-)
gap () () 
          X64Push v198(-)
gap () () 
          X64Push v197(-)
gap () ([rdi|R|t] = v196(-); [rax|R|w64] = v70(-); [rsi|R|t] = v200(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:394] #-1 #98 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v190(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:393]
gap () () 
          X64Test32 && deoptimize if equal v190 #1 #97 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v190(R) [immediate:392] v10(R) #96 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          v194(R) = X64MovqDecompressTaggedPointer : MRI v190(R) [immediate:391]
gap () () 
          v192(R) = X64MovqDecompressAnyTagged : MRI v194(R) [immediate:390]
gap () () 
          X64Test32 && deoptimize if equal v192 #1 #95 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v192(R) [immediate:389] v25(R) #94 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          v187(R) = X64MovqDecompressTaggedPointer : MRI v192(R) [immediate:388]
gap () () 
          v193(R) = X64Movl : MRI v187(R) [immediate:387]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v193(R) #93 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          v191(R) = X64MovqDecompressTaggedSigned : MRI v192(R) [immediate:386]
gap () (v189(R) = v191(-);) 
          v189(1) = X64Sar32 v189(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v189 #0 #92 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          X64MovqCompressTagged : MRI v187(R) [immediate:385] v188(R)
gap () () 
          ArchJmp [immediate:384]
gap () () 
          ArchJmp [immediate:383]
gap () () 
          ArchJmp [immediate:382]
gap () () 
          v174(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:381]
gap () () 
          X64Test32 && deoptimize if equal v174 #1 #91 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v174(R) [immediate:380] v10(R) #90 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v186(R) = X64MovqDecompressTaggedPointer : MRI v174(R) [immediate:379]
gap () () 
          v185(R) = X64MovqDecompressAnyTagged : MRI v186(R) [immediate:378]
gap () () 
          X64Test32 && deoptimize if equal v185 #1 #89 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v185(R) [immediate:377] v25(R) #88 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v182(R) = X64MovqDecompressTaggedPointer : MRI v185(R) [immediate:376]
gap () () 
          v184(R) = X64MovqDecompressTaggedSigned : MRI v185(R) [immediate:375]
gap () (v183(R) = v184(-);) 
          v183(1) = X64Sar32 v183(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v183 #11 #87 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v179(R) = X64MovqDecompressAnyTagged : MRI v182(R) [immediate:374]
gap () () 
          X64Test32 && branch if equal v179 #1 [immediate:372] [immediate:373]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v179(R) [immediate:370] [immediate:371]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v179(R) [immediate:368] [immediate:369]
gap () () 
          v181(R) = X64MovqDecompressTaggedPointer : MRI v179(R) [immediate:367]
gap () () 
          X64Test8 : MRI && branch if equal v181(R) [immediate:364] #16 [immediate:365] [immediate:366]
gap () () 
          ArchJmp [immediate:363]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v181(R) [immediate:361] [immediate:362]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v181(R) [immediate:359] [immediate:360]
gap () () 
          ArchJmp [immediate:358]
gap () () 
          X64Test32 : MRI && branch if not equal v179(R) [immediate:355] #2147483646 [immediate:356] [immediate:357]
gap () () 
          ArchJmp [immediate:354]
gap () () 
          ArchJmp [immediate:353]
gap () () 
          v180(R) = X64Movsd : MRI v179(R) [immediate:352]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v180 [immediate:350] [immediate:351]
gap () () 
          ArchJmp [immediate:349]
gap () () 
          ArchJmp [immediate:348]
gap () () 
          ArchJmp [immediate:347]
gap () () 
          ArchJmp [immediate:346]
gap () () 
          X64Cmp32 && branch if not equal v179 [immediate:343] [immediate:344] [immediate:345]
gap () () 
          ArchJmp [immediate:342]
gap () () 
          [constant:172] = ArchNop
gap () () 
          [constant:171] = ArchNop
gap () () 
          [constant:168] = ArchNop
gap () () 
          [constant:159] = ArchNop
gap () () 
          v167(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:341]
gap () () 
          v176(R) = X64MovqDecompressTaggedPointer : MRI v174(R) [immediate:340]
gap () () 
          v178(R) = X64MovqDecompressTaggedSigned : MRI v174(R) [immediate:339]
gap () (v177(R) = v178(-);) 
          v177(1) = X64Sar32 v177(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v177 #0 #86 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v169(R) = X64MovqDecompressAnyTagged : MRI v176(R) [immediate:338]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v177 #4 #85 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v170(R) = X64MovqDecompressAnyTagged : MRI v176(R) [immediate:337]
gap () () 
          X64Test32 && deoptimize if equal v167 #1 #84 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v175(R) = X64MovqDecompressTaggedPointer : MRI v167(R) [immediate:336]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v175(R) [immediate:335] #1068 #83 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v173(R) = X64MovqDecompressTaggedPointer : MRI v167(R) [immediate:334]
gap () () 
          X64Cmp && deoptimize if not equal v172(R) v173 #82 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          X64Push v170(-)
gap () () 
          X64Push v169(-)
gap () () 
          X64Push v168(-)
gap () ([rdi|R|t] = v167(-); [rax|R|w64] = v70(-); [rsi|R|t] = v171(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:333] #-1 #81 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v161(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:332]
gap () () 
          X64Test32 && deoptimize if equal v161 #1 #80 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v161(R) [immediate:331] v10(R) #79 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          v165(R) = X64MovqDecompressTaggedPointer : MRI v161(R) [immediate:330]
gap () () 
          v163(R) = X64MovqDecompressAnyTagged : MRI v165(R) [immediate:329]
gap () () 
          X64Test32 && deoptimize if equal v163 #1 #78 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v163(R) [immediate:328] v25(R) #77 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          v158(R) = X64MovqDecompressTaggedPointer : MRI v163(R) [immediate:327]
gap () () 
          v164(R) = X64Movl : MRI v158(R) [immediate:326]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v164(R) #76 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          v162(R) = X64MovqDecompressTaggedSigned : MRI v163(R) [immediate:325]
gap () (v160(R) = v162(-);) 
          v160(1) = X64Sar32 v160(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v160 #11 #75 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          X64MovqCompressTagged : MRI v158(R) [immediate:324] v159(R)
gap () () 
          ArchJmp [immediate:323]
gap () () 
          ArchJmp [immediate:322]
gap () () 
          ArchJmp [immediate:321]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:319] v49(R) #74 v0(S) v1(-) v2(S) v3(-) [immediate:320]
gap () () 
          v155(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:318]
gap () () 
          v157(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:317]
gap () (v156(R) = v157(-);) 
          v156(1) = X64Sar32 v156(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v156 #4 #73 v0(S) v1(-) v2(S) v3(-) [immediate:316]
gap () () 
          v153(R) = X64MovqDecompressAnyTagged : MRI v155(R) [immediate:315]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v153(R) [immediate:313] [immediate:314]
gap () (v152 = v153(-);) 
          ArchJmp [immediate:312]
gap () () 
          [constant:154] = ArchNop
gap () (v152 = v154(-);) 
          ArchJmp [immediate:311]
gap () () 
          X64Test32 && deoptimize if equal v152 #1 #72 v0(S) v1(-) v2(S) v3(-) [immediate:310]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v152(R) [immediate:308] v43(R) #71 v0(S) v1(-) v2(S) v3(-) [immediate:309]
gap () () 
          v149(R) = X64MovqDecompressTaggedPointer : MRI v152(R) [immediate:307]
gap () () 
          v151(R) = X64MovqDecompressTaggedSigned : MRI v152(R) [immediate:306]
gap () (v150(R) = v151(-);) 
          v150(1) = X64Sar32 v150(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v150 #2 #70 v0(S) v1(-) v2(S) v3(-) [immediate:305]
gap () () 
          v148(R) = X64Movsd : MRI v149(R) [immediate:304]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v148 [immediate:302] [immediate:303]
gap () () 
          ArchJmp [immediate:301]
gap () () 
          v139(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:300]
gap () () 
          X64Test32 && deoptimize if equal v139 #1 #69 v0(S) v1(-) v2(S) v3(-) [immediate:299]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v139(R) [immediate:297] v10(R) #68 v0(S) v1(-) v2(S) v3(-) [immediate:298]
gap () () 
          v147(R) = X64MovqDecompressTaggedPointer : MRI v139(R) [immediate:296]
gap () () 
          v146(R) = X64MovqDecompressAnyTagged : MRI v147(R) [immediate:295]
gap () () 
          X64Test32 && deoptimize if equal v146 #1 #67 v0(S) v1(-) v2(S) v3(-) [immediate:294]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v146(R) [immediate:292] v25(R) #66 v0(S) v1(-) v2(S) v3(-) [immediate:293]
gap () () 
          v143(R) = X64MovqDecompressTaggedPointer : MRI v146(R) [immediate:291]
gap () () 
          v145(R) = X64MovqDecompressTaggedSigned : MRI v146(R) [immediate:290]
gap () (v144(R) = v145(-);) 
          v144(1) = X64Sar32 v144(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v144 #11 #65 v0(S) v1(-) v2(S) v3(-) [immediate:289]
gap () () 
          v140(R) = X64MovqDecompressAnyTagged : MRI v143(R) [immediate:288]
gap () () 
          X64Test32 && branch if equal v140 #1 [immediate:286] [immediate:287]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v140(R) [immediate:284] [immediate:285]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v140(R) [immediate:282] [immediate:283]
gap () () 
          v142(R) = X64MovqDecompressTaggedPointer : MRI v140(R) [immediate:281]
gap () () 
          X64Test8 : MRI && branch if equal v142(R) [immediate:278] #16 [immediate:279] [immediate:280]
gap () () 
          ArchJmp [immediate:277]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v142(R) [immediate:275] [immediate:276]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v142(R) [immediate:273] [immediate:274]
gap () () 
          ArchJmp [immediate:272]
gap () () 
          X64Test32 : MRI && branch if not equal v140(R) [immediate:269] #2147483646 [immediate:270] [immediate:271]
gap () () 
          ArchJmp [immediate:268]
gap () () 
          ArchJmp [immediate:267]
gap () () 
          v141(R) = X64Movsd : MRI v140(R) [immediate:266]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v141 [immediate:264] [immediate:265]
gap () () 
          ArchJmp [immediate:263]
gap () () 
          ArchJmp [immediate:262]
gap () () 
          ArchJmp [immediate:261]
gap () () 
          ArchJmp [immediate:260]
gap () () 
          X64Cmp32 && branch if not equal v140 [immediate:257] [immediate:258] [immediate:259]
gap () () 
          ArchJmp [immediate:256]
gap () () 
          [constant:133] = ArchNop
gap () () 
          [constant:132] = ArchNop
gap () () 
          [constant:129] = ArchNop
gap () () 
          [constant:120] = ArchNop
gap () () 
          v128(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:255]
gap () () 
          v136(R) = X64MovqDecompressTaggedPointer : MRI v139(R) [immediate:254]
gap () () 
          v138(R) = X64MovqDecompressTaggedSigned : MRI v139(R) [immediate:253]
gap () (v137(R) = v138(-);) 
          v137(1) = X64Sar32 v137(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v137 #4 #64 v0(S) v1(-) v2(S) v3(-) [immediate:252]
gap () () 
          v130(R) = X64MovqDecompressAnyTagged : MRI v136(R) [immediate:251]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v137 #0 #63 v0(S) v1(-) v2(S) v3(-) [immediate:250]
gap () () 
          v131(R) = X64MovqDecompressAnyTagged : MRI v136(R) [immediate:249]
gap () () 
          X64Test32 && deoptimize if equal v128 #1 #62 v0(S) v1(-) v2(S) v3(-) [immediate:248]
gap () () 
          v135(R) = X64MovqDecompressTaggedPointer : MRI v128(R) [immediate:247]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v135(R) [immediate:245] #1068 #61 v0(S) v1(-) v2(S) v3(-) [immediate:246]
gap () () 
          v134(R) = X64MovqDecompressTaggedPointer : MRI v128(R) [immediate:244]
gap () () 
          X64Cmp && deoptimize if not equal v133(R) v134 #60 v0(S) v1(-) v2(S) v3(-) [immediate:243]
gap () () 
          X64Push v131(-)
gap () () 
          X64Push v130(-)
gap () () 
          X64Push v129(-)
gap () ([rdi|R|t] = v128(-); [rax|R|w64] = v70(-); [rsi|R|t] = v132(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:242] #-1 #59 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v122(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:241]
gap () () 
          X64Test32 && deoptimize if equal v122 #1 #58 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v122(R) [immediate:240] v10(R) #57 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          v126(R) = X64MovqDecompressTaggedPointer : MRI v122(R) [immediate:239]
gap () () 
          v124(R) = X64MovqDecompressAnyTagged : MRI v126(R) [immediate:238]
gap () () 
          X64Test32 && deoptimize if equal v124 #1 #56 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v124(R) [immediate:237] v25(R) #55 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          v119(R) = X64MovqDecompressTaggedPointer : MRI v124(R) [immediate:236]
gap () () 
          v125(R) = X64Movl : MRI v119(R) [immediate:235]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v125(R) #54 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          v123(R) = X64MovqDecompressTaggedSigned : MRI v124(R) [immediate:234]
gap () (v121(R) = v123(-);) 
          v121(1) = X64Sar32 v121(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v121 #11 #53 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          X64MovqCompressTagged : MRI v119(R) [immediate:233] v120(R)
gap () () 
          ArchJmp [immediate:232]
gap () () 
          ArchJmp [immediate:231]
gap () () 
          ArchJmp [immediate:230]
gap () () 
          v106(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:229]
gap () () 
          X64Test32 && deoptimize if equal v106 #1 #52 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v106(R) [immediate:228] v10(R) #51 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v118(R) = X64MovqDecompressTaggedPointer : MRI v106(R) [immediate:227]
gap () () 
          v117(R) = X64MovqDecompressAnyTagged : MRI v118(R) [immediate:226]
gap () () 
          X64Test32 && deoptimize if equal v117 #1 #50 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v117(R) [immediate:225] v25(R) #49 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v114(R) = X64MovqDecompressTaggedPointer : MRI v117(R) [immediate:224]
gap () () 
          v116(R) = X64MovqDecompressTaggedSigned : MRI v117(R) [immediate:223]
gap () (v115(R) = v116(-);) 
          v115(1) = X64Sar32 v115(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #3 #48 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v111(R) = X64MovqDecompressAnyTagged : MRI v114(R) [immediate:222]
gap () () 
          X64Test32 && branch if equal v111 #1 [immediate:220] [immediate:221]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v111(R) [immediate:218] [immediate:219]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v111(R) [immediate:216] [immediate:217]
gap () () 
          v113(R) = X64MovqDecompressTaggedPointer : MRI v111(R) [immediate:215]
gap () () 
          X64Test8 : MRI && branch if equal v113(R) [immediate:212] #16 [immediate:213] [immediate:214]
gap () () 
          ArchJmp [immediate:211]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v113(R) [immediate:209] [immediate:210]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v113(R) [immediate:207] [immediate:208]
gap () () 
          ArchJmp [immediate:206]
gap () () 
          X64Test32 : MRI && branch if not equal v111(R) [immediate:203] #2147483646 [immediate:204] [immediate:205]
gap () () 
          ArchJmp [immediate:202]
gap () () 
          ArchJmp [immediate:201]
gap () () 
          v112(R) = X64Movsd : MRI v111(R) [immediate:200]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v112 [immediate:198] [immediate:199]
gap () () 
          ArchJmp [immediate:197]
gap () () 
          ArchJmp [immediate:196]
gap () () 
          ArchJmp [immediate:195]
gap () () 
          ArchJmp [immediate:194]
gap () () 
          X64Cmp32 && branch if not equal v111 [immediate:191] [immediate:192] [immediate:193]
gap () () 
          ArchJmp [immediate:190]
gap () () 
          [constant:104] = ArchNop
gap () () 
          [constant:103] = ArchNop
gap () () 
          [constant:100] = ArchNop
gap () () 
          [constant:91] = ArchNop
gap () () 
          v99(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:189]
gap () () 
          v108(R) = X64MovqDecompressTaggedPointer : MRI v106(R) [immediate:188]
gap () () 
          v110(R) = X64MovqDecompressTaggedSigned : MRI v106(R) [immediate:187]
gap () (v109(R) = v110(-);) 
          v109(1) = X64Sar32 v109(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v109 #0 #47 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v101(R) = X64MovqDecompressAnyTagged : MRI v108(R) [immediate:186]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v109 #3 #46 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v102(R) = X64MovqDecompressAnyTagged : MRI v108(R) [immediate:185]
gap () () 
          X64Test32 && deoptimize if equal v99 #1 #45 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v107(R) = X64MovqDecompressTaggedPointer : MRI v99(R) [immediate:184]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v107(R) [immediate:183] #1068 #44 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v105(R) = X64MovqDecompressTaggedPointer : MRI v99(R) [immediate:182]
gap () () 
          X64Cmp && deoptimize if not equal v104(R) v105 #43 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          X64Push v102(-)
gap () () 
          X64Push v101(-)
gap () () 
          X64Push v100(-)
gap () ([rdi|R|t] = v99(-); [rax|R|w64] = v70(-); [rsi|R|t] = v103(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:181] #-1 #42 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v93(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:180]
gap () () 
          X64Test32 && deoptimize if equal v93 #1 #41 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v93(R) [immediate:179] v10(R) #40 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          v97(R) = X64MovqDecompressTaggedPointer : MRI v93(R) [immediate:178]
gap () () 
          v95(R) = X64MovqDecompressAnyTagged : MRI v97(R) [immediate:177]
gap () () 
          X64Test32 && deoptimize if equal v95 #1 #39 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v95(R) [immediate:176] v25(R) #38 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          v90(R) = X64MovqDecompressTaggedPointer : MRI v95(R) [immediate:175]
gap () () 
          v96(R) = X64Movl : MRI v90(R) [immediate:174]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v96(R) #37 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          v94(R) = X64MovqDecompressTaggedSigned : MRI v95(R) [immediate:173]
gap () (v92(R) = v94(-);) 
          v92(1) = X64Sar32 v92(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v92 #3 #36 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          X64MovqCompressTagged : MRI v90(R) [immediate:172] v91(R)
gap () () 
          ArchJmp [immediate:171]
gap () () 
          ArchJmp [immediate:170]
gap () () 
          ArchJmp [immediate:169]
gap () () 
          v77(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:168]
gap () () 
          X64Test32 && deoptimize if equal v77 #1 #35 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v77(R) [immediate:167] v10(R) #34 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v89(R) = X64MovqDecompressTaggedPointer : MRI v77(R) [immediate:166]
gap () () 
          v88(R) = X64MovqDecompressAnyTagged : MRI v89(R) [immediate:165]
gap () () 
          X64Test32 && deoptimize if equal v88 #1 #33 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v88(R) [immediate:164] v25(R) #32 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v85(R) = X64MovqDecompressTaggedPointer : MRI v88(R) [immediate:163]
gap () () 
          v87(R) = X64MovqDecompressTaggedSigned : MRI v88(R) [immediate:162]
gap () (v86(R) = v87(-);) 
          v86(1) = X64Sar32 v86(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v86 #10 #31 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v82(R) = X64MovqDecompressAnyTagged : MRI v85(R) [immediate:161]
gap () () 
          X64Test32 && branch if equal v82 #1 [immediate:159] [immediate:160]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v82(R) [immediate:157] [immediate:158]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v82(R) [immediate:155] [immediate:156]
gap () () 
          v84(R) = X64MovqDecompressTaggedPointer : MRI v82(R) [immediate:154]
gap () () 
          X64Test8 : MRI && branch if equal v84(R) [immediate:151] #16 [immediate:152] [immediate:153]
gap () () 
          ArchJmp [immediate:150]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v84(R) [immediate:148] [immediate:149]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v84(R) [immediate:146] [immediate:147]
gap () () 
          ArchJmp [immediate:145]
gap () () 
          X64Test32 : MRI && branch if not equal v82(R) [immediate:142] #2147483646 [immediate:143] [immediate:144]
gap () () 
          ArchJmp [immediate:141]
gap () () 
          ArchJmp [immediate:140]
gap () () 
          v83(R) = X64Movsd : MRI v82(R) [immediate:139]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v83 [immediate:137] [immediate:138]
gap () () 
          ArchJmp [immediate:136]
gap () () 
          ArchJmp [immediate:135]
gap () () 
          ArchJmp [immediate:134]
gap () () 
          ArchJmp [immediate:133]
gap () () 
          X64Cmp32 && branch if not equal v82 [immediate:130] [immediate:131] [immediate:132]
gap () () 
          ArchJmp [immediate:129]
gap () () 
          [constant:75] = ArchNop
gap () () 
          [constant:71] = ArchNop
gap () () 
          [constant:74] = ArchNop
gap () () 
          [constant:61] = ArchNop
gap () () 
          v69(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:128]
gap () () 
          v79(R) = X64MovqDecompressTaggedPointer : MRI v77(R) [immediate:127]
gap () () 
          v81(R) = X64MovqDecompressTaggedSigned : MRI v77(R) [immediate:126]
gap () (v80(R) = v81(-);) 
          v80(1) = X64Sar32 v80(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #3 #30 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v72(R) = X64MovqDecompressAnyTagged : MRI v79(R) [immediate:125]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #7 #29 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v73(R) = X64MovqDecompressAnyTagged : MRI v79(R) [immediate:124]
gap () () 
          X64Test32 && deoptimize if equal v69 #1 #28 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v78(R) = X64MovqDecompressTaggedPointer : MRI v69(R) [immediate:123]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v78(R) [immediate:122] #1068 #27 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v76(R) = X64MovqDecompressTaggedPointer : MRI v69(R) [immediate:121]
gap () () 
          X64Cmp && deoptimize if not equal v75(R) v76 #26 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          X64Push v73(-)
gap () () 
          X64Push v72(-)
gap () () 
          X64Push v71(-)
gap () ([rdi|R|t] = v69(-); [rax|R|w64] = v70(-); [rsi|R|t] = v74(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:120] #-1 #25 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v63(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:119]
gap () () 
          X64Test32 && deoptimize if equal v63 #1 #24 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v63(R) [immediate:118] v10(R) #23 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          v67(R) = X64MovqDecompressTaggedPointer : MRI v63(R) [immediate:117]
gap () () 
          v65(R) = X64MovqDecompressAnyTagged : MRI v67(R) [immediate:116]
gap () () 
          X64Test32 && deoptimize if equal v65 #1 #22 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v65(R) [immediate:115] v25(R) #21 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          v60(R) = X64MovqDecompressTaggedPointer : MRI v65(R) [immediate:114]
gap () () 
          v66(R) = X64Movl : MRI v60(R) [immediate:113]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v66(R) #20 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          v64(R) = X64MovqDecompressTaggedSigned : MRI v65(R) [immediate:112]
gap () (v62(R) = v64(-);) 
          v62(1) = X64Sar32 v62(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #10 #19 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          X64MovqCompressTagged : MRI v60(R) [immediate:111] v61(R)
gap () () 
          ArchJmp [immediate:110]
gap () () 
          ArchJmp [immediate:109]
gap () () 
          ArchJmp [immediate:108]
gap () () 
          v51(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:107]
gap () () 
          X64Test32 && deoptimize if equal v51 #1 #18 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v51(R) [immediate:106] v10(R) #17 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          v59(R) = X64MovqDecompressTaggedPointer : MRI v51(R) [immediate:105]
gap () () 
          v58(R) = X64MovqDecompressAnyTagged : MRI v59(R) [immediate:104]
gap () () 
          X64Test32 && deoptimize if equal v58 #1 #16 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v58(R) [immediate:103] v25(R) #15 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          v55(R) = X64MovqDecompressTaggedPointer : MRI v58(R) [immediate:102]
gap () () 
          v57(R) = X64MovqDecompressTaggedSigned : MRI v58(R) [immediate:101]
gap () (v56(R) = v57(-);) 
          v56(1) = X64Sar32 v56(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v56 #7 #14 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          v52(R) = X64MovqDecompressAnyTagged : MRI v55(R) [immediate:100]
gap () () 
          X64Test32 && branch if equal v52 #1 [immediate:98] [immediate:99]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v52(R) [immediate:96] [immediate:97]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v52(R) [immediate:94] [immediate:95]
gap () () 
          v54(R) = X64MovqDecompressTaggedPointer : MRI v52(R) [immediate:93]
gap () () 
          X64Test8 : MRI && branch if equal v54(R) [immediate:90] #16 [immediate:91] [immediate:92]
gap () () 
          ArchJmp [immediate:89]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v54(R) [immediate:87] [immediate:88]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v54(R) [immediate:85] [immediate:86]
gap () () 
          ArchJmp [immediate:84]
gap () () 
          X64Test32 : MRI && branch if not equal v52(R) [immediate:81] #2147483646 [immediate:82] [immediate:83]
gap () () 
          ArchJmp [immediate:80]
gap () () 
          ArchJmp [immediate:79]
gap () () 
          v53(R) = X64Movsd : MRI v52(R) [immediate:78]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v53 [immediate:76] [immediate:77]
gap () () 
          ArchJmp [immediate:75]
gap () () 
          ArchJmp [immediate:74]
gap () () 
          ArchJmp [immediate:73]
gap () () 
          ArchJmp [immediate:72]
gap () () 
          X64Cmp32 && branch if not equal v52 [immediate:69] [immediate:70] [immediate:71]
gap () () 
          ArchJmp [immediate:68]
gap () () 
          v50(R) = X64Movl : MRI v2(R) [immediate:67]
gap () () 
          ArchDeoptimize #13 v0(S) v1(-) v2(S) v3(-) v50(-) v51(-) [immediate:66]
gap () () 
          ArchJmp [immediate:65]
gap () () 
          ArchJmp [immediate:64]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:62] v49(R) #12 v0(S) v1(-) v2(S) v3(-) [immediate:63]
gap () () 
          v46(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:61]
gap () () 
          v48(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:60]
gap () (v47(R) = v48(-);) 
          v47(1) = X64Sar32 v47(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v47 #5 #11 v0(S) v1(-) v2(S) v3(-) [immediate:59]
gap () () 
          v44(R) = X64MovqDecompressAnyTagged : MRI v46(R) [immediate:58]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v44(R) [immediate:56] [immediate:57]
gap () (v42 = v44(-);) 
          ArchJmp [immediate:55]
gap () () 
          [constant:45] = ArchNop
gap () (v42 = v45(-);) 
          ArchJmp [immediate:54]
gap () () 
          X64Test32 && deoptimize if equal v42 #1 #10 v0(S) v1(-) v2(S) v3(-) [immediate:53]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v42(R) [immediate:51] v43(R) #9 v0(S) v1(-) v2(S) v3(-) [immediate:52]
gap () () 
          v39(R) = X64MovqDecompressTaggedPointer : MRI v42(R) [immediate:50]
gap () () 
          v41(R) = X64MovqDecompressTaggedSigned : MRI v42(R) [immediate:49]
gap () (v40(R) = v41(-);) 
          v40(1) = X64Sar32 v40(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v40 #2 #8 v0(S) v1(-) v2(S) v3(-) [immediate:48]
gap () () 
          v38(R) = X64Movsd : MRI v39(R) [immediate:47]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v38 [immediate:45] [immediate:46]
gap () () 
          v22(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:44]
gap () () 
          v30(R) = X64Movq : MR v28(R)
gap () () 
          v35(R) = X64Lea : MRI v30(R) [immediate:43]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v35(R) [immediate:41] [immediate:42]
gap () () 
          ArchJmp [immediate:40]
gap () ([rdx|R|w64] = v34(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:39] #-1 [rdx|R|w64]
gap (v33(-) = [rax|R|tp];) () 
          v31(R) = X64Lea : MRI v33(R) [immediate:38]
gap () (v27 = v31(-);) 
          ArchJmp [immediate:37]
gap () (v27 = v30(-);) 
          ArchJmp [immediate:36]
gap () () 
          v29(R) = X64Lea : MRI v27(R) [immediate:35]
gap () () 
          X64Movq : MR v28(R) v29(R)
gap () () 
          v26(R) = X64Lea : MRI v27(R) [immediate:34]
gap () (v19 = v26(-);) 
          v19(1) = ArchNop v19
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:33] v25(R)
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:32] v24(R)
gap () () 
          [constant:23] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:31] v23(R)
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:29] [immediate:30]
gap () () 
          X64Test32 && deoptimize if equal v22 #1 #7 v0(S) v1(-) v2(S) v22(-) v19(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v22(R) [immediate:28] v10(R) #6 v0(S) v1(-) v2(S) v22(-) v19(-)
gap () () 
          v18(R) = X64MovqDecompressTaggedPointer : MRI v22(R) [immediate:27]
gap () () 
          ArchStoreWithWriteBarrier : MRI v18(R) [immediate:26] v19(R)
gap () () 
          v13(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:25]
gap () () 
          X64Test32 && deoptimize if equal v13 #1 #5 v0(S) v1(-) v2(S) v13(-) [immediate:24]
gap () () 
          X64Cmp32 : MRI && branch if equal v13(R) [immediate:21] v10(R) [immediate:22] [immediate:23]
gap () () 
          [constant:17] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v13(R) [immediate:19] v17(R) #4 v0(S) v1(-) v2(S) v13(-) [immediate:20]
gap () () 
          v14(R) = X64MovqDecompressTaggedPointer : MRI v13(R) [immediate:18]
gap () () 
          ArchStoreWithWriteBarrier : MRI v13(R) [immediate:17] v10(R)
gap () () 
          X64MovqCompressTagged : MRI v14(R) [immediate:15] [immediate:16]
gap () () 
          ArchJmp [immediate:14]
gap () () 
          v12(R) = X64MovqDecompressTaggedPointer : MRI v13(R) [immediate:13]
gap () () 
          X64MovqCompressTagged : MRI v12(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () () 
          [constant:11] = ArchNop
gap () ([rax|R|t] = v11(-);) 
          ArchRet #0 [rax|R|t]
gap () () 
          v9(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:9]
gap () () 
          X64Test32 && deoptimize if equal v9 #1 #3 v0(S) v1(-) v2(S) v3(-) [immediate:8]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v9(R) [immediate:6] v10(R) #2 v0(S) v1(-) v2(S) v3(-) [immediate:7]
gap () () 
          v8(R) = X64MovqDecompressTaggedPointer : MRI v9(R) [immediate:5]
gap () () 
          v7(R) = X64Movl : MRI v8(R) [immediate:4]
gap () () 
          ArchDeoptimize #1 v0(S) v1(-) v2(S) v7(-) [immediate:3]
gap () () 
          v5(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:2]
gap () () 
          v4(R) = X64Movl : MRI v5(R) [immediate:1]
gap () () 
          ArchDeoptimize #0 v0(S) v1(-) v2(S) v3(-) v4(-) [immediate:0]
print sib pairs
2, v805, v822
2, v729, v867
3, v805, v789
print modrm pairs
1, v5, v6
1, v8, v9
gap () () 
          v969(R) = X64Lea : MRI v964(R) [immediate:1582]
1, v9, v2
1, v14, v13
1, v17, v13
1, v13, v2
1, v19, v18
1, v18, v22
1, v23, v19
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v969(R) [immediate:1580] [immediate:1581]
1, v31, v33
1, v35, v30
1, v38, v39
gap () () 
          ArchJmp [immediate:1579]
1, v41, v42
1, v46, v3
1, v50, v2
1, v53, v52
1, v54, v52
1, v52, v55
1, v55, v58
gap () ([rdx|R|w64] = v968(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1578] #-1 [rdx|R|w64]
1, v59, v51
1, v61, v60
1, v64, v65
1, v66, v60
1, v65, v67
1, v63, v2
gap (v967(-) = [rax|R|tp];) () 
          v965(R) = X64Lea : MRI v967(R) [immediate:1577]
1, v76, v69
1, v78, v69
1, v81, v77
1, v79, v77
gap () (v963 = v965(-);) 
          ArchJmp [immediate:1576]
1, v69, v2
1, v83, v82
gap () (v963 = v964(-);) 
          ArchJmp [immediate:1575]
1, v82, v85
1, v87, v88
1, v85, v88
1, v88, v89
1, v89, v77
gap () () 
          v960(R) = X64Lea : MRI v963(R) [immediate:1574]
1, v77, v2
1, v22, v2
1, v94, v95
1, v90, v95
gap () () 
          X64Movq : MR v80(R) v960(R)
1, v95, v97
1, v107, v99
1, v99, v2
1, v112, v111
gap () () 
          v962(R) = X64Lea : MRI v963(R) [immediate:1573]
1, v108, v106
1, v111, v114
1, v114, v117
1, v118, v106
1, v123, v124
gap () (v943 = v962(-);) 
          v943(1) = ArchNop v943
1, v125, v119
1, v119, v124
1, v124, v126
1, v122, v2
gap () () 
          X64MovqCompressTagged : MRI v943(R) [immediate:1572] v178(R)
1, v135, v128
1, v131, v136
1, v130, v136
1, v138, v139
gap () () 
          X64MovqCompressTagged : MRI v943(R) [immediate:1571] v185(R)
1, v141, v140
1, v26, v27
1, v142, v140
gap () () 
          [constant:961] = ArchNop
1, v140, v143
1, v146, v147
1, v139, v2
1, v151, v152
gap () () 
          X64MovqCompressTagged : MRI v943(R) [immediate:1570] v961(R)
1, v157, v3
1, v385, v387
1, v164, v158
1, v228, v233
gap () () 
          X64MovqCompressTagged : MRI v943(R) [immediate:1568] [immediate:1569]
1, v165, v161
1, v173, v167
1, v48, v3
1, v167, v2
gap () () 
          v957(R) = X64Lea : MRI v960(R) [immediate:1567]
1, v182, v185
1, v345, v358
1, v185, v186
1, v419, v426
gap () () 
          X64Movq : MR v80(R) v957(R)
1, v193, v187
1, v187, v192
1, v192, v194
1, v834, v839
gap () () 
          v959(R) = X64Lea : MRI v960(R) [immediate:1566]
1, v178, v174
1, v194, v190
1, v559, v561
1, v202, v196
1, v162, v163
gap () (v942 = v959(-);) 
          v942(1) = ArchNop v942
1, v332, v385
1, v653, v658
1, v204, v196
1, v213, v214
gap () () 
          X64MovqCompressTagged : MRI v942(R) [immediate:1565] v178(R)
1, v174, v2
1, v145, v146
1, v749, v3
1, v787, v805
gap () () 
          X64MovqCompressTagged : MRI v942(R) [immediate:1564] v185(R)
1, v277, v276
1, v211, v214
1, v214, v215
gap () () 
          [constant:958] = ArchNop
1, v101, v108
1, v215, v203
1, v209, v208
1, v222, v216
gap () () 
          X64MovqCompressTagged : MRI v942(R) [immediate:1563] v958(R)
1, v216, v221
1, v221, v223
1, v232, v225
1, v625, v624
gap () () 
          X64MovqCompressTagged : MRI v942(R) [immediate:1561] [immediate:1562]
1, v227, v233
1, v235, v236
1, v149, v152
1, v586, v592
gap () () 
          v954(R) = X64Lea : MRI v957(R) [immediate:1560]
1, v233, v236
1, v239, v237
1, v242, v2
1, v557, v556
gap () () 
          X64Movq : MR v80(R) v954(R)
1, v244, v243
1, v231, v225
1, v243, v240
1, v431, v429
gap () () 
          v956(R) = X64Lea : MRI v957(R) [immediate:1559]
1, v180, v179
1, v240, v247
1, v120, v119
1, v219, v2
1, v713, v715
gap () (v941 = v956(-);) 
          v941(1) = ArchNop v941
1, v673, v669
1, v247, v248
1, v248, v236
1, v609, v612
gap () () 
          X64MovqCompressTagged : MRI v941(R) [immediate:1558] v178(R)
1, v531, v445
1, v249, v250
1, v252, v253
1, v254, v256
gap () () 
          X64MovqCompressTagged : MRI v941(R) [immediate:1557] v185(R)
1, v176, v174
1, v258, v3
1, v217, v216
gap () () 
          [constant:955] = ArchNop
1, v256, v3
1, v207, v203
1, v263, v264
1, v265, v259
gap () () 
          X64MovqCompressTagged : MRI v941(R) [immediate:1556] v955(R)
1, v262, v2
1, v268, v267
1, v274, v272
1, v264, v266
gap () () 
          X64MovqCompressTagged : MRI v941(R) [immediate:1554] [immediate:1555]
1, v275, v276
1, v279, v281
1, v356, v355
1, v199, v205
gap () () 
          v951(R) = X64Lea : MRI v954(R) [immediate:1553]
1, v153, v155
1, v355, v267
1, v784, v2
1, v223, v219
gap () () 
          X64Movq : MR v80(R) v951(R)
1, v331, v389
1, v147, v139
1, v392, v391
1, v260, v259
1, v388, v387
gap () () 
          v953(R) = X64Lea : MRI v954(R) [immediate:1552]
1, v815, v785
1, v389, v391
1, v292, v289
1, v394, v289
1, v396, v289
gap () (v940 = v953(-);) 
          v940(1) = ArchNop v940
1, v49, v3
1, v291, v397
1, v399, v395
1, v170, v176
gap () () 
          X64MovqCompressTagged : MRI v940(R) [immediate:1551] v178(R)
1, v97, v93
1, v400, v403
1, v196, v2
gap () () 
          X64MovqCompressTagged : MRI v940(R) [immediate:1550] v185(R)
1, v405, v406
1, v403, v406
1, v532, v531
gap () () 
          [constant:952] = ArchNop
1, v357, v292
1, v406, v407
1, v96, v90
1, v529, v531
gap () () 
          X64MovqCompressTagged : MRI v940(R) [immediate:1549] v952(R)
1, v397, v395
1, v412, v413
1, v238, v237
1, v414, v408
gap () () 
          X64MovqCompressTagged : MRI v940(R) [immediate:1547] [immediate:1548]
1, v411, v2
1, v720, v718
1, v423, v417
1, v813, v764
gap () () 
          v948(R) = X64Lea : MRI v951(R) [immediate:1546]
1, v425, v417
1, v136, v139
1, v420, v426
1, v426, v424
gap () () 
          X64Movq : MR v80(R) v948(R)
1, v44, v46
1, v395, v2
1, v179, v182
1, v417, v2
1, v210, v208
gap () () 
          v950(R) = X64Lea : MRI v951(R) [immediate:1545]
1, v250, v253
1, v430, v429
1, v429, v432
1, v633, v2
1, v376, v334
gap () (v939 = v950(-);) 
          v939(1) = ArchNop v939
1, v880, v881
1, v434, v435
1, v148, v149
1, v432, v435
gap () () 
          X64MovqCompressTagged : MRI v939(R) [immediate:1544] v178(R)
1, v814, v807
1, v435, v436
1, v719, v715
1, v436, v424
gap () () 
          X64MovqCompressTagged : MRI v939(R) [immediate:1543] v185(R)
1, v438, v437
1, v428, v424
1, v443, v437
gap () () 
          [constant:949] = ArchNop
1, v175, v167
1, v446, v445
1, v24, v19
1, v24, v764
gap () () 
          X64MovqCompressTagged : MRI v939(R) [immediate:1542] v949(R)
1, v24, v3
1, v190, v2
1, v452, v450
1, v273, v272
gap () () 
          X64MovqCompressTagged : MRI v939(R) [immediate:1540] [immediate:1541]
1, v128, v2
1, v353, v355
1, v453, v454
1, v110, v106
gap () () 
          v945(R) = X64Lea : MRI v948(R) [immediate:1539]
1, v878, v6
1, v455, v454
1, v457, v459
1, v158, v163
gap () () 
          X64Movq : MR v80(R) v945(R)
1, v163, v165
1, v612, v613
1, v607, v606
1, v521, v534
gap () () 
          v947(R) = X64Lea : MRI v948(R) [immediate:1538]
1, v534, v535
1, v536, v535
1, v550, v510
1, v548, v510
1, v509, v554
gap () (v938 = v947(-);) 
          v938(1) = ArchNop v938
1, v799, v815
1, v562, v561
1, v507, v563
1, v470, v467
gap () () 
          X64MovqCompressTagged : MRI v938(R) [immediate:1537] v178(R)
1, v203, v2
1, v827, v764
1, v568, v467
1, v570, v467
1, v812, v806
gap () () 
          X64MovqCompressTagged : MRI v938(R) [immediate:1536] v185(R)
1, v469, v571
1, v468, v571
1, v571, v569
gap () () 
          [constant:946] = ArchNop
1, v647, v645
1, v576, v574
1, v547, v548
1, v579, v580
gap () () 
          X64MovqCompressTagged : MRI v938(R) [immediate:1535] v946(R)
1, v760, v729
1, v577, v580
1, v580, v581
1, v445, v533
gap () () 
          X64MovqCompressTagged : MRI v938(R) [immediate:1533] [immediate:1534]
1, v583, v582
1, v208, v211
1, v699, v691
1, v606, v609
1, v588, v584
gap () () 
          v937(R) = X64Lea : MRI v945(R) [immediate:1532]
1, v374, v334
1, v591, v586
1, v835, v785
1, v659, v653
gap () () 
          X64Movq : MR v80(R) v937(R)
1, v12, v13
1, v601, v594
1, v740, v741
1, v771, v3
gap () () 
          v944(R) = X64Lea : MRI v945(R) [immediate:1531]
1, v186, v174
1, v597, v602
1, v220, v221
1, v72, v79
1, v451, v450
gap () (v935 = v944(-);) 
          v935(1) = ArchNop v935
1, v604, v605
1, v682, v687
1, v594, v2
1, v608, v606
1, v630, v624
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1530] v388(R)
1, v837, v839
1, v614, v615
1, v617, v618
1, v67, v63
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1528] [immediate:1529]
1, v380, v382
1, v619, v621
1, v191, v192
1, v800, v817
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1527] v943(R)
1, v424, v2
1, v851, v827
1, v113, v111
1, v774, v772
1, v7, v8
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1526] v942(R)
1, v333, v380
1, v635, v642
1, v623, v3
1, v58, v59
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1525] v941(R)
1, v621, v3
1, v671, v669
1, v73, v79
1, v629, v631
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1524] v940(R)
1, v409, v408
1, v846, v784
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1523] v939(R)
1, v581, v569
1, v883, v879
1, v861, v863
1, v236, v2
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1522] v938(R)
1, v627, v2
1, v882, v881
1, v639, v633
1, v266, v262
gap () () 
          v927(R) = X64Lea : MRI v937(R) [immediate:1521]
1, v801, v815
1, v820, v821
1, v642, v640
1, v267, v357
gap () () 
          X64Movq : MR v80(R) v927(R)
1, v694, v700
1, v646, v645
1, v709, v710
1, v105, v99
gap () () 
          v936(R) = X64Lea : MRI v937(R) [immediate:1520]
1, v702, v698
1, v600, v594
1, v652, v640
1, v640, v2
1, v407, v395
gap () (v911 = v936(-);) 
          v911(1) = ArchNop v911
1, v533, v470
1, v758, v3
1, v596, v602
1, v654, v653
gap () () 
          X64MovqCompressTagged : MRI v911(R) [immediate:1519] v184(R)
1, v658, v660
1, v134, v128
1, v716, v713
1, v870, v871
gap () () 
          X64MovqCompressTagged : MRI v911(R) [immediate:1518] v185(R)
1, v660, v656
1, v143, v146
1, v668, v662
1, v817, v821
gap () () 
          X64MovqCompressTagged : MRI v911(R) [immediate:1517] v935(R)
1, v665, v671
1, v402, v400
1, v743, v746
1, v4, v5
gap () () 
          X64MovqCompressTagged : MRI v911(R) [immediate:1515] [immediate:1516]
1, v611, v612
1, v736, v734
1, v159, v158
1, v676, v674
1, v283, v278
1, v415, v411
1, v679, v680
1, v651, v652
1, v829, v827
gap () () 
          X64Test32 && deoptimize if equal v891 #1 #242 v0(S) v1(-) v2(-) v3(S) v891(-) v911(-)
1, v677, v680
1, v360, v359
1, v680, v681
1, v849, v848
1, v444, v440
1, v566, v565
gap () () 
          X64Cmp32 : MRI && branch if equal v891(R) [immediate:1512] v530(R) [immediate:1513] [immediate:1514]
1, v700, v698
1, v681, v669
1, v863, v879
1, v631, v627
1, v669, v2
1, v408, v413
1, v686, v687
1, v169, v176
1, v704, v703
1, v688, v682
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v891(R) [immediate:1511] v184(R) #241 v0(S) v1(-) v2(-) v3(S) v891(-) v911(-)
1, v875, v6
1, v685, v2
1, v693, v700
1, v590, v2
gap () () 
          v934(R) = X64MovqDecompressTaggedPointer : MRI v891(R) [immediate:1510]
1, v775, v3
1, v706, v709
1, v289, v2
1, v675, v674
1, v93, v2
gap () () 
          X64Test32 && branch if equal v934 #1 [immediate:1508] [immediate:1509]
1, v584, v586
1, v188, v187
1, v742, v743
1, v670, v662
gap () (v932 = v327(-);) 
          ArchJmp [immediate:1507]
1, v442, v444
1, v728, v722
1, v756, v749
1, v724, v731
gap () (v932 = v934(-);) 
          ArchJmp [immediate:1506]
1, v887, v889
1, v708, v709
1, v106, v2
gap () () 
          [constant:917] = ArchNop
1, v722, v2
1, v602, v605
1, v735, v734
1, v865, v783
1, v683, v682
gap () () 
          X64Test32 && branch if equal v932 #1 [immediate:1504] [immediate:1505]
1, v730, v722
1, v768, v3
1, v780, v779
1, v645, v648
gap () () 
          v933(R) = X64Movsd : MRI v932(R) [immediate:1503]
1, v674, v677
1, v573, v569
1, v718, v2
1, v745, v746
gap () () 
          v931(R) = SSEFloat64ToInt32 v933
1, v754, v755
1, v703, v706
1, v508, v559
1, v91, v90
gap () (v929 = v931(-);) 
          ArchJmp [immediate:1502]
1, v733, v6
1, v879, v3
1, v855, v857
1, v358, v359
1, v184, v185
1, v383, v382
gap () (v930(R) = v932(-);) 
          v930(1) = X64Sar32 v930(R) #1
1, v689, v685
1, v245, v243
1, v413, v415
1, v769, v729
gap () (v929 = v930(-);) 
          ArchJmp [immediate:1501]
1, v891, v886
1, v781, v775
1, v161, v2
gap () () 
          [constant:920] = ArchNop
1, v126, v122
1, v874, v6
1, v804, v764
gap () () 
          [constant:923] = ArchNop
1, v259, v264
1, v628, v629
1, v847, v848
1, v852, v853
1, v246, v247
gap () () 
          v928(R) = X64Lea : MRI v927(R) [immediate:1500]
1, v575, v574
1, v741, v6
1, v866, v783
1, v205, v203
1, v712, v711
1, v155, v3
gap () (v926(R) = v929(-);) 
          v926(1) = X64Shl32 v926(R) #10
1, v698, v2
1, v797, v815
1, v798, v817
gap () () 
          X64Movq : MR v80(R) v928(R)
1, v102, v108
1, v181, v179
1, v725, v731
1, v739, v740
gap () () 
          v925(R) = X64Lea : MRI v927(R) [immediate:1499]
1, v116, v117
1, v747, v749
1, v641, v633
1, v574, v577
1, v802, v817
gap () (v924(R) = v926(-);) 
          v924(1) = X64Or32 v924(R) #3
1, v848, v853
1, v819, v785
1, v554, v556
1, v624, v629
1, v401, v400
gap () (v914 = v925(-);) 
          v914(1) = ArchNop v914
1, v734, v737
1, v737, v740
1, v84, v82
1, v636, v642
gap () () 
          v922(R) = X64Lea32 : MR1 v924(R) v924(R)
1, v644, v640
1, v57, v58
1, v662, v2
1, v198, v205
1, v569, v2
gap () () 
          X64MovqCompressTagged : MRI v914(R) [immediate:1498] v923(R)
1, v117, v118
1, v807, v764
1, v822, v784
1, v867, v871
1, v60, v65
gap () () 
          X64MovqCompressTagged : MRI v914(R) [immediate:1497] v922(R)
1, v371, v374
1, v842, v843
1, v836, v839
1, v859, v854
gap () () 
          X64MovqCompressTagged : MRI v914(R) [immediate:1496] v920(R)
1, v39, v42
1, v656, v2
1, v592, v590
1, v839, v843
1, v715, v720
gap () () 
          X64MovqCompressTagged : MRI v914(R) [immediate:1495] v920(R)
1, v237, v240
1, v43, v253
1, v43, v334
1, v43, v565
gap () () 
          X64MovqCompressTagged : MRI v914(R) [immediate:1494] v911(R)
1, v43, v618
1, v43, v391
1, v43, v746
1, v43, v42
1, v43, v755
gap () () 
          ArchStoreWithWriteBarrier : MRI v891(R) [immediate:1493] v917(R)
1, v43, v510
1, v43, v843
1, v43, v556
1, v43, v387
1, v43, v561
gap () () 
          ArchStoreWithWriteBarrier : MRI v891(R) [immediate:1492] v914(R)
1, v43, v382
1, v43, v821
1, v43, v764
gap () () 
          ArchJmp [immediate:1491]
1, v43, v152
1, v43, v785
1, v844, v784
1, v657, v658
gap () () 
          v910(R) = X64MovqDecompressTaggedPointer : MRI v891(R) [immediate:1490]
1, v705, v703
1, v752, v755
1, v563, v565
1, v613, v605
gap () () 
          ArchStoreWithWriteBarrier : MRI v910(R) [immediate:1489] v911(R)
1, v786, v783
1, v664, v671
gap () () 
          ArchJmp [immediate:1488]
1, v25, v58
1, v25, v65
1, v25, v117
gap () () 
          [constant:494] = ArchNop
1, v25, v124
1, v25, v192
1, v25, v580
1, v25, v214
gap () () 
          v905(R) = X64Movq : MR v80(R)
1, v25, v88
1, v25, v221
1, v25, v715
1, v25, v185
1, v25, v406
gap () () 
          v909(R) = X64Lea : MRI v905(R) [immediate:1487]
1, v25, v146
1, v25, v687
1, v25, v413
1, v25, v264
1, v25, v586
1, v25, v247
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v909(R) [immediate:1485] [immediate:1486]
1, v25, v629
1, v25, v163
1, v25, v680
gap () () 
          ArchJmp [immediate:1484]
1, v25, v612
1, v25, v651
1, v25, v435
1, v25, v442
1, v25, v658
1, v25, v19
1, v25, v95
gap () ([rdx|R|w64] = v494(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1483] #-1 [rdx|R|w64]
1, v25, v709
1, v25, v871
1, v25, v740
1, v25, v784
1, v783, v2
1, v687, v689
gap (v908(-) = [rax|R|tp];) () 
          v906(R) = X64Lea : MRI v908(R) [immediate:1482]
1, v710, v698
1, v6, v2
1, v871, v872
1, v824, v784
gap () (v904 = v906(-);) 
          ArchJmp [immediate:1481]
1, v843, v844
1, v697, v691
1, v751, v752
1, v29, v27
gap () (v904 = v905(-);) 
          ArchJmp [immediate:1480]
1, v441, v442
1, v290, v397
1, v650, v651
gap () () 
          [constant:812] = ArchNop
1, v731, v6
1, v850, v827
1, v437, v442
1, v615, v618
gap () () 
          v901(R) = X64Lea : MRI v904(R) [immediate:1479]
1, v467, v2
1, v884, v885
1, v440, v2
1, v872, v6
gap () () 
          X64Movq : MR v80(R) v901(R)
1, v51, v2
1, v841, v785
1, v10, v13
1, v10, v63
gap () () 
          v903(R) = X64Lea : MRI v904(R) [immediate:1478]
1, v10, v106
1, v10, v139
1, v10, v161
1, v10, v22
1, v10, v627
gap () (v899 = v903(-);) 
          v899(1) = ArchNop v899
1, v10, v219
1, v10, v698
1, v10, v6
1, v10, v236
1, v10, v656
gap () () 
          X64MovqCompressTagged : MRI v899(R) [immediate:1477] v388(R)
1, v10, v395
1, v10, v411
1, v10, v424
1, v10, v357
1, v10, v93
gap () () 
          X64MovqCompressTagged : MRI v899(R) [immediate:1475] [immediate:1476]
1, v10, v533
1, v10, v569
1, v10, v174
1, v10, v77
1, v10, v605
gap () () 
          X64MovqCompressTagged : MRI v899(R) [immediate:1474] v812(R)
1, v10, v203
1, v10, v262
1, v10, v9
1, v10, v685
1, v10, v440
gap () () 
          X64MovqCompressTagged : MRI v899(R) [immediate:1473] v812(R)
1, v10, v51
1, v10, v640
1, v10, v669
1, v10, v122
1, v10, v190
gap () () 
          X64MovqCompressTagged : MRI v899(R) [immediate:1472] v812(R)
1, v10, v590
1, v10, v718
1, v605, v2
1, v881, v885
gap () () 
          X64MovqCompressTagged : MRI v899(R) [immediate:1471] v812(R)
1, v648, v651
1, v225, v2
1, v461, v456
1, v691, v2
gap () () 
          v902(R) = X64Lea : MRI v901(R) [immediate:1470]
gap () () 
          X64Movq : MR v80(R) v902(R)
gap () () 
          v900(R) = X64Lea : MRI v901(R) [immediate:1469]
gap () (v888 = v900(-);) 
          v888(1) = ArchNop v888
gap () () 
          X64MovqCompressTagged : MRI v888(R) [immediate:1468] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v888(R) [immediate:1467] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v888(R) [immediate:1466] v899(R)
gap () () 
          X64MovqCompressTagged : MRI v888(R) [immediate:1464] [immediate:1465]
gap () () 
          X64Cmp32 : MRI && branch if equal v891(R) [immediate:1461] v530(R) [immediate:1462] [immediate:1463]
gap () () 
          [constant:895] = ArchNop
gap () () 
          [constant:898] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v891(R) [immediate:1460] v898(R) #240 v0(S) v1(-) v2(-) v3(S) v891(-) v888(-)
gap () () 
          v892(R) = X64MovqDecompressTaggedPointer : MRI v891(R) [immediate:1459]
gap () () 
          ArchStoreWithWriteBarrier : MRI v891(R) [immediate:1458] v895(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v892(R) [immediate:1457] v888(R)
gap () () 
          ArchJmp [immediate:1456]
gap () () 
          v887(R) = X64MovqDecompressTaggedPointer : MRI v891(R) [immediate:1455]
gap () () 
          ArchStoreWithWriteBarrier : MRI v887(R) [immediate:1454] v888(R)
gap () () 
          ArchJmp [immediate:1453]
gap () () 
          X64Test32 && branch if equal v812 #1 [immediate:1451] [immediate:1452]
gap () () 
          v885(R) = X64Movsd : MRI v812(R) [immediate:1450]
gap () (v189 = v885(-);) 
          ArchJmp [immediate:1449]
gap () (v886(R) = v812(-);) 
          v886(1) = X64Sar32 v886(R) #1
gap () () 
          v884(R) = SSEInt32ToFloat64 v886
gap () (v189 = v884(-);) 
          ArchJmp [immediate:1448]
gap () () 
          [constant:190] = ArchNop
gap () () 
          [constant:430] = ArchNop
gap () () 
          [constant:39] = ArchNop
gap () () 
          [constant:480] = ArchNop
gap () () 
          [constant:44] = ArchNop
gap () () 
          [constant:19] = ArchNop
gap () () 
          [constant:197] = ArchNop
gap () (v606 = v20(-);) 
          ArchJmp [immediate:1447]
gap () () 
          v581(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1446]
gap () () 
          X64Test32 && deoptimize if equal v581 #1 #239 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          v883(R) = X64Movl : MRI v581(R) [immediate:1445]
gap () () 
          X64Cmp32 && branch if equal v883(R) v530 [immediate:1443] [immediate:1444]
gap () () 
          [constant:882] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v882(R) v883 #238 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          ArchJmp [immediate:1442]
gap () () 
          ArchJmp [immediate:1441]
gap () () 
          v575(R) = X64MovqDecompressTaggedPointer : MRI v581(R) [immediate:1440]
gap () () 
          v879(R) = X64MovqDecompressAnyTagged : MRI v575(R) [immediate:1439]
gap () () 
          X64Test32 && deoptimize if equal v879 #1 #237 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v879(R) [immediate:1438] v184(R) #236 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          v881(R) = X64MovqDecompressTaggedSigned : MRI v879(R) [immediate:1437]
gap () (v880(R) = v881(-);) 
          v880(1) = X64Sar32 v880(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v606(R) v880 [immediate:1435] [immediate:1436]
gap () () 
          v603(R) = X64MovqDecompressAnyTagged : MRI v575(R) [immediate:1434]
gap () () 
          v623(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1433]
gap () () 
          v878(R) = X64MovqDecompressTaggedPointer : MRI v879(R) [immediate:1432]
gap () () 
          v599(R) = X64Lea : M4I v606(R) [immediate:1431]
gap () () 
          v877(R) = X64MovqDecompressAnyTagged : MR4I v878(R) v606(R) [immediate:1430]
gap () () 
          X64Test32 && deoptimize if equal v877 #1 #235 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v877(R) [immediate:1429] v178(R) #234 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          v874(R) = X64MovqDecompressTaggedPointer : MRI v877(R) [immediate:1428]
gap () () 
          v876(R) = X64MovqDecompressTaggedSigned : MRI v877(R) [immediate:1427]
gap () (v875(R) = v876(-);) 
          v875(1) = X64Sar32 v875(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v875 #0 #233 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          v871(R) = X64MovqDecompressTaggedSigned : MRI v874(R) [immediate:1426]
gap () () 
          v869(R) = X64MovqDecompressTaggedPointer : MRI v581(R) [immediate:1425]
gap () () 
          v872(R) = X64MovqDecompressTaggedSigned : MRI v581(R) [immediate:1424]
gap () (v873(R) = v871(-);) 
          v873(1) = X64Sar32 v873(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v871(R) v872 #232 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          v867(R) = X64MovqDecompressAnyTagged : MR4I v869(R) v873(R) [immediate:1423]
gap () () 
          [constant:868] = ArchNop
gap () ([rdx|R|t] = v867(-); [rcx|R|t] = v44(-); [rax|R|w64] = v868(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1422] #-1 #231 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v624(-) = [rax|R|t];) () 
          v854(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1421]
gap () () 
          X64Test32 && deoptimize if equal v854 #1 #230 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          v866(R) = X64Movl : MRI v854(R) [immediate:1420]
gap () () 
          X64Cmp32 && branch if equal v866(R) v530 [immediate:1418] [immediate:1419]
gap () () 
          [constant:865] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v865(R) v866 #229 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          ArchJmp [immediate:1417]
gap () () 
          ArchJmp [immediate:1416]
gap () () 
          v864(R) = X64MovqDecompressTaggedPointer : MRI v854(R) [immediate:1415]
gap () () 
          v863(R) = X64MovqDecompressAnyTagged : MRI v864(R) [immediate:1414]
gap () () 
          X64Test32 && deoptimize if equal v863 #1 #228 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v863(R) [immediate:1413] v184(R) #227 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          v860(R) = X64MovqDecompressTaggedPointer : MRI v863(R) [immediate:1412]
gap () () 
          v862(R) = X64MovqDecompressTaggedSigned : MRI v863(R) [immediate:1411]
gap () (v861(R) = v862(-);) 
          v861(1) = X64Sar32 v861(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v606(R) v861 #226 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          v859(R) = X64MovqDecompressAnyTagged : MR4I v860(R) v606(R) [immediate:1410]
gap () () 
          X64Test32 && deoptimize if equal v859 #1 #225 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v859(R) [immediate:1409] v178(R) #224 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          v856(R) = X64MovqDecompressTaggedPointer : MRI v859(R) [immediate:1408]
gap () () 
          v858(R) = X64MovqDecompressTaggedSigned : MRI v859(R) [immediate:1407]
gap () (v857(R) = v858(-);) 
          v857(1) = X64Sar32 v857(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v857 #1 #223 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          v852(R) = X64MovqDecompressTaggedSigned : MRI v856(R) [immediate:1406]
gap () () 
          v850(R) = X64MovqDecompressTaggedPointer : MRI v854(R) [immediate:1405]
gap () () 
          v853(R) = X64MovqDecompressTaggedSigned : MRI v854(R) [immediate:1404]
gap () (v855(R) = v852(-);) 
          v855(1) = X64Sar32 v855(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v852(R) v853 #222 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
assign r8 to v893:0
gap () () 
          v848(R) = X64MovqDecompressAnyTagged : MR4I v850(R) v855(R) [immediate:1403]
assign 8 to v893:0
gap () () 
          [constant:849] = ArchNop
gap () ([rdx|R|t] = v848(-); [rcx|R|t] = v44(-); [rax|R|w64] = v849(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1402] #-1 #221 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) v624(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v625(-) = [rax|R|t];) () 
          v834(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1401]
assign rax to v372:1
assign 0 to v372:1
gap () () 
          X64Test32 && deoptimize if equal v834 #1 #220 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
assign rbx to v894:1
gap () () 
          v847(R) = X64Movl : MRI v834(R) [immediate:1400]
assign 3 to v894:1
gap () () 
          X64Cmp32 && branch if equal v847(R) v530 [immediate:1398] [immediate:1399]
assign rsi to v895:1
gap () () 
          [constant:846] = ArchNop
assign 6 to v895:1
gap () () 
          X64Cmp32 && deoptimize if not equal v846(R) v847 #219 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          ArchJmp [immediate:1397]
gap () () 
          ArchJmp [immediate:1396]
gap () () 
          v845(R) = X64MovqDecompressTaggedPointer : MRI v834(R) [immediate:1395]
gap () () 
          v844(R) = X64MovqDecompressAnyTagged : MRI v845(R) [immediate:1394]
gap () () 
          X64Test32 && deoptimize if equal v844 #1 #218 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
assign r8 to v372:2
assign 8 to v372:2
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v844(R) [immediate:1393] v184(R) #217 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          v840(R) = X64MovqDecompressTaggedPointer : MRI v844(R) [immediate:1392]
gap () () 
          v843(R) = X64MovqDecompressTaggedSigned : MRI v844(R) [immediate:1391]
gap () (v842(R) = v843(-);) 
          v842(1) = X64Sar32 v842(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v606(R) v842 #216 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          v839(R) = X64MovqDecompressAnyTagged : MR4I v840(R) v606(R) [immediate:1390]
gap () () 
          X64Test32 && deoptimize if equal v839 #1 #215 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v839(R) [immediate:1389] v178(R) #214 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          v836(R) = X64MovqDecompressTaggedPointer : MRI v839(R) [immediate:1388]
gap () () 
          v838(R) = X64MovqDecompressTaggedSigned : MRI v839(R) [immediate:1387]
gap () (v837(R) = v838(-);) 
          v837(1) = X64Sar32 v837(R) #1
assign r8 to v28:1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v837 #2 #213 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
assign 8 to v28:1
gap () () 
          v832(R) = X64MovqDecompressTaggedSigned : MRI v836(R) [immediate:1386]
gap () () 
          v830(R) = X64MovqDecompressTaggedPointer : MRI v834(R) [immediate:1385]
gap () () 
          v833(R) = X64MovqDecompressTaggedSigned : MRI v834(R) [immediate:1384]
gap () (v835(R) = v832(-);) 
          v835(1) = X64Sar32 v835(R) #1
assign r9 to v886:0
assign 9 to v886:0
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v832(R) v833 #212 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          v828(R) = X64MovqDecompressAnyTagged : MR4I v830(R) v835(R) [immediate:1383]
gap () () 
          [constant:829] = ArchNop
assign r12 to v891:0
assign 12 to v891:0
gap () ([rdx|R|t] = v828(-); [rcx|R|t] = v44(-); [rax|R|w64] = v829(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1382] #-1 #211 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) v624(S) v625(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v626(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v623 #1 #210 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v626(-)
gap () () 
          v827(R) = X64MovqDecompressTaggedPointer : MRI v623(R) [immediate:1381]
assign r11 to v36:1
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v827(R) [immediate:1380] #1068 #209 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v626(-)
assign 11 to v36:1
gap () () 
          [constant:825] = ArchNop
gap () () 
          v826(R) = X64MovqDecompressTaggedPointer : MRI v623(R) [immediate:1379]
gap () () 
          X64Cmp && deoptimize if not equal v825(R) v826 #208 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v626(-)
gap () () 
          v627(R) = X64MovqDecompressTaggedPointer : MRI v623(R) [immediate:1378]
gap () () 
          v819(R) = X64Movq : MR v80(R)
gap () () 
          [constant:823] = ArchNop
gap () () 
          v824(R) = X64Lea : MRI v819(R) [immediate:1377]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v824(R) [immediate:1375] [immediate:1376]
gap () () 
          ArchJmp [immediate:1374]
assign rdx to v890:1
assign 2 to v890:1
gap () ([rdx|R|w64] = v823(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1373] #-1 [rdx|R|w64]
gap (v822(-) = [rax|R|tp];) () 
          v820(R) = X64Lea : MRI v822(R) [immediate:1372]
gap () (v818 = v820(-);) 
          ArchJmp [immediate:1371]
gap () (v818 = v819(-);) 
          ArchJmp [immediate:1370]
gap () () 
          v816(R) = X64Lea : MRI v818(R) [immediate:1369]
gap () () 
          X64Movq : MR v80(R) v816(R)
gap () () 
          v817(R) = X64Lea : MRI v818(R) [immediate:1368]
gap () (v795 = v817(-);) 
          v795(1) = ArchNop v795
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1367] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1365] [immediate:1366]
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1364] v812(R)
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1363] v812(R)
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1362] v812(R)
blocking v28 pick register r8
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1361] v812(R)
gap () () 
          v814(R) = X64Lea : MRI v816(R) [immediate:1360]
gap () () 
          X64Movq : MR v80(R) v814(R)
gap () () 
          v815(R) = X64Lea : MRI v816(R) [immediate:1359]
gap () (v664 = v815(-);) 
          v664(1) = ArchNop v664
gap () () 
          X64MovqCompressTagged : MRI v664(R) [immediate:1358] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v664(R) [immediate:1357] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v664(R) [immediate:1356] v795(R)
gap () () 
          X64MovqCompressTagged : MRI v664(R) [immediate:1354] [immediate:1355]
gap () () 
          v810(R) = X64Lea : MRI v814(R) [immediate:1353]
gap () () 
          X64Movq : MR v80(R) v810(R)
blocking v36 pick register r11
gap () () 
          v813(R) = X64Lea : MRI v814(R) [immediate:1352]
gap () (v780 = v813(-);) 
          v780(1) = ArchNop v780
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1351] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1349] [immediate:1350]
assign rax to v889:0
assign 0 to v889:0
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1348] v812(R)
assign r9 to v887:0
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1347] v812(R)
assign 9 to v887:0
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1346] v812(R)
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1345] v812(R)
gap () () 
          v811(R) = X64Lea : MRI v810(R) [immediate:1344]
gap () () 
          X64Movq : MR v80(R) v811(R)
gap () () 
          v809(R) = X64Lea : MRI v810(R) [immediate:1343]
gap () (v665 = v809(-);) 
          v665(1) = ArchNop v665
gap () () 
          X64MovqCompressTagged : MRI v665(R) [immediate:1342] v178(R)
assign r11 to v36:5
assign 11 to v36:5
gap () () 
          X64MovqCompressTagged : MRI v665(R) [immediate:1341] v185(R)
assign r8 to v28:5
assign 8 to v28:5
gap () () 
          X64MovqCompressTagged : MRI v665(R) [immediate:1340] v780(R)
gap () () 
          X64MovqCompressTagged : MRI v665(R) [immediate:1338] [immediate:1339]
assign r9 to v885:0
assign 9 to v885:0
gap () () 
          X64Test32 && deoptimize if equal v624 #1 #207 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1335] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1336] [immediate:1337]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v624(R) [immediate:1331] v178(R) #206 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1332] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1333] [immediate:1334]
assign r12 to v881:0
assign 12 to v881:0
gap () () 
          v806(R) = X64MovqDecompressTaggedPointer : MRI v624(R) [immediate:1330]
gap () () 
          v808(R) = X64MovqDecompressTaggedSigned : MRI v624(R) [immediate:1329]
assign r8 to v28:4
assign 8 to v28:4
gap () (v807(R) = v808(-);) 
          v807(1) = X64Sar32 v807(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v807 #0 #205 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1326] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1327] [immediate:1328]
gap () () 
          v802(R) = X64MovqDecompressTaggedSigned : MRI v806(R) [immediate:1325]
assign r9 to v884:0
assign 9 to v884:0
assign r9 to v879:0
assign 9 to v879:0
gap () () 
          X64Test32 && deoptimize if equal v625 #1 #204 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1322] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1323] [immediate:1324]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v625(R) [immediate:1318] v178(R) #203 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1319] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1320] [immediate:1321]
gap () () 
          v789(R) = X64MovqDecompressTaggedPointer : MRI v625(R) [immediate:1317]
assign r14 to v883:1
assign 14 to v883:1
gap () () 
          v805(R) = X64MovqDecompressTaggedSigned : MRI v625(R) [immediate:1316]
gap () (v804(R) = v805(-);) 
          v804(1) = X64Sar32 v804(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v804 #0 #202 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1313] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1314] [immediate:1315]
assign r14 to v863:1
gap () () 
          v803(R) = X64MovqDecompressTaggedSigned : MRI v789(R) [immediate:1312]
assign 14 to v863:1
gap () (v801(R) = v803(-);) 
          v801(1) = X64Sar32 v801(R) #1
gap () (v800(R) = v802(-);) 
          v800(1) = X64Sar32 v800(R) #1
gap () (v799(R) = v800(-);) 
          v799(1) = X64Sub32 v799(R) v801
assign rax to v882:0
assign 0 to v882:0
gap () (v798(R) = v799(-);) 
          v798(1) = X64Add32 && deoptimize if overflow v798(R) v799(R) #201 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1309] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1310] [immediate:1311]
gap () (v797 = v798(-);) 
          v797(1) = ArchNop v797
gap () () 
          X64MovqCompressTagged : MRI v664(R) [immediate:1307] [immediate:1308]
assign r12 to v880:0
assign 12 to v880:0
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1306] v797(R)
v3:0 not intersect with v48:0, removed
v3:1 intersect with v48:0, adding
v3:0 not intersect with v46:0, removed
v3:1 intersect with v46:0, adding
v3:0 not intersect with v155:0, removed
v3:1 intersect with v155:0, adding
v3:0 not intersect with v258:0, removed
gap () () 
          X64Test32 && deoptimize if equal v626 #1 #200 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1303] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1304] [immediate:1305]
v3:1 intersect with v258:0, adding
v3:0 not intersect with v256:0, removed
v3:1 intersect with v256:0, adding
v3:0 not intersect with v157:0, removed
v3:1 intersect with v157:0, adding
v3:0 not intersect with v623:0, removed
v3:1 intersect with v623:0, adding
v3:1 intersect with v24:1, adding
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v626(R) [immediate:1299] v178(R) #199 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1300] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1301] [immediate:1302]
v3:0 not intersect with v621:0, removed
v3:1 intersect with v621:0, adding
gap () () 
          v792(R) = X64MovqDecompressTaggedPointer : MRI v626(R) [immediate:1298]
v3:1 intersect with v49:1, adding
gap () () 
          v794(R) = X64MovqDecompressTaggedSigned : MRI v626(R) [immediate:1297]
assign r12 to v3:0
gap () (v793(R) = v794(-);) 
          v793(1) = X64Sar32 v793(R) #1
assign 12 to v3:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v793 #0 #198 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1294] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1295] [immediate:1296]
gap () () 
          v787(R) = X64MovqDecompressTaggedSigned : MRI v792(R) [immediate:1293]
gap () () 
          v791(R) = X64MovqDecompressTaggedSigned : MRI v625(R) [immediate:1292]
v49:1 not intersect with v3:1, removed
v49:2 intersect with v3:1, adding
gap () (v790(R) = v791(-);) 
          v790(1) = X64Sar32 v790(R) #1
v49:2 intersect with v3:0, adding
assign rax to v49:1
assign 0 to v49:1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v790 #0 #197 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1289] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1290] [immediate:1291]
gap () () 
          v788(R) = X64MovqDecompressTaggedSigned : MRI v789(R) [immediate:1288]
gap () (v786(R) = v788(-);) 
          v786(1) = X64Sar32 v786(R) #1
v24:1 not intersect with v19:0, removed
gap () (v785(R) = v787(-);) 
          v785(1) = X64Sar32 v785(R) #1
v24:2 intersect with v19:0, adding
v24:1 not intersect with v3:1, removed
gap () (v784(R) = v785(-);) 
          v784(1) = X64Sub32 v784(R) v786
v24:2 intersect with v3:1, adding
assign rdx to v24:1
assign 2 to v24:1
gap () (v783(R) = v784(-);) 
          v783(1) = X64Add32 && deoptimize if overflow v783(R) v784(R) #196 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1285] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1286] [immediate:1287]
gap () (v782 = v783(-);) 
          v782(1) = ArchNop v782
gap () () 
          X64MovqCompressTagged : MRI v665(R) [immediate:1283] [immediate:1284]
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1282] v782(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1280] [immediate:1281]
gap () () 
          [constant:779] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v779(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1278] #-1 #195 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) [immediate:1279] v624(S) v625(S) v626(S) v627(S) v664(S) v665(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1277]
gap () () 
          ArchJmp [immediate:1276]
gap () (v710 = v35(-);) 
          ArchJmp [immediate:1275]
v2:1 not intersect with v9:0, removed
v2:2 intersect with v9:0, adding
gap () () 
          X64Cmp32 && branch if unsigned less than v710 #3 [immediate:1273] [immediate:1274]
v2:1 not intersect with v13:0, removed
gap () () 
          v775(R) = X64MovqDecompressTaggedPointer : MRI v624(R) [immediate:1272]
v2:2 intersect with v13:0, adding
v2:1 not intersect with v22:0, removed
gap () () 
          v777(R) = X64MovqDecompressTaggedSigned : MRI v624(R) [immediate:1271]
v2:2 intersect with v22:0, adding
v2:1 not intersect with v50:0, removed
v2:2 intersect with v50:0, adding
gap () (v776(R) = v777(-);) 
          v776(1) = X64Sar32 v776(R) #1
v2:1 not intersect with v63:0, removed
v2:2 intersect with v63:0, adding
v2:1 not intersect with v69:0, removed
v2:2 intersect with v69:0, adding
v2:1 not intersect with v106:0, removed
v2:2 intersect with v106:0, adding
v2:1 not intersect with v128:0, removed
v2:2 intersect with v128:0, adding
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v710(R) v776 #194 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1269] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1270]
v2:1 not intersect with v139:0, removed
v2:2 intersect with v139:0, adding
v2:1 not intersect with v161:0, removed
gap () () 
          v770(R) = X64MovqDecompressTaggedSigned : MR4I v775(R) v710(R) [immediate:1268]
v2:2 intersect with v161:0, adding
v2:1 not intersect with v242:0, removed
v2:2 intersect with v242:0, adding
gap () () 
          v772(R) = X64MovqDecompressTaggedPointer : MRI v625(R) [immediate:1267]
v2:1 not intersect with v167:0, removed
v2:2 intersect with v167:0, adding
gap () () 
          v774(R) = X64MovqDecompressTaggedSigned : MRI v625(R) [immediate:1266]
v2:1 not intersect with v99:0, removed
v2:2 intersect with v99:0, adding
v2:1 not intersect with v51:0, removed
gap () (v773(R) = v774(-);) 
          v773(1) = X64Sar32 v773(R) #1
v2:2 intersect with v51:0, adding
v2:1 not intersect with v174:0, removed
v2:2 intersect with v174:0, adding
v2:1 not intersect with v93:0, removed
v2:2 intersect with v93:0, adding
v2:1 not intersect with v122:0, removed
v2:2 intersect with v122:0, adding
v2:1 not intersect with v190:0, removed
v2:2 intersect with v190:0, adding
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v710(R) v773 #193 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1264] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1265]
v2:1 not intersect with v219:0, removed
v2:2 intersect with v219:0, adding
v2:1 not intersect with v203:0, removed
gap () () 
          v771(R) = X64MovqDecompressTaggedSigned : MR4I v772(R) v710(R) [immediate:1263]
v2:2 intersect with v203:0, adding
v2:1 not intersect with v262:0, removed
v2:2 intersect with v262:0, adding
gap () (v769(R) = v771(-);) 
          v769(1) = X64Sar32 v769(R) #1
v2:1 not intersect with v289:0, removed
v2:2 intersect with v289:0, adding
v2:1 not intersect with v395:0, removed
gap () (v768(R) = v770(-);) 
          v768(1) = X64Sar32 v768(R) #1
v2:2 intersect with v395:0, adding
v2:1 not intersect with v656:0, removed
v2:2 intersect with v656:0, adding
gap () (v767(R) = v768(-);) 
          v767(1) = X64Sub32 v767(R) v769
v2:1 not intersect with v411:0, removed
v2:2 intersect with v411:0, adding
gap () () 
          v758(R) = X64MovqDecompressTaggedPointer : MRI v664(R) [immediate:1262]
v2:1 not intersect with v417:0, removed
v2:2 intersect with v417:0, adding
v2:1 not intersect with v691:0, removed
gap () () 
          v765(R) = X64MovqDecompressTaggedSigned : MRI v664(R) [immediate:1261]
v2:2 intersect with v691:0, adding
v2:1 not intersect with v467:0, removed
v2:2 intersect with v467:0, adding
v2:1 not intersect with v590:0, removed
v2:2 intersect with v590:0, adding
v2:1 not intersect with v685:0, removed
v2:2 intersect with v685:0, adding
v2:1 not intersect with v594:0, removed
v2:2 intersect with v594:0, adding
v2:1 not intersect with v77:0, removed
gap () (v750(R) = v767(-);) 
          v750(1) = X64Add32 && deoptimize if overflow v750(R) v767(R) #192 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1259] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1260]
v2:2 intersect with v77:0, adding
gap () () 
          v766(R) = X64MovqDecompressTaggedSigned : MRI v758(R) [immediate:1258]
v2:1 not intersect with v225:0, removed
v2:2 intersect with v225:0, adding
v2:1 not intersect with v605:0, removed
gap () (v763(R) = v766(-);) 
          v763(1) = X64Sar32 v763(R) #1
v2:2 intersect with v605:0, adding
v2:1 not intersect with v424:0, removed
v2:2 intersect with v424:0, adding
gap () (v753(R) = v765(-);) 
          v753(1) = X64Sar32 v753(R) #1
v2:1 not intersect with v236:0, removed
v2:2 intersect with v236:0, adding
gap () () 
          v764(R) = X64Lea32 : MRI v753(R) #1
v2:2 intersect with v6:0, adding
v2:1 not intersect with v698:0, removed
v2:2 intersect with v698:0, adding
v2:1 not intersect with v633:0, removed
v2:2 intersect with v633:0, adding
v2:1 not intersect with v662:0, removed
v2:2 intersect with v662:0, adding
v2:1 not intersect with v718:0, removed
v2:2 intersect with v718:0, adding
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v710(R) v764 #191 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1256] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1257]
v2:1 not intersect with v569:0, removed
v2:2 intersect with v569:0, adding
v2:1 not intersect with v440:0, removed
gap () () 
          X64Cmp32 && branch if unsigned less than v710(R) v763 [immediate:1254] [immediate:1255]
v2:2 intersect with v440:0, adding
v2:1 not intersect with v196:0, removed
gap () () 
          [constant:761] = ArchNop
v2:2 intersect with v196:0, adding
v2:1 not intersect with v640:0, removed
v2:2 intersect with v640:0, adding
gap () () 
          v762(R) = X64Lea32 : MR1 v710(R) v710(R)
v2:1 not intersect with v669:0, removed
v2:2 intersect with v669:0, adding
v2:1 not intersect with v627:0, removed
v2:2 intersect with v627:0, adding
gap () ([rax|R|t] = v664(-); [rbx|R|w32] = v762(-); [rsi|R|w64] = v761(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1253] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
assign r9 to v2:1
gap (v759(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v759 #1 #190 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1251] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1252]
assign 9 to v2:1
gap () (v754 = v759(-);) 
          ArchJmp [immediate:1250]
gap () (v754 = v758(-);) 
          ArchJmp [immediate:1249]
gap () () 
          v757(R) = X64Movl : MRI v754(R) [immediate:1248]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v757(R) [immediate:1246] [immediate:1247]
gap () () 
          [constant:756] = ArchNop
gap () ([rax|R|t] = v664(-); [rsi|R|w64] = v756(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1245] #-1 [rax|R|t] [rsi|R|w64]
assign r15 to v6:0
assign 15 to v6:0
gap (v755(-) = [rax|R|t];) (v747 = v755(-);) 
          ArchJmp [immediate:1244]
gap () (v747 = v754(-);) 
          ArchJmp [immediate:1243]
gap () () 
          v713(R) = X64Lea32 : MRI v710(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v710(R) v753 [immediate:1241] [immediate:1242]
gap () () 
          v752(R) = X64Lea32 : MR1 v713(R) v713(R)
gap () () 
          X64MovqCompressTagged : MRI v664(R) [immediate:1240] v752(R)
gap () () 
          ArchJmp [immediate:1239]
gap () () 
          ArchJmp [immediate:1238]
v10:1 not intersect with v13:0, removed
v10:2 intersect with v13:0, adding
gap () (v749 = v750(-);) 
          v749(1) = ArchNop v749
v10:1 not intersect with v63:0, removed
v10:2 intersect with v63:0, adding
v10:1 not intersect with v106:0, removed
gap () () 
          X64MovqCompressTagged : MR4I v747(R) v710(R) [immediate:1237] v749(R)
v10:2 intersect with v106:0, adding
v10:1 not intersect with v139:0, removed
gap () () 
          v744(R) = X64MovqDecompressTaggedPointer : MRI v626(R) [immediate:1236]
v10:2 intersect with v139:0, adding
v10:1 not intersect with v161:0, removed
gap () () 
          v746(R) = X64MovqDecompressTaggedSigned : MRI v626(R) [immediate:1235]
v10:2 intersect with v161:0, adding
v10:1 not intersect with v22:0, removed
v10:2 intersect with v22:0, adding
gap () (v745(R) = v746(-);) 
          v745(1) = X64Sar32 v745(R) #1
v10:1 not intersect with v627:0, removed
v10:2 intersect with v627:0, adding
v10:1 not intersect with v219:0, removed
v10:2 intersect with v219:0, adding
v10:1 not intersect with v698:0, removed
v10:2 intersect with v698:0, adding
v10:1 not intersect with v236:0, removed
v10:2 intersect with v236:0, adding
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v710(R) v745 #189 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1234] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) v710(-)
v10:1 not intersect with v656:0, removed
v10:2 intersect with v656:0, adding
v10:1 not intersect with v395:0, removed
gap () () 
          v739(R) = X64MovqDecompressTaggedSigned : MR4I v744(R) v710(R) [immediate:1233]
v10:2 intersect with v395:0, adding
v10:1 not intersect with v411:0, removed
gap () () 
          v741(R) = X64MovqDecompressTaggedPointer : MRI v625(R) [immediate:1232]
v10:2 intersect with v411:0, adding
v10:1 not intersect with v424:0, removed
v10:2 intersect with v424:0, adding
gap () () 
          v743(R) = X64MovqDecompressTaggedSigned : MRI v625(R) [immediate:1231]
v10:1 not intersect with v357:0, removed
v10:2 intersect with v357:0, adding
v10:1 not intersect with v93:0, removed
gap () (v742(R) = v743(-);) 
          v742(1) = X64Sar32 v742(R) #1
v10:2 intersect with v93:0, adding
v10:1 not intersect with v533:0, removed
v10:2 intersect with v533:0, adding
v10:1 not intersect with v569:0, removed
v10:2 intersect with v569:0, adding
v10:1 not intersect with v174:0, removed
v10:2 intersect with v174:0, adding
v10:1 not intersect with v77:0, removed
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v710(R) v742 #188 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1230] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) v710(-)
v10:2 intersect with v77:0, adding
v10:1 not intersect with v605:0, removed
v10:2 intersect with v605:0, adding
gap () () 
          v740(R) = X64MovqDecompressTaggedSigned : MR4I v741(R) v710(R) [immediate:1229]
v10:1 not intersect with v203:0, removed
v10:2 intersect with v203:0, adding
v10:1 not intersect with v262:0, removed
gap () (v738(R) = v740(-);) 
          v738(1) = X64Sar32 v738(R) #1
v10:2 intersect with v262:0, adding
v10:1 not intersect with v9:0, removed
gap () (v737(R) = v739(-);) 
          v737(1) = X64Sar32 v737(R) #1
v10:2 intersect with v9:0, adding
v10:1 not intersect with v685:0, removed
v10:2 intersect with v685:0, adding
gap () (v736(R) = v737(-);) 
          v736(1) = X64Sub32 v736(R) v738
v10:1 not intersect with v440:0, removed
v10:2 intersect with v440:0, adding
v10:1 not intersect with v51:0, removed
gap () () 
          v727(R) = X64MovqDecompressTaggedPointer : MRI v665(R) [immediate:1228]
v10:2 intersect with v51:0, adding
v10:1 not intersect with v640:0, removed
v10:2 intersect with v640:0, adding
gap () () 
          v734(R) = X64MovqDecompressTaggedSigned : MRI v665(R) [immediate:1227]
v10:1 not intersect with v669:0, removed
v10:2 intersect with v669:0, adding
v10:1 not intersect with v122:0, removed
v10:2 intersect with v122:0, adding
v10:1 not intersect with v190:0, removed
v10:2 intersect with v190:0, adding
v10:1 not intersect with v590:0, removed
v10:2 intersect with v590:0, adding
v10:1 not intersect with v718:0, removed
v10:2 intersect with v718:0, adding
gap () (v719(R) = v736(-);) 
          v719(1) = X64Add32 && deoptimize if overflow v719(R) v736(R) #187 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1226] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) v710(-)
gap () () 
          v735(R) = X64MovqDecompressTaggedSigned : MRI v727(R) [immediate:1225]
gap () (v732(R) = v735(-);) 
          v732(1) = X64Sar32 v732(R) #1
assign rcx to v10:1
assign 1 to v10:1
gap () (v722(R) = v734(-);) 
          v722(1) = X64Sar32 v722(R) #1
gap () () 
          v733(R) = X64Lea32 : MRI v722(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v710(R) v733 #186 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1224] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) v710(-)
assign rsi to v878:1
gap () () 
          X64Cmp32 && branch if unsigned less than v710(R) v732 [immediate:1222] [immediate:1223]
assign 6 to v878:1
gap () () 
          [constant:730] = ArchNop
gap () () 
          v731(R) = X64Lea32 : MR1 v710(R) v710(R)
gap () ([rax|R|t] = v665(-); [rbx|R|w32] = v731(-); [rsi|R|w64] = v730(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1221] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
assign rsi to v875:0
assign 6 to v875:0
gap (v728(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v728 #1 #185 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1220] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) v710(-)
gap () (v723 = v728(-);) 
          ArchJmp [immediate:1219]
gap () (v723 = v727(-);) 
          ArchJmp [immediate:1218]
gap () () 
          v726(R) = X64Movl : MRI v723(R) [immediate:1217]
assign rbx to v876:0
gap () () 
          X64Cmp32 : Root && branch if equal #208 v726(R) [immediate:1215] [immediate:1216]
assign 3 to v876:0
gap () () 
          [constant:725] = ArchNop
gap () ([rax|R|t] = v665(-); [rsi|R|w64] = v725(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1214] #-1 [rax|R|t] [rsi|R|w64]
gap (v724(-) = [rax|R|t];) (v715 = v724(-);) 
          ArchJmp [immediate:1213]
gap () (v715 = v723(-);) 
          ArchJmp [immediate:1212]
assign rdi to v877:0
assign 7 to v877:0
gap () () 
          X64Cmp32 && branch if unsigned less than v710(R) v722 [immediate:1210] [immediate:1211]
gap () () 
          v721(R) = X64Lea32 : MR1 v713(R) v713(R)
gap () () 
          X64MovqCompressTagged : MRI v665(R) [immediate:1209] v721(R)
gap () () 
          ArchJmp [immediate:1208]
gap () () 
          ArchJmp [immediate:1207]
gap () (v718 = v719(-);) 
          v718(1) = ArchNop v718
gap () () 
          X64MovqCompressTagged : MR4I v715(R) v710(R) [immediate:1206] v718(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1204] [immediate:1205]
gap () () 
          [constant:714] = ArchNop
assign rsi to v874:0
assign 6 to v874:0
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v714(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1202] #-1 #184 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) [immediate:1203] v624(S) v625(S) v626(S) v627(S) v664(S) v665(S) v713(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1201]
gap () () 
          ArchJmp [immediate:1200]
gap () (v710 = v713(-);) 
          ArchJmp [immediate:1199]
gap () () 
          v663(R) = X64MovqDecompressAnyTagged : MRI v627(R) [immediate:1198]
assign rbx to v873:1
assign 3 to v873:1
gap () () 
          X64Test32 && deoptimize if equal v663 #1 #183 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1196] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1197]
assign r11 to v36:4
assign 11 to v36:4
gap () () 
          v711(R) = X64MovqDecompressTaggedPointer : MRI v663(R) [immediate:1195]
assign rbx to v729:0
assign 3 to v729:0
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v711(R) [immediate:1192] #1068 #182 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1193] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1194]
gap () () 
          [constant:708] = ArchNop
gap () () 
          v709(R) = X64MovqDecompressTaggedPointer : MRI v663(R) [immediate:1191]
gap () () 
          X64Cmp && deoptimize if not equal v708(R) v709 #181 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1189] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1190]
v25:1 not intersect with v58:0, removed
gap () () 
          v666(R) = X64Movl : MRI v663(R) [immediate:1188]
v25:2 intersect with v58:0, adding
v25:1 not intersect with v65:0, removed
gap () () 
          v703(R) = X64Movq : MR v80(R)
v25:2 intersect with v65:0, adding
v25:1 not intersect with v117:0, removed
gap () () 
          v707(R) = X64Lea : MRI v703(R) [immediate:1187]
v25:2 intersect with v117:0, adding
v25:1 not intersect with v124:0, removed
v25:2 intersect with v124:0, adding
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v707(R) [immediate:1185] [immediate:1186]
v25:1 not intersect with v192:0, removed
gap () () 
          ArchJmp [immediate:1184]
v25:2 intersect with v192:0, adding
v25:1 not intersect with v580:0, removed
v25:2 intersect with v580:0, adding
gap () ([rdx|R|w64] = v197(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1183] #-1 [rdx|R|w64]
v25:1 not intersect with v214:0, removed
v25:2 intersect with v214:0, adding
v25:1 not intersect with v88:0, removed
gap (v706(-) = [rax|R|tp];) () 
          v704(R) = X64Lea : MRI v706(R) [immediate:1182]
v25:2 intersect with v88:0, adding
v25:1 not intersect with v221:0, removed
gap () (v702 = v704(-);) 
          ArchJmp [immediate:1181]
v25:2 intersect with v221:0, adding
v25:1 not intersect with v715:0, removed
gap () (v702 = v703(-);) 
          ArchJmp [immediate:1180]
v25:2 intersect with v715:0, adding
v25:1 not intersect with v185:0, removed
gap () () 
          v699(R) = X64Lea : MRI v702(R) [immediate:1179]
v25:2 intersect with v185:0, adding
v25:1 not intersect with v406:0, removed
gap () () 
          X64Movq : MR v80(R) v699(R)
v25:2 intersect with v406:0, adding
v25:1 not intersect with v146:0, removed
gap () () 
          v701(R) = X64Lea : MRI v702(R) [immediate:1178]
v25:2 intersect with v146:0, adding
v25:1 not intersect with v687:0, removed
v25:2 intersect with v687:0, adding
gap () (v621 = v701(-);) 
          v621(1) = ArchNop v621
v25:1 not intersect with v413:0, removed
v25:2 intersect with v413:0, adding
v25:1 not intersect with v264:0, removed
gap () () 
          X64MovqCompressTagged : MRI v621(R) [immediate:1177] v190(R)
v25:2 intersect with v264:0, adding
v25:1 not intersect with v586:0, removed
v25:2 intersect with v586:0, adding
gap () () 
          X64MovqCompressTagged : MRI v621(R) [immediate:1175] [immediate:1176]
v25:1 not intersect with v247:0, removed
v25:2 intersect with v247:0, adding
gap () () 
          X64Movsd : MRI v621(R) [immediate:1174] v189(R)
v25:1 not intersect with v629:0, removed
v25:2 intersect with v629:0, adding
v25:1 not intersect with v163:0, removed
gap () () 
          X64Movsd : MRI v621(R) [immediate:1173] v189(R)
v25:2 intersect with v163:0, adding
v25:1 not intersect with v680:0, removed
gap () () 
          X64Movsd : MRI v621(R) [immediate:1172] v189(R)
v25:2 intersect with v680:0, adding
v25:1 not intersect with v612:0, removed
v25:2 intersect with v612:0, adding
gap () () 
          X64Movsd : MRI v621(R) [immediate:1171] v189(R)
v25:1 not intersect with v651:0, removed
v25:2 intersect with v651:0, adding
v25:1 not intersect with v435:0, removed
gap () () 
          v700(R) = X64Lea : MRI v699(R) [immediate:1170]
v25:2 intersect with v435:0, adding
gap () () 
          X64Movq : MR v80(R) v700(R)
v25:1 not intersect with v442:0, removed
v25:2 intersect with v442:0, adding
v25:1 not intersect with v658:0, removed
gap () () 
          v698(R) = X64Lea : MRI v699(R) [immediate:1169]
v25:2 intersect with v658:0, adding
v25:1 not intersect with v19:0, removed
v25:2 intersect with v19:0, adding
gap () (v600 = v698(-);) 
          v600(1) = ArchNop v600
v25:1 not intersect with v95:0, removed
v25:2 intersect with v95:0, adding
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1168] v39(R)
v25:1 not intersect with v709:0, removed
v25:2 intersect with v709:0, adding
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1167] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1166] v621(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1164] [immediate:1165]
assign rsi to v25:1
assign 6 to v25:1
gap () () 
          v661(R) = X64MovqDecompressTaggedPointer : MRI v664(R) [immediate:1163]
gap () () 
          v697(R) = X64MovqDecompressTaggedSigned : MRI v664(R) [immediate:1162]
gap () (v681(R) = v697(-);) 
          v681(1) = X64Sar32 v681(R) #1
v43:1 not intersect with v253:0, removed
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v681 #1 #180 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1158] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1159] v664(-) v665(-) v666(S) v600(-) [immediate:1160] [immediate:1161]
v43:2 intersect with v253:0, adding
v43:1 not intersect with v334:0, removed
gap () () 
          v692(R) = X64MovqDecompressTaggedSigned : MRI v661(R) [immediate:1157]
v43:2 intersect with v334:0, adding
v43:1 not intersect with v565:0, removed
gap () () 
          v660(R) = X64MovqDecompressTaggedPointer : MRI v665(R) [immediate:1156]
v43:2 intersect with v565:0, adding
v43:1 not intersect with v618:0, removed
gap () () 
          v696(R) = X64MovqDecompressTaggedSigned : MRI v665(R) [immediate:1155]
v43:2 intersect with v618:0, adding
v43:1 not intersect with v391:0, removed
v43:2 intersect with v391:0, adding
gap () (v682(R) = v696(-);) 
          v682(1) = X64Sar32 v682(R) #1
v43:1 not intersect with v42:0, removed
v43:2 intersect with v42:0, adding
v43:1 not intersect with v510:0, removed
v43:2 intersect with v510:0, adding
v43:1 not intersect with v556:0, removed
v43:2 intersect with v556:0, adding
v43:1 not intersect with v387:0, removed
v43:2 intersect with v387:0, adding
v43:1 not intersect with v561:0, removed
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v682 #2 #179 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1151] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1152] v664(-) v665(-) v666(S) v600(-) [immediate:1153] [immediate:1154]
v43:2 intersect with v561:0, adding
v43:1 not intersect with v382:0, removed
v43:2 intersect with v382:0, adding
gap () () 
          v693(R) = X64MovqDecompressTaggedSigned : MRI v660(R) [immediate:1150]
v43:1 not intersect with v152:0, removed
v43:2 intersect with v152:0, adding
assign rdi to v43:1
assign 7 to v43:1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v681 #2 #178 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1146] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1147] v664(-) v665(-) v666(S) v600(-) [immediate:1148] [immediate:1149]
gap () () 
          v694(R) = X64MovqDecompressTaggedSigned : MRI v661(R) [immediate:1145]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v682 #1 #177 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1141] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1142] v664(-) v665(-) v666(S) v600(-) [immediate:1143] [immediate:1144]
gap () () 
          v695(R) = X64MovqDecompressTaggedSigned : MRI v660(R) [immediate:1140]
gap () (v691(R) = v695(-);) 
          v691(1) = X64Sar32 v691(R) #1
gap () (v690(R) = v694(-);) 
          v690(1) = X64Sar32 v690(R) #1
gap () (v689(R) = v693(-);) 
          v689(1) = X64Sar32 v689(R) #1
gap () (v688(R) = v692(-);) 
          v688(1) = X64Sar32 v688(R) #1
gap () () 
          v687(R) = SSEInt32ToFloat64 v691
gap () () 
          v675(R) = SSEInt32ToFloat64 v690
gap () () 
          v676(R) = SSEInt32ToFloat64 v689
gap () () 
          v686(R) = SSEInt32ToFloat64 v688
gap () () 
          v685(R) = AVXFloat64Mul v687(R) v675
gap () () 
          v684(R) = AVXFloat64Mul v686(R) v676
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1138] [immediate:1139]
gap () () 
          v683(R) = AVXFloat64Sub v684(R) v685
gap () () 
          X64Movsd : MRI v621(R) [immediate:1137] v683(R)
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v682 #0 #176 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1133] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1134] v664(-) v665(-) v666(S) v600(-) [immediate:1135] [immediate:1136]
gap () () 
          v679(R) = X64MovqDecompressTaggedSigned : MRI v660(R) [immediate:1132]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v681 #0 #175 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1128] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1129] v664(-) v665(-) v666(S) v600(-) [immediate:1130] [immediate:1131]
blocking v783 pick register rcx
assign rcx to v783:0
assign 1 to v783:0
gap () () 
          v680(R) = X64MovqDecompressTaggedSigned : MRI v661(R) [immediate:1127]
v10:3 intersect with v6:0, adding
gap () (v668(R) = v680(-);) 
          v668(1) = X64Sar32 v668(R) #1
gap () (v678(R) = v679(-);) 
          v678(1) = X64Sar32 v678(R) #1
gap () () 
          v677(R) = SSEInt32ToFloat64 v668
gap () () 
          v674(R) = SSEInt32ToFloat64 v678
gap () () 
          v673(R) = AVXFloat64Mul v676(R) v677
gap () () 
          v672(R) = AVXFloat64Mul v674(R) v675
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1125] [immediate:1126]
gap () () 
          v671(R) = AVXFloat64Sub v672(R) v673
gap () () 
          X64Movsd : MRI v621(R) [immediate:1124] v671(R)
gap () () 
          v670(R) = X64MovqDecompressTaggedSigned : MRI v660(R) [immediate:1123]
gap () (v667(R) = v670(-);) 
          v667(1) = X64Sar32 v667(R) #1
blocking v784 pick register rax
assign rax to v784:0
assign 0 to v784:0
v49:3 intersect with v3:0, adding
gap () (v669(R) = v668(-);) 
          v669(1) = X64Imul32 && deoptimize if overflow v669(R) v667 #174 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1119] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1120] v664(-) v665(-) v666(S) v600(-) [immediate:1121] [immediate:1122]
gap () (v653 = v669(-);) 
          v653(1) = ArchNop v653
gap () () 
          X64Cmp32 && branch if equal v653 #0 [immediate:1117] [immediate:1118]
gap () () 
          ArchJmp [immediate:1116]
gap () (v662(R) = v667(-);) 
          v662(1) = X64Or32 v662(R) v668
gap () () 
          X64Cmp32 && deoptimize if signed less than v662 #0 #173 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1112] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1113] v664(-) v665(-) v666(S) v600(-) [immediate:1114] [immediate:1115]
gap () () 
          ArchJmp [immediate:1111]
gap () () 
          v658(R) = X64MovqDecompressTaggedSigned : MRI v661(R) [immediate:1110]
gap () () 
          v659(R) = X64MovqDecompressTaggedSigned : MRI v660(R) [immediate:1109]
gap () (v657(R) = v659(-);) 
          v657(1) = X64Sar32 v657(R) #1
blocking v872 pick register r9
assign r9 to v872:0
gap () (v656(R) = v658(-);) 
          v656(1) = X64Sar32 v656(R) #1
assign 9 to v872:0
gap () () 
          v654(R) = SSEInt32ToFloat64 v657
v2:3 intersect with v783:0, adding
gap () () 
          v655(R) = SSEInt32ToFloat64 v656
v2:3 intersect with v6:0, adding
v2:1 not intersect with v722:0, removed
gap () () 
          v652(R) = AVXFloat64Mul v654(R) v655
v2:3 intersect with v722:0, adding
v2:3 intersect with v784:0, adding
gap () () 
          v651(R) = SSEInt32ToFloat64 v653
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1107] [immediate:1108]
gap () () 
          v648(R) = AVXFloat64Sub v651(R) v652
gap () () 
          X64Movsd : MRI v621(R) [immediate:1106] v648(R)
gap () () 
          [constant:650] = ArchNop
gap () () 
          v641(R) = X64MovqDecompressTaggedPointer : MRI v650(R) [immediate:1105]
gap () () 
          v642(R) = X64Movsd : MRI v621(R) [immediate:1104]
gap () () 
          v649(R) = X64Movsd : MRI v621(R) [immediate:1103]
assign r9 to v871:0
gap () () 
          v646(R) = AVXFloat64Mul v649(R) v649(R)
assign 9 to v871:0
gap () () 
          v647(R) = AVXFloat64Mul v642(R) v642(R)
gap () () 
          v644(R) = AVXFloat64Mul v648(R) v648(R)
gap () () 
          v645(R) = AVXFloat64Add v646(R) v647
gap () () 
          v643(R) = AVXFloat64Add v644(R) v645
gap () () 
          v629(R) = SSEFloat64Sqrt v643
gap () () 
          [constant:640] = ArchNop
gap () () 
          v639(R) = AVXFloat64Div v642(R) v629
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v641(R) [immediate:1101] v640(R) #172 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1102] v624(-) v625(-) v626(-) v627(S) v600(-)
gap () (v638(R) = v639(-);) 
          v638(1) = SSEFloat64SilenceNaN v638(R)
gap () () 
          X64Movsd : MRI v621(R) [immediate:1100] v638(R)
blocking v867 pick register r15
assign r15 to v867:0
assign 15 to v867:0
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1098] [immediate:1099]
v6:1 intersect with v2:3, adding
gap () () 
          [constant:637] = ArchNop
v6:0 not intersect with v2:2, removed
v6:1 intersect with v2:2, adding
v6:0 not intersect with v5:0, removed
v6:0 not intersect with v733:0, removed
v6:0 not intersect with v741:0, removed
v6:1 intersect with v741:0, adding
v6:1 intersect with v10:3, adding
v6:0 not intersect with v731:0, removed
v6:1 intersect with v731:0, adding
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v637(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1096] #-1 #171 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) [immediate:1097] v624(S) v625(S) v626(S) v627(S) v600(S) #1 v629(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1095]
gap () () 
          ArchJmp [immediate:1094]
gap () (v631 = v35(-);) 
          ArchJmp [immediate:1093]
gap () () 
          X64Cmp32 && branch if unsigned less than v631 #3 [immediate:1091] [immediate:1092]
gap () () 
          v635(R) = X64Movsd : MR8I v621(R) v631(R) [immediate:1090]
gap () () 
          v634(R) = AVXFloat64Div v635(R) v629
gap () (v633(R) = v634(-);) 
          v633(1) = SSEFloat64SilenceNaN v633(R)
assign r9 to v870:0
assign 9 to v870:0
gap () () 
          X64Movsd : MR8I v621(R) v631(R) [immediate:1089] v633(R)
gap () () 
          v628(R) = X64Lea32 : MRI v631(R) #1
assign r9 to v869:0
assign 9 to v869:0
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1087] [immediate:1088]
gap () () 
          [constant:630] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v630(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1085] #-1 #170 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) [immediate:1086] v624(S) v625(S) v626(S) v627(S) v600(S) v628(S) v629(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
assign r9 to v763:0
assign 9 to v763:0
gap () () 
          ArchJmp [immediate:1084]
gap () () 
          ArchJmp [immediate:1083]
gap () (v631 = v628(-);) 
          ArchJmp [immediate:1082]
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1080] [immediate:1081]
gap () () 
          X64Movsd : MRI v621(R) [immediate:1079] v430(R)
gap () () 
          X64Test32 && deoptimize if equal v603 #1 #169 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v600(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v603(R) [immediate:1078] v184(R) #168 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v600(-)
gap () () 
          v612(R) = X64MovqDecompressTaggedPointer : MRI v603(R) [immediate:1077]
gap () () 
          v619(R) = X64MovqDecompressTaggedSigned : MRI v603(R) [immediate:1076]
gap () () 
          v620(R) = X64MovqDecompressTaggedSigned : MRI v612(R) [immediate:1075]
blocking v785 pick register r9
assign r9 to v785:0
assign 9 to v785:0
gap () (v617(R) = v620(-);) 
          v617(1) = X64Sar32 v617(R) #1
gap () (v607(R) = v619(-);) 
          v607(1) = X64Sar32 v607(R) #1
gap () () 
          v618(R) = X64Lea32 : MRI v607(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v606(R) v618 #167 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v600(-)
gap () () 
          X64Cmp32 && branch if unsigned less than v606(R) v617 [immediate:1073] [immediate:1074]
gap () () 
          [constant:615] = ArchNop
assign r15 to v866:0
assign 15 to v866:0
gap () () 
          v616(R) = X64Lea32 : MR1 v606(R) v606(R)
gap () ([rax|R|t] = v603(-); [rbx|R|w32] = v616(-); [rsi|R|w64] = v615(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1072] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v613(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v613 #1 #166 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v600(-)
assign r15 to v865:0
assign 15 to v865:0
gap () (v608 = v613(-);) 
          ArchJmp [immediate:1071]
gap () (v608 = v612(-);) 
          ArchJmp [immediate:1070]
gap () () 
          v611(R) = X64Movl : MRI v608(R) [immediate:1069]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v611(R) [immediate:1067] [immediate:1068]
gap () () 
          [constant:610] = ArchNop
gap () ([rax|R|t] = v603(-); [rsi|R|w64] = v610(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1066] #-1 [rax|R|t] [rsi|R|w64]
gap (v609(-) = [rax|R|t];) (v598 = v609(-);) 
          ArchJmp [immediate:1065]
gap () (v598 = v608(-);) 
          ArchJmp [immediate:1064]
gap () () 
          v596(R) = X64Lea32 : MRI v606(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v606(R) v607 [immediate:1062] [immediate:1063]
blocking v864 pick register rbx
assign rbx to v864:1
gap () () 
          v605(R) = X64Lea32 : MR1 v596(R) v596(R)
assign 3 to v864:1
gap () () 
          X64MovqCompressTagged : MRI v603(R) [immediate:1061] v605(R)
v729:0 not intersect with v760:0, removed
gap () () 
          ArchJmp [immediate:1060]
v729:0 not intersect with v769:0, removed
gap () () 
          ArchJmp [immediate:1059]
v729:1 intersect with v769:0, adding
gap () () 
          ArchStoreWithWriteBarrier : MR1 v598(R) v599(R) v600(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1057] [immediate:1058]
gap () () 
          [constant:597] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v597(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1056] #-1 #165 v0(S) v1(S) v2(S) v3(S) v596(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1055]
gap () () 
          ArchJmp [immediate:1054]
assign r15 to v786:0
gap () (v606 = v596(-);) 
          ArchJmp [immediate:1053]
assign 15 to v786:0
gap () () 
          v589(R) = X64Movq : MR v80(R)
gap () () 
          [constant:593] = ArchNop
gap () () 
          v594(R) = X64Lea : MRI v589(R) [immediate:1052]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v594(R) [immediate:1050] [immediate:1051]
gap () () 
          ArchJmp [immediate:1049]
gap () ([rdx|R|w64] = v593(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1048] #-1 [rdx|R|w64]
gap (v592(-) = [rax|R|tp];) () 
          v590(R) = X64Lea : MRI v592(R) [immediate:1047]
gap () (v588 = v590(-);) 
          ArchJmp [immediate:1046]
gap () (v588 = v589(-);) 
          ArchJmp [immediate:1045]
gap () () 
          v569(R) = X64Lea : MRI v588(R) [immediate:1044]
gap () () 
          X64Movq : MR v80(R) v569(R)
gap () () 
          v587(R) = X64Lea : MRI v588(R) [immediate:1043]
gap () (v576 = v587(-);) 
          v576(1) = ArchNop v576
gap () () 
          X64MovqCompressTagged : MRI v576(R) [immediate:1042] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v576(R) [immediate:1041] v185(R)
gap () () 
          [constant:586] = ArchNop
assign rbx to v862:0
gap () () 
          X64MovqCompressTagged : MRI v576(R) [immediate:1040] v586(R)
assign 3 to v862:0
gap () () 
          X64MovqCompressTagged : MRI v576(R) [immediate:1038] [immediate:1039]
gap () () 
          X64Cmp32 : MRI && branch if equal v581(R) [immediate:1035] v530(R) [immediate:1036] [immediate:1037]
gap () () 
          [constant:582] = ArchNop
gap () () 
          [constant:585] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v581(R) [immediate:1034] v585(R) #164 v0(S) v1(-) v2(-) v3(S) v581(-) v576(-)
gap () () 
          ArchStoreWithWriteBarrier : MRI v581(R) [immediate:1033] v582(R)
assign rbx to v854:0
assign 3 to v854:0
gap () () 
          ArchStoreWithWriteBarrier : MRI v575(R) [immediate:1032] v576(R)
gap () () 
          ArchJmp [immediate:1031]
gap () () 
          ArchStoreWithWriteBarrier : MRI v575(R) [immediate:1030] v576(R)
gap () () 
          ArchJmp [immediate:1029]
gap () () 
          v524(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1028]
gap () (v573(R) = v574(-);) 
          v573(1) = X64Imul32 && deoptimize if overflow v573(R) #18 #163 v0(S) v1(-) v2(-) v3(S) v524(-) v2(-)
gap () (v566 = v573(-);) 
          v566(1) = ArchNop v566
gap () (v572(R) = v566(-);) 
          v572(1) = X64Add32 && branch if overflow v572(R) v566(R) [immediate:1024] [immediate:1025] [immediate:1026] [immediate:1027]
gap () (v571 = v572(-);) 
          v571(1) = ArchNop v571
blocking v859 pick register r14
assign r14 to v859:0
assign 14 to v859:0
gap () (v532 = v571(-);) 
          ArchJmp [immediate:1023]
gap () () 
          [constant:567] = ArchNop
gap () () 
          v570(R) = X64Lea : MRI v569(R) [immediate:1022]
gap () () 
          X64Movq : MR v80(R) v570(R)
gap () () 
          v568(R) = X64Lea : MRI v569(R) [immediate:1021]
gap () (v564 = v568(-);) 
          v564(1) = ArchNop v564
gap () () 
          X64MovqCompressTagged : MRI v564(R) [immediate:1020] v567(R)
gap () () 
          v565(R) = SSEInt32ToFloat64 v566
gap () () 
          X64Movsd : MRI v564(R) [immediate:1019] v565(R)
gap () (v532 = v564(-);) 
          ArchJmp [immediate:1018]
gap () () 
          X64Test32 && deoptimize if equal v524 #1 #162 v0(S) v1(-) v2(-) v3(S) v524(-) v2(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v524(R) [immediate:1015] v530(R) [immediate:1016] [immediate:1017]
gap () () 
          [constant:559] = ArchNop
gap () () 
          [constant:538] = ArchNop
gap () () 
          [constant:562] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v524(R) [immediate:1014] v562(R) #161 v0(S) v1(-) v2(-) v3(S) v524(-) v2(-)
gap () () 
          v561(R) = X64MovqDecompressTaggedPointer : MRI v524(R) [immediate:1013]
gap () () 
          v544(R) = X64Movl : MRI v561(R) [immediate:1012]
gap () () 
          v543(R) = X64Movl : MRI v561(R) [immediate:1011]
assign r14 to v858:1
gap () () 
          v542(R) = X64Movl : MRI v561(R) [immediate:1010]
assign 14 to v858:1
gap () () 
          v554(R) = X64MovqDecompressTaggedSigned : MRI v561(R) [immediate:1009]
gap () () 
          v555(R) = X64Movq : MR v80(R)
gap () () 
          v560(R) = X64Lea : MRI v555(R) [immediate:1008]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v560(R) [immediate:1006] [immediate:1007]
gap () () 
          ArchJmp [immediate:1005]
gap () ([rdx|R|w64] = v559(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1004] #-1 [rdx|R|w64]
gap (v558(-) = [rax|R|tp];) () 
          v556(R) = X64Lea : MRI v558(R) [immediate:1003]
gap () (v551 = v556(-);) 
          ArchJmp [immediate:1002]
gap () (v551 = v555(-);) 
          ArchJmp [immediate:1001]
gap () () 
          [constant:541] = ArchNop
assign r14 to v24:3
gap () () 
          [constant:547] = ArchNop
assign 14 to v24:3
gap () (v553(R) = v554(-);) 
          v553(1) = X64Sar32 v553(R) #1
gap () () 
          v552(R) = X64Lea : MRI v551(R) [immediate:1000]
gap () (v550(R) = v553(-);) 
          v550(1) = X64And32 v550(R) #1073740800
gap () () 
          X64Movq : MR v80(R) v552(R)
gap () () 
          v549(R) = X64Lea : MRI v551(R) [immediate:999]
gap () (v548(R) = v550(-);) 
          v548(1) = X64Or32 v548(R) #6
gap () (v535 = v549(-);) 
          v535(1) = ArchNop v535
gap () () 
          v546(R) = X64Lea32 : MR1 v548(R) v548(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:998] v547(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:997] v546(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:996] v544(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:995] v543(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:994] v542(R)
blocking v784 pick register rax
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:993] v541(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:992] v541(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:991] v532(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v524(R) [immediate:990] v538(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v524(R) [immediate:989] v535(R)
gap () () 
          ArchJmp [immediate:988]
gap () () 
          v531(R) = X64MovqDecompressTaggedPointer : MRI v524(R) [immediate:987]
gap () () 
          ArchStoreWithWriteBarrier : MRI v531(R) [immediate:986] v532(R)
gap () () 
          ArchJmp [immediate:985]
gap () () 
          v529(R) = X64Movl : MRI v524(R) [immediate:984]
gap () () 
          X64Cmp32 && branch if equal v530(R) v529 [immediate:982] [immediate:983]
gap () () 
          [constant:528] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v528(R) v529 #160 v0(S) v1(-) v2(-) v3(S) [immediate:981] v524(-)
gap () () 
          ArchJmp [immediate:980]
gap () () 
          ArchJmp [immediate:979]
gap () () 
          v527(R) = X64MovqDecompressTaggedPointer : MRI v524(R) [immediate:978]
gap () () 
          v526(R) = X64Movl : MRI v527(R) [immediate:977]
blocking v25 pick register rsi
gap () () 
          X64Test32 && deoptimize if not equal v526 #1 #159 v0(S) v1(-) v2(-) v3(S) [immediate:976] v524(-)
gap () () 
          X64Cmp32 && branch if signed greater than v526 [immediate:973] [immediate:974] [immediate:975]
gap () () 
          ArchJmp [immediate:972]
gap () () 
          [constant:496] = ArchNop
gap () () 
          v509(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:971]
gap () () 
          X64Test32 && deoptimize if equal v509 #1 #158 v0(S) v1(-) v2(-) v3(S) [immediate:970] v524(-)
gap () () 
          v525(R) = X64MovqDecompressTaggedPointer : MRI v509(R) [immediate:969]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v525(R) [immediate:967] #1068 #157 v0(S) v1(-) v2(-) v3(S) [immediate:968] v524(-)
gap () () 
          v523(R) = X64MovqDecompressTaggedPointer : MRI v509(R) [immediate:966]
blocking v43 pick register rdi
gap () () 
          X64Cmp && deoptimize if not equal v523(R) v496 #156 v0(S) v1(-) v2(-) v3(S) [immediate:965] v524(-)
gap () () 
          v510(R) = X64MovqDecompressTaggedPointer : MRI v509(R) [immediate:964]
gap () () 
          v518(R) = X64Movq : MR v80(R)
gap () () 
          v522(R) = X64Lea : MRI v518(R) [immediate:963]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v522(R) [immediate:961] [immediate:962]
gap () () 
          ArchJmp [immediate:960]
gap () ([rdx|R|w64] = v494(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:959] #-1 [rdx|R|w64]
gap (v521(-) = [rax|R|tp];) () 
          v519(R) = X64Lea : MRI v521(R) [immediate:958]
gap () (v517 = v519(-);) 
          ArchJmp [immediate:957]
blocking v28 pick register r8
gap () (v517 = v518(-);) 
          ArchJmp [immediate:956]
gap () () 
          [constant:483] = ArchNop
gap () () 
          [constant:482] = ArchNop
gap () () 
          v514(R) = X64Lea : MRI v517(R) [immediate:955]
gap () () 
          X64Movq : MR v80(R) v514(R)
gap () () 
          v516(R) = X64Lea : MRI v517(R) [immediate:954]
gap () (v512 = v516(-);) 
          v512(1) = ArchNop v512
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:953] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:951] [immediate:952]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:949] [immediate:950]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:947] [immediate:948]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:945] [immediate:946]
blocking v785 pick register r9
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:943] [immediate:944]
gap () () 
          v515(R) = X64Lea : MRI v514(R) [immediate:942]
gap () () 
          X64Movq : MR v80(R) v515(R)
gap () () 
          v513(R) = X64Lea : MRI v514(R) [immediate:941]
gap () (v511 = v513(-);) 
          v511(1) = ArchNop v511
gap () () 
          X64MovqCompressTagged : MRI v511(R) [immediate:940] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v511(R) [immediate:939] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v511(R) [immediate:938] v512(R)
gap () () 
          X64MovqCompressTagged : MRI v511(R) [immediate:936] [immediate:937]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:934] [immediate:935]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:932] [immediate:933]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:930] [immediate:931]
blocking v3 pick register r12
gap () ([rdx|R|t] = v480(-); [rcx|R|t] = v44(-); [rax|R|t] = v511(-); [rdi|R|w64] = v482(-); [rbx|R|t] = v483(-); [rsi|R|tp] = v510(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:924] #-1 #155 v0(S) v1(S) v2(S) v3(S) [immediate:925] v509(S) [immediate:926] [immediate:927] [immediate:928] [immediate:929] v510(S) [rdx|R|t] [rcx|R|t] [rax|R|t] [rdi|R|w64] [rbx|R|t] [rsi|R|tp]
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:922] [immediate:923]
gap () () 
          [constant:507] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v507(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:921] #-1 #154 v0(S) v1(S) v2(S) v3(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:920]
gap () () 
          ArchJmp [immediate:919]
gap () () 
          [constant:505] = ArchNop
gap () (v476 = v35(-);) 
          ArchJmp [immediate:918]
gap () () 
          v498(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:917]
gap () () 
          X64Test32 && deoptimize if equal v498 #1 #153 v0(S) v1(-) v2(-) v3(S) v476(-) v498(-)
gap () () 
          v504(R) = X64Movl : MRI v498(R) [immediate:916]
gap () () 
          X64Cmp32 && branch if equal v505(R) v504 [immediate:914] [immediate:915]
gap () () 
          [constant:503] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v503(R) v504 #152 v0(S) v1(-) v2(-) v3(S) v476(-) v498(-)
gap () () 
          ArchJmp [immediate:913]
blocking v24 pick register r8
gap () () 
          ArchJmp [immediate:912]
gap () () 
          v502(R) = X64MovqDecompressTaggedPointer : MRI v498(R) [immediate:911]
gap () () 
          v501(R) = X64Movl : MRI v502(R) [immediate:910]
assign rax to v857:0
assign 0 to v857:0
gap () () 
          X64Test32 && deoptimize if not equal v501 #1 #151 v0(S) v1(-) v2(-) v3(S) v476(-) v498(-)
gap () (v500(R) = v501(-);) 
          v500(1) = X64Sar32 v500(R) #1
gap () () 
          X64Cmp32 && branch if signed less than v476(R) v500 [immediate:908] [immediate:909]
gap () () 
          v478(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:907]
gap () () 
          X64Test32 && deoptimize if equal v478 #1 #150 v0(S) v1(-) v2(-) v3(S) v476(-) v498(-)
assign r8 to v855:0
assign 8 to v855:0
gap () () 
          v499(R) = X64MovqDecompressTaggedPointer : MRI v478(R) [immediate:906]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v499(R) [immediate:905] #1068 #149 v0(S) v1(-) v2(-) v3(S) v476(-) v498(-)
gap () () 
          v497(R) = X64MovqDecompressTaggedPointer : MRI v478(R) [immediate:904]
gap () () 
          X64Cmp && deoptimize if not equal v496(R) v497 #148 v0(S) v1(-) v2(-) v3(S) v476(-) v498(-)
gap () () 
          v479(R) = X64MovqDecompressTaggedPointer : MRI v478(R) [immediate:903]
gap () () 
          v490(R) = X64Movq : MR v80(R)
assign r15 to v786:2
assign 15 to v786:2
gap () () 
          v495(R) = X64Lea : MRI v490(R) [immediate:902]
assign r9 to v785:3
assign 9 to v785:3
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v495(R) [immediate:900] [immediate:901]
assign rax to v784:3
gap () () 
          ArchJmp [immediate:899]
assign 0 to v784:3
assign rcx to v783:2
gap () ([rdx|R|w64] = v494(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:898] #-1 [rdx|R|w64]
assign 1 to v783:2
assign rdi to v43:5
gap (v493(-) = [rax|R|tp];) () 
          v491(R) = X64Lea : MRI v493(R) [immediate:897]
assign 7 to v43:5
gap () (v489 = v491(-);) 
          ArchJmp [immediate:896]
assign rsi to v25:5
assign 6 to v25:5
gap () (v489 = v490(-);) 
          ArchJmp [immediate:895]
assign r11 to v36:7
assign 11 to v36:7
gap () () 
          v486(R) = X64Lea : MRI v489(R) [immediate:894]
assign rdx to v24:6
assign 2 to v24:6
gap () () 
          X64Movq : MR v80(R) v486(R)
assign r12 to v3:4
gap () () 
          v488(R) = X64Lea : MRI v489(R) [immediate:893]
assign 12 to v3:4
gap () (v484 = v488(-);) 
          v484(1) = ArchNop v484
assign r8 to v28:8
assign 8 to v28:8
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:892] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:890] [immediate:891]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:888] [immediate:889]
assign rbx to v853:0
assign 3 to v853:0
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:886] [immediate:887]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:884] [immediate:885]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:882] [immediate:883]
gap () () 
          v487(R) = X64Lea : MRI v486(R) [immediate:881]
gap () () 
          X64Movq : MR v80(R) v487(R)
gap () () 
          v485(R) = X64Lea : MRI v486(R) [immediate:880]
assign r14 to v848:0
assign 14 to v848:0
gap () (v481 = v485(-);) 
          v481(1) = ArchNop v481
gap () () 
          X64MovqCompressTagged : MRI v481(R) [immediate:879] v178(R)
assign r8 to v28:7
assign 8 to v28:7
gap () () 
          X64MovqCompressTagged : MRI v481(R) [immediate:878] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v481(R) [immediate:877] v484(R)
gap () () 
          X64MovqCompressTagged : MRI v481(R) [immediate:875] [immediate:876]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:873] [immediate:874]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:871] [immediate:872]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:869] [immediate:870]
gap () ([rdx|R|t] = v480(-); [rcx|R|t] = v44(-); [rax|R|t] = v481(-); [rdi|R|w64] = v482(-); [rbx|R|t] = v483(-); [rsi|R|tp] = v479(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:864] #-1 #147 v0(S) v1(S) v2(S) v3(S) v476(S) v478(S) [immediate:865] [immediate:866] [immediate:867] [immediate:868] v479(S) [rdx|R|t] [rcx|R|t] [rax|R|t] [rdi|R|w64] [rbx|R|t] [rsi|R|tp]
blocking v852 pick register r12
assign r12 to v852:0
assign 12 to v852:0
gap () (v475(R) = v476(-);) 
          v475(1) = X64Add32 && deoptimize if overflow v475(R) #1 #146 v0(S) v1(-) v2(-) v3(S) v476(-)
v3:0 not intersect with v49:2, removed
v3:0 not intersect with v749:0, removed
gap () (v473 = v475(-);) 
          v473(1) = ArchNop v473
v3:0 not intersect with v758:0, removed
v3:5 intersect with v24:1, adding
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:862] [immediate:863]
v3:0 not intersect with v771:0, removed
v3:0 not intersect with v49:3, removed
gap () () 
          [constant:474] = ArchNop
v3:5 intersect with v49:3, adding
v3:0 not intersect with v768:0, removed
v3:0 not intersect with v775:0, removed
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v474(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:861] #-1 #145 v0(S) v1(S) v2(S) v3(S) v473(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
assign r12 to v827:0
gap () () 
          ArchJmp [immediate:860]
assign 12 to v827:0
gap () () 
          ArchJmp [immediate:859]
gap () (v476 = v473(-);) 
          ArchJmp [immediate:858]
gap () () 
          ArchJmp [immediate:857]
gap () () 
          v410(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:856]
gap () () 
          v411(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:855]
gap () () 
          v465(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:854]
gap () () 
          X64Test32 && deoptimize if equal v465 #1 #144 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
blocking v851 pick register rcx
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v465(R) [immediate:853] v471(R) #143 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
assign rcx to v851:1
assign 1 to v851:1
gap () () 
          v470(R) = X64MovqDecompressTaggedPointer : MRI v465(R) [immediate:852]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v470(R) [immediate:851] v178(R) #142 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          v467(R) = X64MovqDecompressTaggedPointer : MRI v470(R) [immediate:850]
gap () () 
          v469(R) = X64MovqDecompressTaggedSigned : MRI v470(R) [immediate:849]
assign rcx to v849:0
gap () (v468(R) = v469(-);) 
          v468(1) = X64Sar32 v468(R) #1
assign 1 to v849:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v468 #0 #141 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          v412(R) = X64MovqDecompressTaggedSigned : MRI v467(R) [immediate:848]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v468 #1 #140 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
assign r14 to v847:0
gap () () 
          v413(R) = X64MovqDecompressTaggedSigned : MRI v467(R) [immediate:847]
assign 14 to v847:0
assign r14 to v764:0
assign 14 to v764:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v468 #2 #139 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          v414(R) = X64MovqDecompressTaggedSigned : MRI v467(R) [immediate:846]
assign rdi to v43:4
assign 7 to v43:4
gap () () 
          X64Test32 && deoptimize if equal v410 #1 #138 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          v466(R) = X64MovqDecompressTaggedPointer : MRI v410(R) [immediate:845]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v466(R) [immediate:844] #1068 #137 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          [constant:463] = ArchNop
assign rbx to v24:5
assign 3 to v24:5
gap () () 
          v464(R) = X64MovqDecompressTaggedPointer : MRI v410(R) [immediate:843]
assign rax to v784:2
assign 0 to v784:2
gap () () 
          X64Cmp && deoptimize if not equal v463(R) v464 #136 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
assign rsi to v25:4
assign 6 to v25:4
gap () () 
          v415(R) = X64MovqDecompressTaggedPointer : MRI v410(R) [immediate:842]
gap () () 
          v457(R) = X64Movq : MR v80(R)
gap () () 
          [constant:461] = ArchNop
gap () () 
          v462(R) = X64Lea : MRI v457(R) [immediate:841]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v462(R) [immediate:839] [immediate:840]
gap () () 
          ArchJmp [immediate:838]
assign rdx to v844:0
assign 2 to v844:0
gap () ([rdx|R|w64] = v461(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:837] #-1 [rdx|R|w64]
gap (v460(-) = [rax|R|tp];) () 
          v458(R) = X64Lea : MRI v460(R) [immediate:836]
gap () (v456 = v458(-);) 
          ArchJmp [immediate:835]
gap () (v456 = v457(-);) 
          ArchJmp [immediate:834]
gap () () 
          v453(R) = X64Lea : MRI v456(R) [immediate:833]
assign rcx to v846:0
gap () () 
          X64Movq : MR v80(R) v453(R)
assign 1 to v846:0
gap () () 
          v455(R) = X64Lea : MRI v456(R) [immediate:832]
assign rcx to v845:0
assign 1 to v845:0
gap () (v451 = v455(-);) 
          v451(1) = ArchNop v451
gap () () 
          X64MovqCompressTagged : MRI v451(R) [immediate:831] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v451(R) [immediate:830] v185(R)
gap () () 
          [constant:454] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v451(R) [immediate:829] v454(R)
gap () () 
          X64MovqCompressTagged : MRI v451(R) [immediate:827] [immediate:828]
assign rdx to v843:0
gap () () 
          v450(R) = X64Lea : MRI v453(R) [immediate:826]
assign 2 to v843:0
gap () () 
          X64Movq : MR v80(R) v450(R)
gap () () 
          v452(R) = X64Lea : MRI v453(R) [immediate:825]
gap () (v422 = v452(-);) 
          v422(1) = ArchNop v422
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:824] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:822] [immediate:823]
assign rcx to v839:0
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:820] [immediate:821]
assign 1 to v839:0
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:818] [immediate:819]
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:816] [immediate:817]
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:815] v451(R)
gap () () 
          v448(R) = X64Lea : MRI v450(R) [immediate:814]
gap () () 
          X64Movq : MR v80(R) v448(R)
assign rdx to v842:0
assign 2 to v842:0
gap () () 
          v449(R) = X64Lea : MRI v450(R) [immediate:813]
gap () (v418 = v449(-);) 
          v418(1) = ArchNop v418
assign rdx to v840:0
assign 2 to v840:0
gap () () 
          X64MovqCompressTagged : MRI v418(R) [immediate:812] v184(R)
assign r9 to v785:2
gap () () 
          X64MovqCompressTagged : MRI v418(R) [immediate:811] v185(R)
assign 9 to v785:2
gap () () 
          X64MovqCompressTagged : MRI v418(R) [immediate:810] v422(R)
gap () () 
          X64MovqCompressTagged : MRI v418(R) [immediate:808] [immediate:809]
gap () () 
          v446(R) = X64Lea : MRI v448(R) [immediate:807]
gap () () 
          X64Movq : MR v80(R) v446(R)
gap () () 
          v447(R) = X64Lea : MRI v448(R) [immediate:806]
gap () (v442 = v447(-);) 
          v442(1) = ArchNop v442
gap () () 
          X64MovqCompressTagged : MRI v442(R) [immediate:805] v190(R)
gap () () 
          X64MovqCompressTagged : MRI v442(R) [immediate:803] [immediate:804]
gap () () 
          X64Movsd : MRI v442(R) [immediate:802] v430(R)
gap () () 
          [constant:53] = ArchNop
gap () () 
          X64Movsd : MRI v442(R) [immediate:801] v53(R)
blocking v835 pick register r8
assign r8 to v835:0
gap () () 
          X64Movsd : MRI v442(R) [immediate:800] v53(R)
assign 8 to v835:0
gap () () 
          X64Movsd : MRI v442(R) [immediate:799] v53(R)
gap () () 
          v440(R) = X64Lea : MRI v446(R) [immediate:798]
gap () () 
          X64Movq : MR v80(R) v440(R)
gap () () 
          v445(R) = X64Lea : MRI v446(R) [immediate:797]
gap () (v441 = v445(-);) 
          v441(1) = ArchNop v441
gap () () 
          X64MovqCompressTagged : MRI v441(R) [immediate:796] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v441(R) [immediate:795] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v441(R) [immediate:794] v442(R)
gap () (v444(R) = v412(-);) 
          v444(1) = X64Sar32 v444(R) #1
gap () () 
          X64MovqCompressTagged : MRI v441(R) [immediate:792] [immediate:793]
gap () () 
          v443(R) = SSEInt32ToFloat64 v444
blocking v841 pick register rsi
gap () () 
          X64Movsd : MRI v442(R) [immediate:791] v443(R)
assign rsi to v841:0
assign 6 to v841:0
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:790] v441(R)
gap () () 
          v438(R) = X64Lea : MRI v440(R) [immediate:789]
gap () () 
          X64Movq : MR v80(R) v438(R)
assign rsi to v838:0
assign 6 to v838:0
gap () () 
          v439(R) = X64Lea : MRI v440(R) [immediate:788]
gap () (v434 = v439(-);) 
          v434(1) = ArchNop v434
gap () () 
          X64MovqCompressTagged : MRI v434(R) [immediate:787] v190(R)
gap () () 
          X64MovqCompressTagged : MRI v434(R) [immediate:785] [immediate:786]
gap () () 
          X64Movsd : MRI v434(R) [immediate:784] v53(R)
gap () () 
          X64Movsd : MRI v434(R) [immediate:783] v430(R)
gap () () 
          X64Movsd : MRI v434(R) [immediate:782] v53(R)
gap () () 
          X64Movsd : MRI v434(R) [immediate:781] v53(R)
gap () () 
          v432(R) = X64Lea : MRI v438(R) [immediate:780]
gap () () 
          X64Movq : MR v80(R) v432(R)
gap () () 
          v437(R) = X64Lea : MRI v438(R) [immediate:779]
gap () (v433 = v437(-);) 
          v433(1) = ArchNop v433
assign rsi to v826:1
assign 6 to v826:1
gap () () 
          X64MovqCompressTagged : MRI v433(R) [immediate:778] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v433(R) [immediate:777] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v433(R) [immediate:776] v434(R)
gap () (v436(R) = v413(-);) 
          v436(1) = X64Sar32 v436(R) #1
gap () () 
          X64MovqCompressTagged : MRI v433(R) [immediate:774] [immediate:775]
gap () () 
          v435(R) = SSEInt32ToFloat64 v436
gap () () 
          X64Movsd : MRI v434(R) [immediate:773] v435(R)
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:772] v433(R)
gap () () 
          v428(R) = X64Lea : MRI v432(R) [immediate:771]
gap () () 
          X64Movq : MR v80(R) v428(R)
assign r8 to v784:4
assign 8 to v784:4
gap () () 
          v431(R) = X64Lea : MRI v432(R) [immediate:770]
gap () (v424 = v431(-);) 
          v424(1) = ArchNop v424
gap () () 
          X64MovqCompressTagged : MRI v424(R) [immediate:769] v190(R)
gap () () 
          X64MovqCompressTagged : MRI v424(R) [immediate:767] [immediate:768]
gap () () 
          X64Movsd : MRI v424(R) [immediate:766] v53(R)
gap () () 
          X64Movsd : MRI v424(R) [immediate:765] v53(R)
assign r12 to v24:7
gap () () 
          X64Movsd : MRI v424(R) [immediate:764] v430(R)
assign 12 to v24:7
gap () () 
          X64Movsd : MRI v424(R) [immediate:763] v53(R)
gap () () 
          v429(R) = X64Lea : MRI v428(R) [immediate:762]
gap () () 
          X64Movq : MR v80(R) v429(R)
gap () () 
          v427(R) = X64Lea : MRI v428(R) [immediate:761]
gap () (v423 = v427(-);) 
          v423(1) = ArchNop v423
gap () () 
          X64MovqCompressTagged : MRI v423(R) [immediate:760] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v423(R) [immediate:759] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v423(R) [immediate:758] v424(R)
gap () (v426(R) = v414(-);) 
          v426(1) = X64Sar32 v426(R) #1
gap () () 
          X64MovqCompressTagged : MRI v423(R) [immediate:756] [immediate:757]
gap () () 
          v425(R) = SSEInt32ToFloat64 v426
gap () () 
          X64Movsd : MRI v424(R) [immediate:755] v425(R)
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:754] v423(R)
gap () () 
          v416(R) = X64MovqDecompressAnyTagged : MRI v415(R) [immediate:753]
blocking v43 pick register rdi
gap () () 
          X64Test32 && deoptimize if equal v416 #1 #135 v0(S) v1(-) v2(-) v3(S) v410(S) [immediate:752] v411(-) v412(-) v413(-) v414(-) v415(S) v418(-) v416(-)
gap () () 
          v421(R) = X64MovqDecompressTaggedPointer : MRI v416(R) [immediate:751]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v421(R) [immediate:749] #1068 #134 v0(S) v1(-) v2(-) v3(S) v410(S) [immediate:750] v411(-) v412(-) v413(-) v414(-) v415(S) v418(-) v416(-)
gap () () 
          [constant:405] = ArchNop
gap () () 
          v420(R) = X64MovqDecompressTaggedPointer : MRI v416(R) [immediate:748]
gap () () 
          [constant:419] = ArchNop
gap () () 
          [constant:417] = ArchNop
blocking v785 pick register r9
gap () () 
          X64Cmp && deoptimize if not equal v420(R) v405 #133 v0(S) v1(-) v2(-) v3(S) v410(S) [immediate:747] v411(-) v412(-) v413(-) v414(-) v415(S) v418(-) v416(-)
gap () () 
          X64Push v411(-)
gap () () 
          X64Push v418(-)
gap () () 
          X64Push v417(-)
gap () ([rdi|R|t] = v416(-); [rax|R|w64] = v176(-); [rsi|R|t] = v419(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:745] #-1 #132 v0(S) v1(S) v2(S) v3(S) v410(S) [immediate:746] v411(S) v412(S) v413(S) v414(S) v415(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap (v215(-) = [rax|R|t];) () 
          ArchStoreWithWriteBarrier : MRI v3(R) [immediate:744] v215(R)
gap () () 
          v214(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:743]
gap () () 
          v216(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:742]
gap () () 
          X64Test32 && deoptimize if equal v214 #1 #131 v0(S) v1(-) v2(-) v3(S) v214(-) v215(-) v216(-)
gap () () 
          v407(R) = X64MovqDecompressTaggedPointer : MRI v214(R) [immediate:741]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v407(R) [immediate:740] #1068 #130 v0(S) v1(-) v2(-) v3(S) v214(-) v215(-) v216(-)
blocking v764 pick register r14
gap () () 
          v406(R) = X64MovqDecompressTaggedPointer : MRI v214(R) [immediate:739]
gap () () 
          X64Cmp && deoptimize if not equal v405(R) v406 #129 v0(S) v1(-) v2(-) v3(S) v214(-) v215(-) v216(-)
gap () () 
          v217(R) = X64Movl : MRI v214(R) [immediate:738]
gap () () 
          v399(R) = X64Movq : MR v80(R)
gap () () 
          [constant:403] = ArchNop
gap () () 
          v404(R) = X64Lea : MRI v399(R) [immediate:737]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v404(R) [immediate:735] [immediate:736]
gap () () 
          ArchJmp [immediate:734]
gap () ([rdx|R|w64] = v403(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:733] #-1 [rdx|R|w64]
gap (v402(-) = [rax|R|tp];) () 
          v400(R) = X64Lea : MRI v402(R) [immediate:732]
gap () (v398 = v400(-);) 
          ArchJmp [immediate:731]
gap () (v398 = v399(-);) 
          ArchJmp [immediate:730]
gap () () 
          v396(R) = X64Lea : MRI v398(R) [immediate:729]
gap () () 
          X64Movq : MR v80(R) v396(R)
gap () () 
          v397(R) = X64Lea : MRI v398(R) [immediate:728]
blocking v784 pick register r8
gap () (v387 = v397(-);) 
          v387(1) = ArchNop v387
gap () () 
          X64MovqCompressTagged : MRI v387(R) [immediate:727] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v387(R) [immediate:726] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v387(R) [immediate:725] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v387(R) [immediate:723] [immediate:724]
gap () () 
          v394(R) = X64Lea : MRI v396(R) [immediate:722]
gap () () 
          X64Movq : MR v80(R) v394(R)
gap () () 
          v395(R) = X64Lea : MRI v396(R) [immediate:721]
gap () (v386 = v395(-);) 
          v386(1) = ArchNop v386
gap () () 
          X64MovqCompressTagged : MRI v386(R) [immediate:720] v39(R)
assign r9 to v785:6
assign 9 to v785:6
gap () () 
          X64MovqCompressTagged : MRI v386(R) [immediate:719] v185(R)
assign rax to v784:7
assign 0 to v784:7
gap () () 
          X64MovqCompressTagged : MRI v386(R) [immediate:718] v185(R)
assign rbx to v24:9
assign 3 to v24:9
gap () () 
          X64MovqCompressTagged : MRI v386(R) [immediate:716] [immediate:717]
assign rdi to v43:8
gap () () 
          v392(R) = X64Lea : MRI v394(R) [immediate:715]
assign 7 to v43:8
gap () () 
          X64Movq : MR v80(R) v392(R)
assign r14 to v764:3
assign 14 to v764:3
gap () () 
          v393(R) = X64Lea : MRI v394(R) [immediate:714]
assign r11 to v36:9
assign 11 to v36:9
gap () (v385 = v393(-);) 
          v385(1) = ArchNop v385
assign r15 to v786:4
assign 15 to v786:4
gap () () 
          X64MovqCompressTagged : MRI v385(R) [immediate:713] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v385(R) [immediate:712] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v385(R) [immediate:711] v185(R)
assign rdi to v43:7
assign 7 to v43:7
gap () () 
          X64MovqCompressTagged : MRI v385(R) [immediate:709] [immediate:710]
assign r9 to v785:5
gap () () 
          v390(R) = X64Lea : MRI v392(R) [immediate:708]
assign 9 to v785:5
gap () () 
          X64Movq : MR v80(R) v390(R)
assign r14 to v764:2
assign 14 to v764:2
gap () () 
          v391(R) = X64Lea : MRI v392(R) [immediate:707]
gap () (v384 = v391(-);) 
          v384(1) = ArchNop v384
gap () () 
          X64MovqCompressTagged : MRI v384(R) [immediate:706] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v384(R) [immediate:705] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v384(R) [immediate:704] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v384(R) [immediate:702] [immediate:703]
gap () () 
          v382(R) = X64Lea : MRI v390(R) [immediate:701]
gap () () 
          X64Movq : MR v80(R) v382(R)
assign r8 to v805:0
assign 8 to v805:0
gap () () 
          v389(R) = X64Lea : MRI v390(R) [immediate:700]
gap () (v380 = v389(-);) 
          v380(1) = ArchNop v380
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:699] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:697] [immediate:698]
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:696] v387(R)
assign r12 to v784:6
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:695] v386(R)
assign 12 to v784:6
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:694] v385(R)
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:693] v384(R)
gap () () 
          v383(R) = X64Lea : MRI v382(R) [immediate:692]
gap () () 
          X64Movq : MR v80(R) v383(R)
gap () () 
          v381(R) = X64Lea : MRI v382(R) [immediate:691]
assign rax to v822:0
gap () (v210 = v381(-);) 
          v210(1) = ArchNop v210
assign 0 to v822:0
gap () () 
          [constant:175] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v210(R) [immediate:690] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v210(R) [immediate:689] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v210(R) [immediate:688] v380(R)
gap () () 
          X64MovqCompressTagged : MRI v210(R) [immediate:686] [immediate:687]
assign rdx to v824:0
gap () (v220 = v20(-);) 
          ArchJmp [immediate:685]
assign 2 to v824:0
gap () () 
          X64Cmp32 && branch if unsigned less than v220 #4 [immediate:683] [immediate:684]
assign rdx to v823:0
assign 2 to v823:0
gap () () 
          v377(R) = X64MovqDecompressTaggedPointer : MRI v210(R) [immediate:682]
gap () () 
          v379(R) = X64MovqDecompressTaggedSigned : MRI v210(R) [immediate:681]
gap () (v378(R) = v379(-);) 
          v378(1) = X64Sar32 v378(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v220(R) v378 #128 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:679] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:680]
assign rax to v821:0
assign 0 to v821:0
gap () () 
          v323(R) = X64MovqDecompressAnyTagged : MR4I v377(R) v220(R) [immediate:678]
gap () () 
          X64Test32 && deoptimize if equal v215 #1 #127 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:676] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:677]
assign rdx to v817:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v215(R) [immediate:673] v184(R) #126 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:674] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:675]
assign 2 to v817:0
gap () () 
          v349(R) = X64MovqDecompressTaggedPointer : MRI v215(R) [immediate:672]
gap () () 
          v376(R) = X64MovqDecompressTaggedSigned : MRI v215(R) [immediate:671]
gap () (v375(R) = v376(-);) 
          v375(1) = X64Sar32 v375(R) #1
assign rax to v820:0
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v220(R) v375 #125 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:669] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:670]
assign 0 to v820:0
gap () () 
          v372(R) = X64MovqDecompressAnyTagged : MR4I v349(R) v220(R) [immediate:668]
assign rax to v818:0
assign 0 to v818:0
gap () () 
          X64Test32 && deoptimize if equal v372 #1 #124 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:666] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:667]
gap () () 
          X64Cmp32 : MRI && branch if equal v372(R) [immediate:663] v178(R) [immediate:664] [immediate:665]
gap () () 
          ArchJmp [immediate:662]
gap () () 
          [constant:374] = ArchNop
gap () () 
          X64Push v372(-)
assign rcx to v815:0
assign 1 to v815:0
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v374(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:661] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:660]
assign rsi to v819:0
assign 6 to v819:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v372(R) [immediate:656] v39(R) #123 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:657] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:658] [immediate:659]
assign rsi to v816:0
assign 6 to v816:0
gap () () 
          v356(R) = X64MovqDecompressTaggedPointer : MRI v372(R) [immediate:655]
gap () () 
          v371(R) = X64MovqDecompressTaggedSigned : MRI v372(R) [immediate:654]
gap () (v357(R) = v371(-);) 
          v357(1) = X64Sar32 v357(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v357 #0 #122 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:651] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:652] [immediate:653]
assign rax to v807:0
gap () () 
          v320(R) = X64Movsd : MRI v356(R) [immediate:650]
assign 0 to v807:0
gap () () 
          X64Test32 && deoptimize if equal v216 #1 #121 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:647] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:648] [immediate:649]
assign rdx to v813:0
assign 2 to v813:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v216(R) [immediate:643] v184(R) #120 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:644] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:645] [immediate:646]
gap () () 
          v341(R) = X64MovqDecompressTaggedPointer : MRI v216(R) [immediate:642]
gap () () 
          v370(R) = X64MovqDecompressTaggedSigned : MRI v216(R) [immediate:641]
gap () (v342(R) = v370(-);) 
          v342(1) = X64Sar32 v342(R) #1
assign rcx to v814:0
assign 1 to v814:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v342 #0 #119 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:638] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:639] [immediate:640]
assign rcx to v811:0
assign 1 to v811:0
gap () () 
          v367(R) = X64MovqDecompressAnyTagged : MRI v341(R) [immediate:637]
assign rdx to v806:0
assign 2 to v806:0
gap () () 
          X64Test32 && deoptimize if equal v367 #1 #118 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:634] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:635] [immediate:636]
gap () () 
          X64Cmp32 : MRI && branch if equal v367(R) [immediate:631] v178(R) [immediate:632] [immediate:633]
gap () () 
          ArchJmp [immediate:630]
gap () () 
          [constant:369] = ArchNop
gap () () 
          X64Push v367(-)
assign rsi to v812:0
assign 6 to v812:0
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v369(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:629] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:628]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v367(R) [immediate:624] v39(R) #117 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:625] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:626] [immediate:627]
gap () () 
          v364(R) = X64MovqDecompressTaggedPointer : MRI v367(R) [immediate:623]
gap () () 
          v366(R) = X64MovqDecompressTaggedSigned : MRI v367(R) [immediate:622]
gap () (v365(R) = v366(-);) 
          v365(1) = X64Sar32 v365(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v365 #0 #116 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:619] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:620] [immediate:621]
gap () () 
          v319(R) = X64Movsd : MRI v364(R) [immediate:618]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v357 #1 #115 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:615] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:616] [immediate:617]
gap () () 
          v322(R) = X64Movsd : MRI v356(R) [immediate:614]
assign rax to v810:0
assign 0 to v810:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v342 #1 #114 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:611] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:612] [immediate:613]
gap () () 
          v361(R) = X64MovqDecompressAnyTagged : MRI v341(R) [immediate:610]
gap () () 
          X64Test32 && deoptimize if equal v361 #1 #113 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:607] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:608] [immediate:609]
gap () () 
          X64Cmp32 : MRI && branch if equal v361(R) [immediate:604] v178(R) [immediate:605] [immediate:606]
gap () () 
          ArchJmp [immediate:603]
gap () () 
          [constant:363] = ArchNop
gap () () 
          X64Push v361(-)
assign rcx to v24:10
gap () () 
          X64Push v39(-)
assign 1 to v24:10
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v363(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:602] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:601]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v361(R) [immediate:597] v39(R) #112 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:598] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:599] [immediate:600]
gap () () 
          v358(R) = X64MovqDecompressTaggedPointer : MRI v361(R) [immediate:596]
gap () () 
          v360(R) = X64MovqDecompressTaggedSigned : MRI v361(R) [immediate:595]
gap () (v359(R) = v360(-);) 
          v359(1) = X64Sar32 v359(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v359 #0 #111 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:592] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:593] [immediate:594]
gap () () 
          v321(R) = X64Movsd : MRI v358(R) [immediate:591]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v357 #2 #110 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:588] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:589] [immediate:590]
gap () () 
          v318(R) = X64Movsd : MRI v356(R) [immediate:587]
blocking v43 pick register rdi
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v342 #2 #109 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:584] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:585] [immediate:586]
gap () () 
          v353(R) = X64MovqDecompressAnyTagged : MRI v341(R) [immediate:583]
gap () () 
          X64Test32 && deoptimize if equal v353 #1 #108 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:580] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:581] [immediate:582]
gap () () 
          X64Cmp32 : MRI && branch if equal v353(R) [immediate:577] v178(R) [immediate:578] [immediate:579]
gap () () 
          ArchJmp [immediate:576]
gap () () 
          [constant:355] = ArchNop
gap () () 
          X64Push v353(-)
gap () () 
          X64Push v39(-)
blocking v805 pick register r8
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v355(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:575] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:574]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v353(R) [immediate:570] v39(R) #107 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:571] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:572] [immediate:573]
gap () () 
          v350(R) = X64MovqDecompressTaggedPointer : MRI v353(R) [immediate:569]
gap () () 
          v352(R) = X64MovqDecompressTaggedSigned : MRI v353(R) [immediate:568]
gap () (v351(R) = v352(-);) 
          v351(1) = X64Sar32 v351(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v351 #0 #106 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:565] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:566] [immediate:567]
gap () () 
          v317(R) = X64Movsd : MRI v350(R) [immediate:564]
gap () () 
          v346(R) = X64MovqDecompressAnyTagged : MR4I v349(R) v220(R) [immediate:563]
gap () () 
          X64Test32 && deoptimize if equal v346 #1 #105 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:560] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:561] [immediate:562]
gap () () 
          X64Cmp32 : MRI && branch if equal v346(R) [immediate:557] v178(R) [immediate:558] [immediate:559]
gap () () 
          ArchJmp [immediate:556]
gap () () 
          [constant:348] = ArchNop
gap () () 
          X64Push v346(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v348(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:555] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:554]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v346(R) [immediate:550] v39(R) #104 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:551] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:552] [immediate:553]
gap () () 
          v343(R) = X64MovqDecompressTaggedPointer : MRI v346(R) [immediate:549]
blocking v764 pick register r14
gap () () 
          v345(R) = X64MovqDecompressTaggedSigned : MRI v346(R) [immediate:548]
gap () (v344(R) = v345(-);) 
          v344(1) = X64Sar32 v344(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v344 #3 #103 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:545] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:546] [immediate:547]
gap () () 
          v314(R) = X64Movsd : MRI v343(R) [immediate:544]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v342 #3 #102 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:541] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:542] [immediate:543]
gap () () 
          v338(R) = X64MovqDecompressAnyTagged : MRI v341(R) [immediate:540]
gap () () 
          X64Test32 && deoptimize if equal v338 #1 #101 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:537] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:538] [immediate:539]
assign rax to v808:0
gap () () 
          X64Cmp32 : MRI && branch if equal v338(R) [immediate:534] v178(R) [immediate:535] [immediate:536]
assign 0 to v808:0
gap () () 
          ArchJmp [immediate:533]
gap () () 
          [constant:340] = ArchNop
gap () () 
          X64Push v338(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v340(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:532] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:531]
assign rdx to v806:2
assign 2 to v806:2
assign r12 to v784:9
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v338(R) [immediate:527] v39(R) #100 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:528] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:529] [immediate:530]
assign 12 to v784:9
gap () () 
          v335(R) = X64MovqDecompressTaggedPointer : MRI v338(R) [immediate:526]
assign r8 to v805:3
assign 8 to v805:3
gap () () 
          v337(R) = X64MovqDecompressTaggedSigned : MRI v338(R) [immediate:525]
assign r14 to v764:6
assign 14 to v764:6
gap () (v336(R) = v337(-);) 
          v336(1) = X64Sar32 v336(R) #1
assign r9 to v785:8
assign 9 to v785:8
assign rdi to v43:11
assign 7 to v43:11
assign r15 to v786:6
assign 15 to v786:6
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v336 #0 #99 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:522] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:523] [immediate:524]
assign r11 to v36:11
gap () () 
          v313(R) = X64Movsd : MRI v335(R) [immediate:521]
assign 11 to v36:11
assign rbx to v24:12
assign 3 to v24:12
gap () () 
          X64Test32 && deoptimize if equal v323 #1 #98 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:518] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:519] [immediate:520]
assign rax to v789:0
assign 0 to v789:0
gap () () 
          X64Cmp32 : MRI && branch if equal v323(R) [immediate:515] v178(R) [immediate:516] [immediate:517]
gap () () 
          ArchJmp [immediate:514]
assign r8 to v805:2
gap () () 
          [constant:334] = ArchNop
assign 8 to v805:2
gap () () 
          X64Push v323(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v334(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:513] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:512]
assign rcx to v787:0
assign 1 to v787:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v323(R) [immediate:508] v39(R) #97 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:509] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:510] [immediate:511]
gap () () 
          v325(R) = X64MovqDecompressTaggedPointer : MRI v323(R) [immediate:507]
gap () () 
          v332(R) = X64MovqDecompressTaggedSigned : MRI v323(R) [immediate:506]
gap () () 
          v330(R) = X64MovqDecompressTaggedSigned : MRI v325(R) [immediate:505]
gap () (v324(R) = v332(-);) 
          v324(1) = X64Sar32 v324(R) #1
assign rdx to v804:0
assign 2 to v804:0
gap () () 
          v331(R) = X64Lea32 : MRI v324(R) #1
assign r14 to v764:5
gap () () 
          X64Cmp32 && branch if unsigned greater than v331 #0 [immediate:503] [immediate:504]
assign 14 to v764:5
gap () (v329(R) = v330(-);) 
          v329(1) = X64Sar32 v329(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v329 #0 [immediate:501] [immediate:502]
gap () () 
          [constant:328] = ArchNop
gap () ([rax|R|t] = v323(-); [rbx|R|w64] = v327(-); [rsi|R|w64] = v328(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:500] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v326(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v326 #1 #96 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:497] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:498] [immediate:499]
gap () (v306 = v326(-);) 
          ArchJmp [immediate:496]
gap () (v306 = v325(-);) 
          ArchJmp [immediate:495]
gap () () 
          X64Cmp32 && branch if unsigned greater than v324 #0 [immediate:493] [immediate:494]
gap () () 
          X64MovqCompressTagged : MRI v323(R) [immediate:491] [immediate:492]
gap () () 
          ArchJmp [immediate:490]
gap () () 
          ArchJmp [immediate:489]
gap () () 
          v315(R) = AVXFloat64Mul v321(R) v322
assign rsi to v788:1
assign 6 to v788:1
gap () () 
          v316(R) = AVXFloat64Mul v319(R) v320
gap () () 
          v311(R) = AVXFloat64Mul v317(R) v318
gap () () 
          v312(R) = AVXFloat64Add v315(R) v316
gap () () 
          v309(R) = AVXFloat64Mul v313(R) v314
gap () () 
          v310(R) = AVXFloat64Add v311(R) v312
gap () () 
          v308(R) = AVXFloat64Add v309(R) v310
gap () () 
          X64Movsd : MRI v306(R) [immediate:488] v308(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:486] [immediate:487]
gap () () 
          [constant:305] = ArchNop
assign r8 to v24:13
assign 8 to v24:13
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v305(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:484] #-1 #95 v0(S) v1(S) v2(S) v3(S) v214(S) [immediate:485] v215(S) v216(S) v217(S) v210(S) v220(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:483]
gap () () 
          ArchJmp [immediate:482]
gap () (v245 = v35(-);) 
          ArchJmp [immediate:481]
gap () () 
          X64Cmp32 && branch if unsigned less than v245 #4 [immediate:479] [immediate:480]
gap () () 
          v301(R) = X64MovqDecompressTaggedPointer : MRI v210(R) [immediate:478]
gap () () 
          v303(R) = X64MovqDecompressTaggedSigned : MRI v210(R) [immediate:477]
gap () (v302(R) = v303(-);) 
          v302(1) = X64Sar32 v302(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v220(R) v302 #94 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:475] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:476]
gap () () 
          v242(R) = X64MovqDecompressAnyTagged : MR4I v301(R) v220(R) [immediate:474]
gap () () 
          v272(R) = X64MovqDecompressTaggedPointer : MRI v215(R) [immediate:473]
gap () () 
          v300(R) = X64MovqDecompressTaggedSigned : MRI v215(R) [immediate:472]
gap () (v299(R) = v300(-);) 
          v299(1) = X64Sar32 v299(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v220(R) v299 #93 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:470] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:471]
gap () () 
          v296(R) = X64MovqDecompressAnyTagged : MR4I v272(R) v220(R) [immediate:469]
gap () () 
          X64Test32 && deoptimize if equal v296 #1 #92 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:467] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:468]
gap () () 
          X64Cmp32 : MRI && branch if equal v296(R) [immediate:464] v178(R) [immediate:465] [immediate:466]
gap () () 
          ArchJmp [immediate:463]
gap () () 
          [constant:298] = ArchNop
gap () () 
          X64Push v296(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v298(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:462] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:461]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v296(R) [immediate:458] v39(R) #91 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:459] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:460]
gap () () 
          v280(R) = X64MovqDecompressTaggedPointer : MRI v296(R) [immediate:457]
gap () () 
          v295(R) = X64MovqDecompressTaggedSigned : MRI v296(R) [immediate:456]
gap () (v281(R) = v295(-);) 
          v281(1) = X64Sar32 v281(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v281 #0 #90 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:454] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:455]
blocking v764 pick register r14
gap () () 
          v239(R) = X64Movsd : MRI v280(R) [immediate:453]
gap () () 
          v264(R) = X64MovqDecompressTaggedPointer : MRI v216(R) [immediate:452]
gap () () 
          v294(R) = X64MovqDecompressTaggedSigned : MRI v216(R) [immediate:451]
gap () (v265(R) = v294(-);) 
          v265(1) = X64Sar32 v265(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v265 #0 #89 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:449] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:450]
gap () () 
          v291(R) = X64MovqDecompressAnyTagged : MRI v264(R) [immediate:448]
gap () () 
          X64Test32 && deoptimize if equal v291 #1 #88 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:446] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:447]
gap () () 
          X64Cmp32 : MRI && branch if equal v291(R) [immediate:443] v178(R) [immediate:444] [immediate:445]
gap () () 
          ArchJmp [immediate:442]
gap () () 
          [constant:293] = ArchNop
gap () () 
          X64Push v291(-)
gap () () 
          X64Push v39(-)
assign r14 to v764:9
assign 14 to v764:9
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v293(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:441] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
assign rcx to v787:2
assign 1 to v787:2
gap () () 
          ArchJmp [immediate:440]
assign rbx to v24:15
assign 3 to v24:15
assign r11 to v36:13
assign 11 to v36:13
assign r15 to v786:8
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v291(R) [immediate:437] v39(R) #87 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:438] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:439]
assign 15 to v786:8
gap () () 
          v288(R) = X64MovqDecompressTaggedPointer : MRI v291(R) [immediate:436]
assign rdi to v43:13
assign 7 to v43:13
gap () () 
          v290(R) = X64MovqDecompressTaggedSigned : MRI v291(R) [immediate:435]
assign r9 to v785:10
assign 9 to v785:10
gap () (v289(R) = v290(-);) 
          v289(1) = X64Sar32 v289(R) #1
assign r12 to v784:11
assign 12 to v784:11
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v245(R) v289 #86 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:433] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:434]
gap () () 
          v238(R) = X64Movsd : MR8I v288(R) v245(R) [immediate:432]
assign r12 to v3:3
assign 12 to v3:3
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v281 #1 #85 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:430] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:431]
gap () () 
          v241(R) = X64Movsd : MRI v280(R) [immediate:429]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v265 #1 #84 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:427] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:428]
assign r8 to v49:4
assign 8 to v49:4
gap () () 
          v285(R) = X64MovqDecompressAnyTagged : MRI v264(R) [immediate:426]
gap () () 
          X64Test32 && deoptimize if equal v285 #1 #83 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:424] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:425]
gap () () 
          X64Cmp32 : MRI && branch if equal v285(R) [immediate:421] v178(R) [immediate:422] [immediate:423]
gap () () 
          ArchJmp [immediate:420]
assign r9 to v775:0
gap () () 
          [constant:287] = ArchNop
assign 9 to v775:0
gap () () 
          X64Push v285(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v287(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:419] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:418]
assign r15 to v771:0
assign 15 to v771:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v285(R) [immediate:415] v39(R) #82 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:416] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:417]
gap () () 
          v282(R) = X64MovqDecompressTaggedPointer : MRI v285(R) [immediate:414]
gap () () 
          v284(R) = X64MovqDecompressTaggedSigned : MRI v285(R) [immediate:413]
gap () (v283(R) = v284(-);) 
          v283(1) = X64Sar32 v283(R) #1
assign rax to v781:0
assign 0 to v781:0
assign rax to v779:0
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v245(R) v283 #81 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:411] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:412]
assign 0 to v779:0
gap () () 
          v240(R) = X64Movsd : MR8I v282(R) v245(R) [immediate:410]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v281 #2 #80 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:408] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:409]
gap () () 
          v237(R) = X64Movsd : MRI v280(R) [immediate:407]
assign rdx to v780:0
assign 2 to v780:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v265 #2 #79 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:405] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:406]
gap () () 
          v277(R) = X64MovqDecompressAnyTagged : MRI v264(R) [immediate:404]
assign rcx to v729:2
gap () () 
          X64Test32 && deoptimize if equal v277 #1 #78 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:402] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:403]
assign 1 to v729:2
gap () () 
          X64Cmp32 : MRI && branch if equal v277(R) [immediate:399] v178(R) [immediate:400] [immediate:401]
gap () () 
          ArchJmp [immediate:398]
gap () () 
          [constant:279] = ArchNop
gap () () 
          X64Push v277(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v279(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:397] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:396]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v277(R) [immediate:393] v39(R) #77 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:394] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:395]
gap () () 
          v274(R) = X64MovqDecompressTaggedPointer : MRI v277(R) [immediate:392]
gap () () 
          v276(R) = X64MovqDecompressTaggedSigned : MRI v277(R) [immediate:391]
gap () (v275(R) = v276(-);) 
          v275(1) = X64Sar32 v275(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v245(R) v275 #76 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:389] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:390]
gap () () 
          v236(R) = X64Movsd : MR8I v274(R) v245(R) [immediate:388]
assign r9 to v778:0
assign 9 to v778:0
gap () () 
          v269(R) = X64MovqDecompressAnyTagged : MR4I v272(R) v220(R) [immediate:387]
gap () () 
          X64Test32 && deoptimize if equal v269 #1 #75 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:385] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:386]
gap () () 
          X64Cmp32 : MRI && branch if equal v269(R) [immediate:382] v178(R) [immediate:383] [immediate:384]
gap () () 
          ArchJmp [immediate:381]
gap () () 
          [constant:271] = ArchNop
gap () () 
          X64Push v269(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v271(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:380] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
assign r9 to v24:16
gap () () 
          ArchJmp [immediate:379]
assign 9 to v24:16
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v269(R) [immediate:376] v39(R) #74 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:377] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:378]
gap () () 
          v266(R) = X64MovqDecompressTaggedPointer : MRI v269(R) [immediate:375]
gap () () 
          v268(R) = X64MovqDecompressTaggedSigned : MRI v269(R) [immediate:374]
gap () (v267(R) = v268(-);) 
          v267(1) = X64Sar32 v267(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v267 #3 #73 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:372] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:373]
gap () () 
          v233(R) = X64Movsd : MRI v266(R) [immediate:371]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v265 #3 #72 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:369] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:370]
blocking v729 pick register rcx
gap () () 
          v261(R) = X64MovqDecompressAnyTagged : MRI v264(R) [immediate:368]
gap () () 
          X64Test32 && deoptimize if equal v261 #1 #71 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:366] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:367]
gap () () 
          X64Cmp32 : MRI && branch if equal v261(R) [immediate:363] v178(R) [immediate:364] [immediate:365]
gap () () 
          ArchJmp [immediate:362]
gap () () 
          [constant:263] = ArchNop
gap () () 
          X64Push v261(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v263(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:361] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:360]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v261(R) [immediate:357] v39(R) #70 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:358] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:359]
gap () () 
          v258(R) = X64MovqDecompressTaggedPointer : MRI v261(R) [immediate:356]
gap () () 
          v260(R) = X64MovqDecompressTaggedSigned : MRI v261(R) [immediate:355]
blocking v49 pick register r8
gap () (v259(R) = v260(-);) 
          v259(1) = X64Sar32 v259(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v245(R) v259 #69 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:353] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:354]
gap () () 
          v232(R) = X64Movsd : MR8I v258(R) v245(R) [immediate:352]
gap () () 
          X64Test32 && deoptimize if equal v242 #1 #68 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:350] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:351]
gap () () 
          X64Cmp32 : MRI && branch if equal v242(R) [immediate:347] v178(R) [immediate:348] [immediate:349]
gap () () 
          ArchJmp [immediate:346]
gap () () 
          [constant:257] = ArchNop
gap () () 
          X64Push v242(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v257(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:345] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:344]
blocking v3 pick register r12
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v242(R) [immediate:341] v39(R) #67 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:342] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:343]
gap () () 
          v247(R) = X64MovqDecompressTaggedPointer : MRI v242(R) [immediate:340]
gap () () 
          v255(R) = X64MovqDecompressTaggedSigned : MRI v242(R) [immediate:339]
gap () (v246(R) = v255(-);) 
          v246(1) = X64Sar32 v246(R) #1
gap () () 
          v254(R) = X64MovqDecompressTaggedSigned : MRI v247(R) [immediate:338]
gap () (v252(R) = v254(-);) 
          v252(1) = X64Sar32 v252(R) #1
gap () () 
          v253(R) = X64Lea32 : MRI v246(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v245(R) v253 #66 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:336] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:337]
gap () () 
          X64Cmp32 && branch if unsigned less than v245(R) v252 [immediate:334] [immediate:335]
gap () () 
          [constant:250] = ArchNop
gap () () 
          v251(R) = X64Lea32 : MR1 v245(R) v245(R)
gap () ([rax|R|t] = v242(-); [rbx|R|w32] = v251(-); [rsi|R|w64] = v250(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:333] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v248(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v248 #1 #65 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:331] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:332]
gap () (v224 = v248(-);) 
          ArchJmp [immediate:330]
assign rax to v776:0
assign 0 to v776:0
gap () (v224 = v247(-);) 
          ArchJmp [immediate:329]
gap () () 
          v222(R) = X64Lea32 : MRI v245(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v245(R) v246 [immediate:327] [immediate:328]
gap () () 
          v244(R) = X64Lea32 : MR1 v222(R) v222(R)
gap () () 
          X64MovqCompressTagged : MRI v242(R) [immediate:326] v244(R)
gap () () 
          ArchJmp [immediate:325]
gap () () 
          ArchJmp [immediate:324]
gap () () 
          v234(R) = AVXFloat64Mul v240(R) v241
assign rcx to v729:5
assign 1 to v729:5
gap () () 
          v235(R) = AVXFloat64Mul v238(R) v239
assign r15 to v771:2
gap () () 
          v230(R) = AVXFloat64Mul v236(R) v237
assign 15 to v771:2
gap () () 
          v231(R) = AVXFloat64Add v234(R) v235
assign r8 to v49:7
assign 8 to v49:7
gap () () 
          v228(R) = AVXFloat64Mul v232(R) v233
assign r12 to v3:8
assign 12 to v3:8
gap () () 
          v229(R) = AVXFloat64Add v230(R) v231
assign rdi to v43:15
assign 7 to v43:15
gap () () 
          v227(R) = AVXFloat64Add v228(R) v229
assign r11 to v36:15
assign 11 to v36:15
gap () () 
          X64Movsd : MR8I v224(R) v245(R) [immediate:323] v227(R)
assign rbx to v24:18
assign 3 to v24:18
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:321] [immediate:322]
gap () () 
          [constant:223] = ArchNop
assign r14 to v764:11
assign 14 to v764:11
assign r9 to v772:0
assign 9 to v772:0
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v223(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:319] #-1 #64 v0(S) v1(S) v2(S) v3(S) v214(S) [immediate:320] v215(S) v216(S) v217(S) v210(S) v220(S) v222(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:318]
gap () () 
          ArchJmp [immediate:317]
gap () (v245 = v222(-);) 
          ArchJmp [immediate:316]
gap () () 
          v218(R) = X64Lea32 : MRI v220(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:314] [immediate:315]
assign rax to v774:0
gap () () 
          [constant:219] = ArchNop
assign 0 to v774:0
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v219(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:312] #-1 #63 v0(S) v1(S) v2(S) v3(S) v214(S) [immediate:313] v215(S) v216(S) v217(S) v210(S) v218(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:311]
gap () () 
          ArchJmp [immediate:310]
gap () (v220 = v218(-);) 
          ArchJmp [immediate:309]
gap () () 
          [constant:52] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v3(R) [immediate:308] v210(R)
gap () (v97 = v20(-);) 
          ArchJmp [immediate:307]
gap () () 
          X64Cmp32 && branch if unsigned less than v97 #9 [immediate:305] [immediate:306]
gap () () 
          v207(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:304]
gap () () 
          X64Test32 && deoptimize if equal v207 #1 #62 v0(S) v1(-) v2(-) v3(S) v97(-) [immediate:303]
gap () () 
          v209(R) = X64Movl : MRI v207(R) [immediate:302]
gap () () 
          X64Cmp32 && branch if equal v209(R) v52 [immediate:300] [immediate:301]
gap () () 
          [constant:208] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v208(R) v209 #61 v0(S) v1(-) v2(-) v3(S) v97(-) [immediate:299]
gap () () 
          ArchJmp [immediate:298]
gap () () 
          ArchJmp [immediate:297]
gap () () 
          v203(R) = X64MovqDecompressTaggedPointer : MRI v207(R) [immediate:296]
gap () () 
          v206(R) = X64MovqDecompressTaggedSigned : MRI v207(R) [immediate:295]
gap () (v205(R) = v206(-);) 
          v205(1) = X64Sar32 v205(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v97(R) v205 #60 v0(S) v1(-) v2(-) v3(S) v97(-) [immediate:294]
gap () () 
          v103(R) = X64MovqDecompressAnyTagged : MR4I v203(R) v97(R) [immediate:293]
gap () () 
          v107(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:292]
gap () () 
          v108(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:291]
gap () () 
          [constant:202] = ArchNop
gap () ([rdx|R|t] = v103(-); [rcx|R|t] = v44(-); [rax|R|w64] = v202(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:290] #-1 #59 v0(S) v1(S) v2(S) v3(S) v97(S) v103(S) v107(S) v108(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v109(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v107 #1 #58 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(-) v108(-) v109(-)
gap () () 
          v201(R) = X64MovqDecompressTaggedPointer : MRI v107(R) [immediate:289]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v201(R) [immediate:288] #1068 #57 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(-) v108(-) v109(-)
gap () () 
          [constant:199] = ArchNop
gap () () 
          v200(R) = X64MovqDecompressTaggedPointer : MRI v107(R) [immediate:287]
gap () () 
          X64Cmp && deoptimize if not equal v199(R) v200 #56 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(-) v108(-) v109(-)
gap () () 
          v110(R) = X64Movl : MRI v107(R) [immediate:286]
gap () () 
          v193(R) = X64Movq : MR v80(R)
gap () () 
          v198(R) = X64Lea : MRI v193(R) [immediate:285]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v198(R) [immediate:283] [immediate:284]
gap () () 
          ArchJmp [immediate:282]
gap () ([rdx|R|w64] = v197(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:281] #-1 [rdx|R|w64]
gap (v196(-) = [rax|R|tp];) () 
          v194(R) = X64Lea : MRI v196(R) [immediate:280]
gap () (v192 = v194(-);) 
          ArchJmp [immediate:279]
gap () (v192 = v193(-);) 
          ArchJmp [immediate:278]
gap () () 
          v187(R) = X64Lea : MRI v192(R) [immediate:277]
gap () () 
          X64Movq : MR v80(R) v187(R)
gap () () 
          v191(R) = X64Lea : MRI v192(R) [immediate:276]
assign rax to v773:0
assign 0 to v773:0
gap () (v156 = v191(-);) 
          v156(1) = ArchNop v156
gap () () 
          X64MovqCompressTagged : MRI v156(R) [immediate:275] v190(R)
gap () () 
          X64MovqCompressTagged : MRI v156(R) [immediate:273] [immediate:274]
gap () () 
          X64Movsd : MRI v156(R) [immediate:272] v189(R)
gap () () 
          X64Movsd : MRI v156(R) [immediate:271] v189(R)
gap () () 
          X64Movsd : MRI v156(R) [immediate:270] v189(R)
gap () () 
          X64Movsd : MRI v156(R) [immediate:269] v189(R)
assign r14 to v764:13
assign 14 to v764:13
gap () () 
          v188(R) = X64Lea : MRI v187(R) [immediate:268]
assign rbx to v24:20
gap () () 
          X64Movq : MR v80(R) v188(R)
assign 3 to v24:20
gap () () 
          v186(R) = X64Lea : MRI v187(R) [immediate:267]
assign r11 to v36:17
assign 11 to v36:17
gap () (v104 = v186(-);) 
          v104(1) = ArchNop v104
assign rdi to v43:17
assign 7 to v43:17
gap () () 
          X64MovqCompressTagged : MRI v104(R) [immediate:266] v39(R)
assign r12 to v3:10
assign 12 to v3:10
gap () () 
          X64MovqCompressTagged : MRI v104(R) [immediate:265] v185(R)
assign r8 to v49:9
assign 8 to v49:9
gap () () 
          X64MovqCompressTagged : MRI v104(R) [immediate:264] v156(R)
assign r15 to v771:4
assign 15 to v771:4
gap () () 
          X64MovqCompressTagged : MRI v104(R) [immediate:262] [immediate:263]
assign rcx to v729:7
assign 1 to v729:7
gap () () 
          X64Test32 && deoptimize if equal v108 #1 #55 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:259] v108(-) v109(-) v110(S) v104(-) [immediate:260] [immediate:261]
assign r9 to v762:0
assign 9 to v762:0
assign r15 to v770:0
assign 15 to v770:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v108(R) [immediate:255] v184(R) #54 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:256] v108(-) v109(-) v110(S) v104(-) [immediate:257] [immediate:258]
assign rcx to v729:4
assign 1 to v729:4
gap () () 
          v181(R) = X64MovqDecompressTaggedPointer : MRI v108(R) [immediate:254]
gap () () 
          v183(R) = X64MovqDecompressTaggedSigned : MRI v108(R) [immediate:253]
gap () (v182(R) = v183(-);) 
          v182(1) = X64Sar32 v182(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v182 #0 #53 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:250] v108(-) v109(-) v110(S) v104(-) [immediate:251] [immediate:252]
assign r15 to v769:0
assign 15 to v769:0
gap () () 
          v180(R) = X64MovqDecompressAnyTagged : MRI v181(R) [immediate:249]
gap () () 
          X64Test32 && deoptimize if equal v180 #1 #52 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:246] v108(-) v109(-) v110(S) v104(-) [immediate:247] [immediate:248]
assign r15 to v768:0
assign 15 to v768:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v180(R) [immediate:242] v39(R) #51 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:243] v108(-) v109(-) v110(S) v104(-) [immediate:244] [immediate:245]
assign r12 to v3:7
assign 12 to v3:7
gap () () 
          v171(R) = X64MovqDecompressTaggedPointer : MRI v180(R) [immediate:241]
gap () () 
          v179(R) = X64MovqDecompressTaggedSigned : MRI v180(R) [immediate:240]
gap () (v172(R) = v179(-);) 
          v172(1) = X64Sar32 v172(R) #1
assign r14 to v764:8
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v172 #0 #50 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:237] v108(-) v109(-) v110(S) v104(-) [immediate:238] [immediate:239]
assign 14 to v764:8
gap () () 
          v168(R) = X64Movsd : MRI v171(R) [immediate:236]
gap () () 
          X64Test32 && deoptimize if equal v109 #1 #49 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:233] v108(-) v109(-) v110(S) v104(-) [immediate:234] [immediate:235]
gap () () 
          X64Cmp32 : MRI && branch if equal v109(R) [immediate:230] v178(R) [immediate:231] [immediate:232]
assign r15 to v763:2
assign 15 to v763:2
gap () () 
          ArchJmp [immediate:229]
gap () () 
          [constant:177] = ArchNop
gap () () 
          X64Push v109(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v177(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:228] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:227]
assign rax to v765:0
assign 0 to v765:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v109(R) [immediate:223] v39(R) #48 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:224] v108(-) v109(-) v110(S) v104(-) [immediate:225] [immediate:226]
gap () () 
          v164(R) = X64MovqDecompressTaggedPointer : MRI v109(R) [immediate:222]
gap () () 
          v173(R) = X64MovqDecompressTaggedSigned : MRI v109(R) [immediate:221]
assign rdx to v766:0
gap () (v170(R) = v173(-);) 
          v170(1) = X64Sar32 v170(R) #1
assign 2 to v766:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v170 #0 #47 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:218] v108(-) v109(-) v110(S) v104(-) [immediate:219] [immediate:220]
assign r9 to v760:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v172 #1 #46 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:215] v108(-) v109(-) v110(S) v104(-) [immediate:216] [immediate:217]
assign 9 to v760:0
gap () () 
          v169(R) = X64Movsd : MRI v171(R) [immediate:214]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v170 #1 #45 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:211] v108(-) v109(-) v110(S) v104(-) [immediate:212] [immediate:213]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v172 #2 #44 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:208] v108(-) v109(-) v110(S) v104(-) [immediate:209] [immediate:210]
gap () () 
          v167(R) = X64Movsd : MRI v171(R) [immediate:207]
assign rsi to v761:1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v170 #2 #43 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:204] v108(-) v109(-) v110(S) v104(-) [immediate:205] [immediate:206]
assign 6 to v761:1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v172 #3 #42 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:201] v108(-) v109(-) v110(S) v104(-) [immediate:202] [immediate:203]
gap () () 
          v163(R) = X64Movsd : MRI v171(R) [immediate:200]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v170 #3 #41 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:197] v108(-) v109(-) v110(S) v104(-) [immediate:198] [immediate:199]
gap () () 
          v165(R) = AVXFloat64Mul : MRI v169(R) v164(R) [immediate:196]
gap () () 
          v166(R) = AVXFloat64Mul : MRI v168(R) v164(R) [immediate:195]
gap () () 
          v161(R) = AVXFloat64Mul : MRI v167(R) v164(R) [immediate:194]
assign r14 to v24:21
assign 14 to v24:21
gap () () 
          v162(R) = AVXFloat64Add v165(R) v166
gap () () 
          v159(R) = AVXFloat64Mul : MRI v163(R) v164(R) [immediate:193]
gap () () 
          v160(R) = AVXFloat64Add v161(R) v162
gap () () 
          v158(R) = AVXFloat64Add v159(R) v160
gap () () 
          X64MovqCompressTagged : MRI v104(R) [immediate:191] [immediate:192]
gap () () 
          X64Movsd : MRI v156(R) [immediate:190] v158(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:188] [immediate:189]
gap () () 
          [constant:155] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v155(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:186] #-1 #40 v0(S) v1(S) v2(S) v3(S) v97(S) v103(S) v107(S) [immediate:187] v108(S) v109(S) v110(S) v104(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:185]
gap () () 
          ArchJmp [immediate:184]
gap () (v133 = v35(-);) 
          ArchJmp [immediate:183]
gap () () 
          X64Cmp32 && branch if unsigned less than v133 #4 [immediate:181] [immediate:182]
gap () () 
          v151(R) = X64MovqDecompressTaggedPointer : MRI v108(R) [immediate:180]
gap () () 
          v153(R) = X64MovqDecompressTaggedSigned : MRI v108(R) [immediate:179]
gap () (v152(R) = v153(-);) 
          v152(1) = X64Sar32 v152(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v133(R) v152 #39 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:177] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:178]
gap () () 
          v150(R) = X64MovqDecompressAnyTagged : MR4I v151(R) v133(R) [immediate:176]
gap () () 
          X64Test32 && deoptimize if equal v150 #1 #38 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:174] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:175]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v150(R) [immediate:171] v39(R) #37 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:172] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:173]
gap () () 
          v146(R) = X64MovqDecompressTaggedPointer : MRI v150(R) [immediate:170]
gap () () 
          v149(R) = X64MovqDecompressTaggedSigned : MRI v150(R) [immediate:169]
gap () (v147(R) = v149(-);) 
          v147(1) = X64Sar32 v147(R) #1
blocking v3 pick register r12
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #0 #36 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:167] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:168]
gap () () 
          v128(R) = X64Movsd : MRI v146(R) [immediate:166]
gap () () 
          v144(R) = X64MovqDecompressTaggedPointer : MRI v109(R) [immediate:165]
gap () () 
          v148(R) = X64MovqDecompressTaggedSigned : MRI v109(R) [immediate:164]
gap () (v145(R) = v148(-);) 
          v145(1) = X64Sar32 v145(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v145 #0 #35 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:162] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:163]
gap () () 
          v127(R) = X64Movsd : MRI v144(R) [immediate:161]
assign r9 to v760:2
assign 9 to v760:2
assign r12 to v3:13
assign 12 to v3:13
assign r8 to v49:11
assign 8 to v49:11
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #1 #34 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:159] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:160]
assign rdi to v43:19
assign 7 to v43:19
gap () () 
          v130(R) = X64Movsd : MRI v146(R) [immediate:158]
assign r11 to v36:19
assign 11 to v36:19
assign rbx to v24:23
assign 3 to v24:23
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v145 #1 #33 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:156] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:157]
gap () () 
          v129(R) = X64Movsd : MRI v144(R) [immediate:155]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #2 #32 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:153] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:154]
gap () () 
          v126(R) = X64Movsd : MRI v146(R) [immediate:152]
assign rsi to v25:8
assign 6 to v25:8
v6:1 not intersect with v2:2, removed
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v145 #2 #31 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:150] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:151]
v6:3 intersect with v2:3, adding
gap () () 
          v125(R) = X64Movsd : MRI v144(R) [immediate:149]
v6:1 not intersect with v731:0, removed
v6:3 intersect with v10:3, adding
v6:1 not intersect with v741:0, removed
assign r15 to v6:3
assign 15 to v6:3
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #3 #30 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:147] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:148]
v2:3 not intersect with v6:3, removed
v2:5 intersect with v6:3, adding
gap () () 
          v122(R) = X64Movsd : MRI v146(R) [immediate:146]
v2:3 not intersect with v722:0, removed
assign r9 to v2:5
assign 9 to v2:5
assign r8 to v28:10
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v145 #3 #29 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:144] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:145]
assign 8 to v28:10
gap () () 
          v121(R) = X64Movsd : MRI v144(R) [immediate:143]
assign rdx to v24:24
assign 2 to v24:24
gap () () 
          v135(R) = X64MovqDecompressTaggedPointer : MRI v104(R) [immediate:142]
assign rbx to v729:8
gap () () 
          v142(R) = X64MovqDecompressTaggedSigned : MRI v104(R) [immediate:141]
assign 3 to v729:8
gap () () 
          v143(R) = X64MovqDecompressTaggedSigned : MRI v135(R) [immediate:140]
gap () (v140(R) = v143(-);) 
          v140(1) = X64Sar32 v140(R) #1
gap () (v134(R) = v142(-);) 
          v134(1) = X64Sar32 v134(R) #1
gap () () 
          v141(R) = X64Lea32 : MRI v134(R) #1
assign r12 to v49:6
assign 12 to v49:6
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v133(R) v141 #28 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:138] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:139]
gap () () 
          X64Cmp32 && branch if unsigned less than v133(R) v140 [immediate:136] [immediate:137]
gap () () 
          v139(R) = X64Lea32 : MR1 v133(R) v133(R)
gap () () 
          [constant:138] = ArchNop
assign r14 to v3:12
assign 14 to v3:12
gap () ([rax|R|t] = v104(-); [rbx|R|w32] = v139(-); [rsi|R|w64] = v138(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:135] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v136(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v136 #1 #27 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:133] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:134]
gap () (v113 = v136(-);) 
          ArchJmp [immediate:132]
assign rax to v749:0
gap () (v113 = v135(-);) 
          ArchJmp [immediate:131]
assign 0 to v749:0
gap () () 
          v111(R) = X64Lea32 : MRI v133(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v133(R) v134 [immediate:129] [immediate:130]
gap () () 
          v132(R) = X64Lea32 : MR1 v111(R) v111(R)
gap () () 
          X64MovqCompressTagged : MRI v104(R) [immediate:128] v132(R)
gap () () 
          ArchJmp [immediate:127]
assign rcx to v758:0
assign 1 to v758:0
gap () () 
          ArchJmp [immediate:126]
gap () () 
          v123(R) = AVXFloat64Mul v129(R) v130
assign rcx to v750:0
assign 1 to v750:0
gap () () 
          v124(R) = AVXFloat64Mul v127(R) v128
gap () () 
          v119(R) = AVXFloat64Mul v125(R) v126
gap () () 
          v120(R) = AVXFloat64Add v123(R) v124
gap () () 
          v117(R) = AVXFloat64Mul v121(R) v122
gap () () 
          v118(R) = AVXFloat64Add v119(R) v120
gap () () 
          v116(R) = AVXFloat64Add v117(R) v118
gap () () 
          X64Movsd : MR8I v113(R) v133(R) [immediate:125] v116(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:123] [immediate:124]
gap () () 
          [constant:112] = ArchNop
blocking v756 pick register r8
assign r8 to v756:0
assign 8 to v756:0
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v112(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:121] #-1 #26 v0(S) v1(S) v2(S) v3(S) v97(S) v103(S) v107(S) [immediate:122] v108(S) v109(S) v110(S) v104(S) v111(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:120]
gap () () 
          ArchJmp [immediate:119]
gap () (v133 = v111(-);) 
          ArchJmp [immediate:118]
gap () () 
          [constant:105] = ArchNop
gap () ([rdx|R|t] = v103(-); [rcx|R|t] = v44(-); [rax|R|t] = v104(-); [rdi|R|w64] = v105(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:117] #-1 #25 v0(S) v1(S) v2(S) v3(S) v97(S) [rdx|R|t] [rcx|R|t] [rax|R|t] [rdi|R|w64] [rsi|R|t]
gap () () 
          v100(R) = X64Lea32 : MRI v97(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:115] [immediate:116]
gap () () 
          [constant:101] = ArchNop
assign r8 to v757:1
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v101(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:114] #-1 #24 v0(S) v1(S) v2(S) v3(S) v100(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
assign 8 to v757:1
gap () () 
          ArchJmp [immediate:113]
gap () () 
          ArchJmp [immediate:112]
gap () (v97 = v100(-);) 
          ArchJmp [immediate:111]
gap () () 
          [constant:57] = ArchNop
gap () () 
          [constant:56] = ArchNop
gap () () 
          v94(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:110]
assign r8 to v755:0
assign 8 to v755:0
gap () () 
          X64Test32 && deoptimize if equal v94 #1 #23 v0(S) v1(-) v2(-) v3(S) v97(-) [immediate:109]
assign rdi to v43:10
assign 7 to v43:10
gap () () 
          v98(R) = X64MovqDecompressTaggedPointer : MRI v94(R) [immediate:108]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v98(R) [immediate:106] #1068 #22 v0(S) v1(-) v2(-) v3(S) v97(-) [immediate:107]
gap () () 
          [constant:95] = ArchNop
gap () () 
          v96(R) = X64MovqDecompressTaggedPointer : MRI v94(R) [immediate:105]
gap () () 
          X64Cmp && deoptimize if not equal v95(R) v96 #21 v0(S) v1(-) v2(-) v3(S) v97(-) [immediate:104]
gap () () 
          X64Push v56(-)
gap () ([rdi|R|t] = v94(-); [rax|R|w64] = v20(-); [rsi|R|t] = v57(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:103] #-1 #20 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          [constant:62] = ArchNop
blocking v752 pick register r12
gap () () 
          v63(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:102]
assign r12 to v752:0
assign 12 to v752:0
gap () () 
          X64Test32 && deoptimize if equal v63 #1 #19 v0(S) v1(-) v2(-) v3(S) v63(-) [immediate:101]
gap () () 
          X64Cmp32 : MRI && branch if equal v63(R) [immediate:98] v67(R) [immediate:99] [immediate:100]
gap () () 
          [constant:92] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v63(R) [immediate:96] v92(R) #18 v0(S) v1(-) v2(-) v3(S) v63(-) [immediate:97]
assign r8 to v754:0
assign 8 to v754:0
gap () () 
          v91(R) = X64MovqDecompressTaggedPointer : MRI v63(R) [immediate:95]
gap () () 
          v72(R) = X64Movl : MRI v91(R) [immediate:94]
assign r8 to v753:0
assign 8 to v753:0
gap () () 
          v71(R) = X64Movl : MRI v91(R) [immediate:93]
gap () () 
          v70(R) = X64Movl : MRI v91(R) [immediate:92]
gap () () 
          v83(R) = X64MovqDecompressTaggedSigned : MRI v91(R) [immediate:91]
gap () () 
          v84(R) = X64Movq : MR v80(R)
gap () () 
          [constant:88] = ArchNop
gap () () 
          v89(R) = X64Lea : MRI v84(R) [immediate:90]
gap () () 
          [constant:75] = ArchNop
assign r8 to v747:0
assign 8 to v747:0
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v89(R) [immediate:88] [immediate:89]
gap () () 
          ArchJmp [immediate:87]
gap () ([rdx|R|w64] = v88(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:86] #-1 [rdx|R|w64]
gap (v87(-) = [rax|R|tp];) () 
          v85(R) = X64Lea : MRI v87(R) [immediate:85]
gap () (v79 = v85(-);) 
          ArchJmp [immediate:84]
gap () (v79 = v84(-);) 
          ArchJmp [immediate:83]
gap () (v82(R) = v83(-);) 
          v82(1) = X64Sar32 v82(R) #1
gap () () 
          v81(R) = X64Lea : MRI v79(R) [immediate:82]
gap () (v78(R) = v82(-);) 
          v78(1) = X64And32 v78(R) #1073740800
gap () () 
          X64Movq : MR v80(R) v81(R)
gap () () 
          v77(R) = X64Lea : MRI v79(R) [immediate:81]
assign r8 to v748:1
assign 8 to v748:1
gap () (v76(R) = v78(-);) 
          v76(1) = X64Or32 v76(R) #6
gap () (v64 = v77(-);) 
          v64(1) = ArchNop v64
gap () () 
          v74(R) = X64Lea32 : MR1 v76(R) v76(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:80] v75(R)
assign r8 to v746:0
assign 8 to v746:0
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:79] v74(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:78] v72(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:77] v71(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:76] v70(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:75] v56(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:74] v56(R)
assign r12 to v743:0
assign 12 to v743:0
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:73] v62(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v63(R) [immediate:72] v67(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v63(R) [immediate:71] v64(R)
gap () () 
          ArchJmp [immediate:70]
gap () () 
          v61(R) = X64MovqDecompressTaggedPointer : MRI v63(R) [immediate:69]
gap () () 
          X64MovqCompressTagged : MRI v61(R) [immediate:68] v62(R)
gap () () 
          ArchJmp [immediate:67]
assign r8 to v745:0
assign 8 to v745:0
gap () () 
          v55(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:66]
assign r8 to v744:0
assign 8 to v744:0
gap () () 
          X64Test32 && deoptimize if equal v55 #1 #17 v0(S) v1(-) v2(-) v3(S) v55(-)
gap () () 
          v60(R) = X64MovqDecompressTaggedPointer : MRI v55(R) [immediate:65]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v60(R) [immediate:64] #1068 #16 v0(S) v1(-) v2(-) v3(S) v55(-)
gap () () 
          [constant:58] = ArchNop
gap () () 
          v59(R) = X64MovqDecompressTaggedPointer : MRI v55(R) [immediate:63]
gap () () 
          X64Cmp && deoptimize if not equal v58(R) v59 #15 v0(S) v1(-) v2(-) v3(S) v55(-)
gap () () 
          X64Push v56(-)
gap () ([rdi|R|t] = v55(-); [rax|R|w64] = v20(-); [rsi|R|t] = v57(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:62] #-1 #14 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
assign r8 to v6:2
assign 8 to v6:2
gap () (v7 = v53(-); v22 = v20(-);) 
          ArchJmp [immediate:61]
gap () () 
          v48(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:60]
gap () () 
          X64Test32 && deoptimize if equal v48 #1 #13 v0(S) v1(-) v2(-) v3(S) v22(-) v7(-) v48(-)
gap () () 
          v51(R) = X64Movl : MRI v48(R) [immediate:59]
assign r12 to v741:0
assign 12 to v741:0
gap () () 
          X64Cmp32 && branch if equal v52(R) v51 [immediate:57] [immediate:58]
gap () () 
          X64Cmp32 && deoptimize if not equal v51(R) v39 #12 v0(S) v1(-) v2(-) v3(S) v22(-) v7(-) v48(-)
gap () () 
          ArchJmp [immediate:56]
gap () () 
          ArchJmp [immediate:55]
gap () () 
          v50(R) = X64MovqDecompressTaggedSigned : MRI v48(R) [immediate:54]
assign rax to v740:0
assign 0 to v740:0
gap () (v49(R) = v50(-);) 
          v49(1) = X64Sar32 v49(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v22(R) v49 [immediate:52] [immediate:53]
gap () () 
          [constant:42] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v48(R) [immediate:51] v42(R) #11 v0(S) v1(-) v2(-) v3(S) v22(-) v7(-) v48(-)
assign r12 to v25:7
gap () () 
          v46(R) = X64MovqDecompressTaggedPointer : MRI v48(R) [immediate:50]
assign 12 to v25:7
gap () () 
          v43(R) = X64MovqDecompressAnyTagged : MR4I v46(R) v22(R) [immediate:49]
gap () () 
          [constant:45] = ArchNop
gap () ([rdx|R|t] = v43(-); [rcx|R|t] = v44(-); [rax|R|w64] = v45(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:48] #-1 #10 v0(S) v1(S) v2(S) v3(S) v22(S) v7(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
assign r15 to v737:0
assign 15 to v737:0
gap (v26(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v26 #1 #9 v0(S) v1(-) v2(-) v3(S) v22(-) v7(-) v26(-) [immediate:47]
gap () () 
          v41(R) = X64Movl : MRI v26(R) [immediate:46]
gap () () 
          X64Cmp32 && branch if equal v42(R) v41 [immediate:44] [immediate:45]
assign rax to v739:0
assign 0 to v739:0
gap () () 
          X64Cmp32 && deoptimize if not equal v41(R) v39 #8 v0(S) v1(-) v2(-) v3(S) v22(-) v7(-) v26(-) [immediate:43]
gap () () 
          ArchJmp [immediate:42]
assign rax to v738:0
assign 0 to v738:0
gap () () 
          ArchJmp [immediate:41]
gap () () 
          v40(R) = X64MovqDecompressTaggedSigned : MRI v26(R) [immediate:40]
gap () (v33(R) = v40(-);) 
          v33(1) = X64Sar32 v33(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v33 #0 [immediate:38] [immediate:39]
gap () (v18 = v7(-);) 
          ArchJmp [immediate:37]
assign r15 to v734:0
assign 15 to v734:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v26(R) [immediate:35] v39(R) #7 v0(S) v1(-) v2(-) v3(S) v22(-) v7(-) v26(-) [immediate:36]
gap () () 
          v31(R) = X64MovqDecompressTaggedPointer : MRI v26(R) [immediate:34]
gap () () 
          v38(R) = X64Movsd : MRI v31(R) [immediate:33]
gap () () 
          v34(R) = AVXFloat64Add v38(R) v7
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:31] [immediate:32]
gap () () 
          [constant:37] = ArchNop
assign rax to v736:0
assign 0 to v736:0
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v37(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:30] #-1 #6 v0(S) v1(S) v2(S) v3(S) v22(S) v34(S) v26(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:29]
gap () () 
          ArchJmp [immediate:28]
gap () (v23 = v34(-); v30 = v35(-);) 
          ArchJmp [immediate:27]
gap () () 
          X64Cmp32 && branch if unsigned less than v30(R) v33 [immediate:25] [immediate:26]
gap () () 
          v29(R) = X64Movsd : MR8I v31(R) v30(R) [immediate:24]
gap () () 
          v27(R) = X64Lea32 : MRI v30(R) #1
gap () () 
          v25(R) = AVXFloat64Add v29(R) v23
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:22] [immediate:23]
gap () () 
          [constant:28] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v28(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:21] #-1 #5 v0(S) v1(S) v2(S) v3(S) v22(S) v25(S) v26(S) v27(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:20]
gap () () 
          ArchJmp [immediate:19]
gap () (v23 = v25(-); v30 = v27(-);) 
          ArchJmp [immediate:18]
gap () (v18 = v23(-);) 
          ArchJmp [immediate:17]
gap () () 
          v17(R) = X64Lea32 : MRI v22(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:15] [immediate:16]
gap () () 
          [constant:21] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v21(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:14] #-1 #4 v0(S) v1(S) v2(S) v3(S) v17(S) v18(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:13]
gap () () 
          ArchJmp [immediate:12]
gap () (v7 = v18(-); v22 = v17(-);) 
          ArchJmp [immediate:11]
gap () () 
          v14(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:10]
gap () () 
          [constant:15] = ArchNop
gap () ([rdx|R|t] = v14(-); [rcx|R|t] = v2(-); [rax|R|w64] = v15(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:9] #-1 #3 v0(S) v1(S) v2(S) v3(S) v7(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v8(-) = [rax|R|t];) () 
          X64Test32 && branch if equal v8 #1 [immediate:7] [immediate:8]
gap () () 
          v13(R) = X64Movl : MRI v8(R) [immediate:6]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #304 v13(R) #2 v0(S) v1(-) v2(-) v3(S) v7(-) v8(-)
gap () () 
          v10(R) = X64Movsd : MRI v8(R) [immediate:5]
gap () (v9 = v10(-);) 
          ArchJmp [immediate:4]
gap () (v12(R) = v8(-);) 
          v12(1) = X64Sar32 v12(R) #1
gap () () 
          v11(R) = SSEInt32ToFloat64 v12
gap () (v9 = v11(-);) 
          ArchJmp [immediate:3]
gap () () 
          AVXFloat64Cmp && branch if unordered equal v9(R) v7 [immediate:1] [immediate:2]
gap () () 
          ArchDeoptimize #1 v0(S) v1(-) v2(-) v3(S) v7(-) v8(-)
gap () () 
          [constant:6] = ArchNop
gap () ([rax|R|t] = v6(-);) 
          ArchRet #0 [rax|R|t]
gap () () 
          ArchDebugBreak
gap () () 
          ArchThrowTerminator
gap () () 
          ArchDeoptimize #0 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:0] v5(-) v2(-)
print sib pairs
2, v133, v151
2, v97, v203
2, v835, v830
2, v220, v301
2, v220, v349
2, v220, v272
2, v220, v377
2, v710, v741
2, v710, v772
2, v710, v715
2, v710, v744
2, v710, v747
2, v710, v775
2, v855, v850
2, v873, v869
2, v22, v46
2, v606, v840
2, v606, v860
2, v606, v878
3, v133, v113
3, v245, v224
3, v245, v258
3, v245, v282
3, v245, v274
3, v245, v288
3, v30, v31
3, v631, v621
print modrm pairs
1, v10, v8
1, v17, v22
1, v27, v30
1, v38, v31
1, v41, v26
1, v50, v48
1, v48, v3
1, v59, v55
1, v62, v61
1, v62, v64
1, v74, v64
1, v81, v79
1, v89, v84
1, v72, v64
1, v72, v91
1, v96, v94
1, v98, v94
1, v142, v104
1, v135, v104
1, v121, v144
1, v126, v146
assign r9 to v2:4
assign 9 to v2:4
1, v130, v146
1, v127, v144
1, v144, v109
1, v146, v150
1, v63, v3
1, v151, v108
1, v168, v171
1, v179, v180
1, v186, v187
1, v188, v187
1, v191, v192
1, v187, v192
1, v200, v107
1, v75, v64
1, v201, v107
1, v107, v3
1, v203, v207
1, v209, v207
1, v210, v3
1, v244, v242
1, v247, v242
1, v268, v269
1, v284, v285
1, v282, v285
1, v285, v264
1, v141, v134
1, v239, v280
assign r15 to v722:0
assign 15 to v722:0
1, v295, v296
1, v272, v215
1, v301, v210
1, v290, v291
1, v308, v306
1, v331, v324
1, v332, v323
1, v325, v323
1, v313, v335
1, v314, v343
1, v317, v350
1, v318, v356
1, v300, v215
1, v321, v358
1, v360, v361
1, v358, v361
1, v361, v341
1, v322, v356
1, v319, v364
1, v367, v341
1, v163, v171
1, v258, v261
1, v370, v216
1, v167, v171
1, v341, v216
1, v371, v372
1, v376, v215
1, v381, v382
1, v237, v280
assign rax to v731:0
assign 0 to v731:0
1, v386, v380
1, v387, v380
1, v91, v63
1, v389, v390
1, v291, v264
1, v390, v392
1, v171, v180
1, v393, v394
1, v392, v394
1, v400, v402
1, v406, v214
1, v407, v214
1, v214, v3
1, v215, v3
1, v420, v416
1, v260, v261
1, v416, v415
1, v424, v423
1, v349, v215
1, v216, v3
1, v427, v428
1, v429, v428
1, v431, v432
1, v428, v432
1, v435, v434
1, v377, v210
1, v434, v433
1, v303, v210
1, v437, v438
assign r8 to v733:0
assign 8 to v733:0
1, v441, v422
1, v442, v441
1, v445, v446
1, v440, v446
1, v53, v424
1, v53, v434
assign r8 to v732:0
assign 8 to v732:0
1, v53, v442
1, v446, v448
1, v451, v422
1, v450, v453
1, v455, v456
1, v46, v48
1, v458, v460
1, v462, v457
1, v14, v3
1, v415, v410
1, v320, v356
1, v413, v467
1, v467, v470
1, v410, v3
1, v453, v456
1, v486, v489
1, v491, v493
1, v495, v490
1, v266, v269
1, v479, v478
1, v497, v478
1, v499, v478
1, v478, v3
1, v383, v382
assign rcx to v724:0
assign 1 to v724:0
1, v515, v514
1, v514, v517
1, v519, v521
1, v522, v518
1, v353, v341
1, v510, v509
1, v523, v509
1, v525, v509
1, v526, v527
1, v529, v524
1, v538, v524
1, v294, v216
1, v532, v531
1, v532, v535
1, v541, v535
1, v546, v535
1, v552, v551
1, v556, v558
1, v70, v64
1, v70, v91
1, v554, v561
1, v542, v535
1, v542, v561
1, v544, v535
1, v544, v561
1, v562, v524
1, v567, v564
assign r8 to v725:0
assign 8 to v725:0
1, v568, v569
1, v543, v535
1, v543, v561
1, v570, v569
1, v524, v3
1, v465, v3
1, v585, v581
1, v586, v576
1, v569, v588
1, v590, v592
1, v61, v63
1, v594, v589
1, v605, v603
1, v596, v606
1, v618, v607
1, v439, v440
1, v620, v612
1, v619, v603
1, v612, v603
1, v143, v135
1, v628, v631
1, v638, v621
1, v640, v641
1, v641, v650
1, v648, v621
assign rax to v730:0
assign 0 to v730:0
1, v658, v661
1, v670, v660
1, v671, v621
1, v207, v3
1, v680, v661
1, v679, v660
1, v683, v621
1, v696, v665
1, v241, v280
1, v660, v665
1, v692, v661
1, v697, v664
1, v661, v664
1, v264, v216
1, v621, v600
1, v611, v608
1, v39, v150
1, v39, v180
1, v39, v384
1, v39, v104
1, v39, v269
1, v39, v423
1, v39, v277
1, v39, v26
1, v39, v285
1, v39, v242
1, v39, v291
1, v39, v386
1, v39, v296
1, v39, v433
1, v39, v338
1, v39, v109
1, v39, v353
1, v39, v600
1, v39, v323
1, v39, v385
1, v39, v346
1, v39, v367
1, v39, v387
1, v39, v372
1, v39, v441
1, v39, v261
1, v39, v361
assign rax to v728:0
assign 0 to v728:0
1, v454, v451
1, v700, v699
1, v701, v702
1, v452, v453
1, v704, v706
1, v422, v418
1, v527, v524
1, v707, v703
1, v666, v663
1, v711, v663
1, v663, v627
1, v423, v422
1, v1135, v1132
1, v733, v722
1, v734, v665
1, v727, v665
1, v414, v467
1, v565, v564
1, v743, v625
1, v343, v346
1, v1195, v1182
1, v744, v626
1, v85, v87
1, v860, v863
1, v713, v710
1, v766, v758
1, v777, v624
assign rsi to v727:1
assign 6 to v727:1
1, v404, v399
1, v1169, v1166
1, v757, v754
1, v939, v935
1, v788, v789
1, v1038, v1033
1, v746, v626
1, v787, v792
1, v642, v621
1, v803, v789
1, v902, v901
1, v808, v624
1, v77, v79
1, v535, v524
1, v1000, v991
1, v780, v665
1, v1229, v1216
1, v809, v810
1, v699, v702
1, v814, v816
1, v1364, v1352
1, v816, v818
1, v148, v109
1, v1361, v1351
1, v824, v819
1, v826, v623
1, v627, v623
1, v833, v834
1, v741, v625
1, v832, v836
1, v836, v839
assign r8 to v723:1
assign 8 to v723:1
1, v843, v844
1, v850, v854
1, v60, v55
1, v856, v859
1, v42, v48
1, v866, v854
1, v854, v3
1, v872, v581
1, v764, v753
1, v433, v422
1, v792, v626
1, v1347, v1348
1, v862, v863
1, v1023, v1017
1, v871, v874
1, v898, v891
1, v806, v624
1, v277, v264
1, v878, v879
1, v603, v575
1, v447, v448
1, v881, v879
1, v838, v839
1, v879, v575
1, v883, v581
1, v899, v888
1, v438, v440
1, v498, v3
1, v922, v914
1, v765, v664
1, v125, v144
1, v812, v780
1, v812, v795
1, v812, v899
1, v1222, v1216
1, v820, v822
1, v1308, v1309
assign rax to v70:1
assign 0 to v70:1
1, v906, v908
1, v173, v109
1, v827, v623
1, v920, v914
1, v531, v524
1, v1143, v3
1, v903, v904
assign rsi to v726:1
assign 6 to v726:1
1, v923, v914
1, v5, v3
1, v925, v927
1, v64, v63
1, v623, v3
1, v1299, v1300
1, v1302, v1298
1, v928, v927
1, v927, v937
1, v940, v935
1, v575, v581
1, v941, v935
1, v943, v935
1, v944, v945
1, v937, v945
1, v934, v891
1, v947, v948
1, v949, v939
1, v852, v856
1, v853, v854
1, v950, v951
1, v350, v353
1, v430, v424
1, v430, v434
1, v430, v442
1, v430, v621
1, v1243, v1233
1, v1057, v1047
1, v948, v951
1, v51, v48
1, v986, v980
1, v811, v810
1, v953, v954
1, v956, v957
1, v1077, v1076
1, v1077, v1094
1, v817, v818
1, v1375, v3
1, v954, v957
1, v1431, v1425
1, v1127, v1114
1, v774, v625
1, v864, v854
1, v958, v942
1, v659, v660
1, v1074, v1046
1, v959, v960
1, v957, v960
v25:2 not intersect with v709:0, removed
1, v582, v581
1, v752, v664
1, v892, v891
1, v1072, v1063
v25:9 intersect with v709:0, adding
1, v1295, v3
1, v961, v943
1, v960, v963
1, v965, v967
v25:2 not intersect with v95:0, removed
1, v185, v104
1, v185, v384
v25:9 intersect with v95:0, adding
1, v185, v387
1, v185, v418
v25:2 not intersect with v19:0, removed
1, v185, v451
1, v185, v576
1, v185, v665
v25:9 intersect with v19:0, adding
1, v185, v1343
1, v185, v940
1, v185, v441
1, v185, v941
1, v185, v942
1, v185, v1295
v25:2 not intersect with v658:0, removed
v25:9 intersect with v658:0, adding
v25:2 not intersect with v442:0, removed
v25:9 intersect with v442:0, adding
v25:2 not intersect with v435:0, removed
1, v185, v423
1, v185, v1301
v25:9 intersect with v435:0, adding
1, v185, v600
1, v185, v1303
1, v185, v1304
1, v185, v1326
1, v185, v888
1, v185, v1349
v25:2 not intersect with v651:0, removed
v25:9 intersect with v651:0, adding
v25:2 not intersect with v612:0, removed
v25:9 intersect with v612:0, adding
v25:2 not intersect with v163:0, removed
v25:9 intersect with v163:0, adding
v25:2 not intersect with v680:0, removed
v25:9 intersect with v680:0, adding
v25:2 not intersect with v629:0, removed
v25:9 intersect with v629:0, adding
v25:2 not intersect with v247:0, removed
1, v185, v1319
1, v185, v386
1, v185, v481
1, v185, v511
1, v185, v664
1, v185, v1325
1, v185, v210
1, v185, v1328
1, v185, v938
1, v185, v1351
v25:9 intersect with v247:0, adding
1, v185, v1350
1, v185, v1327
1, v185, v1352
1, v185, v433
1, v185, v911
1, v185, v385
1, v185, v939
1, v185, v1302
1, v185, v943
1, v185, v1480
v25:2 not intersect with v586:0, removed
v25:9 intersect with v586:0, adding
v25:2 not intersect with v264:0, removed
v25:9 intersect with v264:0, adding
v25:2 not intersect with v146:0, removed
1, v844, v845
1, v979, v976
v25:9 intersect with v146:0, adding
v25:2 not intersect with v413:0, removed
v25:9 intersect with v413:0, adding
1, v987, v974
1, v338, v341
v25:2 not intersect with v687:0, removed
v25:9 intersect with v687:0, adding
v25:2 not intersect with v406:0, removed
v25:9 intersect with v406:0, adding
v25:2 not intersect with v221:0, removed
1, v1073, v1068
1, v980, v974
v25:9 intersect with v221:0, adding
v25:2 not intersect with v88:0, removed
1, v100, v97
1, v971, v970
1, v971, v988
1, v698, v699
v25:9 intersect with v88:0, adding
v25:2 not intersect with v715:0, removed
v25:9 intersect with v715:0, adding
v25:2 not intersect with v185:0, removed
1, v1001, v996
1, v996, v974
v25:9 intersect with v185:0, adding
1, v1039, v1011
1, v1016, v1013
v25:2 not intersect with v580:0, removed
v25:9 intersect with v580:0, adding
v25:2 not intersect with v214:0, removed
1, v189, v156
v25:9 intersect with v214:0, adding
1, v189, v621
v25:2 not intersect with v192:0, removed
1, v1246, v3
1, v1024, v1011
v25:9 intersect with v192:0, adding
v25:2 not intersect with v124:0, removed
1, v13, v8
1, v1193, v1183
v25:9 intersect with v124:0, adding
v25:2 not intersect with v117:0, removed
v25:9 intersect with v117:0, adding
v25:2 not intersect with v65:0, removed
1, v1017, v1011
1, v900, v901
v25:9 intersect with v65:0, adding
1, v938, v935
1, v132, v104
v25:2 not intersect with v58:0, removed
v25:9 intersect with v58:0, adding
1, v1037, v1028
1, v1033, v1011
1, v218, v220
1, v190, v156
1, v190, v424
1, v190, v434
1, v190, v442
1, v190, v621
1, v914, v891
1, v1040, v3
1, v513, v514
1, v726, v723
1, v1067, v1064
1, v735, v727
1, v946, v938
1, v1046, v3
assign r8 to v25:2
assign 8 to v25:2
1, v1362, v1363
1, v1085, v1082
1, v153, v108
1, v335, v338
1, v834, v3
1, v789, v625
1, v1092, v1086
1, v1093, v1080
1, v379, v210
1, v1086, v1080
1, v1101, v1098
1, v874, v877
1, v1355, v1349
1, v1106, v1097
1, v802, v806
1, v1102, v1080
1, v233, v266
1, v1003, v3
1, v366, v367
1, v464, v410
1, v1109, v3
1, v1080, v3
1, v1305, v1306
1, v791, v625
1, v254, v247
1, v794, v626
1, v1125, v1115
1, v1317, v1318
1, v1120, v1114
assign r12 to v70:2
assign 12 to v70:2
1, v345, v346
1, v813, v814
1, v1436, v1438
1, v1309, v1312
1, v1141, v1136
1, v695, v660
1, v1142, v1114
1, v1271, v4
1, v891, v3
1, v92, v63
1, v337, v338
1, v1136, v1114
1, v709, v663
1, v1153, v1150
1, v485, v486
1, v1119, v1116
1, v1384, v1376
1, v1384, v1401
1, v1277, v4
1, v1160, v1154
1, v1154, v1148
1, v356, v372
1, v1145, v1144
1, v1145, v1162
1, v184, v603
1, v184, v1343
1, v184, v844
1, v184, v576
1, v184, v879
1, v184, v108
v49:2 not intersect with v3:1, removed
1, v184, v1080
1, v184, v863
1, v184, v891
1, v184, v215
1, v184, v911
1, v184, v1182
1, v184, v974
1, v184, v1148
1, v184, v1046
1, v184, v418
v49:14 intersect with v3:1, adding
1, v184, v4
1, v184, v216
1, v184, v1319
assign r15 to v49:2
assign 15 to v49:2
1, v184, v888
1, v184, v1011
1, v184, v1216
1, v184, v1295
1, v184, v210
1, v184, v1114
1, v1174, v1165
1, v1175, v1170
1, v1170, v1148
1, v1348, v1354
1, v910, v891
1, v1451, v1375
1, v1331, v1325
1, v1177, v3
1, v484, v481
1, v1148, v3
1, v797, v795
1, v1424, v1375
1, v1188, v1182
1, v547, v535
1, v1179, v1178
1, v1179, v1196
1, v845, v834
1, v561, v524
1, v1203, v1200
1, v1210, v1182
1, v830, v834
1, v40, v26
1, v330, v325
1, v1428, v1375
1, v909, v905
1, v1182, v3
1, v1244, v1238
v43:2 not intersect with v152:0, removed
1, v758, v664
1, v933, v932
1, v1360, v1363
1, v1406, v1375
v43:20 intersect with v152:0, adding
1, v1290, v1300
1, v1337, v1327
v43:2 not intersect with v382:0, removed
v43:20 intersect with v382:0, adding
v43:2 not intersect with v387:0, removed
1, v1221, v1218
1, v795, v664
v43:20 intersect with v387:0, adding
1, v530, v524
1, v530, v581
v43:2 not intersect with v561:0, removed
v43:20 intersect with v561:0, adding
v43:2 not intersect with v556:0, removed
v43:20 intersect with v556:0, adding
v43:2 not intersect with v42:0, removed
1, v530, v1011
1, v530, v891
1, v530, v1216
1, v530, v1080
1, v530, v974
1, v530, v1046
1, v530, v1114
1, v530, v1148
v43:20 intersect with v42:0, adding
1, v530, v1182
1, v1255, v1252
v43:2 not intersect with v510:0, removed
1, v1493, v1495
1, v962, v963
v43:20 intersect with v510:0, adding
v43:2 not intersect with v391:0, removed
v43:20 intersect with v391:0, adding
v43:2 not intersect with v618:0, removed
v43:20 intersect with v618:0, adding
v43:2 not intersect with v565:0, removed
v43:20 intersect with v565:0, adding
1, v1261, v1251
1, v1335, v1336
v43:2 not intersect with v334:0, removed
v43:20 intersect with v334:0, adding
v43:2 not intersect with v253:0, removed
1, v1260, v1256
1, v169, v171
v43:20 intersect with v253:0, adding
1, v1227, v1217
1, v253, v246
1, v1002, v974
1, v1262, v4
1, v1248, v1247
1, v1248, v1263
1, v1327, v1322
1, v581, v3
1, v1478, v1375
1, v1270, v1267
1, v470, v465
1, v1032, v1029
assign rcx to v43:2
assign 1 to v43:2
1, v194, v196
1, v549, v551
1, v1315, v1318
1, v1333, v1336
1, v1276, v1266
1, v942, v935
1, v384, v380
1, v1228, v1222
1, v222, v245
1, v1480, v1479
1, v815, v816
1, v1043, v1042
1, v1043, v1060
1, v1278, v4
1, v649, v621
1, v1288, v1285
1, v108, v3
1, v810, v814
1, v1159, v1149
1, v1322, v1319
1, v1213, v1212
1, v1213, v1230
1, v55, v3
1, v782, v780
1, v4, v3
1, v110, v107
1, v858, v859
1, v280, v296
1, v587, v588
1, v1298, v1295
1, v1488, v1480
1, v1209, v1204
1, v1303, v1298
1, v917, v891
1, v1304, v1298
1, v1350, v1346
1, v1300, v1306
1, v1022, v1012
1, v721, v665
1, v1052, v1046
1, v71, v64
1, v71, v91
1, v255, v242
1, v1111, v1110
1, v1111, v1128
1, v1237, v1234
1, v183, v108
1, v1323, v1324
1, v111, v133
1, v1311, v1312
1, v425, v424
1, v516, v517
1, v1314, v1315
1, v1216, v3
1, v1126, v1120
1, v149, v150
1, v1313, v1303
1, v1316, v1304
1, v951, v954
1, v1319, v3
1, v1204, v1182
1, v911, v910
1, v911, v914
1, v1413, v1415
1, v1318, v1324
1, v888, v887
1, v888, v892
1, v1401, v1375
1, v421, v416
1, v1245, v1216
1, v1425, v1375
1, v1340, v1328
1, v1326, v1322
1, v1373, v1375
1, v1194, v1188
1, v1328, v1322
1, v396, v398
1, v1256, v4
1, v1329, v1330
1, v1338, v1339
1, v869, v581
1, v1008, v1007
1, v1008, v1025
1, v1381, v1376
1, v847, v834
1, v1332, v1333
1, v181, v108
1, v469, v470
1, v840, v844
1, v502, v498
1, v1334, v1326
blocking v2 pick register r8
1, v56, v64
1, v1468, v1375
1, v1474, v1375
1, v1372, v1367
1, v1489, v1490
1, v1450, v1449
1, v952, v940
1, v1479, v3
1, v1336, v1339
1, v1312, v1315
1, v1383, v1376
1, v1383, v1401
1, v1330, v1333
1, v1434, v1425
1, v385, v380
1, v955, v941
1, v217, v214
1, v448, v450
1, v466, v410
1, v411, v3
1, v1341, v1342
1, v129, v144
1, v395, v396
1, v1211, v3
1, v1238, v1216
1, v560, v555
1, v974, v3
1, v936, v937
1, v985, v975
1, v1091, v1081
1, v1114, v3
1, v1411, v1375
1, v885, v812
1, v261, v264
1, v1491, v1490
1, v1339, v1342
1, v449, v450
1, v1346, v1343
1, v1342, v1348
1, v1208, v1199
1, v1306, v1309
1, v693, v660
1, v388, v780
1, v388, v422
1, v388, v795
1, v388, v380
1, v388, v1298
1, v388, v484
1, v388, v1322
1, v388, v899
1, v388, v512
1, v388, v935
1, v388, v1346
1, v164, v109
1, v1392, v1391
1, v1310, v1302
1, v1353, v1354
1, v128, v146
1, v288, v291
1, v1187, v1184
1, v198, v193
1, v1075, v3
1, v935, v911
1, v412, v467
1, v576, v575
1, v1354, v1357
1, v995, v992
1, v1359, v1360
1, v1357, v1360
1, v443, v442
1, v471, v465
1, v471, v1479
1, v158, v156
1, v1011, v3
1, v394, v396
1, v1365, v1366
1, v1307, v1301
1, v94, v3
1, v1107, v1102
1, v1363, v1366
1, v206, v207
1, v1394, v1401
1, v1368, v1370
1, v1301, v1298
1, v1387, v1376
1, v1433, v1425
1, v276, v277
1, v1376, v1375
blocking v3 pick register r8
1, v380, v210
1, v1161, v1148
1, v31, v26
1, v1176, v1148
1, v1059, v1046
1, v364, v367
1, v432, v438
1, v1108, v1080
1, v1396, v1398
1, v1356, v1357
1, v775, v624
1, v1389, v1391
1, v1415, v1375
1, v180, v181
1, v156, v104
1, v509, v3
1, v1386, v1376
1, v876, v877
1, v887, v891
1, v1382, v1376
1, v1382, v1401
1, v1140, v1131
1, v1456, v1375
1, v1374, v1373
1, v1374, v1376
1, v1402, v1375
1, v1058, v1052
1, v1404, v1406
1, v1408, v1375
1, v1466, v1375
1, v352, v353
1, v1459, v1375
1, v1407, v1375
1, v391, v392
1, v1417, v1375
1, v382, v390
1, v397, v398
1, v504, v498
1, v1051, v1048
1, v83, v91
1, v1416, v1375
1, v512, v511
1, v1343, v3
1, v1325, v1322
1, v1452, v1375
1, v1291, v1290
1, v1420, v1375
1, v901, v904
1, v1422, v1424
1, v1439, v1438
1, v1352, v1346
1, v487, v486
1, v1446, v1441
1, v772, v625
1, v945, v948
1, v1461, v1375
1, v1496, v1492
1, v122, v146
1, v1275, v1271
1, v1475, v1375
1, v1351, v1346
1, v863, v864
1, v694, v661
1, v1454, v1375
1, v805, v625
1, v501, v502
1, v1324, v1330
1, v1068, v1046
1, v1400, v1395
1, v67, v63
1, v67, v1375
1, v895, v891
1, v274, v277
1, v1463, v1375
1, v1349, v1346
1, v1289, v1290
1, v1442, v1444
1, v969, v964
blocking v10 pick register r8
1, v488, v489
1, v1358, v1350
1, v178, v242
1, v178, v291
1, v178, v338
1, v178, v109
1, v178, v353
1, v178, v372
1, v178, v367
1, v178, v451
1, v178, v261
1, v178, v470
1, v178, v626
1, v178, v624
1, v178, v269
1, v178, v665
1, v178, v361
1, v178, v877
1, v178, v277
1, v178, v1301
1, v178, v859
1, v178, v940
1, v178, v941
1, v178, v942
1, v178, v4
1, v178, v1350
1, v178, v839
1, v178, v1303
1, v178, v1304
1, v178, v296
1, v178, v481
1, v178, v511
1, v178, v664
1, v178, v1325
1, v178, v625
1, v178, v1326
1, v178, v1328
1, v178, v938
1, v178, v1351
1, v178, v1349
1, v178, v1327
1, v178, v1352
1, v178, v323
1, v178, v939
1, v178, v1302
1, v178, v346
1, v178, v943
1, v178, v285
1, v178, v1480
1, v1286, v1285
1, v1471, v1375
1, v1487, v1479
blocking v25 pick register r8
blocking v49 pick register r8
blocking v43 pick register r8
blocking v28 pick register r8
blocking v36 pick register r8
blocking v24 pick register r8
assign r8 to v2:6
assign 8 to v2:6
assign r9 to v718:0
assign 9 to v718:0
assign r11 to v10:4
assign 11 to v10:4
assign r12 to v720:0
assign 12 to v720:0
assign rax to v715:0
assign 0 to v715:0
assign r12 to v25:10
assign 12 to v25:10
assign r14 to v713:0
assign 14 to v713:0
assign r15 to v719:0
assign 15 to v719:0
assign r15 to v717:0
assign 15 to v717:0
assign r9 to v716:0
assign 9 to v716:0
blocking v2 pick register r8
blocking v10 pick register r11
blocking v25 pick register r12
assign rax to v714:0
assign 0 to v714:0
assign r12 to v25:14
assign 12 to v25:14
assign r11 to v10:8
assign 11 to v10:8
assign r8 to v2:10
assign 8 to v2:10
assign r14 to v711:0
assign 14 to v711:0
assign r9 to v712:1
assign 9 to v712:1
v43:20 not intersect with v253:0, removed
v43:20 not intersect with v334:0, removed
v43:20 not intersect with v565:0, removed
v43:20 not intersect with v618:0, removed
v43:22 intersect with v618:0, adding
v43:20 not intersect with v42:0, removed
v43:20 not intersect with v510:0, removed
v43:20 not intersect with v556:0, removed
v43:20 not intersect with v387:0, removed
v43:20 not intersect with v561:0, removed
v43:20 not intersect with v391:0, removed
v43:20 not intersect with v152:0, removed
v43:20 not intersect with v382:0, removed
v43:22 not intersect with v618:0, removed
v43:23 intersect with v618:0, adding
assign rdi to v43:22
assign 7 to v43:22
v3:16 intersect with v49:14, adding
v3:1 not intersect with v623:0, removed
v3:1 not intersect with v256:0, removed
v3:1 not intersect with v258:0, removed
v3:1 not intersect with v46:0, removed
v3:1 not intersect with v157:0, removed
v3:1 not intersect with v155:0, removed
v3:16 intersect with v24:2, adding
v3:1 not intersect with v621:0, removed
v3:1 not intersect with v48:0, removed
assign r8 to v1498:0
assign 8 to v1498:0
v3:17 intersect with v24:2, adding
v3:17 intersect with v49:14, adding
assign r14 to v3:16
assign 14 to v3:16
v24:2 not intersect with v3:17, removed
v24:26 intersect with v3:17, adding
v24:2 not intersect with v3:16, removed
v24:26 intersect with v3:16, adding
v24:2 not intersect with v19:0, removed
v24:26 intersect with v19:0, adding
v24:26 not intersect with v19:0, removed
assign rax to v35:1
assign 0 to v35:1
v24:27 intersect with v19:0, adding
v24:26 not intersect with v3:17, removed
v24:27 intersect with v3:17, adding
assign rbx to v1499:1
assign 3 to v1499:1
assign rdx to v24:26
assign 2 to v24:26
assign rsi to v1500:1
assign 6 to v1500:1
assign r11 to v36:21
assign 11 to v36:21
assign r9 to v2:11
assign 9 to v2:11
assign r8 to v2:9
assign 8 to v2:9
assign r8 to v35:2
assign 8 to v35:2
assign r9 to v698:0
assign 9 to v698:0
assign r15 to v10:7
assign 15 to v10:7
assign rax to v710:0
assign 0 to v710:0
assign rax to v709:0
assign 0 to v709:0
v3:1 not intersect with v63:0, removed
assign r12 to v25:13
assign 12 to v25:13
v3:2 intersect with v63:0, adding
v3:1 not intersect with v94:0, removed
v3:2 intersect with v94:0, adding
v3:1 not intersect with v210:0, removed
v3:2 intersect with v210:0, adding
v3:1 not intersect with v214:0, removed
v3:2 intersect with v214:0, adding
v3:1 not intersect with v215:0, removed
v3:2 intersect with v215:0, adding
v3:1 not intersect with v410:0, removed
v3:2 intersect with v410:0, adding
v3:1 not intersect with v478:0, removed
assign rcx to v706:0
assign 1 to v706:0
v3:2 intersect with v478:0, adding
v3:1 not intersect with v509:0, removed
v3:2 intersect with v509:0, adding
v3:1 not intersect with v623:0, removed
v3:2 intersect with v623:0, adding
v3:1 not intersect with v834:0, removed
v3:2 intersect with v834:0, adding
v3:1 not intersect with v581:0, removed
v3:2 intersect with v581:0, adding
v3:1 not intersect with v1040:0, removed
v3:2 intersect with v1040:0, adding
v3:1 not intersect with v498:0, removed
v3:2 intersect with v498:0, adding
v3:1 not intersect with v1011:0, removed
v3:2 intersect with v1011:0, adding
v3:1 not intersect with v48:0, removed
v3:2 intersect with v48:0, adding
v3:1 not intersect with v108:0, removed
v3:2 intersect with v108:0, adding
v3:1 not intersect with v1075:0, removed
v3:2 intersect with v1075:0, adding
v3:1 not intersect with v1080:0, removed
v3:2 intersect with v1080:0, adding
v3:1 not intersect with v524:0, removed
v3:2 intersect with v524:0, adding
v3:1 not intersect with v1177:0, removed
v3:2 intersect with v1177:0, adding
v3:1 not intersect with v974:0, removed
v3:2 intersect with v974:0, adding
v3:1 not intersect with v1182:0, removed
v3:2 intersect with v1182:0, adding
v3:1 not intersect with v1114:0, removed
assign rax to v708:0
assign 0 to v708:0
v3:2 intersect with v1114:0, adding
v3:1 not intersect with v55:0, removed
assign rax to v707:0
assign 0 to v707:0
v3:2 intersect with v55:0, adding
v3:1 not intersect with v4:0, removed
v3:2 intersect with v4:0, adding
v3:1 not intersect with v1246:0, removed
v3:2 intersect with v1246:0, adding
v3:1 not intersect with v891:0, removed
v3:2 intersect with v891:0, adding
v3:1 not intersect with v1003:0, removed
v3:2 intersect with v1003:0, adding
v3:1 not intersect with v1046:0, removed
v3:2 intersect with v1046:0, adding
v3:1 not intersect with v1211:0, removed
v3:2 intersect with v1211:0, adding
v3:1 not intersect with v14:0, removed
assign rax to v703:0
assign 0 to v703:0
v3:2 intersect with v14:0, adding
v3:1 not intersect with v1109:0, removed
v3:2 intersect with v1109:0, adding
v3:2 intersect with v1375:0, adding
v3:1 not intersect with v107:0, removed
v3:2 intersect with v107:0, adding
v3:1 not intersect with v5:0, removed
v3:2 intersect with v5:0, adding
v3:1 not intersect with v207:0, removed
v3:2 intersect with v207:0, adding
v3:1 not intersect with v216:0, removed
v3:2 intersect with v216:0, adding
v3:1 not intersect with v854:0, removed
v3:2 intersect with v854:0, adding
v3:1 not intersect with v1319:0, removed
assign rcx to v705:0
assign 1 to v705:0
v3:2 intersect with v1319:0, adding
v3:1 not intersect with v411:0, removed
v3:2 intersect with v411:0, adding
v3:1 not intersect with v1143:0, removed
v3:2 intersect with v1143:0, adding
v3:1 not intersect with v465:0, removed
v3:2 intersect with v465:0, adding
v3:1 not intersect with v1295:0, removed
v3:2 intersect with v1295:0, adding
v3:1 not intersect with v1343:0, removed
v3:2 intersect with v1343:0, adding
v3:1 not intersect with v1216:0, removed
v3:2 intersect with v1216:0, adding
v3:1 not intersect with v1148:0, removed
v3:2 intersect with v1148:0, adding
assign rsi to v3:1
assign 6 to v3:1
assign r8 to v1479:0
assign 8 to v1479:0
assign r9 to v80:1
assign 9 to v80:1
assign r11 to v1492:0
assign 11 to v1492:0
assign r12 to v1496:0
assign 12 to v1496:0
assign r14 to v90:1
assign 14 to v90:1
assign rax to v691:0
assign 0 to v691:0
assign rdx to v982:1
assign 2 to v982:1
assign rcx to v700:0
assign 1 to v700:0
assign rsi to v702:0
assign 6 to v702:0
assign rbx to v982:2
assign 3 to v982:2
assign rsi to v701:0
assign 6 to v701:0
blocking v693 pick register r8
assign r8 to v693:0
assign 8 to v693:0
blocking v3 pick register rsi
assign rcx to v694:0
assign 1 to v694:0
assign rsi to v699:0
assign 6 to v699:0
blocking v1479 pick register r8
assign rsi to v697:0
assign 6 to v697:0
assign rbx to v696:1
assign 3 to v696:1
blocking v80 pick register r9
assign r8 to v692:1
assign 8 to v692:1
assign rsi to v695:1
assign 6 to v695:1
v43:23 not intersect with v618:0, removed
v43:24 intersect with v618:0, adding
assign rax to v1495:0
assign 0 to v1495:0
assign r8 to v43:23
assign 8 to v43:23
assign r8 to v1493:0
assign 8 to v1493:0
assign r14 to v90:4
assign 14 to v90:4
blocking v2 pick register r8
assign r9 to v80:5
assign 9 to v80:5
assign r8 to v1479:3
assign 8 to v1479:3
assign rsi to v3:5
assign 6 to v3:5
assign r11 to v1490:0
assign 11 to v1490:0
assign r12 to v1491:0
assign 12 to v1491:0
assign r9 to v80:4
assign 9 to v80:4
blocking v10 pick register r8
assign r12 to v1489:0
assign 12 to v1489:0
assign r12 to v1480:0
assign 12 to v1480:0
v178:1 not intersect with v242:0, removed
v178:2 intersect with v242:0, adding
v178:1 not intersect with v291:0, removed
v178:2 intersect with v291:0, adding
blocking v25 pick register r8
v178:1 not intersect with v338:0, removed
v178:2 intersect with v338:0, adding
v178:1 not intersect with v109:0, removed
v178:2 intersect with v109:0, adding
v178:1 not intersect with v353:0, removed
v178:2 intersect with v353:0, adding
v178:1 not intersect with v372:0, removed
v178:2 intersect with v372:0, adding
v178:1 not intersect with v367:0, removed
v178:2 intersect with v367:0, adding
v178:1 not intersect with v451:0, removed
v178:2 intersect with v451:0, adding
v178:1 not intersect with v261:0, removed
v178:2 intersect with v261:0, adding
v178:1 not intersect with v470:0, removed
v178:2 intersect with v470:0, adding
v178:1 not intersect with v626:0, removed
v178:2 intersect with v626:0, adding
v178:1 not intersect with v624:1, removed
v178:2 intersect with v624:1, adding
v178:1 not intersect with v269:0, removed
v178:2 intersect with v269:0, adding
v178:1 not intersect with v665:0, removed
v178:2 intersect with v665:0, adding
v178:1 not intersect with v361:0, removed
v178:2 intersect with v361:0, adding
v178:1 not intersect with v877:0, removed
v178:2 intersect with v877:0, adding
v178:1 not intersect with v277:0, removed
v178:2 intersect with v277:0, adding
v178:1 not intersect with v1301:0, removed
v178:2 intersect with v1301:0, adding
v178:1 not intersect with v859:0, removed
v178:2 intersect with v859:0, adding
v178:1 not intersect with v940:0, removed
v178:2 intersect with v940:0, adding
v178:1 not intersect with v941:0, removed
v178:2 intersect with v941:0, adding
v178:1 not intersect with v942:0, removed
v178:2 intersect with v942:0, adding
v178:1 not intersect with v4:0, removed
v178:2 intersect with v4:0, adding
v178:1 not intersect with v1350:0, removed
v178:2 intersect with v1350:0, adding
v178:1 not intersect with v839:0, removed
v178:2 intersect with v839:0, adding
v178:1 not intersect with v1303:0, removed
v178:2 intersect with v1303:0, adding
v178:1 not intersect with v1304:0, removed
v178:2 intersect with v1304:0, adding
v178:1 not intersect with v296:0, removed
v178:2 intersect with v296:0, adding
v178:1 not intersect with v481:0, removed
v178:2 intersect with v481:0, adding
v178:1 not intersect with v511:0, removed
v178:2 intersect with v511:0, adding
v178:1 not intersect with v664:0, removed
v178:2 intersect with v664:0, adding
v178:1 not intersect with v1325:0, removed
v178:2 intersect with v1325:0, adding
v178:1 not intersect with v625:1, removed
v178:2 intersect with v625:1, adding
v178:1 not intersect with v1326:0, removed
v178:2 intersect with v1326:0, adding
assign r8 to v2:13
assign 8 to v2:13
v178:1 not intersect with v1328:0, removed
v178:2 intersect with v1328:0, adding
v178:1 not intersect with v938:0, removed
v178:2 intersect with v938:0, adding
v178:1 not intersect with v1351:0, removed
v178:2 intersect with v1351:0, adding
v178:1 not intersect with v1349:0, removed
v178:2 intersect with v1349:0, adding
v178:1 not intersect with v1327:0, removed
v178:2 intersect with v1327:0, adding
v178:1 not intersect with v1352:0, removed
v178:2 intersect with v1352:0, adding
v178:1 not intersect with v323:0, removed
v178:2 intersect with v323:0, adding
v178:1 not intersect with v939:0, removed
assign r9 to v685:0
assign 9 to v685:0
v178:2 intersect with v939:0, adding
v178:1 not intersect with v1302:0, removed
v178:2 intersect with v1302:0, adding
v178:1 not intersect with v346:0, removed
v178:2 intersect with v346:0, adding
v178:1 not intersect with v943:0, removed
v178:2 intersect with v943:0, adding
v178:1 not intersect with v285:0, removed
v178:2 intersect with v285:0, adding
assign r11 to v10:10
assign 11 to v10:10
assign rax to v178:1
assign 0 to v178:1
assign r12 to v689:0
assign 12 to v689:0
v185:1 not intersect with v104:0, removed
v185:2 intersect with v104:0, adding
v185:1 not intersect with v384:0, removed
v185:2 intersect with v384:0, adding
v185:1 not intersect with v387:0, removed
v185:2 intersect with v387:0, adding
assign r12 to v687:0
assign 12 to v687:0
v185:1 not intersect with v418:0, removed
v185:2 intersect with v418:0, adding
v185:1 not intersect with v451:0, removed
v185:2 intersect with v451:0, adding
v185:1 not intersect with v576:0, removed
v185:2 intersect with v576:0, adding
v185:1 not intersect with v665:0, removed
v185:2 intersect with v665:0, adding
v185:1 not intersect with v1343:0, removed
v185:2 intersect with v1343:0, adding
v185:1 not intersect with v940:0, removed
v185:2 intersect with v940:0, adding
v185:1 not intersect with v441:0, removed
v185:2 intersect with v441:0, adding
v185:1 not intersect with v941:0, removed
v185:2 intersect with v941:0, adding
assign r14 to v25:15
assign 14 to v25:15
v185:1 not intersect with v942:0, removed
v185:2 intersect with v942:0, adding
v185:1 not intersect with v1295:0, removed
v185:2 intersect with v1295:0, adding
v185:1 not intersect with v423:0, removed
v185:2 intersect with v423:0, adding
v185:1 not intersect with v1301:0, removed
v185:2 intersect with v1301:0, adding
v185:1 not intersect with v600:0, removed
v185:2 intersect with v600:0, adding
assign rax to v682:0
assign 0 to v682:0
v185:1 not intersect with v1303:0, removed
v185:2 intersect with v1303:0, adding
v185:1 not intersect with v1304:0, removed
v185:2 intersect with v1304:0, adding
v185:1 not intersect with v1326:0, removed
v185:2 intersect with v1326:0, adding
v185:1 not intersect with v888:0, removed
v185:2 intersect with v888:0, adding
v185:1 not intersect with v1349:0, removed
v185:2 intersect with v1349:0, adding
v185:1 not intersect with v1319:0, removed
v185:2 intersect with v1319:0, adding
v185:1 not intersect with v386:0, removed
v185:2 intersect with v386:0, adding
assign r15 to v688:0
assign 15 to v688:0
v185:1 not intersect with v481:0, removed
v185:2 intersect with v481:0, adding
v185:1 not intersect with v511:0, removed
v185:2 intersect with v511:0, adding
v185:1 not intersect with v664:0, removed
v185:2 intersect with v664:0, adding
v185:1 not intersect with v1325:0, removed
v185:2 intersect with v1325:0, adding
v185:1 not intersect with v210:0, removed
v185:2 intersect with v210:0, adding
v185:1 not intersect with v1328:0, removed
v185:2 intersect with v1328:0, adding
v185:1 not intersect with v938:0, removed
assign r12 to v686:0
assign 12 to v686:0
v185:2 intersect with v938:0, adding
v185:1 not intersect with v1351:0, removed
v185:2 intersect with v1351:0, adding
v185:1 not intersect with v1350:0, removed
v185:2 intersect with v1350:0, adding
v185:1 not intersect with v1327:0, removed
v185:2 intersect with v1327:0, adding
v185:1 not intersect with v1352:0, removed
v185:2 intersect with v1352:0, adding
assign r12 to v684:0
assign 12 to v684:0
v185:1 not intersect with v433:0, removed
v185:2 intersect with v433:0, adding
v185:1 not intersect with v911:0, removed
v185:2 intersect with v911:0, adding
v185:1 not intersect with v385:0, removed
v185:2 intersect with v385:0, adding
v185:1 not intersect with v939:0, removed
v185:2 intersect with v939:0, adding
v185:1 not intersect with v1302:0, removed
v185:2 intersect with v1302:0, adding
v185:1 not intersect with v943:0, removed
v185:2 intersect with v943:0, adding
assign r9 to v683:1
assign 9 to v683:1
assign rdx to v185:1
assign 2 to v185:1
assign rcx to v1488:1
assign 1 to v1488:1
assign r11 to v36:23
assign 11 to v36:23
v24:28 intersect with v3:17, adding
v24:27 not intersect with v19:0, removed
v471:1 not intersect with v465:0, removed
v24:28 intersect with v19:0, adding
v471:2 intersect with v465:0, adding
v24:28 not intersect with v19:0, removed
v471:1 not intersect with v1479:0, removed
v24:29 intersect with v19:0, adding
assign r15 to v471:1
assign 15 to v471:1
v24:29 intersect with v3:17, adding
assign rdx to v24:28
assign 2 to v24:28
assign r8 to v1479:2
assign 8 to v1479:2
v3:17 not intersect with v24:29, removed
v3:18 intersect with v24:29, adding
v3:17 not intersect with v24:28, removed
v3:18 intersect with v24:28, adding
v3:18 intersect with v49:14, adding
v3:19 intersect with v49:14, adding
v3:18 not intersect with v24:29, removed
v3:19 intersect with v24:29, adding
assign r14 to v3:18
assign rcx to v1487:1
assign 1 to v1487:1
assign 14 to v3:18
v43:24 not intersect with v618:0, removed
v43:25 intersect with v618:0, adding
v43:25 not intersect with v618:0, removed
v43:26 intersect with v618:0, adding
assign rdi to v43:25
assign 7 to v43:25
assign r11 to v1485:0
assign 11 to v1485:0
assign r12 to v25:17
assign 12 to v25:17
assign r15 to v10:12
assign 15 to v10:12
assign rbx to v1486:0
assign 3 to v1486:0
v24:30 intersect with v3:18, adding
v3:18 not intersect with v24:30, removed
v3:20 intersect with v24:30, adding
v3:20 intersect with v49:14, adding
assign r11 to v1483:0
assign 11 to v1483:0
assign r11 to v10:13
assign 11 to v10:13
assign r14 to v25:18
assign 14 to v25:18
assign rbx to v1484:0
assign 3 to v1484:0
assign r9 to v669:0
assign 9 to v669:0
assign r11 to v1481:0
assign 11 to v1481:0
assign r12 to v681:0
assign 12 to v681:0
assign rbx to v1482:0
assign 3 to v1482:0
assign r12 to v680:0
assign 12 to v680:0
assign rsi to v3:4
assign 6 to v3:4
assign rax to v677:0
assign 0 to v677:0
assign r12 to v679:0
assign 12 to v679:0
assign r12 to v678:0
assign 12 to v678:0
v1375:1 intersect with v3:2, adding
v1375:0 not intersect with v3:1, removed
v1375:0 not intersect with v1373:0, removed
v1375:0 not intersect with v1408:1, removed
v1375:1 intersect with v1408:1, adding
v1375:0 not intersect with v1411:1, removed
v1375:1 intersect with v1411:1, adding
v1375:0 not intersect with v1406:0, removed
v1375:1 intersect with v1406:0, adding
v1375:0 not intersect with v1417:1, removed
v1375:1 intersect with v1417:1, adding
v1375:0 not intersect with v1420:1, removed
v1375:1 intersect with v1420:1, adding
assign r12 to v674:0
assign 12 to v674:0
v1375:0 not intersect with v1402:1, removed
v1375:1 intersect with v1402:1, adding
v1375:0 not intersect with v1428:1, removed
v1375:1 intersect with v1428:1, adding
v1375:0 not intersect with v1407:0, removed
v1375:1 intersect with v1407:0, adding
v1375:0 not intersect with v1424:0, removed
v1375:1 intersect with v1424:0, adding
v1375:0 not intersect with v1461:0, removed
v1375:1 intersect with v1461:0, adding
v1375:0 not intersect with v1452:1, removed
v1375:1 intersect with v1452:1, adding
v1375:0 not intersect with v1463:1, removed
v1375:1 intersect with v1463:1, adding
v1375:0 not intersect with v1454:0, removed
v1375:1 intersect with v1454:0, adding
v1375:0 not intersect with v1456:1, removed
v1375:1 intersect with v1456:1, adding
v1375:0 not intersect with v1415:0, removed
v1375:1 intersect with v1415:0, adding
v1375:0 not intersect with v1466:1, removed
v1375:1 intersect with v1466:1, adding
v1375:0 not intersect with v1459:1, removed
v1375:1 intersect with v1459:1, adding
assign rax to v676:0
assign 0 to v676:0
v1375:0 not intersect with v1416:0, removed
v1375:1 intersect with v1416:0, adding
v1375:0 not intersect with v1451:0, removed
v1375:1 intersect with v1451:0, adding
v1375:0 not intersect with v1401:0, removed
v1375:1 intersect with v1401:0, adding
v1375:0 not intersect with v1425:0, removed
v1375:1 intersect with v1425:0, adding
v1375:0 not intersect with v1376:0, removed
v1375:1 intersect with v1376:0, adding
v1375:1 intersect with v67:1, adding
assign r8 to v1375:0
assign 8 to v1375:0
v67:1 not intersect with v63:0, removed
v67:2 intersect with v63:0, adding
v67:1 not intersect with v1375:1, removed
v67:2 intersect with v1375:1, adding
assign r12 to v67:1
assign 12 to v67:1
assign rcx to v1478:1
assign 1 to v1478:1
assign rcx to v1475:1
assign 1 to v1475:1
assign r11 to v1476:0
assign 11 to v1476:0
assign rbx to v1477:0
assign 3 to v1477:0
assign rdi to v662:0
assign 7 to v662:0
assign rcx to v1474:1
assign 1 to v1474:1
assign r12 to v671:0
assign 12 to v671:0
assign rcx to v1471:1
assign 1 to v1471:1
assign r15 to v673:0
assign 15 to v673:0
assign r15 to v672:0
assign 15 to v672:0
assign r11 to v1472:0
assign 11 to v1472:0
assign rax to v664:0
assign 0 to v664:0
assign rbx to v1473:0
assign 3 to v1473:0
assign r12 to v665:0
assign 12 to v665:0
assign rcx to v1468:0
assign 1 to v1468:0
assign r15 to v670:0
assign 15 to v670:0
assign r11 to v1469:1
assign r15 to v668:0
assign 15 to v668:0
assign 11 to v1469:1
assign rbx to v667:1
assign 3 to v667:1
assign rbx to v1470:1
assign 3 to v1470:1
assign r9 to v663:1
assign 9 to v663:1
assign rsi to v666:1
assign 6 to v666:1
v3:2 not intersect with v1148:0, removed
v3:6 intersect with v1148:0, adding
v43:26 not intersect with v618:0, removed
v43:28 intersect with v618:0, adding
v3:2 not intersect with v1216:0, removed
v3:6 intersect with v1216:0, adding
v3:2 not intersect with v1343:0, removed
assign r9 to v43:26
v3:6 intersect with v1343:0, adding
assign 9 to v43:26
v3:2 not intersect with v1295:0, removed
v3:6 intersect with v1295:0, adding
v3:2 not intersect with v465:0, removed
v3:6 intersect with v465:0, adding
v3:2 not intersect with v1143:0, removed
v3:6 intersect with v1143:0, adding
v3:2 not intersect with v411:0, removed
v3:6 intersect with v411:0, adding
v3:2 not intersect with v1319:0, removed
v3:6 intersect with v1319:0, adding
v3:2 not intersect with v854:0, removed
v3:6 intersect with v854:0, adding
v3:2 not intersect with v216:0, removed
v3:6 intersect with v216:0, adding
v3:2 not intersect with v207:0, removed
v3:6 intersect with v207:0, adding
v3:2 not intersect with v5:0, removed
v3:6 intersect with v5:0, adding
v3:2 not intersect with v107:0, removed
v3:6 intersect with v107:0, adding
v3:2 not intersect with v1109:0, removed
v3:6 intersect with v1109:0, adding
v3:2 not intersect with v14:0, removed
v3:6 intersect with v14:0, adding
v3:2 not intersect with v1211:0, removed
v3:6 intersect with v1211:0, adding
v3:2 not intersect with v1046:0, removed
v3:6 intersect with v1046:0, adding
v3:2 not intersect with v1003:0, removed
v3:6 intersect with v1003:0, adding
v3:2 not intersect with v891:0, removed
v3:6 intersect with v891:0, adding
v3:2 not intersect with v1246:0, removed
v3:6 intersect with v1246:0, adding
v3:2 not intersect with v4:0, removed
v3:6 intersect with v4:0, adding
v3:2 not intersect with v55:0, removed
v3:6 intersect with v55:0, adding
v3:2 not intersect with v1182:0, removed
v3:6 intersect with v1182:0, adding
v3:2 not intersect with v974:0, removed
blocking v2 pick register r8
v3:6 intersect with v974:0, adding
v3:2 not intersect with v524:0, removed
v3:6 intersect with v524:0, adding
v3:2 not intersect with v1177:0, removed
v3:6 intersect with v1177:0, adding
v3:2 not intersect with v1075:0, removed
v3:6 intersect with v1075:0, adding
v3:2 not intersect with v1080:0, removed
v3:6 intersect with v1080:0, adding
v3:2 not intersect with v48:0, removed
v3:6 intersect with v48:0, adding
v3:2 not intersect with v108:0, removed
v3:6 intersect with v108:0, adding
v3:2 not intersect with v1011:0, removed
v3:6 intersect with v1011:0, adding
v3:2 not intersect with v498:0, removed
v3:6 intersect with v498:0, adding
v3:2 not intersect with v1375:1, removed
v3:6 intersect with v1375:1, adding
v3:2 not intersect with v214:0, removed
v3:6 intersect with v214:0, adding
v3:2 not intersect with v509:0, removed
v3:6 intersect with v509:0, adding
v3:2 not intersect with v623:0, removed
v3:6 intersect with v623:0, adding
v3:2 not intersect with v1040:0, removed
v3:6 intersect with v1040:0, adding
v3:2 not intersect with v581:0, removed
v3:6 intersect with v581:0, adding
v3:2 not intersect with v834:0, removed
v3:6 intersect with v834:0, adding
v3:2 not intersect with v478:0, removed
v3:6 intersect with v478:0, adding
v3:2 not intersect with v410:0, removed
v3:6 intersect with v410:0, adding
v3:2 not intersect with v1114:0, removed
v3:6 intersect with v1114:0, adding
v3:2 not intersect with v94:0, removed
v3:6 intersect with v94:0, adding
v3:2 not intersect with v210:0, removed
v3:6 intersect with v210:0, adding
v3:2 not intersect with v215:0, removed
v3:6 intersect with v215:0, adding
v3:2 not intersect with v63:0, removed
v3:6 intersect with v63:0, adding
blocking v10 pick register r8
assign r11 to v3:2
assign 11 to v3:2
v178:2 not intersect with v285:0, removed
blocking v25 pick register r8
v178:3 intersect with v285:0, adding
v178:2 not intersect with v943:0, removed
v178:3 intersect with v943:0, adding
v178:2 not intersect with v346:0, removed
v178:3 intersect with v346:0, adding
v178:2 not intersect with v1302:0, removed
v178:3 intersect with v1302:0, adding
v178:2 not intersect with v939:0, removed
v178:3 intersect with v939:0, adding
v178:2 not intersect with v323:0, removed
v178:3 intersect with v323:0, adding
v178:2 not intersect with v1352:0, removed
v178:3 intersect with v1352:0, adding
v178:2 not intersect with v1327:0, removed
v178:3 intersect with v1327:0, adding
v178:2 not intersect with v1349:0, removed
v178:3 intersect with v1349:0, adding
v178:2 not intersect with v1351:0, removed
v178:3 intersect with v1351:0, adding
v178:2 not intersect with v938:0, removed
v178:3 intersect with v938:0, adding
v178:2 not intersect with v1328:0, removed
v178:3 intersect with v1328:0, adding
v178:2 not intersect with v1326:0, removed
v178:3 intersect with v1326:0, adding
v178:2 not intersect with v625:1, removed
v178:3 intersect with v625:1, adding
v178:2 not intersect with v1325:0, removed
v178:3 intersect with v1325:0, adding
v178:2 not intersect with v664:0, removed
v178:3 intersect with v664:0, adding
v178:2 not intersect with v511:0, removed
v178:3 intersect with v511:0, adding
v178:2 not intersect with v481:0, removed
v178:3 intersect with v481:0, adding
v178:2 not intersect with v296:0, removed
v178:3 intersect with v296:0, adding
v178:2 not intersect with v1304:0, removed
v178:3 intersect with v1304:0, adding
v178:2 not intersect with v1303:0, removed
v178:3 intersect with v1303:0, adding
v178:2 not intersect with v839:0, removed
v178:3 intersect with v839:0, adding
v178:2 not intersect with v1350:0, removed
v178:3 intersect with v1350:0, adding
v178:2 not intersect with v4:0, removed
v178:3 intersect with v4:0, adding
v178:2 not intersect with v940:0, removed
v178:3 intersect with v940:0, adding
v178:2 not intersect with v1301:0, removed
v178:3 intersect with v1301:0, adding
v178:2 not intersect with v277:0, removed
v178:3 intersect with v277:0, adding
v178:2 not intersect with v859:0, removed
v178:3 intersect with v859:0, adding
v178:2 not intersect with v361:0, removed
v178:3 intersect with v361:0, adding
v178:2 not intersect with v877:0, removed
v178:3 intersect with v877:0, adding
v178:2 not intersect with v665:0, removed
v178:3 intersect with v665:0, adding
v178:2 not intersect with v269:0, removed
v178:3 intersect with v269:0, adding
v178:2 not intersect with v624:1, removed
v178:3 intersect with v624:1, adding
v178:2 not intersect with v626:0, removed
v178:3 intersect with v626:0, adding
v178:2 not intersect with v470:0, removed
v178:3 intersect with v470:0, adding
v178:2 not intersect with v261:0, removed
v178:3 intersect with v261:0, adding
v178:2 not intersect with v941:0, removed
v178:3 intersect with v941:0, adding
v178:2 not intersect with v372:0, removed
v178:3 intersect with v372:0, adding
v178:2 not intersect with v942:0, removed
v178:3 intersect with v942:0, adding
v178:2 not intersect with v109:0, removed
v178:3 intersect with v109:0, adding
v178:2 not intersect with v353:0, removed
v178:3 intersect with v353:0, adding
v178:2 not intersect with v338:0, removed
v178:3 intersect with v338:0, adding
v178:2 not intersect with v367:0, removed
v178:3 intersect with v367:0, adding
v178:2 not intersect with v451:0, removed
v178:3 intersect with v451:0, adding
v178:2 not intersect with v242:0, removed
v178:3 intersect with v242:0, adding
v178:2 not intersect with v291:0, removed
v178:3 intersect with v291:0, adding
assign r8 to v2:15
assign 8 to v2:15
assign rcx to v178:2
assign 1 to v178:2
assign r9 to v656:0
assign 9 to v656:0
v185:2 not intersect with v943:0, removed
v185:3 intersect with v943:0, adding
v185:2 not intersect with v1302:0, removed
v185:3 intersect with v1302:0, adding
v185:2 not intersect with v939:0, removed
assign r11 to v10:14
assign 11 to v10:14
v185:3 intersect with v939:0, adding
v185:2 not intersect with v385:0, removed
v185:3 intersect with v385:0, adding
v185:2 not intersect with v911:0, removed
v185:3 intersect with v911:0, adding
v185:2 not intersect with v433:0, removed
v185:3 intersect with v433:0, adding
v185:2 not intersect with v1352:0, removed
v185:3 intersect with v1352:0, adding
v185:2 not intersect with v1327:0, removed
v185:3 intersect with v1327:0, adding
v185:2 not intersect with v1350:0, removed
v185:3 intersect with v1350:0, adding
v185:2 not intersect with v1351:0, removed
v185:3 intersect with v1351:0, adding
v185:2 not intersect with v938:0, removed
assign r12 to v660:0
assign 12 to v660:0
v185:3 intersect with v938:0, adding
v185:2 not intersect with v1328:0, removed
v185:3 intersect with v1328:0, adding
v185:2 not intersect with v210:0, removed
v185:3 intersect with v210:0, adding
v185:2 not intersect with v1325:0, removed
v185:3 intersect with v1325:0, adding
v185:2 not intersect with v664:0, removed
v185:3 intersect with v664:0, adding
v185:2 not intersect with v511:0, removed
v185:3 intersect with v511:0, adding
v185:2 not intersect with v481:0, removed
v185:3 intersect with v481:0, adding
v185:2 not intersect with v386:0, removed
v185:3 intersect with v386:0, adding
v185:2 not intersect with v1319:0, removed
v185:3 intersect with v1319:0, adding
v185:2 not intersect with v1349:0, removed
v185:3 intersect with v1349:0, adding
assign r12 to v658:0
assign 12 to v658:0
v185:2 not intersect with v888:0, removed
v185:3 intersect with v888:0, adding
v185:2 not intersect with v1304:0, removed
v185:3 intersect with v1304:0, adding
v185:2 not intersect with v1303:0, removed
v185:3 intersect with v1303:0, adding
v185:2 not intersect with v600:0, removed
v185:3 intersect with v600:0, adding
v185:2 not intersect with v1301:0, removed
v185:3 intersect with v1301:0, adding
v185:2 not intersect with v423:0, removed
v185:3 intersect with v423:0, adding
v185:2 not intersect with v942:0, removed
v185:3 intersect with v942:0, adding
v185:2 not intersect with v1326:0, removed
v185:3 intersect with v1326:0, adding
v185:2 not intersect with v941:0, removed
v185:3 intersect with v941:0, adding
assign r14 to v25:19
assign 14 to v25:19
v185:2 not intersect with v441:0, removed
v185:3 intersect with v441:0, adding
v185:2 not intersect with v1343:0, removed
v185:3 intersect with v1343:0, adding
v185:2 not intersect with v940:0, removed
v185:3 intersect with v940:0, adding
v185:2 not intersect with v1295:0, removed
v185:3 intersect with v1295:0, adding
v185:2 not intersect with v104:0, removed
v185:3 intersect with v104:0, adding
v185:2 not intersect with v384:0, removed
v185:3 intersect with v384:0, adding
v185:2 not intersect with v665:0, removed
assign rax to v653:0
assign 0 to v653:0
v185:3 intersect with v665:0, adding
v185:2 not intersect with v387:0, removed
v185:3 intersect with v387:0, adding
v185:2 not intersect with v576:0, removed
v185:3 intersect with v576:0, adding
v185:2 not intersect with v451:0, removed
v185:3 intersect with v451:0, adding
v185:2 not intersect with v418:0, removed
v185:3 intersect with v418:0, adding
assign r15 to v659:0
assign 15 to v659:0
assign rdi to v185:2
assign 7 to v185:2
assign r12 to v657:0
assign 12 to v657:0
assign r12 to v655:0
assign 12 to v655:0
assign r9 to v654:1
assign 9 to v654:1
blocking v3 pick register r8
assign r9 to v640:0
assign 9 to v640:0
blocking v1375 pick register r8
assign r12 to v652:0
assign 12 to v652:0
assign r12 to v651:0
assign 12 to v651:0
blocking v67 pick register r8
assign rax to v648:0
assign 0 to v648:0
assign r12 to v650:0
assign 12 to v650:0
assign r12 to v649:0
assign 12 to v649:0
blocking v80 pick register r8
assign r12 to v645:0
assign 12 to v645:0
assign rax to v647:0
assign 0 to v647:0
blocking v90 pick register r8
blocking v178 pick register r8
blocking v185 pick register r8
blocking v471 pick register r8
assign rax to v1467:0
assign 0 to v1467:0
assign rdi to v633:0
assign 7 to v633:0
v1375:3 intersect with v3:6, adding
v1375:1 not intersect with v1376:0, removed
v1375:1 not intersect with v1401:0, removed
v1375:3 intersect with v67:2, adding
v1375:1 not intersect with v1451:0, removed
v1375:1 not intersect with v1416:0, removed
v1375:1 not intersect with v1466:1, removed
v1375:1 not intersect with v1415:0, removed
v1375:1 not intersect with v1454:0, removed
v1375:1 not intersect with v1463:1, removed
assign r12 to v642:0
assign 12 to v642:0
v1375:1 not intersect with v1452:1, removed
v1375:1 not intersect with v1424:0, removed
v1375:1 not intersect with v1459:1, removed
v1375:1 not intersect with v1407:0, removed
v1375:1 not intersect with v1428:1, removed
v1375:1 not intersect with v1402:1, removed
v1375:1 not intersect with v1420:1, removed
v1375:1 not intersect with v1406:0, removed
v1375:1 not intersect with v1411:1, removed
v1375:1 not intersect with v1417:1, removed
v1375:1 not intersect with v1456:1, removed
v1375:1 not intersect with v1461:0, removed
v1375:1 not intersect with v1425:0, removed
v1375:1 not intersect with v1408:1, removed
assign r15 to v644:0
assign 15 to v644:0
assign r15 to v643:0
assign 15 to v643:0
assign r8 to v1375:3
assign 8 to v1375:3
v3:6 not intersect with v1375:3, removed
v3:8 intersect with v1375:3, adding
v3:6 not intersect with v63:0, removed
v3:6 not intersect with v215:0, removed
v3:6 not intersect with v210:0, removed
v3:6 not intersect with v94:0, removed
v3:6 not intersect with v1114:0, removed
assign rax to v635:0
assign 0 to v635:0
v3:6 not intersect with v410:0, removed
v3:6 not intersect with v478:0, removed
v3:6 not intersect with v834:0, removed
v3:6 not intersect with v581:0, removed
v3:6 not intersect with v1040:0, removed
v3:6 not intersect with v623:0, removed
v3:6 not intersect with v509:0, removed
v3:6 not intersect with v214:0, removed
v3:6 not intersect with v498:0, removed
v3:6 not intersect with v1011:0, removed
v3:6 not intersect with v108:0, removed
v3:6 not intersect with v48:0, removed
v3:6 not intersect with v1080:0, removed
v3:6 not intersect with v1075:0, removed
v3:6 not intersect with v1177:0, removed
v3:6 not intersect with v524:0, removed
assign r12 to v636:0
assign 12 to v636:0
v3:6 not intersect with v974:0, removed
v3:6 not intersect with v1182:0, removed
v3:6 not intersect with v4:0, removed
v3:6 not intersect with v55:0, removed
v3:6 not intersect with v1246:0, removed
v3:6 not intersect with v1046:0, removed
v3:6 not intersect with v1211:0, removed
v3:6 not intersect with v1109:0, removed
v3:6 not intersect with v14:0, removed
v3:6 not intersect with v1003:0, removed
v3:6 not intersect with v891:0, removed
v3:6 not intersect with v107:0, removed
v3:6 not intersect with v5:0, removed
v3:6 not intersect with v207:0, removed
assign r15 to v641:0
assign 15 to v641:0
v3:6 not intersect with v854:0, removed
v3:6 not intersect with v216:0, removed
v3:6 not intersect with v1319:0, removed
v3:6 not intersect with v1143:0, removed
v3:6 not intersect with v411:0, removed
v3:6 not intersect with v1216:0, removed
v3:6 not intersect with v1343:0, removed
v3:8 intersect with v1343:0, adding
v3:6 not intersect with v1148:0, removed
v3:6 not intersect with v465:0, removed
v3:6 not intersect with v1295:0, removed
assign r15 to v639:0
assign 15 to v639:0
v3:8 not intersect with v1343:0, removed
v3:9 intersect with v1343:0, adding
assign rsi to v3:8
assign 6 to v3:8
v67:2 not intersect with v1375:3, removed
v67:4 intersect with v1375:3, adding
assign rbx to v638:1
v67:2 not intersect with v63:0, removed
assign 3 to v638:1
assign r12 to v67:4
assign 12 to v67:4
v471:2 not intersect with v465:0, removed
v471:4 intersect with v465:0, adding
v471:4 not intersect with v465:0, removed
v471:5 intersect with v465:0, adding
assign r15 to v471:4
assign 15 to v471:4
v185:3 not intersect with v418:0, removed
assign r9 to v634:1
assign 9 to v634:1
v185:3 not intersect with v451:0, removed
v185:3 not intersect with v576:0, removed
v185:3 not intersect with v387:0, removed
assign rsi to v637:1
assign 6 to v637:1
v185:3 not intersect with v665:0, removed
v185:3 not intersect with v384:0, removed
v185:3 not intersect with v104:0, removed
v185:3 not intersect with v1295:0, removed
v185:3 not intersect with v940:0, removed
v185:3 not intersect with v1343:0, removed
v185:3 not intersect with v441:0, removed
v185:3 not intersect with v941:0, removed
v185:3 not intersect with v1326:0, removed
v185:3 not intersect with v942:0, removed
v185:3 not intersect with v423:0, removed
v185:3 not intersect with v1301:0, removed
v185:3 not intersect with v888:0, removed
v185:3 not intersect with v1349:0, removed
v185:3 not intersect with v1319:0, removed
v185:3 not intersect with v600:0, removed
v185:3 not intersect with v1303:0, removed
v185:3 not intersect with v1304:0, removed
v185:3 not intersect with v386:0, removed
v185:3 not intersect with v664:0, removed
v185:3 not intersect with v481:0, removed
v185:3 not intersect with v511:0, removed
v185:3 not intersect with v1325:0, removed
v185:3 not intersect with v210:0, removed
v185:3 not intersect with v1328:0, removed
v185:3 not intersect with v938:0, removed
v185:3 not intersect with v1351:0, removed
v185:3 not intersect with v1350:0, removed
v185:3 not intersect with v1327:0, removed
v185:3 not intersect with v1352:0, removed
v185:5 intersect with v1352:0, adding
v185:3 not intersect with v433:0, removed
blocking v2 pick register r8
v185:3 not intersect with v911:0, removed
v185:3 not intersect with v1302:0, removed
v185:3 not intersect with v939:0, removed
v185:3 not intersect with v385:0, removed
v185:3 not intersect with v943:0, removed
v185:5 not intersect with v1352:0, removed
v185:6 intersect with v1352:0, adding
assign rdx to v185:5
assign 2 to v185:5
v178:3 not intersect with v291:0, removed
v178:3 not intersect with v242:0, removed
v178:3 not intersect with v451:0, removed
v178:3 not intersect with v367:0, removed
v178:3 not intersect with v338:0, removed
v178:3 not intersect with v353:0, removed
v178:3 not intersect with v109:0, removed
v178:3 not intersect with v942:0, removed
v178:3 not intersect with v372:0, removed
v178:3 not intersect with v941:0, removed
v178:3 not intersect with v261:0, removed
v178:3 not intersect with v470:0, removed
v178:3 not intersect with v626:0, removed
blocking v10 pick register r8
v178:3 not intersect with v624:1, removed
v178:3 not intersect with v269:0, removed
v178:3 not intersect with v665:0, removed
v178:3 not intersect with v877:0, removed
v178:3 not intersect with v361:0, removed
v178:3 not intersect with v859:0, removed
v178:3 not intersect with v277:0, removed
v178:3 not intersect with v1301:0, removed
v178:3 not intersect with v940:0, removed
v178:3 not intersect with v4:0, removed
v178:3 not intersect with v664:0, removed
v178:3 not intersect with v481:0, removed
v178:3 not intersect with v1325:0, removed
v178:3 not intersect with v511:0, removed
v178:3 not intersect with v296:0, removed
v178:3 not intersect with v1303:0, removed
v178:3 not intersect with v1304:0, removed
v178:3 not intersect with v625:1, removed
v178:3 not intersect with v1326:0, removed
v178:3 not intersect with v1328:0, removed
v178:3 not intersect with v938:0, removed
v178:3 not intersect with v1351:0, removed
v178:3 not intersect with v1349:0, removed
v178:3 not intersect with v839:0, removed
v178:3 not intersect with v1350:0, removed
v178:3 not intersect with v939:0, removed
v178:3 not intersect with v323:0, removed
v178:3 not intersect with v1352:0, removed
v178:5 intersect with v1352:0, adding
blocking v25 pick register r8
v178:3 not intersect with v1327:0, removed
v178:3 not intersect with v1302:0, removed
v178:3 not intersect with v346:0, removed
v178:3 not intersect with v943:0, removed
v178:3 not intersect with v285:0, removed
v178:5 not intersect with v1352:0, removed
v178:6 intersect with v1352:0, adding
assign rax to v178:5
assign 0 to v178:5
assign r9 to v80:7
assign 9 to v80:7
assign r14 to v90:6
assign 14 to v90:6
assign r8 to v2:17
assign 8 to v2:17
assign r9 to v627:0
assign 9 to v627:0
assign r8 to v67:3
assign 8 to v67:3
assign r11 to v10:16
assign 11 to v10:16
assign r11 to v1375:2
assign 11 to v1375:2
assign r12 to v631:0
assign 12 to v631:0
assign r12 to v1466:1
assign 12 to v1466:1
assign r12 to v629:0
assign 12 to v629:0
assign r12 to v1463:1
assign 12 to v1463:1
assign r14 to v25:21
assign 14 to v25:21
assign rbx to v1464:0
assign 3 to v1464:0
assign rax to v624:0
assign 0 to v624:0
assign rcx to v1465:0
assign 1 to v1465:0
assign r15 to v630:0
assign 15 to v630:0
assign r12 to v1461:0
assign 12 to v1461:0
assign r12 to v628:0
assign 12 to v628:0
assign r12 to v626:0
assign 12 to v626:0
assign rbx to v327:1
assign 3 to v327:1
assign r9 to v625:1
assign 9 to v625:1
assign rcx to v1462:1
assign 1 to v1462:1
v3:9 not intersect with v1343:0, removed
v3:10 intersect with v1343:0, adding
assign r12 to v3:9
assign 12 to v3:9
v178:6 not intersect with v1352:0, removed
v178:7 intersect with v1352:0, adding
assign r9 to v3:15
assign 9 to v3:15
assign rcx to v178:6
assign 1 to v178:6
assign r12 to v49:15
assign 12 to v49:15
v185:6 not intersect with v1352:0, removed
v185:7 intersect with v1352:0, adding
assign rdi to v185:6
assign 7 to v185:6
assign r15 to v621:0
assign 15 to v621:0
assign rax to v623:0
assign 0 to v623:0
assign rax to v622:0
assign 0 to v622:0
assign r15 to v619:0
assign 15 to v619:0
blocking v1375 pick register r8
assign r15 to v620:1
assign 15 to v620:1
blocking v67 pick register r8
assign r15 to v618:0
assign 15 to v618:0
assign rax to v43:21
assign 0 to v43:21
assign rdx to v615:0
assign 2 to v615:0
assign r15 to v617:0
assign 15 to v617:0
assign r15 to v616:0
assign 15 to v616:0
assign r15 to v605:0
assign 15 to v605:0
assign rax to v1460:0
assign 0 to v1460:0
assign rdx to v613:0
assign 2 to v613:0
assign r11 to v1375:6
assign 11 to v1375:6
assign r14 to v90:8
assign 14 to v90:8
assign r9 to v80:9
assign 9 to v80:9
v178:7 not intersect with v1352:0, removed
v178:8 intersect with v1352:0, adding
assign rdx to v612:0
assign 2 to v612:0
v178:8 not intersect with v1352:0, removed
v178:9 intersect with v1352:0, adding
assign rax to v178:8
assign 0 to v178:8
v185:7 not intersect with v1352:0, removed
v185:8 intersect with v1352:0, adding
v185:8 not intersect with v1352:0, removed
v185:9 intersect with v1352:0, adding
assign rdx to v185:8
assign 2 to v185:8
assign rcx to v609:0
assign 1 to v609:0
assign r8 to v67:7
assign 8 to v67:7
v471:5 not intersect with v465:0, removed
v471:6 intersect with v465:0, adding
v471:6 not intersect with v465:0, removed
v471:7 intersect with v465:0, adding
assign r15 to v471:6
assign 15 to v471:6
assign rdx to v611:0
assign 2 to v611:0
v3:10 not intersect with v1343:0, removed
v3:11 intersect with v1343:0, adding
assign rdx to v610:0
assign 2 to v610:0
v3:11 not intersect with v1343:0, removed
v3:12 intersect with v1343:0, adding
assign rsi to v3:11
assign 6 to v3:11
assign rdx to v606:0
assign 2 to v606:0
assign r8 to v67:6
assign 8 to v67:6
assign rcx to v608:0
assign 1 to v608:0
assign r11 to v1375:5
assign 11 to v1375:5
assign r12 to v1459:1
assign 12 to v1459:1
assign r12 to v1456:1
assign 12 to v1456:1
assign rbx to v1457:0
assign 3 to v1457:0
assign rcx to v1458:0
assign 1 to v1458:0
assign r12 to v1454:0
assign 12 to v1454:0
assign rbx to v1455:1
assign 3 to v1455:1
v3:12 not intersect with v1343:0, removed
v3:13 intersect with v1343:0, adding
assign rdi to v594:0
assign 7 to v594:0
assign r12 to v3:12
assign 12 to v3:12
assign rdx to v602:0
assign 2 to v602:0
v178:9 not intersect with v1352:0, removed
v178:10 intersect with v1352:0, adding
assign rcx to v178:9
assign 1 to v178:9
assign r15 to v604:0
assign 15 to v604:0
assign r15 to v603:0
v185:9 not intersect with v1352:0, removed
v185:10 intersect with v1352:0, adding
assign 15 to v603:0
assign rdi to v185:9
assign 7 to v185:9
assign rcx to v596:0
assign 1 to v596:0
assign r15 to v597:0
assign 15 to v597:0
assign rdx to v601:0
assign 2 to v601:0
blocking v1375 pick register r8
assign rdx to v600:0
assign 2 to v600:0
assign rbx to v599:1
assign 3 to v599:1
blocking v67 pick register r8
assign r15 to v595:1
assign 15 to v595:1
assign rsi to v598:1
assign 6 to v598:1
assign r15 to v43:29
assign 15 to v43:29
blocking v2 pick register r8
assign rax to v1453:0
assign 0 to v1453:0
assign r11 to v1375:9
assign 11 to v1375:9
v3:13 not intersect with v1343:0, removed
v3:14 intersect with v1343:0, adding
v3:14 not intersect with v1343:0, removed
v3:15 intersect with v1343:0, adding
assign rsi to v3:14
assign 6 to v3:14
assign r8 to v67:10
assign 8 to v67:10
v471:7 not intersect with v465:0, removed
v471:8 intersect with v465:0, adding
blocking v3 pick register r8
v471:8 not intersect with v465:0, removed
v471:9 intersect with v465:0, adding
assign r15 to v471:8
assign 15 to v471:8
v185:10 not intersect with v1352:0, removed
v185:11 intersect with v1352:0, adding
v185:11 not intersect with v1352:0, removed
v185:12 intersect with v1352:0, adding
assign rdx to v185:11
assign 2 to v185:11
v178:10 not intersect with v1352:0, removed
v178:11 intersect with v1352:0, adding
v178:11 not intersect with v1352:0, removed
v178:12 intersect with v1352:0, adding
assign rax to v178:11
assign 0 to v178:11
assign r9 to v80:11
assign 9 to v80:11
blocking v10 pick register r8
assign r14 to v90:10
assign 14 to v90:10
assign r8 to v67:9
assign 8 to v67:9
blocking v25 pick register r8
assign r11 to v1375:8
assign 11 to v1375:8
assign r12 to v1452:1
assign 12 to v1452:1
blocking v43 pick register r8
assign r12 to v1451:0
assign 12 to v1451:0
blocking v49 pick register r8
assign r12 to v1449:0
assign 12 to v1449:0
assign r8 to v2:19
assign 8 to v2:19
assign r12 to v1448:0
assign 12 to v1448:0
assign r9 to v590:0
assign 9 to v590:0
assign r11 to v10:18
assign 11 to v10:18
assign r12 to v1447:0
assign 12 to v1447:0
assign r12 to v1440:0
assign 12 to v1440:0
assign r12 to v592:0
assign 12 to v592:0
assign rax to v586:0
assign 0 to v586:0
assign r9 to v80:6
assign 9 to v80:6
assign r12 to v25:23
assign 12 to v25:23
assign rbx to v1441:0
assign 3 to v1441:0
assign r14 to v584:0
assign 14 to v584:0
assign rcx to v1446:0
assign 1 to v1446:0
assign r15 to v591:0
assign 15 to v591:0
assign r15 to v589:0
assign 15 to v589:0
assign r14 to v90:5
assign 14 to v90:5
assign r9 to v588:0
assign 9 to v588:0
assign rbx to v1445:1
assign 3 to v1445:1
blocking v2 pick register r8
assign rbx to v185:13
assign 3 to v185:13
blocking v10 pick register r11
blocking v25 pick register r12
assign rax to v585:0
assign 0 to v585:0
assign r12 to v25:27
assign 12 to v25:27
assign r11 to v10:22
assign 11 to v10:22
assign r8 to v2:23
assign 8 to v2:23
blocking v80 pick register r9
assign r14 to v582:0
assign 14 to v582:0
assign r9 to v583:1
assign 9 to v583:1
blocking v1375 pick register r11
assign rax to v43:32
assign 0 to v43:32
assign r12 to v49:18
assign 12 to v49:18
assign r9 to v3:23
assign 9 to v3:23
assign r14 to v25:28
assign 14 to v25:28
assign r8 to v2:22
assign 8 to v2:22
assign rax to v1444:0
assign 0 to v1444:0
assign r15 to v569:0
assign 15 to v569:0
assign r11 to v10:21
assign 11 to v10:21
assign r8 to v1442:0
assign 8 to v1442:0
assign rdx to v581:0
assign 2 to v581:0
assign r14 to v90:13
assign 14 to v90:13
assign r9 to v80:15
assign 9 to v80:15
assign r12 to v1440:2
assign 12 to v1440:2
assign rdx to v580:0
assign 2 to v580:0
assign r11 to v1375:13
assign 11 to v1375:13
assign rax to v178:14
assign 0 to v178:14
assign rdx to v185:15
assign 2 to v185:15
assign r8 to v67:13
assign 8 to v67:13
assign r15 to v471:11
assign 15 to v471:11
assign r14 to v25:26
assign 14 to v25:26
assign rsi to v3:17
assign 6 to v3:17
assign rbx to v1438:0
assign 3 to v1438:0
assign rcx to v577:0
assign 1 to v577:0
assign rcx to v1439:0
assign 1 to v1439:0
assign r12 to v1437:0
assign 12 to v1437:0
assign rdx to v579:0
assign 2 to v579:0
assign r9 to v80:14
assign 9 to v80:14
assign rdx to v578:0
assign 2 to v578:0
assign rcx to v1436:0
assign 1 to v1436:0
assign rdx to v574:0
assign 2 to v574:0
assign r12 to v1435:0
assign 12 to v1435:0
assign rcx to v1425:0
assign 1 to v1425:0
assign rcx to v576:0
assign 1 to v576:0
assign r12 to v1433:0
assign 12 to v1433:0
assign rdi to v1434:1
assign 7 to v1434:1
assign r12 to v1431:1
assign 12 to v1431:1
assign r12 to v1428:1
assign 12 to v1428:1
assign r11 to v1375:12
assign 11 to v1375:12
assign rbx to v1429:0
assign 3 to v1429:0
assign rdi to v1430:0
assign 7 to v1430:0
assign r12 to v1426:0
assign 12 to v1426:0
assign rbx to v1427:0
assign 3 to v1427:0
assign r12 to v1424:0
assign 12 to v1424:0
v467:0 not intersect with v2:2, removed
assign r12 to v1422:0
assign 12 to v1422:0
v467:1 intersect with v470:0, adding
assign rdx to v467:0
assign 2 to v467:0
assign rbx to v1423:1
assign 3 to v1423:1
assign rcx to v571:0
assign 1 to v571:0
assign rsi to v573:0
assign 6 to v573:0
assign rsi to v572:0
assign 6 to v572:0
v3:15 not intersect with v1343:0, removed
v3:18 intersect with v1343:0, adding
assign r12 to v3:15
assign 12 to v3:15
assign rdi to v468:0
assign 7 to v468:0
v178:12 not intersect with v1352:0, removed
v178:15 intersect with v1352:0, adding
assign rcx to v178:12
assign 1 to v178:12
v469:0 not intersect with v571:0, removed
assign rcx to v469:0
assign 1 to v469:0
v185:12 not intersect with v1352:0, removed
v185:16 intersect with v1352:0, adding
assign rdi to v185:12
assign 7 to v185:12
assign rsi to v570:0
assign 6 to v570:0
assign rsi to v568:0
assign 6 to v568:0
assign rbx to v567:1
assign 3 to v567:1
blocking v1375 pick register r8
v470:0 not intersect with v467:1, removed
v470:1 intersect with v467:1, adding
v470:0 not intersect with v533:0, removed
v470:1 intersect with v533:0, adding
assign rsi to v470:0
assign 6 to v470:0
blocking v67 pick register r8
assign r15 to v551:1
assign 15 to v551:1
assign rbx to v553:1
assign 3 to v553:1
blocking v80 pick register r8
blocking v90 pick register r8
blocking v470 pick register r8
assign rax to v1421:0
assign 0 to v1421:0
assign r11 to v1375:15
assign 11 to v1375:15
assign r9 to v80:17
assign 9 to v80:17
v3:18 not intersect with v1343:0, removed
v3:19 intersect with v1343:0, adding
v3:19 not intersect with v1343:0, removed
v3:20 intersect with v1343:0, adding
assign rsi to v3:19
assign 6 to v3:19
v471:9 not intersect with v465:0, removed
v471:12 intersect with v465:0, adding
v471:12 not intersect with v465:0, removed
v471:13 intersect with v465:0, adding
assign r15 to v471:12
assign 15 to v471:12
assign r8 to v67:15
assign 8 to v67:15
v185:16 not intersect with v1352:0, removed
v185:17 intersect with v1352:0, adding
v185:17 not intersect with v1352:0, removed
v185:18 intersect with v1352:0, adding
assign rdx to v185:17
assign 2 to v185:17
v178:15 not intersect with v1352:0, removed
blocking v2 pick register r8
v178:16 intersect with v1352:0, adding
v178:16 not intersect with v1352:0, removed
v178:17 intersect with v1352:0, adding
assign rax to v178:16
assign 0 to v178:16
assign r14 to v90:15
assign 14 to v90:15
assign r8 to v67:14
assign 8 to v67:14
assign r11 to v1375:14
assign 11 to v1375:14
assign r12 to v1420:1
assign 12 to v1420:1
blocking v10 pick register r8
assign r12 to v1416:0
assign 12 to v1416:0
assign rcx to v1417:1
assign 1 to v1417:1
blocking v25 pick register r8
assign rbx to v1418:0
assign 3 to v1418:0
assign rax to v565:0
assign 0 to v565:0
assign rdi to v1419:0
assign 7 to v1419:0
assign r8 to v43:31
assign 8 to v43:31
assign r12 to v1415:0
assign 12 to v1415:0
assign r9 to v563:0
assign 9 to v563:0
assign r12 to v1413:0
assign 12 to v1413:0
assign r12 to v566:0
assign 12 to v566:0
assign r12 to v564:0
assign 12 to v564:0
assign rbx to v1414:1
assign 3 to v1414:1
assign rax to v552:1
assign 0 to v552:1
v3:20 not intersect with v1343:0, removed
v3:21 intersect with v1343:0, adding
assign r12 to v3:20
assign 12 to v3:20
assign r9 to v552:2
assign 9 to v552:2
v178:17 not intersect with v1352:0, removed
v178:18 intersect with v1352:0, adding
assign rcx to v178:17
assign 1 to v178:17
v185:18 not intersect with v1352:0, removed
v185:19 intersect with v1352:0, adding
assign rdi to v185:18
assign 7 to v185:18
blocking v43 pick register r8
assign rax to v561:0
assign 0 to v561:0
assign r8 to v43:35
assign 8 to v43:35
blocking v1375 pick register r8
assign r9 to v559:0
assign 9 to v559:0
assign r12 to v562:0
assign 12 to v562:0
blocking v67 pick register r8
assign r12 to v560:0
assign 12 to v560:0
blocking v43 pick register r8
assign rax to v556:0
assign 0 to v556:0
assign r8 to v43:37
assign 8 to v43:37
assign r9 to v554:0
assign 9 to v554:0
assign rax to v1412:0
assign 0 to v1412:0
assign r11 to v1375:18
assign 11 to v1375:18
assign r12 to v557:0
assign 12 to v557:0
assign r14 to v90:17
assign 14 to v90:17
assign r12 to v555:0
assign 12 to v555:0
v178:18 not intersect with v1352:0, removed
v178:19 intersect with v1352:0, adding
v178:19 not intersect with v1352:0, removed
v178:20 intersect with v1352:0, adding
assign rax to v178:19
assign 0 to v178:19
v185:19 not intersect with v1352:0, removed
v185:20 intersect with v1352:0, adding
v185:20 not intersect with v1352:0, removed
v185:21 intersect with v1352:0, adding
assign rdx to v185:20
assign 2 to v185:20
assign r8 to v67:18
assign 8 to v67:18
v471:13 not intersect with v465:0, removed
v471:14 intersect with v465:0, adding
v471:14 not intersect with v465:0, removed
v471:15 intersect with v465:0, adding
blocking v43 pick register r8
assign r15 to v471:14
assign 15 to v471:14
v3:21 not intersect with v1343:0, removed
v3:22 intersect with v1343:0, adding
assign rax to v510:0
assign 0 to v510:0
v3:22 not intersect with v1343:0, removed
v3:23 intersect with v1343:0, adding
assign rsi to v3:22
assign 6 to v3:22
assign r9 to v80:19
assign 9 to v80:19
assign r8 to v373:1
assign 8 to v373:1
assign r8 to v373:4
assign 8 to v373:4
assign r8 to v67:17
assign 8 to v67:17
assign r9 to v538:0
assign 9 to v538:0
assign r11 to v1375:17
assign 11 to v1375:17
assign r11 to v43:39
assign 11 to v43:39
assign r12 to v1411:1
assign 12 to v1411:1
assign r12 to v548:0
assign 12 to v548:0
assign r12 to v1407:0
assign 12 to v1407:0
assign r14 to v550:0
assign 14 to v550:0
assign rcx to v1408:1
assign 1 to v1408:1
assign r14 to v549:0
assign 14 to v549:0
assign rbx to v1409:0
assign 3 to v1409:0
assign r12 to v537:0
assign 12 to v537:0
assign rdi to v1410:0
assign 7 to v1410:0
assign r9 to v473:0
assign 9 to v473:0
assign r12 to v1406:0
assign 12 to v1406:0
assign r12 to v474:0
assign 12 to v474:0
assign r12 to v1404:0
assign 12 to v1404:0
assign r14 to v475:0
assign 14 to v475:0
assign rbx to v1405:1
assign 3 to v1405:1
assign r15 to v476:0
assign 15 to v476:0
assign rbx to v535:1
assign 3 to v535:1
v3:23 not intersect with v1343:0, removed
v3:24 intersect with v1343:0, adding
assign r12 to v3:23
assign 12 to v3:23
assign rdx to v536:1
assign 2 to v536:1
v178:20 not intersect with v1352:0, removed
v178:21 intersect with v1352:0, adding
assign rcx to v178:20
assign 1 to v178:20
assign rdx to v534:0
assign 2 to v534:0
v185:21 not intersect with v1352:0, removed
v185:22 intersect with v1352:0, adding
assign rdx to v521:0
assign 2 to v521:0
assign rdi to v185:21
assign 7 to v185:21
assign rbx to v470:2
assign 3 to v470:2
assign rcx to v533:0
assign 1 to v533:0
assign rsi to v10:23
assign 6 to v10:23
blocking v1375 pick register r8
assign rcx to v445:0
assign 1 to v445:0
blocking v67 pick register r8
assign rdi to v531:0
assign 7 to v531:0
blocking v519 pick register r8
assign r8 to v519:0
assign 8 to v519:0
blocking v506 pick register r11
assign r11 to v506:0
assign 11 to v506:0
assign rax to v1403:0
assign 0 to v1403:0
assign r11 to v1375:21
assign 11 to v1375:21
assign r9 to v80:21
assign 9 to v80:21
v3:24 not intersect with v1343:0, removed
v3:25 intersect with v1343:0, adding
assign rsi to v3:25
assign 6 to v3:25
assign r8 to v67:21
assign 8 to v67:21
blocking v532 pick register rsi
assign rsi to v532:0
assign 6 to v532:0
v471:15 not intersect with v465:0, removed
v471:16 intersect with v465:0, adding
v471:16 not intersect with v465:0, removed
v471:17 intersect with v465:0, adding
assign r15 to v471:16
assign 15 to v471:16
v185:22 not intersect with v1352:0, removed
v185:23 intersect with v1352:0, adding
assign rdx to v185:23
assign 2 to v185:23
v178:21 not intersect with v1352:0, removed
v178:22 intersect with v1352:0, adding
assign rax to v178:22
assign 0 to v178:22
assign r14 to v90:19
assign 14 to v90:19
assign rsi to v10:27
assign 6 to v10:27
assign r8 to v67:20
assign 8 to v67:20
assign rdi to v464:0
assign 7 to v464:0
assign r11 to v1375:20
assign 11 to v1375:20
assign r12 to v1402:1
assign 12 to v1402:1
blocking v520 pick register rsi
assign rsi to v520:1
assign 6 to v520:1
assign r12 to v1401:0
assign 12 to v1401:0
assign rcx to v1384:0
assign 1 to v1384:0
assign r11 to v503:0
assign 11 to v503:0
assign r11 to v500:0
assign 11 to v500:0
blocking v1383 pick register rdx
assign rdx to v1383:0
assign 2 to v1383:0
v185:23 not intersect with v1352:0, removed
v185:24 intersect with v1352:0, adding
assign rsi to v502:1
assign 6 to v502:1
blocking v1382 pick register rax
assign rax to v1382:0
assign 0 to v1382:0
v178:22 not intersect with v1352:0, removed
v178:23 intersect with v1352:0, adding
assign r12 to v1394:0
assign 12 to v1394:0
assign r8 to v470:3
assign 8 to v470:3
assign r9 to v80:16
assign 9 to v80:16
assign rbx to v1395:0
assign 3 to v1395:0
blocking v445 pick register rcx
assign rdi to v1400:0
assign 7 to v1400:0
blocking v464 pick register rdi
assign r14 to v90:14
assign 14 to v90:14
assign rbx to v1399:1
assign 3 to v1399:1
assign rbx to v1383:1
assign 3 to v1383:1
assign r11 to v500:2
assign 11 to v500:2
assign r15 to v476:2
assign 15 to v476:2
assign r14 to v475:2
assign 14 to v475:2
assign r12 to v474:2
assign 12 to v474:2
assign r9 to v473:2
assign 9 to v473:2
assign rbx to v470:5
assign 3 to v470:5
assign rdi to v464:3
assign 7 to v464:3
assign rcx to v445:3
assign 1 to v445:3
blocking v1382 pick register rax
assign r11 to v487:0
assign 11 to v487:0
assign r8 to v482:0
assign 8 to v482:0
blocking v1384 pick register rcx
assign r8 to v480:0
assign 8 to v480:0
assign rsi to v481:1
assign 6 to v481:1
blocking v67 pick register r8
assign r11 to v470:6
assign 11 to v470:6
blocking v80 pick register r9
blocking v1375 pick register r11
blocking v90 pick register r14
assign r8 to v480:2
assign 8 to v480:2
blocking v1383 pick register r8
assign rcx to v445:5
assign 1 to v445:5
assign rdi to v464:5
assign 7 to v464:5
assign rbx to v470:8
assign 3 to v470:8
assign r9 to v473:4
assign rax to v1398:0
assign 0 to v1398:0
assign 9 to v473:4
assign r12 to v474:4
assign 12 to v474:4
assign r14 to v475:4
assign 14 to v475:4
assign r15 to v476:4
assign 15 to v476:4
assign r8 to v1396:0
assign 8 to v1396:0
assign r14 to v90:23
assign 14 to v90:23
assign r9 to v80:25
assign 9 to v80:25
assign r12 to v1394:2
assign 12 to v1394:2
assign rax to v1382:3
assign 0 to v1382:3
assign rdx to v1383:4
assign 2 to v1383:4
assign rcx to v1384:3
assign 1 to v1384:3
assign r11 to v1375:24
assign 11 to v1375:24
assign r8 to v67:25
assign 8 to v67:25
assign r8 to v465:0
assign 8 to v465:0
assign r15 to v471:19
assign 15 to v471:19
assign rsi to v3:27
assign 6 to v3:27
assign rdi to v464:2
assign 7 to v464:2
assign rbx to v1391:0
assign 3 to v1391:0
assign r12 to v1393:0
assign 12 to v1393:0
assign r8 to v463:0
assign 8 to v463:0
assign r8 to v462:0
assign 8 to v462:0
assign rdi to v1392:0
assign 7 to v1392:0
assign r12 to v1390:0
assign 12 to v1390:0
assign r9 to v80:24
assign 9 to v80:24
assign rdi to v1389:0
assign 7 to v1389:0
assign r12 to v1388:0
assign 12 to v1388:0
assign rdi to v1376:0
assign 7 to v1376:0
assign r8 to v28:12
assign 8 to v28:12
assign r12 to v1386:0
assign 12 to v1386:0
assign r9 to v456:0
assign 9 to v456:0
assign r12 to v461:0
assign 12 to v461:0
blocking v1387 pick register r15
assign r15 to v1387:1
assign 15 to v1387:1
assign rcx to v1384:2
assign 1 to v1384:2
assign r11 to v36:20
assign 11 to v36:20
assign rdx to v460:1
assign 2 to v460:1
assign r12 to v1383:3
assign 12 to v1383:3
assign rax to v1382:2
assign 0 to v1382:2
assign r12 to v1381:1
assign 12 to v1381:1
assign r12 to v1374:1
assign 12 to v1374:1
assign r8 to v67:24
assign 8 to v67:24
assign r11 to v1375:23
assign 11 to v1375:23
blocking v28 pick register r8
assign r12 to v1379:0
assign 12 to v1379:0
blocking v36 pick register r8
assign r15 to v1380:0
assign 15 to v1380:0
assign rax to v459:0
assign 0 to v459:0
assign r9 to v457:0
assign 9 to v457:0
assign r12 to v1377:0
assign 12 to v1377:0
assign r11 to v36:28
assign 11 to v36:28
assign r15 to v1378:0
assign 15 to v1378:0
assign r8 to v28:15
assign 8 to v28:15
assign rcx to v445:7
assign 1 to v445:7
v1374:1 not intersect with v1373:0, removed
v1374:2 intersect with v1373:0, adding
assign r9 to v454:0
assign 9 to v454:0
v178:23 not intersect with v1352:0, removed
v178:24 intersect with v1352:0, adding
assign rax to v178:24
assign 0 to v178:24
v185:24 not intersect with v1352:0, removed
v185:25 intersect with v1352:0, adding
assign rdx to v185:25
assign 2 to v185:25
assign r8 to v455:0
assign 8 to v455:0
assign r15 to v471:21
assign 15 to v471:21
assign r12 to v1374:2
assign 12 to v1374:2
assign r11 to v28:14
assign 11 to v28:14
assign rcx to v1373:0
assign 1 to v1373:0
assign r8 to v453:0
assign 8 to v453:0
v178:24 not intersect with v1352:0, removed
assign r8 to v450:0
assign 8 to v450:0
v178:25 intersect with v1352:0, adding
v185:25 not intersect with v1352:0, removed
v185:26 intersect with v1352:0, adding
assign r9 to v452:1
assign 9 to v452:1
assign rcx to v445:9
assign 1 to v445:9
assign r11 to v1367:0
assign 11 to v1367:0
assign r8 to v446:0
assign 8 to v446:0
assign rcx to v445:2
assign 1 to v445:2
assign r12 to v1372:0
assign 12 to v1372:0
assign r14 to v90:22
assign 14 to v90:22
assign r9 to v447:0
assign 9 to v447:0
assign r11 to v448:0
assign 11 to v448:0
assign rdx to v1371:1
assign 2 to v1371:1
assign r8 to v2:24
assign 8 to v2:24
assign r9 to v440:0
assign 9 to v440:0
assign r11 to v10:26
assign 11 to v10:26
assign r12 to v444:0
assign 12 to v444:0
blocking v80 pick register r9
assign r12 to v442:0
assign 12 to v442:0
assign r14 to v25:29
assign rax to v1370:0
assign 0 to v1370:0
assign 14 to v25:29
assign rax to v437:0
assign 0 to v437:0
assign r8 to v1368:0
assign 8 to v1368:0
assign r15 to v443:0
assign 15 to v443:0
assign r14 to v90:25
assign 14 to v90:25
assign r8 to v67:27
assign 8 to v67:27
assign r12 to v441:0
assign 12 to v441:0
assign r9 to v80:28
assign 9 to v80:28
assign r12 to v439:0
assign 12 to v439:0
assign rsi to v3:29
assign 6 to v3:29
assign r11 to v1366:0
assign 11 to v1366:0
assign r9 to v438:1
assign 9 to v438:1
assign r12 to v1363:0
assign 12 to v1363:0
assign r9 to v80:27
assign 9 to v80:27
assign r15 to v1365:0
assign 15 to v1365:0
assign r9 to v3:25
assign 9 to v3:25
assign r15 to v1352:0
assign 15 to v1352:0
assign r12 to v49:20
assign 12 to v49:20
assign rax to v43:42
assign 0 to v43:42
assign r11 to v178:4
assign 11 to v178:4
assign rax to v185:4
assign 0 to v185:4
assign r9 to v424:0
assign 9 to v424:0
assign rdx to v1364:1
assign 2 to v1364:1
assign r12 to v436:0
assign 12 to v436:0
assign rdx to v1360:0
assign 2 to v1360:0
assign r12 to v435:0
assign 12 to v435:0
assign r12 to v1362:0
assign 12 to v1362:0
assign rax to v432:0
assign 0 to v432:0
assign r12 to v1351:0
assign 12 to v1351:0
assign r12 to v434:0
assign 12 to v434:0
assign rcx to v1361:1
assign 1 to v1361:1
assign r12 to v433:0
assign 12 to v433:0
assign rcx to v1357:0
assign 1 to v1357:0
assign r12 to v429:0
assign 12 to v429:0
assign rdx to v1359:0
assign rax to v431:0
assign 0 to v431:0
assign 2 to v1359:0
assign rdx to v1350:0
assign 2 to v1350:0
assign rdi to v1358:1
assign 7 to v1358:1
assign rdi to v1354:0
assign 7 to v1354:0
assign rcx to v1356:0
assign 1 to v1356:0
assign rcx to v1349:0
assign 1 to v1349:0
blocking v1355 pick register r8
assign r8 to v1355:1
assign 8 to v1355:1
assign r8 to v1348:0
assign 8 to v1348:0
assign rdi to v1353:0
assign 7 to v1353:0
assign rdi to v1346:0
assign 7 to v1346:0
assign rdi to v417:0
assign 7 to v417:0
assign r12 to v426:0
assign 12 to v426:0
assign r15 to v428:0
blocking v388 pick register r14
assign 15 to v428:0
assign r14 to v388:1
assign 14 to v388:1
assign r15 to v427:0
assign 15 to v427:0
assign rax to v419:0
assign 0 to v419:0
assign r12 to v1342:0
assign 12 to v1342:0
assign r12 to v420:0
assign 12 to v420:0
assign r8 to v1347:0
assign 8 to v1347:0
assign r8 to v1343:0
assign 8 to v1343:0
assign r15 to v425:0
assign 15 to v425:0
assign r15 to v423:0
assign 15 to v423:0
v184:1 not intersect with v603:0, removed
v184:2 intersect with v603:0, adding
v184:1 not intersect with v844:0, removed
v184:2 intersect with v844:0, adding
v184:1 not intersect with v576:0, removed
v184:2 intersect with v576:0, adding
v184:1 not intersect with v879:0, removed
v184:2 intersect with v879:0, adding
v184:1 not intersect with v108:0, removed
v184:2 intersect with v108:0, adding
v184:1 not intersect with v1080:0, removed
v184:2 intersect with v1080:0, adding
assign rbx to v422:1
v184:1 not intersect with v863:0, removed
assign 3 to v422:1
v184:2 intersect with v863:0, adding
v184:1 not intersect with v891:0, removed
v184:2 intersect with v891:0, adding
v184:1 not intersect with v215:0, removed
v184:2 intersect with v215:0, adding
v184:1 not intersect with v911:0, removed
v184:2 intersect with v911:0, adding
v184:1 not intersect with v1182:0, removed
v184:2 intersect with v1182:0, adding
v184:1 not intersect with v974:0, removed
v184:2 intersect with v974:0, adding
v184:1 not intersect with v1148:0, removed
v184:2 intersect with v1148:0, adding
assign r9 to v418:1
assign 9 to v418:1
v184:1 not intersect with v1046:0, removed
v184:2 intersect with v1046:0, adding
v184:1 not intersect with v418:0, removed
assign rsi to v421:1
assign 6 to v421:1
v184:2 intersect with v418:0, adding
v184:2 intersect with v4:0, adding
v184:1 not intersect with v216:0, removed
v184:2 intersect with v216:0, adding
v184:1 not intersect with v888:0, removed
v184:2 intersect with v888:0, adding
v184:1 not intersect with v1011:0, removed
v184:2 intersect with v1011:0, adding
v184:1 not intersect with v1216:0, removed
v184:2 intersect with v1216:0, adding
v184:1 not intersect with v210:0, removed
v184:2 intersect with v210:0, adding
v184:1 not intersect with v1114:0, removed
v184:2 intersect with v1114:0, adding
assign r15 to v184:1
assign 15 to v184:1
assign r9 to v10:24
assign 9 to v10:24
assign r11 to v43:43
assign 11 to v43:43
assign rsi to v3:7
assign 6 to v3:7
assign rbx to v1344:0
assign 3 to v1344:0
blocking v2 pick register r8
assign rdx to v1345:0
assign 2 to v1345:0
assign r8 to v1339:0
assign 8 to v1339:0
assign r12 to v1341:0
assign 12 to v1341:0
assign r12 to v1328:0
assign 12 to v1328:0
blocking v10 pick register r8
assign rdx to v1340:1
assign 2 to v1340:1
assign rdx to v1336:0
assign 2 to v1336:0
blocking v25 pick register r8
assign r8 to v1338:0
assign 8 to v1338:0
assign r8 to v1327:0
assign 8 to v1327:0
blocking v43 pick register r8
assign rcx to v1337:1
assign 1 to v1337:1
assign rcx to v1333:0
assign 1 to v1333:0
assign rdx to v1335:0
assign 2 to v1335:0
assign rdx to v1326:0
assign 2 to v1326:0
blocking v28 pick register r8
assign rdi to v1334:1
assign 7 to v1334:1
assign rdi to v1330:0
assign 7 to v1330:0
assign rcx to v1332:0
assign 1 to v1332:0
assign rcx to v1325:0
assign 1 to v1325:0
assign r8 to v2:26
assign 8 to v2:26
assign r9 to v411:0
assign 9 to v411:0
blocking v1331 pick register rsi
assign rsi to v1331:1
assign 6 to v1331:1
assign r11 to v10:30
assign 11 to v10:30
assign rsi to v1324:0
assign 6 to v1324:0
assign r12 to v415:0
assign 12 to v415:0
assign rdi to v1329:0
assign 7 to v1329:0
assign r12 to v413:0
assign 12 to v413:0
assign rdi to v1322:0
assign 7 to v1322:0
assign r14 to v25:31
assign 14 to v25:31
assign r8 to v1318:0
assign 8 to v1318:0
assign rax to v408:0
assign 0 to v408:0
assign r12 to v1323:0
assign 12 to v1323:0
assign r15 to v414:0
assign 15 to v414:0
assign rdx to v1319:0
assign 2 to v1319:0
assign r12 to v412:0
assign 12 to v412:0
assign r12 to v410:0
assign 12 to v410:0
assign r12 to v3:32
assign 12 to v3:32
assign r9 to v409:1
assign 9 to v409:1
assign rbx to v1320:0
assign 3 to v1320:0
assign rcx to v1321:0
assign 1 to v1321:0
assign rdx to v1315:0
assign 2 to v1315:0
assign r9 to v395:0
assign 9 to v395:0
assign r8 to v1317:0
assign 8 to v1317:0
assign r8 to v1304:0
assign 8 to v1304:0
assign r12 to v407:0
assign 12 to v407:0
assign rcx to v1316:1
assign 1 to v1316:1
assign r12 to v406:0
assign 12 to v406:0
assign rcx to v1312:0
assign 1 to v1312:0
assign rax to v403:0
assign 0 to v403:0
assign r12 to v405:0
assign 12 to v405:0
assign rdx to v1314:0
assign 2 to v1314:0
assign r12 to v404:0
assign 12 to v404:0
assign rdx to v1303:0
assign 2 to v1303:0
assign r12 to v400:0
assign 12 to v400:0
assign rsi to v1313:1
assign 6 to v1313:1
assign rax to v402:0
assign 0 to v402:0
assign rsi to v1309:0
assign 6 to v1309:0
assign rcx to v1311:0
assign 1 to v1311:0
assign rcx to v1302:0
assign 1 to v1302:0
assign rdi to v1310:1
assign 7 to v1310:1
assign rdi to v1306:0
assign 7 to v1306:0
assign rsi to v1308:0
assign 6 to v1308:0
assign rsi to v1301:0
assign 6 to v1301:0
blocking v1307 pick register r12
assign r12 to v1307:1
assign 12 to v1307:1
assign r12 to v1300:0
assign 12 to v1300:0
assign rdi to v1305:0
assign 7 to v1305:0
assign rdi to v1298:0
assign 7 to v1298:0
v289:0 not intersect with v2:2, removed
v289:1 intersect with v292:0, adding
assign r12 to v289:0
assign 12 to v289:0
assign r8 to v1290:0
assign 8 to v1290:0
assign r15 to v397:0
assign 15 to v397:0
assign r12 to v1299:0
assign 12 to v1299:0
assign rax to v399:0
assign 0 to v399:0
assign rax to v398:0
assign 0 to v398:0
assign rdx to v1295:0
assign 2 to v1295:0
assign rdx to v290:0
assign r12 to v3:34
assign 12 to v3:34
assign 2 to v290:0
assign rbx to v1296:0
assign 3 to v1296:0
v291:0 not intersect with v397:0, removed
assign r15 to v291:0
assign 15 to v291:0
assign rcx to v1297:0
assign 1 to v1297:0
assign rax to v396:0
assign 0 to v396:0
assign rax to v394:0
assign 0 to v394:0
v4:0 not intersect with v1262:0, removed
v4:1 intersect with v1262:0, adding
v4:0 not intersect with v1278:1, removed
v4:1 intersect with v1278:1, adding
v4:1 intersect with v184:1, adding
v4:0 not intersect with v1277:0, removed
v4:1 intersect with v1277:0, adding
v4:0 not intersect with v184:2, removed
v4:1 intersect with v184:2, adding
v4:0 not intersect with v1271:0, removed
v4:1 intersect with v1271:0, adding
v4:0 not intersect with v1256:0, removed
assign rbx to v393:1
assign 3 to v393:1
v4:1 intersect with v1256:0, adding
assign rdx to v4:0
assign 2 to v4:0
v292:0 not intersect with v289:1, removed
v292:1 intersect with v289:1, adding
v292:0 not intersect with v357:0, removed
v292:1 intersect with v357:0, adding
assign rcx to v5:0
assign 1 to v5:0
assign r9 to v292:0
assign 9 to v292:0
assign rbx to v574:0
assign 3 to v574:0
assign rcx to v377:1
assign 1 to v377:1
assign rbx to v379:1
assign 3 to v379:1
assign rsi to v2:1
assign 6 to v2:1
assign rax to v384:1
assign 0 to v384:1
assign rdi to v20:1
assign 7 to v20:1
assign rdi to v290:1
assign 7 to v290:1
blocking v1294 pick register rcx
assign rcx to v1294:0
assign 1 to v1294:0
assign rcx to v1287:0
assign 1 to v1287:0
blocking v1293 pick register r11
assign r11 to v1293:0
assign 11 to v1293:0
assign r11 to v1292:0
assign 11 to v1292:0
blocking v2 pick register r8
blocking v1291 pick register r12
assign r12 to v1291:0
assign 12 to v1291:0
blocking v292 pick register r8
assign r8 to v1289:0
assign 8 to v1289:0
assign r8 to v1285:0
assign 8 to v1285:0
assign r12 to v1288:1
assign 12 to v1288:1
blocking v10 pick register r8
assign r12 to v3:36
assign 12 to v3:36
assign r11 to v1041:0
assign 11 to v1041:0
blocking v25 pick register r8
assign rax to v391:0
assign 0 to v391:0
assign r8 to v1282:1
assign 8 to v1282:1
assign r8 to v43:45
assign 8 to v43:45
assign r8 to v1281:1
assign 8 to v1281:1
assign r9 to v389:0
assign 9 to v389:0
assign rcx to v1283:1
assign 1 to v1283:1
assign r12 to v392:0
assign 12 to v392:0
assign r12 to v390:0
assign 12 to v390:0
assign rax to v378:1
assign 0 to v378:1
assign rcx to v2:2
assign 1 to v2:2
assign r9 to v378:2
assign 9 to v378:2
assign r8 to v3:30
assign 8 to v3:30
blocking v43 pick register r8
blocking v4 pick register r8
assign rax to v387:0
assign 0 to v387:0
assign r12 to v185:27
assign 12 to v185:27
assign r8 to v43:47
assign 8 to v43:47
assign r9 to v385:0
assign 9 to v385:0
assign r12 to v388:0
assign 12 to v388:0
assign r12 to v386:0
assign 12 to v386:0
blocking v3 pick register r8
blocking v43 pick register r8
assign rax to v382:0
assign 0 to v382:0
blocking v178 pick register r8
assign r8 to v43:49
assign 8 to v43:49
assign r9 to v380:0
assign 9 to v380:0
assign r12 to v383:0
assign 12 to v383:0
blocking v184 pick register r8
assign r12 to v381:0
assign 12 to v381:0
blocking v43 pick register r8
assign rax to v334:0
assign 0 to v334:0
blocking v80 pick register r8
assign r8 to v362:0
assign 8 to v362:0
blocking v90 pick register r8
assign r9 to v43:51
assign 9 to v43:51
assign r12 to v374:0
assign 12 to v374:0
blocking v185 pick register r8
assign r14 to v376:0
assign 14 to v376:0
assign r14 to v375:0
assign 14 to v375:0
blocking v388 pick register r8
assign r11 to v361:0
assign 11 to v361:0
assign r8 to v295:0
assign 8 to v295:0
assign r11 to v296:0
assign 11 to v296:0
blocking v67 pick register r8
assign r12 to v297:0
assign 12 to v297:0
assign r14 to v298:0
assign 14 to v298:0
assign rax to v1248:0
assign 0 to v1248:0
assign r15 to v359:1
assign 15 to v359:1
assign r8 to v4:2
assign 8 to v4:2
assign rdx to v360:1
assign 2 to v360:1
assign r9 to v178:28
assign 9 to v178:28
assign r15 to v358:0
assign 15 to v358:0
assign r15 to v345:0
assign 15 to v345:0
assign rbx to v292:2
assign 3 to v292:2
assign r11 to v184:3
assign 11 to v184:3
assign rdx to v357:0
assign 2 to v357:0
assign r12 to v1279:0
assign 12 to v1279:0
assign rcx to v10:32
assign 1 to v10:32
assign r14 to v1280:0
assign 14 to v1280:0
assign rdx to v267:0
assign 2 to v267:0
assign r11 to v184:5
assign 11 to v184:5
assign rsi to v355:0
assign 6 to v355:0
assign r12 to v1278:1
assign 12 to v1278:1
assign rdi to v343:0
assign 7 to v343:0
assign r12 to v1271:0
assign 12 to v1271:0
assign r14 to v1277:0
assign 14 to v1277:0
blocking v330 pick register r9
assign r9 to v330:0
assign 9 to v330:0
assign rdx to v1275:0
assign 2 to v1275:0
assign r14 to v1266:0
assign 14 to v1266:0
assign r15 to v1276:0
assign 15 to v1276:0
blocking v356 pick register rcx
assign rcx to v356:0
assign 1 to v356:0
assign rcx to v10:36
assign 1 to v10:36
assign rdx to v1274:0
assign 2 to v1274:0
assign rsi to v286:0
assign 6 to v286:0
assign rsi to v1273:1
assign 6 to v1273:1
blocking v344 pick register rcx
assign rcx to v344:1
assign 1 to v344:1
assign r12 to v1248:1
assign 12 to v1248:1
assign r9 to v327:0
assign 9 to v327:0
assign r9 to v324:0
assign 9 to v324:0
blocking v4 pick register r8
assign r15 to v326:1
assign 15 to v326:1
blocking v1248 pick register r8
assign r15 to v292:3
assign 15 to v292:3
assign rcx to v286:1
assign 1 to v286:1
blocking v184 pick register r8
assign rax to v1272:0
assign 0 to v1272:0
blocking v267 pick register rdx
assign r14 to v1266:2
assign 14 to v1266:2
assign r11 to v184:7
assign 11 to v184:7
assign r9 to v178:31
assign 9 to v178:31
assign r8 to v4:5
assign 8 to v4:5
assign rax to v1248:4
assign 0 to v1248:4
assign r12 to v1267:0
assign 12 to v1267:0
assign rdx to v1270:0
assign 2 to v1270:0
assign rsi to v1269:1
assign 6 to v1269:1
assign r12 to v1248:5
assign 12 to v1248:5
blocking v286 pick register r8
assign r9 to v324:2
assign 9 to v324:2
assign r14 to v298:2
assign 14 to v298:2
assign r12 to v297:2
assign 12 to v297:2
assign r11 to v296:2
assign 11 to v296:2
assign r8 to v295:2
assign 8 to v295:2
assign rbx to v292:5
assign 3 to v292:5
assign rsi to v286:4
assign 6 to v286:4
assign rdx to v267:3
assign 2 to v267:3
assign r9 to v311:0
assign 9 to v311:0
assign r15 to v306:0
assign 15 to v306:0
assign r15 to v302:0
assign 15 to v302:0
assign rax to v1268:0
assign 0 to v1268:0
assign rax to v1248:7
assign 0 to v1248:7
assign r8 to v4:7
assign 8 to v4:7
assign r9 to v178:33
assign 9 to v178:33
assign r11 to v184:10
assign 11 to v184:10
assign r14 to v1266:4
assign 14 to v1266:4
assign r9 to v305:1
assign 9 to v305:1
assign r12 to v1263:0
assign 12 to v1263:0
assign r8 to v4:4
assign 8 to v4:4
assign r9 to v292:6
assign 9 to v292:6
assign r14 to v1248:3
assign 14 to v1248:3
assign rcx to v286:5
assign 1 to v286:5
assign r8 to v1264:0
assign 8 to v1264:0
assign r15 to v1265:0
assign 15 to v1265:0
assign rax to v1248:8
assign 0 to v1248:8
assign r12 to v1256:0
assign 12 to v1256:0
assign r14 to v1262:0
assign 14 to v1262:0
assign rdx to v1260:0
assign 2 to v1260:0
assign r14 to v1251:0
assign 14 to v1251:0
assign r15 to v1261:0
assign 15 to v1261:0
assign r15 to v302:2
assign 15 to v302:2
assign rdx to v267:5
assign 2 to v267:5
assign rsi to v286:7
assign 6 to v286:7
assign rbx to v292:8
assign 3 to v292:8
assign r8 to v295:4
assign 8 to v295:4
assign r11 to v296:4
assign 11 to v296:4
assign r12 to v297:4
assign 12 to v297:4
assign rdx to v1259:0
assign 2 to v1259:0
assign r14 to v298:4
assign 14 to v298:4
assign rsi to v1258:1
assign 6 to v1258:1
assign r8 to v287:0
assign 8 to v287:0
assign r12 to v1248:9
assign 12 to v1248:9
assign rsi to v285:0
assign 6 to v285:0
assign r8 to v286:3
assign 8 to v286:3
assign rsi to v284:0
assign 6 to v284:0
blocking v4 pick register r8
assign r8 to v28:19
assign 8 to v28:19
assign r9 to v278:0
assign 9 to v278:0
assign r12 to v283:0
assign 12 to v283:0
blocking v1248 pick register r8
assign rax to v1257:0
assign 0 to v1257:0
assign r11 to v36:27
assign 11 to v36:27
assign r14 to v1251:2
assign 14 to v1251:2
assign r9 to v282:1
assign 9 to v282:1
assign r11 to v184:12
assign 11 to v184:12
assign r9 to v178:35
assign 9 to v178:35
assign r8 to v4:10
assign 8 to v4:10
assign rax to v1248:12
assign 0 to v1248:12
assign r12 to v1252:0
assign 12 to v1252:0
assign r9 to v267:6
assign 9 to v267:6
assign rdx to v1255:0
assign 2 to v1255:0
assign rsi to v1254:1
assign 6 to v1254:1
blocking v28 pick register r8
assign r12 to v1248:13
assign 12 to v1248:13
blocking v36 pick register r8
assign rax to v281:0
assign 0 to v281:0
assign r9 to v279:0
assign 9 to v279:0
assign r11 to v36:33
assign 11 to v36:33
assign r8 to v28:22
assign 8 to v28:22
assign rdx to v267:8
assign 2 to v267:8
assign r9 to v276:0
assign 9 to v276:0
assign rax to v1253:0
assign 0 to v1253:0
assign r8 to v277:0
assign 8 to v277:0
assign rax to v1248:15
assign 0 to v1248:15
assign r11 to v28:21
assign 11 to v28:21
assign r8 to v4:12
assign 8 to v4:12
assign r9 to v178:37
assign 9 to v178:37
assign r11 to v184:14
assign 11 to v184:14
assign r14 to v1251:4
assign 14 to v1251:4
assign r8 to v275:0
assign 8 to v275:0
assign r12 to v1247:0
assign 12 to v1247:0
assign r8 to v272:0
assign 8 to v272:0
assign r8 to v4:9
assign 8 to v4:9
assign r9 to v274:1
assign 9 to v274:1
assign rdx to v267:10
assign 2 to v267:10
assign r8 to v1248:11
assign 8 to v1248:11
assign rsi to v268:0
assign 6 to v268:0
assign rdx to v267:2
assign 2 to v267:2
assign r14 to v1249:0
assign 14 to v1249:0
assign r8 to v269:0
assign 8 to v269:0
assign r15 to v1250:0
assign 15 to v1250:0
assign r9 to v270:0
assign 9 to v270:0
assign r8 to v2:28
assign 8 to v2:28
assign rsi to v3:38
assign 6 to v3:38
assign r9 to v262:0
assign 9 to v262:0
v1216:0 not intersect with v184:2, removed
v1216:0 not intersect with v1229:0, removed
v1216:1 intersect with v1229:0, adding
v1216:0 not intersect with v1245:0, removed
v1216:1 intersect with v1245:0, adding
v1216:0 not intersect with v1222:0, removed
v1216:1 intersect with v1222:0, adding
v1216:0 not intersect with v1238:0, removed
v1216:1 intersect with v1238:0, adding
v1216:0 not intersect with v530:1, removed
v1216:1 intersect with v530:1, adding
assign r11 to v10:35
assign 11 to v10:35
assign rax to v1216:0
assign 0 to v1216:0
assign rdx to v1246:0
assign 2 to v1246:0
assign r12 to v266:0
assign 12 to v266:0
assign r8 to v1005:1
assign 8 to v1005:1
assign r12 to v264:0
assign 12 to v264:0
assign r12 to v1004:1
assign 12 to v1004:1
assign r14 to v25:33
assign 14 to v25:33
assign rax to v259:0
assign 0 to v259:0
assign r14 to v1006:1
assign 14 to v1006:1
assign r15 to v265:0
assign 15 to v265:0
assign r12 to v263:0
assign 12 to v263:0
assign r12 to v261:0
assign 12 to v261:0
assign r15 to v3:39
assign 15 to v3:39
assign r9 to v260:1
assign 9 to v260:1
v1216:1 not intersect with v530:1, removed
v1216:2 intersect with v530:1, adding
v1216:1 not intersect with v1238:0, removed
v1216:2 intersect with v1238:0, adding
v1216:1 not intersect with v1222:0, removed
v1216:2 intersect with v1222:0, adding
v1216:1 not intersect with v1245:0, removed
v1216:2 intersect with v1245:0, adding
v1216:1 not intersect with v1229:0, removed
v1216:2 intersect with v1229:0, adding
assign rbx to v1216:1
assign 3 to v1216:1
blocking v3 pick register r8
assign r9 to v3:22
assign 9 to v3:22
assign r12 to v49:17
assign 12 to v49:17
blocking v1216 pick register r8
assign r15 to v256:0
assign 15 to v256:0
assign rax to v258:0
assign 0 to v258:0
assign rax to v257:0
assign 0 to v257:0
blocking v1005 pick register r8
assign r15 to v254:0
assign 15 to v254:0
assign r15 to v255:1
assign 15 to v255:1
assign r15 to v253:0
assign 15 to v253:0
blocking v178 pick register r8
assign rbx to v43:54
assign 3 to v43:54
assign rax to v1213:0
assign 0 to v1213:0
assign rax to v250:0
assign 0 to v250:0
assign r8 to v184:6
assign 8 to v184:6
assign r15 to v252:0
assign 15 to v252:0
assign r15 to v251:0
assign 15 to v251:0
assign r9 to v1216:3
assign 9 to v1216:3
assign r15 to v236:0
assign 15 to v236:0
v530:1 not intersect with v1216:2, removed
v530:1 not intersect with v524:0, removed
v530:2 intersect with v524:0, adding
v530:1 not intersect with v581:0, removed
v530:2 intersect with v581:0, adding
v530:1 not intersect with v1011:0, removed
assign rax to v248:0
assign 0 to v248:0
v530:2 intersect with v1011:0, adding
v530:1 not intersect with v891:0, removed
v530:2 intersect with v891:0, adding
v530:1 not intersect with v1080:0, removed
v530:2 intersect with v1080:0, adding
v530:1 not intersect with v974:0, removed
v530:2 intersect with v974:0, adding
v530:1 not intersect with v1046:0, removed
v530:2 intersect with v1046:0, adding
v530:1 not intersect with v1114:0, removed
v530:2 intersect with v1114:0, adding
v530:1 not intersect with v1148:0, removed
v530:2 intersect with v1148:0, adding
v530:2 intersect with v1182:0, adding
assign rax to v247:0
assign 0 to v247:0
assign r12 to v530:1
assign 12 to v530:1
assign rdx to v240:0
assign 2 to v240:0
assign r14 to v1238:0
assign 14 to v1238:0
assign rax to v246:0
assign 0 to v246:0
assign r15 to v1245:0
assign 15 to v1245:0
assign rax to v241:0
assign 0 to v241:0
assign r15 to v1233:0
assign 15 to v1233:0
assign rcx to v243:0
assign 1 to v243:0
assign rdx to v1244:0
assign 2 to v1244:0
assign rdx to v1242:0
assign 2 to v1242:0
assign rsi to v245:0
assign 6 to v245:0
assign rcx to v1243:0
assign 1 to v1243:0
assign rbx to v1240:1
assign 3 to v1240:1
assign rsi to v1241:1
assign 6 to v1241:1
assign r11 to v1213:1
assign 11 to v1213:1
blocking v1216 pick register r9
blocking v1213 pick register r8
assign r12 to v242:0
assign 12 to v242:0
assign rax to v1239:0
assign 0 to v1239:0
assign r15 to v1233:2
assign 15 to v1233:2
assign r12 to v530:4
assign 12 to v530:4
assign r9 to v1216:6
assign 9 to v1216:6
assign r8 to v184:17
assign 8 to v184:17
assign rax to v1213:4
assign 0 to v1213:4
assign r14 to v1234:0
assign 14 to v1234:0
assign rdx to v1237:0
assign 2 to v1237:0
assign rax to v237:0
assign 0 to v237:0
assign rdx to v239:0
assign 2 to v239:0
assign rsi to v1236:1
assign 6 to v1236:1
assign r11 to v1213:5
assign 11 to v1213:5
assign rax to v1235:0
assign 0 to v1235:0
assign rax to v1213:7
assign 0 to v1213:7
assign r8 to v184:19
assign 8 to v184:19
assign rdi to v225:0
assign r9 to v1216:8
assign 9 to v1216:8
assign 7 to v225:0
assign r12 to v530:6
assign 12 to v530:6
assign r15 to v1233:4
assign 15 to v1233:4
assign r14 to v1230:0
assign 14 to v1230:0
assign rax to v233:0
assign 0 to v233:0
assign r9 to v1216:5
assign 9 to v1216:5
assign r15 to v235:0
assign 15 to v235:0
assign r15 to v234:0
assign 15 to v234:0
assign r11 to v1213:3
assign 11 to v1213:3
assign rdx to v227:0
assign 2 to v227:0
assign r9 to v1231:0
assign 9 to v1231:0
assign r15 to v228:0
assign 15 to v228:0
assign r15 to v1232:0
assign 15 to v1232:0
assign rax to v232:0
assign 0 to v232:0
assign rax to v1213:8
assign 0 to v1213:8
assign rax to v231:0
assign 0 to v231:0
assign r12 to v1222:0
assign 12 to v1222:0
assign rcx to v230:1
assign 1 to v230:1
assign r14 to v1229:0
assign 14 to v1229:0
assign r15 to v226:1
assign 15 to v226:1
assign r14 to v1217:0
assign 14 to v1217:0
assign rsi to v229:1
assign 6 to v229:1
assign rdx to v1228:0
assign 2 to v1228:0
assign rdx to v1226:0
assign 2 to v1226:0
assign r15 to v1227:0
assign 15 to v1227:0
blocking v2 pick register r8
assign rbx to v1224:1
assign 3 to v1224:1
blocking v3 pick register r8
assign rsi to v1225:1
assign 6 to v1225:1
assign r11 to v1213:9
assign 11 to v1213:9
blocking v10 pick register r8
blocking v25 pick register r8
blocking v1216 pick register r9
blocking v49 pick register r8
blocking v43 pick register r8
blocking v1213 pick register r8
assign rax to v1223:0
assign 0 to v1223:0
blocking v28 pick register r8
assign r14 to v1217:2
assign 14 to v1217:2
assign rax to v1213:12
assign 0 to v1213:12
assign r9 to v1216:11
assign 9 to v1216:11
assign r8 to v184:21
assign 8 to v184:21
assign r12 to v1218:0
assign 12 to v1218:0
assign r8 to v2:30
assign 8 to v2:30
assign rdx to v1221:0
assign 2 to v1221:0
assign r9 to v219:0
assign 9 to v219:0
assign rsi to v1220:1
assign 6 to v1220:1
assign r11 to v10:38
assign 11 to v10:38
assign r12 to v223:0
assign 12 to v223:0
assign r11 to v1213:13
assign 11 to v1213:13
assign r12 to v221:0
assign 12 to v221:0
assign r14 to v25:35
assign 14 to v25:35
assign rax to v216:0
assign 0 to v216:0
assign r15 to v222:0
assign 15 to v222:0
assign r12 to v220:0
assign 12 to v220:0
assign r12 to v218:0
assign 12 to v218:0
assign rax to v1219:0
assign 0 to v1219:0
assign r9 to v217:1
assign 9 to v217:1
assign r8 to v184:23
assign 8 to v184:23
assign r9 to v1216:13
assign 9 to v1216:13
assign rax to v1213:15
assign 0 to v1213:15
assign r14 to v1217:4
assign 14 to v1217:4
assign r12 to v1212:0
assign 12 to v1212:0
assign r12 to v49:25
assign 12 to v49:25
assign r9 to v1216:10
assign 9 to v1216:10
assign r9 to v3:30
assign 9 to v3:30
assign rbx to v43:56
assign 3 to v43:56
assign r9 to v1213:11
assign 9 to v1213:11
assign r11 to v1214:0
assign 11 to v1214:0
assign r9 to v203:0
assign 9 to v203:0
assign r14 to v1215:0
assign 14 to v1215:0
assign r12 to v215:0
assign 12 to v215:0
assign r12 to v530:8
assign 12 to v530:8
assign r12 to v214:0
assign 12 to v214:0
assign rax to v211:0
assign rsi to v3:41
assign 6 to v3:41
assign 0 to v211:0
assign r12 to v213:0
assign 12 to v213:0
assign r12 to v212:0
assign 12 to v212:0
v1182:0 not intersect with v530:2, removed
v1182:1 intersect with v530:2, adding
v1182:0 not intersect with v184:2, removed
v1182:0 not intersect with v1188:0, removed
v1182:1 intersect with v1188:0, adding
v1182:0 not intersect with v1210:0, removed
v1182:1 intersect with v1210:0, adding
v1182:0 not intersect with v1204:0, removed
v1182:1 intersect with v1204:0, adding
v1182:0 not intersect with v530:1, removed
v1182:0 not intersect with v1195:0, removed
v1182:1 intersect with v1195:0, adding
assign r12 to v208:0
assign 12 to v208:0
assign rax to v1182:0
assign 0 to v1182:0
assign rdx to v1211:0
assign 2 to v1211:0
assign rax to v210:0
assign 0 to v210:0
assign r9 to v1005:3
assign 9 to v1005:3
assign r11 to v3:42
assign 11 to v3:42
v1182:1 not intersect with v1195:0, removed
v1182:2 intersect with v1195:0, adding
v1182:1 not intersect with v1204:0, removed
v1182:2 intersect with v1204:0, adding
v1182:1 not intersect with v1210:0, removed
v1182:2 intersect with v1210:0, adding
v1182:1 not intersect with v1188:0, removed
v1182:2 intersect with v1188:0, adding
v1182:1 not intersect with v530:2, removed
v1182:2 intersect with v530:2, adding
assign r14 to v1182:1
assign 14 to v1182:1
blocking v3 pick register r8
assign rdi to v196:0
assign 7 to v196:0
blocking v1182 pick register r8
assign r12 to v205:0
assign 12 to v205:0
assign r15 to v207:0
assign 15 to v207:0
assign r15 to v206:0
assign 15 to v206:0
blocking v184 pick register r8
assign rax to v198:0
assign 0 to v198:0
assign r12 to v199:0
assign 12 to v199:0
blocking v530 pick register r8
assign r15 to v204:0
assign 15 to v204:0
assign r15 to v202:0
assign 15 to v202:0
blocking v1005 pick register r8
assign rbx to v201:1
assign 3 to v201:1
assign rax to v1179:0
assign 0 to v1179:0
assign r9 to v197:1
assign 9 to v197:1
assign rsi to v200:1
assign 6 to v200:1
assign r8 to v184:24
assign 8 to v184:24
assign r9 to v1182:3
assign 9 to v1182:3
blocking v2 pick register r8
assign r11 to v530:9
assign 11 to v530:9
assign r12 to v1204:0
assign 12 to v1204:0
assign r14 to v1210:0
assign 14 to v1210:0
assign r14 to v1199:0
assign 14 to v1199:0
blocking v10 pick register r8
assign rdx to v1209:0
assign 2 to v1209:0
assign rdx to v1207:0
assign 2 to v1207:0
blocking v25 pick register r8
assign r15 to v1208:0
assign 15 to v1208:0
assign rbx to v1190:1
assign 3 to v1190:1
assign rsi to v1206:1
assign 6 to v1206:1
assign r8 to v2:32
assign 8 to v2:32
assign r9 to v190:0
assign 9 to v190:0
assign r12 to v1179:1
assign 12 to v1179:1
assign r11 to v10:40
assign 11 to v10:40
assign r12 to v194:0
assign 12 to v194:0
assign r12 to v192:0
assign 12 to v192:0
blocking v1182 pick register r9
assign r14 to v25:37
assign 14 to v25:37
assign rax to v187:0
assign 0 to v187:0
assign r15 to v193:0
assign 15 to v193:0
assign r12 to v191:0
assign 12 to v191:0
assign r12 to v189:0
assign 12 to v189:0
blocking v1179 pick register r8
assign r9 to v188:1
assign 9 to v188:1
assign rax to v1205:0
assign 0 to v1205:0
assign r14 to v1199:2
assign 14 to v1199:2
assign r11 to v530:12
assign 11 to v530:12
assign r9 to v1182:6
assign 9 to v1182:6
assign r8 to v184:27
assign 8 to v184:27
assign rax to v1179:4
assign 0 to v1179:4
assign r12 to v1200:0
assign 12 to v1200:0
assign r9 to v174:0
assign 9 to v174:0
assign rdx to v1203:0
assign 2 to v1203:0
assign r12 to v186:0
assign 12 to v186:0
assign r12 to v185:0
assign 12 to v185:0
assign rsi to v1202:1
assign 6 to v1202:1
assign rax to v182:0
assign 0 to v182:0
assign r12 to v184:0
assign 12 to v184:0
assign r12 to v183:0
assign 12 to v183:0
assign r12 to v1179:5
assign 12 to v1179:5
assign r12 to v179:0
assign 12 to v179:0
assign rax to v181:0
assign 0 to v181:0
assign rax to v1201:0
assign 0 to v1201:0
assign rax to v1179:7
assign 0 to v1179:7
assign r8 to v184:29
assign 8 to v184:29
assign r9 to v1182:8
assign 9 to v1182:8
assign r11 to v530:14
assign 11 to v530:14
assign r14 to v1199:4
assign 14 to v1199:4
assign r12 to v1196:0
assign 12 to v1196:0
assign r9 to v1182:5
assign 9 to v1182:5
assign rdi to v167:0
assign 7 to v167:0
assign r14 to v1179:3
assign 14 to v1179:3
assign r12 to v176:0
assign 12 to v176:0
assign r9 to v1197:0
assign 9 to v1197:0
assign r15 to v178:0
assign 15 to v178:0
assign r15 to v1198:0
assign r15 to v177:0
assign 15 to v177:0
assign 15 to v1198:0
assign rax to v169:0
assign 0 to v169:0
assign rax to v1179:8
assign 0 to v1179:8
assign r12 to v170:0
assign 12 to v170:0
assign r12 to v1188:0
assign 12 to v1188:0
assign r15 to v175:0
assign 15 to v175:0
assign r14 to v1195:0
assign 14 to v1195:0
assign r15 to v173:0
assign 15 to v173:0
assign r14 to v1183:0
assign 14 to v1183:0
assign rbx to v172:1
assign 3 to v172:1
assign rdx to v1194:0
assign 2 to v1194:0
assign rdx to v1192:0
assign 2 to v1192:0
assign r9 to v168:1
assign 9 to v168:1
assign rsi to v171:1
assign 6 to v171:1
assign r15 to v1193:0
assign 15 to v1193:0
blocking v2 pick register r8
assign rsi to v1191:1
assign 6 to v1191:1
blocking v10 pick register r8
assign r11 to v1179:9
assign 11 to v1179:9
blocking v25 pick register r8
assign r8 to v2:34
assign 8 to v2:34
blocking v1182 pick register r9
assign r9 to v161:0
assign 9 to v161:0
assign r11 to v10:42
assign 11 to v10:42
blocking v1179 pick register r8
assign r12 to v165:0
assign 12 to v165:0
assign rax to v1189:0
assign 0 to v1189:0
assign r12 to v163:0
assign 12 to v163:0
assign r14 to v1183:2
assign 14 to v1183:2
assign r14 to v25:39
assign 14 to v25:39
assign rax to v1179:12
assign 0 to v1179:12
assign r9 to v1182:11
assign 9 to v1182:11
assign r8 to v184:31
assign 8 to v184:31
assign rax to v158:0
assign 0 to v158:0
assign r12 to v1184:0
assign 12 to v1184:0
assign r15 to v164:0
assign 15 to v164:0
assign rdx to v1187:0
assign 2 to v1187:0
assign r12 to v162:0
assign 12 to v162:0
assign r12 to v160:0
assign 12 to v160:0
assign r9 to v159:1
assign 9 to v159:1
assign rsi to v1186:1
assign 6 to v1186:1
assign r11 to v1179:13
assign 11 to v1179:13
assign r9 to v3:29
assign 9 to v3:29
assign r12 to v49:24
assign 12 to v49:24
assign r15 to v155:0
assign 15 to v155:0
assign rax to v1185:0
assign 0 to v1185:0
assign rax to v157:0
assign 0 to v157:0
assign rax to v156:0
assign 0 to v156:0
assign r8 to v184:33
assign 8 to v184:33
assign r9 to v1182:13
assign 9 to v1182:13
assign r15 to v153:0
assign 15 to v153:0
assign rax to v1179:15
assign 0 to v1179:15
assign r14 to v1183:4
assign 14 to v1183:4
assign r12 to v1178:0
assign 12 to v1178:0
assign r9 to v1182:10
assign 9 to v1182:10
assign r15 to v154:1
assign 15 to v154:1
assign r9 to v1179:11
assign 9 to v1179:11
assign r15 to v152:0
assign 15 to v152:0
assign r11 to v1180:0
assign 11 to v1180:0
assign rax to v43:55
assign 0 to v43:55
assign r14 to v1181:0
assign 14 to v1181:0
assign rdx to v149:0
assign 2 to v149:0
assign r11 to v530:16
assign 11 to v530:16
assign r15 to v151:0
assign 15 to v151:0
assign r15 to v150:0
assign 15 to v150:0
assign rsi to v3:44
assign 6 to v3:44
assign r15 to v139:0
assign 15 to v139:0
v1148:0 not intersect with v530:2, removed
v1148:0 not intersect with v184:2, removed
v1148:0 not intersect with v1176:0, removed
v1148:1 intersect with v1176:0, adding
assign rdx to v147:0
assign 2 to v147:0
v1148:0 not intersect with v1170:0, removed
v1148:1 intersect with v1170:0, adding
v1148:0 not intersect with v1154:0, removed
v1148:1 intersect with v1154:0, adding
v1148:0 not intersect with v1161:0, removed
v1148:1 intersect with v1161:0, adding
assign rax to v1148:0
assign 0 to v1148:0
assign rdx to v1177:0
assign rdx to v146:0
assign 2 to v146:0
assign 2 to v1177:0
assign rcx to v143:0
assign 1 to v143:0
assign r9 to v1005:5
assign 9 to v1005:5
assign rdx to v145:0
assign 2 to v145:0
assign rdx to v144:0
assign 2 to v144:0
assign r12 to v3:45
assign 12 to v3:45
assign rdx to v140:0
assign 2 to v140:0
assign rcx to v142:0
assign 1 to v142:0
v1148:1 not intersect with v1154:0, removed
v1148:2 intersect with v1154:0, adding
v1148:1 not intersect with v1170:0, removed
v1148:2 intersect with v1170:0, adding
v1148:1 not intersect with v1161:0, removed
v1148:2 intersect with v1161:0, adding
v1148:1 not intersect with v1176:0, removed
v1148:2 intersect with v1176:0, adding
assign r14 to v1148:1
assign 14 to v1148:1
blocking v3 pick register r8
blocking v1148 pick register r8
blocking v184 pick register r8
blocking v530 pick register r8
assign rdi to v128:0
assign 7 to v128:0
assign rdx to v136:0
assign 2 to v136:0
blocking v1005 pick register r8
assign r15 to v138:0
assign 15 to v138:0
assign r15 to v137:0
assign 15 to v137:0
assign rax to v1145:0
assign 0 to v1145:0
assign rcx to v130:0
assign 1 to v130:0
assign r8 to v184:34
assign 8 to v184:34
assign r15 to v131:0
assign 15 to v131:0
assign r9 to v1148:3
assign 9 to v1148:3
assign rdx to v135:0
assign 2 to v135:0
assign r11 to v530:17
assign 11 to v530:17
assign rdx to v134:0
assign 2 to v134:0
assign rbx to v133:1
assign 3 to v133:1
assign r12 to v1170:0
assign 12 to v1170:0
assign r15 to v129:1
assign 15 to v129:1
assign r14 to v1176:0
assign 14 to v1176:0
assign rsi to v132:1
assign 6 to v132:1
assign r14 to v1165:0
assign 14 to v1165:0
assign rdx to v1175:0
assign 2 to v1175:0
assign rdx to v1173:0
assign 2 to v1173:0
assign r15 to v43:59
assign 15 to v43:59
assign r15 to v1174:0
assign 15 to v1174:0
blocking v2 pick register r8
assign rbx to v1156:1
assign 3 to v1156:1
assign rsi to v1172:1
assign 6 to v1172:1
blocking v3 pick register r8
assign r12 to v1145:1
assign 12 to v1145:1
blocking v10 pick register r8
blocking v25 pick register r8
blocking v1148 pick register r9
blocking v49 pick register r8
blocking v43 pick register r8
blocking v1145 pick register r8
assign r8 to v2:36
assign 8 to v2:36
assign rax to v1171:0
assign 0 to v1171:0
assign r9 to v122:0
assign 9 to v122:0
assign r14 to v1165:2
assign 14 to v1165:2
assign r11 to v530:20
assign 11 to v530:20
assign r9 to v1148:6
assign 9 to v1148:6
assign r8 to v184:37
assign 8 to v184:37
assign r11 to v10:44
assign 11 to v10:44
assign rax to v1145:4
assign 0 to v1145:4
assign r12 to v1166:0
assign 12 to v1166:0
assign r12 to v126:0
assign 12 to v126:0
assign rdx to v1169:0
assign 2 to v1169:0
assign r12 to v124:0
assign 12 to v124:0
assign r14 to v25:41
assign 14 to v25:41
assign rsi to v1168:1
assign 6 to v1168:1
assign rax to v119:0
assign 0 to v119:0
assign r15 to v125:0
assign 15 to v125:0
assign r12 to v1145:5
assign 12 to v1145:5
assign r12 to v123:0
assign 12 to v123:0
assign r12 to v121:0
assign 12 to v121:0
assign r9 to v120:1
assign 9 to v120:1
assign rax to v43:62
assign 0 to v43:62
assign r12 to v49:30
assign 12 to v49:30
assign r9 to v3:35
assign 9 to v3:35
assign rax to v1167:0
assign 0 to v1167:0
assign r9 to v106:0
assign 9 to v106:0
assign rax to v1145:7
assign 0 to v1145:7
assign r8 to v184:39
assign r12 to v118:0
assign 12 to v118:0
assign 8 to v184:39
assign r9 to v1148:8
assign 9 to v1148:8
assign r11 to v530:22
assign 11 to v530:22
assign r14 to v1165:4
assign 14 to v1165:4
assign r12 to v117:0
assign 12 to v117:0
assign r12 to v1162:0
assign 12 to v1162:0
assign r9 to v1148:5
assign 9 to v1148:5
assign rax to v114:0
assign 0 to v114:0
assign r12 to v116:0
assign 12 to v116:0
assign r12 to v115:0
assign 12 to v115:0
assign r14 to v1145:3
assign 14 to v1145:3
assign r12 to v111:0
assign 12 to v111:0
assign r9 to v1163:0
assign 9 to v1163:0
assign rax to v113:0
assign 0 to v113:0
assign r15 to v1164:0
assign 15 to v1164:0
assign rax to v1145:8
assign 0 to v1145:8
assign r12 to v1154:0
assign 12 to v1154:0
assign r14 to v1161:0
assign 14 to v1161:0
assign r14 to v1149:0
assign 14 to v1149:0
assign rdx to v1160:0
assign 2 to v1160:0
assign rdx to v1158:0
assign 2 to v1158:0
assign r15 to v1159:0
assign 15 to v1159:0
assign rsi to v1157:1
assign 6 to v1157:1
assign rdi to v99:0
assign 7 to v99:0
assign r12 to v108:0
assign 12 to v108:0
assign r11 to v1145:9
assign 11 to v1145:9
assign r15 to v110:0
assign 15 to v110:0
assign r15 to v109:0
assign 15 to v109:0
assign rax to v101:0
assign 0 to v101:0
assign r12 to v102:0
assign 12 to v102:0
blocking v1148 pick register r9
assign r15 to v107:0
assign 15 to v107:0
assign r15 to v105:0
assign 15 to v105:0
assign rbx to v104:1
assign 3 to v104:1
blocking v1145 pick register r8
assign r9 to v100:1
assign 9 to v100:1
assign rsi to v103:1
assign 6 to v103:1
assign rax to v1155:0
assign 0 to v1155:0
assign r14 to v1149:2
assign 14 to v1149:2
assign r9 to v43:63
assign 9 to v43:63
assign rax to v1145:12
assign 0 to v1145:12
assign r9 to v1148:11
assign 9 to v1148:11
assign r8 to v184:41
assign 8 to v184:41
assign r12 to v1150:0
assign 12 to v1150:0
assign rdx to v1153:0
assign 2 to v1153:0
blocking v2 pick register r8
assign rsi to v1152:1
assign 6 to v1152:1
blocking v10 pick register r8
assign r11 to v1145:13
assign 11 to v1145:13
blocking v25 pick register r8
assign r8 to v2:38
assign 8 to v2:38
assign rax to v1151:0
assign 0 to v1151:0
assign r9 to v93:0
assign 9 to v93:0
assign r8 to v184:43
assign 8 to v184:43
assign r11 to v10:46
assign 11 to v10:46
assign r9 to v1148:13
assign 9 to v1148:13
assign rax to v1145:15
assign 0 to v1145:15
assign r14 to v1149:4
assign 14 to v1149:4
assign r12 to v1144:0
assign 12 to v1144:0
assign r12 to v97:0
assign 12 to v97:0
assign r9 to v1148:10
assign 9 to v1148:10
assign r12 to v95:0
assign 12 to v95:0
assign r14 to v25:43
assign 14 to v25:43
assign r9 to v1145:11
assign 9 to v1145:11
assign rax to v90:0
assign 0 to v90:0
assign r11 to v1146:0
assign 11 to v1146:0
assign r15 to v96:0
assign 15 to v96:0
assign r14 to v1147:0
assign 14 to v1147:0
assign r12 to v94:0
assign 12 to v94:0
assign r11 to v530:24
assign 11 to v530:24
assign r12 to v92:0
assign 12 to v92:0
assign r9 to v91:1
assign 9 to v91:1
assign rsi to v3:47
assign 6 to v3:47
v1114:0 not intersect with v184:2, removed
v1114:0 not intersect with v1120:0, removed
v1114:1 intersect with v1120:0, adding
v1114:0 not intersect with v530:2, removed
v1114:0 not intersect with v1136:0, removed
v1114:1 intersect with v1136:0, adding
v1114:0 not intersect with v1142:0, removed
v1114:1 intersect with v1142:0, adding
v1114:0 not intersect with v1127:0, removed
v1114:1 intersect with v1127:0, adding
assign rax to v1114:0
assign r9 to v77:0
assign 9 to v77:0
assign 0 to v1114:0
assign rdx to v1143:0
assign 2 to v1143:0
assign r12 to v89:0
assign 12 to v89:0
assign r9 to v1005:7
assign 9 to v1005:7
assign r12 to v88:0
assign 12 to v88:0
assign rax to v85:0
assign 0 to v85:0
assign r12 to v3:48
assign 12 to v3:48
assign r12 to v87:0
assign 12 to v87:0
assign r12 to v86:0
assign 12 to v86:0
v1114:1 not intersect with v1127:0, removed
v1114:2 intersect with v1127:0, adding
v1114:1 not intersect with v1142:0, removed
v1114:2 intersect with v1142:0, adding
v1114:1 not intersect with v1136:0, removed
assign r12 to v82:0
assign 12 to v82:0
v1114:2 intersect with v1136:0, adding
v1114:1 not intersect with v1120:0, removed
v1114:2 intersect with v1120:0, adding
assign r14 to v1114:1
assign 14 to v1114:1
assign rax to v84:0
assign 0 to v84:0
blocking v3 pick register r8
blocking v1114 pick register r8
blocking v184 pick register r8
blocking v530 pick register r8
assign rdi to v69:0
assign 7 to v69:0
assign r12 to v79:0
assign 12 to v79:0
blocking v1005 pick register r8
assign r15 to v81:0
assign 15 to v81:0
assign rax to v1111:0
assign 0 to v1111:0
assign r15 to v80:0
assign 15 to v80:0
assign rax to v72:0
assign 0 to v72:0
assign r8 to v184:44
assign 8 to v184:44
assign r12 to v73:0
assign 12 to v73:0
assign r9 to v1114:3
assign 9 to v1114:3
assign r15 to v78:0
assign 15 to v78:0
assign r11 to v530:25
assign 11 to v530:25
assign r15 to v76:0
assign 15 to v76:0
assign rbx to v75:1
assign 3 to v75:1
assign r12 to v1136:0
assign 12 to v1136:0
assign r9 to v71:1
assign 9 to v71:1
assign r14 to v1142:0
assign 14 to v1142:0
assign rsi to v74:1
assign 6 to v74:1
assign r14 to v1131:0
assign 14 to v1131:0
assign rdx to v1141:0
assign 2 to v1141:0
assign rdx to v1139:0
assign 2 to v1139:0
blocking v2 pick register r8
assign r15 to v1140:0
assign 15 to v1140:0
blocking v10 pick register r8
assign rbx to v1122:1
assign 3 to v1122:1
assign rsi to v1138:1
assign 6 to v1138:1
blocking v25 pick register r8
assign r12 to v1111:1
assign 12 to v1111:1
assign r9 to v2:40
assign 9 to v2:40
assign r8 to v63:0
assign 8 to v63:0
assign r11 to v10:48
assign 11 to v10:48
assign r12 to v67:0
assign 12 to v67:0
blocking v1114 pick register r9
assign r12 to v65:0
assign 12 to v65:0
assign r14 to v25:45
assign 14 to v25:45
assign rax to v60:0
assign 0 to v60:0
assign r15 to v66:0
assign 15 to v66:0
blocking v1111 pick register r8
assign r12 to v64:0
assign 12 to v64:0
assign r12 to v62:0
assign 12 to v62:0
assign rax to v1137:0
assign 0 to v1137:0
assign r8 to v61:1
assign 8 to v61:1
assign r14 to v1131:2
assign 14 to v1131:2
assign r11 to v530:28
assign 11 to v530:28
assign r9 to v1114:6
assign 9 to v1114:6
assign r8 to v184:47
assign 8 to v184:47
assign rax to v1111:4
assign 0 to v1111:4
assign r12 to v1132:0
assign 12 to v1132:0
assign r8 to v2:41
assign 8 to v2:41
assign rdx to v1135:0
assign 2 to v1135:0
assign r9 to v2:43
assign 9 to v2:43
assign r8 to v51:0
assign 8 to v51:0
assign rsi to v1134:1
assign 6 to v1134:1
assign r12 to v59:0
assign 12 to v59:0
assign r12 to v58:0
assign 12 to v58:0
assign r12 to v1111:5
assign 12 to v1111:5
assign rax to v55:0
assign 0 to v55:0
assign r12 to v57:0
assign 12 to v57:0
assign r12 to v56:0
assign 12 to v56:0
assign r12 to v52:0
assign 12 to v52:0
assign rax to v54:0
assign 0 to v54:0
assign rax to v1133:0
assign 0 to v1133:0
assign rax to v1111:7
assign 0 to v1111:7
assign r8 to v184:49
assign 8 to v184:49
assign r9 to v1114:8
assign 9 to v1114:8
assign r11 to v530:30
assign 11 to v530:30
assign r14 to v1131:4
assign 14 to v1131:4
assign r12 to v1128:0
assign 12 to v1128:0
assign r9 to v1114:5
assign 9 to v1114:5
assign r14 to v1111:3
assign 14 to v1111:3
assign r9 to v1129:0
assign 9 to v1129:0
assign r12 to v50:0
assign 12 to v50:0
assign r15 to v1130:0
assign 15 to v1130:0
assign rax to v1111:8
assign 0 to v1111:8
assign r12 to v3:34
assign 12 to v3:34
assign r12 to v1120:0
assign 12 to v1120:0
assign r8 to v49:29
assign 8 to v49:29
assign r14 to v1127:0
assign 14 to v1127:0
assign r14 to v1115:0
assign 14 to v1115:0
assign r8 to v46:0
assign 8 to v46:0
assign rdx to v1126:0
assign 2 to v1126:0
assign rdx to v1124:0
assign 2 to v1124:0
assign r15 to v48:0
assign 15 to v48:0
assign r15 to v47:0
assign 15 to v47:0
assign r15 to v1125:0
assign 15 to v1125:0
assign r8 to v44:0
assign 8 to v44:0
assign rsi to v1123:1
assign r8 to v45:1
assign 8 to v45:1
assign 6 to v1123:1
assign r8 to v42:0
assign 8 to v42:0
assign r15 to v43:61
assign 15 to v43:61
assign r11 to v1111:9
assign 11 to v1111:9
assign r15 to v39:0
assign 15 to v39:0
assign r8 to v41:0
assign 8 to v41:0
assign r8 to v40:0
assign 8 to v40:0
assign r8 to v22:0
assign 8 to v22:0
blocking v1114 pick register r9
assign r12 to v28:26
assign 12 to v28:26
assign r15 to v30:0
assign 15 to v30:0
assign rax to v35:0
assign 0 to v35:0
blocking v1111 pick register r8
assign rbx to v36:32
assign 3 to v36:32
assign rax to v1121:0
assign 0 to v1121:0
assign r14 to v1115:2
assign 14 to v1115:2
assign rax to v1111:12
assign 0 to v1111:12
assign r9 to v1114:11
assign 9 to v1114:11
assign rdx to v34:1
assign 2 to v34:1
assign r8 to v184:51
assign 8 to v184:51
assign r12 to v1116:0
assign 12 to v1116:0
assign rdx to v1119:0
assign 2 to v1119:0
blocking v22 pick register r8
assign rsi to v1118:1
assign 6 to v1118:1
blocking v10 pick register r11
assign r11 to v1111:13
assign 11 to v1111:13
blocking v28 pick register r12
blocking v25 pick register r14
blocking v2 pick register r8
assign rax to v33:0
assign 0 to v33:0
assign r15 to v31:0
assign 15 to v31:0
assign rax to v1117:0
assign 0 to v1117:0
assign r12 to v28:29
assign 12 to v28:29
assign r8 to v22:3
assign 8 to v22:3
assign r14 to v25:48
assign 14 to v25:48
assign r11 to v10:51
assign 11 to v10:51
assign r9 to v2:45
assign 9 to v2:45
assign r8 to v184:53
assign 8 to v184:53
assign r9 to v1114:13
assign 9 to v1114:13
assign r15 to v27:0
assign 15 to v27:0
assign rax to v1111:15
assign 0 to v1111:15
assign r14 to v1115:4
assign 14 to v1115:4
assign r12 to v1110:0
assign 12 to v1110:0
assign rax to v29:0
assign 0 to v29:0
assign r9 to v1114:10
assign r12 to v28:28
assign 12 to v28:28
assign 9 to v1114:10
assign r12 to v26:0
assign 12 to v26:0
assign r12 to v19:0
assign 12 to v19:0
assign r14 to v25:47
assign 14 to v25:47
assign r9 to v1111:11
assign 9 to v1111:11
assign r14 to v24:25
assign 14 to v24:25
assign r11 to v1112:0
assign 11 to v1112:0
assign rax to v23:1
assign 0 to v23:1
assign r8 to v22:2
assign 8 to v22:2
assign r14 to v1113:0
assign 14 to v1113:0
assign r11 to v10:50
assign 11 to v10:50
assign r11 to v530:32
assign 11 to v530:32
assign r8 to v18:0
assign 8 to v18:0
assign r14 to v20:0
assign 14 to v20:0
assign rsi to v3:50
assign 6 to v3:50
assign r15 to v21:0
assign 15 to v21:0
v1080:0 not intersect with v530:2, removed
v1080:0 not intersect with v184:2, removed
v1080:0 not intersect with v1086:0, removed
v1080:1 intersect with v1086:0, adding
v1080:0 not intersect with v1108:0, removed
v1080:1 intersect with v1108:0, adding
v1080:0 not intersect with v1102:0, removed
v1080:1 intersect with v1102:0, adding
v1080:0 not intersect with v1093:0, removed
assign r9 to v2:44
assign 9 to v2:44
v1080:1 intersect with v1093:0, adding
assign rax to v1080:0
assign 0 to v1080:0
assign rdx to v1109:0
assign 2 to v1109:0
assign r8 to v13:0
assign 8 to v13:0
assign r9 to v1005:9
assign 9 to v1005:9
assign r12 to v17:1
assign 12 to v17:1
assign r9 to v14:0
assign 9 to v14:0
assign r12 to v3:51
assign 12 to v3:51
assign r12 to v15:0
assign 12 to v15:0
assign r14 to v16:0
assign 14 to v16:0
v1080:1 not intersect with v1093:0, removed
v1080:2 intersect with v1093:0, adding
v1080:1 not intersect with v1102:0, removed
v1080:2 intersect with v1102:0, adding
v1080:1 not intersect with v1108:0, removed
v1080:2 intersect with v1108:0, adding
v1080:1 not intersect with v1086:0, removed
v1080:2 intersect with v1086:0, adding
assign r14 to v1080:1
assign 14 to v1080:1
assign r8 to v12:0
assign 8 to v12:0
assign rax to v11:1
assign 0 to v11:1
blocking v3 pick register r8
assign r8 to v9:0
assign 8 to v9:0
assign r8 to v8:0
assign 8 to v8:0
assign r8 to v7:0
assign 8 to v7:0
blocking v1080 pick register r8
assign r14 to v3:38
assign 14 to v3:38
assign r15 to v6:4
assign 15 to v6:4
blocking v184 pick register r8
assign r8 to v5:0
assign 8 to v5:0
assign r8 to v4:0
assign 8 to v4:0
spill count : 237
blocking v530 pick register r8
blocking v1005 pick register r8
assign rax to v1077:0
assign 0 to v1077:0
assign r8 to v184:54
assign 8 to v184:54
assign r9 to v1080:3
assign 9 to v1080:3
assign r11 to v530:33
assign 11 to v530:33
assign r12 to v1102:0
assign 12 to v1102:0
assign r14 to v1108:0
assign 14 to v1108:0
assign r14 to v1097:0
assign 14 to v1097:0
assign rdx to v1107:0
assign 2 to v1107:0
assign rdx to v1105:0
assign 2 to v1105:0
add v891->v886
add v887->v889
add v881->v885
add v884->v885
add v883->v879
add v863->v879
add v863->v879
add v863->v879
add v863->v879
assign r15 to v1106:0
assign 15 to v1106:0
add v882->v881
add v880->v881
add v49->v3
add v24->v3
add v879->v3
add v6->v2
add v10->v6
add v878->v6
add v875->v6
add v10->v6
add v874->v6
add v783->v2
add v784->v2
add v872->v6
add v871->v872
add v25->v871
add v867->v871
add v870->v871
adding pairs 2, v729:0x7fffbc127170, v867:0x7fffbc026238
add v866->v783
assign rbx to v1088:1
assign 3 to v1088:1
add v865->v783
add v786->v783
assign rsi to v1104:1
add v861->v863
assign 6 to v1104:1
add v859->v854
add v855->v857
add v848->v853
add v852->v853
add v851->v827
add v850->v827
add v850->v827
add v850->v827
add v850->v827
add v849->v848
add v847->v848
add v43->v764
add v24->v764
add v827->v764
add v25->v784
add v844->v784
add v846->v784
add v843->v844
add v43->v843
add v839->v843
assign r12 to v1077:1
assign 12 to v1077:1
add v842->v843
add v836->v839
add v43->v785
add v835->v785
add v841->v785
add v837->v839
add v834->v839
add v829->v827
add v822->v784
add v824->v784
adding pairs 2, v805:0x7fffbc126e28, v822:0x7fffbc155ec8
add v43->v821
add v817->v821
add v820->v821
add v800->v817
add v815->v785
add v819->v785
add v799->v815
add v802->v817
add v801->v815
add v798->v817
add v797->v815
add v807->v764
add v813->v764
add v814->v807
add v812->v806
add v787->v805
add v804->v764
adding pairs 3, v805:0x7fffbc09a978, v789:0x7fffbc126d10
blocking v1080 pick register r9
add v49->v3
add v775->v3
add v771->v3
add v781->v775
add v780->v779
add v774->v772
add v769->v729
add v768->v3
add v760->v729
add v49->v3
add v749->v3
add v758->v3
add v756->v749
add v43->v755
add v752->v755
add v754->v755
add v751->v752
add v747->v749
add v43->v746
add v743->v746
add v745->v746
add v742->v743
add v741->v6
add v740->v741
add v25->v740
add v737->v740
add v739->v740
add v734->v737
add v736->v734
add v735->v734
add v722->v2
add v731->v6
add v733->v6
blocking v1077 pick register r8
add v724->v731
add v725->v731
add v730->v722
add v728->v722
add v718->v2
add v10->v718
assign rax to v1103:0
assign 0 to v1103:0
add v720->v718
add v715->v720
add v25->v715
add v713->v715
add v719->v715
add v716->v713
add v712->v711
add v698->v2
add v10->v698
add v710->v698
add v709->v710
add v25->v709
assign r14 to v1097:2
assign 14 to v1097:2
add v706->v709
add v708->v709
assign r11 to v530:36
assign 11 to v530:36
add v703->v706
add v705->v703
assign r9 to v1080:6
assign 9 to v1080:6
add v704->v703
assign r8 to v184:57
assign 8 to v184:57
add v691->v2
assign rax to v1077:4
assign 0 to v1077:4
add v700->v698
add v702->v698
add v693->v700
add v694->v700
assign r12 to v1098:0
assign 12 to v1098:0
add v699->v691
add v697->v691
add v685->v2
add v10->v685
add v689->v685
add v687->v689
add v25->v687
add v682->v687
assign rdx to v1101:0
assign 2 to v1101:0
add v688->v682
add v686->v687
add v683->v682
add v669->v2
add v10->v669
add v681->v669
add v680->v681
add v25->v680
add v677->v680
add v679->v680
add v674->v677
add v676->v674
add v675->v674
add v662->v2
add v671->v669
add v673->v669
add v664->v671
add v665->v671
add v670->v662
add v668->v662
add v656->v2
add v10->v656
assign rsi to v1100:1
assign 6 to v1100:1
add v660->v656
add v658->v660
add v25->v658
add v653->v658
add v659->v653
add v657->v658
add v654->v653
add v640->v2
add v10->v640
add v652->v640
add v651->v652
add v25->v651
add v648->v651
add v650->v651
add v645->v648
add v647->v645
add v646->v645
assign r12 to v1077:5
assign 12 to v1077:5
add v633->v2
add v642->v640
add v644->v640
add v635->v642
add v636->v642
add v641->v633
add v639->v633
add v627->v2
add v10->v627
add v631->v627
add v629->v631
add v25->v629
add v624->v629
add v630->v624
add v628->v629
add v625->v624
add v49->v3
add v621->v3
add v623->v3
add v619->v621
add v43->v618
add v615->v618
add v617->v618
add v614->v615
add v605->v2
add v10->v605
add v613->v605
add v612->v613
add v25->v612
add v609->v612
add v611->v612
add v606->v609
add v608->v606
add v607->v606
add v594->v2
add v602->v605
add v604->v605
add v596->v602
add v597->v602
add v601->v594
add v600->v594
add v590->v2
add v10->v590
add v592->v590
add v586->v592
add v25->v586
add v584->v586
add v591->v586
add v588->v584
add v583->v582
assign rax to v1099:0
assign 0 to v1099:0
add v569->v2
add v10->v569
add v581->v569
add v580->v581
add v25->v580
add v577->v580
add v579->v580
add v574->v577
add v576->v574
add v575->v574
add v467->v2
assign rax to v1077:7
assign 0 to v1077:7
add v571->v569
add v573->v569
assign r8 to v184:59
assign 8 to v184:59
add v468->v571
assign r9 to v1080:8
assign 9 to v1080:8
add v469->v571
add v570->v467
assign r11 to v530:38
assign 11 to v530:38
add v568->v467
assign r14 to v1097:4
assign 14 to v1097:4
add v470->v467
add v43->v565
add v563->v565
add v566->v565
assign r12 to v1094:0
add v507->v563
assign 12 to v1094:0
add v43->v561
add v559->v561
add v562->v561
add v508->v559
assign r9 to v1080:5
add v43->v556
assign 9 to v1080:5
add v554->v556
add v557->v556
add v509->v554
add v43->v510
add v548->v510
add v550->v510
add v547->v548
add v536->v535
add v534->v535
add v521->v534
add v533->v470
add v10->v533
add v445->v533
add v531->v445
add v532->v531
assign r14 to v1077:3
assign 14 to v1077:3
add v529->v531
add v461->v456
add v457->v459
add v455->v454
add v453->v454
add v452->v450
add v451->v450
add v446->v445
add v440->v2
assign r9 to v1095:0
add v10->v440
assign 9 to v1095:0
add v444->v440
add v442->v444
add v25->v442
add v437->v442
add v443->v437
add v441->v442
add v438->v437
add v424->v2
add v10->v424
add v436->v424
assign r15 to v1096:0
assign 15 to v1096:0
add v435->v436
add v25->v435
add v432->v435
add v434->v435
add v429->v432
add v431->v429
add v430->v429
add v417->v2
add v426->v424
add v428->v424
add v419->v426
assign rax to v1077:8
assign 0 to v1077:8
add v420->v426
add v425->v417
add v423->v417
add v411->v2
add v10->v411
add v415->v411
add v413->v415
add v25->v413
add v408->v413
assign r12 to v1086:0
assign 12 to v1086:0
add v414->v408
add v412->v413
add v409->v408
add v395->v2
add v10->v395
add v407->v395
add v406->v407
add v25->v406
add v403->v406
assign r14 to v1093:0
assign 14 to v1093:0
add v405->v406
add v400->v403
assign r14 to v1081:0
assign 14 to v1081:0
add v402->v400
add v401->v400
add v289->v2
add v397->v395
add v399->v395
add v290->v397
add v291->v397
add v396->v289
assign rdx to v1092:0
assign 2 to v1092:0
add v394->v289
add v292->v289
assign rdx to v1090:0
add v43->v391
assign 2 to v1090:0
add v389->v391
add v392->v391
add v331->v389
add v43->v387
add v385->v387
add v388->v387
add v332->v385
add v43->v382
assign r15 to v1091:0
assign 15 to v1091:0
add v380->v382
add v383->v382
add v333->v380
add v43->v334
add v374->v334
add v376->v334
add v371->v374
add v360->v359
add v358->v359
add v345->v358
add v357->v292
add v10->v357
add v267->v357
add v355->v267
add v356->v355
add v353->v355
add v283->v278
add v279->v281
add v277->v276
add v275->v276
assign rsi to v1089:1
assign 6 to v1089:1
add v274->v272
add v273->v272
add v268->v267
add v262->v2
add v10->v262
add v266->v262
add v264->v266
add v25->v264
add v259->v264
add v265->v259
add v263->v264
add v260->v259
add v49->v3
add v256->v3
add v258->v3
add v254->v256
assign r11 to v1077:9
add v43->v253
assign 11 to v1077:9
add v250->v253
add v252->v253
add v249->v250
add v236->v2
add v10->v236
add v248->v236
add v247->v248
add v25->v247
add v240->v247
add v246->v247
add v243->v240
add v245->v243
add v244->v243
add v242->v2
add v237->v240
add v239->v237
add v238->v237
add v225->v2
add v233->v236
add v235->v236
add v227->v233
add v228->v233
add v232->v225
add v231->v225
add v219->v2
add v10->v219
add v223->v219
blocking v1080 pick register r9
add v221->v223
add v25->v221
add v216->v221
add v222->v216
add v220->v221
add v217->v216
add v203->v2
add v10->v203
add v215->v203
add v214->v215
add v25->v214
add v211->v214
add v213->v214
add v208->v211
add v210->v208
add v209->v208
add v196->v2
add v205->v203
add v207->v203
add v198->v205
add v199->v205
add v204->v196
add v202->v196
blocking v1077 pick register r8
add v190->v2
add v10->v190
add v194->v190
add v192->v194
add v25->v192
assign rax to v1087:0
assign 0 to v1087:0
add v187->v192
add v193->v187
add v191->v192
add v188->v187
add v174->v2
add v10->v174
add v186->v174
add v185->v186
add v25->v185
add v182->v185
add v184->v185
add v179->v182
assign r14 to v1081:2
assign 14 to v1081:2
add v181->v179
add v180->v179
assign rax to v1077:12
add v167->v2
assign 0 to v1077:12
add v176->v174
assign r9 to v1080:11
assign 9 to v1080:11
add v178->v174
assign r8 to v184:61
assign 8 to v184:61
add v169->v176
add v170->v176
add v175->v167
add v173->v167
assign r12 to v1082:0
assign 12 to v1082:0
add v161->v2
add v10->v161
add v165->v161
add v163->v165
add v25->v163
add v158->v163
add v164->v158
add v162->v163
assign rdx to v1085:0
add v159->v158
assign 2 to v1085:0
add v49->v3
add v155->v3
add v157->v3
add v153->v155
add v43->v152
add v149->v152
add v151->v152
add v148->v149
add v139->v2
add v10->v139
add v147->v139
add v146->v147
add v25->v146
add v143->v146
add v145->v146
add v140->v143
add v142->v140
add v141->v140
add v128->v2
add v136->v139
add v138->v139
assign rsi to v1084:1
assign 6 to v1084:1
add v130->v136
add v131->v136
add v135->v128
add v134->v128
add v122->v2
add v10->v122
add v126->v122
add v124->v126
add v25->v124
add v119->v124
add v125->v119
add v123->v124
add v120->v119
add v106->v2
add v10->v106
add v118->v106
add v117->v118
assign r11 to v1077:13
add v25->v117
assign 11 to v1077:13
add v114->v117
add v116->v117
add v111->v114
add v113->v111
add v112->v111
add v99->v2
add v108->v106
add v110->v106
add v101->v108
add v102->v108
add v107->v99
add v105->v99
add v93->v2
add v10->v93
add v97->v93
add v95->v97
add v25->v95
add v90->v95
add v96->v90
add v94->v95
add v91->v90
add v77->v2
add v10->v77
add v89->v77
add v88->v89
add v25->v88
add v85->v88
add v87->v88
add v82->v85
add v84->v82
add v83->v82
add v69->v2
add v79->v77
add v81->v77
add v72->v79
add v73->v79
add v78->v69
add v76->v69
add v63->v2
add v10->v63
add v67->v63
add v65->v67
assign rax to v1083:0
assign 0 to v1083:0
add v25->v65
add v60->v65
add v66->v60
add v64->v65
add v61->v60
add v51->v2
add v10->v51
add v59->v51
add v58->v59
add v25->v58
add v55->v58
assign r8 to v184:63
assign 8 to v184:63
add v57->v58
assign r9 to v1080:13
assign 9 to v1080:13
add v52->v55
assign rax to v1077:15
assign 0 to v1077:15
add v54->v52
assign r14 to v1081:4
assign 14 to v1081:4
add v53->v52
add v50->v2
add v49->v3
assign r12 to v1076:0
assign 12 to v1076:0
add v46->v3
add v48->v3
add v44->v46
assign r9 to v1080:10
assign 9 to v1080:10
add v43->v42
add v39->v42
add v41->v42
add v38->v39
add v22->v2
add v35->v30
add v31->v33
add v29->v27
add v26->v27
add v25->v19
add v24->v19
add v23->v19
add v10->v22
assign r9 to v1077:11
assign 9 to v1077:11
add v18->v22
add v19->v18
add v13->v2
add v10->v13
add v17->v13
add v14->v13
add v10->v13
add v12->v13
assign r11 to v1078:0
assign 11 to v1078:0
add v9->v2
add v10->v9
add v8->v9
add v7->v8
add v5->v6
add v4->v5
gap () () 
          [rsi|R|t] = ArchNop
assign r14 to v1079:0
assign 14 to v1079:0
gap (v2(-) = [rsi|R|t];) () 
          [stack:-1|t] = ArchNop
assign r11 to v530:40
gap (v1(-) = [stack:-1|t];) () 
          [rdi|R|t] = ArchNop
assign 11 to v530:40
gap (v0(-) = [rdi|R|t];) () 
          [constant:372] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1694] [immediate:1695]
gap () () 
          [constant:895] = ArchNop
gap () () 
          [constant:894] = ArchNop
gap () () 
          v893(R) = ArchStackCheckOffset
gap () () 
          X64Push v893(-)
gap () ([rbx|R|w64] = v894(-); [rax|R|w64] = v372(-); [rsi|R|t] = v895(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1693] #-1 #369 v0(S) v1(S) v2(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1692]
gap () () 
          ArchJmp [immediate:1691]
gap () () 
          [constant:28] = ArchNop
assign rsi to v3:53
gap () () 
          [constant:36] = ArchNop
assign 6 to v3:53
gap () () 
          [constant:890] = ArchNop
gap () () 
          v886(R) = X64Movq : MR v28(R)
gap () () 
          v891(R) = X64Lea : MRI v886(R) [immediate:1690]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v891(R) [immediate:1688] [immediate:1689]
v1046:0 not intersect with v530:2, removed
gap () () 
          ArchJmp [immediate:v1046:0 not intersect with v1059:0, removed
1687]
v1046:1 intersect with v1059:0, adding
gap () ([rdx|R|w64v1046:0 not intersect with v1074:0, removed
v1046:1 intersect with v1074:0, adding
] = v890(-);) 
          v1046:0 not intersect with v1052:0, removed
v1046:1 intersect with v1052:0, adding
v1046:0 not intersect with v184:2, removed
[rax|R|tp] = ArchCallCodeObject [immediate:1686] #-1 [rdx|R|w64]
v1046:0 not intersect with v1068:0, removed
v1046:1 intersect with v1068:0, adding
gap (v889(-) = [rax|R|tp];) () 
          v887(R) = X64Lea : MRI v889(R) [immediate:1685]
gap () (vassign rax to v1046:0
assign 0 to v1046:0
885 = v887(-);) 
          ArchJmp [immediate:1684]
assign rdx to v1075:0
gap () (v885 = v886(-);) 
          ArchJmp [immediate:1683]
assign 2 to v1075:0
gap () () 
          v881(R) = X64Lea : MRI v885(R) [immediate:1682]
gap () () 
          X64Movq : MR v28(R) v881(R)
gap () () 
          v884(R) = X64Lea : MRI v885(R) [immediate:1681]
gap () (v879 = v884(-);) 
          v879(1) = ArchNop v879
gap () () 
          [constant:883] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v879(R) [immediate:1680] v883(R)
assign r9 to v1005:11
gap () () 
          X64MovqCompressTagged : MRI v879(R) [immediate:1678] [immediate:1679]
assign 9 to v1005:11
gap () () 
          [constant:863] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v879(R) [immediate:1677] v863(R)
gap () () 
          X64MovqCompressTagged : MRI v879(R) [immediate:1676] v863(R)
gap () () 
          X64MovqCompressTagged : MRI v879(R) [immediate:1675] v863(R)
gap () () 
          [constant:34] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v879(R) [immediate:1674] v863(R)
gap () () 
          v882(R) = X64Lea : MRI v881(R) [immediate:1673]
gap () () 
          X64Movq : MR v28(R) v882(R)
gap () () 
          v880(R) = X64Lea : MRI v881(R) [immediate:1672]
gap () (v3 = v880(-);) 
          v3(1) = ArchNop v3
gap () () 
          [constant:49] = ArchNop
gap () () 
          [constant:304] = ArchNop
gap () () 
          [constant:24] = ArchNop
assign r12 to v3:54
gap () () 
          [constant:10] = ArchNop
assign 12 to v3:54
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1671] v49(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1670] v24(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1669] v879(R)
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1667] [immediate:1668]
gap () () 
          v6(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1666]
gap () () 
          X64Test32 && deoptimize if equal v6 #1 #368 v0(S) v1(-) v2(S) v3(-) [immediate:1664] v6(-) [immediate:1665]
v1046:1 not intersect with v1068:0, removed
gap () () 
          X64Cmp32 : MRI && branch if equal v6(R) [immediate:1661] v10(R) [immediate:1662] [immediate:1663]
v1046:2 intersect with v1068:0, adding
gap () () 
          [constant:878] = ArchNop
v1046:1 not intersect with v1052:0, removed
v1046:2 intersect with v1052:0, adding
v1046:1 not intersect with v1074:0, removed
v1046:2 intersect with v1074:0, adding
v1046:1 not intersect with v1059:0, removed
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v6(R) [immediate:1658] v878(R) #367 v0(S) v1(-) v2(S) v3(-) [immediate:1659] v6(-) [immediate:1660]
v1046:2 intersect with v1059:0, adding
gap () () 
          v875(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1657]
assign r14 to v1046:1
assign 14 to v1046:1
gap () () 
          ArchStoreWithWriteBarrier : MRI v6(R) [immediate:1656] v10(R)
gap () () 
          X64MovqCompressTagged : MRI v875(R) [immediate:1654] [immediate:1655]
gap () () 
          ArchJmp [immediate:1653]
gap () () 
          v874(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1652]
gap () () 
          X64MovqCompressTagged : MRI v874(R) [immediate:1650] [immediate:1651]
gap () () 
          ArchJmp [immediate:1649]
gap () () 
          [constant:873] = ArchNop
gap () () 
          [constant:43] = ArchNop
gap () () 
          [constant:70] = ArchNop
gap () () 
          [constant:25] = ArchNop
gap () () 
          [constant:587] = ArchNop
gap () () 
          [constant:303] = ArchNop
gap () () 
          [constant:373] = ArchNop
gap () (v729 = v873(-);) 
          ArchJmp [immediate:1648]
gap () () 
          X64Cmp32 && branch if signed greater than v729 #-1 [immediate:1646] [immediate:1647]
gap () () 
          v783(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1645]
gap () () 
          v784(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1644]
blocking v3 pick register r8
gap () () 
          v872(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1643]
gap () () 
          v871(R) = X64MovqDecompressAnyTagged : MRI v872(R) [immediate:1642]
gap () () 
          X64Test32 && deoptimize if equal v871 #1 #366 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1641]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v871(R) [immediate:1639] v25(R) #365 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1640]
gap () () 
          v867(R) = X64MovqDecompressTaggedPointer : MRI v871(R) [immediate:1638]
gap () () 
          v870(R) = X64MovqDecompressTaggedSigned : MRI v871(R) [immediate:1637]
gap () (v869(R) = v870(-);) 
          v869(1) = X64Sar32 v869(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v729(R) v869 #364 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1636]
gap () () 
          v763(R) = X64Lea : M4I v729(R) [immediate:1635]
gap () () 
          v785(R) = X64MovqDecompressAnyTagged : MR4I v867(R) v729(R) [immediate:1634]
gap () () 
          X64Test32 && deoptimize if equal v783 #1 #363 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1633]
blocking v1046 pick register r8
gap () () 
          v866(R) = X64MovqDecompressTaggedPointer : MRI v783(R) [immediate:1632]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v866(R) [immediate:1630] #1068 #362 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1631]
gap () () 
          [constant:864] = ArchNop
gap () () 
          v865(R) = X64MovqDecompressTaggedPointer : MRI v783(R) [immediate:1629]
gap () () 
          X64Cmp && deoptimize if not equal v864(R) v865 #361 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1628]
gap () () 
          v786(R) = X64Movl : MRI v783(R) [immediate:1627]
gap () () 
          X64Test32 && branch if equal v863 #1 [immediate:1625] [immediate:1626]
gap () () 
          v861(R) = X64Movsd : MRI v863(R) [immediate:1624]
gap () (v850 = v861(-);) 
          ArchJmp [immediate:1623]
gap () (v862(R) = v863(-);) 
          v862(1) = X64Sar32 v862(R) #1
blocking v184 pick register r8
gap () () 
          v860(R) = SSEInt32ToFloat64 v862
gap () (v850 = v860(-);) 
          ArchJmp [immediate:1622]
gap () () 
          v854(R) = X64Movq : MR v28(R)
gap () () 
          [constant:858] = ArchNop
gap () () 
          v859(R) = X64Lea : MRI v854(R) [immediate:1621]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v859(R) [immediate:1619] [immediate:1620]
gap () () 
          ArchJmp [immediate:1618]
gap () ([rdx|R|w64] = v858(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1617] #-1 [rdx|R|w64]
gap (v857(-) = [rax|R|tp];) () 
          v855(R) = X64Lea : MRI v857(R) [immediate:1616]
gap () (v853 = v855(-);) 
          ArchJmp [immediate:1615]
gap () (v853 = v854(-);) 
          ArchJmp [immediate:1614]
gap () () 
          v848(R) = X64Lea : MRI v853(R) [immediate:1613]
gap () () 
          X64Movq : MR v28(R) v848(R)
blocking v530 pick register r8
gap () () 
          v852(R) = X64Lea : MRI v853(R) [immediate:1612]
gap () (v827 = v852(-);) 
          v827(1) = ArchNop v827
gap () () 
          [constant:851] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v827(R) [immediate:1611] v851(R)
gap () () 
          X64MovqCompressTagged : MRI v827(R) [immediate:1609] [immediate:1610]
gap () () 
          X64Movsd : MRI v827(R) [immediate:1608] v850(R)
gap () () 
          X64Movsd : MRI v827(R) [immediate:1607] v850(R)
gap () () 
          X64Movsd : MRI v827(R) [immediate:1606] v850(R)
gap () () 
          X64Movsd : MRI v827(R) [immediate:1605] v850(R)
gap () () 
          v849(R) = X64Lea : MRI v848(R) [immediate:1604]
gap () () 
          X64Movq : MR v28(R) v849(R)
gap () () 
          v847(R) = X64Lea : MRI v848(R) [immediate:1603]
blocking v1005 pick register r8
gap () (v764 = v847(-);) 
          v764(1) = ArchNop v764
gap () () 
          X64MovqCompressTagged : MRI v764(R) [immediate:1602] v43(R)
gap () () 
          X64MovqCompressTagged : MRI v764(R) [immediate:1601] v24(R)
assign rax to v1043:0
gap () () 
          X64MovqCompressTagged : MRI v764(R) [immediate:1600] v827(R)
assign 0 to v1043:0
gap () () 
          X64MovqCompressTagged : MRI v764(R) [immediate:1598] [immediate:1599]
gap () () 
          X64Test32 && deoptimize if equal v784 #1 #360 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1595] v784(-) v785(-) v786(S) v764(-) [immediate:1596] [immediate:1597]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v784(R) [immediate:1591] v25(R) #359 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1592] v784(-) v785(-) v786(S) v764(-) [immediate:1593] [immediate:1594]
assign r8 to v184:64
assign 8 to v184:64
gap () () 
          v844(R) = X64MovqDecompressTaggedPointer : MRI v784(R) [immediate:1590]
gap () () 
          v846(R) = X64MovqDecompressTaggedSigned : MRI v784(R) [immediate:1589]
gap () (v845(R) = v846(-);) 
          v845(1) = X64Sar32 v845(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v845 #0 #358 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1586] v784(-) v785(-) v786(S) v764(-) [immediate:1587] [immediate:1588]
assign r9 to v1046:3
gap () () 
          v843(R) = X64MovqDecompressAnyTagged : MRI v844(R) [immediate:1585]
assign 9 to v1046:3
gap () () 
          X64Test32 && deoptimize if equal v843 #1 #357 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1582] v784(-) v785(-) v786(S) v764(-) [immediate:1583] [immediate:1584]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v843(R) [immediate:1578] v43(R) #356 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1579] v784(-) v785(-) v786(S) v764(-) [immediate:1580] [immediate:1581]
assign r11 to v530:41
gap () () 
          v839(R) = X64MovqDecompressTaggedPointer : MRIassign 11 to v530:41
 v843(R) [immediate:1577]
gap () () 
          v842(R) = X64MovqDecompressTaggedSigned : MRI v843(R) [immediate:1576]
gap () (v840(R) = v842(-);) 
          v840(1) = X64Sar32 assign r12 to v1068:0
v840(R) #1
assign 12 to v1068:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v840 #0 #355 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1573] v784(-) v785(-) v786(S) v764(-) [immediate:1574] [immediate:1575]
gap () () 
          v836(R) = X64Movsd : MRI v839(R) [immediate:1572]
assign r14 to v1074:0
assign 14 to v1074:0
gap () () 
          X64Test32 && deoptimize if equal v785 #1 #354 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1569] v784(-) vassign r14 to v1063:0
assign 14 to v1063:0
785(-) v786(S) v764(-) [immediate:1570] [immediate:1571]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v785(R) [immediate:1565] v43(R) #353 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1566] v784(-) v785(-) v786(S) v764(-) [immediate:1567] [immediate:1568]
gap () () 
          v835(R) = X64MovqDecompressTaggedPointer : MRI v785(R) [immediate:1564]
assign rdx to v1073:0
assign 2 to v1073:0
gap () () 
          v841(R) = X64MovqDecompressTaggedSigned : MRI v785(R) [immediate:1563]
assign rdx to v1071:0
gap () (v838(R) = v841(-);) 
          v838(1) = X64Sar32 v838(R) #1
assign 2 to v1071:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v838 #0 #352 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1560] v784(-) v785(-) v786(S) v764(-) [immediate:1561] [immediate:1562]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v840 #1 #351 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1557] v784(-) v785(-) v786(S) v764(-) [immediate:1558] [immediate:1559]
assign r15 to v1072:0
assign 15 to v1072:0
gap () () 
          v837(R) = X64Movsd : MRI v839(R) [immediate:1556]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v838 #1 #350 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1553] v784(-) v785(-) v786(S) v764(-) [immediate:1554] [immediate:1555]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v840 #2 #349 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1550] v784(-) v785(-) v786(S) v764(-) [immediate:1551] [immediate:1552]
gap () () 
          v834(R) = X64Movsd : MRI v839(R) [immediate:1549]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v838 #2 #348 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1546] v784(-) v785(-) v786(S) v764(-) [immediate:1547] [immediate:1548]
gap () () 
          v832(R) = AVXFloat64Mul : MRI v837(R) v835(R) [immediate:1545]
gap () () 
          v833(R) = AVXFloat64Mul : MRI v836(R) v835(R) [immediate:1544]
gap () () 
          v830(R) = AVXFloat64Mul : MRI v834(R) v835(R) [immediate:1543]
gap () () 
          v831(R) = AVXFloat64Add v832(R) v833
gap () () 
          v829(R) = AVXFloat64Add v830(R) v831
assign rbx to v1054:1
gap () () 
          X64MovqCompressTagged : MRI vassign 3 to v1054:1
764(R) [immediate:1541] [immediate:1542]
assign rsi to v1070:1
gap () () 
          X64Movsd : MRI v827(R)assign 6 to v1070:1
 [immediate:1540] v829(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1538] [immediate:1539]
gap () () 
          [constant:826] = ArchNop
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v826(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1536] #-1 #347 v0(S) v1(S) v2(S) v3(S) v729(S) v783(S) [immediate:1537] v784(S) v785(S) v786(S) v764(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:assign r12 to v1043:1
assign 12 to v1043:1
1535]
gap () () 
          ArchJmp [immediate:1534]
gap () (v805 = v372(-);) 
          ArchJmp [immediate:1533]
gap () () 
          X64Cmp32 && branch if unsigned less than v805 #3 [immediate:1531] [immediate:1532]
gap () () 
          v822(R) = X64MovqDecompressTaggedPointer : MRI v784(R) [immediate:1530]
gap () () 
          v824(R) = X64MovqDecompressTaggedSigned : MRI v784(R) [immediate:1529]
gap () (v823(R) = v824(-);) 
          v823(1) = X64Sar32 v823(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v805(R) v823 #346 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1527] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1528]
gap () () 
          v821(R) = X64MovqDecompressAnyTagged : MR4I v822(R) v805(R) [immediate:1526]
gap () () 
          X64Test32 && deoptimize if equal v821 #1 #345 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1524] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1525]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v821(R) [immediate:1521] v43(R) #344 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1522] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1523]
gap () () 
          v817(R) = X64MovqDecompressTaggedPointer : MRI v821(R) [immediate:1520]
gap () () 
          v820(R) = X64MovqDecompressTaggedSigned : MRI v821(R) [immediate:1519]
gap () (v818(R) = v820(-);) 
          v818(1) = blocking v1046 pick register r9
X64Sar32 v818(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v818 #0 #343 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1517] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1518]
gap () () 
          v800(R) = X64Movsd : MRI v817(R) [immediate:1516]
gap () () 
          v815(R) = X64MovqDecompressTaggedPointer : MRI v785(R) [immediate:1515]
gap () () 
          v819(R) = X64MovqDecompressTaggedSigned : MRI v785(R) [immediate:1514]
gap () (v816(R) = v819(-);) 
          v816(1) = X64Sar32 v816(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v816 #0 #342 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1512] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1513]
gap () () 
          v799(R) = X64Movsd : MRI v815(R) [immediate:1511]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v818 #1 #341 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1509] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1510]
gap () () 
          v802(R) = X64Movsd : MRI v817(R) [immediate:1508]
blocking v1043 pick register r8
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v816 #1 #340 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1506] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1507]
gap () () 
          v801(R) = X64Movsd : MRI v815(R) [immediate:1505]
assign rax to v1069:0
assign 0 to v1069:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v818 #2 #339 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1503] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1504]
gap () () 
          v798(R) = X64Movsd : MRI v817(R) [immediate:1502]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v816 #2 #338 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1500] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1501]
gap () () 
          v797(R) = X64Movsd : MRI v815(R) [immediate:1499]
gap () () 
          v807(R) = X64MovqDecompressTaggedPointer : MRI v764(R) [immediate:1498]
gap () () 
          v813(R) = X64MovqDecompressTaggedSigned : MRI v764(R) [immediate:1497]
gap () () 
          v814(R) = X64MovqDecompressTaggedSigned : MRI v807(R) [immediate:1496]
assign r14 to v1063:2
assign 14 to v1063:2
gap () (v811(R) = v814(-);) 
          v811(1) = X64Sar32 v811(R) #1
assign r11 to v530:44
assign 11 to v530:44
gap () (v806(R) = v813(-);) 
          v806(1) = X64Sar32 v806(R) #1
assign r9 to v1046:6
assign 9 to v1046:6
gap () () 
          v812(R) = X64Lea32 : MRI v806(R) #1
assign r8 to v184:67
assign 8 to v184:67
assign rax to v1043:4
assign 0 to v1043:4
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v805(R) v812 #337 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1494] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1495]
gap () () 
          X64Cmp32 && branch if unsigned less than v805(R) v811 [immediate:1492] [immediate:assign r12 to v1064:0
1493]
assign 12 to v1064:0
gap () () 
          v810(R) = X64Lea32 : MR1 v805(R) v805(R)
gap () ([rax|R|t] = v764(-); [rbx|R|w32] = v810(-); [rsi|R|w64] = v587(-);) 
          [rax|R|t] = ArchCallCodeObjectassign rdx to v1067:0
assign 2 to v1067:0
 [immediate:1491] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v808(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v808 #1 #336 v0(S) v1(-) v2(S) v3(-) v729(-) v783(S) [immediate:1489] v784(-) v785(-) v786(S) v764(-) v805(-) [immediate:1490]
gap () (v789 = v808(-);) 
          ArchJmp [immediate:1488]
gap () (v789 = v807(-);) 
          ArchJmp [immediate:1487]
gap () () 
          v787(R) = X64Lea32 : MRI v805(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v805(R) v806 [immediate:1485] [immediate:1486]
gap () () 
          v804(R) = X64Lea32 : MR1 v787(R) v787(R)
gap () () 
          X64MovqCompressTagged : MRI v764(R) [immediate:1484] v804(R)
gap () () 
          ArchJmp [immediate:1483]
gap () () 
          ArchJmp [immediate:1482]
gap () () 
          v795(R) = AVXFloat64Mul v801(R) v802
gap () () 
          v796(R) = AVXFloat64Mul v799(R) v800
gap () () 
          v793(R) = AVXFloat64Mul v797(R) v798
assign rsi to v1066:1
assign 6 to v1066:1
gap () () 
          v794(R) = AVXFloat64Add v795(R) v796
gap () () 
          v792(R) = AVXFloat64Add v793(R) v794
gap () () 
          X64Movsd : MR8I v789(R) v805(R) [immediate:1481] v792(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1479] [immediate:1480]
gap () () 
          [constant:788] = ArchNop
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v788(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1477] #-1 #335 v0(S) v1(S) v2(S) v3(S) v729(S) v783(S) [immediate:1478] v784(S) v785(S) v786(S) v764(S) v787(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1476]
assign r12 to v1043:5
assign 12 to v1043:5
gap () () 
          ArchJmp [immediate:1475]
gap () (v805 = v787(-);) 
          ArchJmp [immediate:1474]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:1473] v49(R) #334 v0(S) v1(-) v2(S) v3(-) v729(-) v764(-)
gap () () 
          v775(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:1472]
gap () () 
          v771(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:1471]
gap () () 
          v781(R) = X64MovqDecompressTaggedSigned : MRI v775(R) [immediate:1470]
gap () (v779(R) = v781(-);) 
          v779(1) = X64Sar32 v779(R) #1
gap () () 
          v780(R) = X64Lea32 : MRI v779(R) #1024
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v729(R) v780 #333 v0(S) v1(-) v2(S) v3(-) v729(-) v764(-)
gap () () 
          X64Cmp32 && branch if unsigned less than v729(R) v779 [immediate:1468] [immediate:1469]
gap () () 
          v778(R) = X64Lea32 : MR1 v729(R) v729(R)
gap () ([rax|R|t] = v3(-); [rbx|R|w32] = v778(-); [rsi|R|w64] = v587(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1467] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v776(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v776 #1 #332 v0(S) v1(-) v2(S) v3(-) v729(-) v764(-)
gap () (v772 = v776(-);) 
          ArchJmp [immediate:1466]
gap () (v772 = v775(-);) 
          ArchJmp [immediate:1465]
gap () () 
          v774(R) = X64Movl : MRI v772(R) [immediate:1464]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v774(R) [immediate:1462] [immediate:1463]
gap () ([rax|R|t] = v3(-); [rsi|R|w64] = v587(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1461] #-1 [rax|R|t] [rsi|R|w64]
gap (v773(-) = [rax|R|t];) (v762 = v773(-);) 
          ArchJmp [immediate:1460]
gap () (v762 = v772(-);) 
          ArchJmp [immediate:1459]
gap () (v770(R) = v771(-);) 
          v770(1) = X64Sar32 v770(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v729(R) v770 [immediate:1457] [immediate:1458]
gap () () 
          v769(R) = X64Lea32 : MRI v729(R) #1
gap () () 
          v768(R) = X64Lea32 : MR1 v769(R) v769(R)
assign rax to v1065:0
assign 0 to v1065:0
gap () () 
          X64MovqCompressTagged : MRI v3(R) [immediate:1456] v768(R)
gap () () 
          ArchJmp [immediate:1455]
gap () () 
          ArchJmp [immediate:1454]
gap () () 
          ArchStoreWithWriteBarrier : MR1 v762(R) v763(R) v764(R)
gap () () 
          v760(R) = X64Lea32 : MRI v729(R) #-1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1452] [immediate:1453]
gap () () 
          [constant:761] = ArchNop
assign rax to v1043:7
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v761(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1451] #-1 #331 v0(S) v1(S) v2(S) v3(S) v760(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
assign 0 to v1043:7
gap () () 
          ArchJmp [immediate:1450]
gap () () 
          ArchJmpassign r8 to v184:69
assign 8 to v184:69
 [immediate:1449]
assign r9 to v1046:8
assign 9 to v1046:8
gap () (v729 = v760(-);) 
          ArchJmpassign r11 to v530:46
 [immediate:1448]
assign 11 to v530:46
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R)assign r14 to v1063:4
assign 14 to v1063:4
 [immediate:1446] v49(R) #330 v0(S) v1(-) v2(S) v3(-) vassign r12 to v1060:0
assign 12 to v1060:0
729(-) [immediate:1447]
gap () () 
          v749(R) = X64MovqDecompressTaggedPointerassign r9 to v1046:5
 : MRI v3(R) [immediate:1445]
assign 9 to v1046:5
gap () () 
          v758(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:1444]
gap () (v750(R) = v758(-);) 
          v750(1) = X64Sar32 v750(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v750 #0 #329 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1443]
gap () () 
          v756(R) = X64MovqDecompressAnyTagged : MRI v749(R) [immediate:1442]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v756(R) [immediate:1440] [immediate:1441]
gap () (v755 = v756(-);) 
          ArchJmp [immediate:1439]
gap () () 
          [constant:757]assign r14 to v1043:3
assign 14 to v1043:3
 = ArchNop
gap () (v755 = v757(-);) 
          ArchJmp [immediate:1438]
gap () () 
          [constant:37] = ArchNop
gap () () 
          X64Test32 && deoptimize if equal v755 #1 #328 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1437]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v755(R) [immediate:1435] v43(R) #327 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1436]
assign r9 to v1061:0
gap () () 
          v752(R)assign 9 to v1061:0
 = X64MovqDecompressTaggedPointer : MRI v755(R) [immediate:1434]
gap () () 
          v754(R) = X64MovqDecompressTaggedSigned : MRI v755(R) [immediate:1433]
gap () (v753(R) = v754(-);) 
          v753(1) = X64Sar32 v753(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v753 #2 #326 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1432]
gap () () 
          v751(R) = X64Movsd : MRI v752(R) [immediate:1431]
assign r15 to v1062:0
assign 15 to v1062:0
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v751 [immediate:1429] [immediate:1430]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v750 #1 #325 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1428]
gap () () 
          v747(R) = X64MovqDecompressAnyTagged : MRI v749(R) [immediate:1427]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v747(R) [immediate:1425] [immediate:1426]
gap () (v746 = v747(-);) 
          ArchJmp [immediate:1424]
gap () () 
          [constant:748] = ArchNop
gap () (v746 = v748(-);) 
          ArchJmp [immediate:1423]
assign rax to v1043:8
assign 0 to v1043:8
gap () () 
          X64Test32 && deoptimize if equal v746 #1 #324 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1422]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v746(R) [immediate:1420] v43(R) #323 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1421]
gap () () 
          v743(R) = X64MovqDecompressTaggedPointer : MRI v746(R) [immediate:1419]
gap () () 
          v745(R) = X64MovqDecompressTaggedSigned : MRI v746(R) [immediate:1418]
gap () (v744(R) = v745(-);) 
          v744(1) = X64Sar32 v744(R) #1
assign r12 to v1052:0
assign 12 to v1052:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v744 #2 #322 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1417]
gap () () 
          v742(R) = X64Movsd : MRI v743(R) [immediate:1416]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v742 [immediate:1414] [immediate:1415]
gap () () 
          ArchJmp [immediate:1413]
gap () () 
          v741(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1412]
gap () () 
          v740(R) = X64MovqDecompressAnyTagged : MRI vassign r14 to v1059:0
assign 14 to v1059:0
741(R) [immediate:1411]
assign r14 to v1047:0
assign 14 to v1047:0
gap () () 
          X64Test32 && deoptimize if equal v740 #1 #321 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1410]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v740(R) [immediate:1408] v25(R) #320 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1409]
gap () () 
          v737(R) = X64MovqDecompressTaggedPointer : MRI v740(R) [immediate:1407]
gap () () 
          v739(R) = X64MovqDecompressTaggedSigned : MRI v740(R) [immediate:1406]
assign rdx to v1058:0
assign 2 to v1058:0
gap () (v738(R) = v739(-);) 
          v738(1) = X64Sar32 v738(R) #1
assign rdx to v1056:0
assign 2 to v1056:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v738 #2 #319 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1405]
gap () () 
          v734(R) = X64MovqDecompressAnyTagged : MRI v737(R) [immediate:1404]
gap () () 
          X64Test32 && branch if equal v734 #1 [immediate:1402] [immediate:1403]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v734(R) [immediate:1400] [immediate:1401]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v734(R) [immediate:1398] [immediate:1399]
gap () () 
          v736(R) = X64MovqDecompressTaggedPointer : MRI v734(R) [immediate:1397]
assign r15 to v1057:0
assign 15 to v1057:0
gap () () 
          X64Test8 : MRI && branch if equal v736(R) [immediate:1394] #16 [immediate:1395] [immediate:1396]
gap () () 
          ArchJmp [immediate:1393]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v736(R) [immediate:1391] [immediate:1392]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v736(R) [immediate:1389] [immediate:1390]
gap () () 
          ArchJmp [immediate:1388]
gap () () 
          X64Test32 : MRI && branch if not equal v734(R) [immediate:1385] #2147483646 [immediate:1386] [immediate:1387]
gap () () 
          ArchJmp [immediate:1384]
gap () () 
          ArchJmp [immediate:1383]
gap () () 
          v735(R) = X64Movsd : MRI v734(R) [immediate:1382]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v735 [immediate:1380] [immediate:1381]
gap () () 
          ArchJmp [immediate:1379]
gap () () 
          ArchJmp [immediate:1378]
gap () () 
          ArchJmp [immediate:1377]
gap () () 
          ArchJmp [immediate:1376]
gap () () 
          X64Cmp32 && branch if not equal v734 [immediate:1373] [immediate:1374] [immediate:1375]
gap () () 
          ArchJmp [immediate:1372]
gap () () 
          [constant:727] = ArchNop
assign rsi to v1055:1
gap () () 
          [constant:726] = ArchNop
assign 6 to v1055:1
gap () () 
          [constant:723] = ArchNop
gap () () 
          v722(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1371]
gap () () 
          v731(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:1370]
gap () () 
          v733(R) = X64MovqDecompressTaggedSigned : MRI v6(R) [immediate:1369]
gap () (v732(R) = v733(-);) 
          v732(1) = X64Sar32 v732(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v732 #3 #318 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1368]
gap () () 
          v724(R) = X64MovqDecompressAnyTagged : MRI v731(R) [immediate:1367]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v732 #2 #317 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1366]
gap () () 
          v725(R) = X64MovqDecompressAnyTagged : MRI v731(R) [immediate:1365]
gap assign r11 to v1043:9
assign 11 to v1043:9
() () 
          X64Test32 && deoptimize if equal v722 #1 #316 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1364]
gap () () 
          v730(R) = X64MovqDecompressTaggedPointer : MRI v722(R) [immediate:1363]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v730(R) [immediate:1361] #1068 #315 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1362]
gap () () 
          v728(R) = X64MovqDecompressTaggedPointer : MRI v722(R) [immediate:1360]
gap () () 
          X64Cmp && deoptimize if not equal v727(R) v728 #314 v0(S) v1(-) v2(S) v3(-) v729(-) [immediate:1359]
gap () () 
          X64Push v725(-)
gap () () 
          X64Push v724(-)
gap () () 
          X64Push v723(-)
gap () ([rdi|R|t] = v722(-); [rax|R|w64] = v70(-); [rsi|R|t] = v726(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1358] #-1 #313 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v718(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1357]
blocking v1046 pick register r9
gap () () 
          X64Test32 && deoptimize if equal v718 #1 #312 v0(S) v1(-) v2(S) v3(-) v718(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v718(R) [immediate:1356] v10(R) #311 v0(S) v1(-) v2(S) v3(-) v718(-)
gap () () 
          v720(R) = X64MovqDecompressTaggedPointer : MRI v718(R) [immediate:1355]
gap () () 
          v715(R) = X64MovqDecompressAnyTagged : MRI v720(R) [immediate:1354]
gap () () 
          X64Test32 && deoptimize if equal v715 #1 #310 v0(S) v1(-) v2(S) v3(-) v718(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v715(R) [immediate:1353] v25(R) #309 v0(S) v1(-) v2(S) v3(-) v718(-)
gap () () 
          v713(R) = X64MovqDecompressTaggedPointer : MRI v715(R) [immediate:1352]
gap () () 
          v719(R) = X64MovqDecompressTaggedSigned : MRI v715(R) [immediate:1351]
gap () (v717(R) = v719(-);) 
          v717(1) = X64Sar32 v717(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v717 #2 #blocking v1043 pick register r8
308 v0(S) v1(-) v2(S) v3(-) v718(-)
gap () () 
          v716(R) = X64Movl : MRI v713(R) [immediate:1350]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v716(R) [immediate:1348] [immediate:1349]
assign rax to v1053:0
gap () ([rax|R|tassign 0 to v1053:0
] = v715(-); [rsi|R|w64] = v587(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1347] #-1 [rax|R|t] [rsi|R|w64]
gap (v714(-) = [rax|R|t];) (v711 = v714(-);) 
          ArchJmp [immediate:1346]
gap () (v711 = v713(-);) 
          ArchJmp [immediate:1345]
gap () () 
          [constant:712] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v711(R) [immediate:1344] v712(R)
gap () () 
          ArchJmp [immediate:1343]
assign r14 to v1047:2
gap () () 
          ArchJmp [immediate:1342]
assign 14 to v1047:2
gap () () 
          ArchJmp [immediate:1341]
assign rax to v1043:12
gap () () 
          v698(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1340]
assign 0 to v1043:12
assign r9 to v1046:11
assign 9 to v1046:11
gap () () 
          X64Test32 && deoptimize if equal v698 #1 #307 v0(S) v1(-) v2(S) v3(-) v698(-)
assign r8 to v184:71
assign 8 to v184:71
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v698(R) [immediate:1339] v10(R) #306 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v710(R) = X64MovqDecompressTaggedPointer : MRI v698(R) [immediate:1338]
assign r12 to v1048:0
gap () () 
          v709(R) = X64MovqDecompressAnyTagged : MRI v710(R) [immediate:1337]
assign 12 to v1048:0
gap () () 
          X64Test32 && deoptimize if equal v709 #1 #305 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v709(R) [immediate:1336] v25(R) #304 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v706(R) = X64MovqDecompressTaggedPointer : MRI v709(R) [immediate:1335]
assign rdx to v1051:0
assign 2 to v1051:0
gap () () 
          v708(R) = X64MovqDecompressTaggedSigned : MRI v709(R) [immediate:1334]
gap () (v707(R) = v708(-);) 
          v707(1) = X64Sar32 v707(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v707 #9 #303 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v703(R) = X64MovqDecompressAnyTagged : MRI v706(R) [immediate:1333]
gap () () 
          X64Test32 && branch if equal v703 #1 [immediate:1331] [immediate:1332]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v703(R) [immediate:1329] [immediate:1330]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v703(R) [immediate:1327] [immediate:1328]
gap () () 
          v705(R) = X64MovqDecompressTaggedPointer : MRI v703(R) [immediate:1326]
gap () () 
          X64Test8 : MRI && branch if equal v705(R) [immediate:1323] #16 [immediate:1324] [immediate:1325]
gap () () 
          ArchJmp [immediate:1322]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v705(R) [immediate:1320] [immediate:1321]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v705(R) [immediate:1318] [immediate:1319]
gap () () 
          ArchJmp [immediate:1317]
gap () () 
          X64Test32 : MRI && branch if not equal v703(R) [immediate:1314] #2147483646 [immediate:1315] [immediate:1316]
assign rsi to v1050:1
gap () () 
          ArchJmp [immediate:1313]
assign 6 to v1050:1
gap () () 
          ArchJmp [immediate:1312]
gap () () 
          v704(R) = X64Movsd : MRI v703(R) [immediate:1311]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v704 [immediate:1309] [immediate:1310]
gap () () 
          ArchJmp [immediate:1308]
gap () () 
          ArchJmp [immediate:1307]
gap () () 
          ArchJmp [immediate:1306]
gap () () 
          ArchJmp [immediate:1305]
gap () () 
          X64Cmp32 && branch if not equal v703 [immediate:1302] [immediate:1303] [immediate:1304]
gap () () 
          ArchJmp [immediate:1301]
gap () () 
          [constant:696] = ArchNop
gap () () 
          [constant:695] = ArchNop
gap () () 
          [constant:692] = ArchNop
gap () () 
          [constant:683] = ArchNop
gap () () 
          v691(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1300]
gap () () 
          v700(R) = X64MovqDecompressTaggedPointer : MRI v698(R) [immediate:1299]
assign r11 to v1043:13
assign 11 to v1043:13
gap () () 
          v702(R) = X64MovqDecompressTaggedSigned : MRI v698(R) [immediate:1298]
gap () (v701(R) = v702(-);) 
          v701(1) = X64Sar32 v701(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v701 #2 #302 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v693(R) = X64MovqDecompressAnyTagged : MRI v700(R) [immediate:1297]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v701 #6 #301 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v694(R) = X64MovqDecompressAnyTagged : MRI v700(R) [immediate:1296]
gap () () 
          X64Test32 && deoptimize if equal v691 #1 #300 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v699(R) = X64MovqDecompressTaggedPointer : MRI v691(R) [immediate:1295]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v699(R) [immediate:1294] #1068 #299 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          v697(R) = X64MovqDecompressTaggedPointer : MRI v691(R) [immediate:1293]
gap () () 
          X64Cmp && deoptimize if not equal v696(R) v697 #298 v0(S) v1(-) v2(S) v3(-) v698(-)
gap () () 
          X64Push v694(-)
gap () () 
          X64Push v693(-)
gap () () 
          X64Push v692(-)
gap () ([rdi|R|t] = v691(-); [rax|R|w64] = v70(-); [rsi|R|t] = v695(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1292] #-1 #297 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v685(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1291]
gap () () 
          X64Test32 && deoptimize if equal v685 #1 #296 v0(S) v1(-) v2(S) v3(-) v685(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v685(R) [immediate:1290] v10(R) #295 v0(S) v1(-) v2(S) v3(-) v685(-)
gap () () 
          v689(R) = X64MovqDecompressTaggedPointer : MRI v685(R) [immediate:1289]
gap () () 
          v687(R) = X64MovqDecompressAnyTagged : MRI v689(R) [immediate:1288]
gap () () 
          X64Test32 && deoptimize if equal v687 #1 #294 v0(S) v1(-) v2(S) v3(-) v685(-)
assign rax to v1049:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v687(R) [immediate:1287] v25(R) #293 v0(S) v1(-) v2(S) v3(-) v685(-)
assign 0 to v1049:0
gap () () 
          v682(R) = X64MovqDecompressTaggedPointer : MRI v687(R) [immediate:1286]
gap () () 
          v688(R) = X64Movl : MRI v682(R) [immediate:1285]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v688(R) #292 v0(S) v1(-) v2(S) v3(-) v685(-)
gap () () 
          v686(R) = X64MovqDecompressTaggedSigned : MRI v687(R) [immediate:1284]
gap () (v684(R) = v686(-);) 
          v684(1) = X64Sar32 v684(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v684 #9 #291 v0(S) v1(-) v2(S) v3(-) v685(-)
assign r8 to v184:73
assign 8 to v184:73
gap () () 
          X64MovqCompressTagged : MRI v682(R) [immediate:1283] v683(R)
gap () () 
          ArchJmp [immediate:1282]
assign r9 to v1046:13
assign 9 to v1046:13
gap () () 
          ArchJmp [immediate:1281]
gap () () 
          ArchJmp [immediate:1280]
assign rax to v1043:15
assign 0 to v1043:15
gap () () 
          v669(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1279]
assign r14 to v1047:4
assign 14 to v1047:4
gap () () 
          X64Test32 && deoptimize if equal v669 #1 #290 v0(S) v1(-) v2(S) v3(-) v669(-)
assign r12 to v1042:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v669(R) [immediate:1278] v10(R) #289 v0(S) v1(-) v2(S) v3(-) v669(-)
assign 12 to v1042:0
gap () () 
          v681(R) = X64MovqDecompressTaggedPointer : MRI v669(R) [immediate:1277]
gap () () 
          v680(R) = X64MovqDecompressAnyTagged : MRI v681(R) [immediate:1276]
assign r9 to v1046:10
assign 9 to v1046:10
gap () () 
          X64Test32 && deoptimize if equal v680 #1 #288 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v680(R) [immediate:1275] v25(R) #287 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          v677(R) = X64MovqDecompressTaggedPointer : MRI v680(R) [immediate:1274]
gap () () 
          v679(R) = X64MovqDecompressTaggedSigned : MRI v680(R) [immediate:1273]
gap () (v678(R) = v679(-);) 
          v678(1) = X64Sar32 v678(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v678 #6 #286 v0(S) v1(-) v2(S) v3(-) v669(-)
assign r9 to v1043:11
gap () () 
          v674(R) = X64MovqDecompressAnyTagged : MRI v677(R) [immediate:1272]
assign 9 to v1043:11
gap () () 
          X64Test32 && branch if equal v674 #1 [immediate:1270] [immediate:1271]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v674(R) [immediate:1268] [immediate:1269]
gap () () 
          X64Cmp32 : Root && branch if equal #assign r11 to v1044:0
assign 11 to v1044:0
184 v674(R) [immediate:1266] [immediate:1267]
gap () () 
          v676(R) = X64MovqDecompressTaggedPointer : MRI v674(R) [immediate:1265]
gap () () 
          X64Test8 : MRI && branch if equal v676(R) [immediate:1262] #16 [immediate:1263] [immediate:1264]
gap () () 
          ArchJmp [immediate:1261]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v676(R) [immediate:1259] [immediate:1260]
assign r14 to v1045:0
gap () () 
          X64Cmp32 : Root && branch if equal #432 v676(R) [immediate:1257] [immediate:1258]
assign 14 to v1045:0
gap () () 
          ArchJmp [immediate:1256]
gap () () 
          X64Test32 : MRI && branch if not equal v674(R) [immediate:1253] #2147483646 [immediate:1254] [immediate:1255]
gap () () 
          ArchJmp [immediate:1252]
assign r11 to v530:48
assign 11 to v530:48
gap () () 
          ArchJmp [immediate:1251]
gap () () 
          v675(R) = X64Movsd : MRI v674(R) [immediate:1250]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v675 [immediate:1248] [immediate:1249]
gap () () 
          ArchJmp [immediate:1247]
gap () () 
          ArchJmp [immediate:1246]
gap () () 
          ArchJmp [immediate:1245]
gap () () 
          ArchJmp [immediate:1244]
gap () () 
          X64Cmp32 && branch if not equal v674 [immediate:1241] [immediate:1242] [immediate:1243]
gap () () 
          ArchJmp [immediate:1240]
gap () () 
          [constant:667] = ArchNop
gap () () 
          [constant:666] = ArchNop
gap () () 
          [constant:663] = ArchNop
gap () () 
          [constant:654] = ArchNop
assign rsi to v3:56
gap () () 
          v662(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1239]
assign 6 to v3:56
gap () () 
          v671(R) = X64MovqDecompressTaggedPointer : MRI v669(R) [immediate:1238]
gap () () 
          v673(R) = X64MovqDecompressTaggedSigned : MRI v669(R) [immediate:1237]
gap () (v672(R) = v673(-);) 
          v672(1) = X64Sar32 v672(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v672 #6 #285 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          v664(R) = X64MovqDecompressAnyTagged : MRI v671(R) [immediate:1236]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v672 #7 #284 v0(S) v1(-) v2(S) v3(-) v669(-)
v1011:0 not intersect with v184:2, removed
gap () () 
          v665(R) = X64MovqDecompressAnyTagged : MRI v671(R) [immediate:1235]
v1011:0 not intersect with v530:2, removed
v1011:0 not intersect with v1024:0, removed
v1011:1 intersect with v1024:0, adding
v1011:0 not intersect with v1017:0, removed
gap () () 
          X64Test32 && deoptimize if equal v662 #1 #283 v0(S) v1(-) v2(S) v3(-) v669(-)
v1011:1 intersect with v1017:0, adding
v1011:0 not intersect with v1039:0, removed
gap () () 
          v670(R) = X64MovqDecompressTaggedPointer : MRI v662(R) [immediate:1234]
v1011:1 intersect with v1039:0, adding
v1011:0 not intersect with v1033:0, removed
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v670(R) [immediate:1233] #1068 v1011:1 intersect with v1033:0, adding
#282 v0(S) v1(-) v2(S) v3(-)assign rax to v1011:0
assign 0 to v1011:0
 v669(-)
gap () () 
          v668(R) = X64MovqDecompressTaggedPointer : MRI vassign rdx to v1040:0
662(R) [immediate:1232]
assign 2 to v1040:0
gap () () 
          X64Cmp && deoptimize if not equal v667(R) v668 #281 v0(S) v1(-) v2(S) v3(-) v669(-)
gap () () 
          X64Push v665(-)
gap () () 
          X64Push v664(-)
gap () () 
          X64Push v663(-)
gap () ([rdi|R|t] = v662(-); [rax|R|w64] = v70(-); [rsi|R|t] = v666(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1231] #-1 #280 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
assign r9 to v1005:13
assign 9 to v1005:13
gap () () 
          v656(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1230]
gap () () 
          X64Test32 && deoptimize if equal v656 #1 #279 v0(S) v1(-) v2(S) v3(-) v656(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v656(R) [immediate:1229] v10(R) #278 v0(S) v1(-) v2(S) v3(-) v656(-)
gap () () 
          v660(R) = X64MovqDecompressTaggedPointer : MRI v656(R) [immediate:1228]
gap () () 
          v658(R) = X64MovqDecompressAnyTagged : MRI v660(R) [immediate:1227]
gap () () 
          X64Test32 && deoptimize if equal v658 #1 #277 v0(S) v1(-) v2(S) v3(-) v656(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v658(R) [immediate:1226] v25(R) #276 v0(S) v1(-) v2(S) v3(-) v656(-)
gap () () 
          v653(R) = X64MovqDecompressTaggedPointer : MRI v658(R) [immediate:1225]
assign r12 to v3:57
assign 12 to v3:57
gap () () 
          v659(R) = X64Movl : MRI v653(R) [immediate:1224]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v659(R) #275 v0(S) v1(-) v2(S) v3(-) v656(-)
gap () () 
          v657(R) = X64MovqDecompressTaggedSigned : MRI v658(R) [immediate:1223]
gap () (v655(R) = v657(-);) 
          v655(1) = X64Sar32 v655(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v655 #6 #274 v0(S) v1(-) v2(S) v3(-) v656(-)
gap () () 
          X64MovqCompressTagged : MRI v653(R) [immediate:1222] v654(R)
v1011:1 not intersect with v1033:0, removed
gap () () 
          ArchJmp [immediate:1221]
v1011:2 intersect with v1033:0, adding
gap () () 
          ArchJmp [immediate:1220]
v1011:1 not intersect with v1039:0, removed
gap () () 
          ArchJmp [immediate:1219]
v1011:2 intersect with v1039:0, adding
v1011:1 not intersect with v1017:0, removed
gap () () 
          v640(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1218]
v1011:2 intersect with v1017:0, adding
v1011:1 not intersect with v1024:0, removed
v1011:2 intersect with v1024:0, adding
gap () () 
          X64Test32 && deoptimize if equal v640 #1 #273 v0(S) v1(-) v2(S) v3(-) v640(-)
assign r14 to v1011:1
assign 14 to v1011:1
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v640(R) [immediate:1217] v10(R) #272 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v652(R) = X64MovqDecompressTaggedPointer : MRI v640(R) [immediate:1216]
gap () () 
          v651(R) = X64MovqDecompressAnyTagged : MRI v652(R) [immediate:1215]
gap () () 
          X64Test32 && deoptimize if equal v651 #1 #271 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v651(R) [immediate:1214] v25(R) #270 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v648(R) = X64MovqDecompressTaggedPointer : MRI v651(R) [immediate:1213]
gap () () 
          v650(R) = X64MovqDecompressTaggedSigned : MRI v651(R) [immediate:1212]
gap () (v649(R) = v650(-);) 
          v649(1) = X64Sar32 v649(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v649 #10 #269 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v645(R) = X64MovqDecompressAnyTagged : MRI v648(R) [immediate:1211]
blocking v3 pick register r8
gap () () 
          X64Test32 && branch if equal v645 #1 [immediate:1209] [immediate:1210]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v645(R) [immediate:1207] [immediate:1208]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v645(R) [immediate:1205] [immediate:1206]
gap () () 
          v647(R) = X64MovqDecompressTaggedPointer : MRI v645(R) [immediate:1204]
gap () () 
          X64Test8 : MRI && branch if equal v647(R) [immediate:1201] #16 [immediate:1202] [immediate:1203]
gap () () 
          ArchJmp [immediate:1200]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v647(R) [immediate:1198] [immediate:1199]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v647(R) [immediate:1196] [immediate:1197]
gap () () 
          ArchJmp [immediate:1195]
gap () () 
          X64Test32 : MRI && branch if not equal v645(R) [immediate:1192] #2147483646 [immediate:1193] [immediate:1194]
gap () () 
          ArchJmp [immediate:1191]
gap () () 
          ArchJmp [immediate:1190]
gap () () 
          v646(R) = X64Movsd : MRI v645(R) [immediate:1189]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v646 [immediate:1187] [immediate:1188]
gap () () 
          ArchJmp [immediate:1186]
gap () () 
          ArchJmp [immediate:1185]
gap () () 
          ArchJmp [immediate:1184]
blocking v1011 pick register r8
gap () () 
          ArchJmp [immediate:1183]
gap () () 
          X64Cmp32 && branch if not equal v645 [immediate:1180] [immediate:1181] [immediate:1182]
gap () () 
          ArchJmp [immediate:1179]
gap () () 
          [constant:638] = ArchNop
gap () () 
          [constant:637] = ArchNop
gap () () 
          [constant:634] = ArchNop
gap () () 
          [constant:625] = ArchNop
gap () () 
          v633(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1178]
gap () () 
          v642(R) = X64MovqDecompressTaggedPointer : MRI v640(R) [immediate:1177]
gap () () 
          v644(R) = X64MovqDecompressTaggedSigned : MRI v640(R) [immediate:1176]
gap () (v643(R) = v644(-);) 
          v643(1) = X64Sar32 v643(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v643 #7 #268 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v635(R) = X64MovqDecompressAnyTagged : MRI v642(R) [immediate:1175]
blocking v184 pick register r8
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v643 #3 #267 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v636(R) = X64MovqDecompressAnyTagged : MRI v642(R) [immediate:1174]
gap () () 
          X64Test32 && deoptimize if equal v633 #1 #266 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v641(R) = X64MovqDecompressTaggedPointer : MRI v633(R) [immediate:1173]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v641(R) [immediate:1172] #1068 #265 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          v639(R) = X64MovqDecompressTaggedPointer : MRI v633(R) [immediate:1171]
gap () () 
          X64Cmp && deoptimize if not equal v638(R) v639 #264 v0(S) v1(-) v2(S) v3(-) v640(-)
gap () () 
          X64Push v636(-)
gap () () 
          X64Push v635(-)
gap () () 
          X64Push v634(-)
blocking v530 pick register r8
gap () ([rdi|R|t] = v633(-); [rax|R|w64] = v70(-); [rsi|R|t] = v637(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1170] #-1 #263 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v627(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1169]
gap () () 
          X64Test32 && deoptimize if equal v627 #1 #262 v0(S) v1(-) v2(S) v3(-) v627(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v627(R) [immediate:1168] v10(R) #261 v0(S) v1(-) v2(S) v3(-) v627(-)
gap () () 
          v631(R) = X64MovqDecompressTaggedPointer : MRI v627(R) [immediate:1167]
gap () () 
          v629(R) = X64MovqDecompressAnyTagged : MRI v631(R) [immediate:1166]
gap () () 
          X64Test32 && deoptimize if equal v629 #1 #260 v0(S) v1(-) v2(S) v3(-) v627(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v629(R) [immediate:1165] v25(R) #259 v0(S) v1(-) v2(S) v3(-) v627(-)
gap () () 
          v624(R) = X64MovqDecompressTaggedPointer : MRI v629(R) [immediate:1164]
blocking v1005 pick register r8
gap () () 
          v630(R) = X64Movl : MRI v624(R) [immediate:1163]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v630(R) #258 v0(S) v1(-) v2(S) v3(-) v627(-)
gap () () 
          v628(R) = X64MovqDecompressTaggedSigned : MRI v629(R) [immediate:1162]
assign rax to v1008:0
assign 0 to v1008:0
gap () (v626(R) = v628(-);) 
          v626(1) = X64Sar32 v626(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v626 #10 #257 v0(S) v1(-) v2(S) v3(-) v627(-)
gap () () 
          X64MovqCompressTagged : MRI v624(R) [immediate:1161] v625(R)
gap () () 
          ArchJmp [immediate:1160]
gap () () 
          ArchJmp [immediate:1159]
gap () () 
          ArchJmp [immediate:1158]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:1156] v49(R) #256 v0(S) v1(-) v2(S) v3(-) [immediate:1157]
assign r8 to v184:74
assign 8 to v184:74
gap () () 
          v621(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:1155]
gap () () 
          v623(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:1154]
gap () (v622(R) = v623(-);) 
          v622(1) = X64Sar32 v622(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v622 #2 #255 v0(S) v1(-) v2(S) v3(-) [immediate:1153]
gap () () 
          v619(R) = X64MovqDecompressAnyTagged : MRI v621(R) [immediate:1152]
assign r9 to v1011:3
gap () () 
          X64Cmp32 : Root && branch if equal #152 v619(R) [immediate:1150] [immediate:1151]
assign 9 to v1011:3
gap () (v618 = v619(-);) 
          ArchJmp [immediate:1149]
gap () () 
          [constant:620] = ArchNop
gap () (v618 = v620(-);) 
          ArchJmp [immediate:1148]
gap () () 
          X64Test32 && deoptimize if equal v618 #1 #254 v0(S) v1(-) v2(S) v3(-) [immediate:1147]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v618(R) [immediate:1145] v43(R) #253 v0(S) v1(-) v2(S) v3(-) [immediate:1146]
gap () () 
          v615(R) = X64MovqDecompressTaggedPointer : MRI v618(R) [immediate:1144]
gap () () 
          v617(R) = X64MovqDecompressTaggedSigned : MRI v618(R) [immediate:1143]
assign r11 to v530:49
assign 11 to v530:49
gap () (v616(R) = v617(-);) 
          v616(1) = X64Sar32 v616(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v616 #2 #252 v0(S) v1(-) v2(S) v3(-) [immediate:1142]
gap () () 
          v614(R) = X64Movsd : MRI v615(R) [immediate:1141]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v614 [immediate:1139] [immediate:1140]
gap () () 
          ArchJmp [immediate:1138]
gap () () 
          v605(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1137]
assign r12 to v1033:0
assign 12 to v1033:0
gap () () 
          X64Test32 && deoptimize if equal v605 #1 #251 v0(S) v1(-) v2(S) v3(-) [immediate:1136]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v605(R) [immediate:1134] v10(R) #250 v0(S) v1(-) v2(S) v3(-) [immediate:1135]
gap () () 
          v613(R) = X64MovqDecompressTaggedPointer : MRI v605(R) [immediate:1133]
gap () () 
          v612(R) = X64MovqDecompressAnyTagged : MRI v613(R) [immediate:1132]
assign r14 to v1039:0
assign 14 to v1039:0
gap () () 
          X64Test32 && deoptimize if equal v612 #1 #249 v0(S) v1(-) v2(S) v3(-) [immediate:1131]
assign r14 to v1028:0
assign 14 to v1028:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v612(R) [immediate:1129] v25(R) #248 v0(S) v1(-) v2(S) v3(-) [immediate:1130]
gap () () 
          v609(R) = X64MovqDecompressTaggedPointer : MRI v612(R) [immediate:1128]
gap () () 
          v611(R) = X64MovqDecompressTaggedSigned : MRI v612(R) [immediate:1127]
gap () (v610(R) = v611(-);) 
          v610(1) = X64Sar32 v610(R) #1
assign rdx to v1038:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v610 #4 #247 v0(S) v1(-) v2(S) v3(-) [immediate:1126]
assign 2 to v1038:0
gap () () 
          v606(R) = X64MovqDecompressAnyTagged : MRI v609(R) [immediate:1125]
assign rdx to v1036:0
gap () () 
          X64Test32 && branch if equal v606 #1 [immediate:1123] [immediate:1124]
assign 2 to v1036:0
gap () () 
          X64Cmp32 : Root && branch if equal #176 v606(R) [immediate:1121] [immediate:1122]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v606(R) [immediate:1119] [immediate:1120]
gap () () 
          v608(R) = X64MovqDecompressTaggedPointer : MRI v606(R) [immediate:1118]
gap () () 
          X64Test8 : MRI && branch if equal v608(R) [immediate:1115] #16 [immediate:1116] [immediate:1117]
gap () () 
          ArchJmp [immediate:1114]
assign r15 to v1037:0
assign 15 to v1037:0
gap () () 
          X64Cmp32 : Root && branch if equal #304 v608(R) [immediate:1112] [immediate:1113]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v608(R) [immediate:1110] [immediate:1111]
gap () () 
          ArchJmp [immediate:1109]
gap () () 
          X64Test32 : MRI && branch if not equal v606(R) [immediate:1106] #2147483646 [immediate:1107] [immediate:1108]
gap () () 
          ArchJmp [immediate:1105]
gap () () 
          ArchJmp [immediate:1104]
gap () () 
          v607(R) = X64Movsd : MRI v606(R) [immediate:1103]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v607 [immediate:1101] [immediate:1102]
gap () () 
          ArchJmp [immediate:1100]
gap () () 
          ArchJmp [immediate:1099]
gap () () 
          ArchJmp [immediate:1098]
gap () () 
          ArchJmp [immediate:1097]
gap () () 
          X64Cmp32 && branch if not equal v606 [immediate:1094] [immediate:1095] [immediate:1096]
gap () () 
          ArchJmp [immediate:1093]
gap () () 
          [constant:599] = ArchNop
gap () () 
          [constant:598] = ArchNop
gap () () 
          [constant:595] = ArchNop
gap () () 
          v594(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1092]
gap () () 
          v602(R) = X64MovqDecompressTaggedPointer : MRI v605(R) [immediate:1091]
gap () () 
          v604(R) = X64MovqDecompressTaggedSigned : MRI v605(R) [immediate:1090]
gap () (v603(R) = v604(-);) 
          v603(1) = X64Sar32 v603(R) #1
assign rbx to v1019:1
assign 3 to v1019:1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v603 #4 #246 v0(S) v1(-) v2(S) v3(-) [immediate:1089]
gap () () 
          v596(R) = X64MovqDecompressAnyTagged : MRI v602(R) [immediate:1088]
assign rsi to v1035:1
assign 6 to v1035:1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v603 #5 #245 v0(S) v1(-) v2(S) v3(-) [immediate:1087]
gap () () 
          v597(R) = X64MovqDecompressAnyTagged : MRI v602(R) [immediate:1086]
gap () () 
          X64Test32 && deoptimize if equal v594 #1 #244 v0(S) v1(-) v2(S) v3(-) [immediate:1085]
gap () () 
          v601(R) = X64MovqDecompressTaggedPointer : MRI v594(R) [immediate:1084]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v601(R) [immediate:1082] #1068 #243 v0(S) v1(-) v2(S) v3(-) [immediate:1083]
gap () () 
          v600(R) = X64MovqDecompressTaggedPointer : MRI v594(R) [immediate:1081]
gap () () 
          X64Cmp && deoptimize if not equal v599(R) v600 #242 v0(S) v1(-) v2(S) v3(-) [immediate:1080]
gap () () 
          X64Push v597(-)
gap () () 
          X64Push v596(-)
gap () () 
          X64Push v595(-)
assign r12 to v1008:1
assign 12 to v1008:1
gap () ([rdi|R|t] = v594(-); [rax|R|w64] = v70(-); [rsi|R|t] = v598(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1079] #-1 #241 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v590(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1078]
gap () () 
          X64Test32 && deoptimize if equal v590 #1 #240 v0(S) v1(-) v2(S) v3(-) v590(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v590(R) [immediate:1077] v10(R) #239 v0(S) v1(-) v2(S) v3(-) v590(-)
gap () () 
          v592(R) = X64MovqDecompressTaggedPointer : MRI v590(R) [immediate:1076]
gap () () 
          v586(R) = X64MovqDecompressAnyTagged : MRI v592(R) [immediate:1075]
gap () () 
          X64Test32 && deoptimize if equal v586 #1 #238 v0(S) v1(-) v2(S) v3(-) v590(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v586(R) [immediate:1074] v25(R) #237 v0(S) v1(-) v2(S) v3(-) v590(-)
gap () () 
          v584(R) = X64MovqDecompressTaggedPointer : MRI v586(R) [immediate:1073]
gap () () 
          v591(R) = X64MovqDecompressTaggedSigned : MRI v586(R) [immediate:1072]
gap () (v589(R) = v591(-);) 
          v589(1) = X64Sar32 v589(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v589 #4 #236 v0(S) v1(-) v2(S) v3(-) v590(-)
gap () () 
          v588(R) = X64Movl : MRI v584(R) [immediate:1071]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v588(R) [immediate:1069] [immediate:1070]
blocking v1011 pick register r9
gap () ([rax|R|t] = v586(-); [rsi|R|w64] = v587(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1068] #-1 [rax|R|t] [rsi|R|w64]
gap (v585(-) = [rax|R|t];) (v582 = v585(-);) 
          ArchJmp [immediate:1067]
gap () (v582 = v584(-);) 
          ArchJmp [immediate:1066]
gap () () 
          [constant:583] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v582(R) [immediate:1065] v583(R)
gap () () 
          ArchJmp [immediate:1064]
gap () () 
          ArchJmp [immediate:1063]
gap () () 
          ArchJmp [immediate:1062]
gap () () 
          v569(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1061]
gap () () 
          X64Test32 && deoptimize if equal v569 #1 #235 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v569(R) [immediate:1060] v10(R) #234 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v581(R) = X64MovqDecompressTaggedPointer : MRI v569(R) [immediate:1059]
gap () () 
          v580(R) = X64MovqDecompressAnyTagged : MRI v581(R) [immediate:1058]
gap () () 
          X64Test32 && deoptimize if equal v580 #1 #233 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v580(R) [immediate:1057] v25(R) #232 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v577(R) = X64MovqDecompressTaggedPointer : MRI v580(R) [immediate:1056]
gap () () 
          v579(R) = X64MovqDecompressTaggedSigned : MRI v580(R) [immediate:1055]
gap () (v578(R) = v579(-);) 
          v578(1) = X64Sar32 v578(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v578 #5 #231 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v574(R) = X64MovqDecompressAnyTagged : MRI v577(R) [immediate:1054]
gap () () 
          X64Test32 && branch if equal v574 #1 [immediate:1052] [immediate:1053]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v574(R) [immediate:1050] [immediate:1051]
blocking v1008 pick register r8
gap () () 
          X64Cmp32 : Root && branch if equal #184 v574(R) [immediate:1048] [immediate:1049]
gap () () 
          v576(R) = X64MovqDecompressTaggedPointer : MRI v574(R) [immediate:1047]
gap () () 
          X64Test8 : MRI && branch if equal v576(R) [immediate:1044] #16 [immediate:1045] [immediate:1046]
gap () () 
          ArchJmp [immediate:1043]
assign rax to v1034:0
gap () () 
          X64Cmp32 : Root && branch if equal #304 v576(R) [immediate:1041] [immediate:1042]
assign 0 to v1034:0
gap () () 
          X64Cmp32 : Root && branch if equal #432 v576(R) [immediate:1039] [immediate:1040]
gap () () 
          ArchJmp [immediate:1038]
gap () () 
          X64Test32 : MRI && branch if not equal v574(R) [immediate:1035] #2147483646 [immediate:1036] [immediate:1037]
gap () () 
          ArchJmp [immediate:1034]
gap () () 
          ArchJmp [immediate:1033]
gap () () 
          v575(R) = X64Movsd : MRI v574(R) [immediate:1032]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v575 [immediate:1030] [immediate:1031]
gap () () 
          ArchJmp [immediate:1029]
gap () () 
          ArchJmp [immediate:1028]
gap () () 
          ArchJmp [immediate:1027]
assign r14 to v1028:2
gap () () 
          ArchJmp [immediate:1026]
assign 14 to v1028:2
gap () () 
          X64Cmp32 && branch if not equal v574 [immediate:1023] [immediate:1024] [immediate:1025]
assign r11 to v530:52
assign 11 to v530:52
gap () () 
          ArchJmp [immediate:1022]
gap () () 
          [constant:567] = ArchNop
assign r9 to v1011:6
assign 9 to v1011:6
gap () () 
          [constant:553] = ArchNop
gap () () 
          [constant:558] = ArchNop
assign r8 to v184:77
gap () () 
          [constant:assign 8 to v184:77
551] = ArchNop
assign rax to v1008:4
gap () () 
          [constant:552] = ArchNop
assign 0 to v1008:4
gap () () 
          [constant:536] = ArchNop
gap () () 
          [constant:520] = ArchNop
gap () () 
          v467(R)assign r12 to v1029:0
assign 12 to v1029:0
 = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:1021]
gap () () 
          v571(R) = X64MovqDecompressTaggedPointer : MRI v569(R) [immediate:1020]
gap () () 
          v573(R) = X64MovqDecompressTaggedSigned : MRI v569(R) [immediate:1019]
gap () (v572(R) = v573(-);) 
          v572(1) = X64Sar32 v572(R) #1
assign rdx to v1032:0
assign 2 to v1032:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v572 #5 #230 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v468(R) = X64MovqDecompressAnyTagged : MRI v571(R) [immediate:1018]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v572 #6 #229 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v469(R) = X64MovqDecompressAnyTagged : MRI v571(R) [immediate:1017]
gap () () 
          X64Test32 && deoptimize if equal v467 #1 #228 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v570(R) = X64MovqDecompressTaggedPointer : MRI v467(R) [immediate:1016]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v570(R) [immediate:1015] #1068 #227 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v568(R) = X64MovqDecompressTaggedPointer : MRI v467(R) [immediate:1014]
assign rsi to v1031:1
assign 6 to v1031:1
gap () () 
          X64Cmp && deoptimize if not equal v567(R) v568 #226 v0(S) v1(-) v2(S) v3(-) v569(-)
gap () () 
          v470(R) = X64MovqDecompressTaggedPointer : MRI v467(R) [immediate:1013]
gap () ([rdx|R|t] = v468(-); [rcx|R|t] = v551(-); [rax|R|w64] = v558(-); [rbx|R|t] = v553(-); [rsi|R|tp] = v470(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1011] #-1 #225 v0(S) v1(S) v2(S) v3(S) v467(S) [immediate:1012] v468(S) v469(S) v470(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v565(-) = assign r12 to v1008:5
[rax|R|t];) () 
          X64Test32 && deoptimize if equal v565 #1 #224 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:1009] v468(-) v469(-) v470(S) v565(-) [immediate:1010]
assign 12 to v1008:5
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v565(R) [immediate:1006] v43(R) #223 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:1007] v468(-) v469(-) v470(S) v565(-) [immediate:1008]
gap () () 
          v563(R) = X64MovqDecompressTaggedPointer : MRI v565(R) [immediate:1005]
gap () () 
          v566(R) = X64MovqDecompressTaggedSigned : MRI v565(R) [immediate:1004]
gap () (v564(R) = v566(-);) 
          v564(1) = X64Sar32 v564(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v564 #0 #222 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:1002] v468(-) v469(-) v470(S) v565(-) [immediate:1003]
gap () () 
          v507(R) = X64Movsd : MRI v563(R) [immediate:1001]
gap () ([rdx|R|t] = v469(-); [rcx|R|t] = v551(-); [rax|R|w64] = v552(-); [rbx|R|t] = v553(-); [rsi|R|tp] = v470(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:999] #-1 #221 v0(S) v1(S) v2(S) v3(S) v467(S) [immediate:1000] v468(S) v469(S) v470(S) v507(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v561(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v561 #1 #220 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:997] v468(-) v469(-) v470(S) v507(-) v561(-) [immediate:998]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v561(R) [immediate:994] v43(R) #219 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:995] v468(-) v469(-) v470(S) v507(-) v561(-) [immediate:996]
gap () () 
          v559(R) = X64MovqDecompressTaggedPointer : MRI v561(R) [immediate:993]
gap () () 
          v562(R) = X64MovqDecompressTaggedSigned : MRI v561(R) [immediate:992]
gap () (v560(R) = v562(-);) 
          v560(1) = X64Sar32 v560(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v560 #0 #218 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:990] v468(-) v469(-) v470(S) v507(-) v561(-) [immediate:991]
gap () () 
          v508(R) = assign rax to v1030:0
assign 0 to v1030:0
X64Movsd : MRI v559(R) [immediate:989]
gap () ([rdx|R|t] = v468(-); [rcx|R|t] = v551(-); [rax|R|w64] = v558(-); [rbx|R|t] = v553(-); [rsi|R|tp] = v470(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:987] #-1 #217 v0(S) v1(S) v2(S) v3(S) v467(S) [immediate:988] v468(S) v469(S) v470(S) v507(S) v508(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
assign rax to v1008:7
assign 0 to v1008:7
gap (v556(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v556 #1 #216 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:985] v468(-) v469(-) vassign r8 to v184:79
assign 8 to v184:79
470(S) v507(-) v508(-) v556assign r9 to v1011:8
assign 9 to v1011:8
(-) [immediate:986]
assign r11 to v530:54
assign 11 to v530:54
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v556(R) [immediate:982] v43(R) #215 v0(S) v1(-) v2assign r14 to v1028:4
assign 14 to v1028:4
(S) v3(-) v467(S) [immediate:assign r12 to v1025:0
assign 12 to v1025:0
983] v468(-) v469(-) v470(S) v507(-) v508(-) v556(-) [immediate:984]
gap () () 
          v554(R) = X64MovqDecompressTaggedPointer : MRI v556(R) [immediate:981]
assign r9 to v1011:5
assign 9 to v1011:5
gap () () 
          v557(R) = X64MovqDecompressTaggedSigned : MRI v556(R) [immediate:980]
gap () (v555(R) = v557(-);) 
          v555(1) = X64Sar32 v555(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v555 #1 #214 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:978] v468(-) v469(-) v470(S) v507(-) v508(-) v556(-) [immediate:979]
gap () () 
          v509(R) = X64Movsd : MRI v554(R) [immediate:977]
gap () ([rdx|R|t] = v469(-); [rcx|R|t] = v551(-); [rax|R|w64] = v552(-); [rbx|R|t] = v553(-); [rsi|R|tp] = v470(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:975] #-1 assign r14 to v1008:3
assign 14 to v1008:3
#213 v0(S) v1(S) v2(S) v3(S) v467(S) [immediate:976] v468(S) v469(S) v470(S) v507(S) v508(S) v509(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v510(-) = [rax|R|t];) () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v508(R) v507 [immediate:973] [immediate:974]
gap () (v538 = v373(-);) 
          ArchJmp [immediate:972]
gap () (v538 = v372(-);) 
          ArchJmp [immediate:971]
assign r9 to v1026:0
assign 9 to v1026:0
gap () () 
          X64Test32 && deoptimize if equal v510 #1 #212 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:969] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:970]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v510(R) [immediate:966] v43(R) #211 v0(S) vassign r15 to v1027:0
assign 15 to v1027:0
1(-) v2(S) v3(-) v467(S) [immediate:967] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:968]
gap () () 
          v548(R) = X64MovqDecompressTaggedPointer : MRI v510(R) [immediate:965]
gap () () 
          v550(R) = X64MovqDecompressTaggedSigned : MRI v510(R) [immediate:964]
gap () (v549(R) = v550(-);) 
          v549(1) = X64Sar32 v549(R) #1
assign rax to v1008:8
assign 0 to v1008:8
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v549 #1 #210 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:962] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:963]
gap () () 
          v547(R) = X64Movsd : MRI v548(R) [immediate:961]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v547(R) v509 [immediate:959] [immediate:960]
gap () (v537 = v373(-);) 
          ArchJmp [immediate:958]
gap () (v537 = v372(-);) 
          ArchJmp [immediate:957]
gap () () 
          [constant:527] = ArchNop
gap () () 
          vassign r12 to v1017:0
assign 12 to v1017:0
546(R) = AVXFloat64Sub v547(R) v509
gap () () 
          v539(R) = AVXFloat64Abs v546
gap () () 
          v544(R) = AVXFloat64Sub v508(R) v507
gap () () 
          v540(R) = AVXFloat64Abs v544
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v540(R) v539 [immediate:955] [immediate:956]
assign r14 to v1024:0
gap () () 
          v542(R) = AVXFloat64Mul v539(R) v527
assign 14 to v1024:0
gap () (v476 = v537(-)assign r14 to v1012:0
assign 14 to v1012:0
; v474 = v304(-); v475 = v304(-); v473 = v538(-); v479 = v540(-); v517 = v542(-); v477 = v539(-);) 
          ArchJmp [immediate:954]
gap () () 
          v541(R) = AVXFloat64Mul v540(R) v527
assign rdx to v1023:0
assign 2 to v1023:0
gap () (v476 = v304(-); v474 = v537(-); v475 = v538(-); v473 = v304(-); v479 = v539(-); v517 = v541(-); v477 = v540(-);) 
          ArchJmp [immediate:953]
gap assign rdx to v1021:0
assign 2 to v1021:0
() () 
          [constant:535] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v535(R) [immediate:950] v536(R) #209 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:951] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:952]
assign r15 to v1022:0
gap () () 
          v534(R) = X64MovqDecompressTaggedPointer : MRI v535(R) [immediate:949]
assign 15 to v1022:0
gap () () 
          v521(R) = X64Movl : MRI v534(R) [immediate:948]
gap () () 
          v533(R) = X64MovqDecompressAnyTagged : MRI v470(R) [immediate:947]
gap () () 
          X64Test32 && deoptimize if equal v533 #1 #208 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:945] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:946]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v533(R) [immediate:942] v10(R) #207 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:943] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:944]
gap () () 
          v445(R) = X64MovqDecompressTaggedPointer : MRI v533(R) [immediate:941]
gap () () 
          v531(R) = X64MovqDecompressAnyTagged : MRI v445(R) [immediate:940]
gap () () 
          v519(R) = X64Test32 && set if equal v531 #1
gap () (v506(R) = v531(-);) 
          v506(1) = X64Sar32 v506(R) #1
gap () () 
          X64Cmp32 && branch if not equal v519 #0 [immediate:938] [immediate:939]
assign rsi to v1020:1
gap () () 
          v532(R) = X64MovqDecompressTaggedPointer : MRIassign 6 to v1020:1
 v531(R) [immediate:937]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v532(R) [immediate:935] [immediate:936]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v532(R) [immediate:932] #67 #206 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:933] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:934]
gap () () 
          ArchJmp [immediate:931]
gap () () 
          ArchJmp [immediate:930]
gap () () 
          v529(R) = X64Movsd : MRI v531(R) [immediate:929]
gap () (v528 = v529(-);) 
          ArchJmp [immediate:928]
gap () () 
          v530(R) = SSEInt32ToFloat64 v506
gap () (v528 = v530(-);) 
          ArchJmp [immediate:927]
gap () () assign r11 to v1008:9
assign 11 to v1008:9

          v525(R) = AVXFloat64Add v528(R) v477
gap () () 
          v522(R) = SSEFloat64Round v525(R)
gap () () 
          v526(R) = AVXFloat64Sub v522(R) v527
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v525(R) v526 [immediate:925] [immediate:926]
gap () () 
          [constant:524] = ArchNop
gap () () 
          v523(R) = AVXFloat64Sub v522(R) v524
gap () (v451 = v523(-);) 
          ArchJmp [immediate:924]
gap () (v451 = v522(-);) 
          ArchJmp [immediate:923]
gap () () 
          v464(R) = SSEFloat64ToInt32 v451
gap () () 
          X64Cmp32 && deoptimize if not equal v520(R) v521 #205 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:921] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:922]
gap () () 
          v518(R) = SSEInt32ToFloat64 v464
gap () () 
          X64Cmp32 && deoptimize if equal v519 #0 #204 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:919] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:920]
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v518(R) v451 #203 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:917] v468(-) v469(-)blocking v1011 pick register r9
 v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:918]
gap () () 
          X64Cmp32 && branch if signed less than v506(R) v464 [immediate:915] [immediate:916]
gap () () 
          ArchJmp [immediate:914]
gap () () 
          v513(R) = AVXFloat64Add v517(R) v479
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v513(R) v477 [immediate:912] [immediate:913]
gap () (v505 = v509(-); v504 = v507(-); v499 = v513(-);) 
          ArchJmp [immediate:911]
gap () () 
          v516(R) = SSEInt32ToFloat64 v474
gap () () 
          v515(R) = SSEInt32ToFloat64 v473
gap () () 
          v511(R) = AVXFloat64Add v516(R) v509
gap () () 
          v512(R) = AVXFloat64Add v515(R) v507
gap () () 
          v514(R) = AVXFloat64Sub v513(R) v477
gap () (v505 = v511(-); v504 = v512(-); v499 = v514(-);) 
          ArchJmp [immediate:910]
gap () () 
          v485(R) = SSEInt32ToFloat64 v476
gap () () 
          v483(R) = SSEInt32ToFloat64 v475
blocking v1008 pick register r8
gap () (v503(R) = v506(-);) 
          v503(1) = X64Add32 && deoptimize if overflow v503(R) #1 #202 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:908] v468(-) v469(-) v470(S) v507(-) v508(-) v509(-) v510(-) [immediate:909]
assign rax to v1018:0
gap () () 
          v497(R) = AVXFloat64Add v505(R) v485
assign 0 to v1018:0
gap () () 
          v498(R) = AVXFloat64Add v504(R) v483
gap () (v500 = v503(-);) 
          v500(1) = ArchNop v500
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:906] [immediate:907]
gap () () 
          [constant:502] = ArchNop
gap () ([rbx|R|w64] = v303(-); assign r14 to v1012:2
assign 14 to v1012:2
assign rax to v1008:12
assign 0 to v1008:12
[rax|R|w64] = v304(-); [rsi|R|t] = v502(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:904] #-1 #201 v0(S) v1(S) v2(S) v3(S) v467(S) [immediate:905] v468(S) v469(S) v470(S) v498(S) v497(S) v473(S) v474(S) v475(S) v476(S) v477(S) v499(S) v479(S) v451(S) v500(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:903]
assign r9 to v1011:11
assign 9 to v1011:11
gap () () 
          ArchJmp [immediate:902]
assign r8 to v184:81
assign 8 to v184:81
gap () (v489 = v497(-); v488 = v498(-); v490 = v499(-); v487 = v500(-);) 
          ArchJmp [immediate:901]
gap () () 
          X64Cmp32 && branch if signed less than v487(R) v464 [immediate:899] [immediate:900]
assign r12 to v1013:0
gap () () 
          v493(R) = AVXFloat64Add v490(R) v479
assign 12 to v1013:0
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v493(R) v477 [immediate:897] [immediate:898]
gap () (v486 = v489(-); v484 = v488(-); v478 = v493(-);) 
          ArchJmp [immediate:896]
gap () () 
          vassign rdx to v1016:0
496(R) = SSEInt32ToFloat64 v474
assign 2 to v1016:0
gap () () 
          v491(R) = AVXFloat64Add v496(R) v489
gap () () 
          v495(R) = SSEInt32ToFloat64 v473
gap () () 
          v492(R) = AVXFloat64Add v495(R) v488
gap () () 
          v494(R) = AVXFloat64Sub v493(R) v477
gap () (v486 = v491(-); v484 = v492(-); v478 = v494(-);) 
          ArchJmp [immediate:895]
gap () (v482(R) = v487(-);) 
          v482(1) = X64Add32 && deoptimize if overflow v482(R) #1 #200 v0(S) v1(-) v2(S) v3(-) v467(S) [immediate:894] v468(-) v469(-) v470(S) v488(-) v489(-) v473(-) v474(-) v475(-) v476(-) v477(-) v490(-) v479(-) v451(-) v487(-) v451(-)
gap () () 
          v472(R) = AVXFloat64Add v485(R) v486
gap () () 
          v471(R) = AVXFloat64Add v483(R) v484
gap () (v480 = v482(-);) 
          v480(1) = ArchNop v480
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:892] [immediate:893]
assign rsi to v1015:1
gap () () 
          [constant:481] = ArchNop
assign 6 to v1015:1
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v481(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:890] #-1 #199 v0(S) v1(S) v2(S) v3(S) v467(S) [immediate:891] v468(S) v469(S) v470(S) v471(S) v472(S) v473(S) v474(S) v475(S) v476(S) v477(S) v478(S) v479(S) v451(S) v480(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:889]
gap () () 
          ArchJmp [immediate:888]
gap () (v489 = v472(-); v488 = v471(-); v490 = v478(-); v487 = v480(-);) 
          ArchJmp [immediate:887]
gap () () 
          ArchJmp [immediate:886]
assign r11 to v1008:13
assign 11 to v1008:13
gap () () 
          X64Cmp32 && branch if equal v464 #0 [immediate:884] [immediate:885]
gap () () 
          ArchJmp [immediate:883]
gap () () 
          v465(R) = SSEFloat64ExtractHighWord32 v451
gap () () 
          X64Cmp32 && branch if signed less than v465 #0 [immediate:881] [immediate:882]
gap () () 
          ArchJmp [immediate:880]
gap () (v463(R) = v464(-);) 
          v463(1) = X64Add32 && branch if overflow v463(R) v464(R) [immediate:876] [immediate:877] [immediate:878] [immediate:879]
gap () (v462 = v463(-);) 
          v462(1) = ArchNop v462
gap () (v446 = v462(-);) 
          ArchJmp [immediate:875]
gap () () 
          ArchJmp [immediate:874]
gap () () 
          ArchJmp [immediate:873]
gap () () 
          [constant:460] = ArchNop
gap () () 
          v456(R) = X64Movq : MR v28(R)
gap () () 
          v461(R) = X64Lea : MRI v456(R) [immediate:872]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v461(R) [immediate:870] [immediate:871]
gap () () 
          ArchJmp [immediate:869]
gap () ([rdx|R|w64] = v460(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:868] #-1 [rdx|R|w64]
gap (v459(-) = [rax|R|tp];) () 
          v457(R) = X64Lea : MRI v459(R) [immediate:867]
gap () (v454 = v457(-);) 
          ArchJmp [immediate:866]
gap () (v454 = v456(-);) 
          ArchJmp [immediate:865]
gap () () 
          [constant:452] = ArchNop
gap () () 
          v455(R) = X64Lea : MRI v454(R) [immediate:864]
gap () () 
          X64Movq : MR v28(R) v455(R)
gap () () 
          v453(R) = X64Lea : MRI v454(R) [immediate:863]
gap () (v450 = v453(-);) 
          v450(1) = ArchNop v450
gap () () 
          X64MovqCompressTagged : MRI v450(R) [immediate:862] v452(R)
gap () () 
          X64Movsd : MRI v450(R) [immediate:861] v451(R)
assign rax to v1014:0
gap () (v446 = v450(-);) 
          ArchJmp [immediate:860]
assign 0 to v1014:0
gap () () 
          [constant:438] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v445(R) [immediate:859] v446(R)
gap () () 
          v440(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:858]
gap () () 
          X64Test32 && deoptimize if equal v440 #1 #198 v0(S) v1(-) v2(S) v3(-) v440(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v440(R) [immediate:857] v10(R) #197 v0(S) v1(-) v2(S) v3(-) v440(-)
assign r8 to v184:83
gap () () 
          v444(R) = X64MovqDecompressTaggedPointer : MRI v440(R) [immediate:856]
assign 8 to v184:83
gap () () 
          v442(R) = X64MovqDecompressAnyTagged : MRI v444(R) [immediate:855]
assign r9 to v1011:13
assign 9 to v1011:13
assign rax to v1008:15
gap () () 
          X64Test32 && deoptimize if equal v442 #1 #196 v0(S) v1(-) v2(S) v3(-) v440(-)
assign 0 to v1008:15
assign r14 to v1012:4
assign 14 to v1012:4
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v442(R) [immediate:854] v25(R) #195 v0(S) v1(-) v2(S) v3(-) v440(-)
gap () () 
          v437(R) = X64MovqDecompressTaggedPointer : MRI vassign r12 to v1007:0
assign 12 to v1007:0
442(R) [immediate:853]
gap () () 
          v443(R) = X64Movl : MRI v437(R) [immediate:852]
assign r9 to v1011:10
assign 9 to v1011:10
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v443(R) #194 v0(S) v1(-) v2(S) v3(-) v440(-)
gap () () 
          v441(R) = X64MovqDecompressTaggedSigned : MRI v442(R) [immediate:851]
gap () (v439(R) = v441(-);) 
          v439(1) = X64Sar32 v439(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v439 #5 #193 v0(S) v1(-) v2(S) v3(-) v440(-)
gap () () 
          X64MovqCompressTagged : MRI v437(R) [immediate:850] v438(R)
gap () () 
          ArchJmp [immediate:849]
gap () () 
          ArchJmp [immediate:848]
gap () () 
          ArchJmp [immediate:847]
assign r9 to v1008:11
assign 9 to v1008:11
gap () () 
          v424(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:846]
gap () () 
          X64Test32 && deoptimize if equal v424 #1 #192 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v424(R) [immediate:845] v10(R) #191 vassign r11 to v1009:0
assign 11 to v1009:0
0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v436(R) = X64MovqDecompressTaggedPointer : MRI v424(R) [immediate:844]
gap () () 
          v435(R) = X64MovqDecompressAnyTagged : MRI v436(R) [immediate:843]
gap () () 
          X64Test32 && deoptimize if equal v435 #1 #190 v0(S) v1(-) v2(S) v3(-) v424(-)
assign r14 to v1010:0
assign 14 to v1010:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v435(R) [immediate:842] v25(R) #189 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v432(R) = X64MovqDecompressTaggedPointer : MRI v435(R) [immediate:841]
assign r11 to v530:56
gap () () 
          v434(R) = X64MovqDecompressTaggedSigned : MRI v435(R) [immediate:840]
assign 11 to v530:56
gap () (v433(R) = v434(-);) 
          v433(1) = X64Sar32 v433(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v433 #6 #188 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v429(R) = X64MovqDecompressAnyTagged : MRI v432(R) [immediate:839]
gap () () 
          X64Test32 && branch if equal v429 #1 [immediate:837] [immediate:838]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v429(R) [immediate:835] [immediate:836]
assign rsi to v3:59
gap () () 
          X64Cmp32 : Root && branch if equal #184 v429(R) [immediate:833] [immediate:834]
assign 6 to v3:59
gap () () 
          v431(R) = X64MovqDecompressTaggedPointer : MRI v429(R) [immediate:832]
gap () () 
          X64Test8 : MRI && branch if equal v431(R) [immediate:829] #16 [immediate:830] [immediate:831]
gap () () 
          ArchJmp [immediate:828]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v431(R) [immediate:826] [immediate:827]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v431(R) [immediate:824] [immediate:825]
gap () () 
          ArchJmp [immediate:823]
v974:0 not intersect with v530:2, removed
gap () () 
          X64Test32 : MRI && branch if not equal v429(R) [immediate:820] #2147483646 [immediate:821] [immediate:822]
v974:0 not intersect with v184:2, removed
gap () () 
          ArchJmp [immediate:819]v974:0 not intersect with v987:0, removed

v974:1 intersect with v987:0, adding
gap () () 
          ArchJmp [immediate:818]
v974:0 not intersect with v980:0, removed
v974:1 intersect with v980:0, adding
v974:0 not intersect with v1002:0, removed
gap () () 
          v430(R) = X64Movsd : MRI v429(R) [immediate:817]
v974:1 intersect with v1002:0, adding
v974:0 not intersect with v996:0, removed
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v430 [immediate:815] [immediate:816]
v974:1 intersect with v996:0, adding
gap () () 
          ArchJmp [immediate:814]
gap () () 
          ArchJmp [immediate:813]
assign rax to v974:0
gap () () 
          ArchJmp [immediate:812]
assign 0 to v974:0
gap () () 
          ArchJmp [immediate:811]
gap () () 
          X64Cmp32 && branch if not equal v429 [immediate:808] [immediate:809] [immediate:810]
assign rdx to v1003:0
assign 2 to v1003:0
gap () () 
          ArchJmp [immediate:807]
gap () () 
          [constant:422] = ArchNop
gap () () 
          [constant:421] = ArchNop
gap () () 
          [constant:418] = ArchNop
gap () () 
          [constant:409] = ArchNop
gap () () 
          v417(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:806]
gap () () 
          v426(R) = X64MovqDecompressTaggedPointer : MRI v424(R) [immediate:805]
gap () () 
          v428(R) = X64MovqDecompressTaggedSigned : MRI vassign r9 to v1005:15
424(R) [immediate:804]
assign 9 to v1005:15
gap () (v427(R) = v428(-);) 
          v427(1) = X64Sar32 v427(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v427 #6 #187 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v419(R) = X64MovqDecompressAnyTagged : MRI v426(R) [immediate:803]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v427 #7 #186 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v420(R) = X64MovqDecompressAnyTagged : MRI v426(R) [immediate:802]
gap () () 
          X64Test32 && deoptimize if equal v417 #1 #185 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v425(R) = X64MovqDecompressTaggedPointer : MRI v417(R) [immediate:801]
assign r9 to v3:60
assign 9 to v3:60
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v425(R) [immediate:800] #1068 #184 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          v423(R) = X64MovqDecompressTaggedPointer : MRI v417(R) [immediate:799]
gap () () 
          X64Cmp && deoptimize if not equal v422(R) v423 #183 v0(S) v1(-) v2(S) v3(-) v424(-)
gap () () 
          X64Push v420(-)
gap () () 
          X64Push v419(-)
gap () () 
          X64Push v418(-)
v974:1 not intersect with v996:0, removed
gap () ([rdi|R|t] = vv974:2 intersect with v996:0, adding
v974:1 not intersect with v1002:0, removed
417(-); [rax|R|w64] = v70(-); [rsiv974:2 intersect with v1002:0, adding
v974:1 not intersect with v980:0, removed
v974:2 intersect with v980:0, adding
v974:1 not intersect with v987:0, removed
v974:2 intersect with v987:0, adding
|R|t] = v421(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:798] #-1 #182 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
assign r12 to v974:1
assign 12 to v974:1
gap () () 
          v411(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:797]
gap () () 
          X64Test32 && deoptimize if equal v411 #1 #181 v0(S) v1(-) v2(S) v3(-) v411(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v411(R) [immediate:796] v10(R) #180 v0(S) v1(-) v2(S) v3(-) v411(-)
gap () () 
          v415(R) = X64MovqDecompressTaggedPointer : MRI v411(R) [immediate:795]
gap () () 
          v413(R) = X64MovqDecompressAnyTagged : MRI v415(R) [immediate:794]
gap () () 
          X64Test32 && deoptimize if equal v413 #1 #179 v0(S) v1(-) v2(S) v3(-) v411(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v413(R) [immediate:793] v25(R) #178 v0(S) v1(-) v2(S) v3(-) v411(-)
gap () () 
          v408(R) = X64MovqDecompressTaggedPointer : MRI v413(R) [immediate:792]
blocking v3 pick register r8
gap () () 
          v414(R) = X64Movl : MRI v408(R) [immediate:791]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v414(R) #177 v0(S) v1(-) v2(S) v3(-) v411(-)
gap () () 
          v412(R) = X64MovqDecompressTaggedSigned : MRI v413(R) [immediate:790]
gap () (v410(R) = v412(-);) 
          v410(1) = X64Sar32 v410(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v410 #6 #176 v0(S) v1(-) v2(S) v3(-) v411(-)
gap () () 
          X64MovqCompressTagged : MRI v408(R) [immediate:789] v409(R)
gap () () 
          ArchJmp [immediate:788]
gap () () 
          ArchJmp [immediate:787]
gap () () 
          ArchJmp [immediate:786]
gap () () 
          v395(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:785]
gap () () 
          X64Test32 && deoptimize if equal v395 #1 #175 v0blocking v974 pick register r8
(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v395(R) [immediate:784] v10(R) #174 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v407(R) = X64MovqDecompressTaggedPointer : MRI v395(R) [immediate:783]
gap () () 
          v406(R) = X64MovqDecompressAnyTagged : MRI v407(R) [immediate:782]
gap () () 
          X64Test32 && deoptimize if equal v406 #1 #173 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v406(R) [immediate:781] v25(R) #172 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v403(R) = X64MovqDecompressTaggedPointer : MRI v406(R) [immediate:780]
blocking v184 pick register r8
gap () () 
          v405(R) = X64MovqDecompressTaggedSigned : MRI v406(R) [immediate:779]
gap () (v404(R) = v405(-);) 
          v404(1) = X64Sar32 v404(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v404 #7 #171 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v400(R) = X64MovqDecompressAnyTagged : MRI v403(R) [immediate:778]
gap () () 
          X64Test32 && branch if equal v400 #1 [immediate:776] [immediate:777]
blocking v530 pick register r8
gap () () 
          X64Cmp32 : Root && branch if equal #176 v400(R) [immediate:774] [immediate:775]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v400(R) [immediate:772] [immediate:773]
assign rax to v971:0
assign 0 to v971:0
gap () () 
          v402(R) = X64MovqDecompressTaggedPointer : MRI v400(R) [immediate:771]
gap () () 
          X64Test8 : MRI && branch if equal v402(R) [immediate:768] #16 [immediate:769] [immediate:770]
gap () () 
          ArchJmp [immediate:767]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v402(R) [immediate:765] [immediate:766]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v402(R) [immediate:763] [immediate:764]
gap () () 
          ArchJmp [immediate:762]
gap () () 
          X64Test32 : MRI && branch if not equal v400(R) [immediate:759] #2147483646 [immediate:760] [immediate:761]
assign r8 to v184:84
gap () () 
          ArchJmp [immediate:758]
assign 8 to v184:84
gap () () 
          ArchJmp [immediate:757]
gap () () 
          v401(R) = X64Movsd : MRI v400(R) [immediate:756]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v401 [immediate:754] [immediate:755]
gap () () 
          ArchJmp [immediate:753]
gap () () 
          ArchJmp [immediate:752]
gap () () 
          ArchJmp [immediate:751]
gap () () 
          ArchJmp [immediate:750]
gap () () 
          X64Cmp32 && branch if not equal v400 [immediate:747] [immediate:748] [immediate:749]
assign r9 to v974:3
assign 9 to v974:3
gap () () 
          ArchJmp [immediate:746]
gap () () 
          [constant:393] = ArchNop
gap () () 
          [constant:351] = ArchNop
gap () () 
          v289(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:745]
gap () () 
          v397(R) = X64MovqDecompressTaggedPointer : MRI v395(R) [immediate:744]
gap () () 
          v399(R) = X64MovqDecompressTaggedSigned : MRI v395(R) [immediate:743]
gap () (v398(R)assign r11 to v530:57
assign 11 to v530:57
 = v399(-);) 
          v398(1) = X64Sar32 v398(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v398 #7 #170 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v290(R) = X64MovqDecompressAnyTagged : MRI v397(R) [immediate:742]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v398 #4 #169 v0(S) v1(-) v2(S) vassign r12 to v996:0
assign 12 to v996:0
3(-) v395(-)
gap () () 
          v291(R) = X64MovqDecompressAnyTagged : MRI v397(R) [immediate:741]
gap () () 
          X64Test32 && deoptimize if equal v289 #1 #168 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v396(R) = X64MovqDecompressTaggedPointer : MRI v289(R) [immediate:740]
assign r14 to v1002:0
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v396(R) [immediate:739] #1068 #167 v0(S) v1(-) v2(S) v3(-) v395(-)
assign 14 to v1002:0
gap () () 
          v394(R) = X64MovqDecompressTaggedPointer : MRI v289(R) [immediate:738]
assign r14 to v991:0
assign 14 to v991:0
gap () () 
          X64Cmp && deoptimize if not equal v393(R) v394 #166 v0(S) v1(-) v2(S) v3(-) v395(-)
gap () () 
          v292(R) = X64MovqDecompressTaggedPointer : MRI v289(R) [immediate:737]
gap () () 
          [constant:379] = ArchNop
gap () () 
          [constant:384] = ArchNop
gap () () 
          [constant:377] = ArchNop
assign rdx to v1001:0
assign 2 to v1001:0
assign rdx to v999:0
assign 2 to v999:0
gap () ([rdx|R|t] = v290(-); [rcx|R|t] = v377(-); [rax|R|w64] = v384(-); [rbx|R|t] = v379(-); [rsi|R|tp] = v292(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:735] #-1 #165 v0(S) v1(S) v2(S) v3(S) v289(S) [immediate:736] v290(S) v291(S) v292(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v391(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v391 #1 #164 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:733] v290(-) v291(-) v292(S) v391(-) [immediate:734]
assign r15 to v1000:0
assign 15 to v1000:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v391(R) [immediate:730] v43(R) #163 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:731] v290(-) v291(-) v292(S) v391(-) [immediate:732]
gap () () 
          v389(R) = X64MovqDecompressTaggedPointer : MRI v391(R) [immediate:729]
gap () () 
          v392(R) = X64MovqDecompressTaggedSigned : MRI v391(R) [immediate:728]
gap () (v390(R) = v392(-);) 
          v390(1) = X64Sar32 v390(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v390 #0 #162 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:726] v290(-) v291(-) v292(S) v391(-) [immediate:727]
gap () () 
          v331(R) = X64Movsd : MRI v389(R) [immediate:725]
gap () () 
          [constant:378] = ArchNop
gap () ([rdx|R|t] = v291(-); [rcx|R|t] = v377(-); [rax|R|w64] = v378(-); [rbx|R|t] = v379(-); [rsi|R|tp] = v292(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:723] #-1 #161 v0(S) v1(S) v2(S) v3(S) v289(S) [immediate:724] v290(S) v291(S) v292(S) v331(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v387(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v387 #1 #160 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:721] v290(-) v291(-) v292(S) v331(-) v387(-) [immediate:722]
assign rsi to v998:1
gap () () 
          assign 6 to v998:1
X64Cmp32 : MRI && deoptimize if not equal v387(R) [immediate:718] v43(R) #159 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:719] v290(-) v291(-) v292(S) v331(-) v387(-) [immediate:720]
gap () () 
          v385(R) = X64MovqDecompressTaggedPointer : MRI v387(R) [immediate:717]
gap () () 
          v388(R) = X64MovqDecompressTaggedSigned : MRI v387(R) [immediate:716]
gap () (v386assign r12 to v971:1
(R) = v388(-);) 
          v386(1) = X64Sar32 v386(R) #1
assign 12 to v971:1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v386 #0 #158 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:714] v290(-) v291(-) v292(S) v331(-) v387(-) [immediate:715]
gap () () 
          v332(R) = X64Movsd : MRI v385(R) [immediate:713]
gap () ([rdx|R|t] = v290(-); [rcx|R|t] = v377(-); [rax|R|w64] = v384(-); [rbx|R|t] = v379(-); [rsi|R|tp] = v292(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:711] #-1 #157 v0(S) v1(S) v2(S) v3(S) v289(S) [immediate:712] v290(S) v291(S) v292(S) v331(S) v332(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
gap (v382(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v382 #1 #156 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:709] v290(-) v291(-) v292(S) v331(-) v332(-) v382(-) [immediate:710]
blocking v184 pick register r8
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v382(R) [immediate:706] v43(R) #155 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:707] v290(-) v291(-) v292(S) v331(-) v332(-) v382(-) [immediate:708]
gap () () 
          v380(R) = X64MovqDecompressTaggedPointer : MRI v382(R) [immediate:705]
gap () () 
          v383(R) = X64MovqDecompressTaggedSigned : MRI v382(R) [immediate:704]
gap () (v381(R) = v383(-);) 
          v381(1) = X64Sar32 v381(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v381 #1 #154 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:702] v290(-) v291(-) v292(S) v331(-) v332(-) v382(-) [immediate:703]
gap () () 
          v333(R) = X64Movsd : MRI v380(R) [immediate:701]
gap () ([rdx|R|t] = v291(-); [rcx|R|t] = v377(-); [rax|R|w64] = v378(-); [rbx|R|t] = v379(-); [rsi|R|tp] = v292(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:699] #-1 #153 v0(S) v1(S) v2(S) v3(S) v289(S) [immediate:700] v290(S) v291(S) v292(S) v331(S) v332(S) v333(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rbx|R|t] [rsi|R|tp]
blocking v974 pick register r9
gap (v334(-) = [rax|R|t];) () 
          [constant:359] = ArchNop
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v332(R) v331 [immediate:697] [immediate:698]
gap () (v362 = v373(-);) 
          ArchJmp [immediate:696]
gap () (v362 = v372(-);) 
          ArchJmp [immediate:695]
gap () () 
          X64Test32 && deoptimize if equal v334 #1 #152 v0(S) v1(-) v2(S) vblocking v530 pick register r11
3(-) v289(S) [immediate:693] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:694]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v334(R) [immediate:690] v43(R) #151 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:691] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:692]
gap () () 
          v374(R) = X64MovqDecompressTaggedPointer : MRI v334(R) [immediate:689]
gap () () 
          v376(R) = X64MovqDecompressTaggedSigned : MRI v334(R) [immediate:688]
gap () (v375(R) = v376(-);) 
          v375(1) = X64Sar32 v375(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v375 #1 #150 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:686] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:687]
gap () () 
          v371(R) = X64Movsd : MRI v374(R) [immediate:685]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v371(R) v333 [immediate:683] [immediate:684]
gap () (v361 = v373(-);) 
          ArchJmp [immediate:682]
gap () (v361 = v372(-);) 
          ArchJmp [immediate:681]
gap () () 
          v370(R) = AVXFloat64Sub v371(R) v333
gap () () 
          v363(R) = AVXFloat64Abs v370
gap () () 
          v368(R) = AVXFloat64Sub v332(R) v331
gap () () 
          v364(R) = AVXFloat64Abs v368
blocking v971 pick register r8
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v364(R) v363 [immediate:679] [immediate:680]
gap () () 
          v366(R) = AVXFloat64Mul v363(R) v351
gap () (v298 = v361(-); v296 = v304(-); v297 = v304(-); v295 = v362(-); v301 = v364(-); v341 = v366(-); v299 = v363(-);) 
          ArchJmp [immediate:678]
assign rax to v997:0
gap () () 
          v365(R) = AVXFloat64Mul v364(R) v351
assign 0 to v997:0
gap () (v298 = v304(-); v296 = v361(-); v297 = v362(-); v295 = v304(-); v301 = v363(-); v341 = v365(-); v299 = v364(-);) 
          ArchJmp [immediate:677]
gap () () 
          [constant:360] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v359(R) [immediate:674] v360(R) #149 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:675] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:676]
gap () () 
          v358(R) = X64MovqDecompressTaggedPointer : MRI v359(R) [immediate:673]
assign r14 to v991:2
gap () () 
          v345(R) = X64Movl : MRI v358(R) [immediate:672]
assign 14 to v991:2
gap () () 
          v357(R) = X64MovqDecompressAnyTagged : MRI v292(R) [immediate:671]
assign r11 to v530:61
assign 11 to v530:61
assign r9 to v974:6
assign 9 to v974:6
gap () () 
          X64Test32 && deoptimize if equal v357 #1 #148 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:669] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:670]
assign r8 to v184:88
assign 8 to v184:88
assign rax to v971:4
assign 0 to v971:4
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v357(R) [immediate:666] v10(R) #147 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:667] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:668]
gap () () 
          v267(R) = X64MovqDecompressTaggedPointer : MRI v357(R) [immediate:665]
assign r12 to v992:0
assign 12 to v992:0
gap () () 
          v355(R) = X64MovqDecompressAnyTagged : MRI v267(R) [immediate:664]
gap () () 
          v343(R) = X64Test32 && set if equal v355 #1
gap () (v330(R) = v355(-);) 
          v330(1) = X64Sar32 v330(R) #1
gap () () 
          X64Cmp32 && branch if not equal v343 #0 [immediate:662] [immediate:663]
gap () () 
          v356(R) = X64MovqDecompressTaggedPointer : MRI v355(R) [immediate:661]
gap () () assign rdx to v995:0
assign 2 to v995:0

          X64Cmp32 : Root && branch if equal #304 v356(R) [immediate:659] [immediate:660]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v356(R) [immediate:656] #67 #146 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:657] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:658]
gap () () 
          ArchJmp [immediate:655]
gap () () 
          ArchJmp [immediate:654]
gap () () 
          v353(R) = X64Movsd : MRI v355(R) [immediate:653]
gap () (v352 = v353(-);) 
          ArchJmp [immediate:652]
gap () () 
          v354(R) = SSEInt32ToFloat64 v330
gap () (v352 = v354(-);) 
          ArchJmp [immediate:651]
assign rsi to v994:1
gap () () 
          v349(R) = AVXFloat64Add v352(R) v299
assign 6 to v994:1
gap () () 
          v346(R) = SSEFloat64Round v349(R)
gap () () 
          v350(R) = AVXFloat64Sub v346(R) v351
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v349(R) v350 [immediate:649] [immediate:650]
gap () () 
          [constant:348] = ArchNop
gap () () 
          v347(R) = AVXFloat64Sub v346(R) v348
gap () (v273 = v347(-);) 
          ArchJmp [immediate:648]
gap () (v273 = v346(-);) 
          ArchJmp [immediate:647]
gap () () 
          v286(R) = SSEFloat64ToInt32 v273
gap () () 
          [constant:344] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v344(R) v345 #145 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:645] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:646]
gap () () 
          v342(R) = SSEInt32ToFloat64 v286
assign r12 to v971:5
assign 12 to v971:5
gap () () 
          X64Cmp32 && deoptimize if equal v343 #0 #144 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:643] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:644]
gap () () 
          AVXFloat64Cmp && deoptimize if unordered not equal v342(R) v273 #143 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:641] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:642]
gap () () 
          X64Cmp32 && branch if signed less than v330(R) v286 [immediate:639] [immediate:640]
gap () () 
          ArchJmp [immediate:638]
gap () () 
          v337(R) = AVXFloat64Add v341(R) v301
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v337(R) v299 [immediate:636] [immediate:637]
gap () (v329 = v333(-); v328 = v331(-); v323 = v337(-);) 
          ArchJmp [immediate:635]
gap () () 
          v340(R) = SSEInt32ToFloat64 v296
gap () () 
          v339(R) = SSEInt32ToFloat64 v295
gap () () 
          v335(R) = AVXFloat64Add v340(R) v333
gap () () 
          v336(R) = AVXFloat64Add v339(R) v331
gap () () 
          v338(R) = AVXFloat64Sub v337(R) v299
gap () (v329 = v335(-); v328 = v336(-); v323 = v338(-);) 
          ArchJmp [immediate:634]
gap () () 
          v309(R) = SSEInt32ToFloat64 v298
gap () () 
          v307(R) = SSEInt32ToFloat64 v297
gap () (v327(R) = v330(-);) 
          v327(1) = X64Add32 && deoptimize if overflow v327(R) #1 #142 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:632] v290(-) v291(-) v292(S) v331(-) v332(-) v333(-) v334(-) [immediate:633]
gap () () 
          v321(R) = AVXFloat64Add v329(R) v309
gap () () 
          v322(R) = AVXFloat64Add v328(R) v307
gap () (v324 = v327(-);) 
          v324(1) = ArchNop v324
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:630] [immediate:631]
gap () () 
          [constant:326] = ArchNop
assign rax to v993:0
assign 0 to v993:0
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v326(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:628] #-1 #141 v0(S) v1(S) v2(S) v3(S) v289(S) [immediate:629] v290(S) v291(S) v292(S) v322(S) v321(S) v295(S) v296(S) v297(S) v298(S) v299(S) v323(S) v301(S) v273(S) v324(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:627]
gap () () 
          ArchJmp [immediate:626]
gap () (v313 = v321(-); v312 = v322(-); v314 = v323(-); v311 = v324(-);) 
          ArchJmp [immediate:625]
assign rax to v971:7
assign 0 to v971:7
gap () () 
          X64Cmp32 && branch if signed less than v311(R) v286 [immediate:623] [immediate:624]
assign r8 to v184:90
gap () () 
          v317(R) = AVXFloat64Add v314(R) v301
assign 8 to v184:90
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than or equal v317(R) v299 [immediate:621] [immediate:622]
assign r9 to v974:8
assign 9 to v974:8
assign r11 to v530:63
gap () (v310 = v313(-); v308 = v312(-); v300 = v317(-);) 
          ArchJmp [immediate:620]
assign 11 to v530:63
gap () () 
          v320(R) = SSEInt32ToFloat64 v296
assign r14 to v991:4
assign 14 to v991:4
gap () () 
          v315(R) = AVXFloat64Add v320(R) v313
gap () () 
          v319(R) = SSEInt32ToFloat64 v295
gap () () 
          v316(R) = AVXFloat64Add v319(R) v312
assign r12 to v988:0
assign 12 to v988:0
gap () () 
          v318(R) = AVXFloat64Sub v317(R) v299
assign r9 to v974:5
assign 9 to v974:5
gap () (v310 = v315(-); v308 = v316(-); v300 = v318(-);) 
          ArchJmp [immediate:619]
gap () (v306(R) = v311(-);) 
          v306(1) = X64Add32 && deoptimize if overflow v306(R) #1 #140 v0(S) v1(-) v2(S) v3(-) v289(S) [immediate:618] v290(-) v291(-) v292(S) v312(-) v313(-) v295(-) v296(-) v297(-) v298(-) v299(-) v314(-) v301(-) v273(-) v311(-) v273(-)
gap () () 
          v294(R) = AVXFloat64Add v309(R) v310
assign r14 to v971:3
gap () () 
          v293(R) = AVXFloat64Add v307(R) v308
assign 14 to v971:3
gap () (v302 = v306(-);) 
          v302(1) = ArchNop v302
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:616] [immediate:617]
gap () () 
          [constant:305] = ArchNop
assign r9 to v989:0
assign 9 to v989:0
gap () ([rbx|R|w64] = v303(-); [rax|R|w64] = v304(-); [rsi|R|t] = v305(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:614] #-1 #139 v0(S) v1(S) v2(S) v3(S) v289(S) [immediate:615] v290(S) v291(S) v292(S) v293(S) v294(S) v295(S) v296(S) v297(S) v298(S) v299(S) v300(S) v301(S) v273(S) v302(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:613]
gap () () 
          ArchJmp [immediate:612]
gap () (v313 = v294(-); v312 = v293(-); v314 = v300(-); v311 = v302(-);) 
          ArchJmp [immediate:611]
assign r15 to v990:0
assign 15 to v990:0
gap () () 
          ArchJmp [immediate:610]
gap () () 
          X64Cmp32 && branch if equal v286 #0 [immediate:608] [immediate:609]
gap () () 
          ArchJmp [immediate:607]
gap () () 
          v287(R) = SSEFloat64ExtractHighWord32 v273
gap () () 
          X64Cmp32 && branch if signed less than v287 #0 [immediate:605] [immediate:606]
gap () () 
          ArchJmp [immediate:604]
gap () (v285(R) = v286(-);) 
          v285(1) = X64Add32 && branch if overflow v285(R) v286(R) [immediate:600] [immediate:601] [immediate:602] [immediate:603]
assign rax to v971:8
assign 0 to v971:8
gap () (v284 = v285(-);) 
          v284(1) = ArchNop v284
gap () (v268 = v284(-);) 
          ArchJmp [immediate:599]
gap () () 
          ArchJmp [immediate:598]
gap () () 
          ArchJmp [immediate:597]
gap () () 
          [constant:274] = ArchNop
gap () () 
          [constant:282] = ArchNop
gap () () 
          v278(R) = X64Movq : MR v28(R)
gap () () 
          v283(R) = X64Lea : MRI v278(R) [immediate:596]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v283(R) [immediate:594] [immediate:595]
assign r12 to v980:0
assign 12 to v980:0
gap () () 
          ArchJmp [immediate:593]
gap () ([rdx|R|w64] = v282(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:592] #-1 [rdx|R|w64]
gap (v281(-) = [rax|R|tp];) () 
          v279(R) = X64Lea : MRI v281(R) [immediate:591]
gap () (v276 = v279(-);) 
          ArchJmp [immediate:590]
gap () (v276 = v278(-);) 
          ArchJmp [immediate:589]
gap () () 
          v277(R) = X64Lea : MRI v276(R) [immediate:588]
assign r14 to v987:0
assign 14 to v987:0
gap () () 
          X64Movq : MR v28(R) v277(R)
gap () () 
          v275(R) = X64Lea : MRI v276(R) [immediate:587]
assign r14 to v975:0
assign 14 to v975:0
gap () (v272 = v275(-);) 
          v272(1) = ArchNop v272
gap () () 
          X64MovqCompressTagged : MRI v272(R) [immediate:586] v274(R)
gap () () 
          X64Movsd : MRI v272(R) [immediate:585] v273(R)
gap () (v268 = v272(-);) 
          ArchJmp [immediate:584]
gap () () 
          [constant:260] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v267(R) [immediate:583] v268(R)
assign rdx to v986:0
assign 2 to v986:0
gap () () 
          v262(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:582]
assign rdx to v984:0
assign 2 to v984:0
gap () () 
          X64Test32 && deoptimize if equal v262 #1 #138 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v262(R) [immediate:581] vassign r15 to v985:0
10(R) #137 v0(S) v1(-) v2(S) vassign 15 to v985:0
3(-) v262(-)
gap () () 
          v266(R) = X64MovqDecompressTaggedPointer : MRI v262(R) [immediate:580]
gap () () 
          v264(R) = X64MovqDecompressAnyTagged : MRI v266(R) [immediate:579]
gap () () 
          X64Test32 && deoptimize if equal v264 #1 #136 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v264(R) [immediate:578] v25(R) #135 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v259(R) = X64MovqDecompressTaggedPointer : MRI v264(R) [immediate:577]
gap () () 
          v265(R) = X64Movl : MRI v259(R) [immediate:576]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v265(R) #134 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          v263(R) = X64MovqDecompressTaggedSigned : MRI v264(R) [immediate:575]
gap () (v261(R) = v263(-);) 
          v261(1) = X64Sar32 v261(R) #1
assign rsi to v983:1
assign 6 to v983:1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v261 #7 #133 v0(S) v1(-) v2(S) v3(-) v262(-)
gap () () 
          X64MovqCompressTagged : MRI v259(R) [immediate:574] v260(R)
gap () () 
          ArchJmp [immediate:573]
gap () () 
          ArchJmp [immediate:572]
gap () () 
          ArchJmp [immediate:571]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:569] v49(R) #132 v0(S) v1(-) v2(S) v3(-) [immediate:570]
gap () () 
          v256(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:568]
gap () () 
          v258(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:567]
gap () (v257(R) = v258(-);) 
          v257(1) = X64Sar32 v257(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v257 #3 #131 v0(S) v1(-) v2(S) v3(-) [immediate:566]
gap () () 
          v254(R) = X64MovqDecompressAnyTagged : MRI v256(R) [immediate:565]
assign r11 to v971:9
assign 11 to v971:9
gap () () 
          X64Cmp32 : Root && branch if equal #152 v254(R) [immediate:563] [immediate:564]
gap () (v253 = v254(-);) 
          ArchJmp [immediate:562]
gap () () 
          [constant:255] = ArchNop
gap () (v253 = v255(-);) 
          ArchJmp [immediate:561]
gap () () 
          X64Test32 && deoptimize if equal v253 #1 #130 v0(S) v1(-) v2(S) v3(-) [immediate:560]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v253(R) [immediate:558] v43(R) #129 v0(S) v1(-) v2(S) v3(-) [immediate:559]
gap () () 
          v250(R) = X64MovqDecompressTaggedPointer : MRI v253(R) [immediate:557]
gap () () 
          v252(R) = X64MovqDecompressTaggedSigned : MRI v253(R) [immediate:556]
gap () (v251(R) = v252(-);) 
          v251(1) = X64Sar32 v251(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v251 #2 #128 v0(S) v1(-) v2(S) v3(-) [immediate:555]
gap () () 
          v249(R) = X64Movsd : MRI v250(R) [immediate:554]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v249 [immediate:552] [immediate:553]
gap () () 
          ArchJmp [immediate:551]
blocking v974 pick register r9
gap () () 
          v236(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:550]
gap () () 
          X64Test32 && deoptimize if equal v236 #1 #127 v0(S) v1(-) v2(S) v3(-) [immediate:549]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v236(R) [immediate:547] v10(R) #126 v0(S) v1(-) v2(S) v3(-) [immediate:548]
gap () () 
          v248(R) = X64MovqDecompressTaggedPointer : MRI v236(R) [immediate:546]
gap () () 
          v247(R) = X64MovqDecompressAnyTagged : MRI v248(R) [immediate:545]
gap () () 
          X64Test32 && deoptimize if equal v247 #1 #125 v0(S) v1(-) v2(S) v3(-) [immediate:544]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v247(R) [immediate:542] v25(R) #124 v0(S) v1(-) v2(S) v3(-) [immediate:543]
gap () () 
          v240(R) = X64MovqDecompressTaggedPointer : MRI v247(R) [immediate:541]
gap () () 
          v246(R) = X64MovqDecompressTaggedSigned : MRI v247(R) [immediate:540]
gap () (v241(R) = v246(-);) 
          v241(1) = X64Sar32 v241(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v241 #4 #123 v0(S) v1(-) v2(S) v3(-) [immediate:539]
gap () () 
          v243(R) = X64MovqDecompressAnyTagged : MRI v240(R) [immediate:538]
blocking v971 pick register r8
gap () () 
          X64Test32 && branch if equal v243 #1 [immediate:536] [immediate:537]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v243(R) [immediate:534] [immediate:535]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v243(R) [immediate:532] [immediate:533]
gap () () 
          v245(R) = X64MovqDecompressTaggedPointer : MRI v243(R) [immediate:531]
assign rax to v981:0
assign 0 to v981:0
gap () () 
          X64Test8 : MRI && branch if equal v245(R) [immediate:528] #16 [immediate:529] [immediate:530]
gap () () 
          ArchJmp [immediate:527]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v245(R) [immediate:525] [immediate:526]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v245(R) [immediate:523] [immediate:524]
gap () () 
          ArchJmp [immediate:522]
gap () () 
          X64Test32 : MRI && branch if not equal v243(R) [immediate:519] #2147483646 [immediate:520] [immediate:521]
gap () () 
          ArchJmp [immediate:518]
gap () () 
          ArchJmp [immediate:517]
gap () () 
          v244(R) = X64Movsd : MRI assign r14 to v975:2
assign 14 to v975:2
v243(R) [immediate:516]
assign rax to v971:12
gap () () 
          AVXFloat64Cmp && branch if not equal vassign 0 to v971:12
37(R) v244 [immediate:514] assign r9 to v974:11
assign 9 to v974:11
[immediate:515]
gap () (assign r8 to v184:92
assign 8 to v184:92
) 
          ArchJmp [immediate:513]
gap () () 
          ArchJmp [immediate:assign r12 to v976:0
assign 12 to v976:0
512]
gap () () 
          ArchJmp [immediate:511]
gap () () 
          ArchJmp [immediate:510]
gap () () 
          X64Cmp32 && branch if not equal v243 [immediate:507] [immediate:508] [immediate:509]
gap () () 
          ArchJmp [immediate:506]
gap () () 
          v242(R) = X64Movl : MRI v2(R) [immediate:505]
assign rdx to v979:0
assign 2 to v979:0
gap () () 
          ArchDeoptimize #122 v0(S) v1(-) v2(S) v3(-) v242(-) v236(-) [immediate:504]
gap () () 
          ArchJmp [immediate:503]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v241 #8 #121 v0(S) v1(-) v2(S) v3(-) [immediate:502]
gap () () 
          v237(R) = X64MovqDecompressAnyTagged : MRI v240(R) [immediate:501]
gap () () 
          X64Test32 && branch if equal v237 #1 [immediate:499] [immediate:500]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v237(R) [immediate:497] [immediate:498]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v237(R) [immediate:495] [immediate:496]
gap () () 
          v239(R) = X64MovqDecompressTaggedPointer : MRI v237(R) [immediate:494]
gap () () 
          X64Test8 : MRI && branch if equal v239(R) [immediate:491] #16 [immediate:492] [immediate:493]
gap () () 
          ArchJmp [immediate:490]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v239(R) [immediate:488] [immediate:489]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v239(R) [immediate:486] [immediate:487]
gap () () 
          ArchJmp [immediate:485]
gap () () 
          X64Test32 : MRI && branch if not equal v237(R) [immediate:482] #2147483646 [immediate:483] [immediate:484]
assign rsi to v978:1
assign 6 to v978:1
gap () () 
          ArchJmp [immediate:481]
gap () () 
          ArchJmp [immediate:480]
gap () () 
          v238(R) = X64Movsd : MRI v237(R) [immediate:479]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v238 [immediate:477] [immediate:478]
gap () () 
          ArchJmp [immediate:476]
gap () () 
          ArchJmp [immediate:475]
gap () () 
          ArchJmp [immediate:474]
gap () () 
          ArchJmp [immediate:473]
gap () () 
          X64Cmp32 && branch if not equal v237 [immediate:470] [immediate:471] [immediate:472]
gap () () 
          ArchJmp [immediate:469]
gap () () 
          v225(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:468]
gap () () 
          v233(R) = X64MovqDecompressTaggedPointer : MRI v236(R) [immediate:467]
gap () () 
          v235(R) = X64MovqDecompressTaggedSigned : MRI v236(R) [immediate:466]
gap () (v234(R) = v235(-);) 
          v234(1) = X64Sar32 v234(R) #1
assign r11 to v971:13
assign 11 to v971:13
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v234 #5 #120 v0(S) v1(-) v2(S) v3(-) [immediate:465]
gap () () 
          v227(R) = X64MovqDecompressAnyTagged : MRI v233(R) [immediate:464]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v234 #1 #119 v0(S) v1(-) v2(S) v3(-) [immediate:463]
gap () () 
          v228(R) = X64MovqDecompressAnyTagged : MRI v233(R) [immediate:462]
gap () () 
          X64Test32 && deoptimize if equal v225 #1 #118 v0(S) v1(-) v2(S) v3(-) [immediate:461]
gap () () 
          v232(R) = X64MovqDecompressTaggedPointer : MRI v225(R) [immediate:460]
gap () () 
          [constant:230] = ArchNop
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v232(R) [immediate:458] #1068 #117 v0(S) v1(-) v2(S) v3(-) [immediate:459]
gap () () 
          v231(R) = X64MovqDecompressTaggedPointer : MRI v225(R) [immediate:457]
gap () () 
          [constant:229] = ArchNop
gap () () 
          [constant:226] = ArchNop
gap () () 
          X64Cmp && deoptimize if not equal v230(R) v231 #116 v0(S) v1(-) v2(S) v3(-) [immediate:456]
gap () () 
          X64Push v228(-)
gap () () 
          X64Push v227(-)
gap () () 
          X64Push v226(-)
gap () ([rdi|R|t] = v225(-); [rax|R|w64] = v70(-); [rsi|R|t] = v229(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:455] #-1 #115 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v219(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:454]
gap () () 
          X64Test32 && deoptimize if equal v219 #1 #114 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v219(R) [immediate:453] v10(R) #113 vassign rax to v977:0
0(S) v1(-) v2(S) v3(-) v219(-)
assign 0 to v977:0
gap () () 
          v223(R) = X64MovqDecompressTaggedPointer : MRI v219(R) [immediate:452]
gap () () 
          v221(R) = X64MovqDecompressAnyTagged : MRI v223(R) [immediate:451]
gap () () 
          X64Test32 && deoptimize if equal v221 #1 #112 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v221(R) [immediate:450] v25(R) #111 v0(S) v1(-) v2(S) v3(-) v219(-)
gap () () 
          v216(R) = X64MovqDecompressTaggedPointer : MRI v221(R) [immediate:449]
assign r8 to v184:94
assign 8 to v184:94
gap () () 
          v222(R) = X64Movl : MRI v216(R) [immediate:448]
assign r9 to v974:13
assign 9 to v974:13
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v222(R) #110 v0(S) v1(-) v2(S) v3(-) v219(-)
assign rax to v971:15
assign 0 to v971:15
gap () () 
          v220(R) = X64MovqDecompressTaggedSigned : MRI v221(R) [immediate:447]
assign r14 to v975:4
assign 14 to v975:4
gap () (v218(R) = v220(-);) 
          v218(1) = X64Sar32 v218(R) #1
gap () () 
          [constant:217] = ArchNop
assign r12 to v970:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v218 #8 #109 v0(S) v1(-) v2(S) v3(-) v219(-)
assign 12 to v970:0
gap () () 
          X64MovqCompressTagged : MRI v216(R) [immediate:446] v217(R)
gap () () 
          ArchJmp [immediate:445]
gap () () 
          ArchJmp [immediate:444]
assign r9 to v974:10
assign 9 to v974:10
gap () () 
          ArchJmp [immediate:443]
gap () () 
          v203(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:442]
gap () () 
          X64Test32 && deoptimize if equal v203 #1 #108 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v203(R) [immediate:441] v10(R) #107 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v215(R) = X64MovqDecompressTaggedPointer : MRI v203(R) [immediate:440]
gap () () 
          v214(R) = X64MovqDecompressAnyTagged : MRI v215(R) [immediate:439]
gap () () 
          X64Test32 && deoptimize if equal v214 #1 #106 v0(S) v1(-) v2(S) v3(-) v203(-)
assign r9 to v971:11
assign 9 to v971:11
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v214(R) [immediate:438] v25(R) #105 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v211(R) = X64MovqDecompressTaggedPointer : MRI v214(R) [immediate:437]
gap () () 
          v213(R) = X64MovqDecompressTaggedSigned : MRI v214(R) [immediate:436]
gap () (v212(R) = v213(-);) 
          v212(1) = X64Sar32 v212(R) #assign r11 to v972:0
assign 11 to v972:0
1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v212 #0 #104 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v208(R) = assign r14 to v973:0
assign 14 to v973:0
X64MovqDecompressAnyTagged : MRI v211(R) [immediate:435]
gap () () 
          X64Test32 && branch if equal v208 #1 [immediate:433] [immediate:434]
gap () () 
          X64Cmp32 : Root && branch if equal #176assign r11 to v530:65
assign 11 to v530:65
 v208(R) [immediate:431] [immediate:432]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v208(R) [immediate:429] [immediate:430]
gap () () 
          v210(R) = X64MovqDecompressTaggedPointer : MRI v208(R) [immediate:428]
gap () () 
          X64Test8 : MRI && branch if equal v210(R) [immediate:425] #16 [immediate:426] [immediate:427]
gap () () 
          ArchJmp [immediate:424]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v210(R) [immediate:422] [immediate:423]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v210(R) [immediate:420] [immediate:421]
gap () () 
          ArchJmp [immediate:419]
assign rsi to v3:62
gap () () 
          X64Test32 : MRI && branch if not equal v208(R) [immediate:416] #2147483646 [immediate:417] [immediate:418]
assign 6 to v3:62
gap () () 
          ArchJmp [immediate:415]
gap () () 
          ArchJmp [immediate:414]
gap () () 
          v209(R) = X64Movsd : MRI v208(R) [immediate:413]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v209 [immediate:411] [immediate:412]
gap () () 
          ArchJmp [immediate:410]
gap () () 
          ArchJmp [immediate:409]
gap () () 
          ArchJmp [immediate:408]
gap () () 
          ArchJmp [immediate:407]
gap () () 
          X64Cmp32 && branch if not equal v208 [immediate:404] [immediate:405] [immediate:406]
gap () () 
          ArchJmp [immediate:403]
assign r9 to v891:0
assign 9 to v891:0
gap () () 
          [constant:201] = ArchNop
gap () () 
          [constant:200] = ArchNop
gap () () 
          [constant:197] = ArchNop
gap () () 
          [constant:188] = ArchNop
gap () () 
          v196(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:402]
gap () () 
          v205(R) = X64MovqDecompressTaggedPointer : MRI v203(R) [immediate:401]
gap () () 
          v207(R) = X64MovqDecompressTaggedSigned : MRI v203(R) [immediate:400]
gap () (v206(R) = v207(-);) 
          v206(1) = X64Sar32 v206(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v206 #1 #103 v0(S) v1(-) v2(S) v3(-) v203(-)
assign r12 to v80:29
assign 12 to v80:29
gap () () 
          v198(R) = X64MovqDecompressAnyTagged : MRI v205(R) [immediate:399]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v206 #0 #102 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          v199(R) = X64MovqDecompressAnyTagged : MRI v205(R) [immediate:398]
gap () () 
          X64Test32 && deoptimize if equal v196 #1 #101 v0(S) v1(-) v2(S) v3(-) v203(-)
assign r14 to v964:0
gap () () 
          vassign 14 to v964:0
204(R) = X64MovqDecompressTaggedPointer : MRI v196(R) [immediate:397]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v204(R) [immediate:396] #1068 #100 v0(S) v1(-) v2(S) v3(-) v203(-)
assign r15 to v969:0
gap () () 
          vassign 15 to v969:0
202(R) = X64MovqDecompressTaggedPointer : MRI v196(R) [immediate:395]
gap () () 
          X64Cmp && deoptimize if not equal v201(R) v202 #99 v0(S) v1(-) v2(S) v3(-) v203(-)
gap () () 
          X64Push v199(-)
gap () () 
          X64Push v198(-)
gap () () 
          X64Push v197(-)
assign rax to v90:27
assign 0 to v90:27
gap () ([rdi|R|t] = v196(-); [rax|R|w64] = v70(-); [rsi|R|t] = v200(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:394] #-1 #98 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v190(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:393]
gap () () 
          X64Test32 && deoptimize if equal v190 #1 #97 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v190(R) [immediate:392] v10(R) #96 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          v194(R) = X64MovqDecompressTaggedPointer : MRI v190(R) [immediate:391]
gap () () 
          v192(R) = X64MovqDecompressAnyTagged : MRI v194(R) [immediate:390]
gap () () 
          X64Test32 && deoptimize if equal v192 #1 #95 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v192(R) [immediate:389] v25(R) #94 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          v187(R) = X64MovqDecompressTaggedPointer : MRI v192(R) [immediate:388]
gap () () 
          v193(R) = X64Movl : MRI v187(R) [immediate:387]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v193(R) #93 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          v191(R) = X64MovqDecompressTaggedSigned : MRI v192(R) [immediate:386]
assign rdx to v968:1
assign 2 to v968:1
gap () (v189(R) = v191(-);) 
          v189(1) = X64Sar32 v189(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v189 #0 #92 v0(S) v1(-) v2(S) v3(-) v190(-)
gap () () 
          X64MovqCompressTagged : MRI v187(R) [immediate:385] v188(R)
gap () () 
          ArchJmp [immediate:384]
gap () () 
          ArchJmp [immediate:383]
gap () () 
          ArchJmp [immediate:382]
gap () () 
          v174(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:381]
gap () () 
          X64Test32 && deoptimize if equal v174 #1 #91 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v174(R) [immediate:380] v10(R) #90 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v186(R) = X64MovqDecompressTaggedPointer : MRI v174(R) [immediate:379]
gap () () 
          v185(R) = X64MovqDecompressAnyTagged : MRI v186(R) [immediate:378]
gap () () 
          X64Test32 && deoptimize if equal v185 #1 #89 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v185(R) [immediate:377] v25(R) #88 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v182(R) = X64MovqDecompressTaggedPointer : MRI v185(R) [immediate:376]
blocking v90 pick register rax
gap () () 
          v184(R) = X64MovqDecompressTaggedSigned : MRI v185(R) [immediate:375]
gap () (v183(R) = v184(-);) 
          v183(1) = X64Sar32 v183(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v183 #11 #87 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v179(R) = X64MovqDecompressAnyTagged : MRI v182(R) [immediate:374]
gap () () 
          X64Test32 && branch if equal v179 #1 [immediate:372] [immediate:373]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v179(R) [immediate:370] [immediate:371]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v179(R) [immediate:368] [immediate:369]
gap () () 
          v181(R) = X64MovqDecompressTaggedPointer : MRI v179(R) [immediate:367]
gap () () 
          X64Test8 : MRI && branch if equal v181(R) [immediate:364] #16 [immediate:365] [immediate:366]
blocking v3 pick register rsi
gap () () 
          ArchJmp [immediate:363]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v181(R) [immediate:361] [immediate:362]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v181(R) [immediate:359] [immediate:360]
gap () () 
          ArchJmp [immediate:358]
gap () () 
          X64Test32 : MRI && branch if not equal v179(R) [immediate:355] #2147483646 [immediate:356] [immediate:357]
gap () () 
          ArchJmp [immediate:354]
gap () () 
          ArchJmp [immediate:353]
gap () () 
          v180(R) = X64Movsd : MRI v179(R) [immediate:352]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v180 [immediate:350] [immediate:351]
gap () () 
          ArchJmp [immediate:349]
gap () () 
          ArchJmp [immediate:348]
gap () () 
          ArchJmp [immediate:347]
gap () () 
          ArchJmp [immediate:346]
gap () () 
          X64Cmp32 && branch if not equal v179 [immediate:343] [immediate:344] [immediate:345]
gap () () 
          ArchJmp [immediate:342]
blocking v891 pick register r9
gap () () 
          [constant:172] = ArchNop
gap () () 
          [constant:171] = ArchNop
gap () () 
          [constant:168] = ArchNop
gap () () 
          [constant:159] = ArchNop
gap () () 
          v167(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:341]
gap () () 
          v176(R) = X64MovqDecompressTaggedPointer : MRI v174(R) [immediate:340]
gap () () 
          v178(R) = X64MovqDecompressTaggedSigned : MRI v174(R) [immediate:339]
gap () (v177(R) = v178(-);) 
          v177(1) = X64Sar32 v177(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v177 #0 #86 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v169(R) = X64MovqDecompressAnyTagged : MRI v176(R) [immediate:338]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v177 #4 #85 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v170(R) = X64MovqDecompressAnyTagged : MRI v176(R) [immediate:337]
gap () () 
          X64Test32 && deoptimize if equal v167 #1 #84 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v175(R) = X64MovqDecompressTaggedPointer : MRI v167(R) [immediate:336]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v175(R) [immediate:335] #1068 #83 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          v173(R) = X64MovqDecompressTaggedPointer : MRI v167(R) [immediate:334]
blocking v80 pick register r12
gap () () 
          X64Cmp && deoptimize if not equal v172(R) v173 #82 v0(S) v1(-) v2(S) v3(-) v174(-)
gap () () 
          X64Push v170(-)
gap () () 
          X64Push v169(-)
gap () () 
          X64Push v168(-)
assign rax to v967:0
assign 0 to v967:0
gap () ([rdi|R|t] = v167(-); [rax|R|w64] = v70(-); [rsi|R|t] = v171(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:333] #-1 #81 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v161(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:332]
assign r14 to v965:0
assign 14 to v965:0
gap () () 
          X64Test32 && deoptimize if equal v161 #1 #80 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v161(R) [immediate:331] v10(R) #79 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          v165(R) = X64MovqDecompressTaggedPointer : MRI v161(R) [immediate:330]
gap () () 
          v163(R) = X64MovqDecompressAnyTagged : MRI v165(R) [immediate:329]
gap () () 
          X64Test32 && deoptimize if equal v163 #1 #78 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v163(R) [immediate:328] assign rax to v90:31
assign 0 to v90:31
assign r12 to v80:33
v25(R) #77 v0(S) v1(-) v2(S) v3(-) v161(-)
assign 12 to v80:33
gap () () 
          v158(R) = X64MovqDecompressTaggedPointer : MRI assign rsi to v3:66
assign 6 to v3:66
v163(R) [immediate:327]
gap () () 
          vassign r11 to v530:67
assign 11 to v530:67
164(R) = X64Movl : MRI v158(R) [immediate:326]
assign r9 to v891:3
gap () () 
          X64Cmp32 : Root && deoptimize if assign 9 to v891:3
not equal #208 v164assign r8 to v184:96
assign 8 to v184:96
(R) #76 v0(S) v1(-) vassign r14 to v963:0
assign 14 to v963:0
2(S) v3(-) v161(-)
gap () () 
          v162(R) = X64MovqDecompressTaggedSigned : MRI v163(R) [immediate:325]
gap () (v160(R) = vassign r15 to v960:0
162(-);) 
          vassign 15 to v960:0
160(1) = X64Sar32 v160(R) #1
gap () () 
          X64Cmp32 && deoptimize if assign r12 to v80:32
assign 12 to v80:32
unsigned less than or equal v160 #11 #75 v0(S) v1(-) v2(S) v3(-) v161(-)
gap () () 
          X64MovqCompressTagged : MRI v158(R) [immediate:324] v159(R)
gap () () 
          ArchJmp [immediate:323]
gap () () 
          ArchJmp [immediate:322]
gap () () 
          ArchJmp [immediate:321]
assign r14 to v962:0
assign 14 to v962:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:319] v49(R) #74 v0(S) v1(-) v2(S) v3(-) [immediate:320]
assign r14 to v943:0
gap () () 
          v155(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:318]
assign 14 to v943:0
gap () () 
          v157(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:317]
gap () (v156(R) = v157(-);) 
          v156(1) = X64Sar32 v156(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v156 #4 #73 v0(S) v1(-) v2(S) v3(-) [immediate:316]
gap () () 
          v153(R) = X64MovqDecompressAnyTagged : MRI v155(R) [immediate:315]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v153(R) [immediate:313] [immediate:314]
gap () (v152 = v153(-);) 
          ArchJmp [immediate:312]
assign rbx to v178:38
gap () () 
          [constant:154] = ArchNop
assign 3 to v178:38
gap () (v152 = v154(-);) 
          ArchJmp [immediate:311]
gap () () 
          X64Test32 && deoptimize if equal v152 #1 #72 v0(S) v1(-) v2(S) v3(-) [immediate:310]
assign rdx to v185:29
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v152(R) [immediate:308] v43(R) #71 v0(S) v1(-) v2(S) v3(-) [immediate:309]
assign 2 to v185:29
gap () () 
          v149(R) = X64MovqDecompressTaggedPointer : MRI v152(R) [immediate:307]
gap () () 
          v151(R) = X64MovqDecompressTaggedSigned : MRI v152(R) [immediate:306]
gap () (v150(R) = v151(-);) 
          v150(1) = X64Sar32 v150(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v150 #2 #70 v0(S) v1(-) v2(S) v3(-) [immediate:305]
gap () () 
          v148(R) = X64Movsd : MRI v149(R) [immediate:304]
assign rcx to v961:1
assign 1 to v961:1
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v148 [immediate:302] [immediate:303]
gap () () 
          ArchJmp [immediate:301]
gap () () 
          v139(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:300]
gap () () 
          X64Test32 && deoptimize if equal v139 #1 #69 v0(S) v1(-) v2(S) v3(-) [immediate:299]
assign rcx to v957:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v139(R) [immediate:297] v10(R) #68 v0(S) v1(-) v2(S) v3(-) [immediate:298]
assign 1 to v957:0
gap () () 
          v147(R) = X64MovqDecompressTaggedPointer : MRI v139(R) [immediate:296]
gap () () 
          v146(R) = X64MovqDecompressAnyTagged : MRI v147(R) [immediate:295]
gap () () 
          X64Test32 && deoptimize if equal v146 #1 #67 v0(S) v1(-) v2(S) v3(-) [immediate:294]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v146(R) [immediate:292] v25(R) #66 v0(S) v1(-) v2(S) v3(-) [immediate:293]
gap () () 
          v143(R) = X64MovqDecompressTaggedPointer : MRI v146(R) [immediate:291]
assign r15 to v959:0
assign 15 to v959:0
gap () () 
          v145(R) = X64MovqDecompressTaggedSigned : MRI v146(R) [immediate:290]
gap () (v144(R) = v145(-);) 
          v144(1) = X64Sar32 v144(R) #1
assign r15 to v942:0
assign 15 to v942:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v144 #11 #65 v0(S) v1(-) v2(S) v3(-) [immediate:289]
gap () () 
          v140(R) = X64MovqDecompressAnyTagged : MRI v143(R) [immediate:288]
gap () () 
          X64Test32 && branch if equal v140 #1 [immediate:286] [immediate:287]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v140(R) [immediate:284] [immediate:285]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v140(R) [immediate:282] [immediate:283]
assign rdi to v958:1
assign 7 to v958:1
gap () () 
          v142(R) = X64MovqDecompressTaggedPointer : MRI v140(R) [immediate:281]
gap () () 
          X64Test8 : MRI && branch if equal v142(R) [immediate:278] #16 [immediate:279] [immediate:280]
gap () () 
          ArchJmp [immediate:277]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v142(R) [immediate:275] [immediate:276]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v142(R) [immediate:273] [immediate:274]
gap () () 
          ArchJmp [immediate:272]
assign rdi to v954:0
assign 7 to v954:0
gap () () 
          X64Test32 : MRI && branch if not equal v140(R) [immediate:269] #2147483646 [immediate:270] [immediate:271]
gap () () 
          ArchJmp [immediate:268]
gap () () 
          ArchJmp [immediate:267]
gap () () 
          v141(R) = X64Movsd : MRI v140(R) [immediate:266]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v141 [immediate:264] [immediate:265]
gap () () 
          ArchJmp [immediate:263]
gap () () 
          ArchJmp [immediate:262]
gap () () 
          ArchJmp [immediate:261]
gap () () 
          ArchJmp [immediate:260]
assign rcx to v956:0
assign 1 to v956:0
gap () () 
          X64Cmp32 && branch if not equal v140 [immediate:257] [immediate:258] [immediate:259]
gap () () 
          ArchJmp [immediate:256]
assign rcx to v941:0
gap () () 
          [constant:133] = ArchNop
assign 1 to v941:0
gap () () 
          [constant:132] = ArchNop
gap () () 
          [constant:129] = ArchNop
gap () () 
          [constant:120] = ArchNop
gap () () 
          v128(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:255]
gap () () 
          v136(R) = X64MovqDecompressTaggedPointer : MRI v139(R) [immediate:254]
gap () () 
          v138(R) = X64MovqDecompressTaggedSigned : MRI v139(R) [immediate:253]
gap () (v137(R) = v138(-);) 
          v137(1) = X64Sar32 v137(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v137 #4 #64 v0(S) v1(-) v2(S) v3(-) [immediate:252]
gap () () 
          v130(R) = X64MovqDecompressAnyTagged : MRI v136(R) [immediate:251]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v137 #0 #63 v0(S) v1(-) v2(S) v3(-) [immediate:250]
gap () () 
          v131(R) = X64MovqDecompressAnyTagged : MRI v136(R) [immediate:249]
blocking v955 pick register rsi
assign rsi to v955:1
assign 6 to v955:1
gap () () 
          X64Test32 && deoptimize if equal v128 #1 #62 v0(S) v1(-) v2(S) v3(-) [immediate:248]
gap () () 
          v135(R) = X64MovqDecompressTaggedPointer : MRI v128(R) [immediate:247]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v135(R) [immediate:245] #1068 #61 v0(S) v1(-) v2(S) v3(-) [immediate:246]
gap () () 
          v134(R) = X64MovqDecompressTaggedPointer : MRI v128(R) [immediate:244]
gap () () 
          X64Cmp && deoptimize if not equal v133(R) v134 #60 v0(S) v1(-) v2(S) v3(-) [immediate:243]
gap () () 
          X64Push v131(-)
gap () () 
          X64Push v130(-)
assign rsi to v951:0
gap () () 
          X64Push v129(-)
assign 6 to v951:0
gap () ([rdi|R|t] = v128(-); [rax|R|w64] = v70(-); [rsi|R|t] = v132(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:242] #-1 #59 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v122(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:241]
gap () () 
          X64Test32 && deoptimize if equal v122 #1 #58 v0(S) v1(-) v2(S) v3(-) v122(-)
assign rdi to v953:0
assign 7 to v953:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v122(R) [immediate:240] v10(R) #57 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          v126(R) = X64MovqDecompressTaggedPointer : MRI v122(R) [immediate:239]
assign rdi to v940:0
assign 7 to v940:0
gap () () 
          v124(R) = X64MovqDecompressAnyTagged : MRI v126(R) [immediate:238]
gap () () 
          X64Test32 && deoptimize if equal v124 #1 #56 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v124(R) [immediate:237] v25(R) #55 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          v119(R) = X64MovqDecompressTaggedPointer : MRI v124(R) [immediate:236]
gap () () 
          v125(R) = X64Movl : MRI v119(R) [immediate:235]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v125(R) #54 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          v123(R) = X64MovqDecompressTaggedSigned : MRI v124(R) [immediate:234]
gap () (v121(R) = v123(-);) 
          v121(1) = X64Sar32 v121(R) #1
blocking v952 pick register rax
assign rax to v952:1
assign 0 to v952:1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v121 #11 #53 v0(S) v1(-) v2(S) v3(-) v122(-)
gap () () 
          X64MovqCompressTagged : MRI v119(R) [immediate:233] v120(R)
gap () () 
          ArchJmp [immediate:232]
gap () () 
          ArchJmp [immediate:231]
gap () () 
          ArchJmp [immediate:230]
gap () () 
          v106(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:229]
gap () () 
          X64Test32 && deoptimize if equal v106 #1 #52 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v106(R) [immediate:228] v10(R) #51 v0(S) v1(-) v2(S) v3(-) v106(-)
assign rax to v948:0
assign 0 to v948:0
gap () () 
          v118(R) = X64MovqDecompressTaggedPointer : MRI v106(R) [immediate:227]
gap () () 
          v117(R) = X64MovqDecompressAnyTagged : MRI v118(R) [immediate:226]
gap () () 
          X64Test32 && deoptimize if equal v117 #1 #50 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v117(R) [immediate:225] v25(R) #49 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v114(R) = X64MovqDecompressTaggedPointer : MRI v117(R) [immediate:224]
assign rsi to v950:0
assign 6 to v950:0
gap () () 
          v116(R) = X64MovqDecompressTaggedSigned : MRI v117(R) [immediate:223]
gap () (v115(R) = v116(-);) 
          v115(1) = X64Sar32 v115(R) #1
assign rsi to v939:0
assign 6 to v939:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v115 #3 #48 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v111(R) = X64MovqDecompressAnyTagged : MRI v114(R) [immediate:222]
gap () () 
          X64Test32 && branch if equal v111 #1 [immediate:220] [immediate:221]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v111(R) [immediate:218] [immediate:219]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v111(R) [immediate:216] [immediate:217]
gap () () 
          v113(R) = X64MovqDecompressTaggedPointer : MRI v111(R) [immediate:215]
gap () () 
          X64Test8 : MRI && branch if equal v113(R) [immediate:212] #16 [immediate:213] [immediate:214]
gap () () 
          ArchJmp [immediate:211]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v113(R) [immediate:209] [immediate:210]
gap () () 
          X64Cmp32 : Root && branch if equal #432 v113(R) [immediate:207] [immediate:208]
gap () () 
          ArchJmp [immediate:206]
blocking v949 pick register r9
assign r9 to v949:1
assign 9 to v949:1
gap () () 
          X64Test32 : MRI && branch if not equal v111(R) [immediate:203] #2147483646 [immediate:204] [immediate:205]
gap () () 
          ArchJmp [immediate:202]
gap () () 
          ArchJmp [immediate:201]
gap () () 
          v112(R) = X64Movsd : MRI v111(R) [immediate:200]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v112 [immediate:198] [immediate:199]
gap () () 
          ArchJmp [immediate:197]
gap () () 
          ArchJmp [immediate:196]
gap () () 
          ArchJmp [immediate:195]
gap () () 
          ArchJmp [immediate:194]
gap () () 
          X64Cmp32 && branch if not equal v111 [immediate:191] [immediate:192] [immediate:193]
assign r9 to v945:0
assign 9 to v945:0
gap () () 
          ArchJmp [immediate:190]
gap () () 
          [constant:104] = ArchNop
gap () () 
          [constant:103] = ArchNop
gap () () 
          [constant:100] = ArchNop
gap () () 
          [constant:91] = ArchNop
gap () () 
          v99(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:189]
gap () () 
          v108(R) = X64MovqDecompressTaggedPointer : MRI v106(R) [immediate:188]
gap () () 
          v110(R) = X64MovqDecompressTaggedSigned : MRI v106(R) [immediate:187]
assign rax to v947:0
assign 0 to v947:0
gap () (v109(R) = v110(-);) 
          v109(1) = X64Sar32 v109(R) #1
assign rax to v938:0
assign 0 to v938:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v109 #0 #47 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v101(R) = X64MovqDecompressAnyTagged : MRI v108(R) [immediate:186]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v109 #3 #46 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v102(R) = X64MovqDecompressAnyTagged : MRI v108(R) [immediate:185]
gap () () 
          X64Test32 && deoptimize if equal v99 #1 #45 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v107(R) = X64MovqDecompressTaggedPointer : MRI v99(R) [immediate:184]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v107(R) [immediate:183] #1068 #44 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          v105(R) = X64MovqDecompressTaggedPointer : MRI v99(R) [immediate:182]
gap () () 
          X64Cmp && deoptimize if not equal v104(R) v105 #43 v0(S) v1(-) v2(S) v3(-) v106(-)
gap () () 
          X64Push v102(-)
blocking v946 pick register rdx
assign rdx to v946:1
gap () () 
          X64Push v101(-)
assign 2 to v946:1
gap () () 
          X64Push v100(-)
gap () ([rdi|R|t] = v99(-); [rax|R|w64] = v70(-); [rsi|R|t] = v103(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:181] #-1 #42 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v93(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:180]
gap () () 
          X64Test32 && deoptimize if equal v93 #1 #41 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v93(R) [immediate:179] v10(R) #40 v0(S) v1(-) v2(S) v3(-) v93(-)
assign rdx to v937:0
assign 2 to v937:0
gap () () 
          v97(R) = X64MovqDecompressTaggedPointer : MRI v93(R) [immediate:178]
gap () () 
          v95(R) = X64MovqDecompressAnyTagged : MRI v97(R) [immediate:177]
gap () () 
          X64Test32 && deoptimize if equal v95 #1 #39 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v95(R) [immediate:176] v25(R) #38 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          v90(R) = X64MovqDecompressTaggedPointer : MRI v95(R) [immediate:175]
assign r9 to v944:0
assign 9 to v944:0
gap () () 
          v96(R) = X64Movl : MRI v90(R) [immediate:174]
assign r9 to v935:0
assign 9 to v935:0
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v96(R) #37 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          v94(R) = X64MovqDecompressTaggedSigned : MRI v95(R) [immediate:173]
gap () (v92(R) = v94(-);) 
          v92(1) = X64Sar32 v92(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v92 #3 #36 v0(S) v1(-) v2(S) v3(-) v93(-)
gap () () 
          X64MovqCompressTagged : MRI v90(R) [immediate:172] v91(R)
gap () () 
          ArchJmp [immediate:171]
gap () () 
          ArchJmp [immediate:170]
gap () () 
          ArchJmp [immediate:169]
gap () () 
          v77(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:168]
gap () () 
          X64Test32 && deoptimize if equal v77 #1 #35 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v77(R) [immediate:167] v10(R) #34 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v89(R) = X64MovqDecompressTaggedPointer : MRI v77(R) [immediate:166]
blocking v388 pick register rbx
gap () () 
          v88(R) = X64MovqDecompressAnyTagged : MRI v89(R) [immediate:165]
assign rbx to v388:3
assign 3 to v388:3
gap () () 
          X64Test32 && deoptimize if equal v88 #1 #33 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v88(R) [immediate:164] v25(R) #32 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v85(R) = X64MovqDecompressTaggedPointer : MRI v88(R) [immediate:163]
gap () () 
          v87(R) = X64MovqDecompressTaggedSigned : MRI v88(R) [immediate:162]
gap () (v86(R) = v87(-);) 
          v86(1) = X64Sar32 v86(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v86 #10 #31 v0(S) v1(-) v2(S) v3(-) v77(-)
assign r14 to v927:0
assign 14 to v927:0
gap () () 
          v82(R) = X64MovqDecompressAnyTagged : MRI v85(R) [immediate:161]
gap () () 
          X64Test32 && branch if equal v82 #1 [immediate:159] [immediate:160]
gap () () 
          X64Cmp32 : Root && branch if equal #176 v82(R) [immediate:157] [immediate:158]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v82(R) [immediate:155] [immediate:156]
gap () () 
          v84(R) = X64MovqDecompressTaggedPointer : MRI v82(R) [immediate:154]
gap () () 
          X64Test8 : MRI && branch if equal v84(R) [immediate:151] #16 [immediate:152] [immediate:153]
assign r15 to v936:0
gap () () 
          ArchJmp [immediate:150]
assign 15 to v936:0
gap () () 
          X64Cmp32 : Root && branch if equal #304 v84(R) [immediate:148] [immediate:149]
assign r15 to v911:0
assign 15 to v911:0
gap () () 
          X64Cmp32 : Root && branch if equal #432 v84(R) [immediate:146] [immediate:147]
gap () () 
          ArchJmp [immediate:145]
assign r8 to v184:87
gap () () 
          X64Test32 : MRI && branch if not equal v82(R) [immediate:142] #2147483646 [immediate:143] [immediate:144]
assign 8 to v184:87
gap () () 
          ArchJmp [immediate:141]
gap () () 
          ArchJmp [immediate:140]
gap () () 
          v83(R) = X64Movsd : MRI v82(R) [immediate:139]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v83 [immediate:137] [immediate:138]
gap () () 
          ArchJmp [immediate:136]
gap () () 
          ArchJmp [immediate:135]
gap () () 
          ArchJmp [immediate:134]
gap () () 
          ArchJmp [immediate:133]
assign rax to v185:32
assign 0 to v185:32
gap () () 
          X64Cmp32 && branch if not equal v82 [immediate:130] [immediate:131] [immediate:132]
gap () () 
          ArchJmp [immediate:129]
gap () () 
          [constant:75] = ArchNop
assign r9 to v891:2
assign 9 to v891:2
gap () () 
          [constant:71] = ArchNop
gap () () 
          [constant:74] = ArchNop
gap () () 
          [constant:61] = ArchNop
assign r11 to v530:60
assign 11 to v530:60
gap () () 
          v69(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:128]
gap () () 
          v79(R) = X64MovqDecompressTaggedPointer : MRI v77(R) [immediate:127]
gap () () 
          v81(R) = X64MovqDecompressTaggedSigned : MRI v77(R) [immediate:126]
gap () (v80(R) = v81(-);) 
          v80(1) = X64Sar32 v80(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #3 #30 v0(S) v1(-) v2(S) v3(-) v77(-)
assign rdx to v934:0
gap () () 
          v72(R) = X64MovqDecompressAnyTagged : MRI v79(R) [immediate:125]
assign 2 to v934:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v80 #7 #29 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v73(R) = X64MovqDecompressAnyTagged : MRI v79(R) [immediate:124]
gap () () 
          X64Test32 && deoptimize if equal v69 #1 #28 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v78(R) = X64MovqDecompressTaggedPointer : MRI v69(R) [immediate:123]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v78(R) [immediate:122] #1068 #27 v0(S) v1(-) v2(S) v3(-) v77(-)
gap () () 
          v76(R) = X64MovqDecompressTaggedPointer : MRI v69(R) [immediate:121]
gap () () 
          X64Cmp && deoptimize if not equal v75(R) v76 #26 v0(S) v1(-) v2(S) v3(-) v77(-)
assign rdx to v932:0
assign 2 to v932:0
gap () () 
          X64Push v73(-)
gap () () 
          X64Push v72(-)
gap () () 
          X64Push v71(-)
gap () ([rdi|R|t] = v69(-); [rax|R|w64] = v70(-); [rsi|R|t] = v74(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:120] #-1 #25 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v63(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:119]
gap () () 
          X64Test32 && deoptimize if equal v63 #1 #24 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v63(R) [immediate:118] v10(R) #23 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          v67(R) = X64MovqDecompressTaggedPointer : MRI v63(R) [immediate:117]
gap () () 
          v65(R) = X64MovqDecompressAnyTagged : MRI v67(R) [immediate:116]
gap () () 
          X64Test32 && deoptimize if equal v65 #1 #22 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v65(R) [immediate:115] v25(R) #21 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          v60(R) = X64MovqDecompressTaggedPointer : MRI v65(R) [immediate:114]
gap () () 
          v66(R) = X64Movl : MRI v60(R) [immediate:113]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #208 v66(R) #20 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          v64(R) = X64MovqDecompressTaggedSigned : MRI v65(R) [immediate:112]
gap () (v62(R) = v64(-);) 
          v62(1) = X64Sar32 v62(R) #1
assign rdx to v931:0
assign 2 to v931:0
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v62 #10 #19 v0(S) v1(-) v2(S) v3(-) v63(-)
gap () () 
          X64MovqCompressTagged : MRI v60(R) [immediate:111] v61(R)
gap () () 
          ArchJmp [immediate:110]
gap () () 
          ArchJmp [immediate:109]
gap () () 
          ArchJmp [immediate:108]
gap () () 
          v51(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:107]
gap () () 
          X64Test32 && deoptimize if equal v51 #1 #18 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v51(R) [immediate:106] v10(R) #17 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          v59(R) = X64MovqDecompressTaggedPointer : MRI v51(R) [immediate:105]
assign rdx to v930:0
assign 2 to v930:0
gap () () 
          v58(R) = X64MovqDecompressAnyTagged : MRI v59(R) [immediate:104]
gap () () 
          X64Test32 && deoptimize if equal v58 #1 #16 v0(S) v1(-) v2(S) v3(-) v51(-)
assign rdx to v929:0
assign 2 to v929:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v58(R) [immediate:103] v25(R) #15 v0(S) v1(-) v2(S) v3(-) v51(-)
gap () () 
          v55(R) = X64MovqDecompressTaggedPointer : MRI v58(R) [immediate:102]
gap () () 
          v57(R) = X64MovqDecompressTaggedSigned : MRI v58(R) [immediate:101]
gap () (v56(R) = v57(-);) 
          v56(1) = X64Sar32 v56(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v56 #7 #14 v0(S) v1(-) v2(S) v3(-) v51(-)
assign rcx to v928:0
assign 1 to v928:0
gap () () 
          v52(R) = X64MovqDecompressAnyTagged : MRI v55(R) [immediate:100]
gap () () 
          X64Test32 && branch if equal v52 #1 [immediate:98] [immediate:99]
assign rdx to v926:0
assign 2 to v926:0
gap () () 
          X64Cmp32 : Root && branch if equal #176 v52(R) [immediate:96] [immediate:97]
gap () () 
          X64Cmp32 : Root && branch if equal #184 v52(R) [immediate:94] [immediate:95]
gap () () 
          v54(R) = X64MovqDecompressTaggedPointer : MRI v52(R) [immediate:93]
gap () () 
          X64Test8 : MRI && branch if equal v54(R) [immediate:90] #16 [immediate:91] [immediate:92]
gap () () 
          ArchJmp [immediate:89]
gap () () 
          X64Cmp32 : Root && branch if equal #304 v54(R) [immediate:87] [immediate:88]
assign r14 to v925:0
assign 14 to v925:0
gap () () 
          X64Cmp32 : Root && branch if equal #432 v54(R) [immediate:85] [immediate:86]
gap () () 
          ArchJmp [immediate:84]
assign rdx to v924:0
assign 2 to v924:0
gap () () 
          X64Test32 : MRI && branch if not equal v52(R) [immediate:81] #2147483646 [immediate:82] [immediate:83]
gap () () 
          ArchJmp [immediate:80]
gap () () 
          ArchJmp [immediate:79]
assign r14 to v914:0
assign 14 to v914:0
gap () () 
          v53(R) = X64Movsd : MRI v52(R) [immediate:78]
gap () () 
          AVXFloat64Cmp && branch if not equal v37(R) v53 [immediate:76] [immediate:77]
gap () () 
          ArchJmp [immediate:75]
gap () () 
          ArchJmp [immediate:74]
gap () () 
          ArchJmp [immediate:73]
gap () () 
          ArchJmp [immediate:72]
gap () () 
          X64Cmp32 && branch if not equal v52 [immediate:69] [immediate:70] [immediate:71]
gap () () 
          ArchJmp [immediate:68]
assign rdx to v922:0
gap () () 
          v50(R) = X64Movl : MRI v2(R) [immediate:67]
assign 2 to v922:0
gap () () 
          ArchDeoptimize #13 v0(S) v1(-) v2(S) v3(-) v50(-) v51(-) [immediate:66]
gap () () 
          ArchJmp [immediate:65]
gap () () 
          ArchJmp [immediate:64]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v3(R) [immediate:62] v49(R) #12 v0(S) v1(-) v2(S) v3(-) [immediate:63]
assign rcx to v923:1
gap () () 
          v46(R) = X64MovqDecompressTaggedPointer : MRI v3(R) [immediate:61]
assign 1 to v923:1
gap () () 
          v48(R) = X64MovqDecompressTaggedSigned : MRI v3(R) [immediate:60]
gap () (v47(R) = v48(-);) 
          v47(1) = X64Sar32 v47(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v47 #5 #11 v0(S) v1(-) v2(S) v3(-) [immediate:59]
gap () () 
          v44(R) = X64MovqDecompressAnyTagged : MRI v46(R) [immediate:58]
gap () () 
          X64Cmp32 : Root && branch if equal #152 v44(R) [immediate:56] [immediate:57]
assign rdx to v920:1
assign 2 to v920:1
gap () (v42 = v44(-);) 
          ArchJmp [immediate:55]
gap () () 
          [constant:45] = ArchNop
gap () (v42 = v45(-);) 
          ArchJmp [immediate:54]
gap () () 
          X64Test32 && deoptimize if equal v42 #1 #10 v0(S) v1(-) v2(S) v3(-) [immediate:53]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v42(R) [immediate:51] v43(R) #9 v0(S) v1(-) v2(S) v3(-) [immediate:52]
assign r15 to v917:1
gap () () 
          v39(R) = X64MovqDecompressTaggedPointer : MRI v42(R) [immediate:50]
assign 15 to v917:1
gap () () 
          v41(R) = X64MovqDecompressTaggedSigned : MRI v42(R) [immediate:49]
gap () (v40(R) = v41(-);) 
          v40(1) = X64Sar32 v40(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v40 #2 #8 v0(S) v1(-) v2(S) v3(-) [immediate:48]
gap () () 
          v38(R) = X64Movsd : MRI v39(R) [immediate:47]
gap () () 
          AVXFloat64Cmp && branch if unsigned greater than v37(R) v38 [immediate:45] [immediate:46]
assign rdx to v918:0
assign 2 to v918:0
gap () () 
          v22(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:44]
gap () () 
          v30(R) = X64Movq : MR v28(R)
gap () () 
          v35(R) = X64Lea : MRI v30(R) [immediate:43]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v36(R) v35(R) [immediate:41] [immediate:42]
gap () () 
          ArchJmp [immediate:40]
gap () ([rdx|R|w64] = v34(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:39] #-1 [rdx|R|w64]
assign rcx to v919:0
gap (v33(-) = [rax|R|tp];) () 
          v31(R) = X64Lea : MRI v33(R) [immediate:38]
assign 1 to v919:0
gap () (v27 = v31(-);) 
          ArchJmp [immediate:37]
gap () (v27 = v30(-);) 
          ArchJmp [immediate:36]
gap () () 
          v29(R) = X64Lea : MRI v27(R) [immediate:35]
gap () () 
          X64Movq : MR v28(R) v29(R)
gap () () 
          v26(R) = X64Lea : MRI v27(R) [immediate:34]
gap () (v19 = v26(-);) 
          v19(1) = ArchNop v19
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:33] v25(R)
assign r15 to v915:0
assign 15 to v915:0
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:32] v24(R)
gap () () 
          [constant:23] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:31] v23(R)
gap () () 
          X64MovqCompressTagged : MRI v19(R) [immediate:29] [immediate:30]
gap () () 
          X64Test32 && deoptimize if equal v22 #1 #7 v0(S) v1(-) v2(S) v22(-) v19(-)
assign rdx to v916:0
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v22(R) [immediate:28] v10(R) #6 v0(S) v1(-) v2(S) v22(-) v19(-)
assign 2 to v916:0
gap () () 
          v18(R) = X64MovqDecompressTaggedPointer : MRI v22(R) [immediate:27]
gap () () 
          ArchStoreWithWriteBarrier : MRI v18(R) [immediate:26] v19(R)
gap () () 
          v13(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:25]
gap () () 
          X64Test32 && deoptimize if equal v13 #1 #5 v0(S) v1(-) v2(S) v13(-) [immediate:24]
gap () () 
          X64Cmp32 : MRI && branch if equal v13(R) [immediate:21] v10(R) [immediate:22] [immediate:23]
gap () () 
          [constant:17] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v13(R) [immediate:19] v17(R) #4 v0(S) v1(-) v2(S) v13(-) [immediate:20]
gap () () 
          v14(R) = X64MovqDecompressTaggedPointer : MRI v13(R) [immediate:18]
gap () () 
          ArchStoreWithWriteBarrier : MRI v13(R) [immediate:17] v10(R)
gap () () 
          X64MovqCompressTagged : MRI v14(R) [immediate:15] [immediate:16]
assign r14 to v910:0
assign 14 to v910:0
gap () () 
          ArchJmp [immediate:14]
gap () () 
          v12(R) = X64MovqDecompressTaggedPointer : MRI v13(R) [immediate:13]
gap () () 
          X64MovqCompressTagged : MRI v12(R) [immediate:11] [immediate:12]
gap () () 
          ArchJmp [immediate:10]
gap () () 
          [constant:11] = ArchNop
gap () ([rax|R|t] = v11(-);) 
          ArchRet #0 [rax|R|t]
assign rdx to v912:0
assign 2 to v912:0
gap () () 
          v9(R) = X64MovqDecompressAnyTagged : MRI v2(R) [immediate:9]
gap () () 
          X64Test32 && deoptimize if equal v9 #1 #3 v0(S) v1(-) v2(S) v3(-) [immediate:8]
gap () () 
          X64Cmp32 : MRI && assign rcx to v913:0
assign 1 to v913:0
deoptimize if not equal v9(R) [immediate:6] v10(R) #2 v0(S) v1(-) v2(S) v3(-) [immediate:7]
gap () () 
          v8(R) = X64MovqDecompressTaggedPointer : MRI v9(R) [immediate:5]
gap () () 
          v7(R) = X64Movl : MRI v8(R) [immediate:4]
gap () () 
          ArchDeoptimize #1 v0(S) v1(-) v2(S) v7(-) [immediate:3]
gap () () 
          v5(R) = X64MovqDecompressTaggedPointer : MRI v6(R) [immediate:2]
gap () () 
          v4(R) = X64Movl : MRI v5(R) [immediate:1]
gap () () 
          ArchDeoptimize #0 v0(S) v1(-) v2(S) v3(-) v4(-) [immediate:0]
print sib pairs
2, v805, v822
2, v729, v867
3, v805, v789
print modrm pairs
1, v5, v6
1, v8, v9
1, v9, v2
1, v14, v13
1, v17, v13
1, v13, v2
assign r14 to v905:0
assign 14 to v905:0
1, v19, v18
1, v10, v9
1, v10, v13
1, v10, v22
1, v23, v19
1, v31, v33
1, v35, v30
1, v38, v39
1, v41, v42
1, v43, v42
1, v46, v3
1, v49, v3
1, v50, v2
1, v53, v52
1, v54, v52
1, v52, v55
1, v55, v58
1, v59, v51
1, v61, v60
1, v64, v65
1, v66, v60
1, v65, v67
1, v63, v2
1, v76, v69
1, v78, v69
1, v81, v77
1, v79, v77
1, v69, v2
1, v83, v82
assign r15 to v909:0
assign 15 to v909:0
1, v85, v88
1, v88, v89
1, v77, v2
1, v24, v19
1, v22, v2
1, v94, v95
1, v90, v95
1, v25, v88
1, v25, v95
1, v95, v97
1, v107, v99
1, v99, v2
1, v112, v111
1, v108, v106
1, v111, v114
1, v114, v117
1, v118, v106
1, v123, v124
1, v125, v119
1, v119, v124
1, v124, v126
1, v10, v106
1, v10, v122
1, v122, v2
1, v135, v128
1, v131, v136
1, v130, v136
1, v138, v139
1, v141, v140
1, v26, v27
1, v142, v140
assign rdx to v90:30
assign 2 to v90:30
1, v146, v147
1, v139, v2
1, v151, v152
1, v157, v3
1, v162, v163
1, v158, v163
1, v163, v165
1, v10, v139
1, v10, v161
1, v161, v2
1, v173, v167
1, v170, v176
1, v169, v176
1, v25, v19
1, v48, v3
1, v167, v2
1, v102, v108
1, v181, v179
1, v182, v185
1, v174, v2
1, v191, v192
1, v187, v192
1, v192, v194
1, v194, v190
1, v10, v174
1, v10, v190
1, v199, v205
1, v198, v205
1, v196, v2
1, v210, v208
1, v208, v211
1, v213, v214
1, v214, v215
1, v101, v108
1, v215, v203
1, v203, v2
1, v217, v216
1, v25, v214
1, v25, v221
1, v221, v223
1, v232, v225
1, v165, v161
1, v228, v233
1, v625, v624
1, v227, v233
1, v235, v236
1, v149, v152
1, v586, v592
1, v233, v236
1, v242, v2
1, v557, v556
1, v244, v243
1, v231, v225
1, v243, v240
1, v240, v247
1, v120, v119
1, v219, v2
1, v713, v715
1, v673, v669
1, v247, v248
1, v609, v612
1, v531, v445
1, v249, v250
1, v252, v253
1, v140, v143
1, v10, v640
1, v10, v656
1, v43, v253
1, v254, v256
1, v25, v406
1, v25, v413
1, v258, v3
1, v256, v3
1, v207, v203
1, v263, v264
1, v265, v259
1, v262, v2
1, v268, v267
1, v264, v266
1, v275, v276
1, v279, v281
1, v356, v355
1, v153, v155
1, v355, v267
1, v185, v186
1, v345, v358
1, v784, v2
1, v223, v219
1, v331, v389
1, v147, v139
1, v392, v391
1, v260, v259
1, v388, v387
1, v815, v785
1, v389, v391
1, v43, v391
1, v292, v289
1, v394, v289
1, v396, v289
1, v49, v3
1, v291, v397
1, v399, v395
1, v97, v93
1, v400, v403
1, v405, v406
1, v403, v406
1, v532, v531
1, v357, v292
1, v406, v407
1, v10, v51
assign r14 to v494:1
assign 14 to v494:1
1, v10, v63
1, v96, v90
1, v529, v531
1, v397, v395
1, v412, v413
1, v238, v237
1, v414, v408
1, v10, v395
1, v10, v411
1, v43, v821
1, v411, v2
1, v720, v718
1, v423, v417
1, v813, v764
1, v425, v417
1, v136, v139
1, v420, v426
1, v193, v187
1, v419, v426
1, v10, v669
1, v426, v424
1, v250, v253
1, v430, v429
1, v429, v432
1, v633, v2
1, v376, v334
1, v880, v881
1, v434, v435
1, v148, v149
1, v432, v435
1, v814, v807
1, v435, v436
1, v719, v715
1, v436, v424
1, v438, v437
1, v428, v424
1, v443, v437
1, v25, v435
1, v25, v442
1, v87, v88
1, v10, v424
1, v10, v440
1, v175, v167
1, v10, v533
1, v446, v445
1, v25, v117
1, v25, v124
1, v452, v450
1, v273, v272
1, v128, v2
1, v353, v355
1, v453, v454
1, v110, v106
assign r15 to v90:33
assign 15 to v90:33
1, v878, v6
1, v455, v454
1, v457, v459
1, v612, v613
1, v607, v606
1, v521, v534
1, v534, v535
1, v536, v535
1, v550, v510
1, v724, v731
1, v25, v247
1, v25, v264
1, v548, v510
1, v29, v27
1, v441, v442
1, v25, v612
1, v25, v629
1, v43, v510
1, v509, v554
1, v216, v221
1, v43, v556
1, v799, v815
1, v562, v561
1, v470, v467
1, v570, v467
1, v82, v85
1, v25, v146
1, v25, v163
1, v43, v382
1, v812, v806
1, v469, v571
1, v468, v571
1, v571, v569
1, v647, v645
1, v576, v574
1, v547, v548
1, v579, v580
1, v760, v729
1, v577, v580
1, v184, v185
1, v879, v3
1, v855, v857
1, v358, v359
1, v25, v580
1, v580, v581
1, v44, v46
1, v395, v2
1, v179, v182
1, v417, v2
1, v10, v569
1, v164, v158
1, v43, v785
1, v43, v843
1, v43, v764
1, v385, v387
1, v10, v236
1, v10, v262
1, v606, v609
1, v699, v691
1, v588, v584
1, v60, v65
1, v371, v374
1, v93, v2
1, v188, v187
1, v584, v586
1, v640, v2
1, v43, v565
1, v445, v533
1, v583, v582
1, v25, v586
1, v39, v42
1, v656, v2
1, v592, v590
1, v374, v334
1, v591, v586
1, v10, v590
1, v220, v221
1, v72, v79
1, v451, v450
1, v604, v605
blocking v185 pick register rax
1, v602, v605
1, v682, v687
1, v25, v651
1, v25, v658
1, v594, v2
1, v608, v606
1, v563, v565
1, v613, v605
1, v605, v2
1, v617, v618
1, v67, v63
1, v380, v382
1, v619, v621
1, v851, v827
1, v113, v111
1, v774, v772
1, v204, v196
1, v332, v385
1, v653, v658
1, v7, v8
1, v333, v380
1, v635, v642
1, v623, v3
1, v58, v59
1, v621, v3
1, v671, v669
1, v73, v79
1, v629, v631
1, v861, v863
1, v236, v2
1, v627, v2
1, v674, v677
1, v882, v881
1, v639, v633
1, v266, v262
1, v801, v815
1, v820, v821
1, v642, v640
1, v267, v357
1, v694, v700
1, v646, v645
1, v176, v174
1, v10, v605
1, v10, v627
1, v105, v99
1, v702, v698
1, v600, v594
1, v652, v640
1, v145, v146
1, v211, v214
1, v749, v3
1, v787, v805
1, v277, v276
1, v654, v653
1, v274, v272
blocking v388 pick register rbx
1, v25, v715
1, v43, v618
1, v630, v624
1, v658, v660
1, v134, v128
1, v716, v713
1, v870, v871
1, v660, v656
1, v143, v146
1, v668, v662
1, v817, v821
1, v665, v671
1, v676, v674
1, v283, v278
1, v415, v411
1, v43, v561
1, v679, v680
1, v651, v652
1, v829, v827
1, v677, v680
1, v360, v359
1, v680, v681
1, v849, v848
1, v444, v440
1, v566, v565
1, v700, v698
1, v681, v669
1, v863, v879
1, v631, v627
1, v669, v2
1, v408, v413
1, v686, v687
1, v10, v203
1, v10, v219
1, v568, v467
1, v827, v764
1, v704, v703
1, v688, v682
1, v440, v2
1, v824, v784
1, v871, v872
1, v10, v685
1, v875, v6
1, v43, v152
1, v685, v2
1, v693, v700
1, v590, v2
1, v775, v3
1, v706, v709
1, v800, v817
1, v424, v2
1, v25, v709
1, v709, v710
1, v289, v2
blocking v184 pick register r8
1, v675, v674
1, v507, v563
1, v742, v743
1, v670, v662
1, v442, v444
1, v728, v722
1, v865, v783
1, v730, v722
1, v683, v682
1, v725, v731
1, v703, v706
1, v508, v559
1, v91, v90
1, v733, v6
1, v49, v3
1, v49, v3
1, v290, v397
1, v650, v651
1, v731, v6
1, v887, v889
1, v708, v709
1, v106, v2
1, v722, v2
1, v735, v734
1, v768, v3
1, v780, v779
1, v771, v3
1, v740, v741
1, v645, v648
1, v573, v569
1, v718, v2
1, v745, v746
1, v754, v755
1, v25, v58
1, v25, v65
1, v756, v749
1, v407, v395
1, v533, v470
1, v596, v602
1, v758, v3
1, v383, v382
1, v689, v685
1, v245, v243
1, v413, v415
1, v769, v729
1, v554, v556
1, v819, v785
1, v839, v843
1, v49, v3
1, v891, v886
1, v781, v775
1, v126, v122
1, v874, v6
1, v202, v196
1, v559, v561
blocking v891 pick register r9
1, v804, v764
1, v259, v264
1, v628, v629
1, v12, v13
1, v601, v594
1, v835, v785
1, v659, v653
1, v852, v853
1, v847, v848
1, v246, v247
1, v575, v574
1, v741, v6
1, v209, v208
1, v222, v216
1, v10, v718
1, v10, v77
1, v10, v93
1, v25, v687
1, v712, v711
1, v155, v3
1, v698, v2
1, v797, v815
1, v25, v740
1, v798, v817
1, v739, v740
1, v116, v117
1, v747, v749
1, v641, v633
1, v574, v577
1, v802, v817
1, v848, v853
1, v10, v357
1, v624, v629
1, v401, v400
1, v734, v737
1, v737, v740
1, v84, v82
1, v636, v642
1, v644, v640
1, v57, v58
1, v662, v2
1, v751, v752
1, v248, v236
1, v569, v2
1, v117, v118
1, v807, v764
1, v822, v784
1, v614, v615
1, v837, v839
1, v867, v871
1, v409, v408
1, v846, v784
1, v581, v569
1, v883, v879
blocking v530 pick register r11
1, v842, v843
1, v239, v237
1, v43, v746
1, v43, v755
1, v836, v839
1, v859, v854
1, v715, v720
1, v237, v240
1, v844, v784
1, v657, v658
1, v705, v703
1, v752, v755
1, v786, v783
1, v664, v671
1, v159, v158
1, v736, v734
1, v178, v174
1, v834, v839
1, v18, v22
1, v24, v764
1, v25, v871
1, v783, v2
1, v687, v689
1, v710, v698
1, v6, v2
1, v843, v844
1, v697, v691
1, v402, v400
1, v4, v5
1, v611, v612
1, v743, v746
1, v25, v784
1, v43, v334
1, v850, v827
1, v49, v3
1, v437, v442
1, v205, v203
1, v866, v783
1, v615, v618
1, v49, v3
1, v467, v2
1, v884, v885
1, v872, v6
1, v180, v179
1, v431, v429
1, v51, v2
1, v841, v785
1, v10, v6
1, v190, v2
1, v24, v3
1, v43, v387
blocking v80 pick register r12
1, v89, v77
1, v25, v185
1, v25, v192
1, v25, v680
1, v10, v698
1, v186, v174
1, v597, v602
1, v881, v885
1, v648, v651
1, v225, v2
1, v461, v456
1, v691, v2
assign rax to v908:0
assign 0 to v908:0
assign r14 to v906:0
assign 14 to v906:0
assign rdx to v90:35
assign 2 to v90:35
assign r11 to v530:70
assign 11 to v530:70
assign rax to v185:35
assign 0 to v185:35
assign r9 to v891:7
assign 9 to v891:7
assign r8 to v184:99
assign 8 to v184:99
assign rbx to v388:7
assign 3 to v388:7
assign r12 to v80:36
assign 12 to v80:36
assign r14 to v904:0
assign 14 to v904:0
assign r15 to v901:0
assign 15 to v901:0
assign r12 to v80:35
assign 12 to v80:35
assign r14 to v903:0
assign 14 to v903:0
assign r14 to v899:0
assign 14 to v899:0
assign rbx to v388:6
assign 3 to v388:6
v812:1 not intersect with v780:0, removed
v812:2 intersect with v780:0, adding
v812:1 not intersect with v795:0, removed
v812:2 intersect with v795:0, adding
assign rcx to v812:1
assign 1 to v812:1
assign rsi to v902:0
assign 6 to v902:0
assign xmm0 to v861:0
assign 0 to v861:0
assign xmm0 to v860:0
assign 0 to v860:0
assign r15 to v900:0
assign 15 to v900:0
assign xmm0 to v850:0
assign 0 to v850:0
assign r15 to v888:0
assign 15 to v888:0
assign r8 to v184:98
assign 8 to v184:98
assign rax to v185:34
assign 0 to v185:34
assign r9 to v891:6
assign 9 to v891:6
assign r11 to v530:69
assign 11 to v530:69
assign r14 to v898:1
assign 14 to v898:1
assign r14 to v892:0
assign 14 to v892:0
blocking v850 pick register xmm0
assign rsi to v895:1
assign 6 to v895:1
assign xmm0 to v850:3
assign 0 to v850:3
assign xmm0 to v850:2
assign 0 to v850:2
assign rdi to v896:0
assign 7 to v896:0
assign xmm0 to v836:0
assign 0 to v836:0
blocking v897 pick register r12
assign r12 to v897:0
assign 12 to v897:0
assign xmm1 to v837:0
assign 1 to v837:0
assign r9 to v893:0
assign 9 to v893:0
assign xmm2 to v834:0
assign 2 to v834:0
assign r12 to v894:0
assign 12 to v894:0
assign xmm1 to v832:0
assign 1 to v832:0
assign r12 to v80:38
assign 12 to v80:38
assign xmm0 to v833:0
assign 0 to v833:0
assign r9 to v887:0
assign 9 to v887:0
assign xmm2 to v830:0
assign 2 to v830:0
assign r14 to v889:0
assign 14 to v889:0
assign xmm0 to v831:0
assign 0 to v831:0
assign rsi to v890:0
assign 6 to v890:0
assign xmm0 to v829:0
assign 0 to v829:0
assign xmm0 to v800:0
assign 0 to v800:0
assign r9 to v886:0
assign 9 to v886:0
assign xmm1 to v799:0
assign 1 to v799:0
assign rsi to v3:65
assign 6 to v3:65
assign xmm2 to v802:0
assign 2 to v802:0
assign r9 to v178:41
assign 9 to v178:41
assign xmm4 to v801:0
assign 4 to v801:0
assign r12 to v44:1
assign 12 to v44:1
assign xmm5 to v798:0
assign 5 to v798:0
assign r14 to v388:4
assign 14 to v388:4
assign xmm6 to v797:0
assign 6 to v797:0
assign rbx to v19:1
assign 3 to v19:1
assign r15 to v197:1
assign 15 to v197:1
v190:1 not intersect with v156:0, removed
v190:2 intersect with v156:0, adding
v190:1 not intersect with v424:0, removed
v190:2 intersect with v424:0, adding
v190:1 not intersect with v434:0, removed
v190:2 intersect with v434:0, adding
v190:1 not intersect with v442:0, removed
v190:2 intersect with v442:0, adding
v190:1 not intersect with v621:0, removed
v190:2 intersect with v621:0, adding
assign rdi to v190:1
assign 7 to v190:1
blocking v799 pick register xmm1
blocking v39 pick register r12
blocking v801 pick register xmm4
blocking v581 pick register r12
assign r12 to v581:0
assign 12 to v581:0
blocking v883 pick register rax
assign rax to v883:0
assign 0 to v883:0
blocking v797 pick register xmm6
assign xmm6 to v797:3
assign 6 to v797:3
blocking v882 pick register r11
assign r11 to v882:1
assign 11 to v882:1
assign xmm5 to v798:2
assign 5 to v798:2
assign xmm4 to v801:3
assign 4 to v801:3
assign xmm2 to v802:2
assign 2 to v802:2
assign xmm1 to v799:3
assign 1 to v799:3
assign r11 to v530:72
assign 11 to v530:72
assign xmm0 to v800:2
assign 0 to v800:2
assign xmm4 to v801:2
assign 4 to v801:2
assign rax to v575:0
assign 0 to v575:0
assign xmm2 to v795:0
assign 2 to v795:0
assign xmm1 to v799:2
assign 1 to v799:2
blocking v879 pick register r14
assign r14 to v879:0
assign 14 to v879:0
assign xmm0 to v796:0
assign 0 to v796:0
assign xmm6 to v797:2
assign 6 to v797:2
assign xmm1 to v793:0
assign 1 to v793:0
blocking v881 pick register r8
assign r8 to v881:0
assign 8 to v881:0
assign r8 to v880:0
assign 8 to v880:0
assign xmm0 to v794:0
assign 0 to v794:0
assign xmm0 to v792:0
assign 0 to v792:0
v606:1 not intersect with v596:0, removed
v606:2 intersect with v596:0, adding
v606:1 not intersect with v840:0, removed
v606:2 intersect with v840:0, adding
v606:1 not intersect with v860:0, removed
v606:2 intersect with v860:0, adding
assign r11 to v606:1
assign 11 to v606:1
v603:0 not intersect with v575:0, removed
v603:0 not intersect with v605:0, removed
v603:1 intersect with v605:0, adding
v603:0 not intersect with v184:2, removed
v603:0 not intersect with v619:0, removed
v603:1 intersect with v619:0, adding
v603:0 not intersect with v612:0, removed
v603:1 intersect with v612:0, adding
assign rax to v603:0
assign 0 to v603:0
v623:0 not intersect with v627:0, removed
v623:1 intersect with v627:0, adding
v623:0 not intersect with v826:0, removed
v623:1 intersect with v826:0, adding
v623:0 not intersect with v827:0, removed
v623:1 intersect with v827:0, adding
assign r8 to v623:0
assign 8 to v623:0
assign r14 to v878:0
assign 14 to v878:0
blocking v599 pick register r8
assign xmm0 to v751:0
assign 0 to v751:0
assign r8 to v599:0
assign 8 to v599:0
assign xmm1 to v37:1
assign 1 to v37:1
blocking v877 pick register r8
assign r8 to v877:0
assign 8 to v877:0
assign r14 to v874:0
assign 14 to v874:0
assign xmm0 to v742:0
assign 0 to v742:0
assign r8 to v876:0
assign 8 to v876:0
assign r8 to v875:0
assign 8 to v875:0
assign r8 to v871:0
assign 8 to v871:0
assign xmm0 to v735:0
assign 0 to v735:0
blocking v869 pick register r9
assign r9 to v869:0
assign 9 to v869:0
blocking v872 pick register rax
assign rax to v872:0
assign 0 to v872:0
assign r14 to v873:0
assign 14 to v873:0
blocking v37 pick register xmm0
assign r8 to v867:0
assign 8 to v867:0
assign rax to v868:1
assign 0 to v868:1
assign r8 to v3:63
assign 8 to v3:63
assign xmm1 to v37:4
assign 1 to v37:4
v603:1 not intersect with v612:0, removed
v603:3 intersect with v612:0, adding
v603:1 not intersect with v619:0, removed
v603:3 intersect with v619:0, adding
v603:1 not intersect with v605:0, removed
v603:3 intersect with v605:0, adding
assign r9 to v603:1
assign 9 to v603:1
assign r12 to v90:28
assign 12 to v90:28
v812:2 not intersect with v795:0, removed
v812:3 intersect with v795:0, adding
assign xmm0 to v704:0
assign 0 to v704:0
v812:2 not intersect with v780:0, removed
v812:3 intersect with v780:0, adding
assign r14 to v812:2
assign 14 to v812:2
assign xmm1 to v37:3
assign 1 to v37:3
blocking v185 pick register r8
blocking v3 pick register r8
blocking v37 pick register xmm0
blocking v603 pick register r8
blocking v606 pick register r11
assign xmm0 to v675:0
assign 0 to v675:0
blocking v623 pick register r8
assign xmm1 to v37:8
assign 1 to v37:8
blocking v530 pick register r8
blocking v184 pick register r8
blocking v37 pick register xmm0
blocking v178 pick register r8
blocking v80 pick register r8
assign xmm0 to v646:0
assign 0 to v646:0
assign xmm1 to v37:11
assign 1 to v37:11
blocking v90 pick register r8
blocking v388 pick register r8
blocking v812 pick register r8
blocking v37 pick register xmm0
blocking v190 pick register r8
assign xmm0 to v614:0
assign 0 to v614:0
blocking v599 pick register r8
assign xmm1 to v37:14
assign 1 to v37:14
assign rsi to v3:69
assign 6 to v3:69
assign r8 to v854:0
assign 8 to v854:0
assign xmm0 to v607:0
assign 0 to v607:0
assign r9 to v866:0
assign 9 to v866:0
assign r11 to v530:74
assign 11 to v530:74
assign r12 to v865:1
assign 12 to v865:1
assign r9 to v864:0
assign 9 to v864:0
blocking v37 pick register xmm0
assign r9 to v863:0
assign 9 to v863:0
assign r12 to v184:101
assign 12 to v184:101
assign r14 to v860:0
assign 14 to v860:0
assign xmm1 to v37:17
assign 1 to v37:17
assign r9 to v862:0
assign 9 to v862:0
assign r9 to v861:0
assign 9 to v861:0
assign r15 to v606:3
assign 15 to v606:3
assign xmm0 to v575:0
assign 0 to v575:0
assign r9 to v859:0
assign 9 to v859:0
assign xmm1 to v37:16
assign 1 to v37:16
assign r14 to v178:43
assign 14 to v178:43
assign rax to v856:0
assign 0 to v856:0
assign r9 to v858:0
assign 9 to v858:0
assign r9 to v857:0
assign 9 to v857:0
assign r9 to v852:0
assign 9 to v852:0
blocking v37 pick register xmm0
assign rax to v850:0
assign 0 to v850:0
assign rdx to v853:0
assign 2 to v853:0
v507:0 not intersect with v563:0, removed
assign xmm0 to v507:0
assign 0 to v507:0
assign rbx to v855:0
assign 3 to v855:0
assign rdx to v848:0
assign 2 to v848:0
assign rax to v849:1
assign 0 to v849:1
v508:0 not intersect with v559:0, removed
assign r8 to v3:70
assign 8 to v3:70
assign xmm0 to v508:0
assign 0 to v508:0
blocking v3 pick register r8
blocking v508 pick register xmm0
v509:0 not intersect with v554:0, removed
assign xmm0 to v509:0
assign 0 to v509:0
blocking v606 pick register r11
blocking v530 pick register r8
assign xmm0 to v508:2
assign 0 to v508:2
assign xmm1 to v547:0
assign 1 to v547:0
blocking v184 pick register r8
assign xmm1 to v546:0
assign 1 to v546:0
blocking v178 pick register r8
assign xmm2 to v539:0
assign 2 to v539:0
assign xmm3 to v545:0
assign 3 to v545:0
assign rsi to v3:72
assign 6 to v3:72
assign xmm1 to v544:0
assign 1 to v544:0
assign r8 to v834:0
assign 8 to v834:0
assign xmm3 to v540:0
assign 3 to v540:0
assign r9 to v847:0
assign 9 to v847:0
assign xmm4 to v543:0
assign 4 to v543:0
assign r11 to v530:76
assign 11 to v530:76
assign r12 to v846:1
assign xmm1 to v527:1
assign 1 to v527:1
assign 12 to v846:1
assign xmm4 to v542:0
assign 4 to v542:0
assign r9 to v845:0
assign 9 to v845:0
assign xmm1 to v527:2
assign 1 to v527:2
assign r9 to v844:0
assign 9 to v844:0
assign xmm4 to v541:0
assign 4 to v541:0
assign xmm3 to v477:0
assign 3 to v477:0
assign r12 to v184:103
assign 12 to v184:103
assign xmm2 to v479:0
assign 2 to v479:0
assign xmm4 to v517:0
assign 4 to v517:0
assign r14 to v840:0
assign 14 to v840:0
assign xmm5 to v529:0
assign 5 to v529:0
assign r9 to v843:0
assign 9 to v843:0
assign r9 to v842:0
assign 9 to v842:0
assign xmm5 to v530:0
assign 5 to v530:0
assign xmm5 to v528:0
assign 5 to v528:0
assign r15 to v606:5
assign 15 to v606:5
assign xmm5 to v525:0
assign 5 to v525:0
assign r9 to v839:0
assign 9 to v839:0
assign xmm6 to v522:0
assign 6 to v522:0
assign r14 to v178:45
assign 14 to v178:45
assign xmm1 to v526:0
assign 1 to v526:0
assign rax to v836:0
assign 0 to v836:0
assign xmm1 to v524:1
assign 1 to v524:1
assign r9 to v838:0
assign 9 to v838:0
assign xmm6 to v523:0
assign 6 to v523:0
assign r9 to v837:0
assign 9 to v837:0
assign r9 to v832:0
assign 9 to v832:0
assign xmm6 to v451:0
assign 6 to v451:0
assign rax to v830:0
assign 0 to v830:0
assign xmm1 to v518:0
assign 1 to v518:0
assign rdx to v833:0
assign 2 to v833:0
assign rbx to v835:0
assign 3 to v835:0
assign xmm1 to v513:0
assign 1 to v513:0
assign rdx to v828:0
assign 2 to v828:0
assign rax to v829:1
assign 0 to v829:1
assign xmm4 to v516:0
assign 4 to v516:0
assign r8 to v3:73
assign 8 to v3:73
assign xmm5 to v515:0
assign 5 to v515:0
assign xmm4 to v511:0
assign 4 to v511:0
blocking v3 pick register r8
assign xmm5 to v512:0
assign 5 to v512:0
assign xmm1 to v514:0
assign 1 to v514:0
assign xmm1 to v499:0
assign 1 to v499:0
assign xmm5 to v504:0
assign 5 to v504:0
assign xmm4 to v505:0
assign 4 to v505:0
blocking v606 pick register r11
assign xmm7 to v485:0
assign 7 to v485:0
assign xmm8 to v483:0
assign 8 to v483:0
blocking v178 pick register r8
assign xmm0 to v497:0
assign 0 to v497:0
blocking v184 pick register r8
assign xmm4 to v498:0
assign 4 to v498:0
blocking v530 pick register r8
assign rax to v626:0
assign 0 to v626:0
assign r8 to v623:3
assign 8 to v623:3
assign r9 to v827:0
assign 9 to v827:0
assign r9 to v826:0
assign 9 to v826:0
assign r11 to v825:1
assign 11 to v825:1
assign r9 to v627:0
assign 9 to v627:0
assign r11 to v80:40
assign 11 to v80:40
blocking v451 pick register xmm6
assign r12 to v819:0
assign 12 to v819:0
assign rdx to v824:0
assign 2 to v824:0
blocking v485 pick register xmm7
assign r14 to v90:37
assign 14 to v90:37
blocking v483 pick register xmm8
assign xmm4 to v498:2
assign 4 to v498:2
assign xmm0 to v497:2
assign 0 to v497:2
assign xmm8 to v483:3
assign 8 to v483:3
assign xmm7 to v485:3
assign 7 to v485:3
assign rdx to v823:1
assign xmm1 to v499:2
assign 1 to v499:2
assign 2 to v823:1
assign xmm3 to v477:2
assign 3 to v477:2
assign xmm2 to v479:2
assign 2 to v479:2
assign xmm6 to v451:3
assign 6 to v451:3
assign xmm7 to v485:2
assign 7 to v485:2
assign xmm8 to v483:2
assign 8 to v483:2
assign xmm4 to v488:0
assign 4 to v488:0
assign xmm0 to v489:0
assign 0 to v489:0
assign xmm1 to v490:0
assign 1 to v490:0
blocking v626 pick register rax
assign xmm5 to v493:0
assign 5 to v493:0
assign xmm9 to v496:0
assign 9 to v496:0
blocking v627 pick register r9
assign xmm9 to v491:0
assign 9 to v491:0
blocking v80 pick register r11
assign xmm10 to v495:0
assign 10 to v495:0
assign xmm10 to v492:0
assign 10 to v492:0
assign xmm5 to v494:0
assign 5 to v494:0
blocking v90 pick register r14
assign xmm5 to v478:0
assign 5 to v478:0
assign rax to v822:0
assign 0 to v822:0
assign r12 to v820:0
assign 12 to v820:0
assign xmm9 to v484:0
assign 9 to v484:0
assign r14 to v90:41
assign 14 to v90:41
assign r11 to v80:44
assign 11 to v80:44
assign xmm10 to v486:0
assign 10 to v486:0
assign r9 to v627:3
assign 9 to v627:3
assign xmm0 to v472:0
assign 0 to v472:0
assign r8 to v623:5
assign 8 to v623:5
assign xmm4 to v471:0
assign 4 to v471:0
assign rax to v626:3
assign 0 to v626:3
assign r12 to v818:0
assign 12 to v818:0
assign rdx to v816:0
assign 2 to v816:0
assign r11 to v80:43
assign 11 to v80:43
assign r12 to v817:0
assign 12 to v817:0
assign r15 to v795:0
assign 15 to v795:0
assign rbx to v388:9
assign 3 to v388:9
assign r12 to v812:4
assign 12 to v812:4
assign rcx to v814:0
assign 1 to v814:0
assign rdx to v815:0
assign 2 to v815:0
assign rdx to v664:0
assign 2 to v664:0
assign rsi to v178:47
assign 6 to v178:47
assign rdi to v185:37
assign 7 to v185:37
assign xmm4 to v471:2
assign 4 to v471:2
assign xmm0 to v472:2
assign 0 to v472:2
assign xmm5 to v478:2
assign 5 to v478:2
assign xmm8 to v483:5
assign 8 to v483:5
assign xmm7 to v485:5
assign 7 to v485:5
assign xmm6 to v451:5
assign 6 to v451:5
assign xmm2 to v479:4
assign 2 to v479:4
assign xmm3 to v477:4
assign 3 to v477:4
blocking v810 pick register r8
assign r8 to v810:0
assign 8 to v810:0
assign rcx to v813:0
assign 1 to v813:0
assign rcx to v780:0
assign 1 to v780:0
blocking v811 pick register r12
assign r12 to v811:0
assign 12 to v811:0
assign r8 to v809:0
assign 8 to v809:0
assign r8 to v665:0
assign 8 to v665:0
assign xmm6 to v451:7
assign 6 to v451:7
assign r12 to v624:1
assign 12 to v624:1
assign xmm6 to v451:2
assign 6 to v451:2
blocking v806 pick register r9
assign r9 to v806:0
assign 9 to v806:0
blocking v808 pick register rcx
assign rcx to v808:0
assign 1 to v808:0
v780:1 intersect with v665:0, adding
v780:0 not intersect with v782:0, removed
v780:1 intersect with v782:0, adding
v780:0 not intersect with v812:3, removed
v780:0 not intersect with v388:1, removed
assign xmm0 to v430:0
assign 0 to v430:0
assign rcx to v807:0
assign 1 to v807:0
assign r9 to v802:0
assign 9 to v802:0
assign xmm1 to v37:21
assign 1 to v37:21
assign rcx to v625:1
assign 1 to v625:1
blocking v789 pick register rdi
assign rdi to v789:0
assign 7 to v789:0
blocking v37 pick register xmm0
blocking v805 pick register r14
assign r14 to v805:0
assign 14 to v805:0
assign r14 to v804:0
assign 14 to v804:0
assign r14 to v803:0
assign 14 to v803:0
assign r14 to v801:0
assign 14 to v801:0
assign r9 to v800:0
assign 9 to v800:0
assign r9 to v799:0
assign 9 to v799:0
assign r14 to v798:0
assign 14 to v798:0
assign xmm0 to v401:0
assign 0 to v401:0
assign r14 to v797:0
assign 14 to v797:0
assign rax to v626:2
assign 0 to v626:2
assign xmm1 to v37:24
assign 1 to v37:24
assign r9 to v792:0
assign 9 to v792:0
assign r14 to v794:0
assign 14 to v794:0
assign r14 to v793:0
assign 14 to v793:0
assign r9 to v787:0
assign 9 to v787:0
assign r14 to v791:0
assign 14 to v791:0
assign r14 to v790:0
assign 14 to v790:0
blocking v37 pick register xmm0
assign r14 to v788:0
assign 14 to v788:0
assign r14 to v786:0
assign 14 to v786:0
assign r9 to v785:0
assign 9 to v785:0
assign r9 to v784:0
assign 9 to v784:0
v331:0 not intersect with v389:0, removed
assign xmm0 to v331:0
assign 0 to v331:0
assign r14 to v783:0
assign 14 to v783:0
assign r14 to v782:0
assign 14 to v782:0
assign r9 to v780:2
assign 9 to v780:2
v332:0 not intersect with v385:0, removed
assign xmm0 to v332:0
assign 0 to v332:0
blocking v332 pick register xmm0
assign r9 to v779:1
assign 9 to v779:1
v333:0 not intersect with v380:0, removed
assign xmm0 to v333:0
assign 0 to v333:0
assign r9 to v626:4
assign 9 to v626:4
assign r14 to v388:11
assign 14 to v388:11
assign xmm0 to v332:2
assign 0 to v332:2
assign r15 to v178:49
assign 15 to v178:49
assign xmm1 to v371:0
assign 1 to v371:0
assign xmm1 to v370:0
assign 1 to v370:0
blocking v625 pick register rcx
assign xmm2 to v363:0
assign 2 to v363:0
blocking v664 pick register rdx
assign xmm3 to v369:0
assign 3 to v369:0
assign xmm1 to v368:0
assign 1 to v368:0
blocking v665 pick register r8
assign xmm3 to v364:0
assign 3 to v364:0
assign xmm4 to v367:0
assign 4 to v367:0
blocking v80 pick register r11
assign xmm1 to v351:1
assign 1 to v351:1
blocking v624 pick register r12
assign xmm4 to v366:0
assign 4 to v366:0
assign xmm1 to v351:2
assign 1 to v351:2
assign xmm4 to v365:0
assign 4 to v365:0
blocking v626 pick register r8
assign xmm3 to v299:0
assign 3 to v299:0
assign xmm2 to v301:0
assign 2 to v301:0
assign xmm4 to v341:0
assign 4 to v341:0
blocking v388 pick register r8
assign xmm5 to v353:0
assign 5 to v353:0
assign xmm5 to v354:0
assign 5 to v354:0
assign xmm5 to v352:0
assign 5 to v352:0
blocking v178 pick register r8
assign rax to v626:7
assign 0 to v626:7
assign rcx to v625:4
assign 1 to v625:4
assign xmm5 to v349:0
assign 5 to v349:0
assign r12 to v624:4
assign 12 to v624:4
assign r8 to v665:3
assign 8 to v665:3
assign rsi to v178:52
assign 6 to v178:52
assign rdx to v664:3
assign 2 to v664:3
assign rbx to v388:14
assign 3 to v388:14
assign r11 to v80:47
assign 11 to v80:47
assign xmm6 to v346:0
assign 6 to v346:0
assign rcx to v625:3
assign 1 to v625:3
assign rdx to v664:2
assign 2 to v664:2
assign xmm1 to v350:0
assign 1 to v350:0
assign r8 to v665:2
assign 8 to v665:2
assign r12 to v624:3
assign 12 to v624:3
assign xmm1 to v348:1
assign 1 to v348:1
assign xmm6 to v347:0
assign 6 to v347:0
assign r9 to v710:0
assign 9 to v710:0
assign r14 to v626:6
assign 14 to v626:6
assign xmm6 to v273:0
assign 6 to v273:0
assign rax to v775:0
assign 0 to v775:0
assign xmm1 to v342:0
assign 1 to v342:0
blocking v777 pick register r8
assign r8 to v777:0
assign 8 to v777:0
assign r8 to v776:0
assign 8 to v776:0
assign xmm1 to v337:0
assign 1 to v337:0
assign r8 to v770:0
assign 8 to v770:0
assign xmm4 to v340:0
assign 4 to v340:0
assign r15 to v772:0
assign 15 to v772:0
assign xmm5 to v339:0
assign 5 to v339:0
assign rax to v774:0
assign 0 to v774:0
assign rax to v773:0
assign 0 to v773:0
assign xmm4 to v335:0
assign 4 to v335:0
assign rax to v771:0
assign 0 to v771:0
assign rax to v769:0
assign 0 to v769:0
assign r8 to v768:0
assign 8 to v768:0
assign r8 to v767:0
assign 8 to v767:0
assign xmm5 to v336:0
assign 5 to v336:0
assign xmm1 to v338:0
assign 1 to v338:0
assign xmm1 to v323:0
assign 1 to v323:0
assign r15 to v758:0
assign 15 to v758:0
assign xmm5 to v328:0
assign 5 to v328:0
assign xmm4 to v329:0
assign 4 to v329:0
assign rax to v765:0
assign 0 to v765:0
assign xmm7 to v309:0
assign 7 to v309:0
assign rdi to v750:0
assign 7 to v750:0
assign xmm8 to v307:0
assign 8 to v307:0
assign r8 to v766:0
assign 8 to v766:0
assign r8 to v763:0
assign 8 to v763:0
assign rax to v753:0
assign 0 to v753:0
assign xmm0 to v321:0
assign 0 to v321:0
assign xmm4 to v322:0
assign 4 to v322:0
blocking v764 pick register rsi
assign rsi to v764:0
assign 6 to v764:0
assign r8 to v762:0
assign 8 to v762:0
assign rsi to v761:1
assign 6 to v761:1
assign r8 to v753:1
assign 8 to v753:1
assign r15 to v388:15
assign 15 to v388:15
blocking v273 pick register xmm6
blocking v625 pick register rcx
blocking v309 pick register xmm7
blocking v664 pick register rdx
blocking v307 pick register xmm8
assign xmm4 to v322:2
assign 4 to v322:2
assign xmm0 to v321:2
assign 0 to v321:2
assign xmm8 to v307:3
assign 8 to v307:3
assign xmm7 to v309:3
assign 7 to v309:3
assign xmm1 to v323:2
assign 1 to v323:2
assign xmm3 to v299:2
assign 3 to v299:2
assign xmm2 to v301:2
assign 2 to v301:2
assign xmm6 to v273:3
assign 6 to v273:3
blocking v710 pick register r9
assign xmm7 to v309:2
assign 7 to v309:2
assign xmm8 to v307:2
assign 8 to v307:2
assign xmm4 to v312:0
assign 4 to v312:0
assign xmm0 to v313:0
assign 0 to v313:0
assign xmm1 to v314:0
assign 1 to v314:0
assign xmm5 to v317:0
assign 5 to v317:0
blocking v626 pick register r14
assign xmm9 to v320:0
assign 9 to v320:0
assign xmm9 to v315:0
assign 9 to v315:0
assign xmm10 to v319:0
assign 10 to v319:0
assign rax to v759:0
assign 0 to v759:0
assign xmm10 to v316:0
assign 10 to v316:0
assign xmm5 to v318:0
assign 5 to v318:0
assign rax to v753:3
assign 0 to v753:3
assign rdi to v750:2
assign 7 to v750:2
assign r14 to v626:10
assign 14 to v626:10
assign xmm5 to v300:0
assign 5 to v300:0
assign r9 to v710:3
assign 9 to v710:3
assign r12 to v624:6
assign 12 to v624:6
assign rdx to v664:6
assign 2 to v664:6
assign rcx to v625:7
assign 1 to v625:7
assign r11 to v80:49
assign 11 to v80:49
assign rbx to v388:17
assign 3 to v388:17
assign xmm9 to v308:0
assign 9 to v308:0
assign r15 to v754:0
assign 15 to v754:0
assign xmm10 to v310:0
assign 10 to v310:0
assign r8 to v757:0
assign 8 to v757:0
assign xmm0 to v294:0
assign 0 to v294:0
assign xmm4 to v293:0
assign 4 to v293:0
assign rsi to v756:1
assign 6 to v756:1
assign r8 to v753:4
assign 8 to v753:4
assign xmm4 to v293:2
assign 4 to v293:2
assign xmm0 to v294:2
assign 0 to v294:2
assign xmm5 to v300:2
assign 5 to v300:2
assign xmm8 to v307:5
assign 8 to v307:5
assign xmm7 to v309:5
assign 7 to v309:5
assign xmm6 to v273:5
assign 6 to v273:5
assign xmm2 to v301:4
assign 2 to v301:4
assign xmm3 to v299:4
assign 3 to v299:4
assign rax to v755:0
assign 0 to v755:0
assign rbx to v388:19
assign 3 to v388:19
assign r11 to v80:51
assign 11 to v80:51
assign rcx to v625:9
assign 1 to v625:9
assign rdx to v664:8
assign 2 to v664:8
assign r12 to v624:8
assign 12 to v624:8
assign r9 to v710:5
assign 9 to v710:5
assign r14 to v626:12
assign 14 to v626:12
assign rdi to v750:4
assign 7 to v750:4
assign rax to v753:6
assign 0 to v753:6
assign r15 to v747:0
assign 15 to v747:0
assign r9 to v710:2
assign 9 to v710:2
assign xmm6 to v273:7
assign r8 to v713:0
assign 8 to v713:0
assign 6 to v273:7
assign xmm6 to v273:2
assign 6 to v273:2
assign rax to v752:0
assign 0 to v752:0
assign rdx to v664:5
assign 2 to v664:5
assign rax to v749:0
assign 0 to v749:0
assign r14 to v626:9
assign 14 to v626:9
assign r15 to v744:0
assign 15 to v744:0
assign xmm0 to v249:0
assign 0 to v249:0
assign rax to v746:0
assign 0 to v746:0
assign rax to v745:0
assign 0 to v745:0
assign rax to v739:0
assign 0 to v739:0
assign xmm1 to v37:27
assign 1 to v37:27
assign rcx to v625:6
assign 1 to v625:6
assign r15 to v741:0
assign 15 to v741:0
assign rsi to v743:0
assign 6 to v743:0
assign rsi to v742:0
assign 6 to v742:0
blocking v740 pick register r12
assign r12 to v740:0
assign 12 to v740:0
assign xmm0 to v244:0
assign 0 to v244:0
assign r12 to v738:0
assign 12 to v738:0
assign rax to v737:0
assign 0 to v737:0
assign rax to v736:0
assign 0 to v736:0
assign r12 to v665:4
assign 12 to v665:4
assign r15 to v727:0
assign 15 to v727:0
assign rsi to v734:0
assign 6 to v734:0
assign rdi to v719:0
assign 7 to v719:0
assign rax to v735:0
assign 0 to v735:0
assign rax to v732:0
assign 0 to v732:0
assign rsi to v722:0
assign 6 to v722:0
blocking v733 pick register r14
assign r14 to v733:0
assign 14 to v733:0
assign xmm0 to v238:0
assign 0 to v238:0
assign r14 to v731:0
assign 14 to v731:0
blocking v37 pick register xmm0
assign r15 to v730:1
assign 15 to v730:1
assign xmm1 to v37:30
assign 1 to v37:30
assign r14 to v388:20
assign 14 to v388:20
assign r15 to v722:1
assign 15 to v722:1
assign xmm0 to v209:0
assign 0 to v209:0
assign xmm1 to v37:29
assign 1 to v37:29
blocking v664 pick register rdx
blocking v713 pick register r8
blocking v37 pick register xmm0
blocking v710 pick register r9
blocking v665 pick register r12
assign xmm0 to v180:0
assign 0 to v180:0
assign rax to v728:0
assign 0 to v728:0
assign xmm1 to v37:34
assign 1 to v37:34
assign rsi to v722:3
assign 6 to v722:3
assign rdi to v719:2
assign 7 to v719:2
assign r12 to v665:7
assign 12 to v665:7
assign rcx to v625:11
assign 1 to v625:11
assign rdx to v664:11
assign 2 to v664:11
assign r8 to v713:3
assign 8 to v713:3
assign r9 to v710:8
assign 9 to v710:8
assign r11 to v80:53
assign 11 to v80:53
assign rbx to v388:22
assign 3 to v388:22
assign r15 to v723:0
assign 15 to v723:0
blocking v37 pick register xmm0
assign r14 to v726:0
assign 14 to v726:0
assign r14 to v725:1
assign 14 to v725:1
assign xmm0 to v148:0
assign 0 to v148:0
assign xmm1 to v37:37
assign 1 to v37:37
assign r14 to v722:4
assign 14 to v722:4
assign xmm0 to v141:0
assign 0 to v141:0
blocking v37 pick register xmm0
assign rax to v724:0
assign 0 to v724:0
assign xmm1 to v37:40
assign 1 to v37:40
assign rbx to v388:24
assign 3 to v388:24
assign r11 to v80:55
assign 11 to v80:55
assign r9 to v710:10
assign 9 to v710:10
assign r8 to v713:5
assign 8 to v713:5
assign rdx to v664:13
assign 2 to v664:13
assign rcx to v625:13
assign 1 to v625:13
assign r12 to v665:9
assign 12 to v665:9
assign rdi to v719:4
assign 7 to v719:4
assign rsi to v722:6
assign 6 to v722:6
assign r15 to v715:0
assign 15 to v715:0
assign xmm0 to v112:0
assign 0 to v112:0
assign r9 to v710:7
assign 9 to v710:7
assign r8 to v713:2
assign 8 to v713:2
assign xmm1 to v37:39
assign 1 to v37:39
assign r14 to v721:0
assign 14 to v721:0
assign r12 to v665:6
assign 12 to v665:6
assign rax to v718:0
assign 0 to v718:0
blocking v37 pick register xmm0
assign rsi to v714:1
assign 6 to v714:1
assign r9 to v388:25
assign 9 to v388:25
assign xmm0 to v83:0
assign 0 to v83:0
assign xmm1 to v37:44
assign 1 to v37:44
blocking v665 pick register r12
blocking v37 pick register xmm0
assign r12 to v665:12
assign 12 to v665:12
assign r8 to v713:7
assign 8 to v713:7
assign rcx to v625:15
assign 1 to v625:15
assign rdx to v664:15
assign 2 to v664:15
assign r11 to v80:57
assign 11 to v80:57
assign rbx to v388:27
assign 3 to v388:27
assign r14 to v626:14
assign 14 to v626:14
assign r12 to v624:10
assign 12 to v624:10
assign xmm0 to v53:0
assign 0 to v53:0
assign r8 to v627:2
assign 8 to v627:2
assign xmm1 to v37:47
assign 1 to v37:47
assign r15 to v663:0
assign 15 to v663:0
assign rax to v711:0
assign 0 to v711:0
assign rax to v709:0
assign 0 to v709:0
assign rsi to v708:1
assign 6 to v708:1
assign r9 to v666:0
assign 9 to v666:0
assign r11 to v80:46
assign 11 to v80:46
assign rax to v703:0
assign 0 to v703:0
assign xmm0 to v37:49
assign 0 to v37:49
assign rsi to v707:0
assign 6 to v707:0
assign xmm1 to v38:0
assign 1 to v38:0
assign rdi to v90:40
assign 7 to v90:40
spill count : 61
assign rax to v664:16
assign 0 to v664:16
blocking v90 pick register rdi
blocking v80 pick register r11
assign rax to v706:0
assign 0 to v706:0
assign rax to v704:0
assign 0 to v704:0
assign rdi to v90:46
assign 7 to v90:46
assign r11 to v80:60
assign 11 to v80:60
assign r9 to v666:2
assign 9 to v666:2
assign r15 to v663:2
assign 15 to v663:2
assign r8 to v627:6
assign 8 to v627:6
assign r12 to v624:12
assign 12 to v624:12
assign r14 to v626:16
assign 14 to v626:16
assign rbx to v388:29
assign 3 to v388:29
assign rdx to v664:18
assign 2 to v664:18
assign rcx to v625:17
assign 1 to v625:17
assign rax to v702:0
assign 0 to v702:0
assign rsi to v699:0
assign 6 to v699:0
assign r11 to v80:59
assign 11 to v80:59
assign rax to v701:0
assign 0 to v701:0
assign rax to v621:0
assign 0 to v621:0
blocking v190 pick register rbx
assign rbx to v190:3
assign 3 to v190:3
blocking v700 pick register rdi
assign rdi to v700:0
assign 7 to v700:0
assign rsi to v698:0
assign 6 to v698:0
assign rsi to v600:0
assign 6 to v600:0
assign rdi to v39:2
assign 7 to v39:2
blocking v185 pick register rbx
assign rbx to v185:40
assign 3 to v185:40
assign rdx to v664:10
assign 2 to v664:10
blocking v661 pick register rdi
assign rdi to v661:0
assign 7 to v661:0
blocking v697 pick register r8
assign r8 to v697:0
assign 8 to v697:0
assign r8 to v681:0
assign 8 to v681:0
blocking v692 pick register r12
assign r12 to v692:0
assign 12 to v692:0
blocking v665 pick register rbx
assign rbx to v665:11
assign 3 to v665:11
blocking v660 pick register r14
assign r14 to v660:0
assign 14 to v660:0
blocking v696 pick register rcx
assign rcx to v696:0
assign 1 to v696:0
assign rcx to v682:0
assign 1 to v682:0
blocking v693 pick register r9
assign r9 to v693:0
assign 9 to v693:0
blocking v694 pick register r15
assign r15 to v694:0
assign 15 to v694:0
blocking v695 pick register rdx
assign rdx to v695:0
assign 2 to v695:0
assign rdx to v691:0
assign 2 to v691:0
assign r15 to v690:0
assign 15 to v690:0
assign r9 to v689:0
assign 9 to v689:0
assign r12 to v688:0
assign 12 to v688:0
assign r9 to v679:0
assign 9 to v679:0
assign r8 to v680:0
assign 8 to v680:0
assign r8 to v668:0
assign 8 to v668:0
assign r9 to v678:0
assign 9 to v678:0
assign r9 to v670:0
assign 9 to v670:0
assign r9 to v667:0
assign 9 to v667:0
assign r12 to v669:0
assign 12 to v669:0
assign r12 to v653:0
assign 12 to v653:0
assign r9 to v662:0
assign 9 to v662:0
assign r8 to v658:0
assign 8 to v658:0
assign r9 to v659:0
assign 9 to v659:0
assign r9 to v657:0
assign 9 to v657:0
assign r8 to v656:0
assign 8 to v656:0
assign r8 to v650:1
assign 8 to v650:1
assign r8 to v641:0
assign 8 to v641:0
assign r9 to v640:1
assign 9 to v640:1
assign r8 to v637:1
assign 8 to v637:1
assign r8 to v621:1
assign 8 to v621:1
assign r9 to v600:1
assign 9 to v600:1
blocking v80 pick register r11
blocking v600 pick register r8
blocking v621 pick register r8
assign rsi to v600:4
assign 6 to v600:4
assign rax to v621:4
assign 0 to v621:4
assign r11 to v80:63
assign 11 to v80:63
assign r8 to v631:0
assign 8 to v631:0
assign r9 to v621:3
assign 9 to v621:3
assign r8 to v628:0
assign 8 to v628:0
assign r12 to v630:1
assign 12 to v630:1
assign r12 to v600:5
assign 12 to v600:5
blocking v621 pick register r9
assign r8 to v628:2
assign 8 to v628:2
assign r9 to v621:7
assign 9 to v621:7
assign r11 to v80:65
assign 11 to v80:65
assign rsi to v600:7
assign 6 to v600:7
assign r8 to v600:3
assign 8 to v600:3
assign r9 to v621:6
assign 9 to v621:6
assign r9 to v184:105
assign 9 to v184:105
assign rax to v603:4
assign 0 to v603:4
assign r12 to v612:0
assign 12 to v612:0
assign r14 to v619:0
assign 14 to v619:0
assign rdx to v620:0
assign 2 to v620:0
assign rdx to v617:0
assign 2 to v617:0
assign r14 to v607:0
assign 14 to v607:0
assign r15 to v618:0
assign 15 to v618:0
assign rbx to v606:7
assign 3 to v606:7
assign r12 to v616:0
assign 12 to v616:0
assign rsi to v615:1
assign 6 to v615:1
assign r12 to v603:5
assign 12 to v603:5
assign r15 to v606:8
assign 15 to v606:8
blocking v600 pick register r8
blocking v184 pick register r9
blocking v603 pick register r8
blocking v606 pick register r11
assign rax to v613:0
assign 0 to v613:0
assign rbx to v606:11
assign 3 to v606:11
assign r14 to v607:2
assign 14 to v607:2
assign rax to v603:8
assign 0 to v603:8
assign r9 to v184:109
assign 9 to v184:109
assign r8 to v600:10
assign 8 to v600:10
assign r11 to v80:67
assign 11 to v80:67
assign r12 to v608:0
assign 12 to v608:0
assign rdx to v611:0
assign 2 to v611:0
assign rsi to v610:1
assign 6 to v610:1
assign r12 to v603:9
assign 12 to v603:9
assign rax to v609:0
assign 0 to v609:0
assign r11 to v80:69
assign 11 to v80:69
assign r8 to v600:12
assign 8 to v600:12
assign r9 to v184:111
assign 9 to v184:111
assign rax to v603:11
assign 0 to v603:11
assign r14 to v607:4
assign 14 to v607:4
assign rbx to v606:13
assign 3 to v606:13
assign r12 to v598:0
assign 12 to v598:0
assign r15 to v606:10
assign 15 to v606:10
assign rdx to v596:0
assign 2 to v596:0
assign r14 to v605:0
assign 14 to v605:0
assign r15 to v603:7
assign 15 to v603:7
assign r8 to v600:9
assign 8 to v600:9
assign r14 to v599:3
assign 14 to v599:3
assign r15 to v601:0
assign 15 to v601:0
assign rax to v602:0
assign 0 to v602:0
assign rsi to v597:1
assign 6 to v597:1
assign rdx to v596:2
assign 2 to v596:2
assign r9 to v184:113
assign 9 to v184:113
assign r11 to v80:71
assign 11 to v80:71
assign rdi to v190:6
assign 7 to v190:6
assign r9 to v178:54
assign 9 to v178:54
assign rsi to v3:76
assign 6 to v3:76
assign rdx to v90:48
assign 2 to v90:48
assign r11 to v80:62
assign 11 to v80:62
assign r8 to v589:0
assign 8 to v589:0
assign r14 to v594:0
assign 14 to v594:0
assign r15 to v90:45
assign 15 to v90:45
assign rdx to v593:1
assign 2 to v593:1
blocking v575 pick register rax
blocking v80 pick register r11
blocking v581 pick register r12
blocking v90 pick register r15
assign rax to v592:0
assign 0 to v592:0
assign r8 to v590:0
assign 8 to v590:0
assign r15 to v90:51
assign 15 to v90:51
assign r11 to v80:75
assign 11 to v80:75
assign rsi to v3:78
assign 6 to v3:78
assign r9 to v178:56
assign 9 to v178:56
assign rdi to v190:8
assign 7 to v190:8
assign r12 to v581:3
assign 12 to v581:3
assign rax to v575:3
assign 0 to v575:3
assign r8 to v588:0
assign 8 to v588:0
assign r14 to v569:0
assign 14 to v569:0
assign r11 to v80:74
assign 11 to v80:74
assign r8 to v587:0
assign 8 to v587:0
assign r8 to v576:0
assign 8 to v576:0
assign rbx to v184:108
assign 3 to v184:108
assign rdx to v185:42
assign 2 to v185:42
assign rcx to v586:1
assign 1 to v586:1
assign r12 to v581:2
assign 12 to v581:2
assign rcx to v530:78
assign 1 to v530:78
blocking v585 pick register rdx
assign rdx to v585:1
assign 2 to v585:1
assign rdx to v582:1
assign 2 to v582:1
blocking v583 pick register rbx
assign rbx to v583:0
assign 3 to v583:0
blocking v584 pick register rdi
assign rdi to v584:0
assign 7 to v584:0
assign rax to v575:2
assign 0 to v575:2
assign r12 to v579:0
assign 12 to v579:0
assign rbx to v580:0
assign 3 to v580:0
assign rdx to v185:45
assign 2 to v185:45
assign rbx to v184:117
assign 3 to v184:117
assign rdi to v190:10
assign 7 to v190:10
assign r12 to v577:0
assign 12 to v577:0
blocking v578 pick register rbx
assign rbx to v578:0
assign 3 to v578:0
assign rsi to v3:75
assign 6 to v3:75
assign r8 to v524:0
assign 8 to v524:0
assign r12 to v573:0
assign 12 to v573:0
assign r12 to v566:0
assign 12 to v566:0
assign rax to v572:0
assign 0 to v572:0
assign rax to v571:0
assign 0 to v571:0
assign rax to v570:0
assign 0 to v570:0
assign r14 to v568:0
assign 14 to v568:0
assign r14 to v564:0
assign 14 to v564:0
assign rax to v567:1
assign 0 to v567:1
assign rax to v532:0
assign 0 to v532:0
assign r12 to v562:1
assign 12 to v562:1
assign r12 to v561:0
assign 12 to v561:0
assign rdx to v544:0
assign 2 to v544:0
blocking v543 pick register r9
assign r9 to v543:0
assign 9 to v543:0
blocking v542 pick register rcx
assign rcx to v542:0
assign 1 to v542:0
assign r12 to v554:0
assign 12 to v554:0
assign r14 to v555:0
assign 14 to v555:0
assign rdi to v560:0
assign 7 to v560:0
assign r15 to v90:50
assign 15 to v90:50
assign r14 to v559:1
assign 14 to v559:1
assign r14 to v544:1
assign 14 to v544:1
blocking v532 pick register rax
blocking v542 pick register rcx
blocking v3 pick register rsi
blocking v524 pick register r8
blocking v543 pick register r9
blocking v80 pick register r11
blocking v90 pick register r15
blocking v544 pick register r8
assign rax to v558:0
assign 0 to v558:0
assign r14 to v556:0
assign 14 to v556:0
assign r15 to v90:54
assign 15 to v90:54
assign r12 to v554:2
assign 12 to v554:2
assign rcx to v542:3
assign 1 to v542:3
assign r9 to v543:3
assign 9 to v543:3
assign rdx to v544:4
assign 2 to v544:4
assign rax to v532:3
assign 0 to v532:3
assign r8 to v524:3
assign 8 to v524:3
assign rsi to v3:82
assign 6 to v3:82
assign r11 to v80:78
assign 11 to v80:78
assign r14 to v551:0
assign 14 to v551:0
assign r12 to v553:0
assign 12 to v553:0
assign rdi to v552:0
assign 7 to v552:0
assign r12 to v550:0
assign 12 to v550:0
assign r11 to v80:77
assign 11 to v80:77
assign r14 to v549:0
assign 14 to v549:0
assign r12 to v548:0
assign 12 to v548:0
assign r14 to v535:0
assign 14 to v535:0
assign r12 to v546:0
assign 12 to v546:0
assign rdi to v547:1
assign 7 to v547:1
assign r12 to v544:3
assign 12 to v544:3
assign r9 to v543:2
assign 9 to v543:2
assign rcx to v542:2
assign 1 to v542:2
assign r9 to v541:1
assign 9 to v541:1
assign rax to v532:2
assign 0 to v532:2
assign r9 to v538:1
assign 9 to v538:1
assign r8 to v524:2
assign 8 to v524:2
assign r12 to v539:0
assign 12 to v539:0
assign rax to v540:0
assign 0 to v540:0
assign r9 to v536:0
assign 9 to v536:0
assign r12 to v537:0
assign 12 to v537:0
assign rcx to v530:81
assign 1 to v530:81
assign r9 to v178:58
assign 9 to v178:58
assign r12 to v531:0
assign 12 to v531:0
assign r14 to v533:0
assign 14 to v533:0
assign rbx to v534:0
assign 3 to v534:0
assign r9 to v529:0
assign 9 to v529:0
assign r12 to v530:80
assign 12 to v530:80
assign r12 to v528:1
assign 12 to v528:1
assign r9 to v527:0
assign 9 to v527:0
assign r9 to v526:0
assign 9 to v526:0
assign rsi to v3:81
assign 6 to v3:81
v509:1 intersect with v510:0, adding
assign r9 to v509:0
assign 9 to v509:0
assign r12 to v525:0
assign 12 to v525:0
assign r12 to v523:0
assign 12 to v523:0
assign r14 to v496:1
assign 14 to v496:1
v510:0 not intersect with v509:1, removed
v510:1 intersect with v509:1, adding
assign r8 to v510:0
assign 8 to v510:0
assign r12 to v518:0
assign 12 to v518:0
assign rax to v522:0
assign 0 to v522:0
assign r15 to v90:53
assign 15 to v90:53
blocking v80 pick register r11
assign rax to v521:0
assign 0 to v521:0
assign r12 to v519:0
assign 12 to v519:0
assign r15 to v90:56
assign 15 to v90:56
assign r8 to v510:3
assign 8 to v510:3
assign r14 to v496:4
assign 14 to v496:4
assign r9 to v509:3
assign 9 to v509:3
assign rsi to v3:84
assign 6 to v3:84
assign r11 to v80:81
assign 11 to v80:81
assign r12 to v517:0
assign 12 to v517:0
assign rax to v514:0
assign 0 to v514:0
assign r11 to v80:80
assign 11 to v80:80
assign r12 to v516:0
assign 12 to v516:0
assign rdx to v512:0
assign 2 to v512:0
assign r12 to v388:13
assign 12 to v388:13
assign rcx to v515:0
assign 1 to v515:0
assign rax to v513:0
assign 0 to v513:0
assign rax to v511:0
assign 0 to v511:0
assign rbx to v178:51
assign 3 to v178:51
assign rcx to v185:44
assign 1 to v185:44
assign rdx to v480:1
assign 2 to v480:1
assign rdi to v482:1
assign 7 to v482:1
blocking v190 pick register r8
assign r12 to v3:79
assign 12 to v3:79
assign r15 to v388:10
assign 15 to v388:10
blocking v178 pick register r8
blocking v185 pick register r8
blocking v39 pick register r8
blocking v3 pick register r8
blocking v496 pick register r8
blocking v80 pick register r8
blocking v90 pick register r8
blocking v388 pick register r8
blocking v184 pick register r8
assign rsi to v507:1
assign 6 to v507:1
assign rsi to v3:86
assign 6 to v3:86
assign r8 to v505:1
assign 8 to v505:1
assign r9 to v496:5
assign 9 to v496:5
assign r11 to v80:82
assign 11 to v80:82
assign r12 to v90:57
assign 12 to v90:57
assign r14 to v388:32
assign 14 to v388:32
assign r15 to v178:60
assign 15 to v178:60
assign rax to v185:47
assign 0 to v185:47
assign rdx to v498:0
assign 2 to v498:0
assign rcx to v504:0
assign 1 to v504:0
assign rbx to v503:1
assign 3 to v503:1
assign rcx to v502:0
assign 1 to v502:0
assign rcx to v501:0
assign 1 to v501:0
assign rcx to v500:0
assign 1 to v500:0
assign rbx to v476:1
assign 3 to v476:1
v478:1 intersect with v479:0, adding
assign rcx to v478:0
assign 1 to v478:0
assign rdi to v499:0
assign 7 to v499:0
assign rdi to v497:0
assign 7 to v497:0
v479:0 not intersect with v478:1, removed
v479:1 intersect with v478:1, adding
assign rdx to v479:0
assign 2 to v479:0
assign rdi to v490:0
assign 7 to v490:0
blocking v495 pick register r8
assign r8 to v495:0
assign 8 to v495:0
assign r8 to v479:2
assign 8 to v479:2
blocking v185 pick register rax
blocking v80 pick register r11
blocking v388 pick register r14
blocking v178 pick register r15
assign rax to v493:0
assign 0 to v493:0
assign rdi to v491:0
assign 7 to v491:0
assign rdx to v479:4
assign 2 to v479:4
assign rcx to v478:3
assign 1 to v478:3
assign rbx to v476:4
assign 3 to v476:4
assign rax to v185:51
assign 0 to v185:51
assign r15 to v178:64
assign 15 to v178:64
assign r14 to v388:36
assign 14 to v388:36
assign r12 to v90:60
assign 12 to v90:60
assign r11 to v80:86
assign 11 to v80:86
assign r9 to v496:8
assign 9 to v496:8
assign rsi to v3:89
assign 6 to v3:89
assign rdi to v489:0
assign 7 to v489:0
assign r8 to v486:0
assign 8 to v486:0
assign r11 to v80:85
assign 11 to v80:85
assign rdi to v488:0
assign 7 to v488:0
assign rdi to v484:0
assign 7 to v484:0
assign r14 to v388:35
assign 14 to v388:35
blocking v487 pick register r9
assign r9 to v487:0
assign 9 to v487:0
assign r8 to v485:0
assign 8 to v485:0
assign r8 to v481:0
assign 8 to v481:0
assign r15 to v178:63
assign 15 to v178:63
assign rax to v185:50
assign 0 to v185:50
assign r8 to v3:87
assign 8 to v3:87
assign r9 to v476:2
assign 9 to v476:2
blocking v185 pick register r8
blocking v3 pick register r8
blocking v178 pick register r8
blocking v80 pick register r8
blocking v90 pick register r8
blocking v388 pick register r8
assign r8 to v475:0
assign 8 to v475:0
assign r8 to v473:0
assign 8 to v473:0
assign rsi to v474:1
assign 6 to v474:1
assign r8 to v473:2
assign 8 to v473:2
assign rax to v185:53
assign 0 to v185:53
assign r15 to v178:66
assign 15 to v178:66
assign r14 to v388:38
assign 14 to v388:38
assign r12 to v90:62
assign 12 to v90:62
assign r11 to v80:88
assign 11 to v80:88
assign rsi to v3:92
assign 6 to v3:92
assign r15 to v90:63
assign 15 to v90:63
assign rsi to v3:91
assign 6 to v3:91
v410:1 intersect with v415:0, adding
assign r8 to v410:0
assign 8 to v410:0
assign r9 to v411:0
assign 9 to v411:0
assign r12 to v465:0
assign 12 to v465:0
assign r14 to v471:3
assign 14 to v471:3
assign rax to v470:0
assign 0 to v470:0
assign r14 to v178:65
assign 14 to v178:65
assign rdx to v467:0
assign 2 to v467:0
assign rax to v469:0
assign 0 to v469:0
assign rax to v468:0
assign 0 to v468:0
assign rcx to v412:0
assign 1 to v412:0
assign rdi to v413:0
assign 7 to v413:0
v414:0 not intersect with v467:0, removed
assign rax to v414:0
assign 0 to v414:0
assign rdx to v466:0
assign 2 to v466:0
assign rdx to v464:0
assign 2 to v464:0
assign rbx to v463:1
assign 3 to v463:1
v415:0 not intersect with v410:1, removed
v415:1 intersect with v410:1, adding
assign r12 to v415:0
assign 12 to v415:0
assign r11 to v80:87
assign 11 to v80:87
assign rbx to v457:0
assign 3 to v457:0
assign rdx to v462:0
assign 2 to v462:0
assign r15 to v90:61
assign 15 to v90:61
assign rdx to v461:1
assign 2 to v461:1
blocking v80 pick register r11
blocking v415 pick register r12
blocking v178 pick register r14
assign rax to v460:0
assign 0 to v460:0
assign r8 to v458:0
assign 8 to v458:0
assign r15 to v90:66
assign 15 to v90:66
assign r11 to v80:92
assign 11 to v80:92
assign r12 to v415:4
assign 12 to v415:4
assign rax to v414:3
assign 0 to v414:3
assign rdi to v413:3
assign 7 to v413:3
assign rcx to v412:3
assign 1 to v412:3
assign r14 to v178:71
assign 14 to v178:71
assign r9 to v411:3
assign 9 to v411:3
assign r8 to v410:3
assign 8 to v410:3
assign rsi to v3:95
assign 6 to v3:95
assign rbx to v456:0
assign 3 to v456:0
assign rdx to v453:0
assign 2 to v453:0
assign r11 to v80:91
assign 11 to v80:91
blocking v455 pick register r8
assign r8 to v455:0
assign 8 to v455:0
assign r8 to v451:0
assign 8 to v451:0
assign r14 to v178:70
assign 14 to v178:70
assign rbx to v185:52
assign 3 to v185:52
blocking v454 pick register r9
assign r9 to v454:1
assign 9 to v454:1
assign r9 to v450:0
assign 9 to v450:0
assign rdx to v452:0
assign 2 to v452:0
assign rdx to v422:0
assign 2 to v422:0
blocking v388 pick register r14
assign r14 to v388:37
assign 14 to v388:37
assign r8 to v448:0
assign 8 to v448:0
assign r9 to v449:0
assign 9 to v449:0
assign r9 to v418:0
assign 9 to v418:0
blocking v184 pick register r14
assign r14 to v184:119
assign 14 to v184:119
blocking v446 pick register r14
assign r14 to v446:0
assign 14 to v446:0
assign r8 to v447:0
assign 8 to v447:0
assign r8 to v442:0
assign 8 to v442:0
blocking v190 pick register r15
assign r15 to v190:12
assign 15 to v190:12
blocking v440 pick register rax
assign rax to v440:0
assign 0 to v440:0
assign r14 to v445:0
assign 14 to v445:0
assign r14 to v441:0
assign 14 to v441:0
blocking v39 pick register rcx
assign rcx to v39:5
assign 1 to v39:5
blocking v444 pick register rsi
assign rsi to v444:0
assign 6 to v444:0
assign r8 to v438:0
assign 8 to v438:0
assign r14 to v439:0
assign 14 to v439:0
assign r14 to v434:0
assign 14 to v434:0
assign rax to v432:0
assign 0 to v432:0
assign r8 to v437:0
assign 8 to v437:0
assign r8 to v433:0
assign 8 to v433:0
assign rsi to v436:0
assign 6 to v436:0
assign r8 to v428:0
assign 8 to v428:0
assign r14 to v431:0
assign 14 to v431:0
assign r14 to v424:0
assign 14 to v424:0
assign rax to v429:0
assign 0 to v429:0
assign r8 to v427:0
assign 8 to v427:0
assign r8 to v423:0
assign 8 to v423:0
assign rax to v426:0
assign 0 to v426:0
assign r12 to v415:3
assign 12 to v415:3
assign r8 to v416:0
assign 8 to v416:0
assign r14 to v421:0
assign 14 to v421:0
assign r14 to v420:0
assign 14 to v420:0
assign rax to v405:1
assign 0 to v405:1
assign r9 to v417:1
assign 9 to v417:1
assign r9 to v176:1
assign 9 to v176:1
assign rsi to v419:1
assign 6 to v419:1
assign r8 to v3:93
assign 8 to v3:93
assign r14 to v413:1
assign 14 to v413:1
assign rdx to v414:1
assign 2 to v414:1
blocking v405 pick register r8
blocking v3 pick register r8
blocking v80 pick register r8
blocking v90 pick register r8
blocking v39 pick register r8
blocking v185 pick register r8
blocking v388 pick register r8
blocking v184 pick register r8
blocking v178 pick register r8
blocking v190 pick register r8
assign rax to v215:0
assign 0 to v215:0
assign rsi to v3:98
assign 6 to v3:98
assign r8 to v408:0
assign 8 to v408:0
assign r9 to v409:0
assign 9 to v409:0
assign r8 to v214:0
assign 8 to v214:0
assign r9 to v216:0
assign 9 to v216:0
assign r12 to v407:0
assign 12 to v407:0
assign r12 to v406:0
assign 12 to v406:0
assign r11 to v405:3
assign 11 to v405:3
assign r12 to v217:0
assign 12 to v217:0
assign r11 to v80:93
assign 11 to v80:93
assign r14 to v399:0
assign 14 to v399:0
assign r15 to v404:0
assign 15 to v404:0
assign rbx to v90:68
assign 3 to v90:68
assign rdx to v403:1
assign 2 to v403:1
blocking v215 pick register rax
blocking v3 pick register rsi
blocking v216 pick register r9
blocking v80 pick register r11
assign rax to v402:0
assign 0 to v402:0
assign r14 to v400:0
assign 14 to v400:0
assign rbx to v90:71
assign 3 to v90:71
assign r11 to v80:97
assign 11 to v80:97
assign r12 to v217:2
assign 12 to v217:2
assign r9 to v216:3
assign 9 to v216:3
assign r8 to v214:2
assign 8 to v214:2
assign rsi to v3:102
assign 6 to v3:102
assign rax to v215:3
assign 0 to v215:3
assign r14 to v398:0
assign 14 to v398:0
assign r15 to v396:0
assign 15 to v396:0
assign r11 to v80:96
assign 11 to v80:96
assign r14 to v397:0
assign 14 to v397:0
assign r14 to v387:0
assign 14 to v387:0
assign rdx to v39:7
assign 2 to v39:7
assign rcx to v185:56
assign 1 to v185:56
assign rdi to v394:0
assign 7 to v394:0
assign r15 to v395:0
assign 15 to v395:0
assign r15 to v386:0
assign 15 to v386:0
blocking v392 pick register rsi
assign rsi to v392:0
assign 6 to v392:0
assign rdi to v393:0
assign 7 to v393:0
assign rdi to v385:0
assign 7 to v385:0
blocking v390 pick register r8
assign r8 to v390:0
assign 8 to v390:0
assign rsi to v391:0
assign 6 to v391:0
assign rsi to v384:0
assign 6 to v384:0
blocking v382 pick register r12
assign r12 to v382:0
assign 12 to v382:0
assign r8 to v389:0
assign 8 to v389:0
assign r8 to v380:0
assign 8 to v380:0
blocking v388 pick register rbx
assign rbx to v388:42
assign 3 to v388:42
blocking v383 pick register rdx
assign rdx to v383:0
assign 2 to v383:0
assign r12 to v381:0
assign 12 to v381:0
assign r12 to v210:0
assign 12 to v210:0
assign r14 to v184:122
assign 14 to v184:122
assign rax to v215:2
assign 0 to v215:2
assign r9 to v216:2
assign 9 to v216:2
assign r8 to v220:0
assign 8 to v220:0
assign r15 to v178:73
assign 15 to v178:73
assign rbx to v39:10
assign 3 to v39:10
assign rdx to v175:1
assign 2 to v175:1
blocking v377 pick register rcx
assign rcx to v377:0
assign 1 to v377:0
blocking v379 pick register r9
assign r9 to v379:0
assign 9 to v379:0
assign r9 to v378:0
assign 9 to v378:0
assign r9 to v323:0
assign 9 to v323:0
assign rcx to v349:0
assign 1 to v349:0
assign rsi to v376:0
assign 6 to v376:0
assign rsi to v375:0
assign 6 to v375:0
blocking v372 pick register rax
assign rax to v372:0
assign 0 to v372:0
assign rsi to v374:1
assign 6 to v374:1
assign rdi to v372:1
assign 7 to v372:1
blocking v39 pick register r8
blocking v349 pick register rcx
blocking v220 pick register r8
blocking v323 pick register r9
blocking v210 pick register r12
blocking v184 pick register r14
blocking v178 pick register r15
blocking v372 pick register r8
assign rax to v372:4
assign 0 to v372:4
assign rcx to v349:3
assign 1 to v349:3
assign r9 to v323:3
assign 9 to v323:3
assign rdx to v175:4
assign 2 to v175:4
assign rbx to v39:13
assign 3 to v39:13
assign r15 to v178:77
assign 15 to v178:77
assign r8 to v220:3
assign 8 to v220:3
assign r14 to v184:126
assign 14 to v184:126
assign r12 to v210:3
assign 12 to v210:3
assign r11 to v80:99
assign 11 to v80:99
assign rbx to v39:12
assign 3 to v39:12
assign rax to v372:3
assign 0 to v372:3
assign rsi to v356:0
assign 6 to v356:0
assign rax to v371:0
assign 0 to v371:0
assign rax to v357:0
assign 0 to v357:0
assign r14 to v184:125
assign 14 to v184:125
assign rdi to v216:4
assign 7 to v216:4
blocking v341 pick register r14
assign r14 to v341:0
assign 14 to v341:0
blocking v370 pick register r12
assign r12 to v370:0
assign 12 to v370:0
assign r12 to v342:0
assign 12 to v342:0
blocking v367 pick register rdi
assign rdi to v367:0
assign 7 to v367:0
assign r15 to v178:76
assign 15 to v178:76
blocking v39 pick register r8
blocking v356 pick register r8
blocking v367 pick register rdi
blocking v341 pick register r14
blocking v178 pick register r15
assign r15 to v178:80
assign 15 to v178:80
assign rdi to v367:3
assign 7 to v367:3
assign r14 to v341:3
assign 14 to v341:3
assign rax to v357:2
assign 0 to v357:2
assign rsi to v356:3
assign 6 to v356:3
assign r12 to v342:2
assign 12 to v342:2
assign rbx to v39:16
assign 3 to v39:16
assign r11 to v80:101
assign 11 to v80:101
assign r8 to v220:5
assign 8 to v220:5
assign rdx to v175:6
assign 2 to v175:6
assign r9 to v323:5
assign 9 to v323:5
assign rcx to v349:5
assign 1 to v349:5
assign rbx to v39:15
assign 3 to v39:15
assign rdi to v367:2
assign 7 to v367:2
blocking v364 pick register r9
assign r9 to v364:0
assign 9 to v364:0
assign rdi to v366:0
assign 7 to v366:0
assign rdi to v365:0
assign 7 to v365:0
assign rsi to v356:2
assign 6 to v356:2
assign r14 to v341:2
assign 14 to v341:2
assign r9 to v361:0
assign 9 to v361:0
assign r15 to v178:79
assign 15 to v178:79
assign rdi to v363:1
assign 7 to v363:1
assign rdi to v357:3
assign 7 to v357:3
blocking v39 pick register r8
blocking v356 pick register r8
blocking v361 pick register r9
blocking v341 pick register r14
blocking v178 pick register r15
assign r15 to v178:83
assign 15 to v178:83
assign r9 to v361:3
assign 9 to v361:3
assign r14 to v341:6
assign 14 to v341:6
assign rsi to v356:6
assign 6 to v356:6
assign rcx to v349:7
assign 1 to v349:7
assign rdx to v175:8
assign 2 to v175:8
assign r8 to v220:7
assign 8 to v220:7
assign r11 to v80:103
assign 11 to v80:103
assign rbx to v39:19
assign 3 to v39:19
assign r12 to v342:4
assign 12 to v342:4
assign rax to v357:5
assign 0 to v357:5
assign rbx to v39:18
assign 3 to v39:18
assign r9 to v361:2
assign 9 to v361:2
assign rdi to v358:0
assign 7 to v358:0
assign r9 to v360:0
assign 9 to v360:0
assign r9 to v359:0
assign 9 to v359:0
assign rsi to v356:5
assign 6 to v356:5
assign r14 to v341:5
assign 14 to v341:5
assign r9 to v353:0
assign 9 to v353:0
assign r15 to v178:82
assign 15 to v178:82
assign rsi to v355:1
assign 6 to v355:1
assign rdi to v39:20
assign 7 to v39:20
blocking v353 pick register r9
blocking v341 pick register r14
blocking v178 pick register r15
blocking v39 pick register r8
assign r15 to v178:86
assign 15 to v178:86
assign r9 to v353:3
assign 9 to v353:3
assign r14 to v341:9
assign 14 to v341:9
assign rbx to v39:23
assign 3 to v39:23
assign r12 to v342:6
assign 12 to v342:6
assign r11 to v80:105
assign 11 to v80:105
assign r8 to v220:9
assign 8 to v220:9
assign rdx to v175:10
assign 2 to v175:10
assign rcx to v349:9
assign 1 to v349:9
assign r9 to v353:2
assign 9 to v353:2
assign rax to v39:22
assign 0 to v39:22
assign rsi to v350:0
assign 6 to v350:0
assign r9 to v352:0
assign 9 to v352:0
assign r9 to v351:0
assign 9 to v351:0
assign rcx to v349:2
assign 1 to v349:2
assign r8 to v220:2
assign 8 to v220:2
assign r9 to v346:0
assign 9 to v346:0
assign r15 to v178:85
assign 15 to v178:85
assign rsi to v348:1
assign 6 to v348:1
assign rcx to v39:24
assign 1 to v39:24
blocking v220 pick register r8
blocking v346 pick register r9
blocking v178 pick register r15
blocking v39 pick register r8
assign r15 to v178:89
assign 15 to v178:89
assign r9 to v346:3
assign 9 to v346:3
assign r8 to v220:12
assign 8 to v220:12
assign rdx to v175:12
assign 2 to v175:12
assign r11 to v80:107
assign 11 to v80:107
assign rax to v39:27
assign 0 to v39:27
assign r12 to v342:8
assign 12 to v342:8
assign r14 to v341:11
assign 14 to v341:11
assign r9 to v346:2
assign 9 to v346:2
assign rax to v39:26
assign 0 to v39:26
assign rcx to v343:0
assign 1 to v343:0
assign r9 to v345:0
assign 9 to v345:0
assign r9 to v344:0
assign 9 to v344:0
assign r14 to v341:8
assign 14 to v341:8
assign r9 to v338:0
assign 9 to v338:0
assign r15 to v178:88
assign 15 to v178:88
assign rsi to v340:1
assign 6 to v340:1
assign r12 to v39:28
assign 12 to v39:28
blocking v338 pick register r9
blocking v178 pick register r15
blocking v39 pick register r8
assign r15 to v178:92
assign 15 to v178:92
assign r9 to v338:3
assign 9 to v338:3
assign rax to v39:31
assign 0 to v39:31
assign r11 to v80:109
assign 11 to v80:109
assign rdx to v175:14
assign 2 to v175:14
assign r8 to v220:14
assign 8 to v220:14
assign r9 to v338:2
assign 9 to v338:2
assign r12 to v39:30
assign 12 to v39:30
assign r14 to v335:0
assign 14 to v335:0
assign r9 to v337:0
assign 9 to v337:0
assign r9 to v336:0
assign 9 to v336:0
assign r9 to v323:2
assign 9 to v323:2
assign r15 to v178:91
assign 15 to v178:91
assign rsi to v334:1
assign 6 to v334:1
blocking v323 pick register r9
blocking v39 pick register r12
blocking v178 pick register r15
assign r15 to v178:95
assign 15 to v178:95
assign r9 to v323:9
assign 9 to v323:9
assign r12 to v39:34
assign 12 to v39:34
assign r8 to v220:16
assign 8 to v220:16
assign rdx to v175:16
assign 2 to v175:16
assign r11 to v80:111
assign 11 to v80:111
assign r9 to v323:8
assign 9 to v323:8
assign r12 to v39:33
assign 12 to v39:33
assign r14 to v325:0
assign 14 to v325:0
assign rax to v332:0
assign 0 to v332:0
assign rcx to v330:0
assign 1 to v330:0
assign rax to v324:0
assign 0 to v324:0
assign rsi to v331:0
assign 6 to v331:0
assign rcx to v329:0
assign 1 to v329:0
assign rsi to v328:1
assign 6 to v328:1
assign r14 to v324:1
assign 14 to v324:1
blocking v323 pick register r9
blocking v39 pick register r12
assign rax to v326:0
assign 0 to v326:0
assign rax to v324:3
assign 0 to v324:3
assign r12 to v39:37
assign 12 to v39:37
assign r9 to v323:12
assign 9 to v323:12
assign r11 to v80:113
assign 11 to v80:113
assign rdx to v175:18
assign 2 to v175:18
assign r8 to v220:18
assign 8 to v220:18
assign r15 to v178:97
assign 15 to v178:97
assign r14 to v306:0
assign 14 to v306:0
assign r9 to v323:11
assign 9 to v323:11
assign rsi to v305:1
assign 6 to v305:1
assign r15 to v178:99
assign 15 to v178:99
assign r8 to v220:20
assign 8 to v220:20
assign rdx to v175:20
assign 2 to v175:20
assign r11 to v80:115
assign 11 to v80:115
assign r12 to v39:39
assign 12 to v39:39
assign r8 to v220:11
assign 8 to v220:11
assign r12 to v210:2
assign 12 to v210:2
assign r9 to v39:36
assign 9 to v39:36
assign r15 to v178:94
assign 15 to v178:94
assign r14 to v245:0
assign 14 to v245:0
assign rax to v215:5
assign 0 to v215:5
assign rbx to v216:6
assign 3 to v216:6
assign rcx to v301:0
assign 1 to v301:0
blocking v303 pick register rdx
assign rdx to v303:0
assign 2 to v303:0
assign rdx to v302:0
assign 2 to v302:0
assign rdx to v242:0
assign 2 to v242:0
assign rcx to v272:0
assign 1 to v272:0
assign rsi to v300:0
assign 6 to v300:0
assign rsi to v299:0
assign 6 to v299:0
blocking v296 pick register r12
assign r12 to v296:0
assign 12 to v296:0
assign rsi to v298:1
assign 6 to v298:1
assign rdi to v215:6
assign 7 to v215:6
blocking v216 pick register r8
blocking v272 pick register rcx
blocking v242 pick register rdx
blocking v220 pick register r8
blocking v39 pick register r9
blocking v296 pick register r12
blocking v245 pick register r14
blocking v178 pick register r15
assign r12 to v296:3
assign 12 to v296:3
assign rcx to v272:3
assign 1 to v272:3
assign rdx to v242:3
assign 2 to v242:3
assign rbx to v216:9
assign 3 to v216:9
assign rax to v215:8
assign 0 to v215:8
assign r14 to v245:3
assign 14 to v245:3
assign r15 to v178:102
assign 15 to v178:102
assign r9 to v39:42
assign 9 to v39:42
assign r8 to v220:23
assign 8 to v220:23
assign r11 to v80:117
assign 11 to v80:117
assign r9 to v39:41
assign 9 to v39:41
assign r12 to v296:2
assign 12 to v296:2
blocking v280 pick register rax
assign rax to v280:0
assign 0 to v280:0
assign r12 to v295:0
assign 12 to v295:0
assign r12 to v281:0
assign 12 to v281:0
assign rbx to v216:8
assign 3 to v216:8
assign rsi to v264:0
assign 6 to v264:0
assign rdi to v294:0
assign 7 to v294:0
assign rdi to v265:0
assign 7 to v265:0
blocking v291 pick register rdx
assign rdx to v291:0
assign 2 to v291:0
assign r15 to v178:101
assign 15 to v178:101
blocking v280 pick register r8
blocking v264 pick register r8
blocking v291 pick register rdx
blocking v39 pick register r9
blocking v178 pick register r15
assign r15 to v178:105
assign 15 to v178:105
assign rdx to v291:3
assign 2 to v291:3
assign rdi to v265:2
assign 7 to v265:2
assign rsi to v264:3
assign 6 to v264:3
assign rbx to v216:11
assign 3 to v216:11
assign r12 to v281:2
assign 12 to v281:2
assign rax to v280:3
assign 0 to v280:3
assign r9 to v39:45
assign 9 to v39:45
assign r11 to v80:119
assign 11 to v80:119
assign r8 to v220:25
assign 8 to v220:25
assign r14 to v245:5
assign 14 to v245:5
assign rcx to v272:5
assign 1 to v272:5
assign rdx to v291:2
assign 2 to v291:2
assign r9 to v39:44
assign 9 to v39:44
blocking v288 pick register r8
assign r8 to v288:0
assign 8 to v288:0
assign rdx to v290:0
assign 2 to v290:0
assign rdx to v289:0
assign 2 to v289:0
assign r14 to v245:2
assign 14 to v245:2
assign rax to v280:2
assign 0 to v280:2
assign rsi to v264:2
assign 6 to v264:2
assign r8 to v285:0
assign 8 to v285:0
assign r15 to v178:104
assign 15 to v178:104
assign rdx to v287:1
assign 2 to v287:1
assign rdx to v280:4
assign 2 to v280:4
blocking v264 pick register r8
blocking v285 pick register r8
blocking v39 pick register r9
blocking v245 pick register r14
blocking v178 pick register r15
blocking v280 pick register r8
assign r15 to v178:108
assign 15 to v178:108
assign r8 to v285:3
assign 8 to v285:3
assign rsi to v264:6
assign 6 to v264:6
assign rax to v280:7
assign 0 to v280:7
assign r14 to v245:8
assign 14 to v245:8
assign r9 to v39:48
assign 9 to v39:48
assign rcx to v272:7
assign 1 to v272:7
assign r11 to v80:121
assign 11 to v80:121
assign r12 to v281:4
assign 12 to v281:4
assign rbx to v216:13
assign 3 to v216:13
assign rdi to v265:4
assign 7 to v265:4
assign r8 to v285:2
assign 8 to v285:2
assign r9 to v39:47
assign 9 to v39:47
assign rdx to v282:0
assign 2 to v282:0
assign r8 to v284:0
assign 8 to v284:0
assign r8 to v283:0
assign 8 to v283:0
assign r14 to v245:7
assign 14 to v245:7
assign r8 to v280:6
assign 8 to v280:6
assign rsi to v264:5
assign 6 to v264:5
assign r8 to v277:0
assign 8 to v277:0
assign r15 to v178:107
assign 15 to v178:107
assign r12 to v279:1
assign 12 to v279:1
assign r12 to v216:14
assign 12 to v216:14
assign rdx to v264:7
assign 2 to v264:7
blocking v277 pick register r8
blocking v39 pick register r9
blocking v245 pick register r14
blocking v178 pick register r15
blocking v264 pick register r8
assign r15 to v178:111
assign 15 to v178:111
assign r8 to v277:3
assign 8 to v277:3
assign rsi to v264:10
assign 6 to v264:10
assign r14 to v245:11
assign 14 to v245:11
assign r9 to v39:51
assign 9 to v39:51
assign rdi to v265:6
assign 7 to v265:6
assign rbx to v216:16
assign 3 to v216:16
assign r11 to v80:123
assign 11 to v80:123
assign rcx to v272:9
assign 1 to v272:9
assign r8 to v277:2
assign 8 to v277:2
assign r9 to v39:50
assign 9 to v39:50
assign r12 to v274:0
assign 12 to v274:0
assign r8 to v276:0
assign 8 to v276:0
assign r8 to v275:0
assign 8 to v275:0
assign r14 to v245:10
assign 14 to v245:10
assign rcx to v272:2
assign 1 to v272:2
assign r8 to v220:22
assign 8 to v220:22
assign r12 to v269:0
assign 12 to v269:0
assign r15 to v178:110
assign 15 to v178:110
assign rax to v271:1
assign 0 to v271:1
assign rdx to v216:17
assign 2 to v216:17
assign rcx to v264:11
assign 1 to v264:11
blocking v220 pick register r8
blocking v39 pick register r9
blocking v269 pick register r12
blocking v245 pick register r14
blocking v178 pick register r15
assign r15 to v178:114
assign 15 to v178:114
assign r12 to v269:3
assign 12 to v269:3
assign r8 to v220:29
assign 8 to v220:29
assign r14 to v245:14
assign 14 to v245:14
assign r9 to v39:54
assign 9 to v39:54
assign r11 to v80:125
assign 11 to v80:125
assign rbx to v216:19
assign 3 to v216:19
assign rdi to v265:8
assign 7 to v265:8
assign rsi to v264:13
assign 6 to v264:13
assign r9 to v39:53
assign 9 to v39:53
assign r12 to v269:2
assign 12 to v269:2
assign rax to v266:0
assign 0 to v266:0
assign r12 to v268:0
assign 12 to v268:0
assign r12 to v267:0
assign 12 to v267:0
assign r12 to v264:9
assign 12 to v264:9
assign r12 to v261:0
assign 12 to v261:0
assign r15 to v178:113
assign 15 to v178:113
assign rsi to v263:1
assign 6 to v263:1
assign rdx to v216:20
assign 2 to v216:20
blocking v39 pick register r9
blocking v261 pick register r12
blocking v178 pick register r15
assign r15 to v178:117
assign 15 to v178:117
assign r12 to v261:3
assign 12 to v261:3
assign r9 to v39:57
assign 9 to v39:57
assign rbx to v216:22
assign 3 to v216:22
assign r11 to v80:127
assign 11 to v80:127
assign r14 to v245:16
assign 14 to v245:16
assign r8 to v220:31
assign 8 to v220:31
assign r9 to v39:56
assign 9 to v39:56
assign r12 to v261:2
assign 12 to v261:2
assign rax to v258:0
assign 0 to v258:0
assign r12 to v260:0
assign 12 to v260:0
assign r12 to v259:0
assign 12 to v259:0
assign r14 to v245:13
assign 14 to v245:13
assign rdx to v242:2
assign 2 to v242:2
assign r15 to v178:116
assign 15 to v178:116
assign rsi to v257:1
assign 6 to v257:1
assign r12 to v216:23
assign 12 to v216:23
blocking v242 pick register rdx
blocking v39 pick register r9
blocking v245 pick register r14
assign r15 to v178:119
assign 15 to v178:119
assign rdx to v242:7
assign 2 to v242:7
assign r14 to v245:19
assign 14 to v245:19
assign r9 to v39:60
assign 9 to v39:60
assign r8 to v220:33
assign 8 to v220:33
assign r11 to v80:129
assign 11 to v80:129
assign rbx to v216:25
assign 3 to v216:25
assign rdx to v242:6
assign 2 to v242:6
assign r9 to v39:59
assign 9 to v39:59
assign r12 to v247:0
assign 12 to v247:0
assign rax to v255:0
assign 0 to v255:0
assign rax to v246:0
assign 0 to v246:0
assign rcx to v254:0
assign 1 to v254:0
assign rcx to v252:0
assign 1 to v252:0
assign rsi to v253:0
assign 6 to v253:0
assign r14 to v245:18
assign 14 to v245:18
assign r12 to v251:0
assign 12 to v251:0
assign rsi to v250:1
assign 6 to v250:1
assign r12 to v246:1
assign 12 to v246:1
assign rcx to v216:26
assign 1 to v216:26
blocking v242 pick register rdx
blocking v245 pick register r14
assign rax to v248:0
assign 0 to v248:0
assign r14 to v245:22
assign 14 to v245:22
assign rax to v246:3
assign 0 to v246:3
assign r9 to v39:62
assign 9 to v39:62
assign rdx to v242:10
assign 2 to v242:10
assign rbx to v216:28
assign 3 to v216:28
assign r11 to v80:131
assign 11 to v80:131
assign r8 to v220:35
assign 8 to v220:35
assign r15 to v178:121
assign 15 to v178:121
assign r12 to v224:0
assign 12 to v224:0
assign r14 to v245:21
assign 14 to v245:21
assign rcx to v222:0
assign 1 to v222:0
assign rax to v244:0
assign 0 to v244:0
assign rdx to v242:9
assign 2 to v242:9
assign rsi to v223:1
assign 6 to v223:1
assign r12 to v216:29
assign 12 to v216:29
assign rcx to v222:2
assign 1 to v222:2
assign r15 to v178:123
assign 15 to v178:123
assign r8 to v220:37
assign 8 to v220:37
assign r11 to v80:133
assign 11 to v80:133
assign rbx to v216:31
assign 3 to v216:31
assign r9 to v39:64
assign 9 to v39:64
assign rax to v215:10
assign 0 to v215:10
assign r12 to v210:7
assign 12 to v210:7
assign r8 to v220:28
assign 8 to v220:28
assign r8 to v218:0
assign 8 to v218:0
assign rsi to v219:1
assign 6 to v219:1
assign r14 to v215:11
assign 14 to v215:11
assign rdx to v216:32
assign 2 to v216:32
assign r8 to v218:2
assign 8 to v218:2
assign r12 to v210:9
assign 12 to v210:9
assign rax to v215:13
assign 0 to v215:13
assign r9 to v39:66
assign 9 to v39:66
assign rbx to v216:34
assign 3 to v216:34
assign r11 to v80:135
assign 11 to v80:135
assign r15 to v178:125
assign 15 to v178:125
assign r14 to v184:128
assign 14 to v184:128
assign rbx to v39:67
assign 3 to v39:67
assign rsi to v3:101
assign 6 to v3:101
assign r8 to v210:6
assign 8 to v210:6
assign r9 to v211:0
assign 9 to v211:0
assign r12 to v212:0
assign 12 to v212:0
v97:0 not intersect with v100:0, removed
assign r8 to v97:0
assign 8 to v97:0
assign r9 to v52:1
assign 9 to v52:1
assign r12 to v190:14
assign 12 to v190:14
assign rax to v207:0
assign 0 to v207:0
assign rdx to v209:0
assign 2 to v209:0
assign rcx to v208:1
assign 1 to v208:1
assign rdx to v203:0
assign 2 to v203:0
assign rax to v206:0
assign 0 to v206:0
assign rax to v205:0
assign 0 to v205:0
assign rdx to v103:0
assign 2 to v103:0
v107:0 not intersect with v110:0, removed
v107:1 intersect with v110:0, adding
v107:0 not intersect with v200:0, removed
v107:1 intersect with v200:0, adding
v107:0 not intersect with v201:0, removed
v107:1 intersect with v201:0, adding
assign rax to v107:0
assign 0 to v107:0
v108:0 not intersect with v184:2, removed
v108:0 not intersect with v153:0, removed
v108:1 intersect with v153:0, adding
v108:0 not intersect with v151:0, removed
v108:1 intersect with v151:0, adding
v108:0 not intersect with v181:0, removed
v108:1 intersect with v181:0, adding
v108:0 not intersect with v183:0, removed
v108:1 intersect with v183:0, adding
assign rcx to v108:0
assign 1 to v108:0
assign rdi to v202:1
assign 7 to v202:1
assign rbx to v3:99
assign 3 to v3:99
assign rdi to v103:1
assign 7 to v103:1
blocking v107 pick register r8
blocking v108 pick register r8
blocking v39 pick register r8
blocking v185 pick register r8
blocking v3 pick register r8
blocking v97 pick register r8
blocking v80 pick register r8
blocking v90 pick register r8
blocking v190 pick register r8
blocking v184 pick register r8
blocking v178 pick register r8
blocking v52 pick register r8
assign rax to v109:0
assign 0 to v109:0
assign r8 to v107:2
assign 8 to v107:2
assign r9 to v201:0
assign 9 to v201:0
assign r9 to v200:0
assign 9 to v200:0
assign r11 to v199:1
assign 11 to v199:1
assign r9 to v110:0
assign 9 to v110:0
assign r11 to v80:136
assign 11 to v80:136
assign r12 to v193:0
assign 12 to v193:0
assign rdx to v198:0
assign 2 to v198:0
assign r14 to v90:73
assign 14 to v90:73
blocking v109 pick register rax
blocking v80 pick register r11
assign rax to v196:0
assign 0 to v196:0
assign r12 to v194:0
assign 12 to v194:0
assign r14 to v90:76
assign 14 to v90:76
assign r11 to v80:140
assign 11 to v80:140
assign r9 to v110:2
assign 9 to v110:2
assign r8 to v107:4
assign 8 to v107:4
assign rax to v109:3
assign 0 to v109:3
assign r12 to v192:0
assign 12 to v192:0
assign rdx to v187:0
assign 2 to v187:0
assign r11 to v80:139
assign 11 to v80:139
assign r12 to v191:0
assign 12 to v191:0
assign r12 to v156:0
assign 12 to v156:0
assign r15 to v190:16
assign 15 to v190:16
assign rcx to v188:0
assign 1 to v188:0
assign rdx to v186:0
assign 2 to v186:0
assign rdx to v104:0
assign 2 to v104:0
assign rbx to v39:68
assign 3 to v39:68
assign rcx to v185:59
assign 1 to v185:59
assign rsi to v108:2
assign 6 to v108:2
assign rdi to v184:129
assign 7 to v184:129
blocking v181 pick register r14
assign r14 to v181:0
assign 14 to v181:0
blocking v183 pick register r15
assign r15 to v183:0
assign 15 to v183:0
assign r15 to v182:0
assign 15 to v182:0
assign r14 to v180:0
assign 14 to v180:0
assign r15 to v171:0
assign 15 to v171:0
assign r14 to v179:0
assign 14 to v179:0
assign r14 to v172:0
assign 14 to v172:0
assign rax to v109:2
assign 0 to v109:2
blocking v178 pick register r11
assign r11 to v178:126
assign 11 to v178:126
blocking v109 pick register r8
blocking v39 pick register r8
blocking v108 pick register r8
blocking v104 pick register rdx
blocking v156 pick register r12
blocking v171 pick register r15
assign r11 to v178:129
assign 11 to v178:129
assign rax to v109:6
assign 0 to v109:6
assign r14 to v172:2
assign 14 to v172:2
assign r15 to v171:3
assign 15 to v171:3
assign rdi to v184:132
assign 7 to v184:132
assign rsi to v108:5
assign 6 to v108:5
assign rcx to v185:62
assign 1 to v185:62
assign rbx to v39:72
assign 3 to v39:72
assign rdx to v104:3
assign 2 to v104:3
assign r12 to v156:3
assign 12 to v156:3
assign r8 to v107:6
assign 8 to v107:6
assign r9 to v110:4
assign 9 to v110:4
assign rax to v109:5
assign 0 to v109:5
assign rbx to v39:71
assign 3 to v39:71
blocking v164 pick register rcx
assign rcx to v164:0
assign 1 to v164:0
blocking v173 pick register rdi
assign rdi to v173:0
assign 7 to v173:0
assign rdi to v170:0
assign 7 to v170:0
assign r15 to v171:2
assign 15 to v171:2
assign rdx to v104:2
assign 2 to v104:2
assign r12 to v156:2
assign 12 to v156:2
assign r12 to v155:1
assign 12 to v155:1
assign r12 to v109:7
assign 12 to v109:7
assign r14 to v39:73
assign 14 to v39:73
assign r15 to v108:6
assign 15 to v108:6
blocking v104 pick register rdx
blocking v109 pick register r8
blocking v39 pick register r8
assign rdx to v104:6
assign 2 to v104:6
assign rbx to v39:76
assign 3 to v39:76
assign rax to v109:10
assign 0 to v109:10
assign r9 to v110:6
assign 9 to v110:6
assign r8 to v107:8
assign 8 to v107:8
assign rsi to v108:8
assign 6 to v108:8
assign r11 to v178:131
assign 11 to v178:131
assign rdx to v104:5
assign 2 to v104:5
assign rsi to v108:4
assign 6 to v108:4
assign r12 to v133:0
assign 12 to v133:0
assign r14 to v109:9
assign 14 to v109:9
assign r15 to v39:75
assign 15 to v39:75
assign rax to v151:0
assign 0 to v151:0
assign rcx to v153:0
assign 1 to v153:0
assign rcx to v152:0
assign 1 to v152:0
assign rax to v150:0
assign 0 to v150:0
assign rcx to v146:0
assign 1 to v146:0
assign rax to v149:0
assign 0 to v149:0
assign rax to v147:0
assign 0 to v147:0
assign rdi to v144:0
assign 7 to v144:0
blocking v148 pick register r15
assign r15 to v148:0
assign 15 to v148:0
assign r15 to v145:0
assign 15 to v145:0
assign r15 to v135:0
assign 15 to v135:0
assign rax to v142:0
assign 0 to v142:0
assign rcx to v143:0
assign 1 to v143:0
assign rcx to v140:0
assign 1 to v140:0
assign rax to v134:0
assign 0 to v134:0
assign rdi to v141:0
assign 7 to v141:0
assign rbx to v139:0
assign 3 to v139:0
assign r15 to v138:1
assign 15 to v138:1
assign r15 to v134:1
assign 15 to v134:1
assign rcx to v108:9
assign 1 to v108:9
blocking v104 pick register rdx
blocking v133 pick register r12
assign rax to v136:0
assign 0 to v136:0
assign rax to v134:3
assign 0 to v134:3
assign r14 to v109:12
assign 14 to v109:12
assign r12 to v133:3
assign 12 to v133:3
assign rsi to v108:11
assign 6 to v108:11
assign rdx to v104:9
assign 2 to v104:9
assign r11 to v178:133
assign 11 to v178:133
assign r8 to v107:10
assign 8 to v107:10
assign r9 to v110:8
assign 9 to v110:8
assign r15 to v113:0
assign 15 to v113:0
assign r12 to v133:2
assign 12 to v133:2
assign rcx to v111:0
assign 1 to v111:0
assign rax to v132:0
assign 0 to v132:0
assign rdx to v104:8
assign 2 to v104:8
assign r12 to v112:1
assign 12 to v112:1
assign r12 to v108:12
assign 12 to v108:12
assign rdx to v104:11
assign 2 to v104:11
assign rcx to v111:2
assign 1 to v111:2
assign r9 to v110:10
assign 9 to v110:10
assign r8 to v107:12
assign 8 to v107:12
assign r11 to v178:135
assign 11 to v178:135
assign rsi to v108:14
assign 6 to v108:14
assign r14 to v109:14
assign 14 to v109:14
assign r15 to v39:78
assign 15 to v39:78
assign rdi to v105:1
assign 7 to v105:1
assign r8 to v184:130
assign 8 to v184:130
assign r9 to v185:60
assign 9 to v185:60
blocking v80 pick register r8
blocking v90 pick register r8
blocking v39 pick register r8
assign r8 to v97:2
assign 8 to v97:2
assign r8 to v100:0
assign 8 to v100:0
assign rsi to v101:1
assign 6 to v101:1
assign r8 to v100:2
assign 8 to v100:2
assign r9 to v52:4
assign 9 to v52:4
assign rsi to v3:106
assign 6 to v3:106
assign rbx to v39:80
assign 3 to v39:80
assign r11 to v80:143
assign 11 to v80:143
assign rsi to v3:105
assign 6 to v3:105
assign rdi to v94:0
assign 7 to v94:0
assign r12 to v98:0
assign 12 to v98:0
assign r12 to v96:0
assign 12 to v96:0
assign r14 to v95:1
assign 14 to v95:1
v56:1 not intersect with v64:0, removed
v56:2 intersect with v64:0, adding
assign r8 to v56:1
assign 8 to v56:1
assign r12 to v57:1
assign 12 to v57:1
assign r14 to v3:107
assign 14 to v3:107
blocking v3 pick register r8
blocking v56 pick register r8
assign rsi to v3:109
assign 6 to v3:109
assign r8 to v63:0
assign 8 to v63:0
assign r9 to v67:29
assign 9 to v67:29
assign r12 to v92:1
assign 12 to v92:1
assign r12 to v91:0
assign 12 to v91:0
assign rax to v72:0
assign 0 to v72:0
assign rdx to v71:0
assign 2 to v71:0
assign rcx to v70:0
assign 1 to v70:0
assign r12 to v83:0
assign 12 to v83:0
assign r11 to v80:142
assign 11 to v80:142
assign r14 to v84:0
assign 14 to v84:0
assign r15 to v89:0
assign 15 to v89:0
assign rbx to v90:78
assign 3 to v90:78
assign r14 to v88:1
assign 14 to v88:1
assign r14 to v71:1
assign 14 to v71:1
blocking v72 pick register rax
blocking v70 pick register rcx
blocking v3 pick register rsi
blocking v63 pick register r8
blocking v67 pick register r9
blocking v80 pick register r11
blocking v71 pick register r8
assign rax to v87:0
assign 0 to v87:0
assign r14 to v85:0
assign 14 to v85:0
assign r11 to v80:147
assign 11 to v80:147
assign r12 to v83:2
assign 12 to v83:2
assign rcx to v70:3
assign 1 to v70:3
assign rdx to v71:4
assign 2 to v71:4
assign rax to v72:3
assign 0 to v72:3
assign r9 to v67:32
assign 9 to v67:32
assign r8 to v63:3
assign 8 to v63:3
assign rsi to v3:113
assign 6 to v3:113
assign r14 to v79:0
assign 14 to v79:0
assign r12 to v82:0
assign 12 to v82:0
assign r15 to v81:0
assign 15 to v81:0
assign r12 to v78:0
assign 12 to v78:0
assign r11 to v80:146
assign 11 to v80:146
assign r14 to v77:0
assign 14 to v77:0
assign r12 to v76:0
assign 12 to v76:0
assign r14 to v64:0
assign 14 to v64:0
assign r12 to v74:0
assign 12 to v74:0
assign r15 to v75:1
assign 15 to v75:1
assign rax to v72:2
assign 0 to v72:2
assign r11 to v71:3
assign 11 to v71:3
assign rcx to v70:2
assign 1 to v70:2
assign r11 to v56:3
assign 11 to v56:3
assign r12 to v62:1
assign 12 to v62:1
assign r8 to v63:2
assign 8 to v63:2
assign r9 to v67:31
assign 9 to v67:31
assign r12 to v68:0
assign 12 to v68:0
assign r15 to v69:0
assign 15 to v69:0
assign r9 to v65:0
assign 9 to v65:0
assign r12 to v66:0
assign 12 to v66:0
v62:1 not intersect with v61:0, removed
v62:2 intersect with v61:0, adding
assign r9 to v62:2
assign 9 to v62:2
assign r8 to v61:0
assign 8 to v61:0
assign r11 to v56:6
assign 11 to v56:6
assign rsi to v3:112
assign 6 to v3:112
assign rdi to v55:0
assign 7 to v55:0
assign r8 to v60:0
assign 8 to v60:0
assign r8 to v59:0
assign 8 to v59:0
assign r9 to v58:1
assign 9 to v58:1
assign r8 to v3:110
assign 8 to v3:110
blocking v3 pick register r8
assign rsi to v3:115
assign 6 to v3:115
assign r8 to v52:3
assign 8 to v52:3
assign r9 to v39:79
assign 9 to v39:79
assign r12 to v48:0
assign 12 to v48:0
assign rax to v51:0
assign 0 to v51:0
assign rax to v50:0
assign 0 to v50:0
assign rax to v49:0
assign 0 to v49:0
v22:1 not intersect with v17:0, removed
assign r11 to v22:1
assign 11 to v22:1
assign rax to v42:1
assign 0 to v42:1
assign r12 to v46:0
assign 12 to v46:0
assign rdx to v43:0
assign 2 to v43:0
assign r12 to v45:1
assign 12 to v45:1
assign r12 to v3:116
assign 12 to v3:116
assign r14 to v42:2
assign 14 to v42:2
blocking v3 pick register r8
blocking v22 pick register r11
blocking v42 pick register r8
blocking v39 pick register r8
assign rax to v26:0
assign 0 to v26:0
assign r8 to v41:0
assign 8 to v41:0
assign r9 to v42:4
assign 9 to v42:4
assign r9 to v39:83
assign 9 to v39:83
assign r9 to v39:86
assign 9 to v39:86
assign r8 to v40:0
assign 8 to v40:0
assign r8 to v33:0
assign 8 to v33:0
assign r12 to v31:0
assign 12 to v31:0
assign rsi to v37:1
assign 6 to v37:1
assign r11 to v26:1
assign 11 to v26:1
blocking v31 pick register r12
assign r12 to v31:3
assign 12 to v31:3
assign r8 to v33:2
assign 8 to v33:2
assign rax to v26:3
assign 0 to v26:3
assign r9 to v39:88
assign 9 to v39:88
assign r12 to v31:2
assign 12 to v31:2
assign r11 to v30:0
assign 11 to v30:0
assign r14 to v27:0
assign 14 to v27:0
assign rsi to v28:1
assign 6 to v28:1
assign r11 to v26:4
assign 11 to v26:4
assign r14 to v27:2
assign 14 to v27:2
assign r12 to v31:5
assign 12 to v31:5
assign r9 to v39:90
assign 9 to v39:90
assign rax to v26:6
assign 0 to v26:6
assign r8 to v33:4
assign 8 to v33:4
assign r11 to v22:3
assign 11 to v22:3
assign r8 to v17:0
assign 8 to v17:0
assign rsi to v21:1
assign 6 to v21:1
assign r8 to v17:2
assign 8 to v17:2
assign r9 to v39:92
assign 9 to v39:92
assign rsi to v3:119
assign 6 to v3:119
assign rsi to v3:118
assign 6 to v3:118
assign rdx to v14:0
assign 2 to v14:0
assign rax to v15:1
assign 0 to v15:1
assign r8 to v3:120
assign 8 to v3:120
assign rax to v8:0
assign 0 to v8:0
assign r8 to v13:0
assign 8 to v13:0
assign r8 to v12:0
assign 8 to v12:0
assign rax to v6:1
assign 0 to v6:1
assign rsi to v2:4
assign 6 to v2:4
assign r12 to v3:122
assign 12 to v3:122
assign rdx to v4:13
assign 2 to v4:13
spill count : 864
add v1479->v3
add v1496->v1492
add v1493->v1495
add v1491->v1490
add v1489->v1490
add v178->v1480
add v185->v1480
add v1488->v1480
add v471->v1479
add v1487->v1479
add v471->v1479
add v1480->v1479
add v1480->v1479
add v1375->v3
add v67->v1375
add v1478->v1375
add v1475->v1375
add v67->v1375
add v1474->v1375
add v1471->v1375
add v1468->v1375
add v67->v1375
add v1466->v1375
add v1463->v1375
add v1461->v1375
add v67->v1375
add v1459->v1375
add v1456->v1375
add v1454->v1375
add v67->v1375
add v1452->v1375
add v1451->v1375
add v1450->v1449
add v1446->v1441
add v1442->v1444
add v1439->v1438
add v1436->v1438
add v1434->v1425
add v1433->v1425
add v1431->v1425
add v1431->v1425
add v1428->v1375
add v1425->v1375
add v1424->v1375
add v1422->v1424
add v67->v1375
add v1420->v1375
add v1416->v1375
add v1417->v1375
add v1415->v1375
add v1413->v1415
add v67->v1375
add v1411->v1375
add v1407->v1375
add v1408->v1375
add v1406->v1375
add v1404->v1406
add v67->v1375
add v1402->v1375
add v1401->v1375
add v1384->v1401
add v1383->v1401
add v1382->v1401
add v1394->v1401
add v1400->v1395
add v1396->v1398
add v1392->v1391
add v1389->v1391
add v1387->v1376
add v1386->v1376
add v1384->v1376
add v1383->v1376
add v1382->v1376
add v1381->v1376
add v1381->v1376
add v1374->v1376
add v67->v1375
add v1376->v1375
add v1373->v1375
add v1374->v1373
add v1372->v1367
add v1368->v1370
add v1363->v1366
add v1365->v1366
add v178->v1352
add v185->v1352
add v1364->v1352
add v1360->v1363
add v1362->v1363
add v178->v1351
add v185->v1351
add v1361->v1351
add v1357->v1360
add v1359->v1360
add v178->v1350
add v185->v1350
add v1358->v1350
add v1354->v1357
add v1356->v1357
add v178->v1349
add v185->v1349
add v1355->v1349
add v1348->v1354
add v1353->v1354
add v388->v1346
add v1352->v1346
add v1351->v1346
add v1350->v1346
add v1349->v1346
add v1342->v1348
add v1347->v1348
add v184->v1343
add v185->v1343
add v1346->v1343
add v1343->v3
add v1339->v1342
add v1341->v1342
add v178->v1328
add v185->v1328
add v1340->v1328
add v1336->v1339
add v1338->v1339
add v178->v1327
add v185->v1327
add v1337->v1327
add v1333->v1336
add v1335->v1336
add v178->v1326
add v185->v1326
add v1334->v1326
add v1330->v1333
add v1332->v1333
add v178->v1325
add v185->v1325
add v1331->v1325
add v1324->v1330
add v1329->v1330
add v388->v1322
add v1328->v1322
add v1327->v1322
add v1326->v1322
add v1325->v1322
add v1318->v1324
add v1323->v1324
add v184->v1319
add v185->v1319
add v1322->v1319
add v1319->v3
add v1315->v1318
add v1317->v1318
add v178->v1304
add v185->v1304
add v1316->v1304
add v1312->v1315
add v1314->v1315
add v178->v1303
add v185->v1303
add v1313->v1303
add v1309->v1312
add v1311->v1312
add v178->v1302
add v185->v1302
add v1310->v1302
add v1306->v1309
add v1308->v1309
add v178->v1301
add v185->v1301
add v1307->v1301
add v1300->v1306
add v1305->v1306
add v388->v1298
add v1304->v1298
add v1303->v1298
add v1302->v1298
add v1301->v1298
add v1290->v1300
add v1299->v1300
add v184->v1295
add v185->v1295
add v1298->v1295
add v1295->v3
add v4->v3
add v5->v3
add v1291->v1290
add v1289->v1290
add v1288->v1285
add v1286->v1285
add v178->v4
add v184->v4
add v184->v4
add v1278->v4
add v1271->v4
add v1277->v4
add v1275->v1271
add v1276->v1266
add v1270->v1267
add v1248->v1263
add v1256->v4
add v1262->v4
add v1260->v1256
add v1261->v1251
add v1255->v1252
add v1248->v1247
add v1216->v3
add v1246->v3
add v184->v1216
add v530->v1216
add v1238->v1216
add v1245->v1216
add v1244->v1238
add v1243->v1233
add v1237->v1234
add v1213->v1230
add v1222->v1216
add v1229->v1216
add v1228->v1222
add v1227->v1217
add v1221->v1218
add v1213->v1212
add v1182->v3
add v1211->v3
add v184->v1182
add v530->v1182
add v1204->v1182
add v1210->v1182
add v1209->v1204
add v1208->v1199
add v1203->v1200
add v1179->v1196
add v1188->v1182
add v1195->v1182
add v1194->v1188
add v1193->v1183
add v1187->v1184
add v1179->v1178
add v1148->v3
add v1177->v3
add v184->v1148
add v530->v1148
add v1170->v1148
add v1176->v1148
add v1175->v1170
add v1174->v1165
add v1169->v1166
add v1145->v1162
add v1154->v1148
add v1161->v1148
add v1160->v1154
add v1159->v1149
add v1153->v1150
add v1145->v1144
add v1114->v3
add v1143->v3
add v184->v1114
add v530->v1114
add v1136->v1114
add v1142->v1114
add v1141->v1136
add v1140->v1131
add v1135->v1132
add v1111->v1128
add v1120->v1114
add v1127->v1114
add v1126->v1120
add v1125->v1115
add v1119->v1116
add v1111->v1110
add v1080->v3
add v1109->v3
add v184->v1080
add v530->v1080
add v1102->v1080
add v1108->v1080
add v1107->v1102
add v1106->v1097
add v1101->v1098
add v1077->v1094
add v1086->v1080
add v1093->v1080
add v1092->v1086
add v1091->v1081
add v1085->v1082
add v1077->v1076
add v1046->v3
add v1075->v3
add v184->v1046
add v530->v1046
add v1068->v1046
add v1074->v1046
add v1073->v1068
add v1072->v1063
add v1067->v1064
add v1043->v1060
add v1052->v1046
add v1059->v1046
add v1058->v1052
add v1057->v1047
add v1051->v1048
add v1043->v1042
add v1011->v3
add v1040->v3
add v184->v1011
add v530->v1011
add v1033->v1011
add v1039->v1011
add v1038->v1033
add v1037->v1028
add v1032->v1029
add v1008->v1025
add v1017->v1011
add v1024->v1011
add v1023->v1017
add v1022->v1012
add v1016->v1013
add v1008->v1007
add v974->v3
add v1003->v3
add v184->v974
add v530->v974
add v996->v974
add v1002->v974
add v1001->v996
add v1000->v991
add v995->v992
add v971->v988
add v980->v974
add v987->v974
add v986->v980
add v985->v975
add v979->v976
add v971->v970
add v891->v3
add v969->v964
add v965->v967
add v960->v963
add v962->v963
add v178->v943
add v185->v943
add v961->v943
add v957->v960
add v959->v960
add v178->v942
add v185->v942
add v958->v942
add v954->v957
add v956->v957
add v178->v941
add v185->v941
add v955->v941
add v951->v954
add v953->v954
add v178->v940
add v185->v940
add v952->v940
add v948->v951
add v950->v951
add v178->v939
add v185->v939
add v949->v939
add v945->v948
add v947->v948
add v178->v938
add v185->v938
add v946->v938
add v937->v945
add v944->v945
add v388->v935
add v943->v935
add v942->v935
add v941->v935
add v940->v935
add v939->v935
add v938->v935
add v927->v937
add v936->v937
add v184->v911
add v185->v911
add v935->v911
add v530->v891
add v184->v891
add v934->v891
add v933->v932
add v928->v927
add v925->v927
add v923->v914
add v922->v914
add v920->v914
add v920->v914
add v911->v914
add v917->v891
add v914->v891
add v910->v891
add v911->v910
add v909->v905
add v906->v908
add v901->v904
add v903->v904
add v388->v899
add v812->v899
add v812->v899
add v812->v899
add v812->v899
add v902->v901
add v900->v901
add v184->v888
add v185->v888
add v899->v888
add v530->v891
add v898->v891
add v892->v891
add v895->v891
add v888->v892
add v887->v891
add v888->v887
add v885->v812
add v581->v3
add v883->v581
add v575->v581
add v879->v575
add v184->v879
add v881->v879
add v603->v575
add v623->v3
add v878->v879
adding pairs 2, v606:0x7fffb42211a0, v878:0x7fffb40b8c50
add v178->v877
add v874->v877
add v876->v877
add v871->v874
add v869->v581
add v872->v581
adding pairs 2, v873:0x7fffb40b91f0, v869:0x7fffb40b90b0
add v854->v3
add v866->v854
add v864->v854
add v863->v864
add v184->v863
add v860->v863
add v862->v863
adding pairs 2, v606:0x7fffb418c840, v860:0x7fffb40b9760
add v178->v859
add v856->v859
add v858->v859
add v852->v856
add v850->v854
add v853->v854
adding pairs 2, v855:0x7fffb40b9da0, v850:0x7fffb40b9c60
add v834->v3
add v847->v834
add v845->v834
add v844->v845
add v184->v844
add v840->v844
add v843->v844
adding pairs 2, v606:0x7fffb418d790, v840:0x7fffb40ba310
add v178->v839
add v836->v839
add v838->v839
add v832->v836
add v830->v834
add v833->v834
adding pairs 2, v835:0x7fffb40ba950, v830:0x7fffb40ba810
add v827->v623
add v826->v623
add v627->v623
add v824->v819
add v820->v822
add v816->v818
add v817->v818
add v388->v795
add v812->v795
add v812->v795
add v812->v795
add v812->v795
add v814->v816
add v815->v816
add v178->v664
add v185->v664
add v795->v664
add v810->v814
add v813->v814
add v388->v780
add v812->v780
add v812->v780
add v812->v780
add v812->v780
add v811->v810
add v809->v810
add v178->v665
add v185->v665
add v780->v665
add v178->v624
add v806->v624
add v808->v624
add v802->v806
add v178->v625
add v789->v625
add v805->v625
add v803->v789
add v797->v795
add v178->v626
add v792->v626
add v794->v626
add v787->v792
add v791->v625
add v788->v789
add v782->v780
add v775->v624
add v777->v624
adding pairs 2, v710:0x7fffb4043088, v775:0x7fffb40bc970
add v772->v625
add v774->v625
adding pairs 2, v710:0x7fffb4043088, v772:0x7fffb40bcbf0
add v758->v664
add v765->v664
add v766->v758
add v764->v753
add v757->v754
add v713->v710
add v752->v664
adding pairs 2, v710:0x7fffb42b2f60, v747:0x7fffb4042e58
add v744->v626
add v746->v626
adding pairs 2, v710:0x7fffb42b2f60, v744:0x7fffb40bda20
add v741->v625
add v743->v625
adding pairs 2, v710:0x7fffb42b2f60, v741:0x7fffb40bdca0
add v727->v665
add v734->v665
add v735->v727
add v733->v722
add v726->v723
add v721->v665
adding pairs 2, v710:0x7fffb42b6778, v715:0x7fffb4042c28
add v663->v627
add v711->v663
add v709->v663
add v666->v663
add v707->v703
add v704->v706
add v699->v702
add v701->v702
add v190->v621
add v189->v621
add v189->v621
add v189->v621
add v189->v621
add v700->v699
add v698->v699
add v39->v600
add v185->v600
add v621->v600
add v661->v664
add v697->v664
add v692->v661
add v660->v665
add v696->v665
add v693->v660
add v694->v661
add v695->v660
add v683->v621
add v679->v660
add v680->v661
add v671->v621
add v670->v660
add v658->v661
add v659->v660
add v648->v621
add v641->v650
add v642->v621
add v649->v621
add v640->v641
add v638->v621
adding pairs 3, v631:0x7fffb40429f8, v621:0x7fffb42c5a38
adding pairs 3, v631:0x7fffb40429f8, v621:0x7fffb42c5a38
add v628->v631
add v430->v621
add v184->v603
add v612->v603
add v619->v603
add v620->v612
add v618->v607
add v611->v608
add v596->v606
add v605->v603
add v594->v589
add v590->v592
add v569->v588
add v587->v588
add v184->v576
add v185->v576
add v586->v576
add v530->v581
add v585->v581
add v582->v581
add v576->v575
add v576->v575
add v524->v3
add v570->v569
add v568->v569
add v567->v564
add v565->v564
add v530->v524
add v562->v524
add v561->v524
add v544->v561
add v543->v561
add v542->v561
add v554->v561
add v560->v555
add v556->v558
add v552->v551
add v549->v551
add v547->v535
add v546->v535
add v544->v535
add v543->v535
add v542->v535
add v541->v535
add v541->v535
add v532->v535
add v538->v524
add v535->v524
add v531->v524
add v532->v531
add v529->v524
add v527->v524
add v526->v527
add v509->v3
add v525->v509
add v523->v509
add v510->v509
add v522->v518
add v519->v521
add v514->v517
add v516->v517
add v388->v512
add v515->v514
add v513->v514
add v178->v511
add v185->v511
add v512->v511
add v498->v3
add v504->v498
add v502->v498
add v501->v502
add v478->v3
add v499->v478
add v497->v478
add v479->v478
add v495->v490
add v491->v493
add v486->v489
add v488->v489
add v388->v484
add v487->v486
add v485->v486
add v178->v481
add v185->v481
add v484->v481
add v410->v3
add v411->v3
add v465->v3
add v471->v465
add v470->v465
add v178->v470
add v467->v470
add v469->v470
add v412->v467
add v413->v467
add v414->v467
add v466->v410
add v464->v410
add v415->v410
add v462->v457
add v458->v460
add v453->v456
add v455->v456
add v178->v451
add v185->v451
add v454->v451
add v450->v453
add v452->v453
add v388->v422
add v451->v422
add v448->v450
add v449->v450
add v184->v418
add v185->v418
add v422->v418
add v446->v448
add v447->v448
add v190->v442
add v430->v442
add v53->v442
add v53->v442
add v53->v442
add v440->v446
add v445->v446
add v39->v441
add v185->v441
add v442->v441
add v443->v442
add v441->v422
add v438->v440
add v439->v440
add v190->v434
add v53->v434
add v430->v434
add v53->v434
add v53->v434
add v432->v438
add v437->v438
add v39->v433
add v185->v433
add v434->v433
add v435->v434
add v433->v422
add v428->v432
add v431->v432
add v190->v424
add v53->v424
add v53->v424
add v430->v424
add v53->v424
add v429->v428
add v427->v428
add v39->v423
add v185->v423
add v424->v423
add v425->v424
add v423->v422
add v416->v415
add v421->v416
add v420->v416
add v215->v3
add v214->v3
add v216->v3
add v407->v214
add v406->v214
add v217->v214
add v404->v399
add v400->v402
add v396->v398
add v397->v398
add v39->v387
add v185->v387
add v185->v387
add v394->v396
add v395->v396
add v39->v386
add v185->v386
add v185->v386
add v392->v394
add v393->v394
add v39->v385
add v185->v385
add v185->v385
add v390->v392
add v391->v392
add v39->v384
add v185->v384
add v185->v384
add v382->v390
add v389->v390
add v388->v380
add v387->v380
add v386->v380
add v385->v380
add v384->v380
add v383->v382
add v381->v382
add v184->v210
add v185->v210
add v380->v210
add v377->v210
add v379->v210
adding pairs 2, v220:0x7fffb4041df0, v377:0x7fffb40c96d8
add v184->v215
add v349->v215
add v376->v215
adding pairs 2, v220:0x7fffb4041df0, v349:0x7fffb40c9958
add v178->v372
add v39->v372
add v356->v372
add v371->v372
add v320->v356
add v184->v216
add v341->v216
add v370->v216
add v367->v341
add v178->v367
add v39->v367
add v364->v367
add v366->v367
add v319->v364
add v322->v356
add v361->v341
add v178->v361
add v39->v361
add v358->v361
add v360->v361
add v321->v358
add v318->v356
add v353->v341
add v178->v353
add v39->v353
add v350->v353
add v352->v353
add v317->v350
adding pairs 2, v220:0x7fffb42ecf60, v349:0x7fffb42ece88
add v178->v346
add v39->v346
add v343->v346
add v345->v346
add v314->v343
add v338->v341
add v178->v338
add v39->v338
add v335->v338
add v337->v338
add v313->v335
add v178->v323
add v39->v323
add v325->v323
add v332->v323
add v330->v325
add v331->v324
add v308->v306
add v301->v210
add v303->v210
adding pairs 2, v220:0x7fffb42fb130, v301:0x7fffb40cc3a0
add v272->v215
add v300->v215
adding pairs 2, v220:0x7fffb42fb130, v272:0x7fffb40cc620
add v178->v296
add v39->v296
add v280->v296
add v295->v296
add v239->v280
add v264->v216
add v294->v216
add v291->v264
add v178->v291
add v39->v291
add v288->v291
add v290->v291
adding pairs 3, v245:0x7fffb4301a38, v288:0x7fffb40ccff0
add v241->v280
add v285->v264
add v178->v285
add v39->v285
add v282->v285
add v284->v285
adding pairs 3, v245:0x7fffb430cea0, v282:0x7fffb40cd4d8
add v237->v280
add v277->v264
add v178->v277
add v39->v277
add v274->v277
add v276->v277
adding pairs 3, v245:0x7fffb430e628, v274:0x7fffb40cd9c0
adding pairs 2, v220:0x7fffb4301890, v272:0x7fffb43016e0
add v178->v269
add v39->v269
add v266->v269
add v268->v269
add v233->v266
add v261->v264
add v178->v261
add v39->v261
add v258->v261
add v260->v261
adding pairs 3, v245:0x7fffb430fd08, v258:0x7fffb40ce250
add v178->v242
add v39->v242
add v247->v242
add v255->v242
add v254->v247
add v253->v246
add v222->v245
add v244->v242
adding pairs 3, v245:0x7fffb4313350, v224:0x7fffb40de320
add v218->v220
add v210->v3
add v207->v3
add v209->v207
add v203->v207
add v206->v207
adding pairs 2, v97:0x7fffb40de208, v203:0x7fffb40d76a8
add v107->v3
add v108->v3
add v201->v107
add v200->v107
add v110->v107
add v198->v193
add v194->v196
add v187->v192
add v191->v192
add v190->v156
add v189->v156
add v189->v156
add v189->v156
add v189->v156
add v188->v187
add v186->v187
add v39->v104
add v185->v104
add v156->v104
add v184->v108
add v181->v108
add v183->v108
add v180->v181
add v39->v180
add v171->v180
add v179->v180
add v168->v171
add v178->v109
add v39->v109
add v164->v109
add v173->v109
add v169->v171
add v167->v171
add v163->v171
add v158->v156
add v151->v108
add v153->v108
adding pairs 2, v133:0x7fffb40ddfd8, v151:0x7fffb40d93a8
add v39->v150
add v146->v150
add v149->v150
add v128->v146
add v144->v109
add v148->v109
add v127->v144
add v130->v146
add v129->v144
add v126->v146
add v125->v144
add v122->v146
add v121->v144
add v135->v104
add v142->v104
add v143->v135
add v141->v134
add v111->v133
add v132->v104
adding pairs 3, v133:0x7fffb4325710, v113:0x7fffb40ddec0
add v100->v97
add v94->v3
add v98->v94
add v96->v94
add v63->v3
add v67->v63
add v92->v63
add v91->v63
add v72->v91
add v71->v91
add v70->v91
add v83->v91
add v89->v84
add v85->v87
add v81->v79
add v77->v79
add v75->v64
add v74->v64
add v72->v64
add v71->v64
add v70->v64
add v56->v64
add v56->v64
add v62->v64
add v67->v63
add v64->v63
add v61->v63
add v62->v61
add v55->v3
add v60->v55
add v59->v55
add v48->v3
add v51->v48
add v50->v48
add v42->v48
add v46->v48
adding pairs 2, v22:0x7fffb421ede0, v46:0x7fffb40dc5b0
add v41->v26
add v40->v26
add v39->v26
add v31->v26
add v38->v31
adding pairs 3, v30:0x7fffb40dda60, v31:0x7fffb4335e38
add v27->v30
add v17->v22
add v14->v3
add v13->v8
add v10->v8
gap () () 
          [rsi|R|t] = ArchNop
gap (v3(-) = [rsi|R|t];) () 
          [stack:-1|t] = ArchNop
gap (v1(-) = [stack:-1|t];) () 
          [stack:-2|t] = ArchNop
gap (v2(-) = [stack:-2|t];) () 
          [rdi|R|t] = ArchNop
gap (v0(-) = [rdi|R|t];) () 
          [constant:327] = ArchNop
gap () () 
          [constant:35] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:2458] [immediate:2459]
gap () () 
          [constant:1500] = ArchNop
gap () () 
          [constant:1499] = ArchNop
gap () () 
          v1498(R) = ArchStackCheckOffset
gap () () 
          X64Push v1498(-)
gap () ([rbx|R|w64] = v1499(-); [rax|R|w64] = v35(-); [rsi|R|t] = v1500(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2457] #-1 #323 v0(S) v1(S) v2(S) v3(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:2456]
gap () () 
          ArchJmp [immediate:2455]
gap () () 
          [constant:982] = ArchNop
gap () () 
          [constant:80] = ArchNop
gap () () 
          [constant:90] = ArchNop
gap () () 
          v1479(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:2454]
gap () () 
          v1492(R) = X64Movq : MR v80(R)
gap () () 
          v1496(R) = X64Lea : MRI v1492(R) [immediate:2453]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v1496(R) [immediate:2451] [immediate:2452]
gap () () 
          ArchJmp [immediate:2450]
gap () ([rdx|R|w64] = v982(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:2449] #-1 [rdx|R|w64]
gap (v1495(-) = [rax|R|tp];) () 
          v1493(R) = X64Lea : MRI v1495(R) [immediate:2448]
gap () (v1490 = v1493(-);) 
          ArchJmp [immediate:2447]
gap () (v1490 = v1492(-);) 
          ArchJmp [immediate:2446]
gap () () 
          [constant:178] = ArchNop
gap () () 
          [constant:185] = ArchNop
gap () () 
          [constant:1122] = ArchNop
gap () () 
          [constant:20] = ArchNop
gap () () 
          [constant:471] = ArchNop
gap () () 
          v1491(R) = X64Lea : MRI v1490(R) [immediate:2445]
gap () () 
          X64Movq : MR v80(R) v1491(R)
gap () () 
          v1489(R) = X64Lea : MRI v1490(R) [immediate:2444]
gap () (v1480 = v1489(-);) 
          v1480(1) = ArchNop v1480
gap () () 
          X64MovqCompressTagged : MRI v1480(R) [immediate:2443] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1480(R) [immediate:2442] v185(R)
gap () () 
          [constant:1488] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1480(R) [immediate:2441] v1488(R)
gap () () 
          X64MovqCompressTagged : MRI v1480(R) [immediate:2439] [immediate:2440]
gap () () 
          X64Test32 && deoptimize if equal v1479 #1 #322 v0(S) v1(-) v2(-) v3(S) v1479(-) v1480(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v1479(R) [immediate:2436] v471(R) [immediate:2437] [immediate:2438]
gap () () 
          [constant:1487] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1479(R) [immediate:2435] v1487(R) #321 v0(S) v1(-) v2(-) v3(S) v1479(-) v1480(-)
gap () () 
          ArchStoreWithWriteBarrier : MRI v1479(R) [immediate:2434] v471(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v1479(R) [immediate:2433] v1480(R)
gap () () 
          ArchJmp [immediate:2432]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1479(R) [immediate:2431] v1480(R)
gap () () 
          ArchJmp [immediate:2430]
gap () () 
          [constant:67] = ArchNop
gap () () 
          v1375(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:2429]
gap () () 
          X64Test32 && deoptimize if equal v1375 #1 #320 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2428]
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2425] v67(R) [immediate:2426] [immediate:2427]
gap () () 
          [constant:1478] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2423] v1478(R) #319 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2424]
gap () () 
          [constant:1475] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2422] v1475(R)
gap () () 
          X64MovqCompressTagged : MRI v1375(R) [immediate:2420] [immediate:2421]
gap () () 
          ArchJmp [immediate:2419]
gap () () 
          X64MovqCompressTagged : MRI v1375(R) [immediate:2417] [immediate:2418]
gap () () 
          ArchJmp [immediate:2416]
gap () () 
          [constant:1469] = ArchNop
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2413] v67(R) [immediate:2414] [immediate:2415]
gap () () 
          [constant:1474] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2411] v1474(R) #318 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2412]
gap () () 
          [constant:1471] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2410] v1471(R)
gap () () 
          X64MovqCompressTagged : MRI v1375(R) [immediate:2408] [immediate:2409]
gap () () 
          ArchJmp [immediate:2407]
gap () () 
          [constant:1470] = ArchNop
gap () () 
          v1468(R) = X64MovqDecompressTaggedSigned : MRI v1375(R) [immediate:2406]
gap () ([rdx|R|ts] = v1468(-); [rax|R|w64] = v1469(-); [rsi|R|w64] = v1470(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2405] #-1 [rdx|R|ts] [rax|R|w64] [rsi|R|w64]
gap (v1467(-) = [rax|R|t];) () 
          X64Cmp32 : Root && deoptimize if not equal #168 v1467(R) #317 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2404]
gap () () 
          ArchJmp [immediate:2403]
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2400] v67(R) [immediate:2401] [immediate:2402]
gap () () 
          [constant:1466] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2398] v1466(R) #316 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2399]
gap () () 
          [constant:1463] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2397] v1463(R)
gap () () 
          X64MovqCompressTagged : MRI v1375(R) [immediate:2395] [immediate:2396]
gap () () 
          ArchJmp [immediate:2394]
gap () () 
          [constant:1462] = ArchNop
gap () () 
          v1461(R) = X64MovqDecompressTaggedSigned : MRI v1375(R) [immediate:2393]
gap () ([rdx|R|ts] = v1461(-); [rax|R|w64] = v327(-); [rsi|R|w64] = v1462(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2392] #-1 [rdx|R|ts] [rax|R|w64] [rsi|R|w64]
gap (v1460(-) = [rax|R|t];) () 
          X64Cmp32 : Root && deoptimize if not equal #168 v1460(R) #315 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2391]
gap () () 
          ArchJmp [immediate:2390]
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2387] v67(R) [immediate:2388] [immediate:2389]
gap () () 
          [constant:1456] = ArchNop
gap () () 
          [constant:1459] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2385] v1459(R) #314 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2386]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2384] v1456(R)
gap () () 
          X64MovqCompressTagged : MRI v1375(R) [immediate:2382] [immediate:2383]
gap () () 
          ArchJmp [immediate:2381]
gap () () 
          [constant:1455] = ArchNop
gap () () 
          v1454(R) = X64MovqDecompressTaggedSigned : MRI v1375(R) [immediate:2380]
gap () ([rdx|R|ts] = v1454(-); [rax|R|w64] = v327(-); [rsi|R|w64] = v1455(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2379] #-1 [rdx|R|ts] [rax|R|w64] [rsi|R|w64]
gap (v1453(-) = [rax|R|t];) () 
          X64Cmp32 : Root && deoptimize if not equal #168 v1453(R) #313 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2378]
gap () () 
          ArchJmp [immediate:2377]
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2374] v67(R) [immediate:2375] [immediate:2376]
gap () () 
          [constant:1445] = ArchNop
gap () () 
          [constant:1452] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2372] v1452(R) #312 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2373]
gap () () 
          v1451(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2371]
gap () () 
          X64Test32 && branch if equal v1451 #1 [immediate:2369] [immediate:2370]
gap () (v1449 = v327(-);) 
          ArchJmp [immediate:2368]
gap () (v1449 = v1451(-);) 
          ArchJmp [immediate:2367]
gap () () 
          [constant:1428] = ArchNop
gap () () 
          X64Test32 && branch if equal v1449 #1 [immediate:2365] [immediate:2366]
gap () () 
          v1450(R) = X64Movsd : MRI v1449(R) [immediate:2364]
gap () () 
          v1448(R) = SSEFloat64ToInt32 v1450
gap () (v1440 = v1448(-);) 
          ArchJmp [immediate:2363]
gap () (v1447(R) = v1449(-);) 
          v1447(1) = X64Sar32 v1447(R) #1
gap () (v1440 = v1447(-);) 
          ArchJmp [immediate:2362]
gap () () 
          v1441(R) = X64Movq : MR v80(R)
gap () () 
          v1446(R) = X64Lea : MRI v1441(R) [immediate:2361]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v1446(R) [immediate:2359] [immediate:2360]
gap () () 
          ArchJmp [immediate:2358]
gap () ([rdx|R|w64] = v1445(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:2357] #-1 [rdx|R|w64]
gap (v1444(-) = [rax|R|tp];) () 
          v1442(R) = X64Lea : MRI v1444(R) [immediate:2356]
gap () (v1438 = v1442(-);) 
          ArchJmp [immediate:2355]
gap () (v1438 = v1441(-);) 
          ArchJmp [immediate:2354]
gap () () 
          [constant:1431] = ArchNop
gap () () 
          [constant:1434] = ArchNop
gap () () 
          v1439(R) = X64Lea : MRI v1438(R) [immediate:2353]
gap () (v1437(R) = v1440(-);) 
          v1437(1) = X64Shl32 v1437(R) #10
gap () () 
          X64Movq : MR v80(R) v1439(R)
gap () () 
          v1436(R) = X64Lea : MRI v1438(R) [immediate:2352]
gap () (v1435(R) = v1437(-);) 
          v1435(1) = X64Or32 v1435(R) #3
gap () (v1425 = v1436(-);) 
          v1425(1) = ArchNop v1425
gap () () 
          v1433(R) = X64Lea32 : MR1 v1435(R) v1435(R)
gap () () 
          X64MovqCompressTagged : MRI v1425(R) [immediate:2351] v1434(R)
gap () () 
          X64MovqCompressTagged : MRI v1425(R) [immediate:2350] v1433(R)
gap () () 
          X64MovqCompressTagged : MRI v1425(R) [immediate:2349] v1431(R)
gap () () 
          X64MovqCompressTagged : MRI v1425(R) [immediate:2348] v1431(R)
gap () () 
          X64MovqCompressTagged : MRI v1425(R) [immediate:2346] [immediate:2347]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2345] v1428(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2344] v1425(R)
gap () () 
          ArchJmp [immediate:2343]
gap () () 
          [constant:1423] = ArchNop
gap () () 
          v1424(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2342]
gap () () 
          v1422(R) = X64MovqDecompressTaggedSigned : MRI v1424(R) [immediate:2341]
gap () ([rdx|R|ts] = v1422(-); [rax|R|w64] = v327(-); [rsi|R|w64] = v1423(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2340] #-1 [rdx|R|ts] [rax|R|w64] [rsi|R|w64]
gap (v1421(-) = [rax|R|t];) () 
          X64Cmp32 : Root && deoptimize if not equal #168 v1421(R) #311 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2339]
gap () () 
          ArchJmp [immediate:2338]
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2335] v67(R) [immediate:2336] [immediate:2337]
gap () () 
          [constant:1420] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2333] v1420(R) #310 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2334]
gap () () 
          v1416(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2332]
gap () () 
          [constant:1417] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2331] v1417(R)
gap () () 
          X64MovqCompressTagged : MRI v1416(R) [immediate:2329] [immediate:2330]
gap () () 
          ArchJmp [immediate:2328]
gap () () 
          [constant:1414] = ArchNop
gap () () 
          v1415(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2327]
gap () () 
          v1413(R) = X64MovqDecompressTaggedSigned : MRI v1415(R) [immediate:2326]
gap () ([rdx|R|ts] = v1413(-); [rax|R|w64] = v327(-); [rsi|R|w64] = v1414(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2325] #-1 [rdx|R|ts] [rax|R|w64] [rsi|R|w64]
gap (v1412(-) = [rax|R|t];) () 
          X64Cmp32 : Root && deoptimize if not equal #168 v1412(R) #309 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2324]
gap () () 
          ArchJmp [immediate:2323]
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2320] v67(R) [immediate:2321] [immediate:2322]
gap () () 
          [constant:1408] = ArchNop
gap () () 
          [constant:1411] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2318] v1411(R) #308 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2319]
gap () () 
          v1407(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2317]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2316] v1408(R)
gap () () 
          X64MovqCompressTagged : MRI v1407(R) [immediate:2314] [immediate:2315]
gap () () 
          ArchJmp [immediate:2313]
gap () () 
          [constant:1405] = ArchNop
gap () () 
          v1406(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2312]
gap () () 
          v1404(R) = X64MovqDecompressTaggedSigned : MRI v1406(R) [immediate:2311]
gap () ([rdx|R|ts] = v1404(-); [rax|R|w64] = v327(-); [rsi|R|w64] = v1405(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2310] #-1 [rdx|R|ts] [rax|R|w64] [rsi|R|w64]
gap (v1403(-) = [rax|R|t];) () 
          X64Cmp32 : Root && deoptimize if not equal #168 v1403(R) #307 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2309]
gap () () 
          ArchJmp [immediate:2308]
gap () () 
          [constant:1374] = ArchNop
gap () () 
          X64Cmp32 : MRI && branch if equal v1375(R) [immediate:2305] v67(R) [immediate:2306] [immediate:2307]
gap () () 
          [constant:1402] = ArchNop
gap () () 
          [constant:1399] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1375(R) [immediate:2303] v1402(R) #306 v0(S) v1(-) v2(-) v3(S) v1375(-) [immediate:2304]
gap () () 
          v1401(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2302]
gap () () 
          v1384(R) = X64Movl : MRI v1401(R) [immediate:2301]
gap () () 
          v1383(R) = X64Movl : MRI v1401(R) [immediate:2300]
gap () () 
          v1382(R) = X64Movl : MRI v1401(R) [immediate:2299]
gap () () 
          v1394(R) = X64MovqDecompressTaggedSigned : MRI v1401(R) [immediate:2298]
gap () () 
          v1395(R) = X64Movq : MR v80(R)
gap () () 
          v1400(R) = X64Lea : MRI v1395(R) [immediate:2297]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v1400(R) [immediate:2295] [immediate:2296]
gap () () 
          ArchJmp [immediate:2294]
gap () ([rdx|R|w64] = v1399(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:2293] #-1 [rdx|R|w64]
gap (v1398(-) = [rax|R|tp];) () 
          v1396(R) = X64Lea : MRI v1398(R) [immediate:2292]
gap () (v1391 = v1396(-);) 
          ArchJmp [immediate:2291]
gap () (v1391 = v1395(-);) 
          ArchJmp [immediate:2290]
gap () () 
          [constant:1381] = ArchNop
gap () () 
          [constant:1387] = ArchNop
gap () (v1393(R) = v1394(-);) 
          v1393(1) = X64Sar32 v1393(R) #1
gap () () 
          v1392(R) = X64Lea : MRI v1391(R) [immediate:2289]
gap () (v1390(R) = v1393(-);) 
          v1390(1) = X64And32 v1390(R) #1073740800
gap () () 
          X64Movq : MR v80(R) v1392(R)
gap () () 
          v1389(R) = X64Lea : MRI v1391(R) [immediate:2288]
gap () (v1388(R) = v1390(-);) 
          v1388(1) = X64Or32 v1388(R) #6
gap () (v1376 = v1389(-);) 
          v1376(1) = ArchNop v1376
gap () () 
          v1386(R) = X64Lea32 : MR1 v1388(R) v1388(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2287] v1387(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2286] v1386(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2285] v1384(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2284] v1383(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2283] v1382(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2282] v1381(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2281] v1381(R)
gap () () 
          X64MovqCompressTagged : MRI v1376(R) [immediate:2280] v1374(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2279] v67(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v1375(R) [immediate:2278] v1376(R)
gap () () 
          ArchJmp [immediate:2277]
gap () () 
          v1373(R) = X64MovqDecompressTaggedPointer : MRI v1375(R) [immediate:2276]
gap () () 
          X64MovqCompressTagged : MRI v1373(R) [immediate:2275] v1374(R)
gap () () 
          ArchJmp [immediate:2274]
gap () () 
          v1367(R) = X64Movq : MR v80(R)
gap () () 
          [constant:1371] = ArchNop
gap () () 
          v1372(R) = X64Lea : MRI v1367(R) [immediate:2273]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v1372(R) [immediate:2271] [immediate:2272]
gap () () 
          ArchJmp [immediate:2270]
gap () ([rdx|R|w64] = v1371(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:2269] #-1 [rdx|R|w64]
gap (v1370(-) = [rax|R|tp];) () 
          v1368(R) = X64Lea : MRI v1370(R) [immediate:2268]
gap () (v1366 = v1368(-);) 
          ArchJmp [immediate:2267]
gap () (v1366 = v1367(-);) 
          ArchJmp [immediate:2266]
gap () () 
          [constant:388] = ArchNop
gap () () 
          [constant:184] = ArchNop
gap () () 
          v1363(R) = X64Lea : MRI v1366(R) [immediate:2265]
gap () () 
          X64Movq : MR v80(R) v1363(R)
gap () () 
          v1365(R) = X64Lea : MRI v1366(R) [immediate:2264]
gap () (v1352 = v1365(-);) 
          v1352(1) = ArchNop v1352
gap () () 
          X64MovqCompressTagged : MRI v1352(R) [immediate:2263] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1352(R) [immediate:2262] v185(R)
gap () () 
          [constant:1364] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1352(R) [immediate:2261] v1364(R)
gap () () 
          X64MovqCompressTagged : MRI v1352(R) [immediate:2259] [immediate:2260]
gap () () 
          v1360(R) = X64Lea : MRI v1363(R) [immediate:2258]
gap () () 
          X64Movq : MR v80(R) v1360(R)
gap () () 
          v1362(R) = X64Lea : MRI v1363(R) [immediate:2257]
gap () (v1351 = v1362(-);) 
          v1351(1) = ArchNop v1351
gap () () 
          X64MovqCompressTagged : MRI v1351(R) [immediate:2256] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1351(R) [immediate:2255] v185(R)
gap () () 
          [constant:1361] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1351(R) [immediate:2254] v1361(R)
gap () () 
          X64MovqCompressTagged : MRI v1351(R) [immediate:2252] [immediate:2253]
gap () () 
          v1357(R) = X64Lea : MRI v1360(R) [immediate:2251]
gap () () 
          X64Movq : MR v80(R) v1357(R)
gap () () 
          v1359(R) = X64Lea : MRI v1360(R) [immediate:2250]
gap () (v1350 = v1359(-);) 
          v1350(1) = ArchNop v1350
gap () () 
          X64MovqCompressTagged : MRI v1350(R) [immediate:2249] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1350(R) [immediate:2248] v185(R)
gap () () 
          [constant:1358] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1350(R) [immediate:2247] v1358(R)
gap () () 
          X64MovqCompressTagged : MRI v1350(R) [immediate:2245] [immediate:2246]
gap () () 
          v1354(R) = X64Lea : MRI v1357(R) [immediate:2244]
gap () () 
          X64Movq : MR v80(R) v1354(R)
gap () () 
          v1356(R) = X64Lea : MRI v1357(R) [immediate:2243]
gap () (v1349 = v1356(-);) 
          v1349(1) = ArchNop v1349
gap () () 
          X64MovqCompressTagged : MRI v1349(R) [immediate:2242] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1349(R) [immediate:2241] v185(R)
gap () () 
          [constant:1355] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1349(R) [immediate:2240] v1355(R)
gap () () 
          X64MovqCompressTagged : MRI v1349(R) [immediate:2238] [immediate:2239]
gap () () 
          v1348(R) = X64Lea : MRI v1354(R) [immediate:2237]
gap () () 
          X64Movq : MR v80(R) v1348(R)
gap () () 
          v1353(R) = X64Lea : MRI v1354(R) [immediate:2236]
gap () (v1346 = v1353(-);) 
          v1346(1) = ArchNop v1346
gap () () 
          X64MovqCompressTagged : MRI v1346(R) [immediate:2235] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v1346(R) [immediate:2233] [immediate:2234]
gap () () 
          X64MovqCompressTagged : MRI v1346(R) [immediate:2232] v1352(R)
gap () () 
          X64MovqCompressTagged : MRI v1346(R) [immediate:2231] v1351(R)
gap () () 
          X64MovqCompressTagged : MRI v1346(R) [immediate:2230] v1350(R)
gap () () 
          X64MovqCompressTagged : MRI v1346(R) [immediate:2229] v1349(R)
gap () () 
          v1342(R) = X64Lea : MRI v1348(R) [immediate:2228]
gap () () 
          X64Movq : MR v80(R) v1342(R)
gap () () 
          v1347(R) = X64Lea : MRI v1348(R) [immediate:2227]
gap () (v1343 = v1347(-);) 
          v1343(1) = ArchNop v1343
gap () () 
          X64MovqCompressTagged : MRI v1343(R) [immediate:2226] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v1343(R) [immediate:2225] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v1343(R) [immediate:2224] v1346(R)
gap () () 
          X64MovqCompressTagged : MRI v1343(R) [immediate:2222] [immediate:2223]
gap () () 
          ArchStoreWithWriteBarrier : MRI v3(R) [immediate:2221] v1343(R)
gap () () 
          v1339(R) = X64Lea : MRI v1342(R) [immediate:2220]
gap () () 
          X64Movq : MR v80(R) v1339(R)
gap () () 
          v1341(R) = X64Lea : MRI v1342(R) [immediate:2219]
gap () (v1328 = v1341(-);) 
          v1328(1) = ArchNop v1328
gap () () 
          X64MovqCompressTagged : MRI v1328(R) [immediate:2218] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1328(R) [immediate:2217] v185(R)
gap () () 
          [constant:1340] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1328(R) [immediate:2216] v1340(R)
gap () () 
          X64MovqCompressTagged : MRI v1328(R) [immediate:2214] [immediate:2215]
gap () () 
          v1336(R) = X64Lea : MRI v1339(R) [immediate:2213]
gap () () 
          X64Movq : MR v80(R) v1336(R)
gap () () 
          v1338(R) = X64Lea : MRI v1339(R) [immediate:2212]
gap () (v1327 = v1338(-);) 
          v1327(1) = ArchNop v1327
gap () () 
          X64MovqCompressTagged : MRI v1327(R) [immediate:2211] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1327(R) [immediate:2210] v185(R)
gap () () 
          [constant:1337] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1327(R) [immediate:2209] v1337(R)
gap () () 
          X64MovqCompressTagged : MRI v1327(R) [immediate:2207] [immediate:2208]
gap () () 
          v1333(R) = X64Lea : MRI v1336(R) [immediate:2206]
gap () () 
          X64Movq : MR v80(R) v1333(R)
gap () () 
          v1335(R) = X64Lea : MRI v1336(R) [immediate:2205]
gap () (v1326 = v1335(-);) 
          v1326(1) = ArchNop v1326
gap () () 
          X64MovqCompressTagged : MRI v1326(R) [immediate:2204] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1326(R) [immediate:2203] v185(R)
gap () () 
          [constant:1334] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1326(R) [immediate:2202] v1334(R)
gap () () 
          X64MovqCompressTagged : MRI v1326(R) [immediate:2200] [immediate:2201]
gap () () 
          v1330(R) = X64Lea : MRI v1333(R) [immediate:2199]
gap () () 
          X64Movq : MR v80(R) v1330(R)
gap () () 
          v1332(R) = X64Lea : MRI v1333(R) [immediate:2198]
gap () (v1325 = v1332(-);) 
          v1325(1) = ArchNop v1325
gap () () 
          X64MovqCompressTagged : MRI v1325(R) [immediate:2197] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1325(R) [immediate:2196] v185(R)
gap () () 
          [constant:1331] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1325(R) [immediate:2195] v1331(R)
gap () () 
          X64MovqCompressTagged : MRI v1325(R) [immediate:2193] [immediate:2194]
gap () () 
          v1324(R) = X64Lea : MRI v1330(R) [immediate:2192]
gap () () 
          X64Movq : MR v80(R) v1324(R)
gap () () 
          v1329(R) = X64Lea : MRI v1330(R) [immediate:2191]
gap () (v1322 = v1329(-);) 
          v1322(1) = ArchNop v1322
gap () () 
          X64MovqCompressTagged : MRI v1322(R) [immediate:2190] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v1322(R) [immediate:2188] [immediate:2189]
gap () () 
          X64MovqCompressTagged : MRI v1322(R) [immediate:2187] v1328(R)
gap () () 
          X64MovqCompressTagged : MRI v1322(R) [immediate:2186] v1327(R)
gap () () 
          X64MovqCompressTagged : MRI v1322(R) [immediate:2185] v1326(R)
gap () () 
          X64MovqCompressTagged : MRI v1322(R) [immediate:2184] v1325(R)
gap () () 
          v1318(R) = X64Lea : MRI v1324(R) [immediate:2183]
gap () () 
          X64Movq : MR v80(R) v1318(R)
gap () () 
          v1323(R) = X64Lea : MRI v1324(R) [immediate:2182]
gap () (v1319 = v1323(-);) 
          v1319(1) = ArchNop v1319
gap () () 
          X64MovqCompressTagged : MRI v1319(R) [immediate:2181] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v1319(R) [immediate:2180] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v1319(R) [immediate:2179] v1322(R)
gap () () 
          X64MovqCompressTagged : MRI v1319(R) [immediate:2177] [immediate:2178]
gap () () 
          ArchStoreWithWriteBarrier : MRI v3(R) [immediate:2176] v1319(R)
gap () () 
          v1315(R) = X64Lea : MRI v1318(R) [immediate:2175]
gap () () 
          X64Movq : MR v80(R) v1315(R)
gap () () 
          v1317(R) = X64Lea : MRI v1318(R) [immediate:2174]
gap () (v1304 = v1317(-);) 
          v1304(1) = ArchNop v1304
gap () () 
          X64MovqCompressTagged : MRI v1304(R) [immediate:2173] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1304(R) [immediate:2172] v185(R)
gap () () 
          [constant:1316] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1304(R) [immediate:2171] v1316(R)
gap () () 
          X64MovqCompressTagged : MRI v1304(R) [immediate:2169] [immediate:2170]
gap () () 
          v1312(R) = X64Lea : MRI v1315(R) [immediate:2168]
gap () () 
          X64Movq : MR v80(R) v1312(R)
gap () () 
          v1314(R) = X64Lea : MRI v1315(R) [immediate:2167]
gap () (v1303 = v1314(-);) 
          v1303(1) = ArchNop v1303
gap () () 
          X64MovqCompressTagged : MRI v1303(R) [immediate:2166] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1303(R) [immediate:2165] v185(R)
gap () () 
          [constant:1313] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1303(R) [immediate:2164] v1313(R)
gap () () 
          X64MovqCompressTagged : MRI v1303(R) [immediate:2162] [immediate:2163]
gap () () 
          v1309(R) = X64Lea : MRI v1312(R) [immediate:2161]
gap () () 
          X64Movq : MR v80(R) v1309(R)
gap () () 
          v1311(R) = X64Lea : MRI v1312(R) [immediate:2160]
gap () (v1302 = v1311(-);) 
          v1302(1) = ArchNop v1302
gap () () 
          X64MovqCompressTagged : MRI v1302(R) [immediate:2159] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1302(R) [immediate:2158] v185(R)
gap () () 
          [constant:1310] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1302(R) [immediate:2157] v1310(R)
gap () () 
          X64MovqCompressTagged : MRI v1302(R) [immediate:2155] [immediate:2156]
gap () () 
          v1306(R) = X64Lea : MRI v1309(R) [immediate:2154]
gap () () 
          X64Movq : MR v80(R) v1306(R)
gap () () 
          v1308(R) = X64Lea : MRI v1309(R) [immediate:2153]
gap () (v1301 = v1308(-);) 
          v1301(1) = ArchNop v1301
gap () () 
          X64MovqCompressTagged : MRI v1301(R) [immediate:2152] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v1301(R) [immediate:2151] v185(R)
gap () () 
          [constant:1307] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v1301(R) [immediate:2150] v1307(R)
gap () () 
          X64MovqCompressTagged : MRI v1301(R) [immediate:2148] [immediate:2149]
gap () () 
          v1300(R) = X64Lea : MRI v1306(R) [immediate:2147]
gap () () 
          X64Movq : MR v80(R) v1300(R)
gap () () 
          v1305(R) = X64Lea : MRI v1306(R) [immediate:2146]
gap () (v1298 = v1305(-);) 
          v1298(1) = ArchNop v1298
gap () () 
          X64MovqCompressTagged : MRI v1298(R) [immediate:2145] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v1298(R) [immediate:2143] [immediate:2144]
gap () () 
          X64MovqCompressTagged : MRI v1298(R) [immediate:2142] v1304(R)
gap () () 
          X64MovqCompressTagged : MRI v1298(R) [immediate:2141] v1303(R)
gap () () 
          X64MovqCompressTagged : MRI v1298(R) [immediate:2140] v1302(R)
gap () () 
          X64MovqCompressTagged : MRI v1298(R) [immediate:2139] v1301(R)
gap () () 
          v1290(R) = X64Lea : MRI v1300(R) [immediate:2138]
gap () () 
          X64Movq : MR v80(R) v1290(R)
gap () () 
          v1299(R) = X64Lea : MRI v1300(R) [immediate:2137]
gap () (v1295 = v1299(-);) 
          v1295(1) = ArchNop v1295
gap () () 
          X64MovqCompressTagged : MRI v1295(R) [immediate:2136] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v1295(R) [immediate:2135] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v1295(R) [immediate:2134] v1298(R)
gap () () 
          X64MovqCompressTagged : MRI v1295(R) [immediate:2132] [immediate:2133]
gap () () 
          ArchStoreWithWriteBarrier : MRI v3(R) [immediate:2131] v1295(R)
gap () () 
          v4(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:2130]
gap () () 
          v5(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:2129]
gap () (v574(R) = v2(-);) 
          v574(1) = X64Sar32 v574(R) #1
gap () () 
          X64Test32 && deoptimize if not equal v2 #1 #305 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:2128] v5(-) v2(-)
gap () (v1294(R) = v20(-);) 
          v1294(1) = X64Sub32 && deoptimize if overflow v1294(R) v574 #304 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:2127] v5(-) v2(-)
gap () (v1287 = v1294(-);) 
          v1287(1) = ArchNop v1287
gap () () 
          X64Cmp32 && branch if equal v1287 #0 [immediate:2125] [immediate:2126]
gap () (v1293(R) = v1287(-);) 
          v1293(1) = X64Add32 && branch if overflow v1293(R) v1287(R) [immediate:2121] [immediate:2122] [immediate:2123] [immediate:2124]
gap () (v1292 = v1293(-);) 
          v1292(1) = ArchNop v1292
gap () (v1041 = v1292(-);) 
          ArchJmp [immediate:2120]
gap () () 
          [constant:1288] = ArchNop
gap () () 
          v1291(R) = X64Lea : MRI v1290(R) [immediate:2119]
gap () () 
          X64Movq : MR v80(R) v1291(R)
gap () () 
          v1289(R) = X64Lea : MRI v1290(R) [immediate:2118]
gap () (v1285 = v1289(-);) 
          v1285(1) = ArchNop v1285
gap () () 
          X64MovqCompressTagged : MRI v1285(R) [immediate:2117] v1288(R)
gap () () 
          v1286(R) = SSEInt32ToFloat64 v1287
gap () () 
          X64Movsd : MRI v1285(R) [immediate:2116] v1286(R)
gap () (v1041 = v1285(-);) 
          ArchJmp [immediate:2115]
gap () () 
          [constant:1283] = ArchNop
gap () () 
          [constant:1282] = ArchNop
gap () () 
          [constant:1281] = ArchNop
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v1282(-)
gap () ([rdi|R|t] = v5(-); [rdx|R|t] = v5(-); [rax|R|w64] = v1281(-); [rsi|R|t] = v1283(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2113] #-1 #303 v0(S) v1(S) v2(S) v3(S) v4(S) [immediate:2114] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v1248(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v4 #1 #302 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:2112] v1248(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v4(R) [immediate:2109] v178(R) [immediate:2110] [immediate:2111]
gap () () 
          ArchJmp [immediate:2108]
gap () () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:2107] v184(R)
gap () () 
          ArchJmp [immediate:2106]
gap () () 
          X64Cmp32 : MRI && branch if equal v4(R) [immediate:2103] v184(R) [immediate:2104] [immediate:2105]
gap () () 
          [constant:1278] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v4(R) [immediate:2101] v1278(R) #301 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:2102] v1248(-)
gap () () 
          v1271(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:2100]
gap () () 
          v1277(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:2099]
gap () () 
          v1275(R) = X64MovqDecompressTaggedSigned : MRI v1271(R) [immediate:2098]
gap () (v1266(R) = v1277(-);) 
          v1266(1) = X64Sar32 v1266(R) #1
gap () () 
          v1276(R) = X64Lea32 : MRI v1266(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v1276 #0 [immediate:2096] [immediate:2097]
gap () () 
          ArchDebugBreak
gap () () 
          ArchThrowTerminator
gap () (v1274(R) = v1275(-);) 
          v1274(1) = X64Sar32 v1274(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v1274 #0 [immediate:2094] [immediate:2095]
gap () () 
          [constant:1273] = ArchNop
gap () ([rax|R|t] = v4(-); [rbx|R|w64] = v327(-); [rsi|R|w64] = v1273(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2093] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1272(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1272 #1 #300 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:2092] v1248(-)
gap () (v1267 = v1272(-);) 
          ArchJmp [immediate:2091]
gap () (v1267 = v1271(-);) 
          ArchJmp [immediate:2090]
gap () () 
          v1270(R) = X64Movl : MRI v1267(R) [immediate:2089]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1270(R) [immediate:2087] [immediate:2088]
gap () () 
          [constant:1269] = ArchNop
gap () ([rax|R|t] = v4(-); [rsi|R|w64] = v1269(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2086] #-1 [rax|R|t] [rsi|R|w64]
gap (v1268(-) = [rax|R|t];) (v1263 = v1268(-);) 
          ArchJmp [immediate:2085]
gap () (v1263 = v1267(-);) 
          ArchJmp [immediate:2084]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1266 #0 [immediate:2082] [immediate:2083]
gap () () 
          X64MovqCompressTagged : MRI v4(R) [immediate:2080] [immediate:2081]
gap () () 
          ArchJmp [immediate:2079]
gap () () 
          ArchJmp [immediate:2078]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1263(R) [immediate:2077] v1248(R)
gap () () 
          ArchJmp [immediate:2076]
gap () () 
          v1256(R) = X64MovqDecompressTaggedPointer : MRI v4(R) [immediate:2075]
gap () () 
          v1262(R) = X64MovqDecompressTaggedSigned : MRI v4(R) [immediate:2074]
gap () () 
          v1260(R) = X64MovqDecompressTaggedSigned : MRI v1256(R) [immediate:2073]
gap () (v1251(R) = v1262(-);) 
          v1251(1) = X64Sar32 v1251(R) #1
gap () () 
          v1261(R) = X64Lea32 : MRI v1251(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v1261 #0 [immediate:2071] [immediate:2072]
gap () () 
          ArchDebugBreak
gap () () 
          ArchThrowTerminator
gap () (v1259(R) = v1260(-);) 
          v1259(1) = X64Sar32 v1259(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v1259 #0 [immediate:2069] [immediate:2070]
gap () () 
          [constant:1258] = ArchNop
gap () ([rax|R|t] = v4(-); [rbx|R|w64] = v327(-); [rsi|R|w64] = v1258(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2068] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1257(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1257 #1 #299 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:2067] v1248(-)
gap () (v1252 = v1257(-);) 
          ArchJmp [immediate:2066]
gap () (v1252 = v1256(-);) 
          ArchJmp [immediate:2065]
gap () () 
          v1255(R) = X64Movl : MRI v1252(R) [immediate:2064]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1255(R) [immediate:2062] [immediate:2063]
gap () () 
          [constant:1254] = ArchNop
gap () ([rax|R|t] = v4(-); [rsi|R|w64] = v1254(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2061] #-1 [rax|R|t] [rsi|R|w64]
gap (v1253(-) = [rax|R|t];) (v1247 = v1253(-);) 
          ArchJmp [immediate:2060]
gap () (v1247 = v1252(-);) 
          ArchJmp [immediate:2059]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1251 #0 [immediate:2057] [immediate:2058]
gap () () 
          X64MovqCompressTagged : MRI v4(R) [immediate:2055] [immediate:2056]
gap () () 
          ArchJmp [immediate:2054]
gap () () 
          ArchJmp [immediate:2053]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1247(R) [immediate:2052] v1248(R)
gap () () 
          ArchJmp [immediate:2051]
gap () () 
          [constant:1006] = ArchNop
gap () () 
          [constant:1005] = ArchNop
gap () () 
          [constant:1004] = ArchNop
gap () () 
          [constant:530] = ArchNop
gap () () 
          [constant:1054] = ArchNop
gap () () 
          [constant:1190] = ArchNop
gap () () 
          v1216(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:2050]
gap () () 
          v1246(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:2049]
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v1005(-)
gap () ([rdi|R|t] = v1246(-); [rdx|R|t] = v1246(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2047] #-1 #298 v0(S) v1(S) v2(S) v3(S) v1216(S) [immediate:2048] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v1213(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1216 #1 #297 v0(S) v1(-) v2(-) v3(S) v1216(-) [immediate:2046] v1213(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v1216(R) [immediate:2043] v184(R) [immediate:2044] [immediate:2045]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1216(R) [immediate:2041] v530(R) #296 v0(S) v1(-) v2(-) v3(S) v1216(-) [immediate:2042] v1213(-)
gap () () 
          v1238(R) = X64MovqDecompressTaggedPointer : MRI v1216(R) [immediate:2040]
gap () () 
          v1245(R) = X64MovqDecompressTaggedSigned : MRI v1216(R) [immediate:2039]
gap () (v1233(R) = v1245(-);) 
          v1233(1) = X64Sar32 v1233(R) #1
gap () () 
          v1244(R) = X64MovqDecompressTaggedSigned : MRI v1238(R) [immediate:2038]
gap () (v1242(R) = v1244(-);) 
          v1242(1) = X64Sar32 v1242(R) #1
gap () () 
          v1243(R) = X64Lea32 : MRI v1233(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1243 #1 #295 v0(S) v1(-) v2(-) v3(S) v1216(-) [immediate:2037] v1213(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1242 #1 [immediate:2035] [immediate:2036]
gap () () 
          [constant:1240] = ArchNop
gap () () 
          [constant:1241] = ArchNop
gap () ([rax|R|t] = v1216(-); [rbx|R|w64] = v1240(-); [rsi|R|w64] = v1241(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2034] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1239(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1239 #1 #294 v0(S) v1(-) v2(-) v3(S) v1216(-) [immediate:2033] v1213(-)
gap () (v1234 = v1239(-);) 
          ArchJmp [immediate:2032]
gap () (v1234 = v1238(-);) 
          ArchJmp [immediate:2031]
gap () () 
          v1237(R) = X64Movl : MRI v1234(R) [immediate:2030]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1237(R) [immediate:2028] [immediate:2029]
gap () () 
          [constant:1236] = ArchNop
gap () ([rax|R|t] = v1216(-); [rsi|R|w64] = v1236(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2027] #-1 [rax|R|t] [rsi|R|w64]
gap (v1235(-) = [rax|R|t];) (v1230 = v1235(-);) 
          ArchJmp [immediate:2026]
gap () (v1230 = v1234(-);) 
          ArchJmp [immediate:2025]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1233 #1 [immediate:2023] [immediate:2024]
gap () () 
          X64MovqCompressTagged : MRI v1216(R) [immediate:2021] [immediate:2022]
gap () () 
          ArchJmp [immediate:2020]
gap () () 
          ArchJmp [immediate:2019]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1230(R) [immediate:2018] v1213(R)
gap () () 
          ArchJmp [immediate:2017]
gap () () 
          v1222(R) = X64MovqDecompressTaggedPointer : MRI v1216(R) [immediate:2016]
gap () () 
          v1229(R) = X64MovqDecompressTaggedSigned : MRI v1216(R) [immediate:2015]
gap () (v1217(R) = v1229(-);) 
          v1217(1) = X64Sar32 v1217(R) #1
gap () () 
          v1228(R) = X64MovqDecompressTaggedSigned : MRI v1222(R) [immediate:2014]
gap () (v1226(R) = v1228(-);) 
          v1226(1) = X64Sar32 v1226(R) #1
gap () () 
          v1227(R) = X64Lea32 : MRI v1217(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1227 #1 #293 v0(S) v1(-) v2(-) v3(S) v1216(-) [immediate:2013] v1213(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1226 #1 [immediate:2011] [immediate:2012]
gap () () 
          [constant:1224] = ArchNop
gap () () 
          [constant:1225] = ArchNop
gap () ([rax|R|t] = v1216(-); [rbx|R|w64] = v1224(-); [rsi|R|w64] = v1225(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2010] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1223(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1223 #1 #292 v0(S) v1(-) v2(-) v3(S) v1216(-) [immediate:2009] v1213(-)
gap () (v1218 = v1223(-);) 
          ArchJmp [immediate:2008]
gap () (v1218 = v1222(-);) 
          ArchJmp [immediate:2007]
gap () () 
          v1221(R) = X64Movl : MRI v1218(R) [immediate:2006]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1221(R) [immediate:2004] [immediate:2005]
gap () () 
          [constant:1220] = ArchNop
gap () ([rax|R|t] = v1216(-); [rsi|R|w64] = v1220(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:2003] #-1 [rax|R|t] [rsi|R|w64]
gap (v1219(-) = [rax|R|t];) (v1212 = v1219(-);) 
          ArchJmp [immediate:2002]
gap () (v1212 = v1218(-);) 
          ArchJmp [immediate:2001]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1217 #1 [immediate:1999] [immediate:2000]
gap () () 
          X64MovqCompressTagged : MRI v1216(R) [immediate:1997] [immediate:1998]
gap () () 
          ArchJmp [immediate:1996]
gap () () 
          ArchJmp [immediate:1995]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1212(R) [immediate:1994] v1213(R)
gap () () 
          ArchJmp [immediate:1993]
gap () () 
          [constant:176] = ArchNop
gap () () 
          [constant:1156] = ArchNop
gap () () 
          v1182(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1992]
gap () () 
          v1211(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1991]
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1005(-)
gap () ([rdi|R|t] = v1211(-); [rdx|R|t] = v1211(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1989] #-1 #291 v0(S) v1(S) v2(S) v3(S) v1182(S) [immediate:1990] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v1179(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1182 #1 #290 v0(S) v1(-) v2(-) v3(S) v1182(-) [immediate:1988] v1179(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v1182(R) [immediate:1985] v184(R) [immediate:1986] [immediate:1987]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1182(R) [immediate:1983] v530(R) #289 v0(S) v1(-) v2(-) v3(S) v1182(-) [immediate:1984] v1179(-)
gap () () 
          v1204(R) = X64MovqDecompressTaggedPointer : MRI v1182(R) [immediate:1982]
gap () () 
          v1210(R) = X64MovqDecompressTaggedSigned : MRI v1182(R) [immediate:1981]
gap () (v1199(R) = v1210(-);) 
          v1199(1) = X64Sar32 v1199(R) #1
gap () () 
          v1209(R) = X64MovqDecompressTaggedSigned : MRI v1204(R) [immediate:1980]
gap () (v1207(R) = v1209(-);) 
          v1207(1) = X64Sar32 v1207(R) #1
gap () () 
          v1208(R) = X64Lea32 : MRI v1199(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1208 #2 #288 v0(S) v1(-) v2(-) v3(S) v1182(-) [immediate:1979] v1179(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1207 #2 [immediate:1977] [immediate:1978]
gap () () 
          [constant:1206] = ArchNop
gap () ([rax|R|t] = v1182(-); [rbx|R|w64] = v1190(-); [rsi|R|w64] = v1206(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1976] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1205(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1205 #1 #287 v0(S) v1(-) v2(-) v3(S) v1182(-) [immediate:1975] v1179(-)
gap () (v1200 = v1205(-);) 
          ArchJmp [immediate:1974]
gap () (v1200 = v1204(-);) 
          ArchJmp [immediate:1973]
gap () () 
          v1203(R) = X64Movl : MRI v1200(R) [immediate:1972]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1203(R) [immediate:1970] [immediate:1971]
gap () () 
          [constant:1202] = ArchNop
gap () ([rax|R|t] = v1182(-); [rsi|R|w64] = v1202(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1969] #-1 [rax|R|t] [rsi|R|w64]
gap (v1201(-) = [rax|R|t];) (v1196 = v1201(-);) 
          ArchJmp [immediate:1968]
gap () (v1196 = v1200(-);) 
          ArchJmp [immediate:1967]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1199 #2 [immediate:1965] [immediate:1966]
gap () () 
          X64MovqCompressTagged : MRI v1182(R) [immediate:1963] [immediate:1964]
gap () () 
          ArchJmp [immediate:1962]
gap () () 
          ArchJmp [immediate:1961]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1196(R) [immediate:1960] v1179(R)
gap () () 
          ArchJmp [immediate:1959]
gap () () 
          v1188(R) = X64MovqDecompressTaggedPointer : MRI v1182(R) [immediate:1958]
gap () () 
          v1195(R) = X64MovqDecompressTaggedSigned : MRI v1182(R) [immediate:1957]
gap () (v1183(R) = v1195(-);) 
          v1183(1) = X64Sar32 v1183(R) #1
gap () () 
          v1194(R) = X64MovqDecompressTaggedSigned : MRI v1188(R) [immediate:1956]
gap () (v1192(R) = v1194(-);) 
          v1192(1) = X64Sar32 v1192(R) #1
gap () () 
          v1193(R) = X64Lea32 : MRI v1183(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1193 #2 #286 v0(S) v1(-) v2(-) v3(S) v1182(-) [immediate:1955] v1179(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1192 #2 [immediate:1953] [immediate:1954]
gap () () 
          [constant:1191] = ArchNop
gap () ([rax|R|t] = v1182(-); [rbx|R|w64] = v1190(-); [rsi|R|w64] = v1191(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1952] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1189(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1189 #1 #285 v0(S) v1(-) v2(-) v3(S) v1182(-) [immediate:1951] v1179(-)
gap () (v1184 = v1189(-);) 
          ArchJmp [immediate:1950]
gap () (v1184 = v1188(-);) 
          ArchJmp [immediate:1949]
gap () () 
          v1187(R) = X64Movl : MRI v1184(R) [immediate:1948]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1187(R) [immediate:1946] [immediate:1947]
gap () () 
          [constant:1186] = ArchNop
gap () ([rax|R|t] = v1182(-); [rsi|R|w64] = v1186(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1945] #-1 [rax|R|t] [rsi|R|w64]
gap (v1185(-) = [rax|R|t];) (v1178 = v1185(-);) 
          ArchJmp [immediate:1944]
gap () (v1178 = v1184(-);) 
          ArchJmp [immediate:1943]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1183 #2 [immediate:1941] [immediate:1942]
gap () () 
          X64MovqCompressTagged : MRI v1182(R) [immediate:1939] [immediate:1940]
gap () () 
          ArchJmp [immediate:1938]
gap () () 
          ArchJmp [immediate:1937]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1178(R) [immediate:1936] v1179(R)
gap () () 
          ArchJmp [immediate:1935]
gap () () 
          v1148(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1934]
gap () () 
          v1177(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1933]
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1005(-)
gap () ([rdi|R|t] = v1177(-); [rdx|R|t] = v1177(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1931] #-1 #284 v0(S) v1(S) v2(S) v3(S) v1148(S) [immediate:1932] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v1145(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1148 #1 #283 v0(S) v1(-) v2(-) v3(S) v1148(-) [immediate:1930] v1145(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v1148(R) [immediate:1927] v184(R) [immediate:1928] [immediate:1929]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1148(R) [immediate:1925] v530(R) #282 v0(S) v1(-) v2(-) v3(S) v1148(-) [immediate:1926] v1145(-)
gap () () 
          v1170(R) = X64MovqDecompressTaggedPointer : MRI v1148(R) [immediate:1924]
gap () () 
          v1176(R) = X64MovqDecompressTaggedSigned : MRI v1148(R) [immediate:1923]
gap () (v1165(R) = v1176(-);) 
          v1165(1) = X64Sar32 v1165(R) #1
gap () () 
          v1175(R) = X64MovqDecompressTaggedSigned : MRI v1170(R) [immediate:1922]
gap () (v1173(R) = v1175(-);) 
          v1173(1) = X64Sar32 v1173(R) #1
gap () () 
          v1174(R) = X64Lea32 : MRI v1165(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1174 #3 #281 v0(S) v1(-) v2(-) v3(S) v1148(-) [immediate:1921] v1145(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1173 #3 [immediate:1919] [immediate:1920]
gap () () 
          [constant:1172] = ArchNop
gap () ([rax|R|t] = v1148(-); [rbx|R|w64] = v1156(-); [rsi|R|w64] = v1172(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1918] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1171(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1171 #1 #280 v0(S) v1(-) v2(-) v3(S) v1148(-) [immediate:1917] v1145(-)
gap () (v1166 = v1171(-);) 
          ArchJmp [immediate:1916]
gap () (v1166 = v1170(-);) 
          ArchJmp [immediate:1915]
gap () () 
          v1169(R) = X64Movl : MRI v1166(R) [immediate:1914]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1169(R) [immediate:1912] [immediate:1913]
gap () () 
          [constant:1168] = ArchNop
gap () ([rax|R|t] = v1148(-); [rsi|R|w64] = v1168(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1911] #-1 [rax|R|t] [rsi|R|w64]
gap (v1167(-) = [rax|R|t];) (v1162 = v1167(-);) 
          ArchJmp [immediate:1910]
gap () (v1162 = v1166(-);) 
          ArchJmp [immediate:1909]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1165 #3 [immediate:1907] [immediate:1908]
gap () () 
          X64MovqCompressTagged : MRI v1148(R) [immediate:1905] [immediate:1906]
gap () () 
          ArchJmp [immediate:1904]
gap () () 
          ArchJmp [immediate:1903]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1162(R) [immediate:1902] v1145(R)
gap () () 
          ArchJmp [immediate:1901]
gap () () 
          v1154(R) = X64MovqDecompressTaggedPointer : MRI v1148(R) [immediate:1900]
gap () () 
          v1161(R) = X64MovqDecompressTaggedSigned : MRI v1148(R) [immediate:1899]
gap () (v1149(R) = v1161(-);) 
          v1149(1) = X64Sar32 v1149(R) #1
gap () () 
          v1160(R) = X64MovqDecompressTaggedSigned : MRI v1154(R) [immediate:1898]
gap () (v1158(R) = v1160(-);) 
          v1158(1) = X64Sar32 v1158(R) #1
gap () () 
          v1159(R) = X64Lea32 : MRI v1149(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1159 #3 #279 v0(S) v1(-) v2(-) v3(S) v1148(-) [immediate:1897] v1145(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1158 #3 [immediate:1895] [immediate:1896]
gap () () 
          [constant:1157] = ArchNop
gap () ([rax|R|t] = v1148(-); [rbx|R|w64] = v1156(-); [rsi|R|w64] = v1157(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1894] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1155(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1155 #1 #278 v0(S) v1(-) v2(-) v3(S) v1148(-) [immediate:1893] v1145(-)
gap () (v1150 = v1155(-);) 
          ArchJmp [immediate:1892]
gap () (v1150 = v1154(-);) 
          ArchJmp [immediate:1891]
gap () () 
          v1153(R) = X64Movl : MRI v1150(R) [immediate:1890]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1153(R) [immediate:1888] [immediate:1889]
gap () () 
          [constant:1152] = ArchNop
gap () ([rax|R|t] = v1148(-); [rsi|R|w64] = v1152(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1887] #-1 [rax|R|t] [rsi|R|w64]
gap (v1151(-) = [rax|R|t];) (v1144 = v1151(-);) 
          ArchJmp [immediate:1886]
gap () (v1144 = v1150(-);) 
          ArchJmp [immediate:1885]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1149 #3 [immediate:1883] [immediate:1884]
gap () () 
          X64MovqCompressTagged : MRI v1148(R) [immediate:1881] [immediate:1882]
gap () () 
          ArchJmp [immediate:1880]
gap () () 
          ArchJmp [immediate:1879]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1144(R) [immediate:1878] v1145(R)
gap () () 
          ArchJmp [immediate:1877]
gap () () 
          [constant:1088] = ArchNop
gap () () 
          v1114(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1876]
gap () () 
          v1143(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1875]
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v1005(-)
gap () ([rdi|R|t] = v1143(-); [rdx|R|t] = v1143(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1873] #-1 #277 v0(S) v1(S) v2(S) v3(S) v1114(S) [immediate:1874] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v1111(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1114 #1 #276 v0(S) v1(-) v2(-) v3(S) v1114(-) [immediate:1872] v1111(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v1114(R) [immediate:1869] v184(R) [immediate:1870] [immediate:1871]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1114(R) [immediate:1867] v530(R) #275 v0(S) v1(-) v2(-) v3(S) v1114(-) [immediate:1868] v1111(-)
gap () () 
          v1136(R) = X64MovqDecompressTaggedPointer : MRI v1114(R) [immediate:1866]
gap () () 
          v1142(R) = X64MovqDecompressTaggedSigned : MRI v1114(R) [immediate:1865]
gap () (v1131(R) = v1142(-);) 
          v1131(1) = X64Sar32 v1131(R) #1
gap () () 
          v1141(R) = X64MovqDecompressTaggedSigned : MRI v1136(R) [immediate:1864]
gap () (v1139(R) = v1141(-);) 
          v1139(1) = X64Sar32 v1139(R) #1
gap () () 
          v1140(R) = X64Lea32 : MRI v1131(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1140 #4 #274 v0(S) v1(-) v2(-) v3(S) v1114(-) [immediate:1863] v1111(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1139 #4 [immediate:1861] [immediate:1862]
gap () () 
          [constant:1138] = ArchNop
gap () ([rax|R|t] = v1114(-); [rbx|R|w64] = v1122(-); [rsi|R|w64] = v1138(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1860] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1137(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1137 #1 #273 v0(S) v1(-) v2(-) v3(S) v1114(-) [immediate:1859] v1111(-)
gap () (v1132 = v1137(-);) 
          ArchJmp [immediate:1858]
gap () (v1132 = v1136(-);) 
          ArchJmp [immediate:1857]
gap () () 
          v1135(R) = X64Movl : MRI v1132(R) [immediate:1856]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1135(R) [immediate:1854] [immediate:1855]
gap () () 
          [constant:1134] = ArchNop
gap () ([rax|R|t] = v1114(-); [rsi|R|w64] = v1134(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1853] #-1 [rax|R|t] [rsi|R|w64]
gap (v1133(-) = [rax|R|t];) (v1128 = v1133(-);) 
          ArchJmp [immediate:1852]
gap () (v1128 = v1132(-);) 
          ArchJmp [immediate:1851]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1131 #4 [immediate:1849] [immediate:1850]
gap () () 
          X64MovqCompressTagged : MRI v1114(R) [immediate:1847] [immediate:1848]
gap () () 
          ArchJmp [immediate:1846]
gap () () 
          ArchJmp [immediate:1845]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1128(R) [immediate:1844] v1111(R)
gap () () 
          ArchJmp [immediate:1843]
gap () () 
          v1120(R) = X64MovqDecompressTaggedPointer : MRI v1114(R) [immediate:1842]
gap () () 
          v1127(R) = X64MovqDecompressTaggedSigned : MRI v1114(R) [immediate:1841]
gap () (v1115(R) = v1127(-);) 
          v1115(1) = X64Sar32 v1115(R) #1
gap () () 
          v1126(R) = X64MovqDecompressTaggedSigned : MRI v1120(R) [immediate:1840]
gap () (v1124(R) = v1126(-);) 
          v1124(1) = X64Sar32 v1124(R) #1
gap () () 
          v1125(R) = X64Lea32 : MRI v1115(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1125 #4 #272 v0(S) v1(-) v2(-) v3(S) v1114(-) [immediate:1839] v1111(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1124 #4 [immediate:1837] [immediate:1838]
gap () () 
          [constant:1123] = ArchNop
gap () ([rax|R|t] = v1114(-); [rbx|R|w64] = v1122(-); [rsi|R|w64] = v1123(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1836] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1121(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1121 #1 #271 v0(S) v1(-) v2(-) v3(S) v1114(-) [immediate:1835] v1111(-)
gap () (v1116 = v1121(-);) 
          ArchJmp [immediate:1834]
gap () (v1116 = v1120(-);) 
          ArchJmp [immediate:1833]
gap () () 
          v1119(R) = X64Movl : MRI v1116(R) [immediate:1832]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1119(R) [immediate:1830] [immediate:1831]
gap () () 
          [constant:1118] = ArchNop
gap () ([rax|R|t] = v1114(-); [rsi|R|w64] = v1118(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1829] #-1 [rax|R|t] [rsi|R|w64]
gap (v1117(-) = [rax|R|t];) (v1110 = v1117(-);) 
          ArchJmp [immediate:1828]
gap () (v1110 = v1116(-);) 
          ArchJmp [immediate:1827]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1115 #4 [immediate:1825] [immediate:1826]
gap () () 
          X64MovqCompressTagged : MRI v1114(R) [immediate:1823] [immediate:1824]
gap () () 
          ArchJmp [immediate:1822]
gap () () 
          ArchJmp [immediate:1821]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1110(R) [immediate:1820] v1111(R)
gap () () 
          ArchJmp [immediate:1819]
gap () () 
          v1080(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1818]
gap () () 
          v1109(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1817]
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v1005(-)
gap () ([rdi|R|t] = v1109(-); [rdx|R|t] = v1109(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1815] #-1 #270 v0(S) v1(S) v2(S) v3(S) v1080(S) [immediate:1816] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v1077(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1080 #1 #269 v0(S) v1(-) v2(-) v3(S) v1080(-) [immediate:1814] v1077(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v1080(R) [immediate:1811] v184(R) [immediate:1812] [immediate:1813]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1080(R) [immediate:1809] v530(R) #268 v0(S) v1(-) v2(-) v3(S) v1080(-) [immediate:1810] v1077(-)
gap () () 
          v1102(R) = X64MovqDecompressTaggedPointer : MRI v1080(R) [immediate:1808]
gap () () 
          v1108(R) = X64MovqDecompressTaggedSigned : MRI v1080(R) [immediate:1807]
gap () (v1097(R) = v1108(-);) 
          v1097(1) = X64Sar32 v1097(R) #1
gap () () 
          v1107(R) = X64MovqDecompressTaggedSigned : MRI v1102(R) [immediate:1806]
gap () (v1105(R) = v1107(-);) 
          v1105(1) = X64Sar32 v1105(R) #1
gap () () 
          v1106(R) = X64Lea32 : MRI v1097(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1106 #5 #267 v0(S) v1(-) v2(-) v3(S) v1080(-) [immediate:1805] v1077(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1105 #5 [immediate:1803] [immediate:1804]
gap () () 
          [constant:1104] = ArchNop
gap () ([rax|R|t] = v1080(-); [rbx|R|w64] = v1088(-); [rsi|R|w64] = v1104(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1802] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1103(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1103 #1 #266 v0(S) v1(-) v2(-) v3(S) v1080(-) [immediate:1801] v1077(-)
gap () (v1098 = v1103(-);) 
          ArchJmp [immediate:1800]
gap () (v1098 = v1102(-);) 
          ArchJmp [immediate:1799]
gap () () 
          v1101(R) = X64Movl : MRI v1098(R) [immediate:1798]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1101(R) [immediate:1796] [immediate:1797]
gap () () 
          [constant:1100] = ArchNop
gap () ([rax|R|t] = v1080(-); [rsi|R|w64] = v1100(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1795] #-1 [rax|R|t] [rsi|R|w64]
gap (v1099(-) = [rax|R|t];) (v1094 = v1099(-);) 
          ArchJmp [immediate:1794]
gap () (v1094 = v1098(-);) 
          ArchJmp [immediate:1793]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1097 #5 [immediate:1791] [immediate:1792]
gap () () 
          X64MovqCompressTagged : MRI v1080(R) [immediate:1789] [immediate:1790]
gap () () 
          ArchJmp [immediate:1788]
gap () () 
          ArchJmp [immediate:1787]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1094(R) [immediate:1786] v1077(R)
gap () () 
          ArchJmp [immediate:1785]
gap () () 
          v1086(R) = X64MovqDecompressTaggedPointer : MRI v1080(R) [immediate:1784]
gap () () 
          v1093(R) = X64MovqDecompressTaggedSigned : MRI v1080(R) [immediate:1783]
gap () (v1081(R) = v1093(-);) 
          v1081(1) = X64Sar32 v1081(R) #1
gap () () 
          v1092(R) = X64MovqDecompressTaggedSigned : MRI v1086(R) [immediate:1782]
gap () (v1090(R) = v1092(-);) 
          v1090(1) = X64Sar32 v1090(R) #1
gap () () 
          v1091(R) = X64Lea32 : MRI v1081(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1091 #5 #265 v0(S) v1(-) v2(-) v3(S) v1080(-) [immediate:1781] v1077(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1090 #5 [immediate:1779] [immediate:1780]
gap () () 
          [constant:1089] = ArchNop
gap () ([rax|R|t] = v1080(-); [rbx|R|w64] = v1088(-); [rsi|R|w64] = v1089(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1778] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1087(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1087 #1 #264 v0(S) v1(-) v2(-) v3(S) v1080(-) [immediate:1777] v1077(-)
gap () (v1082 = v1087(-);) 
          ArchJmp [immediate:1776]
gap () (v1082 = v1086(-);) 
          ArchJmp [immediate:1775]
gap () () 
          v1085(R) = X64Movl : MRI v1082(R) [immediate:1774]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1085(R) [immediate:1772] [immediate:1773]
gap () () 
          [constant:1084] = ArchNop
gap () ([rax|R|t] = v1080(-); [rsi|R|w64] = v1084(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1771] #-1 [rax|R|t] [rsi|R|w64]
gap (v1083(-) = [rax|R|t];) (v1076 = v1083(-);) 
          ArchJmp [immediate:1770]
gap () (v1076 = v1082(-);) 
          ArchJmp [immediate:1769]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1081 #5 [immediate:1767] [immediate:1768]
gap () () 
          X64MovqCompressTagged : MRI v1080(R) [immediate:1765] [immediate:1766]
gap () () 
          ArchJmp [immediate:1764]
gap () () 
          ArchJmp [immediate:1763]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1076(R) [immediate:1762] v1077(R)
gap () () 
          ArchJmp [immediate:1761]
gap () () 
          [constant:1019] = ArchNop
gap () () 
          v1046(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1760]
gap () () 
          v1075(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1759]
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1005(-)
gap () ([rdi|R|t] = v1075(-); [rdx|R|t] = v1075(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1757] #-1 #263 v0(S) v1(S) v2(S) v3(S) v1046(S) [immediate:1758] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v1043(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1046 #1 #262 v0(S) v1(-) v2(-) v3(S) v1046(-) [immediate:1756] v1043(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v1046(R) [immediate:1753] v184(R) [immediate:1754] [immediate:1755]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1046(R) [immediate:1751] v530(R) #261 v0(S) v1(-) v2(-) v3(S) v1046(-) [immediate:1752] v1043(-)
gap () () 
          v1068(R) = X64MovqDecompressTaggedPointer : MRI v1046(R) [immediate:1750]
gap () () 
          v1074(R) = X64MovqDecompressTaggedSigned : MRI v1046(R) [immediate:1749]
gap () (v1063(R) = v1074(-);) 
          v1063(1) = X64Sar32 v1063(R) #1
gap () () 
          v1073(R) = X64MovqDecompressTaggedSigned : MRI v1068(R) [immediate:1748]
gap () (v1071(R) = v1073(-);) 
          v1071(1) = X64Sar32 v1071(R) #1
gap () () 
          v1072(R) = X64Lea32 : MRI v1063(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1072 #6 #260 v0(S) v1(-) v2(-) v3(S) v1046(-) [immediate:1747] v1043(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1071 #6 [immediate:1745] [immediate:1746]
gap () () 
          [constant:1070] = ArchNop
gap () ([rax|R|t] = v1046(-); [rbx|R|w64] = v1054(-); [rsi|R|w64] = v1070(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1744] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1069(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1069 #1 #259 v0(S) v1(-) v2(-) v3(S) v1046(-) [immediate:1743] v1043(-)
gap () (v1064 = v1069(-);) 
          ArchJmp [immediate:1742]
gap () (v1064 = v1068(-);) 
          ArchJmp [immediate:1741]
gap () () 
          v1067(R) = X64Movl : MRI v1064(R) [immediate:1740]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1067(R) [immediate:1738] [immediate:1739]
gap () () 
          [constant:1066] = ArchNop
gap () ([rax|R|t] = v1046(-); [rsi|R|w64] = v1066(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1737] #-1 [rax|R|t] [rsi|R|w64]
gap (v1065(-) = [rax|R|t];) (v1060 = v1065(-);) 
          ArchJmp [immediate:1736]
gap () (v1060 = v1064(-);) 
          ArchJmp [immediate:1735]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1063 #6 [immediate:1733] [immediate:1734]
gap () () 
          X64MovqCompressTagged : MRI v1046(R) [immediate:1731] [immediate:1732]
gap () () 
          ArchJmp [immediate:1730]
gap () () 
          ArchJmp [immediate:1729]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1060(R) [immediate:1728] v1043(R)
gap () () 
          ArchJmp [immediate:1727]
gap () () 
          v1052(R) = X64MovqDecompressTaggedPointer : MRI v1046(R) [immediate:1726]
gap () () 
          v1059(R) = X64MovqDecompressTaggedSigned : MRI v1046(R) [immediate:1725]
gap () (v1047(R) = v1059(-);) 
          v1047(1) = X64Sar32 v1047(R) #1
gap () () 
          v1058(R) = X64MovqDecompressTaggedSigned : MRI v1052(R) [immediate:1724]
gap () (v1056(R) = v1058(-);) 
          v1056(1) = X64Sar32 v1056(R) #1
gap () () 
          v1057(R) = X64Lea32 : MRI v1047(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1057 #6 #258 v0(S) v1(-) v2(-) v3(S) v1046(-) [immediate:1723] v1043(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1056 #6 [immediate:1721] [immediate:1722]
gap () () 
          [constant:1055] = ArchNop
gap () ([rax|R|t] = v1046(-); [rbx|R|w64] = v1054(-); [rsi|R|w64] = v1055(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1720] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1053(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1053 #1 #257 v0(S) v1(-) v2(-) v3(S) v1046(-) [immediate:1719] v1043(-)
gap () (v1048 = v1053(-);) 
          ArchJmp [immediate:1718]
gap () (v1048 = v1052(-);) 
          ArchJmp [immediate:1717]
gap () () 
          v1051(R) = X64Movl : MRI v1048(R) [immediate:1716]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1051(R) [immediate:1714] [immediate:1715]
gap () () 
          [constant:1050] = ArchNop
gap () ([rax|R|t] = v1046(-); [rsi|R|w64] = v1050(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1713] #-1 [rax|R|t] [rsi|R|w64]
gap (v1049(-) = [rax|R|t];) (v1042 = v1049(-);) 
          ArchJmp [immediate:1712]
gap () (v1042 = v1048(-);) 
          ArchJmp [immediate:1711]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1047 #6 [immediate:1709] [immediate:1710]
gap () () 
          X64MovqCompressTagged : MRI v1046(R) [immediate:1707] [immediate:1708]
gap () () 
          ArchJmp [immediate:1706]
gap () () 
          ArchJmp [immediate:1705]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1042(R) [immediate:1704] v1043(R)
gap () () 
          ArchJmp [immediate:1703]
gap () () 
          v1011(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1702]
gap () () 
          v1040(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1701]
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v1041(-)
gap () () 
          X64Push v2(-)
gap () () 
          X64Push v1005(-)
gap () ([rdi|R|t] = v1040(-); [rdx|R|t] = v1040(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1699] #-1 #256 v0(S) v1(S) v2(S) v3(S) v1011(S) [immediate:1700] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v1008(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1011 #1 #255 v0(S) v1(-) v2(-) v3(S) v1011(-) [immediate:1698] v1008(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v1011(R) [immediate:1695] v184(R) [immediate:1696] [immediate:1697]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v1011(R) [immediate:1693] v530(R) #254 v0(S) v1(-) v2(-) v3(S) v1011(-) [immediate:1694] v1008(-)
gap () () 
          v1033(R) = X64MovqDecompressTaggedPointer : MRI v1011(R) [immediate:1692]
gap () () 
          v1039(R) = X64MovqDecompressTaggedSigned : MRI v1011(R) [immediate:1691]
gap () (v1028(R) = v1039(-);) 
          v1028(1) = X64Sar32 v1028(R) #1
gap () () 
          v1038(R) = X64MovqDecompressTaggedSigned : MRI v1033(R) [immediate:1690]
gap () (v1036(R) = v1038(-);) 
          v1036(1) = X64Sar32 v1036(R) #1
gap () () 
          v1037(R) = X64Lea32 : MRI v1028(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1037 #7 #253 v0(S) v1(-) v2(-) v3(S) v1011(-) [immediate:1689] v1008(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1036 #7 [immediate:1687] [immediate:1688]
gap () () 
          [constant:1035] = ArchNop
gap () ([rax|R|t] = v1011(-); [rbx|R|w64] = v1019(-); [rsi|R|w64] = v1035(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1686] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1034(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1034 #1 #252 v0(S) v1(-) v2(-) v3(S) v1011(-) [immediate:1685] v1008(-)
gap () (v1029 = v1034(-);) 
          ArchJmp [immediate:1684]
gap () (v1029 = v1033(-);) 
          ArchJmp [immediate:1683]
gap () () 
          v1032(R) = X64Movl : MRI v1029(R) [immediate:1682]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1032(R) [immediate:1680] [immediate:1681]
gap () () 
          [constant:1031] = ArchNop
gap () ([rax|R|t] = v1011(-); [rsi|R|w64] = v1031(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1679] #-1 [rax|R|t] [rsi|R|w64]
gap (v1030(-) = [rax|R|t];) (v1025 = v1030(-);) 
          ArchJmp [immediate:1678]
gap () (v1025 = v1029(-);) 
          ArchJmp [immediate:1677]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1028 #7 [immediate:1675] [immediate:1676]
gap () () 
          X64MovqCompressTagged : MRI v1011(R) [immediate:1673] [immediate:1674]
gap () () 
          ArchJmp [immediate:1672]
gap () () 
          ArchJmp [immediate:1671]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1025(R) [immediate:1670] v1008(R)
gap () () 
          ArchJmp [immediate:1669]
gap () () 
          v1017(R) = X64MovqDecompressTaggedPointer : MRI v1011(R) [immediate:1668]
gap () () 
          v1024(R) = X64MovqDecompressTaggedSigned : MRI v1011(R) [immediate:1667]
gap () (v1012(R) = v1024(-);) 
          v1012(1) = X64Sar32 v1012(R) #1
gap () () 
          v1023(R) = X64MovqDecompressTaggedSigned : MRI v1017(R) [immediate:1666]
gap () (v1021(R) = v1023(-);) 
          v1021(1) = X64Sar32 v1021(R) #1
gap () () 
          v1022(R) = X64Lea32 : MRI v1012(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1022 #7 #251 v0(S) v1(-) v2(-) v3(S) v1011(-) [immediate:1665] v1008(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v1021 #7 [immediate:1663] [immediate:1664]
gap () () 
          [constant:1020] = ArchNop
gap () ([rax|R|t] = v1011(-); [rbx|R|w64] = v1019(-); [rsi|R|w64] = v1020(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1662] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v1018(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v1018 #1 #250 v0(S) v1(-) v2(-) v3(S) v1011(-) [immediate:1661] v1008(-)
gap () (v1013 = v1018(-);) 
          ArchJmp [immediate:1660]
gap () (v1013 = v1017(-);) 
          ArchJmp [immediate:1659]
gap () () 
          v1016(R) = X64Movl : MRI v1013(R) [immediate:1658]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v1016(R) [immediate:1656] [immediate:1657]
gap () () 
          [constant:1015] = ArchNop
gap () ([rax|R|t] = v1011(-); [rsi|R|w64] = v1015(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1655] #-1 [rax|R|t] [rsi|R|w64]
gap (v1014(-) = [rax|R|t];) (v1007 = v1014(-);) 
          ArchJmp [immediate:1654]
gap () (v1007 = v1013(-);) 
          ArchJmp [immediate:1653]
gap () () 
          X64Cmp32 && branch if unsigned greater than v1012 #7 [immediate:1651] [immediate:1652]
gap () () 
          X64MovqCompressTagged : MRI v1011(R) [immediate:1649] [immediate:1650]
gap () () 
          ArchJmp [immediate:1648]
gap () () 
          ArchJmp [immediate:1647]
gap () () 
          ArchStoreWithWriteBarrier : MRI v1007(R) [immediate:1646] v1008(R)
gap () () 
          ArchJmp [immediate:1645]
gap () () 
          v974(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1644]
gap () () 
          v1003(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1643]
gap () () 
          X64Push [immediate:1640]
gap () () 
          X64Push [immediate:1641]
gap () () 
          X64Push [immediate:1642]
gap () () 
          X64Push v1005(-)
gap () ([rdi|R|t] = v1003(-); [rdx|R|t] = v1003(-); [rax|R|w64] = v1004(-); [rsi|R|t] = v1006(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1638] #-1 #249 v0(S) v1(S) v2(S) v3(S) v974(S) [immediate:1639] [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|t]
gap (v971(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v974 #1 #248 v0(S) v1(-) v2(-) v3(S) v974(-) [immediate:1637] v971(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v974(R) [immediate:1634] v184(R) [immediate:1635] [immediate:1636]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v974(R) [immediate:1632] v530(R) #247 v0(S) v1(-) v2(-) v3(S) v974(-) [immediate:1633] v971(-)
gap () () 
          v996(R) = X64MovqDecompressTaggedPointer : MRI v974(R) [immediate:1631]
gap () () 
          v1002(R) = X64MovqDecompressTaggedSigned : MRI v974(R) [immediate:1630]
gap () (v991(R) = v1002(-);) 
          v991(1) = X64Sar32 v991(R) #1
gap () () 
          v1001(R) = X64MovqDecompressTaggedSigned : MRI v996(R) [immediate:1629]
gap () (v999(R) = v1001(-);) 
          v999(1) = X64Sar32 v999(R) #1
gap () () 
          v1000(R) = X64Lea32 : MRI v991(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v1000 #8 #246 v0(S) v1(-) v2(-) v3(S) v974(-) [immediate:1628] v971(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v999 #8 [immediate:1626] [immediate:1627]
gap () () 
          [constant:998] = ArchNop
gap () ([rax|R|t] = v974(-); [rbx|R|w64] = v982(-); [rsi|R|w64] = v998(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1625] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v997(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v997 #1 #245 v0(S) v1(-) v2(-) v3(S) v974(-) [immediate:1624] v971(-)
gap () (v992 = v997(-);) 
          ArchJmp [immediate:1623]
gap () (v992 = v996(-);) 
          ArchJmp [immediate:1622]
gap () () 
          v995(R) = X64Movl : MRI v992(R) [immediate:1621]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v995(R) [immediate:1619] [immediate:1620]
gap () () 
          [constant:994] = ArchNop
gap () ([rax|R|t] = v974(-); [rsi|R|w64] = v994(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1618] #-1 [rax|R|t] [rsi|R|w64]
gap (v993(-) = [rax|R|t];) (v988 = v993(-);) 
          ArchJmp [immediate:1617]
gap () (v988 = v992(-);) 
          ArchJmp [immediate:1616]
gap () () 
          X64Cmp32 && branch if unsigned greater than v991 #8 [immediate:1614] [immediate:1615]
gap () () 
          X64MovqCompressTagged : MRI v974(R) [immediate:1612] [immediate:1613]
gap () () 
          ArchJmp [immediate:1611]
gap () () 
          ArchJmp [immediate:1610]
gap () () 
          ArchStoreWithWriteBarrier : MRI v988(R) [immediate:1609] v971(R)
gap () () 
          ArchJmp [immediate:1608]
gap () () 
          v980(R) = X64MovqDecompressTaggedPointer : MRI v974(R) [immediate:1607]
gap () () 
          v987(R) = X64MovqDecompressTaggedSigned : MRI v974(R) [immediate:1606]
gap () (v975(R) = v987(-);) 
          v975(1) = X64Sar32 v975(R) #1
gap () () 
          v986(R) = X64MovqDecompressTaggedSigned : MRI v980(R) [immediate:1605]
gap () (v984(R) = v986(-);) 
          v984(1) = X64Sar32 v984(R) #1
gap () () 
          v985(R) = X64Lea32 : MRI v975(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v985 #8 #244 v0(S) v1(-) v2(-) v3(S) v974(-) [immediate:1604] v971(-)
gap () () 
          X64Cmp32 && branch if unsigned greater than v984 #8 [immediate:1602] [immediate:1603]
gap () () 
          [constant:983] = ArchNop
gap () ([rax|R|t] = v974(-); [rbx|R|w64] = v982(-); [rsi|R|w64] = v983(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1601] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v981(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v981 #1 #243 v0(S) v1(-) v2(-) v3(S) v974(-) [immediate:1600] v971(-)
gap () (v976 = v981(-);) 
          ArchJmp [immediate:1599]
gap () (v976 = v980(-);) 
          ArchJmp [immediate:1598]
gap () () 
          v979(R) = X64Movl : MRI v976(R) [immediate:1597]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v979(R) [immediate:1595] [immediate:1596]
gap () () 
          [constant:978] = ArchNop
gap () ([rax|R|t] = v974(-); [rsi|R|w64] = v978(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1594] #-1 [rax|R|t] [rsi|R|w64]
gap (v977(-) = [rax|R|t];) (v970 = v977(-);) 
          ArchJmp [immediate:1593]
gap () (v970 = v976(-);) 
          ArchJmp [immediate:1592]
gap () () 
          X64Cmp32 && branch if unsigned greater than v975 #8 [immediate:1590] [immediate:1591]
gap () () 
          X64MovqCompressTagged : MRI v974(R) [immediate:1588] [immediate:1589]
gap () () 
          ArchJmp [immediate:1587]
gap () () 
          ArchJmp [immediate:1586]
gap () () 
          ArchStoreWithWriteBarrier : MRI v970(R) [immediate:1585] v971(R)
gap () () 
          ArchJmp [immediate:1584]
gap () () 
          v891(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1583]
gap () () 
          v964(R) = X64Movq : MR v80(R)
gap () () 
          [constant:968] = ArchNop
gap () () 
          v969(R) = X64Lea : MRI v964(R) [immediate:1582]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v969(R) [immediate:1580] [immediate:1581]
gap () () 
          ArchJmp [immediate:1579]
gap () ([rdx|R|w64] = v968(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1578] #-1 [rdx|R|w64]
gap (v967(-) = [rax|R|tp];) () 
          v965(R) = X64Lea : MRI v967(R) [immediate:1577]
gap () (v963 = v965(-);) 
          ArchJmp [immediate:1576]
gap () (v963 = v964(-);) 
          ArchJmp [immediate:1575]
gap () () 
          v960(R) = X64Lea : MRI v963(R) [immediate:1574]
gap () () 
          X64Movq : MR v80(R) v960(R)
gap () () 
          v962(R) = X64Lea : MRI v963(R) [immediate:1573]
gap () (v943 = v962(-);) 
          v943(1) = ArchNop v943
gap () () 
          X64MovqCompressTagged : MRI v943(R) [immediate:1572] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v943(R) [immediate:1571] v185(R)
gap () () 
          [constant:961] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v943(R) [immediate:1570] v961(R)
gap () () 
          X64MovqCompressTagged : MRI v943(R) [immediate:1568] [immediate:1569]
gap () () 
          v957(R) = X64Lea : MRI v960(R) [immediate:1567]
gap () () 
          X64Movq : MR v80(R) v957(R)
gap () () 
          v959(R) = X64Lea : MRI v960(R) [immediate:1566]
gap () (v942 = v959(-);) 
          v942(1) = ArchNop v942
gap () () 
          X64MovqCompressTagged : MRI v942(R) [immediate:1565] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v942(R) [immediate:1564] v185(R)
gap () () 
          [constant:958] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v942(R) [immediate:1563] v958(R)
gap () () 
          X64MovqCompressTagged : MRI v942(R) [immediate:1561] [immediate:1562]
gap () () 
          v954(R) = X64Lea : MRI v957(R) [immediate:1560]
gap () () 
          X64Movq : MR v80(R) v954(R)
gap () () 
          v956(R) = X64Lea : MRI v957(R) [immediate:1559]
gap () (v941 = v956(-);) 
          v941(1) = ArchNop v941
gap () () 
          X64MovqCompressTagged : MRI v941(R) [immediate:1558] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v941(R) [immediate:1557] v185(R)
gap () () 
          [constant:955] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v941(R) [immediate:1556] v955(R)
gap () () 
          X64MovqCompressTagged : MRI v941(R) [immediate:1554] [immediate:1555]
gap () () 
          v951(R) = X64Lea : MRI v954(R) [immediate:1553]
gap () () 
          X64Movq : MR v80(R) v951(R)
gap () () 
          v953(R) = X64Lea : MRI v954(R) [immediate:1552]
gap () (v940 = v953(-);) 
          v940(1) = ArchNop v940
gap () () 
          X64MovqCompressTagged : MRI v940(R) [immediate:1551] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v940(R) [immediate:1550] v185(R)
gap () () 
          [constant:952] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v940(R) [immediate:1549] v952(R)
gap () () 
          X64MovqCompressTagged : MRI v940(R) [immediate:1547] [immediate:1548]
gap () () 
          v948(R) = X64Lea : MRI v951(R) [immediate:1546]
gap () () 
          X64Movq : MR v80(R) v948(R)
gap () () 
          v950(R) = X64Lea : MRI v951(R) [immediate:1545]
gap () (v939 = v950(-);) 
          v939(1) = ArchNop v939
gap () () 
          X64MovqCompressTagged : MRI v939(R) [immediate:1544] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v939(R) [immediate:1543] v185(R)
gap () () 
          [constant:949] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v939(R) [immediate:1542] v949(R)
gap () () 
          X64MovqCompressTagged : MRI v939(R) [immediate:1540] [immediate:1541]
gap () () 
          v945(R) = X64Lea : MRI v948(R) [immediate:1539]
gap () () 
          X64Movq : MR v80(R) v945(R)
gap () () 
          v947(R) = X64Lea : MRI v948(R) [immediate:1538]
gap () (v938 = v947(-);) 
          v938(1) = ArchNop v938
gap () () 
          X64MovqCompressTagged : MRI v938(R) [immediate:1537] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v938(R) [immediate:1536] v185(R)
gap () () 
          [constant:946] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v938(R) [immediate:1535] v946(R)
gap () () 
          X64MovqCompressTagged : MRI v938(R) [immediate:1533] [immediate:1534]
gap () () 
          v937(R) = X64Lea : MRI v945(R) [immediate:1532]
gap () () 
          X64Movq : MR v80(R) v937(R)
gap () () 
          v944(R) = X64Lea : MRI v945(R) [immediate:1531]
gap () (v935 = v944(-);) 
          v935(1) = ArchNop v935
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1530] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1528] [immediate:1529]
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1527] v943(R)
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1526] v942(R)
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1525] v941(R)
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1524] v940(R)
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1523] v939(R)
gap () () 
          X64MovqCompressTagged : MRI v935(R) [immediate:1522] v938(R)
gap () () 
          v927(R) = X64Lea : MRI v937(R) [immediate:1521]
gap () () 
          X64Movq : MR v80(R) v927(R)
gap () () 
          v936(R) = X64Lea : MRI v937(R) [immediate:1520]
gap () (v911 = v936(-);) 
          v911(1) = ArchNop v911
gap () () 
          X64MovqCompressTagged : MRI v911(R) [immediate:1519] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v911(R) [immediate:1518] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v911(R) [immediate:1517] v935(R)
gap () () 
          X64MovqCompressTagged : MRI v911(R) [immediate:1515] [immediate:1516]
gap () () 
          X64Test32 && deoptimize if equal v891 #1 #242 v0(S) v1(-) v2(-) v3(S) v891(-) v911(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v891(R) [immediate:1512] v530(R) [immediate:1513] [immediate:1514]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v891(R) [immediate:1511] v184(R) #241 v0(S) v1(-) v2(-) v3(S) v891(-) v911(-)
gap () () 
          v934(R) = X64MovqDecompressTaggedPointer : MRI v891(R) [immediate:1510]
gap () () 
          X64Test32 && branch if equal v934 #1 [immediate:1508] [immediate:1509]
gap () (v932 = v327(-);) 
          ArchJmp [immediate:1507]
gap () (v932 = v934(-);) 
          ArchJmp [immediate:1506]
gap () () 
          [constant:917] = ArchNop
gap () () 
          X64Test32 && branch if equal v932 #1 [immediate:1504] [immediate:1505]
gap () () 
          v933(R) = X64Movsd : MRI v932(R) [immediate:1503]
gap () () 
          v931(R) = SSEFloat64ToInt32 v933
gap () (v929 = v931(-);) 
          ArchJmp [immediate:1502]
gap () (v930(R) = v932(-);) 
          v930(1) = X64Sar32 v930(R) #1
gap () (v929 = v930(-);) 
          ArchJmp [immediate:1501]
gap () () 
          [constant:920] = ArchNop
gap () () 
          [constant:923] = ArchNop
gap () () 
          v928(R) = X64Lea : MRI v927(R) [immediate:1500]
gap () (v926(R) = v929(-);) 
          v926(1) = X64Shl32 v926(R) #10
gap () () 
          X64Movq : MR v80(R) v928(R)
gap () () 
          v925(R) = X64Lea : MRI v927(R) [immediate:1499]
gap () (v924(R) = v926(-);) 
          v924(1) = X64Or32 v924(R) #3
gap () (v914 = v925(-);) 
          v914(1) = ArchNop v914
gap () () 
          v922(R) = X64Lea32 : MR1 v924(R) v924(R)
gap () () 
          X64MovqCompressTagged : MRI v914(R) [immediate:1498] v923(R)
gap () () 
          X64MovqCompressTagged : MRI v914(R) [immediate:1497] v922(R)
gap () () 
          X64MovqCompressTagged : MRI v914(R) [immediate:1496] v920(R)
gap () () 
          X64MovqCompressTagged : MRI v914(R) [immediate:1495] v920(R)
gap () () 
          X64MovqCompressTagged : MRI v914(R) [immediate:1494] v911(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v891(R) [immediate:1493] v917(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v891(R) [immediate:1492] v914(R)
gap () () 
          ArchJmp [immediate:1491]
gap () () 
          v910(R) = X64MovqDecompressTaggedPointer : MRI v891(R) [immediate:1490]
gap () () 
          ArchStoreWithWriteBarrier : MRI v910(R) [immediate:1489] v911(R)
gap () () 
          ArchJmp [immediate:1488]
gap () () 
          [constant:494] = ArchNop
gap () () 
          v905(R) = X64Movq : MR v80(R)
gap () () 
          v909(R) = X64Lea : MRI v905(R) [immediate:1487]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v909(R) [immediate:1485] [immediate:1486]
gap () () 
          ArchJmp [immediate:1484]
gap () ([rdx|R|w64] = v494(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1483] #-1 [rdx|R|w64]
gap (v908(-) = [rax|R|tp];) () 
          v906(R) = X64Lea : MRI v908(R) [immediate:1482]
gap () (v904 = v906(-);) 
          ArchJmp [immediate:1481]
gap () (v904 = v905(-);) 
          ArchJmp [immediate:1480]
gap () () 
          [constant:812] = ArchNop
gap () () 
          v901(R) = X64Lea : MRI v904(R) [immediate:1479]
gap () () 
          X64Movq : MR v80(R) v901(R)
gap () () 
          v903(R) = X64Lea : MRI v904(R) [immediate:1478]
gap () (v899 = v903(-);) 
          v899(1) = ArchNop v899
gap () () 
          X64MovqCompressTagged : MRI v899(R) [immediate:1477] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v899(R) [immediate:1475] [immediate:1476]
gap () () 
          X64MovqCompressTagged : MRI v899(R) [immediate:1474] v812(R)
gap () () 
          X64MovqCompressTagged : MRI v899(R) [immediate:1473] v812(R)
gap () () 
          X64MovqCompressTagged : MRI v899(R) [immediate:1472] v812(R)
gap () () 
          X64MovqCompressTagged : MRI v899(R) [immediate:1471] v812(R)
gap () () 
          v902(R) = X64Lea : MRI v901(R) [immediate:1470]
gap () () 
          X64Movq : MR v80(R) v902(R)
gap () () 
          v900(R) = X64Lea : MRI v901(R) [immediate:1469]
gap () (v888 = v900(-);) 
          v888(1) = ArchNop v888
gap () () 
          X64MovqCompressTagged : MRI v888(R) [immediate:1468] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v888(R) [immediate:1467] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v888(R) [immediate:1466] v899(R)
gap () () 
          X64MovqCompressTagged : MRI v888(R) [immediate:1464] [immediate:1465]
gap () () 
          X64Cmp32 : MRI && branch if equal v891(R) [immediate:1461] v530(R) [immediate:1462] [immediate:1463]
gap () () 
          [constant:895] = ArchNop
gap () () 
          [constant:898] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v891(R) [immediate:1460] v898(R) #240 v0(S) v1(-) v2(-) v3(S) v891(-) v888(-)
gap () () 
          v892(R) = X64MovqDecompressTaggedPointer : MRI v891(R) [immediate:1459]
gap () () 
          ArchStoreWithWriteBarrier : MRI v891(R) [immediate:1458] v895(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v892(R) [immediate:1457] v888(R)
gap () () 
          ArchJmp [immediate:1456]
gap () () 
          v887(R) = X64MovqDecompressTaggedPointer : MRI v891(R) [immediate:1455]
gap () () 
          ArchStoreWithWriteBarrier : MRI v887(R) [immediate:1454] v888(R)
gap () () 
          ArchJmp [immediate:1453]
gap () () 
          X64Test32 && branch if equal v812 #1 [immediate:1451] [immediate:1452]
gap () () 
          v885(R) = X64Movsd : MRI v812(R) [immediate:1450]
gap () (v189 = v885(-);) 
          ArchJmp [immediate:1449]
gap () (v886(R) = v812(-);) 
          v886(1) = X64Sar32 v886(R) #1
gap () () 
          v884(R) = SSEInt32ToFloat64 v886
gap () (v189 = v884(-);) 
          ArchJmp [immediate:1448]
gap () () 
          [constant:190] = ArchNop
gap () () 
          [constant:430] = ArchNop
gap () () 
          [constant:39] = ArchNop
gap () () 
          [constant:480] = ArchNop
gap () () 
          [constant:44] = ArchNop
gap () () 
          [constant:19] = ArchNop
gap () () 
          [constant:197] = ArchNop
gap () (v606 = v20(-);) 
          ArchJmp [immediate:1447]
gap () () 
          v581(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1446]
gap () () 
          X64Test32 && deoptimize if equal v581 #1 #239 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          v883(R) = X64Movl : MRI v581(R) [immediate:1445]
gap () () 
          X64Cmp32 && branch if equal v883(R) v530 [immediate:1443] [immediate:1444]
gap () () 
          [constant:882] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v882(R) v883 #238 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          ArchJmp [immediate:1442]
gap () () 
          ArchJmp [immediate:1441]
gap () () 
          v575(R) = X64MovqDecompressTaggedPointer : MRI v581(R) [immediate:1440]
gap () () 
          v879(R) = X64MovqDecompressAnyTagged : MRI v575(R) [immediate:1439]
gap () () 
          X64Test32 && deoptimize if equal v879 #1 #237 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v879(R) [immediate:1438] v184(R) #236 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          v881(R) = X64MovqDecompressTaggedSigned : MRI v879(R) [immediate:1437]
gap () (v880(R) = v881(-);) 
          v880(1) = X64Sar32 v880(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v606(R) v880 [immediate:1435] [immediate:1436]
gap () () 
          v603(R) = X64MovqDecompressAnyTagged : MRI v575(R) [immediate:1434]
gap () () 
          v623(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1433]
gap () () 
          v878(R) = X64MovqDecompressTaggedPointer : MRI v879(R) [immediate:1432]
gap () () 
          v599(R) = X64Lea : M4I v606(R) [immediate:1431]
gap () () 
          v877(R) = X64MovqDecompressAnyTagged : MR4I v878(R) v606(R) [immediate:1430]
gap () () 
          X64Test32 && deoptimize if equal v877 #1 #235 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v877(R) [immediate:1429] v178(R) #234 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          v874(R) = X64MovqDecompressTaggedPointer : MRI v877(R) [immediate:1428]
gap () () 
          v876(R) = X64MovqDecompressTaggedSigned : MRI v877(R) [immediate:1427]
gap () (v875(R) = v876(-);) 
          v875(1) = X64Sar32 v875(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v875 #0 #233 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          v871(R) = X64MovqDecompressTaggedSigned : MRI v874(R) [immediate:1426]
gap () () 
          v869(R) = X64MovqDecompressTaggedPointer : MRI v581(R) [immediate:1425]
gap () () 
          v872(R) = X64MovqDecompressTaggedSigned : MRI v581(R) [immediate:1424]
gap () (v873(R) = v871(-);) 
          v873(1) = X64Sar32 v873(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v871(R) v872 #232 v0(S) v1(-) v2(-) v3(S) v606(-) v581(-)
gap () () 
          v867(R) = X64MovqDecompressAnyTagged : MR4I v869(R) v873(R) [immediate:1423]
gap () () 
          [constant:868] = ArchNop
gap () ([rdx|R|t] = v867(-); [rcx|R|t] = v44(-); [rax|R|w64] = v868(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1422] #-1 #231 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v624(-) = [rax|R|t];) () 
          v854(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1421]
gap () () 
          X64Test32 && deoptimize if equal v854 #1 #230 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          v866(R) = X64Movl : MRI v854(R) [immediate:1420]
gap () () 
          X64Cmp32 && branch if equal v866(R) v530 [immediate:1418] [immediate:1419]
gap () () 
          [constant:865] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v865(R) v866 #229 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          ArchJmp [immediate:1417]
gap () () 
          ArchJmp [immediate:1416]
gap () () 
          v864(R) = X64MovqDecompressTaggedPointer : MRI v854(R) [immediate:1415]
gap () () 
          v863(R) = X64MovqDecompressAnyTagged : MRI v864(R) [immediate:1414]
gap () () 
          X64Test32 && deoptimize if equal v863 #1 #228 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v863(R) [immediate:1413] v184(R) #227 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          v860(R) = X64MovqDecompressTaggedPointer : MRI v863(R) [immediate:1412]
gap () () 
          v862(R) = X64MovqDecompressTaggedSigned : MRI v863(R) [immediate:1411]
gap () (v861(R) = v862(-);) 
          v861(1) = X64Sar32 v861(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v606(R) v861 #226 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          v859(R) = X64MovqDecompressAnyTagged : MR4I v860(R) v606(R) [immediate:1410]
gap () () 
          X64Test32 && deoptimize if equal v859 #1 #225 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v859(R) [immediate:1409] v178(R) #224 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          v856(R) = X64MovqDecompressTaggedPointer : MRI v859(R) [immediate:1408]
gap () () 
          v858(R) = X64MovqDecompressTaggedSigned : MRI v859(R) [immediate:1407]
gap () (v857(R) = v858(-);) 
          v857(1) = X64Sar32 v857(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v857 #1 #223 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          v852(R) = X64MovqDecompressTaggedSigned : MRI v856(R) [immediate:1406]
gap () () 
          v850(R) = X64MovqDecompressTaggedPointer : MRI v854(R) [immediate:1405]
gap () () 
          v853(R) = X64MovqDecompressTaggedSigned : MRI v854(R) [immediate:1404]
gap () (v855(R) = v852(-);) 
          v855(1) = X64Sar32 v855(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v852(R) v853 #222 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v854(-) v854(-)
gap () () 
          v848(R) = X64MovqDecompressAnyTagged : MR4I v850(R) v855(R) [immediate:1403]
gap () () 
          [constant:849] = ArchNop
gap () ([rdx|R|t] = v848(-); [rcx|R|t] = v44(-); [rax|R|w64] = v849(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1402] #-1 #221 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) v624(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v625(-) = [rax|R|t];) () 
          v834(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1401]
gap () () 
          X64Test32 && deoptimize if equal v834 #1 #220 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          v847(R) = X64Movl : MRI v834(R) [immediate:1400]
gap () () 
          X64Cmp32 && branch if equal v847(R) v530 [immediate:1398] [immediate:1399]
gap () () 
          [constant:846] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v846(R) v847 #219 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          ArchJmp [immediate:1397]
gap () () 
          ArchJmp [immediate:1396]
gap () () 
          v845(R) = X64MovqDecompressTaggedPointer : MRI v834(R) [immediate:1395]
gap () () 
          v844(R) = X64MovqDecompressAnyTagged : MRI v845(R) [immediate:1394]
gap () () 
          X64Test32 && deoptimize if equal v844 #1 #218 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v844(R) [immediate:1393] v184(R) #217 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          v840(R) = X64MovqDecompressTaggedPointer : MRI v844(R) [immediate:1392]
gap () () 
          v843(R) = X64MovqDecompressTaggedSigned : MRI v844(R) [immediate:1391]
gap () (v842(R) = v843(-);) 
          v842(1) = X64Sar32 v842(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v606(R) v842 #216 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          v839(R) = X64MovqDecompressAnyTagged : MR4I v840(R) v606(R) [immediate:1390]
gap () () 
          X64Test32 && deoptimize if equal v839 #1 #215 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v839(R) [immediate:1389] v178(R) #214 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          v836(R) = X64MovqDecompressTaggedPointer : MRI v839(R) [immediate:1388]
gap () () 
          v838(R) = X64MovqDecompressTaggedSigned : MRI v839(R) [immediate:1387]
gap () (v837(R) = v838(-);) 
          v837(1) = X64Sar32 v837(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v837 #2 #213 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          v832(R) = X64MovqDecompressTaggedSigned : MRI v836(R) [immediate:1386]
gap () () 
          v830(R) = X64MovqDecompressTaggedPointer : MRI v834(R) [immediate:1385]
gap () () 
          v833(R) = X64MovqDecompressTaggedSigned : MRI v834(R) [immediate:1384]
gap () (v835(R) = v832(-);) 
          v835(1) = X64Sar32 v835(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v832(R) v833 #212 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v834(-) v834(-)
gap () () 
          v828(R) = X64MovqDecompressAnyTagged : MR4I v830(R) v835(R) [immediate:1383]
gap () () 
          [constant:829] = ArchNop
gap () ([rdx|R|t] = v828(-); [rcx|R|t] = v44(-); [rax|R|w64] = v829(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1382] #-1 #211 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) v624(S) v625(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v626(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v623 #1 #210 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v626(-)
gap () () 
          v827(R) = X64MovqDecompressTaggedPointer : MRI v623(R) [immediate:1381]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v827(R) [immediate:1380] #1068 #209 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v626(-)
gap () () 
          [constant:825] = ArchNop
gap () () 
          v826(R) = X64MovqDecompressTaggedPointer : MRI v623(R) [immediate:1379]
gap () () 
          X64Cmp && deoptimize if not equal v825(R) v826 #208 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(-) v624(-) v625(-) v626(-)
gap () () 
          v627(R) = X64MovqDecompressTaggedPointer : MRI v623(R) [immediate:1378]
gap () () 
          v819(R) = X64Movq : MR v80(R)
gap () () 
          [constant:823] = ArchNop
gap () () 
          v824(R) = X64Lea : MRI v819(R) [immediate:1377]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v824(R) [immediate:1375] [immediate:1376]
gap () () 
          ArchJmp [immediate:1374]
gap () ([rdx|R|w64] = v823(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1373] #-1 [rdx|R|w64]
gap (v822(-) = [rax|R|tp];) () 
          v820(R) = X64Lea : MRI v822(R) [immediate:1372]
gap () (v818 = v820(-);) 
          ArchJmp [immediate:1371]
gap () (v818 = v819(-);) 
          ArchJmp [immediate:1370]
gap () () 
          v816(R) = X64Lea : MRI v818(R) [immediate:1369]
gap () () 
          X64Movq : MR v80(R) v816(R)
gap () () 
          v817(R) = X64Lea : MRI v818(R) [immediate:1368]
gap () (v795 = v817(-);) 
          v795(1) = ArchNop v795
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1367] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1365] [immediate:1366]
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1364] v812(R)
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1363] v812(R)
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1362] v812(R)
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1361] v812(R)
gap () () 
          v814(R) = X64Lea : MRI v816(R) [immediate:1360]
gap () () 
          X64Movq : MR v80(R) v814(R)
gap () () 
          v815(R) = X64Lea : MRI v816(R) [immediate:1359]
gap () (v664 = v815(-);) 
          v664(1) = ArchNop v664
gap () () 
          X64MovqCompressTagged : MRI v664(R) [immediate:1358] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v664(R) [immediate:1357] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v664(R) [immediate:1356] v795(R)
gap () () 
          X64MovqCompressTagged : MRI v664(R) [immediate:1354] [immediate:1355]
gap () () 
          v810(R) = X64Lea : MRI v814(R) [immediate:1353]
gap () () 
          X64Movq : MR v80(R) v810(R)
gap () () 
          v813(R) = X64Lea : MRI v814(R) [immediate:1352]
gap () (v780 = v813(-);) 
          v780(1) = ArchNop v780
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1351] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1349] [immediate:1350]
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1348] v812(R)
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1347] v812(R)
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1346] v812(R)
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1345] v812(R)
gap () () 
          v811(R) = X64Lea : MRI v810(R) [immediate:1344]
gap () () 
          X64Movq : MR v80(R) v811(R)
gap () () 
          v809(R) = X64Lea : MRI v810(R) [immediate:1343]
gap () (v665 = v809(-);) 
          v665(1) = ArchNop v665
gap () () 
          X64MovqCompressTagged : MRI v665(R) [immediate:1342] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v665(R) [immediate:1341] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v665(R) [immediate:1340] v780(R)
gap () () 
          X64MovqCompressTagged : MRI v665(R) [immediate:1338] [immediate:1339]
gap () () 
          X64Test32 && deoptimize if equal v624 #1 #207 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1335] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1336] [immediate:1337]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v624(R) [immediate:1331] v178(R) #206 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1332] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1333] [immediate:1334]
gap () () 
          v806(R) = X64MovqDecompressTaggedPointer : MRI v624(R) [immediate:1330]
gap () () 
          v808(R) = X64MovqDecompressTaggedSigned : MRI v624(R) [immediate:1329]
gap () (v807(R) = v808(-);) 
          v807(1) = X64Sar32 v807(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v807 #0 #205 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1326] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1327] [immediate:1328]
gap () () 
          v802(R) = X64MovqDecompressTaggedSigned : MRI v806(R) [immediate:1325]
gap () () 
          X64Test32 && deoptimize if equal v625 #1 #204 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1322] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1323] [immediate:1324]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v625(R) [immediate:1318] v178(R) #203 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1319] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1320] [immediate:1321]
gap () () 
          v789(R) = X64MovqDecompressTaggedPointer : MRI v625(R) [immediate:1317]
gap () () 
          v805(R) = X64MovqDecompressTaggedSigned : MRI v625(R) [immediate:1316]
gap () (v804(R) = v805(-);) 
          v804(1) = X64Sar32 v804(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v804 #0 #202 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1313] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1314] [immediate:1315]
gap () () 
          v803(R) = X64MovqDecompressTaggedSigned : MRI v789(R) [immediate:1312]
gap () (v801(R) = v803(-);) 
          v801(1) = X64Sar32 v801(R) #1
gap () (v800(R) = v802(-);) 
          v800(1) = X64Sar32 v800(R) #1
gap () (v799(R) = v800(-);) 
          v799(1) = X64Sub32 v799(R) v801
gap () (v798(R) = v799(-);) 
          v798(1) = X64Add32 && deoptimize if overflow v798(R) v799(R) #201 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1309] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1310] [immediate:1311]
gap () (v797 = v798(-);) 
          v797(1) = ArchNop v797
gap () () 
          X64MovqCompressTagged : MRI v664(R) [immediate:1307] [immediate:1308]
gap () () 
          X64MovqCompressTagged : MRI v795(R) [immediate:1306] v797(R)
gap () () 
          X64Test32 && deoptimize if equal v626 #1 #200 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1303] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1304] [immediate:1305]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v626(R) [immediate:1299] v178(R) #199 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1300] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1301] [immediate:1302]
gap () () 
          v792(R) = X64MovqDecompressTaggedPointer : MRI v626(R) [immediate:1298]
gap () () 
          v794(R) = X64MovqDecompressTaggedSigned : MRI v626(R) [immediate:1297]
gap () (v793(R) = v794(-);) 
          v793(1) = X64Sar32 v793(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v793 #0 #198 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1294] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1295] [immediate:1296]
gap () () 
          v787(R) = X64MovqDecompressTaggedSigned : MRI v792(R) [immediate:1293]
gap () () 
          v791(R) = X64MovqDecompressTaggedSigned : MRI v625(R) [immediate:1292]
gap () (v790(R) = v791(-);) 
          v790(1) = X64Sar32 v790(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v790 #0 #197 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1289] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1290] [immediate:1291]
gap () () 
          v788(R) = X64MovqDecompressTaggedSigned : MRI v789(R) [immediate:1288]
gap () (v786(R) = v788(-);) 
          v786(1) = X64Sar32 v786(R) #1
gap () (v785(R) = v787(-);) 
          v785(1) = X64Sar32 v785(R) #1
gap () (v784(R) = v785(-);) 
          v784(1) = X64Sub32 v784(R) v786
gap () (v783(R) = v784(-);) 
          v783(1) = X64Add32 && deoptimize if overflow v783(R) v784(R) #196 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1285] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) [immediate:1286] [immediate:1287]
gap () (v782 = v783(-);) 
          v782(1) = ArchNop v782
gap () () 
          X64MovqCompressTagged : MRI v665(R) [immediate:1283] [immediate:1284]
gap () () 
          X64MovqCompressTagged : MRI v780(R) [immediate:1282] v782(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1280] [immediate:1281]
gap () () 
          [constant:779] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v779(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1278] #-1 #195 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) [immediate:1279] v624(S) v625(S) v626(S) v627(S) v664(S) v665(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1277]
gap () () 
          ArchJmp [immediate:1276]
gap () (v710 = v35(-);) 
          ArchJmp [immediate:1275]
gap () () 
          X64Cmp32 && branch if unsigned less than v710 #3 [immediate:1273] [immediate:1274]
gap () () 
          v775(R) = X64MovqDecompressTaggedPointer : MRI v624(R) [immediate:1272]
gap () () 
          v777(R) = X64MovqDecompressTaggedSigned : MRI v624(R) [immediate:1271]
gap () (v776(R) = v777(-);) 
          v776(1) = X64Sar32 v776(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v710(R) v776 #194 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1269] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1270]
gap () () 
          v770(R) = X64MovqDecompressTaggedSigned : MR4I v775(R) v710(R) [immediate:1268]
gap () () 
          v772(R) = X64MovqDecompressTaggedPointer : MRI v625(R) [immediate:1267]
gap () () 
          v774(R) = X64MovqDecompressTaggedSigned : MRI v625(R) [immediate:1266]
gap () (v773(R) = v774(-);) 
          v773(1) = X64Sar32 v773(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v710(R) v773 #193 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1264] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1265]
gap () () 
          v771(R) = X64MovqDecompressTaggedSigned : MR4I v772(R) v710(R) [immediate:1263]
gap () (v769(R) = v771(-);) 
          v769(1) = X64Sar32 v769(R) #1
gap () (v768(R) = v770(-);) 
          v768(1) = X64Sar32 v768(R) #1
gap () (v767(R) = v768(-);) 
          v767(1) = X64Sub32 v767(R) v769
gap () () 
          v758(R) = X64MovqDecompressTaggedPointer : MRI v664(R) [immediate:1262]
gap () () 
          v765(R) = X64MovqDecompressTaggedSigned : MRI v664(R) [immediate:1261]
gap () (v750(R) = v767(-);) 
          v750(1) = X64Add32 && deoptimize if overflow v750(R) v767(R) #192 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1259] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1260]
gap () () 
          v766(R) = X64MovqDecompressTaggedSigned : MRI v758(R) [immediate:1258]
gap () (v763(R) = v766(-);) 
          v763(1) = X64Sar32 v763(R) #1
gap () (v753(R) = v765(-);) 
          v753(1) = X64Sar32 v753(R) #1
gap () () 
          v764(R) = X64Lea32 : MRI v753(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v710(R) v764 #191 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1256] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1257]
gap () () 
          X64Cmp32 && branch if unsigned less than v710(R) v763 [immediate:1254] [immediate:1255]
gap () () 
          [constant:761] = ArchNop
gap () () 
          v762(R) = X64Lea32 : MR1 v710(R) v710(R)
gap () ([rax|R|t] = v664(-); [rbx|R|w32] = v762(-); [rsi|R|w64] = v761(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1253] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v759(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v759 #1 #190 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1251] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1252]
gap () (v754 = v759(-);) 
          ArchJmp [immediate:1250]
gap () (v754 = v758(-);) 
          ArchJmp [immediate:1249]
gap () () 
          v757(R) = X64Movl : MRI v754(R) [immediate:1248]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v757(R) [immediate:1246] [immediate:1247]
gap () () 
          [constant:756] = ArchNop
gap () ([rax|R|t] = v664(-); [rsi|R|w64] = v756(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1245] #-1 [rax|R|t] [rsi|R|w64]
gap (v755(-) = [rax|R|t];) (v747 = v755(-);) 
          ArchJmp [immediate:1244]
gap () (v747 = v754(-);) 
          ArchJmp [immediate:1243]
gap () () 
          v713(R) = X64Lea32 : MRI v710(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v710(R) v753 [immediate:1241] [immediate:1242]
gap () () 
          v752(R) = X64Lea32 : MR1 v713(R) v713(R)
gap () () 
          X64MovqCompressTagged : MRI v664(R) [immediate:1240] v752(R)
gap () () 
          ArchJmp [immediate:1239]
gap () () 
          ArchJmp [immediate:1238]
gap () (v749 = v750(-);) 
          v749(1) = ArchNop v749
gap () () 
          X64MovqCompressTagged : MR4I v747(R) v710(R) [immediate:1237] v749(R)
gap () () 
          v744(R) = X64MovqDecompressTaggedPointer : MRI v626(R) [immediate:1236]
gap () () 
          v746(R) = X64MovqDecompressTaggedSigned : MRI v626(R) [immediate:1235]
gap () (v745(R) = v746(-);) 
          v745(1) = X64Sar32 v745(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v710(R) v745 #189 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1234] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) v710(-)
gap () () 
          v739(R) = X64MovqDecompressTaggedSigned : MR4I v744(R) v710(R) [immediate:1233]
gap () () 
          v741(R) = X64MovqDecompressTaggedPointer : MRI v625(R) [immediate:1232]
gap () () 
          v743(R) = X64MovqDecompressTaggedSigned : MRI v625(R) [immediate:1231]
gap () (v742(R) = v743(-);) 
          v742(1) = X64Sar32 v742(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v710(R) v742 #188 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1230] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) v710(-)
gap () () 
          v740(R) = X64MovqDecompressTaggedSigned : MR4I v741(R) v710(R) [immediate:1229]
gap () (v738(R) = v740(-);) 
          v738(1) = X64Sar32 v738(R) #1
gap () (v737(R) = v739(-);) 
          v737(1) = X64Sar32 v737(R) #1
gap () (v736(R) = v737(-);) 
          v736(1) = X64Sub32 v736(R) v738
gap () () 
          v727(R) = X64MovqDecompressTaggedPointer : MRI v665(R) [immediate:1228]
gap () () 
          v734(R) = X64MovqDecompressTaggedSigned : MRI v665(R) [immediate:1227]
gap () (v719(R) = v736(-);) 
          v719(1) = X64Add32 && deoptimize if overflow v719(R) v736(R) #187 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1226] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) v710(-)
gap () () 
          v735(R) = X64MovqDecompressTaggedSigned : MRI v727(R) [immediate:1225]
gap () (v732(R) = v735(-);) 
          v732(1) = X64Sar32 v732(R) #1
gap () (v722(R) = v734(-);) 
          v722(1) = X64Sar32 v722(R) #1
gap () () 
          v733(R) = X64Lea32 : MRI v722(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v710(R) v733 #186 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1224] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) v710(-)
gap () () 
          X64Cmp32 && branch if unsigned less than v710(R) v732 [immediate:1222] [immediate:1223]
gap () () 
          [constant:730] = ArchNop
gap () () 
          v731(R) = X64Lea32 : MR1 v710(R) v710(R)
gap () ([rax|R|t] = v665(-); [rbx|R|w32] = v731(-); [rsi|R|w64] = v730(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1221] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v728(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v728 #1 #185 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1220] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) v710(-)
gap () (v723 = v728(-);) 
          ArchJmp [immediate:1219]
gap () (v723 = v727(-);) 
          ArchJmp [immediate:1218]
gap () () 
          v726(R) = X64Movl : MRI v723(R) [immediate:1217]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v726(R) [immediate:1215] [immediate:1216]
gap () () 
          [constant:725] = ArchNop
gap () ([rax|R|t] = v665(-); [rsi|R|w64] = v725(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1214] #-1 [rax|R|t] [rsi|R|w64]
gap (v724(-) = [rax|R|t];) (v715 = v724(-);) 
          ArchJmp [immediate:1213]
gap () (v715 = v723(-);) 
          ArchJmp [immediate:1212]
gap () () 
          X64Cmp32 && branch if unsigned less than v710(R) v722 [immediate:1210] [immediate:1211]
gap () () 
          v721(R) = X64Lea32 : MR1 v713(R) v713(R)
gap () () 
          X64MovqCompressTagged : MRI v665(R) [immediate:1209] v721(R)
gap () () 
          ArchJmp [immediate:1208]
gap () () 
          ArchJmp [immediate:1207]
gap () (v718 = v719(-);) 
          v718(1) = ArchNop v718
gap () () 
          X64MovqCompressTagged : MR4I v715(R) v710(R) [immediate:1206] v718(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1204] [immediate:1205]
gap () () 
          [constant:714] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v714(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1202] #-1 #184 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) [immediate:1203] v624(S) v625(S) v626(S) v627(S) v664(S) v665(S) v713(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1201]
gap () () 
          ArchJmp [immediate:1200]
gap () (v710 = v713(-);) 
          ArchJmp [immediate:1199]
gap () () 
          v663(R) = X64MovqDecompressAnyTagged : MRI v627(R) [immediate:1198]
gap () () 
          X64Test32 && deoptimize if equal v663 #1 #183 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1196] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1197]
gap () () 
          v711(R) = X64MovqDecompressTaggedPointer : MRI v663(R) [immediate:1195]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v711(R) [immediate:1192] #1068 #182 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1193] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1194]
gap () () 
          [constant:708] = ArchNop
gap () () 
          v709(R) = X64MovqDecompressTaggedPointer : MRI v663(R) [immediate:1191]
gap () () 
          X64Cmp && deoptimize if not equal v708(R) v709 #181 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1189] v624(-) v625(-) v626(-) v627(S) v664(-) v665(-) v710(-) [immediate:1190]
gap () () 
          v666(R) = X64Movl : MRI v663(R) [immediate:1188]
gap () () 
          v703(R) = X64Movq : MR v80(R)
gap () () 
          v707(R) = X64Lea : MRI v703(R) [immediate:1187]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v707(R) [immediate:1185] [immediate:1186]
gap () () 
          ArchJmp [immediate:1184]
gap () ([rdx|R|w64] = v197(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1183] #-1 [rdx|R|w64]
gap (v706(-) = [rax|R|tp];) () 
          v704(R) = X64Lea : MRI v706(R) [immediate:1182]
gap () (v702 = v704(-);) 
          ArchJmp [immediate:1181]
gap () (v702 = v703(-);) 
          ArchJmp [immediate:1180]
gap () () 
          v699(R) = X64Lea : MRI v702(R) [immediate:1179]
gap () () 
          X64Movq : MR v80(R) v699(R)
gap () () 
          v701(R) = X64Lea : MRI v702(R) [immediate:1178]
gap () (v621 = v701(-);) 
          v621(1) = ArchNop v621
gap () () 
          X64MovqCompressTagged : MRI v621(R) [immediate:1177] v190(R)
gap () () 
          X64MovqCompressTagged : MRI v621(R) [immediate:1175] [immediate:1176]
gap () () 
          X64Movsd : MRI v621(R) [immediate:1174] v189(R)
gap () () 
          X64Movsd : MRI v621(R) [immediate:1173] v189(R)
gap () () 
          X64Movsd : MRI v621(R) [immediate:1172] v189(R)
gap () () 
          X64Movsd : MRI v621(R) [immediate:1171] v189(R)
gap () () 
          v700(R) = X64Lea : MRI v699(R) [immediate:1170]
gap () () 
          X64Movq : MR v80(R) v700(R)
gap () () 
          v698(R) = X64Lea : MRI v699(R) [immediate:1169]
gap () (v600 = v698(-);) 
          v600(1) = ArchNop v600
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1168] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1167] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1166] v621(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1164] [immediate:1165]
gap () () 
          v661(R) = X64MovqDecompressTaggedPointer : MRI v664(R) [immediate:1163]
gap () () 
          v697(R) = X64MovqDecompressTaggedSigned : MRI v664(R) [immediate:1162]
gap () (v681(R) = v697(-);) 
          v681(1) = X64Sar32 v681(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v681 #1 #180 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1158] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1159] v664(-) v665(-) v666(S) v600(-) [immediate:1160] [immediate:1161]
gap () () 
          v692(R) = X64MovqDecompressTaggedSigned : MRI v661(R) [immediate:1157]
gap () () 
          v660(R) = X64MovqDecompressTaggedPointer : MRI v665(R) [immediate:1156]
gap () () 
          v696(R) = X64MovqDecompressTaggedSigned : MRI v665(R) [immediate:1155]
gap () (v682(R) = v696(-);) 
          v682(1) = X64Sar32 v682(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v682 #2 #179 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1151] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1152] v664(-) v665(-) v666(S) v600(-) [immediate:1153] [immediate:1154]
gap () () 
          v693(R) = X64MovqDecompressTaggedSigned : MRI v660(R) [immediate:1150]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v681 #2 #178 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1146] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1147] v664(-) v665(-) v666(S) v600(-) [immediate:1148] [immediate:1149]
gap () () 
          v694(R) = X64MovqDecompressTaggedSigned : MRI v661(R) [immediate:1145]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v682 #1 #177 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1141] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1142] v664(-) v665(-) v666(S) v600(-) [immediate:1143] [immediate:1144]
gap () () 
          v695(R) = X64MovqDecompressTaggedSigned : MRI v660(R) [immediate:1140]
gap () (v691(R) = v695(-);) 
          v691(1) = X64Sar32 v691(R) #1
gap () (v690(R) = v694(-);) 
          v690(1) = X64Sar32 v690(R) #1
gap () (v689(R) = v693(-);) 
          v689(1) = X64Sar32 v689(R) #1
gap () (v688(R) = v692(-);) 
          v688(1) = X64Sar32 v688(R) #1
gap () () 
          v687(R) = SSEInt32ToFloat64 v691
gap () () 
          v675(R) = SSEInt32ToFloat64 v690
gap () () 
          v676(R) = SSEInt32ToFloat64 v689
gap () () 
          v686(R) = SSEInt32ToFloat64 v688
gap () () 
          v685(R) = AVXFloat64Mul v687(R) v675
gap () () 
          v684(R) = AVXFloat64Mul v686(R) v676
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1138] [immediate:1139]
gap () () 
          v683(R) = AVXFloat64Sub v684(R) v685
gap () () 
          X64Movsd : MRI v621(R) [immediate:1137] v683(R)
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v682 #0 #176 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1133] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1134] v664(-) v665(-) v666(S) v600(-) [immediate:1135] [immediate:1136]
gap () () 
          v679(R) = X64MovqDecompressTaggedSigned : MRI v660(R) [immediate:1132]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v681 #0 #175 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1128] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1129] v664(-) v665(-) v666(S) v600(-) [immediate:1130] [immediate:1131]
gap () () 
          v680(R) = X64MovqDecompressTaggedSigned : MRI v661(R) [immediate:1127]
gap () (v668(R) = v680(-);) 
          v668(1) = X64Sar32 v668(R) #1
gap () (v678(R) = v679(-);) 
          v678(1) = X64Sar32 v678(R) #1
gap () () 
          v677(R) = SSEInt32ToFloat64 v668
gap () () 
          v674(R) = SSEInt32ToFloat64 v678
gap () () 
          v673(R) = AVXFloat64Mul v676(R) v677
gap () () 
          v672(R) = AVXFloat64Mul v674(R) v675
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1125] [immediate:1126]
gap () () 
          v671(R) = AVXFloat64Sub v672(R) v673
gap () () 
          X64Movsd : MRI v621(R) [immediate:1124] v671(R)
gap () () 
          v670(R) = X64MovqDecompressTaggedSigned : MRI v660(R) [immediate:1123]
gap () (v667(R) = v670(-);) 
          v667(1) = X64Sar32 v667(R) #1
gap () (v669(R) = v668(-);) 
          v669(1) = X64Imul32 && deoptimize if overflow v669(R) v667 #174 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1119] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1120] v664(-) v665(-) v666(S) v600(-) [immediate:1121] [immediate:1122]
gap () (v653 = v669(-);) 
          v653(1) = ArchNop v653
gap () () 
          X64Cmp32 && branch if equal v653 #0 [immediate:1117] [immediate:1118]
gap () () 
          ArchJmp [immediate:1116]
gap () (v662(R) = v667(-);) 
          v662(1) = X64Or32 v662(R) v668
gap () () 
          X64Cmp32 && deoptimize if signed less than v662 #0 #173 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1112] v624(-) v625(-) v626(-) v627(S) v663(S) [immediate:1113] v664(-) v665(-) v666(S) v600(-) [immediate:1114] [immediate:1115]
gap () () 
          ArchJmp [immediate:1111]
gap () () 
          v658(R) = X64MovqDecompressTaggedSigned : MRI v661(R) [immediate:1110]
gap () () 
          v659(R) = X64MovqDecompressTaggedSigned : MRI v660(R) [immediate:1109]
gap () (v657(R) = v659(-);) 
          v657(1) = X64Sar32 v657(R) #1
gap () (v656(R) = v658(-);) 
          v656(1) = X64Sar32 v656(R) #1
gap () () 
          v654(R) = SSEInt32ToFloat64 v657
gap () () 
          v655(R) = SSEInt32ToFloat64 v656
gap () () 
          v652(R) = AVXFloat64Mul v654(R) v655
gap () () 
          v651(R) = SSEInt32ToFloat64 v653
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1107] [immediate:1108]
gap () () 
          v648(R) = AVXFloat64Sub v651(R) v652
gap () () 
          X64Movsd : MRI v621(R) [immediate:1106] v648(R)
gap () () 
          [constant:650] = ArchNop
gap () () 
          v641(R) = X64MovqDecompressTaggedPointer : MRI v650(R) [immediate:1105]
gap () () 
          v642(R) = X64Movsd : MRI v621(R) [immediate:1104]
gap () () 
          v649(R) = X64Movsd : MRI v621(R) [immediate:1103]
gap () () 
          v646(R) = AVXFloat64Mul v649(R) v649(R)
gap () () 
          v647(R) = AVXFloat64Mul v642(R) v642(R)
gap () () 
          v644(R) = AVXFloat64Mul v648(R) v648(R)
gap () () 
          v645(R) = AVXFloat64Add v646(R) v647
gap () () 
          v643(R) = AVXFloat64Add v644(R) v645
gap () () 
          v629(R) = SSEFloat64Sqrt v643
gap () () 
          [constant:640] = ArchNop
gap () () 
          v639(R) = AVXFloat64Div v642(R) v629
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v641(R) [immediate:1101] v640(R) #172 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v623(S) [immediate:1102] v624(-) v625(-) v626(-) v627(S) v600(-)
gap () (v638(R) = v639(-);) 
          v638(1) = SSEFloat64SilenceNaN v638(R)
gap () () 
          X64Movsd : MRI v621(R) [immediate:1100] v638(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1098] [immediate:1099]
gap () () 
          [constant:637] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v637(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1096] #-1 #171 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) [immediate:1097] v624(S) v625(S) v626(S) v627(S) v600(S) #1 v629(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1095]
gap () () 
          ArchJmp [immediate:1094]
gap () (v631 = v35(-);) 
          ArchJmp [immediate:1093]
gap () () 
          X64Cmp32 && branch if unsigned less than v631 #3 [immediate:1091] [immediate:1092]
gap () () 
          v635(R) = X64Movsd : MR8I v621(R) v631(R) [immediate:1090]
gap () () 
          v634(R) = AVXFloat64Div v635(R) v629
gap () (v633(R) = v634(-);) 
          v633(1) = SSEFloat64SilenceNaN v633(R)
gap () () 
          X64Movsd : MR8I v621(R) v631(R) [immediate:1089] v633(R)
gap () () 
          v628(R) = X64Lea32 : MRI v631(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1087] [immediate:1088]
gap () () 
          [constant:630] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v630(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1085] #-1 #170 v0(S) v1(S) v2(S) v3(S) v606(S) v603(S) v623(S) [immediate:1086] v624(S) v625(S) v626(S) v627(S) v600(S) v628(S) v629(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1084]
gap () () 
          ArchJmp [immediate:1083]
gap () (v631 = v628(-);) 
          ArchJmp [immediate:1082]
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1080] [immediate:1081]
gap () () 
          X64Movsd : MRI v621(R) [immediate:1079] v430(R)
gap () () 
          X64Test32 && deoptimize if equal v603 #1 #169 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v600(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v603(R) [immediate:1078] v184(R) #168 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v600(-)
gap () () 
          v612(R) = X64MovqDecompressTaggedPointer : MRI v603(R) [immediate:1077]
gap () () 
          v619(R) = X64MovqDecompressTaggedSigned : MRI v603(R) [immediate:1076]
gap () () 
          v620(R) = X64MovqDecompressTaggedSigned : MRI v612(R) [immediate:1075]
gap () (v617(R) = v620(-);) 
          v617(1) = X64Sar32 v617(R) #1
gap () (v607(R) = v619(-);) 
          v607(1) = X64Sar32 v607(R) #1
gap () () 
          v618(R) = X64Lea32 : MRI v607(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v606(R) v618 #167 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v600(-)
gap () () 
          X64Cmp32 && branch if unsigned less than v606(R) v617 [immediate:1073] [immediate:1074]
gap () () 
          [constant:615] = ArchNop
gap () () 
          v616(R) = X64Lea32 : MR1 v606(R) v606(R)
gap () ([rax|R|t] = v603(-); [rbx|R|w32] = v616(-); [rsi|R|w64] = v615(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1072] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v613(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v613 #1 #166 v0(S) v1(-) v2(-) v3(S) v606(-) v603(-) v600(-)
gap () (v608 = v613(-);) 
          ArchJmp [immediate:1071]
gap () (v608 = v612(-);) 
          ArchJmp [immediate:1070]
gap () () 
          v611(R) = X64Movl : MRI v608(R) [immediate:1069]
gap () () 
          X64Cmp32 : Root && branch if equal #208 v611(R) [immediate:1067] [immediate:1068]
gap () () 
          [constant:610] = ArchNop
gap () ([rax|R|t] = v603(-); [rsi|R|w64] = v610(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1066] #-1 [rax|R|t] [rsi|R|w64]
gap (v609(-) = [rax|R|t];) (v598 = v609(-);) 
          ArchJmp [immediate:1065]
gap () (v598 = v608(-);) 
          ArchJmp [immediate:1064]
gap () () 
          v596(R) = X64Lea32 : MRI v606(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v606(R) v607 [immediate:1062] [immediate:1063]
gap () () 
          v605(R) = X64Lea32 : MR1 v596(R) v596(R)
gap () () 
          X64MovqCompressTagged : MRI v603(R) [immediate:1061] v605(R)
gap () () 
          ArchJmp [immediate:1060]
gap () () 
          ArchJmp [immediate:1059]
gap () () 
          ArchStoreWithWriteBarrier : MR1 v598(R) v599(R) v600(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1057] [immediate:1058]
gap () () 
          [constant:597] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v597(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1056] #-1 #165 v0(S) v1(S) v2(S) v3(S) v596(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1055]
gap () () 
          ArchJmp [immediate:1054]
gap () (v606 = v596(-);) 
          ArchJmp [immediate:1053]
gap () () 
          v589(R) = X64Movq : MR v80(R)
gap () () 
          [constant:593] = ArchNop
gap () () 
          v594(R) = X64Lea : MRI v589(R) [immediate:1052]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v594(R) [immediate:1050] [immediate:1051]
gap () () 
          ArchJmp [immediate:1049]
gap () ([rdx|R|w64] = v593(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1048] #-1 [rdx|R|w64]
gap (v592(-) = [rax|R|tp];) () 
          v590(R) = X64Lea : MRI v592(R) [immediate:1047]
gap () (v588 = v590(-);) 
          ArchJmp [immediate:1046]
gap () (v588 = v589(-);) 
          ArchJmp [immediate:1045]
gap () () 
          v569(R) = X64Lea : MRI v588(R) [immediate:1044]
gap () () 
          X64Movq : MR v80(R) v569(R)
gap () () 
          v587(R) = X64Lea : MRI v588(R) [immediate:1043]
gap () (v576 = v587(-);) 
          v576(1) = ArchNop v576
gap () () 
          X64MovqCompressTagged : MRI v576(R) [immediate:1042] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v576(R) [immediate:1041] v185(R)
gap () () 
          [constant:586] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v576(R) [immediate:1040] v586(R)
gap () () 
          X64MovqCompressTagged : MRI v576(R) [immediate:1038] [immediate:1039]
gap () () 
          X64Cmp32 : MRI && branch if equal v581(R) [immediate:1035] v530(R) [immediate:1036] [immediate:1037]
gap () () 
          [constant:582] = ArchNop
gap () () 
          [constant:585] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v581(R) [immediate:1034] v585(R) #164 v0(S) v1(-) v2(-) v3(S) v581(-) v576(-)
gap () () 
          ArchStoreWithWriteBarrier : MRI v581(R) [immediate:1033] v582(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v575(R) [immediate:1032] v576(R)
gap () () 
          ArchJmp [immediate:1031]
gap () () 
          ArchStoreWithWriteBarrier : MRI v575(R) [immediate:1030] v576(R)
gap () () 
          ArchJmp [immediate:1029]
gap () () 
          v524(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:1028]
gap () (v573(R) = v574(-);) 
          v573(1) = X64Imul32 && deoptimize if overflow v573(R) #18 #163 v0(S) v1(-) v2(-) v3(S) v524(-) v2(-)
gap () (v566 = v573(-);) 
          v566(1) = ArchNop v566
gap () (v572(R) = v566(-);) 
          v572(1) = X64Add32 && branch if overflow v572(R) v566(R) [immediate:1024] [immediate:1025] [immediate:1026] [immediate:1027]
gap () (v571 = v572(-);) 
          v571(1) = ArchNop v571
gap () (v532 = v571(-);) 
          ArchJmp [immediate:1023]
gap () () 
          [constant:567] = ArchNop
gap () () 
          v570(R) = X64Lea : MRI v569(R) [immediate:1022]
gap () () 
          X64Movq : MR v80(R) v570(R)
gap () () 
          v568(R) = X64Lea : MRI v569(R) [immediate:1021]
gap () (v564 = v568(-);) 
          v564(1) = ArchNop v564
gap () () 
          X64MovqCompressTagged : MRI v564(R) [immediate:1020] v567(R)
gap () () 
          v565(R) = SSEInt32ToFloat64 v566
gap () () 
          X64Movsd : MRI v564(R) [immediate:1019] v565(R)
gap () (v532 = v564(-);) 
          ArchJmp [immediate:1018]
gap () () 
          X64Test32 && deoptimize if equal v524 #1 #162 v0(S) v1(-) v2(-) v3(S) v524(-) v2(-)
gap () () 
          X64Cmp32 : MRI && branch if equal v524(R) [immediate:1015] v530(R) [immediate:1016] [immediate:1017]
gap () () 
          [constant:559] = ArchNop
gap () () 
          [constant:538] = ArchNop
gap () () 
          [constant:562] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v524(R) [immediate:1014] v562(R) #161 v0(S) v1(-) v2(-) v3(S) v524(-) v2(-)
gap () () 
          v561(R) = X64MovqDecompressTaggedPointer : MRI v524(R) [immediate:1013]
gap () () 
          v544(R) = X64Movl : MRI v561(R) [immediate:1012]
gap () () 
          v543(R) = X64Movl : MRI v561(R) [immediate:1011]
gap () () 
          v542(R) = X64Movl : MRI v561(R) [immediate:1010]
gap () () 
          v554(R) = X64MovqDecompressTaggedSigned : MRI v561(R) [immediate:1009]
gap () () 
          v555(R) = X64Movq : MR v80(R)
gap () () 
          v560(R) = X64Lea : MRI v555(R) [immediate:1008]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v560(R) [immediate:1006] [immediate:1007]
gap () () 
          ArchJmp [immediate:1005]
gap () ([rdx|R|w64] = v559(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1004] #-1 [rdx|R|w64]
gap (v558(-) = [rax|R|tp];) () 
          v556(R) = X64Lea : MRI v558(R) [immediate:1003]
gap () (v551 = v556(-);) 
          ArchJmp [immediate:1002]
gap () (v551 = v555(-);) 
          ArchJmp [immediate:1001]
gap () () 
          [constant:541] = ArchNop
gap () () 
          [constant:547] = ArchNop
gap () (v553(R) = v554(-);) 
          v553(1) = X64Sar32 v553(R) #1
gap () () 
          v552(R) = X64Lea : MRI v551(R) [immediate:1000]
gap () (v550(R) = v553(-);) 
          v550(1) = X64And32 v550(R) #1073740800
gap () () 
          X64Movq : MR v80(R) v552(R)
gap () () 
          v549(R) = X64Lea : MRI v551(R) [immediate:999]
gap () (v548(R) = v550(-);) 
          v548(1) = X64Or32 v548(R) #6
gap () (v535 = v549(-);) 
          v535(1) = ArchNop v535
gap () () 
          v546(R) = X64Lea32 : MR1 v548(R) v548(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:998] v547(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:997] v546(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:996] v544(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:995] v543(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:994] v542(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:993] v541(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:992] v541(R)
gap () () 
          X64MovqCompressTagged : MRI v535(R) [immediate:991] v532(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v524(R) [immediate:990] v538(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v524(R) [immediate:989] v535(R)
gap () () 
          ArchJmp [immediate:988]
gap () () 
          v531(R) = X64MovqDecompressTaggedPointer : MRI v524(R) [immediate:987]
gap () () 
          ArchStoreWithWriteBarrier : MRI v531(R) [immediate:986] v532(R)
gap () () 
          ArchJmp [immediate:985]
gap () () 
          v529(R) = X64Movl : MRI v524(R) [immediate:984]
gap () () 
          X64Cmp32 && branch if equal v530(R) v529 [immediate:982] [immediate:983]
gap () () 
          [constant:528] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v528(R) v529 #160 v0(S) v1(-) v2(-) v3(S) [immediate:981] v524(-)
gap () () 
          ArchJmp [immediate:980]
gap () () 
          ArchJmp [immediate:979]
gap () () 
          v527(R) = X64MovqDecompressTaggedPointer : MRI v524(R) [immediate:978]
gap () () 
          v526(R) = X64Movl : MRI v527(R) [immediate:977]
gap () () 
          X64Test32 && deoptimize if not equal v526 #1 #159 v0(S) v1(-) v2(-) v3(S) [immediate:976] v524(-)
gap () () 
          X64Cmp32 && branch if signed greater than v526 [immediate:973] [immediate:974] [immediate:975]
gap () () 
          ArchJmp [immediate:972]
gap () () 
          [constant:496] = ArchNop
gap () () 
          v509(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:971]
gap () () 
          X64Test32 && deoptimize if equal v509 #1 #158 v0(S) v1(-) v2(-) v3(S) [immediate:970] v524(-)
gap () () 
          v525(R) = X64MovqDecompressTaggedPointer : MRI v509(R) [immediate:969]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v525(R) [immediate:967] #1068 #157 v0(S) v1(-) v2(-) v3(S) [immediate:968] v524(-)
gap () () 
          v523(R) = X64MovqDecompressTaggedPointer : MRI v509(R) [immediate:966]
gap () () 
          X64Cmp && deoptimize if not equal v523(R) v496 #156 v0(S) v1(-) v2(-) v3(S) [immediate:965] v524(-)
gap () () 
          v510(R) = X64MovqDecompressTaggedPointer : MRI v509(R) [immediate:964]
gap () () 
          v518(R) = X64Movq : MR v80(R)
gap () () 
          v522(R) = X64Lea : MRI v518(R) [immediate:963]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v522(R) [immediate:961] [immediate:962]
gap () () 
          ArchJmp [immediate:960]
gap () ([rdx|R|w64] = v494(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:959] #-1 [rdx|R|w64]
gap (v521(-) = [rax|R|tp];) () 
          v519(R) = X64Lea : MRI v521(R) [immediate:958]
gap () (v517 = v519(-);) 
          ArchJmp [immediate:957]
gap () (v517 = v518(-);) 
          ArchJmp [immediate:956]
gap () () 
          [constant:483] = ArchNop
gap () () 
          [constant:482] = ArchNop
gap () () 
          v514(R) = X64Lea : MRI v517(R) [immediate:955]
gap () () 
          X64Movq : MR v80(R) v514(R)
gap () () 
          v516(R) = X64Lea : MRI v517(R) [immediate:954]
gap () (v512 = v516(-);) 
          v512(1) = ArchNop v512
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:953] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:951] [immediate:952]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:949] [immediate:950]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:947] [immediate:948]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:945] [immediate:946]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:943] [immediate:944]
gap () () 
          v515(R) = X64Lea : MRI v514(R) [immediate:942]
gap () () 
          X64Movq : MR v80(R) v515(R)
gap () () 
          v513(R) = X64Lea : MRI v514(R) [immediate:941]
gap () (v511 = v513(-);) 
          v511(1) = ArchNop v511
gap () () 
          X64MovqCompressTagged : MRI v511(R) [immediate:940] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v511(R) [immediate:939] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v511(R) [immediate:938] v512(R)
gap () () 
          X64MovqCompressTagged : MRI v511(R) [immediate:936] [immediate:937]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:934] [immediate:935]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:932] [immediate:933]
gap () () 
          X64MovqCompressTagged : MRI v512(R) [immediate:930] [immediate:931]
gap () ([rdx|R|t] = v480(-); [rcx|R|t] = v44(-); [rax|R|t] = v511(-); [rdi|R|w64] = v482(-); [rbx|R|t] = v483(-); [rsi|R|tp] = v510(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:924] #-1 #155 v0(S) v1(S) v2(S) v3(S) [immediate:925] v509(S) [immediate:926] [immediate:927] [immediate:928] [immediate:929] v510(S) [rdx|R|t] [rcx|R|t] [rax|R|t] [rdi|R|w64] [rbx|R|t] [rsi|R|tp]
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:922] [immediate:923]
gap () () 
          [constant:507] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v507(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:921] #-1 #154 v0(S) v1(S) v2(S) v3(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:920]
gap () () 
          ArchJmp [immediate:919]
gap () () 
          [constant:505] = ArchNop
gap () (v476 = v35(-);) 
          ArchJmp [immediate:918]
gap () () 
          v498(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:917]
gap () () 
          X64Test32 && deoptimize if equal v498 #1 #153 v0(S) v1(-) v2(-) v3(S) v476(-) v498(-)
gap () () 
          v504(R) = X64Movl : MRI v498(R) [immediate:916]
gap () () 
          X64Cmp32 && branch if equal v505(R) v504 [immediate:914] [immediate:915]
gap () () 
          [constant:503] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v503(R) v504 #152 v0(S) v1(-) v2(-) v3(S) v476(-) v498(-)
gap () () 
          ArchJmp [immediate:913]
gap () () 
          ArchJmp [immediate:912]
gap () () 
          v502(R) = X64MovqDecompressTaggedPointer : MRI v498(R) [immediate:911]
gap () () 
          v501(R) = X64Movl : MRI v502(R) [immediate:910]
gap () () 
          X64Test32 && deoptimize if not equal v501 #1 #151 v0(S) v1(-) v2(-) v3(S) v476(-) v498(-)
gap () (v500(R) = v501(-);) 
          v500(1) = X64Sar32 v500(R) #1
gap () () 
          X64Cmp32 && branch if signed less than v476(R) v500 [immediate:908] [immediate:909]
gap () () 
          v478(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:907]
gap () () 
          X64Test32 && deoptimize if equal v478 #1 #150 v0(S) v1(-) v2(-) v3(S) v476(-) v498(-)
gap () () 
          v499(R) = X64MovqDecompressTaggedPointer : MRI v478(R) [immediate:906]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v499(R) [immediate:905] #1068 #149 v0(S) v1(-) v2(-) v3(S) v476(-) v498(-)
gap () () 
          v497(R) = X64MovqDecompressTaggedPointer : MRI v478(R) [immediate:904]
gap () () 
          X64Cmp && deoptimize if not equal v496(R) v497 #148 v0(S) v1(-) v2(-) v3(S) v476(-) v498(-)
gap () () 
          v479(R) = X64MovqDecompressTaggedPointer : MRI v478(R) [immediate:903]
gap () () 
          v490(R) = X64Movq : MR v80(R)
gap () () 
          v495(R) = X64Lea : MRI v490(R) [immediate:902]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v495(R) [immediate:900] [immediate:901]
gap () () 
          ArchJmp [immediate:899]
gap () ([rdx|R|w64] = v494(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:898] #-1 [rdx|R|w64]
gap (v493(-) = [rax|R|tp];) () 
          v491(R) = X64Lea : MRI v493(R) [immediate:897]
gap () (v489 = v491(-);) 
          ArchJmp [immediate:896]
gap () (v489 = v490(-);) 
          ArchJmp [immediate:895]
gap () () 
          v486(R) = X64Lea : MRI v489(R) [immediate:894]
gap () () 
          X64Movq : MR v80(R) v486(R)
gap () () 
          v488(R) = X64Lea : MRI v489(R) [immediate:893]
gap () (v484 = v488(-);) 
          v484(1) = ArchNop v484
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:892] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:890] [immediate:891]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:888] [immediate:889]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:886] [immediate:887]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:884] [immediate:885]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:882] [immediate:883]
gap () () 
          v487(R) = X64Lea : MRI v486(R) [immediate:881]
gap () () 
          X64Movq : MR v80(R) v487(R)
gap () () 
          v485(R) = X64Lea : MRI v486(R) [immediate:880]
gap () (v481 = v485(-);) 
          v481(1) = ArchNop v481
gap () () 
          X64MovqCompressTagged : MRI v481(R) [immediate:879] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v481(R) [immediate:878] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v481(R) [immediate:877] v484(R)
gap () () 
          X64MovqCompressTagged : MRI v481(R) [immediate:875] [immediate:876]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:873] [immediate:874]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:871] [immediate:872]
gap () () 
          X64MovqCompressTagged : MRI v484(R) [immediate:869] [immediate:870]
gap () ([rdx|R|t] = v480(-); [rcx|R|t] = v44(-); [rax|R|t] = v481(-); [rdi|R|w64] = v482(-); [rbx|R|t] = v483(-); [rsi|R|tp] = v479(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:864] #-1 #147 v0(S) v1(S) v2(S) v3(S) v476(S) v478(S) [immediate:865] [immediate:866] [immediate:867] [immediate:868] v479(S) [rdx|R|t] [rcx|R|t] [rax|R|t] [rdi|R|w64] [rbx|R|t] [rsi|R|tp]
gap () (v475(R) = v476(-);) 
          v475(1) = X64Add32 && deoptimize if overflow v475(R) #1 #146 v0(S) v1(-) v2(-) v3(S) v476(-)
gap () (v473 = v475(-);) 
          v473(1) = ArchNop v473
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:862] [immediate:863]
gap () () 
          [constant:474] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v474(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:861] #-1 #145 v0(S) v1(S) v2(S) v3(S) v473(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:860]
gap () () 
          ArchJmp [immediate:859]
gap () (v476 = v473(-);) 
          ArchJmp [immediate:858]
gap () () 
          ArchJmp [immediate:857]
gap () () 
          v410(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:856]
gap () () 
          v411(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:855]
gap () () 
          v465(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:854]
gap () () 
          X64Test32 && deoptimize if equal v465 #1 #144 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v465(R) [immediate:853] v471(R) #143 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          v470(R) = X64MovqDecompressTaggedPointer : MRI v465(R) [immediate:852]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v470(R) [immediate:851] v178(R) #142 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          v467(R) = X64MovqDecompressTaggedPointer : MRI v470(R) [immediate:850]
gap () () 
          v469(R) = X64MovqDecompressTaggedSigned : MRI v470(R) [immediate:849]
gap () (v468(R) = v469(-);) 
          v468(1) = X64Sar32 v468(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v468 #0 #141 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          v412(R) = X64MovqDecompressTaggedSigned : MRI v467(R) [immediate:848]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v468 #1 #140 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          v413(R) = X64MovqDecompressTaggedSigned : MRI v467(R) [immediate:847]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v468 #2 #139 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          v414(R) = X64MovqDecompressTaggedSigned : MRI v467(R) [immediate:846]
gap () () 
          X64Test32 && deoptimize if equal v410 #1 #138 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          v466(R) = X64MovqDecompressTaggedPointer : MRI v410(R) [immediate:845]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v466(R) [immediate:844] #1068 #137 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          [constant:463] = ArchNop
gap () () 
          v464(R) = X64MovqDecompressTaggedPointer : MRI v410(R) [immediate:843]
gap () () 
          X64Cmp && deoptimize if not equal v463(R) v464 #136 v0(S) v1(-) v2(-) v3(S) v410(-) v411(-) v465(-)
gap () () 
          v415(R) = X64MovqDecompressTaggedPointer : MRI v410(R) [immediate:842]
gap () () 
          v457(R) = X64Movq : MR v80(R)
gap () () 
          [constant:461] = ArchNop
gap () () 
          v462(R) = X64Lea : MRI v457(R) [immediate:841]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v462(R) [immediate:839] [immediate:840]
gap () () 
          ArchJmp [immediate:838]
gap () ([rdx|R|w64] = v461(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:837] #-1 [rdx|R|w64]
gap (v460(-) = [rax|R|tp];) () 
          v458(R) = X64Lea : MRI v460(R) [immediate:836]
gap () (v456 = v458(-);) 
          ArchJmp [immediate:835]
gap () (v456 = v457(-);) 
          ArchJmp [immediate:834]
gap () () 
          v453(R) = X64Lea : MRI v456(R) [immediate:833]
gap () () 
          X64Movq : MR v80(R) v453(R)
gap () () 
          v455(R) = X64Lea : MRI v456(R) [immediate:832]
gap () (v451 = v455(-);) 
          v451(1) = ArchNop v451
gap () () 
          X64MovqCompressTagged : MRI v451(R) [immediate:831] v178(R)
gap () () 
          X64MovqCompressTagged : MRI v451(R) [immediate:830] v185(R)
gap () () 
          [constant:454] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v451(R) [immediate:829] v454(R)
gap () () 
          X64MovqCompressTagged : MRI v451(R) [immediate:827] [immediate:828]
gap () () 
          v450(R) = X64Lea : MRI v453(R) [immediate:826]
gap () () 
          X64Movq : MR v80(R) v450(R)
gap () () 
          v452(R) = X64Lea : MRI v453(R) [immediate:825]
gap () (v422 = v452(-);) 
          v422(1) = ArchNop v422
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:824] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:822] [immediate:823]
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:820] [immediate:821]
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:818] [immediate:819]
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:816] [immediate:817]
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:815] v451(R)
gap () () 
          v448(R) = X64Lea : MRI v450(R) [immediate:814]
gap () () 
          X64Movq : MR v80(R) v448(R)
gap () () 
          v449(R) = X64Lea : MRI v450(R) [immediate:813]
gap () (v418 = v449(-);) 
          v418(1) = ArchNop v418
gap () () 
          X64MovqCompressTagged : MRI v418(R) [immediate:812] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v418(R) [immediate:811] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v418(R) [immediate:810] v422(R)
gap () () 
          X64MovqCompressTagged : MRI v418(R) [immediate:808] [immediate:809]
gap () () 
          v446(R) = X64Lea : MRI v448(R) [immediate:807]
gap () () 
          X64Movq : MR v80(R) v446(R)
gap () () 
          v447(R) = X64Lea : MRI v448(R) [immediate:806]
gap () (v442 = v447(-);) 
          v442(1) = ArchNop v442
gap () () 
          X64MovqCompressTagged : MRI v442(R) [immediate:805] v190(R)
gap () () 
          X64MovqCompressTagged : MRI v442(R) [immediate:803] [immediate:804]
gap () () 
          X64Movsd : MRI v442(R) [immediate:802] v430(R)
gap () () 
          [constant:53] = ArchNop
gap () () 
          X64Movsd : MRI v442(R) [immediate:801] v53(R)
gap () () 
          X64Movsd : MRI v442(R) [immediate:800] v53(R)
gap () () 
          X64Movsd : MRI v442(R) [immediate:799] v53(R)
gap () () 
          v440(R) = X64Lea : MRI v446(R) [immediate:798]
gap () () 
          X64Movq : MR v80(R) v440(R)
gap () () 
          v445(R) = X64Lea : MRI v446(R) [immediate:797]
gap () (v441 = v445(-);) 
          v441(1) = ArchNop v441
gap () () 
          X64MovqCompressTagged : MRI v441(R) [immediate:796] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v441(R) [immediate:795] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v441(R) [immediate:794] v442(R)
gap () (v444(R) = v412(-);) 
          v444(1) = X64Sar32 v444(R) #1
gap () () 
          X64MovqCompressTagged : MRI v441(R) [immediate:792] [immediate:793]
gap () () 
          v443(R) = SSEInt32ToFloat64 v444
gap () () 
          X64Movsd : MRI v442(R) [immediate:791] v443(R)
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:790] v441(R)
gap () () 
          v438(R) = X64Lea : MRI v440(R) [immediate:789]
gap () () 
          X64Movq : MR v80(R) v438(R)
gap () () 
          v439(R) = X64Lea : MRI v440(R) [immediate:788]
gap () (v434 = v439(-);) 
          v434(1) = ArchNop v434
gap () () 
          X64MovqCompressTagged : MRI v434(R) [immediate:787] v190(R)
gap () () 
          X64MovqCompressTagged : MRI v434(R) [immediate:785] [immediate:786]
gap () () 
          X64Movsd : MRI v434(R) [immediate:784] v53(R)
gap () () 
          X64Movsd : MRI v434(R) [immediate:783] v430(R)
gap () () 
          X64Movsd : MRI v434(R) [immediate:782] v53(R)
gap () () 
          X64Movsd : MRI v434(R) [immediate:781] v53(R)
gap () () 
          v432(R) = X64Lea : MRI v438(R) [immediate:780]
gap () () 
          X64Movq : MR v80(R) v432(R)
gap () () 
          v437(R) = X64Lea : MRI v438(R) [immediate:779]
gap () (v433 = v437(-);) 
          v433(1) = ArchNop v433
gap () () 
          X64MovqCompressTagged : MRI v433(R) [immediate:778] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v433(R) [immediate:777] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v433(R) [immediate:776] v434(R)
gap () (v436(R) = v413(-);) 
          v436(1) = X64Sar32 v436(R) #1
gap () () 
          X64MovqCompressTagged : MRI v433(R) [immediate:774] [immediate:775]
gap () () 
          v435(R) = SSEInt32ToFloat64 v436
gap () () 
          X64Movsd : MRI v434(R) [immediate:773] v435(R)
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:772] v433(R)
gap () () 
          v428(R) = X64Lea : MRI v432(R) [immediate:771]
gap () () 
          X64Movq : MR v80(R) v428(R)
gap () () 
          v431(R) = X64Lea : MRI v432(R) [immediate:770]
gap () (v424 = v431(-);) 
          v424(1) = ArchNop v424
gap () () 
          X64MovqCompressTagged : MRI v424(R) [immediate:769] v190(R)
gap () () 
          X64MovqCompressTagged : MRI v424(R) [immediate:767] [immediate:768]
gap () () 
          X64Movsd : MRI v424(R) [immediate:766] v53(R)
gap () () 
          X64Movsd : MRI v424(R) [immediate:765] v53(R)
gap () () 
          X64Movsd : MRI v424(R) [immediate:764] v430(R)
gap () () 
          X64Movsd : MRI v424(R) [immediate:763] v53(R)
gap () () 
          v429(R) = X64Lea : MRI v428(R) [immediate:762]
gap () () 
          X64Movq : MR v80(R) v429(R)
gap () () 
          v427(R) = X64Lea : MRI v428(R) [immediate:761]
gap () (v423 = v427(-);) 
          v423(1) = ArchNop v423
gap () () 
          X64MovqCompressTagged : MRI v423(R) [immediate:760] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v423(R) [immediate:759] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v423(R) [immediate:758] v424(R)
gap () (v426(R) = v414(-);) 
          v426(1) = X64Sar32 v426(R) #1
gap () () 
          X64MovqCompressTagged : MRI v423(R) [immediate:756] [immediate:757]
gap () () 
          v425(R) = SSEInt32ToFloat64 v426
gap () () 
          X64Movsd : MRI v424(R) [immediate:755] v425(R)
gap () () 
          X64MovqCompressTagged : MRI v422(R) [immediate:754] v423(R)
gap () () 
          v416(R) = X64MovqDecompressAnyTagged : MRI v415(R) [immediate:753]
gap () () 
          X64Test32 && deoptimize if equal v416 #1 #135 v0(S) v1(-) v2(-) v3(S) v410(S) [immediate:752] v411(-) v412(-) v413(-) v414(-) v415(S) v418(-) v416(-)
gap () () 
          v421(R) = X64MovqDecompressTaggedPointer : MRI v416(R) [immediate:751]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v421(R) [immediate:749] #1068 #134 v0(S) v1(-) v2(-) v3(S) v410(S) [immediate:750] v411(-) v412(-) v413(-) v414(-) v415(S) v418(-) v416(-)
gap () () 
          [constant:405] = ArchNop
gap () () 
          v420(R) = X64MovqDecompressTaggedPointer : MRI v416(R) [immediate:748]
gap () () 
          [constant:419] = ArchNop
gap () () 
          [constant:417] = ArchNop
gap () () 
          X64Cmp && deoptimize if not equal v420(R) v405 #133 v0(S) v1(-) v2(-) v3(S) v410(S) [immediate:747] v411(-) v412(-) v413(-) v414(-) v415(S) v418(-) v416(-)
gap () () 
          X64Push v411(-)
gap () () 
          X64Push v418(-)
gap () () 
          X64Push v417(-)
gap () ([rdi|R|t] = v416(-); [rax|R|w64] = v176(-); [rsi|R|t] = v419(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:745] #-1 #132 v0(S) v1(S) v2(S) v3(S) v410(S) [immediate:746] v411(S) v412(S) v413(S) v414(S) v415(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap (v215(-) = [rax|R|t];) () 
          ArchStoreWithWriteBarrier : MRI v3(R) [immediate:744] v215(R)
gap () () 
          v214(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:743]
gap () () 
          v216(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:742]
gap () () 
          X64Test32 && deoptimize if equal v214 #1 #131 v0(S) v1(-) v2(-) v3(S) v214(-) v215(-) v216(-)
gap () () 
          v407(R) = X64MovqDecompressTaggedPointer : MRI v214(R) [immediate:741]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v407(R) [immediate:740] #1068 #130 v0(S) v1(-) v2(-) v3(S) v214(-) v215(-) v216(-)
gap () () 
          v406(R) = X64MovqDecompressTaggedPointer : MRI v214(R) [immediate:739]
gap () () 
          X64Cmp && deoptimize if not equal v405(R) v406 #129 v0(S) v1(-) v2(-) v3(S) v214(-) v215(-) v216(-)
gap () () 
          v217(R) = X64Movl : MRI v214(R) [immediate:738]
gap () () 
          v399(R) = X64Movq : MR v80(R)
gap () () 
          [constant:403] = ArchNop
gap () () 
          v404(R) = X64Lea : MRI v399(R) [immediate:737]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v404(R) [immediate:735] [immediate:736]
gap () () 
          ArchJmp [immediate:734]
gap () ([rdx|R|w64] = v403(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:733] #-1 [rdx|R|w64]
gap (v402(-) = [rax|R|tp];) () 
          v400(R) = X64Lea : MRI v402(R) [immediate:732]
gap () (v398 = v400(-);) 
          ArchJmp [immediate:731]
gap () (v398 = v399(-);) 
          ArchJmp [immediate:730]
gap () () 
          v396(R) = X64Lea : MRI v398(R) [immediate:729]
gap () () 
          X64Movq : MR v80(R) v396(R)
gap () () 
          v397(R) = X64Lea : MRI v398(R) [immediate:728]
gap () (v387 = v397(-);) 
          v387(1) = ArchNop v387
gap () () 
          X64MovqCompressTagged : MRI v387(R) [immediate:727] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v387(R) [immediate:726] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v387(R) [immediate:725] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v387(R) [immediate:723] [immediate:724]
gap () () 
          v394(R) = X64Lea : MRI v396(R) [immediate:722]
gap () () 
          X64Movq : MR v80(R) v394(R)
gap () () 
          v395(R) = X64Lea : MRI v396(R) [immediate:721]
gap () (v386 = v395(-);) 
          v386(1) = ArchNop v386
gap () () 
          X64MovqCompressTagged : MRI v386(R) [immediate:720] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v386(R) [immediate:719] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v386(R) [immediate:718] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v386(R) [immediate:716] [immediate:717]
gap () () 
          v392(R) = X64Lea : MRI v394(R) [immediate:715]
gap () () 
          X64Movq : MR v80(R) v392(R)
gap () () 
          v393(R) = X64Lea : MRI v394(R) [immediate:714]
gap () (v385 = v393(-);) 
          v385(1) = ArchNop v385
gap () () 
          X64MovqCompressTagged : MRI v385(R) [immediate:713] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v385(R) [immediate:712] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v385(R) [immediate:711] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v385(R) [immediate:709] [immediate:710]
gap () () 
          v390(R) = X64Lea : MRI v392(R) [immediate:708]
gap () () 
          X64Movq : MR v80(R) v390(R)
gap () () 
          v391(R) = X64Lea : MRI v392(R) [immediate:707]
gap () (v384 = v391(-);) 
          v384(1) = ArchNop v384
gap () () 
          X64MovqCompressTagged : MRI v384(R) [immediate:706] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v384(R) [immediate:705] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v384(R) [immediate:704] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v384(R) [immediate:702] [immediate:703]
gap () () 
          v382(R) = X64Lea : MRI v390(R) [immediate:701]
gap () () 
          X64Movq : MR v80(R) v382(R)
gap () () 
          v389(R) = X64Lea : MRI v390(R) [immediate:700]
gap () (v380 = v389(-);) 
          v380(1) = ArchNop v380
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:699] v388(R)
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:697] [immediate:698]
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:696] v387(R)
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:695] v386(R)
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:694] v385(R)
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:693] v384(R)
gap () () 
          v383(R) = X64Lea : MRI v382(R) [immediate:692]
gap () () 
          X64Movq : MR v80(R) v383(R)
gap () () 
          v381(R) = X64Lea : MRI v382(R) [immediate:691]
gap () (v210 = v381(-);) 
          v210(1) = ArchNop v210
gap () () 
          [constant:175] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v210(R) [immediate:690] v184(R)
gap () () 
          X64MovqCompressTagged : MRI v210(R) [immediate:689] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v210(R) [immediate:688] v380(R)
gap () () 
          X64MovqCompressTagged : MRI v210(R) [immediate:686] [immediate:687]
gap () (v220 = v20(-);) 
          ArchJmp [immediate:685]
gap () () 
          X64Cmp32 && branch if unsigned less than v220 #4 [immediate:683] [immediate:684]
gap () () 
          v377(R) = X64MovqDecompressTaggedPointer : MRI v210(R) [immediate:682]
gap () () 
          v379(R) = X64MovqDecompressTaggedSigned : MRI v210(R) [immediate:681]
gap () (v378(R) = v379(-);) 
          v378(1) = X64Sar32 v378(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v220(R) v378 #128 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:679] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:680]
gap () () 
          v323(R) = X64MovqDecompressAnyTagged : MR4I v377(R) v220(R) [immediate:678]
gap () () 
          X64Test32 && deoptimize if equal v215 #1 #127 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:676] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:677]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v215(R) [immediate:673] v184(R) #126 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:674] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:675]
gap () () 
          v349(R) = X64MovqDecompressTaggedPointer : MRI v215(R) [immediate:672]
gap () () 
          v376(R) = X64MovqDecompressTaggedSigned : MRI v215(R) [immediate:671]
gap () (v375(R) = v376(-);) 
          v375(1) = X64Sar32 v375(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v220(R) v375 #125 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:669] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:670]
gap () () 
          v372(R) = X64MovqDecompressAnyTagged : MR4I v349(R) v220(R) [immediate:668]
gap () () 
          X64Test32 && deoptimize if equal v372 #1 #124 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:666] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:667]
gap () () 
          X64Cmp32 : MRI && branch if equal v372(R) [immediate:663] v178(R) [immediate:664] [immediate:665]
gap () () 
          ArchJmp [immediate:662]
gap () () 
          [constant:374] = ArchNop
gap () () 
          X64Push v372(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v374(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:661] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:660]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v372(R) [immediate:656] v39(R) #123 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:657] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:658] [immediate:659]
gap () () 
          v356(R) = X64MovqDecompressTaggedPointer : MRI v372(R) [immediate:655]
gap () () 
          v371(R) = X64MovqDecompressTaggedSigned : MRI v372(R) [immediate:654]
gap () (v357(R) = v371(-);) 
          v357(1) = X64Sar32 v357(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v357 #0 #122 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:651] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:652] [immediate:653]
gap () () 
          v320(R) = X64Movsd : MRI v356(R) [immediate:650]
gap () () 
          X64Test32 && deoptimize if equal v216 #1 #121 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:647] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:648] [immediate:649]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v216(R) [immediate:643] v184(R) #120 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:644] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:645] [immediate:646]
gap () () 
          v341(R) = X64MovqDecompressTaggedPointer : MRI v216(R) [immediate:642]
gap () () 
          v370(R) = X64MovqDecompressTaggedSigned : MRI v216(R) [immediate:641]
gap () (v342(R) = v370(-);) 
          v342(1) = X64Sar32 v342(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v342 #0 #119 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:638] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:639] [immediate:640]
gap () () 
          v367(R) = X64MovqDecompressAnyTagged : MRI v341(R) [immediate:637]
gap () () 
          X64Test32 && deoptimize if equal v367 #1 #118 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:634] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:635] [immediate:636]
gap () () 
          X64Cmp32 : MRI && branch if equal v367(R) [immediate:631] v178(R) [immediate:632] [immediate:633]
gap () () 
          ArchJmp [immediate:630]
gap () () 
          [constant:369] = ArchNop
gap () () 
          X64Push v367(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v369(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:629] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:628]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v367(R) [immediate:624] v39(R) #117 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:625] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:626] [immediate:627]
gap () () 
          v364(R) = X64MovqDecompressTaggedPointer : MRI v367(R) [immediate:623]
gap () () 
          v366(R) = X64MovqDecompressTaggedSigned : MRI v367(R) [immediate:622]
gap () (v365(R) = v366(-);) 
          v365(1) = X64Sar32 v365(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v365 #0 #116 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:619] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:620] [immediate:621]
gap () () 
          v319(R) = X64Movsd : MRI v364(R) [immediate:618]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v357 #1 #115 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:615] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:616] [immediate:617]
gap () () 
          v322(R) = X64Movsd : MRI v356(R) [immediate:614]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v342 #1 #114 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:611] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:612] [immediate:613]
gap () () 
          v361(R) = X64MovqDecompressAnyTagged : MRI v341(R) [immediate:610]
gap () () 
          X64Test32 && deoptimize if equal v361 #1 #113 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:607] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:608] [immediate:609]
gap () () 
          X64Cmp32 : MRI && branch if equal v361(R) [immediate:604] v178(R) [immediate:605] [immediate:606]
gap () () 
          ArchJmp [immediate:603]
gap () () 
          [constant:363] = ArchNop
gap () () 
          X64Push v361(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v363(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:602] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:601]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v361(R) [immediate:597] v39(R) #112 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:598] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:599] [immediate:600]
gap () () 
          v358(R) = X64MovqDecompressTaggedPointer : MRI v361(R) [immediate:596]
gap () () 
          v360(R) = X64MovqDecompressTaggedSigned : MRI v361(R) [immediate:595]
gap () (v359(R) = v360(-);) 
          v359(1) = X64Sar32 v359(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v359 #0 #111 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:592] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:593] [immediate:594]
gap () () 
          v321(R) = X64Movsd : MRI v358(R) [immediate:591]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v357 #2 #110 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:588] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:589] [immediate:590]
gap () () 
          v318(R) = X64Movsd : MRI v356(R) [immediate:587]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v342 #2 #109 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:584] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:585] [immediate:586]
gap () () 
          v353(R) = X64MovqDecompressAnyTagged : MRI v341(R) [immediate:583]
gap () () 
          X64Test32 && deoptimize if equal v353 #1 #108 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:580] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:581] [immediate:582]
gap () () 
          X64Cmp32 : MRI && branch if equal v353(R) [immediate:577] v178(R) [immediate:578] [immediate:579]
gap () () 
          ArchJmp [immediate:576]
gap () () 
          [constant:355] = ArchNop
gap () () 
          X64Push v353(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v355(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:575] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:574]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v353(R) [immediate:570] v39(R) #107 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:571] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:572] [immediate:573]
gap () () 
          v350(R) = X64MovqDecompressTaggedPointer : MRI v353(R) [immediate:569]
gap () () 
          v352(R) = X64MovqDecompressTaggedSigned : MRI v353(R) [immediate:568]
gap () (v351(R) = v352(-);) 
          v351(1) = X64Sar32 v351(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v351 #0 #106 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:565] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:566] [immediate:567]
gap () () 
          v317(R) = X64Movsd : MRI v350(R) [immediate:564]
gap () () 
          v346(R) = X64MovqDecompressAnyTagged : MR4I v349(R) v220(R) [immediate:563]
gap () () 
          X64Test32 && deoptimize if equal v346 #1 #105 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:560] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:561] [immediate:562]
gap () () 
          X64Cmp32 : MRI && branch if equal v346(R) [immediate:557] v178(R) [immediate:558] [immediate:559]
gap () () 
          ArchJmp [immediate:556]
gap () () 
          [constant:348] = ArchNop
gap () () 
          X64Push v346(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v348(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:555] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:554]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v346(R) [immediate:550] v39(R) #104 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:551] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:552] [immediate:553]
gap () () 
          v343(R) = X64MovqDecompressTaggedPointer : MRI v346(R) [immediate:549]
gap () () 
          v345(R) = X64MovqDecompressTaggedSigned : MRI v346(R) [immediate:548]
gap () (v344(R) = v345(-);) 
          v344(1) = X64Sar32 v344(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v344 #3 #103 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:545] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:546] [immediate:547]
gap () () 
          v314(R) = X64Movsd : MRI v343(R) [immediate:544]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v342 #3 #102 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:541] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:542] [immediate:543]
gap () () 
          v338(R) = X64MovqDecompressAnyTagged : MRI v341(R) [immediate:540]
gap () () 
          X64Test32 && deoptimize if equal v338 #1 #101 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:537] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:538] [immediate:539]
gap () () 
          X64Cmp32 : MRI && branch if equal v338(R) [immediate:534] v178(R) [immediate:535] [immediate:536]
gap () () 
          ArchJmp [immediate:533]
gap () () 
          [constant:340] = ArchNop
gap () () 
          X64Push v338(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v340(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:532] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:531]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v338(R) [immediate:527] v39(R) #100 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:528] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:529] [immediate:530]
gap () () 
          v335(R) = X64MovqDecompressTaggedPointer : MRI v338(R) [immediate:526]
gap () () 
          v337(R) = X64MovqDecompressTaggedSigned : MRI v338(R) [immediate:525]
gap () (v336(R) = v337(-);) 
          v336(1) = X64Sar32 v336(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v336 #0 #99 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:522] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:523] [immediate:524]
gap () () 
          v313(R) = X64Movsd : MRI v335(R) [immediate:521]
gap () () 
          X64Test32 && deoptimize if equal v323 #1 #98 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:518] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:519] [immediate:520]
gap () () 
          X64Cmp32 : MRI && branch if equal v323(R) [immediate:515] v178(R) [immediate:516] [immediate:517]
gap () () 
          ArchJmp [immediate:514]
gap () () 
          [constant:334] = ArchNop
gap () () 
          X64Push v323(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v334(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:513] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:512]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v323(R) [immediate:508] v39(R) #97 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:509] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:510] [immediate:511]
gap () () 
          v325(R) = X64MovqDecompressTaggedPointer : MRI v323(R) [immediate:507]
gap () () 
          v332(R) = X64MovqDecompressTaggedSigned : MRI v323(R) [immediate:506]
gap () () 
          v330(R) = X64MovqDecompressTaggedSigned : MRI v325(R) [immediate:505]
gap () (v324(R) = v332(-);) 
          v324(1) = X64Sar32 v324(R) #1
gap () () 
          v331(R) = X64Lea32 : MRI v324(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v331 #0 [immediate:503] [immediate:504]
gap () (v329(R) = v330(-);) 
          v329(1) = X64Sar32 v329(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v329 #0 [immediate:501] [immediate:502]
gap () () 
          [constant:328] = ArchNop
gap () ([rax|R|t] = v323(-); [rbx|R|w64] = v327(-); [rsi|R|w64] = v328(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:500] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v326(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v326 #1 #96 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:497] v215(-) v216(-) v217(S) v210(-) v220(-) [immediate:498] [immediate:499]
gap () (v306 = v326(-);) 
          ArchJmp [immediate:496]
gap () (v306 = v325(-);) 
          ArchJmp [immediate:495]
gap () () 
          X64Cmp32 && branch if unsigned greater than v324 #0 [immediate:493] [immediate:494]
gap () () 
          X64MovqCompressTagged : MRI v323(R) [immediate:491] [immediate:492]
gap () () 
          ArchJmp [immediate:490]
gap () () 
          ArchJmp [immediate:489]
gap () () 
          v315(R) = AVXFloat64Mul v321(R) v322
gap () () 
          v316(R) = AVXFloat64Mul v319(R) v320
gap () () 
          v311(R) = AVXFloat64Mul v317(R) v318
gap () () 
          v312(R) = AVXFloat64Add v315(R) v316
gap () () 
          v309(R) = AVXFloat64Mul v313(R) v314
gap () () 
          v310(R) = AVXFloat64Add v311(R) v312
gap () () 
          v308(R) = AVXFloat64Add v309(R) v310
gap () () 
          X64Movsd : MRI v306(R) [immediate:488] v308(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:486] [immediate:487]
gap () () 
          [constant:305] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v305(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:484] #-1 #95 v0(S) v1(S) v2(S) v3(S) v214(S) [immediate:485] v215(S) v216(S) v217(S) v210(S) v220(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:483]
gap () () 
          ArchJmp [immediate:482]
gap () (v245 = v35(-);) 
          ArchJmp [immediate:481]
gap () () 
          X64Cmp32 && branch if unsigned less than v245 #4 [immediate:479] [immediate:480]
gap () () 
          v301(R) = X64MovqDecompressTaggedPointer : MRI v210(R) [immediate:478]
gap () () 
          v303(R) = X64MovqDecompressTaggedSigned : MRI v210(R) [immediate:477]
gap () (v302(R) = v303(-);) 
          v302(1) = X64Sar32 v302(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v220(R) v302 #94 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:475] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:476]
gap () () 
          v242(R) = X64MovqDecompressAnyTagged : MR4I v301(R) v220(R) [immediate:474]
gap () () 
          v272(R) = X64MovqDecompressTaggedPointer : MRI v215(R) [immediate:473]
gap () () 
          v300(R) = X64MovqDecompressTaggedSigned : MRI v215(R) [immediate:472]
gap () (v299(R) = v300(-);) 
          v299(1) = X64Sar32 v299(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v220(R) v299 #93 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:470] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:471]
gap () () 
          v296(R) = X64MovqDecompressAnyTagged : MR4I v272(R) v220(R) [immediate:469]
gap () () 
          X64Test32 && deoptimize if equal v296 #1 #92 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:467] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:468]
gap () () 
          X64Cmp32 : MRI && branch if equal v296(R) [immediate:464] v178(R) [immediate:465] [immediate:466]
gap () () 
          ArchJmp [immediate:463]
gap () () 
          [constant:298] = ArchNop
gap () () 
          X64Push v296(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v298(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:462] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:461]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v296(R) [immediate:458] v39(R) #91 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:459] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:460]
gap () () 
          v280(R) = X64MovqDecompressTaggedPointer : MRI v296(R) [immediate:457]
gap () () 
          v295(R) = X64MovqDecompressTaggedSigned : MRI v296(R) [immediate:456]
gap () (v281(R) = v295(-);) 
          v281(1) = X64Sar32 v281(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v281 #0 #90 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:454] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:455]
gap () () 
          v239(R) = X64Movsd : MRI v280(R) [immediate:453]
gap () () 
          v264(R) = X64MovqDecompressTaggedPointer : MRI v216(R) [immediate:452]
gap () () 
          v294(R) = X64MovqDecompressTaggedSigned : MRI v216(R) [immediate:451]
gap () (v265(R) = v294(-);) 
          v265(1) = X64Sar32 v265(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v265 #0 #89 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:449] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:450]
gap () () 
          v291(R) = X64MovqDecompressAnyTagged : MRI v264(R) [immediate:448]
gap () () 
          X64Test32 && deoptimize if equal v291 #1 #88 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:446] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:447]
gap () () 
          X64Cmp32 : MRI && branch if equal v291(R) [immediate:443] v178(R) [immediate:444] [immediate:445]
gap () () 
          ArchJmp [immediate:442]
gap () () 
          [constant:293] = ArchNop
gap () () 
          X64Push v291(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v293(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:441] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:440]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v291(R) [immediate:437] v39(R) #87 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:438] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:439]
gap () () 
          v288(R) = X64MovqDecompressTaggedPointer : MRI v291(R) [immediate:436]
gap () () 
          v290(R) = X64MovqDecompressTaggedSigned : MRI v291(R) [immediate:435]
gap () (v289(R) = v290(-);) 
          v289(1) = X64Sar32 v289(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v245(R) v289 #86 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:433] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:434]
gap () () 
          v238(R) = X64Movsd : MR8I v288(R) v245(R) [immediate:432]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v281 #1 #85 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:430] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:431]
gap () () 
          v241(R) = X64Movsd : MRI v280(R) [immediate:429]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v265 #1 #84 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:427] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:428]
gap () () 
          v285(R) = X64MovqDecompressAnyTagged : MRI v264(R) [immediate:426]
gap () () 
          X64Test32 && deoptimize if equal v285 #1 #83 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:424] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:425]
gap () () 
          X64Cmp32 : MRI && branch if equal v285(R) [immediate:421] v178(R) [immediate:422] [immediate:423]
gap () () 
          ArchJmp [immediate:420]
gap () () 
          [constant:287] = ArchNop
gap () () 
          X64Push v285(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v287(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:419] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:418]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v285(R) [immediate:415] v39(R) #82 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:416] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:417]
gap () () 
          v282(R) = X64MovqDecompressTaggedPointer : MRI v285(R) [immediate:414]
gap () () 
          v284(R) = X64MovqDecompressTaggedSigned : MRI v285(R) [immediate:413]
gap () (v283(R) = v284(-);) 
          v283(1) = X64Sar32 v283(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v245(R) v283 #81 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:411] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:412]
gap () () 
          v240(R) = X64Movsd : MR8I v282(R) v245(R) [immediate:410]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v281 #2 #80 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:408] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:409]
gap () () 
          v237(R) = X64Movsd : MRI v280(R) [immediate:407]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v265 #2 #79 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:405] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:406]
gap () () 
          v277(R) = X64MovqDecompressAnyTagged : MRI v264(R) [immediate:404]
gap () () 
          X64Test32 && deoptimize if equal v277 #1 #78 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:402] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:403]
gap () () 
          X64Cmp32 : MRI && branch if equal v277(R) [immediate:399] v178(R) [immediate:400] [immediate:401]
gap () () 
          ArchJmp [immediate:398]
gap () () 
          [constant:279] = ArchNop
gap () () 
          X64Push v277(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v279(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:397] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:396]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v277(R) [immediate:393] v39(R) #77 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:394] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:395]
gap () () 
          v274(R) = X64MovqDecompressTaggedPointer : MRI v277(R) [immediate:392]
gap () () 
          v276(R) = X64MovqDecompressTaggedSigned : MRI v277(R) [immediate:391]
gap () (v275(R) = v276(-);) 
          v275(1) = X64Sar32 v275(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v245(R) v275 #76 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:389] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:390]
gap () () 
          v236(R) = X64Movsd : MR8I v274(R) v245(R) [immediate:388]
gap () () 
          v269(R) = X64MovqDecompressAnyTagged : MR4I v272(R) v220(R) [immediate:387]
gap () () 
          X64Test32 && deoptimize if equal v269 #1 #75 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:385] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:386]
gap () () 
          X64Cmp32 : MRI && branch if equal v269(R) [immediate:382] v178(R) [immediate:383] [immediate:384]
gap () () 
          ArchJmp [immediate:381]
gap () () 
          [constant:271] = ArchNop
gap () () 
          X64Push v269(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v271(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:380] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:379]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v269(R) [immediate:376] v39(R) #74 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:377] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:378]
gap () () 
          v266(R) = X64MovqDecompressTaggedPointer : MRI v269(R) [immediate:375]
gap () () 
          v268(R) = X64MovqDecompressTaggedSigned : MRI v269(R) [immediate:374]
gap () (v267(R) = v268(-);) 
          v267(1) = X64Sar32 v267(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v267 #3 #73 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:372] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:373]
gap () () 
          v233(R) = X64Movsd : MRI v266(R) [immediate:371]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v265 #3 #72 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:369] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:370]
gap () () 
          v261(R) = X64MovqDecompressAnyTagged : MRI v264(R) [immediate:368]
gap () () 
          X64Test32 && deoptimize if equal v261 #1 #71 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:366] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:367]
gap () () 
          X64Cmp32 : MRI && branch if equal v261(R) [immediate:363] v178(R) [immediate:364] [immediate:365]
gap () () 
          ArchJmp [immediate:362]
gap () () 
          [constant:263] = ArchNop
gap () () 
          X64Push v261(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v263(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:361] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:360]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v261(R) [immediate:357] v39(R) #70 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:358] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:359]
gap () () 
          v258(R) = X64MovqDecompressTaggedPointer : MRI v261(R) [immediate:356]
gap () () 
          v260(R) = X64MovqDecompressTaggedSigned : MRI v261(R) [immediate:355]
gap () (v259(R) = v260(-);) 
          v259(1) = X64Sar32 v259(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v245(R) v259 #69 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:353] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:354]
gap () () 
          v232(R) = X64Movsd : MR8I v258(R) v245(R) [immediate:352]
gap () () 
          X64Test32 && deoptimize if equal v242 #1 #68 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:350] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:351]
gap () () 
          X64Cmp32 : MRI && branch if equal v242(R) [immediate:347] v178(R) [immediate:348] [immediate:349]
gap () () 
          ArchJmp [immediate:346]
gap () () 
          [constant:257] = ArchNop
gap () () 
          X64Push v242(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v257(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:345] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:344]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v242(R) [immediate:341] v39(R) #67 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:342] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:343]
gap () () 
          v247(R) = X64MovqDecompressTaggedPointer : MRI v242(R) [immediate:340]
gap () () 
          v255(R) = X64MovqDecompressTaggedSigned : MRI v242(R) [immediate:339]
gap () (v246(R) = v255(-);) 
          v246(1) = X64Sar32 v246(R) #1
gap () () 
          v254(R) = X64MovqDecompressTaggedSigned : MRI v247(R) [immediate:338]
gap () (v252(R) = v254(-);) 
          v252(1) = X64Sar32 v252(R) #1
gap () () 
          v253(R) = X64Lea32 : MRI v246(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v245(R) v253 #66 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:336] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:337]
gap () () 
          X64Cmp32 && branch if unsigned less than v245(R) v252 [immediate:334] [immediate:335]
gap () () 
          [constant:250] = ArchNop
gap () () 
          v251(R) = X64Lea32 : MR1 v245(R) v245(R)
gap () ([rax|R|t] = v242(-); [rbx|R|w32] = v251(-); [rsi|R|w64] = v250(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:333] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v248(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v248 #1 #65 v0(S) v1(-) v2(-) v3(S) v214(S) [immediate:331] v215(-) v216(-) v217(S) v210(-) v220(-) v245(-) [immediate:332]
gap () (v224 = v248(-);) 
          ArchJmp [immediate:330]
gap () (v224 = v247(-);) 
          ArchJmp [immediate:329]
gap () () 
          v222(R) = X64Lea32 : MRI v245(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v245(R) v246 [immediate:327] [immediate:328]
gap () () 
          v244(R) = X64Lea32 : MR1 v222(R) v222(R)
gap () () 
          X64MovqCompressTagged : MRI v242(R) [immediate:326] v244(R)
gap () () 
          ArchJmp [immediate:325]
gap () () 
          ArchJmp [immediate:324]
gap () () 
          v234(R) = AVXFloat64Mul v240(R) v241
gap () () 
          v235(R) = AVXFloat64Mul v238(R) v239
gap () () 
          v230(R) = AVXFloat64Mul v236(R) v237
gap () () 
          v231(R) = AVXFloat64Add v234(R) v235
gap () () 
          v228(R) = AVXFloat64Mul v232(R) v233
gap () () 
          v229(R) = AVXFloat64Add v230(R) v231
gap () () 
          v227(R) = AVXFloat64Add v228(R) v229
gap () () 
          X64Movsd : MR8I v224(R) v245(R) [immediate:323] v227(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:321] [immediate:322]
gap () () 
          [constant:223] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v223(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:319] #-1 #64 v0(S) v1(S) v2(S) v3(S) v214(S) [immediate:320] v215(S) v216(S) v217(S) v210(S) v220(S) v222(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:318]
gap () () 
          ArchJmp [immediate:317]
gap () (v245 = v222(-);) 
          ArchJmp [immediate:316]
gap () () 
          v218(R) = X64Lea32 : MRI v220(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:314] [immediate:315]
gap () () 
          [constant:219] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v219(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:312] #-1 #63 v0(S) v1(S) v2(S) v3(S) v214(S) [immediate:313] v215(S) v216(S) v217(S) v210(S) v218(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:311]
gap () () 
          ArchJmp [immediate:310]
gap () (v220 = v218(-);) 
          ArchJmp [immediate:309]
gap () () 
          [constant:52] = ArchNop
gap () () 
          ArchStoreWithWriteBarrier : MRI v3(R) [immediate:308] v210(R)
gap () (v97 = v20(-);) 
          ArchJmp [immediate:307]
gap () () 
          X64Cmp32 && branch if unsigned less than v97 #9 [immediate:305] [immediate:306]
gap () () 
          v207(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:304]
gap () () 
          X64Test32 && deoptimize if equal v207 #1 #62 v0(S) v1(-) v2(-) v3(S) v97(-) [immediate:303]
gap () () 
          v209(R) = X64Movl : MRI v207(R) [immediate:302]
gap () () 
          X64Cmp32 && branch if equal v209(R) v52 [immediate:300] [immediate:301]
gap () () 
          [constant:208] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if not equal v208(R) v209 #61 v0(S) v1(-) v2(-) v3(S) v97(-) [immediate:299]
gap () () 
          ArchJmp [immediate:298]
gap () () 
          ArchJmp [immediate:297]
gap () () 
          v203(R) = X64MovqDecompressTaggedPointer : MRI v207(R) [immediate:296]
gap () () 
          v206(R) = X64MovqDecompressTaggedSigned : MRI v207(R) [immediate:295]
gap () (v205(R) = v206(-);) 
          v205(1) = X64Sar32 v205(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v97(R) v205 #60 v0(S) v1(-) v2(-) v3(S) v97(-) [immediate:294]
gap () () 
          v103(R) = X64MovqDecompressAnyTagged : MR4I v203(R) v97(R) [immediate:293]
gap () () 
          v107(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:292]
gap () () 
          v108(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:291]
gap () () 
          [constant:202] = ArchNop
gap () ([rdx|R|t] = v103(-); [rcx|R|t] = v44(-); [rax|R|w64] = v202(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:290] #-1 #59 v0(S) v1(S) v2(S) v3(S) v97(S) v103(S) v107(S) v108(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v109(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v107 #1 #58 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(-) v108(-) v109(-)
gap () () 
          v201(R) = X64MovqDecompressTaggedPointer : MRI v107(R) [immediate:289]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v201(R) [immediate:288] #1068 #57 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(-) v108(-) v109(-)
gap () () 
          [constant:199] = ArchNop
gap () () 
          v200(R) = X64MovqDecompressTaggedPointer : MRI v107(R) [immediate:287]
gap () () 
          X64Cmp && deoptimize if not equal v199(R) v200 #56 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(-) v108(-) v109(-)
gap () () 
          v110(R) = X64Movl : MRI v107(R) [immediate:286]
gap () () 
          v193(R) = X64Movq : MR v80(R)
gap () () 
          v198(R) = X64Lea : MRI v193(R) [immediate:285]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v198(R) [immediate:283] [immediate:284]
gap () () 
          ArchJmp [immediate:282]
gap () ([rdx|R|w64] = v197(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:281] #-1 [rdx|R|w64]
gap (v196(-) = [rax|R|tp];) () 
          v194(R) = X64Lea : MRI v196(R) [immediate:280]
gap () (v192 = v194(-);) 
          ArchJmp [immediate:279]
gap () (v192 = v193(-);) 
          ArchJmp [immediate:278]
gap () () 
          v187(R) = X64Lea : MRI v192(R) [immediate:277]
gap () () 
          X64Movq : MR v80(R) v187(R)
gap () () 
          v191(R) = X64Lea : MRI v192(R) [immediate:276]
gap () (v156 = v191(-);) 
          v156(1) = ArchNop v156
gap () () 
          X64MovqCompressTagged : MRI v156(R) [immediate:275] v190(R)
gap () () 
          X64MovqCompressTagged : MRI v156(R) [immediate:273] [immediate:274]
gap () () 
          X64Movsd : MRI v156(R) [immediate:272] v189(R)
gap () () 
          X64Movsd : MRI v156(R) [immediate:271] v189(R)
gap () () 
          X64Movsd : MRI v156(R) [immediate:270] v189(R)
gap () () 
          X64Movsd : MRI v156(R) [immediate:269] v189(R)
gap () () 
          v188(R) = X64Lea : MRI v187(R) [immediate:268]
gap () () 
          X64Movq : MR v80(R) v188(R)
gap () () 
          v186(R) = X64Lea : MRI v187(R) [immediate:267]
gap () (v104 = v186(-);) 
          v104(1) = ArchNop v104
gap () () 
          X64MovqCompressTagged : MRI v104(R) [immediate:266] v39(R)
gap () () 
          X64MovqCompressTagged : MRI v104(R) [immediate:265] v185(R)
gap () () 
          X64MovqCompressTagged : MRI v104(R) [immediate:264] v156(R)
gap () () 
          X64MovqCompressTagged : MRI v104(R) [immediate:262] [immediate:263]
gap () () 
          X64Test32 && deoptimize if equal v108 #1 #55 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:259] v108(-) v109(-) v110(S) v104(-) [immediate:260] [immediate:261]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v108(R) [immediate:255] v184(R) #54 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:256] v108(-) v109(-) v110(S) v104(-) [immediate:257] [immediate:258]
gap () () 
          v181(R) = X64MovqDecompressTaggedPointer : MRI v108(R) [immediate:254]
gap () () 
          v183(R) = X64MovqDecompressTaggedSigned : MRI v108(R) [immediate:253]
gap () (v182(R) = v183(-);) 
          v182(1) = X64Sar32 v182(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v182 #0 #53 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:250] v108(-) v109(-) v110(S) v104(-) [immediate:251] [immediate:252]
gap () () 
          v180(R) = X64MovqDecompressAnyTagged : MRI v181(R) [immediate:249]
gap () () 
          X64Test32 && deoptimize if equal v180 #1 #52 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:246] v108(-) v109(-) v110(S) v104(-) [immediate:247] [immediate:248]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v180(R) [immediate:242] v39(R) #51 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:243] v108(-) v109(-) v110(S) v104(-) [immediate:244] [immediate:245]
gap () () 
          v171(R) = X64MovqDecompressTaggedPointer : MRI v180(R) [immediate:241]
gap () () 
          v179(R) = X64MovqDecompressTaggedSigned : MRI v180(R) [immediate:240]
gap () (v172(R) = v179(-);) 
          v172(1) = X64Sar32 v172(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v172 #0 #50 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:237] v108(-) v109(-) v110(S) v104(-) [immediate:238] [immediate:239]
gap () () 
          v168(R) = X64Movsd : MRI v171(R) [immediate:236]
gap () () 
          X64Test32 && deoptimize if equal v109 #1 #49 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:233] v108(-) v109(-) v110(S) v104(-) [immediate:234] [immediate:235]
gap () () 
          X64Cmp32 : MRI && branch if equal v109(R) [immediate:230] v178(R) [immediate:231] [immediate:232]
gap () () 
          ArchJmp [immediate:229]
gap () () 
          [constant:177] = ArchNop
gap () () 
          X64Push v109(-)
gap () () 
          X64Push v39(-)
gap () ([rbx|R|w64] = v175(-); [rax|R|w64] = v176(-); [rsi|R|w64] = v177(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:228] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:227]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v109(R) [immediate:223] v39(R) #48 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:224] v108(-) v109(-) v110(S) v104(-) [immediate:225] [immediate:226]
gap () () 
          v164(R) = X64MovqDecompressTaggedPointer : MRI v109(R) [immediate:222]
gap () () 
          v173(R) = X64MovqDecompressTaggedSigned : MRI v109(R) [immediate:221]
gap () (v170(R) = v173(-);) 
          v170(1) = X64Sar32 v170(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v170 #0 #47 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:218] v108(-) v109(-) v110(S) v104(-) [immediate:219] [immediate:220]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v172 #1 #46 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:215] v108(-) v109(-) v110(S) v104(-) [immediate:216] [immediate:217]
gap () () 
          v169(R) = X64Movsd : MRI v171(R) [immediate:214]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v170 #1 #45 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:211] v108(-) v109(-) v110(S) v104(-) [immediate:212] [immediate:213]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v172 #2 #44 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:208] v108(-) v109(-) v110(S) v104(-) [immediate:209] [immediate:210]
gap () () 
          v167(R) = X64Movsd : MRI v171(R) [immediate:207]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v170 #2 #43 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:204] v108(-) v109(-) v110(S) v104(-) [immediate:205] [immediate:206]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v172 #3 #42 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:201] v108(-) v109(-) v110(S) v104(-) [immediate:202] [immediate:203]
gap () () 
          v163(R) = X64Movsd : MRI v171(R) [immediate:200]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v170 #3 #41 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:197] v108(-) v109(-) v110(S) v104(-) [immediate:198] [immediate:199]
gap () () 
          v165(R) = AVXFloat64Mul : MRI v169(R) v164(R) [immediate:196]
gap () () 
          v166(R) = AVXFloat64Mul : MRI v168(R) v164(R) [immediate:195]
gap () () 
          v161(R) = AVXFloat64Mul : MRI v167(R) v164(R) [immediate:194]
gap () () 
          v162(R) = AVXFloat64Add v165(R) v166
gap () () 
          v159(R) = AVXFloat64Mul : MRI v163(R) v164(R) [immediate:193]
gap () () 
          v160(R) = AVXFloat64Add v161(R) v162
gap () () 
          v158(R) = AVXFloat64Add v159(R) v160
gap () () 
          X64MovqCompressTagged : MRI v104(R) [immediate:191] [immediate:192]
gap () () 
          X64Movsd : MRI v156(R) [immediate:190] v158(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:188] [immediate:189]
gap () () 
          [constant:155] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v155(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:186] #-1 #40 v0(S) v1(S) v2(S) v3(S) v97(S) v103(S) v107(S) [immediate:187] v108(S) v109(S) v110(S) v104(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:185]
gap () () 
          ArchJmp [immediate:184]
gap () (v133 = v35(-);) 
          ArchJmp [immediate:183]
gap () () 
          X64Cmp32 && branch if unsigned less than v133 #4 [immediate:181] [immediate:182]
gap () () 
          v151(R) = X64MovqDecompressTaggedPointer : MRI v108(R) [immediate:180]
gap () () 
          v153(R) = X64MovqDecompressTaggedSigned : MRI v108(R) [immediate:179]
gap () (v152(R) = v153(-);) 
          v152(1) = X64Sar32 v152(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v133(R) v152 #39 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:177] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:178]
gap () () 
          v150(R) = X64MovqDecompressAnyTagged : MR4I v151(R) v133(R) [immediate:176]
gap () () 
          X64Test32 && deoptimize if equal v150 #1 #38 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:174] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:175]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v150(R) [immediate:171] v39(R) #37 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:172] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:173]
gap () () 
          v146(R) = X64MovqDecompressTaggedPointer : MRI v150(R) [immediate:170]
gap () () 
          v149(R) = X64MovqDecompressTaggedSigned : MRI v150(R) [immediate:169]
gap () (v147(R) = v149(-);) 
          v147(1) = X64Sar32 v147(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #0 #36 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:167] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:168]
gap () () 
          v128(R) = X64Movsd : MRI v146(R) [immediate:166]
gap () () 
          v144(R) = X64MovqDecompressTaggedPointer : MRI v109(R) [immediate:165]
gap () () 
          v148(R) = X64MovqDecompressTaggedSigned : MRI v109(R) [immediate:164]
gap () (v145(R) = v148(-);) 
          v145(1) = X64Sar32 v145(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v145 #0 #35 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:162] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:163]
gap () () 
          v127(R) = X64Movsd : MRI v144(R) [immediate:161]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #1 #34 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:159] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:160]
gap () () 
          v130(R) = X64Movsd : MRI v146(R) [immediate:158]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v145 #1 #33 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:156] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:157]
gap () () 
          v129(R) = X64Movsd : MRI v144(R) [immediate:155]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #2 #32 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:153] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:154]
gap () () 
          v126(R) = X64Movsd : MRI v146(R) [immediate:152]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v145 #2 #31 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:150] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:151]
gap () () 
          v125(R) = X64Movsd : MRI v144(R) [immediate:149]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v147 #3 #30 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:147] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:148]
gap () () 
          v122(R) = X64Movsd : MRI v146(R) [immediate:146]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v145 #3 #29 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:144] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:145]
gap () () 
          v121(R) = X64Movsd : MRI v144(R) [immediate:143]
gap () () 
          v135(R) = X64MovqDecompressTaggedPointer : MRI v104(R) [immediate:142]
gap () () 
          v142(R) = X64MovqDecompressTaggedSigned : MRI v104(R) [immediate:141]
gap () () 
          v143(R) = X64MovqDecompressTaggedSigned : MRI v135(R) [immediate:140]
gap () (v140(R) = v143(-);) 
          v140(1) = X64Sar32 v140(R) #1
gap () (v134(R) = v142(-);) 
          v134(1) = X64Sar32 v134(R) #1
gap () () 
          v141(R) = X64Lea32 : MRI v134(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v133(R) v141 #28 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:138] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:139]
gap () () 
          X64Cmp32 && branch if unsigned less than v133(R) v140 [immediate:136] [immediate:137]
gap () () 
          v139(R) = X64Lea32 : MR1 v133(R) v133(R)
gap () () 
          [constant:138] = ArchNop
gap () ([rax|R|t] = v104(-); [rbx|R|w32] = v139(-); [rsi|R|w64] = v138(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:135] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v136(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v136 #1 #27 v0(S) v1(-) v2(-) v3(S) v97(-) v103(-) v107(S) [immediate:133] v108(-) v109(-) v110(S) v104(-) v133(-) [immediate:134]
gap () (v113 = v136(-);) 
          ArchJmp [immediate:132]
gap () (v113 = v135(-);) 
          ArchJmp [immediate:131]
gap () () 
          v111(R) = X64Lea32 : MRI v133(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v133(R) v134 [immediate:129] [immediate:130]
gap () () 
          v132(R) = X64Lea32 : MR1 v111(R) v111(R)
gap () () 
          X64MovqCompressTagged : MRI v104(R) [immediate:128] v132(R)
gap () () 
          ArchJmp [immediate:127]
gap () () 
          ArchJmp [immediate:126]
gap () () 
          v123(R) = AVXFloat64Mul v129(R) v130
gap () () 
          v124(R) = AVXFloat64Mul v127(R) v128
gap () () 
          v119(R) = AVXFloat64Mul v125(R) v126
gap () () 
          v120(R) = AVXFloat64Add v123(R) v124
gap () () 
          v117(R) = AVXFloat64Mul v121(R) v122
gap () () 
          v118(R) = AVXFloat64Add v119(R) v120
gap () () 
          v116(R) = AVXFloat64Add v117(R) v118
gap () () 
          X64Movsd : MR8I v113(R) v133(R) [immediate:125] v116(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:123] [immediate:124]
gap () () 
          [constant:112] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v112(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:121] #-1 #26 v0(S) v1(S) v2(S) v3(S) v97(S) v103(S) v107(S) [immediate:122] v108(S) v109(S) v110(S) v104(S) v111(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:120]
gap () () 
          ArchJmp [immediate:119]
gap () (v133 = v111(-);) 
          ArchJmp [immediate:118]
gap () () 
          [constant:105] = ArchNop
gap () ([rdx|R|t] = v103(-); [rcx|R|t] = v44(-); [rax|R|t] = v104(-); [rdi|R|w64] = v105(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:117] #-1 #25 v0(S) v1(S) v2(S) v3(S) v97(S) [rdx|R|t] [rcx|R|t] [rax|R|t] [rdi|R|w64] [rsi|R|t]
gap () () 
          v100(R) = X64Lea32 : MRI v97(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:115] [immediate:116]
gap () () 
          [constant:101] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v101(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:114] #-1 #24 v0(S) v1(S) v2(S) v3(S) v100(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:113]
gap () () 
          ArchJmp [immediate:112]
gap () (v97 = v100(-);) 
          ArchJmp [immediate:111]
gap () () 
          [constant:57] = ArchNop
gap () () 
          [constant:56] = ArchNop
gap () () 
          v94(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:110]
gap () () 
          X64Test32 && deoptimize if equal v94 #1 #23 v0(S) v1(-) v2(-) v3(S) v97(-) [immediate:109]
gap () () 
          v98(R) = X64MovqDecompressTaggedPointer : MRI v94(R) [immediate:108]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v98(R) [immediate:106] #1068 #22 v0(S) v1(-) v2(-) v3(S) v97(-) [immediate:107]
gap () () 
          [constant:95] = ArchNop
gap () () 
          v96(R) = X64MovqDecompressTaggedPointer : MRI v94(R) [immediate:105]
gap () () 
          X64Cmp && deoptimize if not equal v95(R) v96 #21 v0(S) v1(-) v2(-) v3(S) v97(-) [immediate:104]
gap () () 
          X64Push v56(-)
gap () ([rdi|R|t] = v94(-); [rax|R|w64] = v20(-); [rsi|R|t] = v57(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:103] #-1 #20 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          [constant:62] = ArchNop
gap () () 
          v63(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:102]
gap () () 
          X64Test32 && deoptimize if equal v63 #1 #19 v0(S) v1(-) v2(-) v3(S) v63(-) [immediate:101]
gap () () 
          X64Cmp32 : MRI && branch if equal v63(R) [immediate:98] v67(R) [immediate:99] [immediate:100]
gap () () 
          [constant:92] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v63(R) [immediate:96] v92(R) #18 v0(S) v1(-) v2(-) v3(S) v63(-) [immediate:97]
gap () () 
          v91(R) = X64MovqDecompressTaggedPointer : MRI v63(R) [immediate:95]
gap () () 
          v72(R) = X64Movl : MRI v91(R) [immediate:94]
gap () () 
          v71(R) = X64Movl : MRI v91(R) [immediate:93]
gap () () 
          v70(R) = X64Movl : MRI v91(R) [immediate:92]
gap () () 
          v83(R) = X64MovqDecompressTaggedSigned : MRI v91(R) [immediate:91]
gap () () 
          v84(R) = X64Movq : MR v80(R)
gap () () 
          [constant:88] = ArchNop
gap () () 
          v89(R) = X64Lea : MRI v84(R) [immediate:90]
gap () () 
          [constant:75] = ArchNop
gap () () 
          X64Cmp : MR && branch if unsigned greater than v90(R) v89(R) [immediate:88] [immediate:89]
gap () () 
          ArchJmp [immediate:87]
gap () ([rdx|R|w64] = v88(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:86] #-1 [rdx|R|w64]
gap (v87(-) = [rax|R|tp];) () 
          v85(R) = X64Lea : MRI v87(R) [immediate:85]
gap () (v79 = v85(-);) 
          ArchJmp [immediate:84]
gap () (v79 = v84(-);) 
          ArchJmp [immediate:83]
gap () (v82(R) = v83(-);) 
          v82(1) = X64Sar32 v82(R) #1
gap () () 
          v81(R) = X64Lea : MRI v79(R) [immediate:82]
gap () (v78(R) = v82(-);) 
          v78(1) = X64And32 v78(R) #1073740800
gap () () 
          X64Movq : MR v80(R) v81(R)
gap () () 
          v77(R) = X64Lea : MRI v79(R) [immediate:81]
gap () (v76(R) = v78(-);) 
          v76(1) = X64Or32 v76(R) #6
gap () (v64 = v77(-);) 
          v64(1) = ArchNop v64
gap () () 
          v74(R) = X64Lea32 : MR1 v76(R) v76(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:80] v75(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:79] v74(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:78] v72(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:77] v71(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:76] v70(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:75] v56(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:74] v56(R)
gap () () 
          X64MovqCompressTagged : MRI v64(R) [immediate:73] v62(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v63(R) [immediate:72] v67(R)
gap () () 
          ArchStoreWithWriteBarrier : MRI v63(R) [immediate:71] v64(R)
gap () () 
          ArchJmp [immediate:70]
gap () () 
          v61(R) = X64MovqDecompressTaggedPointer : MRI v63(R) [immediate:69]
gap () () 
          X64MovqCompressTagged : MRI v61(R) [immediate:68] v62(R)
gap () () 
          ArchJmp [immediate:67]
gap () () 
          v55(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:66]
gap () () 
          X64Test32 && deoptimize if equal v55 #1 #17 v0(S) v1(-) v2(-) v3(S) v55(-)
gap () () 
          v60(R) = X64MovqDecompressTaggedPointer : MRI v55(R) [immediate:65]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v60(R) [immediate:64] #1068 #16 v0(S) v1(-) v2(-) v3(S) v55(-)
gap () () 
          [constant:58] = ArchNop
gap () () 
          v59(R) = X64MovqDecompressTaggedPointer : MRI v55(R) [immediate:63]
gap () () 
          X64Cmp && deoptimize if not equal v58(R) v59 #15 v0(S) v1(-) v2(-) v3(S) v55(-)
gap () () 
          X64Push v56(-)
gap () ([rdi|R|t] = v55(-); [rax|R|w64] = v20(-); [rsi|R|t] = v57(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:62] #-1 #14 v0(S) v1(S) v2(S) v3(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () (v7 = v53(-); v22 = v20(-);) 
          ArchJmp [immediate:61]
gap () () 
          v48(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:60]
gap () () 
          X64Test32 && deoptimize if equal v48 #1 #13 v0(S) v1(-) v2(-) v3(S) v22(-) v7(-) v48(-)
gap () () 
          v51(R) = X64Movl : MRI v48(R) [immediate:59]
gap () () 
          X64Cmp32 && branch if equal v52(R) v51 [immediate:57] [immediate:58]
gap () () 
          X64Cmp32 && deoptimize if not equal v51(R) v39 #12 v0(S) v1(-) v2(-) v3(S) v22(-) v7(-) v48(-)
gap () () 
          ArchJmp [immediate:56]
gap () () 
          ArchJmp [immediate:55]
gap () () 
          v50(R) = X64MovqDecompressTaggedSigned : MRI v48(R) [immediate:54]
gap () (v49(R) = v50(-);) 
          v49(1) = X64Sar32 v49(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v22(R) v49 [immediate:52] [immediate:53]
gap () () 
          [constant:42] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v48(R) [immediate:51] v42(R) #11 v0(S) v1(-) v2(-) v3(S) v22(-) v7(-) v48(-)
gap () () 
          v46(R) = X64MovqDecompressTaggedPointer : MRI v48(R) [immediate:50]
gap () () 
          v43(R) = X64MovqDecompressAnyTagged : MR4I v46(R) v22(R) [immediate:49]
gap () () 
          [constant:45] = ArchNop
gap () ([rdx|R|t] = v43(-); [rcx|R|t] = v44(-); [rax|R|w64] = v45(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:48] #-1 #10 v0(S) v1(S) v2(S) v3(S) v22(S) v7(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v26(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v26 #1 #9 v0(S) v1(-) v2(-) v3(S) v22(-) v7(-) v26(-) [immediate:47]
gap () () 
          v41(R) = X64Movl : MRI v26(R) [immediate:46]
gap () () 
          X64Cmp32 && branch if equal v42(R) v41 [immediate:44] [immediate:45]
gap () () 
          X64Cmp32 && deoptimize if not equal v41(R) v39 #8 v0(S) v1(-) v2(-) v3(S) v22(-) v7(-) v26(-) [immediate:43]
gap () () 
          ArchJmp [immediate:42]
gap () () 
          ArchJmp [immediate:41]
gap () () 
          v40(R) = X64MovqDecompressTaggedSigned : MRI v26(R) [immediate:40]
gap () (v33(R) = v40(-);) 
          v33(1) = X64Sar32 v33(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v33 #0 [immediate:38] [immediate:39]
gap () (v18 = v7(-);) 
          ArchJmp [immediate:37]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v26(R) [immediate:35] v39(R) #7 v0(S) v1(-) v2(-) v3(S) v22(-) v7(-) v26(-) [immediate:36]
gap () () 
          v31(R) = X64MovqDecompressTaggedPointer : MRI v26(R) [immediate:34]
gap () () 
          v38(R) = X64Movsd : MRI v31(R) [immediate:33]
gap () () 
          v34(R) = AVXFloat64Add v38(R) v7
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:31] [immediate:32]
gap () () 
          [constant:37] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v37(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:30] #-1 #6 v0(S) v1(S) v2(S) v3(S) v22(S) v34(S) v26(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:29]
gap () () 
          ArchJmp [immediate:28]
gap () (v23 = v34(-); v30 = v35(-);) 
          ArchJmp [immediate:27]
gap () () 
          X64Cmp32 && branch if unsigned less than v30(R) v33 [immediate:25] [immediate:26]
gap () () 
          v29(R) = X64Movsd : MR8I v31(R) v30(R) [immediate:24]
gap () () 
          v27(R) = X64Lea32 : MRI v30(R) #1
gap () () 
          v25(R) = AVXFloat64Add v29(R) v23
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:22] [immediate:23]
gap () () 
          [constant:28] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v28(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:21] #-1 #5 v0(S) v1(S) v2(S) v3(S) v22(S) v25(S) v26(S) v27(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:20]
gap () () 
          ArchJmp [immediate:19]
gap () (v23 = v25(-); v30 = v27(-);) 
          ArchJmp [immediate:18]
gap () (v18 = v23(-);) 
          ArchJmp [immediate:17]
gap () () 
          v17(R) = X64Lea32 : MRI v22(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:15] [immediate:16]
gap () () 
          [constant:21] = ArchNop
gap () ([rbx|R|w64] = v19(-); [rax|R|w64] = v20(-); [rsi|R|t] = v21(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:14] #-1 #4 v0(S) v1(S) v2(S) v3(S) v17(S) v18(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:13]
gap () () 
          ArchJmp [immediate:12]
gap () (v7 = v18(-); v22 = v17(-);) 
          ArchJmp [immediate:11]
gap () () 
          v14(R) = X64MovqDecompressAnyTagged : MRI v3(R) [immediate:10]
gap () () 
          [constant:15] = ArchNop
gap () ([rdx|R|t] = v14(-); [rcx|R|t] = v2(-); [rax|R|w64] = v15(-); [rsi|R|t] = v3(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:9] #-1 #3 v0(S) v1(S) v2(S) v3(S) v7(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v8(-) = [rax|R|t];) () 
          X64Test32 && branch if equal v8 #1 [immediate:7] [immediate:8]
gap () () 
          v13(R) = X64Movl : MRI v8(R) [immediate:6]
gap () () 
          X64Cmp32 : Root && deoptimize if not equal #304 v13(R) #2 v0(S) v1(-) v2(-) v3(S) v7(-) v8(-)
gap () () 
          v10(R) = X64Movsd : MRI v8(R) [immediate:5]
gap () (v9 = v10(-);) 
          ArchJmp [immediate:4]
gap () (v12(R) = v8(-);) 
          v12(1) = X64Sar32 v12(R) #1
gap () () 
          v11(R) = SSEInt32ToFloat64 v12
gap () (v9 = v11(-);) 
          ArchJmp [immediate:3]
gap () () 
          AVXFloat64Cmp && branch if unordered equal v9(R) v7 [immediate:1] [immediate:2]
gap () () 
          ArchDeoptimize #1 v0(S) v1(-) v2(-) v3(S) v7(-) v8(-)
gap () () 
          [constant:6] = ArchNop
gap () ([rax|R|t] = v6(-);) 
          ArchRet #0 [rax|R|t]
gap () () 
          ArchDebugBreak
gap () () 
          ArchThrowTerminator
gap () () 
          ArchDeoptimize #0 v0(S) v1(-) v2(-) v3(S) v4(-) [immediate:0] v5(-) v2(-)
print sib pairs
2, v22, v46
2, v97, v203
2, v133, v151
2, v220, v272
2, v220, v272
2, v220, v301
2, v220, v349
2, v220, v349
2, v220, v377
2, v710, v715
2, v710, v741
2, v710, v744
2, v710, v747
2, v873, v869
2, v710, v772
2, v710, v775
2, v835, v830
2, v606, v840
2, v855, v850
2, v606, v860
2, v606, v878
3, v30, v31
3, v133, v113
3, v245, v224
3, v245, v282
3, v245, v288
3, v245, v258
3, v245, v274
3, v631, v621
print modrm pairs
1, v10, v8
1, v13, v8
1, v14, v3
1, v17, v22
1, v27, v30
1, v38, v31
1, v31, v26
1, v39, v26
1, v41, v26
1, v51, v48
1, v48, v3
1, v59, v55
1, v61, v63
1, v64, v63
1, v67, v63
1, v56, v64
1, v74, v64
1, v75, v64
1, v77, v79
1, v81, v79
1, v89, v84
1, v83, v91
1, v70, v91
1, v71, v91
1, v72, v91
1, v91, v63
1, v67, v63
1, v63, v3
1, v98, v94
1, v100, v97
1, v132, v104
1, v111, v133
1, v141, v134
1, v143, v135
1, v121, v144
1, v126, v146
1, v130, v146
1, v127, v144
1, v148, v109
1, v144, v109
1, v146, v150
1, v151, v108
1, v5, v3
1, v178, v109
1, v168, v171
1, v1310, v1302
1, v179, v180
1, v186, v187
1, v188, v187
1, v524, v3
1, v190, v156
1, v552, v551
1, v191, v192
1, v187, v192
1, v200, v107
1, v432, v438
1, v201, v107
1, v107, v3
1, v203, v207
1, v206, v207
1, v244, v242
1, v1238, v1216
1, v247, v242
1, v996, v974
1, v178, v242
1, v274, v277
1, v39, v261
1, v42, v48
1, v67, v1375
1, v268, v269
1, v284, v285
1, v744, v626
1, v282, v285
1, v285, v264
1, v72, v64
1, v294, v216
1, v239, v280
1, v1324, v1330
1, v1337, v1327
1, v301, v210
1, v295, v296
1, v813, v814
1, v272, v215
1, v290, v291
1, v308, v306
1, v331, v324
1, v332, v323
1, v1179, v1196
1, v325, v323
1, v499, v478
1, v178, v323
1, v39, v338
1, v313, v335
1, v178, v338
1, v178, v291
1, v314, v343
1, v178, v346
1, v1422, v1424
1, v317, v350
1, v178, v353
1, v318, v356
1, v300, v215
1, v951, v954
1, v321, v358
1, v866, v854
1, v360, v361
1, v358, v361
1, v695, v660
1, v209, v207
1, v39, v361
1, v775, v624
1, v178, v361
1, v389, v390
1, v361, v341
1, v397, v398
1, v322, v356
1, v570, v569
1, v319, v364
1, v847, v834
1, v1001, v996
1, v39, v367
1, v178, v367
1, v1119, v1116
1, v367, v341
1, v163, v171
1, v258, v261
1, v422, v418
1, v683, v621
1, v370, v216
1, v587, v588
1, v167, v171
1, v341, v216
1, v371, v372
1, v1330, v1333
1, v356, v372
1, v39, v372
1, v376, v215
1, v178, v626
1, v178, v624
1, v178, v625
1, v178, v665
1, v178, v664
1, v237, v280
1, v386, v380
1, v387, v380
1, v185, v104
1, v291, v264
1, v390, v392
1, v502, v498
1, v171, v180
1, v869, v581
1, v393, v394
1, v530, v1080
1, v1216, v3
1, v392, v394
1, v400, v402
1, v406, v214
1, v407, v214
1, v135, v104
1, v965, v967
1, v214, v3
1, v1237, v1234
1, v215, v3
1, v420, v416
1, v843, v844
1, v260, v261
1, v416, v415
1, v923, v914
1, v424, v423
1, v805, v625
1, v39, v277
1, v1002, v974
1, v349, v215
1, v216, v3
1, v427, v428
1, v431, v432
1, v519, v521
1, v428, v432
1, v435, v434
1, v491, v493
1, v303, v210
1, v530, v1046
1, v437, v438
1, v441, v422
1, v442, v441
1, v39, v423
1, v39, v433
1, v39, v441
1, v445, v446
1, v178, v285
1, v440, v446
1, v467, v470
1, v53, v424
1, v53, v434
1, v53, v442
1, v446, v448
1, v451, v422
1, v388, v422
1, v450, v453
1, v960, v963
1, v185, v423
1, v185, v441
1, v185, v433
1, v185, v418
1, v185, v451
1, v455, v456
1, v458, v460
1, v462, v457
1, v535, v524
1, v415, v410
1, v320, v356
1, v413, v467
1, v55, v3
1, v1295, v3
1, v471, v465
1, v1213, v1212
1, v410, v3
1, v429, v428
1, v178, v481
1, v388, v484
1, v453, v456
1, v1480, v1479
1, v486, v489
1, v39, v242
1, v495, v490
1, v266, v269
1, v185, v888
1, v479, v478
1, v497, v478
1, v1261, v1251
1, v478, v3
1, v181, v108
1, v377, v210
1, v438, v440
1, v434, v433
1, v178, v511
1, v383, v382
1, v522, v518
1, v515, v514
1, v388, v512
1, v514, v517
1, v364, v367
1, v353, v341
1, v1160, v1154
1, v510, v509
1, v523, v509
1, v525, v509
1, v526, v527
1, v529, v524
1, v1140, v1131
1, v538, v524
1, v532, v531
1, v532, v535
1, v541, v535
1, v952, v940
1, v546, v535
1, v860, v863
1, v547, v535
1, v556, v558
1, v194, v196
1, v184, v1114
1, v207, v3
1, v586, v576
1, v554, v561
1, v530, v1216
1, v542, v561
1, v222, v245
1, v544, v561
1, v562, v524
1, v71, v64
1, v178, v470
1, v184, v215
1, v184, v210
1, v1354, v1357
1, v1375, v3
1, v567, v564
1, v568, v569
1, v465, v3
1, v585, v581
1, v381, v382
1, v812, v780
1, v812, v795
1, v185, v576
1, v1024, v1011
1, v569, v588
1, v590, v592
1, v1161, v1148
1, v594, v589
1, v858, v859
1, v596, v606
1, v464, v410
1, v178, v277
1, v611, v608
1, v955, v941
1, v618, v607
1, v439, v440
1, v620, v612
1, v210, v3
1, v619, v603
1, v612, v603
1, v430, v442
1, v430, v424
1, v430, v434
1, v430, v621
1, v852, v856
1, v628, v631
1, v638, v621
1, v544, v535
1, v640, v641
1, v641, v650
1, v658, v661
1, v670, v660
1, v671, v621
1, v178, v269
1, v1404, v1406
1, v811, v810
1, v696, v665
1, v241, v280
1, v660, v665
1, v62, v64
1, v692, v661
1, v697, v664
1, v661, v664
1, v264, v216
1, v621, v600
1, v543, v561
1, v185, v600
1, v343, v346
1, v39, v600
1, v454, v451
1, v700, v699
1, v1315, v1318
1, v190, v621
1, v701, v702
1, v452, v453
1, v704, v706
1, v527, v524
1, v707, v703
1, v96, v94
1, v666, v663
1, v711, v663
1, v663, v627
1, v735, v727
1, v733, v722
1, v856, v859
1, v734, v665
1, v694, v661
1, v727, v665
1, v414, v467
1, v1356, v1357
1, v1349, v1346
1, v565, v564
1, v743, v625
1, v582, v581
1, v752, v664
1, v764, v753
1, v39, v346
1, v766, v758
1, v758, v664
1, v777, v624
1, v782, v780
1, v787, v792
1, v433, v422
1, v792, v626
1, v797, v795
1, v642, v621
1, v803, v789
1, v345, v346
1, v108, v3
1, v810, v814
1, v184, v418
1, v795, v664
1, v388, v780
1, v388, v795
1, v627, v623
1, v826, v623
1, v772, v625
1, v67, v1375
1, v173, v109
1, v827, v623
1, v543, v535
1, v1227, v1217
1, v833, v834
1, v40, v26
1, v1384, v1401
1, v330, v325
1, v830, v834
1, v1374, v1376
1, v741, v625
1, v832, v836
1, v185, v511
1, v530, v1182
1, v726, v723
1, v838, v839
1, v836, v839
1, v39, v150
1, v850, v854
1, v680, v661
1, v60, v55
1, v184, v863
1, v854, v3
1, v985, v975
1, v872, v581
1, v576, v575
1, v530, v891
1, v1347, v1348
1, v862, v863
1, v1023, v1017
1, v871, v874
1, v277, v264
1, v878, v879
1, v530, v1114
1, v603, v575
1, v1111, v1110
1, v447, v448
1, v881, v879
1, v883, v581
1, v879, v575
1, v899, v888
1, v575, v581
1, v808, v624
1, v902, v901
1, v812, v899
1, v1308, v1309
1, v471, v1479
1, v906, v908
1, v920, v914
1, v498, v3
1, v765, v664
1, v1017, v1011
1, v922, v914
1, v513, v514
1, v531, v524
1, v1342, v1348
1, v470, v465
1, v1143, v3
1, v1389, v1391
1, v903, v904
1, v423, v422
1, v623, v3
1, v1299, v1300
1, v1302, v1298
1, v928, v927
1, v1459, v1375
1, v648, v621
1, v530, v891
1, v1496, v1492
1, v185, v911
1, v940, v935
1, v70, v64
1, v1363, v1366
1, v927, v937
1, v1475, v1375
1, v788, v789
1, v939, v935
1, v1120, v1114
1, v941, v935
1, v943, v935
1, v944, v945
1, v934, v891
1, v947, v948
1, v853, v854
1, v950, v951
1, v350, v353
1, v1243, v1233
1, v1057, v1047
1, v948, v951
1, v1362, v1363
1, v953, v954
1, v956, v957
1, v954, v957
1, v864, v854
1, v958, v942
1, v659, v660
1, v1074, v1046
1, v959, v960
1, v957, v960
1, v892, v891
1, v1442, v1444
1, v218, v220
1, v1072, v1063
1, v961, v943
1, v178, v938
1, v178, v939
1, v178, v943
1, v178, v940
1, v178, v941
1, v178, v942
1, v39, v296
1, v560, v555
1, v974, v3
1, v936, v937
1, v971, v970
1, v185, v1480
1, v844, v845
1, v937, v945
1, v979, v976
1, v987, v974
1, v817, v818
1, v39, v385
1, v39, v386
1, v39, v384
1, v39, v387
1, v184, v891
1, v184, v911
1, v338, v341
1, v509, v3
1, v1073, v1068
1, v980, v974
1, v530, v974
1, v1488, v1480
1, v1209, v1204
1, v178, v877
1, v184, v974
1, v1008, v1007
1, v1039, v1011
1, v1016, v1013
1, v1114, v3
1, v189, v156
1, v189, v621
1, v1246, v3
1, v1193, v1183
1, v466, v410
1, v184, v1080
1, v971, v988
1, v962, v963
1, v1210, v1182
1, v276, v277
1, v1008, v1025
1, v900, v901
1, v938, v935
1, v1229, v1216
1, v1037, v1028
1, v1033, v1011
1, v1406, v1375
1, v1290, v1300
1, v530, v1011
1, v39, v323
1, v698, v699
1, v183, v108
1, v1043, v1060
1, v185, v665
1, v185, v664
1, v1067, v1064
1, v946, v938
1, v1046, v3
1, v1077, v1076
1, v1085, v1082
1, v1425, v1375
1, v1092, v1086
1, v1093, v1080
1, v379, v210
1, v1086, v1080
1, v1077, v1094
1, v388, v1298
1, v388, v1322
1, v388, v1346
1, v1101, v1098
1, v874, v877
1, v1355, v1349
1, v1106, v1097
1, v125, v144
1, v802, v806
1, v1102, v1080
1, v809, v810
1, v713, v710
1, v233, v266
1, v1003, v3
1, v366, v367
1, v1109, v3
1, v178, v1480
1, v1080, v3
1, v1125, v1115
1, v1317, v1318
1, v1392, v1391
1, v1135, v1132
1, v280, v296
1, v1298, v1295
1, v184, v879
1, v184, v888
1, v94, v3
1, v1142, v1114
1, v1271, v4
1, v891, v3
1, v337, v338
1, v1136, v1114
1, v914, v891
1, v1040, v3
1, v142, v104
1, v1286, v1285
1, v1145, v1144
1, v709, v663
1, v1153, v1150
1, v1159, v1149
1, v1382, v1376
1, v380, v210
1, v1487, v1479
1, v549, v551
1, v185, v938
1, v185, v939
1, v185, v943
1, v185, v940
1, v185, v941
1, v185, v942
1, v1154, v1148
1, v1319, v3
1, v1346, v1343
1, v178, v4
1, v254, v247
1, v1145, v1162
1, v780, v665
1, v1000, v991
1, v185, v210
1, v185, v385
1, v185, v386
1, v185, v384
1, v185, v387
1, v404, v399
1, v757, v754
1, v1169, v1166
1, v1111, v1128
1, v184, v1319
1, v184, v1295
1, v184, v1343
1, v1452, v1375
1, v1174, v1165
1, v1175, v1170
1, v1176, v1148
1, v1170, v1148
1, v679, v660
1, v184, v844
1, v530, v1148
1, v184, v1148
1, v1348, v1354
1, v910, v891
1, v1451, v1375
1, v1331, v1325
1, v1177, v3
1, v484, v481
1, v1148, v3
1, v1471, v1375
1, v128, v146
1, v288, v291
1, v1187, v1184
1, v1194, v1188
1, v1424, v1375
1, v1188, v1182
1, v1245, v1216
1, v845, v834
1, v561, v524
1, v1203, v1200
1, v1244, v1238
1, v178, v859
1, v1428, v1375
1, v909, v905
1, v1182, v3
1, v1213, v1230
1, v178, v839
1, v1328, v1322
1, v933, v932
1, v1360, v1363
1, v1221, v1218
1, v1382, v1401
1, v1248, v1247
1, v1493, v1495
1, v184, v1011
1, v184, v108
1, v39, v291
1, v50, v48
1, v1335, v1336
1, v1260, v1256
1, v1043, v1042
1, v169, v171
1, v184, v4
1, v253, v246
1, v1262, v4
1, v949, v939
1, v1248, v1263
1, v1032, v1029
1, v1333, v1336
1, v1358, v1350
1, v1276, v1266
1, v995, v992
1, v184, v1216
1, v388, v380
1, v942, v935
1, v384, v380
1, v1228, v1222
1, v1278, v4
1, v1322, v1319
1, v39, v353
1, v1255, v1252
1, v1439, v1438
1, v1339, v1342
1, v184, v4
1, v185, v481
1, v649, v621
1, v1288, v1285
1, v4, v3
1, v110, v107
1, v986, v980
1, v1304, v1298
1, v820, v822
1, v1222, v1216
1, v774, v625
1, v1416, v1375
1, v1431, v1425
1, v1387, v1376
1, v1127, v1114
1, v1303, v1298
1, v1314, v1315
1, v917, v891
1, v39, v180
1, v39, v104
1, v1350, v1346
1, v1463, v1375
1, v1300, v1306
1, v1270, v1267
1, v1478, v1375
1, v388, v935
1, v1022, v1012
1, v721, v665
1, v1052, v1046
1, v255, v242
1, v85, v87
1, v425, v424
1, v1323, v1324
1, v1311, v1312
1, v516, v517
1, v1126, v1120
1, v149, v150
1, v969, v964
1, v1313, v1303
1, v791, v625
1, v1305, v1306
1, v178, v451
1, v1141, v1136
1, v1436, v1438
1, v1408, v1375
1, v1309, v1312
1, v1316, v1304
1, v1204, v1182
1, v911, v910
1, v911, v914
1, v1413, v1415
1, v1318, v1324
1, v178, v261
1, v888, v887
1, v888, v892
1, v1384, v1376
1, v1401, v1375
1, v421, v416
1, v1340, v1328
1, v1326, v1322
1, v92, v63
1, v1373, v1375
1, v581, v3
1, v1327, v1322
1, v396, v398
1, v1256, v4
1, v1329, v1330
1, v1338, v1339
1, v1381, v1376
1, v1332, v1333
1, v469, v470
1, v840, v844
1, v1334, v1326
1, v184, v1046
1, v1479, v3
1, v1336, v1339
1, v1059, v1046
1, v1108, v1080
1, v1396, v1398
1, v925, v927
1, v512, v511
1, v1343, v3
1, v184, v216
1, v449, v450
1, v1208, v1199
1, v1306, v1309
1, v693, v660
1, v184, v576
1, v1195, v1182
1, v395, v396
1, v1211, v3
1, v198, v193
1, v1075, v3
1, v935, v911
1, v746, v626
1, v1038, v1033
1, v412, v467
1, v1359, v1360
1, v1357, v1360
1, v501, v502
1, v1068, v1046
1, v1400, v1395
1, v699, v702
1, v814, v816
1, v185, v1295
1, v185, v1301
1, v185, v1303
1, v185, v1304
1, v185, v1326
1, v185, v1319
1, v185, v1343
1, v185, v1325
1, v185, v1302
1, v185, v1327
1, v185, v1349
1, v185, v1350
1, v185, v1351
1, v185, v1328
1, v185, v1352
1, v39, v109
1, v1307, v1301
1, v1107, v1102
1, v542, v535
1, v1394, v1401
1, v824, v819
1, v1361, v1351
1, v1058, v1052
1, v1368, v1370
1, v1450, v1449
1, v1489, v1490
1, v1372, v1367
1, v1301, v1298
1, v816, v818
1, v1433, v1425
1, v1376, v1375
1, v129, v144
1, v1466, v1375
1, v1383, v1376
1, v1364, v1352
1, v1415, v1375
1, v164, v109
1, v180, v181
1, v156, v104
1, v1386, v1376
1, v485, v486
1, v1277, v4
1, v876, v877
1, v887, v891
1, v1456, v1375
1, v67, v1375
1, v1402, v1375
1, v443, v442
1, v158, v156
1, v1011, v3
1, v394, v396
1, v1365, v1366
1, v1374, v1373
1, v1407, v1375
1, v885, v812
1, v901, v904
1, v261, v264
1, v1491, v1490
1, v1091, v1081
1, v190, v424
1, v190, v434
1, v190, v442
1, v1411, v1375
1, v1289, v1290
1, v605, v603
1, v67, v1375
1, v122, v146
1, v39, v285
1, v1312, v1315
1, v217, v214
1, v448, v450
1, v411, v3
1, v1341, v1342
1, v1383, v1401
1, v1434, v1425
1, v39, v269
1, v806, v624
1, v898, v891
1, v385, v380
1, v178, v372
1, v815, v816
1, v382, v390
1, v504, v498
1, v46, v48
1, v1051, v1048
1, v1179, v1178
1, v1325, v1322
1, v184, v603
1, v1291, v1290
1, v1420, v1375
1, v178, v1301
1, v178, v1303
1, v178, v1304
1, v178, v1325
1, v178, v1302
1, v178, v1327
1, v178, v1326
1, v178, v1328
1, v178, v1350
1, v178, v1351
1, v178, v1349
1, v178, v1352
1, v794, v626
1, v67, v1375
1, v863, v864
1, v1468, v1375
1, v1474, v1375
1, v530, v524
1, v530, v581
1, v1352, v1346
1, v487, v486
1, v1446, v1441
1, v1353, v1354
1, v153, v108
1, v335, v338
1, v789, v625
1, v834, v3
1, v352, v353
1, v391, v392
1, v1417, v1375
1, v67, v1375
1, v184, v1182
1, v67, v1375
1, v945, v948
1, v1461, v1375
1, v178, v296
1, v1275, v1271
1, v388, v899
1, v62, v61
1, v1351, v1346
1, v1454, v1375
1, v67, v1375
1, v895, v891
1, v488, v489
assign xmm0 to v1450:0
assign 0 to v1450:0
assign xmm0 to v1286:0
assign 0 to v1286:0
assign xmm0 to v933:0
assign 0 to v933:0
assign xmm0 to v885:0
assign 0 to v885:0
assign xmm0 to v884:0
assign 0 to v884:0
v189:0 not intersect with v156:0, removed
v189:1 intersect with v156:0, adding
v189:0 not intersect with v621:0, removed
v189:1 intersect with v621:0, adding
assign xmm0 to v189:0
assign 0 to v189:0
v430:1 not intersect with v442:0, removed
v430:2 intersect with v442:0, adding
v430:1 not intersect with v424:0, removed
v430:2 intersect with v424:0, adding
v430:1 not intersect with v434:0, removed
v430:2 intersect with v434:0, adding
v430:1 not intersect with v621:6, removed
v430:2 intersect with v621:6, adding
assign xmm1 to v430:1
assign 1 to v430:1
blocking v189 pick register xmm0
blocking v430 pick register xmm0
assign xmm0 to v189:2
assign 0 to v189:2
assign xmm1 to v687:0
assign 1 to v687:0
assign xmm2 to v675:0
assign 2 to v675:0
assign xmm3 to v676:0
assign 3 to v676:0
assign xmm4 to v686:0
assign 4 to v686:0
assign xmm1 to v685:0
assign 1 to v685:0
assign xmm4 to v684:0
assign 4 to v684:0
assign xmm1 to v683:0
assign 1 to v683:0
assign xmm1 to v677:0
assign 1 to v677:0
assign xmm4 to v674:0
assign 4 to v674:0
assign xmm1 to v673:0
assign 1 to v673:0
assign xmm2 to v672:0
assign 2 to v672:0
assign xmm1 to v671:0
assign 1 to v671:0
assign xmm1 to v654:0
assign 1 to v654:0
assign xmm2 to v655:0
assign 2 to v655:0
assign xmm1 to v652:0
assign 1 to v652:0
assign xmm2 to v651:0
assign 2 to v651:0
assign xmm1 to v648:0
assign 1 to v648:0
assign xmm2 to v642:0
assign 2 to v642:0
assign xmm4 to v649:0
assign 4 to v649:0
assign xmm3 to v646:0
assign 3 to v646:0
assign xmm4 to v647:0
assign 4 to v647:0
assign xmm1 to v644:0
assign 1 to v644:0
assign xmm3 to v645:0
assign 3 to v645:0
assign xmm1 to v643:0
assign 1 to v643:0
assign xmm1 to v629:0
assign 1 to v629:0
assign xmm2 to v639:0
assign 2 to v639:0
assign xmm2 to v638:0
assign 2 to v638:0
assign xmm1 to v629:2
assign 1 to v629:2
assign xmm0 to v189:5
assign 0 to v189:5
assign xmm2 to v635:0
assign 2 to v635:0
assign xmm2 to v634:0
assign 2 to v634:0
assign xmm2 to v633:0
assign 2 to v633:0
assign xmm0 to v189:7
assign 0 to v189:7
assign xmm1 to v629:4
assign 1 to v629:4
assign xmm1 to v430:3
assign 1 to v430:3
assign xmm1 to v430:6
assign 1 to v430:6
assign xmm0 to v189:9
assign 0 to v189:9
assign xmm0 to v189:11
assign 0 to v189:11
assign xmm1 to v430:8
assign 1 to v430:8
assign xmm1 to v430:10
assign 1 to v430:10
assign xmm0 to v189:13
assign 0 to v189:13
assign xmm0 to v189:15
assign 0 to v189:15
assign xmm1 to v430:12
assign 1 to v430:12
assign xmm2 to v565:0
assign 2 to v565:0
assign xmm1 to v430:14
assign 1 to v430:14
assign xmm0 to v189:17
assign 0 to v189:17
assign xmm0 to v189:19
assign 0 to v189:19
assign xmm1 to v430:16
assign 1 to v430:16
blocking v430 pick register xmm0
blocking v189 pick register xmm0
assign xmm0 to v189:21
assign 0 to v189:21
assign xmm1 to v430:18
assign 1 to v430:18
assign xmm1 to v430:20
assign 1 to v430:20
assign xmm0 to v189:24
assign 0 to v189:24
assign xmm1 to v430:17
assign 1 to v430:17
assign xmm2 to v53:1
assign 2 to v53:1
assign xmm4 to v443:0
assign 4 to v443:0
assign xmm4 to v435:0
assign 4 to v435:0
assign xmm1 to v425:0
assign 1 to v425:0
assign xmm0 to v320:0
assign 0 to v320:0
assign xmm0 to v320:2
assign 0 to v320:2
assign xmm1 to v319:0
assign 1 to v319:0
assign xmm2 to v322:0
assign 2 to v322:0
blocking v319 pick register xmm1
assign xmm2 to v322:2
assign 2 to v322:2
assign xmm1 to v319:3
assign 1 to v319:3
assign xmm0 to v320:4
assign 0 to v320:4
assign xmm4 to v321:0
assign 4 to v321:0
assign xmm5 to v318:0
assign 5 to v318:0
blocking v321 pick register xmm4
assign xmm5 to v318:2
assign 5 to v318:2
assign xmm4 to v321:3
assign 4 to v321:3
assign xmm0 to v320:6
assign 0 to v320:6
assign xmm1 to v319:5
assign 1 to v319:5
assign xmm2 to v322:4
assign 2 to v322:4
assign xmm6 to v317:0
assign 6 to v317:0
blocking v317 pick register xmm6
assign xmm6 to v317:3
assign 6 to v317:3
assign xmm2 to v322:6
assign 2 to v322:6
assign xmm1 to v319:7
assign 1 to v319:7
assign xmm0 to v320:8
assign 0 to v320:8
assign xmm4 to v321:5
assign 4 to v321:5
assign xmm5 to v318:4
assign 5 to v318:4
assign xmm7 to v314:0
assign 7 to v314:0
assign xmm7 to v314:2
assign 7 to v314:2
assign xmm5 to v318:6
assign 5 to v318:6
assign xmm4 to v321:7
assign 4 to v321:7
assign xmm0 to v320:10
assign 0 to v320:10
assign xmm1 to v319:9
assign 1 to v319:9
assign xmm2 to v322:8
assign 2 to v322:8
assign xmm6 to v317:5
assign 6 to v317:5
assign xmm8 to v313:0
assign 8 to v313:0
blocking v313 pick register xmm8
assign xmm8 to v313:3
assign 8 to v313:3
assign xmm6 to v317:7
assign 6 to v317:7
assign xmm2 to v322:10
assign 2 to v322:10
assign xmm1 to v319:11
assign 1 to v319:11
assign xmm0 to v320:12
assign 0 to v320:12
assign xmm4 to v321:9
assign 4 to v321:9
assign xmm5 to v318:8
assign 5 to v318:8
assign xmm7 to v314:4
assign 7 to v314:4
assign xmm7 to v314:6
assign 7 to v314:6
assign xmm5 to v318:10
assign 5 to v318:10
assign xmm4 to v321:11
assign 4 to v321:11
assign xmm0 to v320:14
assign 0 to v320:14
assign xmm1 to v319:13
assign 1 to v319:13
assign xmm2 to v322:12
assign 2 to v322:12
assign xmm6 to v317:9
assign 6 to v317:9
assign xmm8 to v313:5
assign 8 to v313:5
assign xmm4 to v321:2
assign 4 to v321:2
assign xmm2 to v315:0
assign 2 to v315:0
assign xmm1 to v319:2
assign 1 to v319:2
assign xmm0 to v316:0
assign 0 to v316:0
assign xmm6 to v317:2
assign 6 to v317:2
assign xmm1 to v311:0
assign 1 to v311:0
assign xmm0 to v312:0
assign 0 to v312:0
assign xmm8 to v313:2
assign 8 to v313:2
assign xmm2 to v309:0
assign 2 to v309:0
assign xmm0 to v310:0
assign 0 to v310:0
assign xmm0 to v308:0
assign 0 to v308:0
assign xmm0 to v239:0
assign 0 to v239:0
assign xmm0 to v239:2
assign 0 to v239:2
assign xmm1 to v238:0
assign 1 to v238:0
assign xmm2 to v241:0
assign 2 to v241:0
blocking v238 pick register xmm1
assign xmm2 to v241:2
assign 2 to v241:2
assign xmm1 to v238:3
assign 1 to v238:3
assign xmm0 to v239:4
assign 0 to v239:4
assign xmm4 to v240:0
assign 4 to v240:0
assign xmm5 to v237:0
assign 5 to v237:0
blocking v240 pick register xmm4
assign xmm5 to v237:2
assign 5 to v237:2
assign xmm4 to v240:3
assign 4 to v240:3
assign xmm0 to v239:6
assign 0 to v239:6
assign xmm1 to v238:5
assign 1 to v238:5
assign xmm2 to v241:4
assign 2 to v241:4
assign xmm8 to v236:0
assign 8 to v236:0
blocking v236 pick register xmm8
assign xmm8 to v236:3
assign 8 to v236:3
assign xmm2 to v241:6
assign 2 to v241:6
assign xmm1 to v238:7
assign 1 to v238:7
assign xmm0 to v239:8
assign 0 to v239:8
assign xmm4 to v240:5
assign 4 to v240:5
assign xmm5 to v237:4
assign 5 to v237:4
assign xmm6 to v233:0
assign 6 to v233:0
assign xmm6 to v233:2
assign 6 to v233:2
assign xmm5 to v237:6
assign 5 to v237:6
assign xmm4 to v240:7
assign 4 to v240:7
assign xmm0 to v239:10
assign 0 to v239:10
assign xmm1 to v238:9
assign 1 to v238:9
assign xmm2 to v241:8
assign 2 to v241:8
assign xmm8 to v236:5
assign 8 to v236:5
assign xmm9 to v232:0
assign 9 to v232:0
blocking v232 pick register xmm9
assign xmm9 to v232:3
assign 9 to v232:3
assign xmm8 to v236:7
assign 8 to v236:7
assign xmm2 to v241:10
assign 2 to v241:10
assign xmm1 to v238:11
assign 1 to v238:11
assign xmm0 to v239:12
assign 0 to v239:12
assign xmm4 to v240:9
assign 4 to v240:9
assign xmm5 to v237:8
assign 5 to v237:8
assign xmm6 to v233:4
assign 6 to v233:4
assign xmm6 to v233:6
assign 6 to v233:6
assign xmm5 to v237:10
assign 5 to v237:10
assign xmm4 to v240:11
assign 4 to v240:11
assign xmm0 to v239:14
assign 0 to v239:14
assign xmm1 to v238:13
assign 1 to v238:13
assign xmm2 to v241:12
assign 2 to v241:12
assign xmm8 to v236:9
assign 8 to v236:9
assign xmm9 to v232:5
assign 9 to v232:5
assign xmm4 to v240:2
assign 4 to v240:2
assign xmm2 to v234:0
assign 2 to v234:0
assign xmm1 to v238:2
assign 1 to v238:2
assign xmm0 to v235:0
assign 0 to v235:0
assign xmm8 to v236:2
assign 8 to v236:2
assign xmm1 to v230:0
assign 1 to v230:0
assign xmm0 to v231:0
assign 0 to v231:0
assign xmm9 to v232:2
assign 9 to v232:2
assign xmm2 to v228:0
assign 2 to v228:0
assign xmm0 to v229:0
assign 0 to v229:0
assign xmm0 to v227:0
assign 0 to v227:0
assign xmm0 to v189:20
assign 0 to v189:20
blocking v189 pick register xmm0
assign xmm0 to v189:26
assign 0 to v189:26
assign xmm1 to v168:0
assign 1 to v168:0
blocking v168 pick register xmm1
assign xmm1 to v168:3
assign 1 to v168:3
assign xmm0 to v189:29
assign 0 to v189:29
assign xmm2 to v169:0
assign 2 to v169:0
assign xmm4 to v167:0
assign 4 to v167:0
assign xmm5 to v163:0
assign 5 to v163:0
assign xmm2 to v165:0
assign 2 to v165:0
assign xmm1 to v168:2
assign 1 to v168:2
assign xmm1 to v166:0
assign 1 to v166:0
assign xmm3 to v161:0
assign 3 to v161:0
assign xmm1 to v162:0
assign 1 to v162:0
assign xmm2 to v159:0
assign 2 to v159:0
assign xmm1 to v160:0
assign 1 to v160:0
assign xmm1 to v158:0
assign 1 to v158:0
assign xmm0 to v189:31
assign 0 to v189:31
assign xmm1 to v128:0
assign 1 to v128:0
assign xmm2 to v127:0
assign 2 to v127:0
assign xmm4 to v130:0
assign 4 to v130:0
assign xmm5 to v129:0
assign 5 to v129:0
assign xmm6 to v126:0
assign 6 to v126:0
assign xmm7 to v125:0
assign 7 to v125:0
assign xmm8 to v122:0
assign 8 to v122:0
assign xmm9 to v121:0
assign 9 to v121:0
blocking v127 pick register xmm2
blocking v129 pick register xmm5
blocking v125 pick register xmm7
blocking v121 pick register xmm9
assign xmm9 to v121:3
assign 9 to v121:3
assign xmm8 to v122:2
assign 8 to v122:2
assign xmm7 to v125:3
assign 7 to v125:3
assign xmm6 to v126:2
assign 6 to v126:2
assign xmm5 to v129:3
assign 5 to v129:3
assign xmm4 to v130:2
assign 4 to v130:2
assign xmm2 to v127:3
assign 2 to v127:3
assign xmm1 to v128:2
assign 1 to v128:2
assign xmm0 to v189:33
assign 0 to v189:33
assign xmm5 to v129:2
assign 5 to v129:2
assign xmm3 to v123:0
assign 3 to v123:0
assign xmm2 to v127:2
assign 2 to v127:2
assign xmm1 to v124:0
assign 1 to v124:0
assign xmm7 to v125:2
assign 7 to v125:2
assign xmm2 to v119:0
assign 2 to v119:0
assign xmm1 to v120:0
assign 1 to v120:0
assign xmm9 to v121:2
assign 9 to v121:2
assign xmm3 to v117:0
assign 3 to v117:0
assign xmm1 to v118:0
assign 1 to v118:0
assign xmm1 to v116:0
assign 1 to v116:0
assign xmm0 to v189:35
assign 0 to v189:35
assign xmm0 to v38:0
assign 0 to v38:0
assign xmm2 to v7:1
assign 2 to v7:1
assign xmm2 to v34:0
assign 2 to v34:0
assign xmm2 to v34:2
assign 2 to v34:2
assign xmm2 to v23:0
assign 2 to v23:0
assign xmm0 to v29:0
assign 0 to v29:0
assign xmm2 to v25:0
assign 2 to v25:0
assign xmm2 to v25:2
assign 2 to v25:2
assign xmm2 to v18:0
assign 2 to v18:0
assign xmm2 to v18:2
assign 2 to v18:2
assign xmm0 to v10:0
assign 0 to v10:0
assign xmm0 to v11:0
assign 0 to v11:0
assign xmm0 to v9:0
assign 0 to v9:0
spill count : 119
assign 0 to v-1:0
assign 3 to v-4:0
assign 2 to v-3:0
assign 1 to v-2:0
assign 6 to v-7:0
assign 7 to v-8:0
assign 8 to v-9:0
assign 9 to v-10:0
assign 11 to v-12:0
assign 12 to v-13:0
assign 14 to v-15:0
assign 15 to v-16:0
assign 0 to v-33:0
assign 1 to v-34:0
assign 2 to v-35:0
assign 3 to v-36:0
assign 4 to v-37:0
assign 5 to v-38:0
assign 6 to v-39:0
assign 7 to v-40:0
assign 8 to v-41:0
assign 9 to v-42:0
assign 10 to v-43:0
assign 11 to v-44:0
assign 12 to v-45:0
assign 13 to v-46:0
assign 14 to v-47:0
assign 0 to v-17:0
assign 3 to v-20:0
assign 2 to v-19:0
assign 1 to v-18:0
assign 6 to v-23:0
assign 7 to v-24:0
assign 8 to v-25:0
assign 9 to v-26:0
assign 11 to v-28:0
assign 12 to v-29:0
assign 14 to v-31:0
assign 15 to v-32:0
assign 0 to v-49:0
assign 1 to v-50:0
assign 2 to v-51:0
assign 3 to v-52:0
assign 4 to v-53:0
assign 5 to v-54:0
assign 6 to v-55:0
assign 7 to v-56:0
assign 8 to v-57:0
assign 9 to v-58:0
assign 10 to v-59:0
assign 11 to v-60:0
assign 12 to v-61:0
assign 13 to v-62:0
assign 14 to v-63:0
------------------------
function: Loop
add v694->v4
add v18->v694
add v691->v694
add v693->v694
add v692->v690
add v689->v686
add v688->v689
add v681->v678
add v680->v681
add v590->v4
add v591->v4
add v671->v4
add v146->v671
add v669->v671
add v672->v671
add v667->v669
add v80->v659
add v664->v659
add v666->v659
add v661->v664
add v663->v4
add v146->v663
add v657->v663
add v662->v663
add v655->v657
add v80->v647
add v652->v647
add v654->v647
add v649->v652
add v651->v4
add v146->v651
add v645->v651
add v650->v651
add v643->v645
add v80->v638
add v640->v638
add v642->v638
add v605->v640
add v639->v590
add v637->v590
add v595->v590
add v636->v632
add v633->v635
add v629->v631
add v630->v631
add v110->v627
add v117->v627
add v392->v627
add v626->v629
add v628->v629
add v329->v600
add v627->v600
add v624->v626
add v625->v626
add v116->v597
add v117->v597
add v600->v597
add v622->v624
add v623->v624
add v123->v619
add v370->v619
add v369->v619
add v369->v619
add v369->v619
add v617->v622
add v621->v622
add v80->v618
add v117->v618
add v619->v618
add v620->v619
add v618->v600
add v615->v617
add v616->v617
add v123->v612
add v369->v612
add v370->v612
add v369->v612
add v369->v612
add v610->v615
add v614->v615
add v80->v611
add v117->v611
add v612->v611
add v613->v612
add v611->v600
add v607->v610
add v609->v610
add v123->v602
add v369->v602
add v369->v602
add v370->v602
add v369->v602
add v608->v607
add v606->v607
add v80->v601
add v117->v601
add v602->v601
add v603->v602
add v601->v600
add v596->v595
add v599->v596
add v598->v596
add v541->v4
add v540->v4
add v587->v540
add v586->v540
add v542->v540
add v584->v484
add v483->v584
add v481->v584
add v583->v579
add v580->v582
add v575->v578
add v577->v578
add v110->v570
add v117->v570
add v576->v570
add v572->v575
add v574->v575
add v110->v569
add v117->v569
add v573->v569
add v568->v572
add v571->v572
add v329->v547
add v570->v547
add v569->v547
add v566->v568
add v567->v568
add v116->v544
add v117->v544
add v547->v544
add v564->v566
add v565->v566
add v123->v559
add v369->v559
add v369->v559
add v369->v559
add v369->v559
add v557->v564
add v563->v564
add v80->v558
add v117->v558
add v559->v558
add v550->v559
add v560->v559
add v558->v547
add v554->v557
add v556->v557
add v123->v549
add v369->v549
add v369->v549
add v369->v549
add v369->v549
add v555->v554
add v553->v554
add v80->v548
add v117->v548
add v549->v548
add v551->v549
add v550->v549
add v548->v547
add v543->v542
add v546->v543
add v545->v543
add v491->v4
add v490->v4
add v537->v490
add v536->v490
add v492->v490
add v534->v484
add v483->v534
add v481->v534
add v533->v529
add v530->v532
add v525->v528
add v527->v528
add v110->v520
add v117->v520
add v526->v520
add v522->v525
add v524->v525
add v110->v519
add v117->v519
add v523->v519
add v518->v522
add v521->v522
add v329->v497
add v520->v497
add v519->v497
add v516->v518
add v517->v518
add v116->v494
add v117->v494
add v497->v494
add v514->v516
add v515->v516
add v123->v509
add v369->v509
add v369->v509
add v369->v509
add v369->v509
add v507->v514
add v513->v514
add v80->v508
add v117->v508
add v509->v508
add v500->v509
add v510->v509
add v508->v497
add v504->v507
add v506->v507
add v123->v499
add v369->v499
add v369->v499
add v369->v499
add v369->v499
add v505->v504
add v503->v504
add v80->v498
add v117->v498
add v499->v498
add v501->v499
add v500->v499
add v498->v497
add v493->v492
add v496->v493
add v495->v493
add v437->v4
add v436->v4
add v487->v436
add v486->v436
add v438->v436
add v482->v484
add v483->v482
add v481->v482
add v480->v475
add v476->v478
add v471->v474
add v473->v474
add v110->v466
add v117->v466
add v472->v466
add v468->v471
add v470->v471
add v110->v465
add v117->v465
add v469->v465
add v464->v468
add v467->v468
add v329->v443
add v466->v443
add v465->v443
add v462->v464
add v463->v464
add v116->v440
add v117->v440
add v443->v440
add v460->v462
add v461->v462
add v123->v455
add v369->v455
add v369->v455
add v369->v455
add v369->v455
add v453->v460
add v459->v460
add v80->v454
add v117->v454
add v455->v454
add v446->v455
add v456->v455
add v454->v443
add v450->v453
add v452->v453
add v123->v445
add v369->v445
add v369->v445
add v369->v445
add v369->v445
add v451->v450
add v449->v450
add v80->v444
add v117->v444
add v445->v444
add v447->v445
add v446->v445
add v444->v443
add v439->v438
add v442->v439
add v441->v439
add v352->v4
add v351->v4
add v432->v4
add v146->v432
add v430->v432
add v433->v432
add v428->v430
add v80->v422
add v425->v422
add v427->v422
add v353->v425
add v424->v4
add v146->v424
add v420->v424
add v423->v424
add v418->v420
add v80->v412
add v415->v412
add v417->v412
add v354->v415
add v414->v4
add v146->v414
add v410->v414
add v413->v414
add v408->v410
add v80->v403
add v405->v403
add v407->v403
add v355->v405
add v404->v351
add v402->v351
add v356->v351
add v400->v395
add v396->v398
add v391->v394
add v393->v394
add v110->v389
add v117->v389
add v392->v389
add v388->v391
add v390->v391
add v329->v362
add v389->v362
add v386->v388
add v387->v388
add v116->v358
add v117->v358
add v362->v358
add v384->v386
add v385->v386
add v123->v381
add v370->v381
add v369->v381
add v369->v381
add v369->v381
add v379->v384
add v383->v384
add v80->v380
add v117->v380
add v381->v380
add v382->v381
add v380->v362
add v377->v379
add v378->v379
add v123->v374
add v369->v374
add v370->v374
add v369->v374
add v369->v374
add v372->v377
add v376->v377
add v80->v373
add v117->v373
add v374->v373
add v375->v374
add v373->v362
add v367->v372
add v371->v372
add v123->v364
add v369->v364
add v369->v364
add v370->v364
add v369->v364
add v368->v367
add v366->v367
add v80->v363
add v117->v363
add v364->v363
add v365->v364
add v363->v362
add v357->v356
add v361->v357
add v360->v357
add v153->v4
add v152->v4
add v154->v4
add v348->v152
add v347->v152
add v155->v152
add v345->v340
add v341->v343
add v337->v339
add v338->v339
add v80->v328
add v117->v328
add v117->v328
add v335->v337
add v336->v337
add v80->v327
add v117->v327
add v117->v327
add v333->v335
add v334->v335
add v80->v326
add v117->v326
add v117->v326
add v331->v333
add v332->v333
add v80->v325
add v117->v325
add v117->v325
add v323->v331
add v330->v331
add v329->v321
add v328->v321
add v327->v321
add v326->v321
add v325->v321
add v324->v323
add v322->v323
add v116->v148
add v117->v148
add v321->v148
add v318->v148
add v320->v148
adding pairs 2, v159:0x7fffc0136330, v318:0x7fffc012b3c8
add v116->v153
add v290->v153
add v317->v153
adding pairs 2, v159:0x7fffc0136330, v290:0x7fffc012b648
add v110->v313
add v80->v313
add v297->v313
add v312->v313
add v261->v297
add v116->v154
add v282->v154
add v311->v154
add v308->v282
add v110->v308
add v80->v308
add v305->v308
add v307->v308
add v260->v305
add v263->v297
add v302->v282
add v110->v302
add v80->v302
add v299->v302
add v301->v302
add v262->v299
add v259->v297
add v294->v282
add v110->v294
add v80->v294
add v291->v294
add v293->v294
add v258->v291
adding pairs 2, v159:0x7fffc0136330, v290:0x7fffc012b648
add v110->v287
add v80->v287
add v284->v287
add v286->v287
add v255->v284
add v279->v282
add v110->v279
add v80->v279
add v276->v279
add v278->v279
add v254->v276
add v110->v264
add v80->v264
add v266->v264
add v273->v264
add v271->v266
add v272->v265
add v249->v247
add v241->v148
add v243->v148
adding pairs 2, v159:0x7fffc0136330, v241:0x7fffc012e118
add v212->v153
add v240->v153
adding pairs 2, v159:0x7fffc0136330, v212:0x7fffc012e3f8
add v110->v236
add v80->v236
add v220->v236
add v235->v236
add v179->v220
add v204->v154
add v234->v154
add v231->v204
add v110->v231
add v80->v231
add v228->v231
add v230->v231
adding pairs 3, v185:0x7fffc0136100, v228:0x7fffc012edc8
add v181->v220
add v225->v204
add v110->v225
add v80->v225
add v222->v225
add v224->v225
adding pairs 3, v185:0x7fffc0136100, v222:0x7fffc012f2b0
add v177->v220
add v217->v204
add v110->v217
add v80->v217
add v214->v217
add v216->v217
adding pairs 3, v185:0x7fffc0136100, v214:0x7fffc012f798
adding pairs 2, v159:0x7fffc0136330, v212:0x7fffc012e3f8
add v110->v209
add v80->v209
add v206->v209
add v208->v209
add v173->v206
add v201->v204
add v110->v201
add v80->v201
add v198->v201
add v200->v201
adding pairs 3, v185:0x7fffc0136100, v198:0x7fffc0130028
add v110->v182
add v80->v182
add v187->v182
add v195->v182
add v194->v187
add v193->v186
add v161->v185
add v184->v182
adding pairs 3, v185:0x7fffc0136100, v164:0x7fffc0135fe8
add v156->v159
add v148->v4
add v145->v4
add v146->v145
add v141->v145
add v144->v145
adding pairs 2, v23:0x7fffc0135ed0, v141:0x7fffc0131398
add v35->v4
add v36->v4
add v139->v35
add v138->v35
add v38->v35
add v134->v136
add v131->v126
add v127->v129
add v119->v125
add v124->v125
add v123->v88
add v122->v88
add v122->v88
add v122->v88
add v122->v88
add v121->v119
add v118->v119
add v80->v32
add v117->v32
add v88->v32
add v116->v36
add v113->v36
add v115->v36
add v112->v113
add v80->v112
add v103->v112
add v111->v112
add v100->v103
add v110->v37
add v80->v37
add v96->v37
add v105->v37
add v101->v103
add v99->v103
add v95->v103
add v90->v88
add v81->v36
add v83->v36
adding pairs 2, v62:0x7fffc0135b88, v81:0x7fffc0133410
add v80->v79
add v75->v79
add v78->v79
add v57->v75
add v73->v37
add v77->v37
add v56->v73
add v59->v75
add v58->v73
add v55->v75
add v54->v73
add v51->v75
add v50->v73
add v64->v32
add v71->v32
add v72->v64
add v70->v63
add v39->v62
add v61->v32
adding pairs 3, v62:0x7fffc0135b88, v42:0x7fffc0135a70
add v26->v23
add v20->v4
add v24->v20
add v22->v20
add v11->v4
add v18->v11
add v17->v11
add v15->v16
add v13->v11
add v5->v4
add v10->v5
add v9->v5
gap () () 
          [rsi|R|t] = ArchNop
gap (v4(-) = [rsi|R|t];) () 
          [stack:-1|t] = ArchNop
gap (v3(-) = [stack:-1|t];) () 
          [rdi|R|t] = ArchNop
gap (v2(-) = [rdi|R|t];) () 
          [constant:84] = ArchNop
gap () () 
          [constant:268] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1320] [immediate:1321]
gap () () 
          [constant:698] = ArchNop
gap () () 
          [constant:697] = ArchNop
gap () () 
          v696(R) = ArchStackCheckOffset
gap () () 
          X64Push v696(-)
gap () ([rbx|R|w64] = v697(-); [rax|R|w64] = v84(-); [rsi|R|t] = v698(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1319] #-1 #209 v2(S) v3(S) v4(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1318]
gap () () 
          ArchJmp [immediate:1317]
gap () () 
          [constant:6] = ArchNop
gap () () 
          [constant:0] = ArchNop
gap () () 
          [constant:18] = ArchNop
gap () () 
          v694(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1316]
gap () () 
          X64Test32 && deoptimize if equal v694 #1 #208 v2(S) v3(-) v4(S) v694(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v694(R) [immediate:1315] v18(R) #207 v2(S) v3(-) v4(S) v694(-)
gap () () 
          v691(R) = X64MovqDecompressTaggedSigned : MRI v694(R) [immediate:1314]
gap () () 
          v693(R) = X64MovqDecompressTaggedSigned : MRI v694(R) [immediate:1313]
gap () () 
          X64Cmp32 && branch if signed less than v693(R) v691 [immediate:1311] [immediate:1312]
gap () () 
          [constant:690] = ArchNop
gap () () 
          v692(R) = X64MovqDecompressTaggedPointer : MRI v690(R) [immediate:1310]
gap () () 
          X64Push v691(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v690(-); [rdx|R|t] = v0(-); [rax|R|w64] = v84(-); [rsi|R|tp] = v692(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1309] #-1 #206 v2(S) v3(S) v4(S) [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|tp]
gap (v686(-) = [rax|R|t];) () 
          v689(R) = X64Movl : MRI v686(R) [immediate:1308]
gap () () 
          X64Cmp32 && branch if unsigned less than v689 #3 [immediate:1306] [immediate:1307]
gap () () 
          ArchJmp [immediate:1305]
gap () () 
          [constant:687] = ArchNop
gap () () 
          [constant:677] = ArchNop
gap () () 
          v688(R) = X64Lea32 : MRI v689(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v688 #536870889 #205 v2(S) v3(-) v4(S) v686(-)
gap () ([rax|R|t] = v677(-); [rbx|R|t] = v686(-); [rsi|R|w64] = v687(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1304] #-1 [rax|R|t] [rbx|R|t] [rsi|R|w64]
gap (v682(-) = [rax|R|t];) () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1302] [immediate:1303]
gap () () 
          [constant:685] = ArchNop
gap () () 
          [constant:684] = ArchNop
gap () ([rbx|R|w64] = v684(-); [rax|R|w64] = v6(-); [rsi|R|t] = v685(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1301] #-1 #204 v2(S) v3(S) v4(S) v682(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1300]
gap () () 
          ArchJmp [immediate:1299]
gap () (v678 = v682(-);) 
          ArchJmp [immediate:1298]
gap () () 
          v681(R) = X64Movl : MRI v678(R) [immediate:1297]
gap () () 
          X64Cmp32 && branch if unsigned less than v681 #3 [immediate:1295] [immediate:1296]
gap () () 
          [constant:679] = ArchNop
gap () () 
          v680(R) = X64Lea32 : MRI v681(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v680 #536870889 #203 v2(S) v3(-) v4(S) v678(-)
gap () ([rax|R|t] = v677(-); [rbx|R|t] = v678(-); [rsi|R|w64] = v679(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1294] #-1 [rax|R|t] [rbx|R|t] [rsi|R|w64]
gap (v674(-) = [rax|R|t];) () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1292] [immediate:1293]
gap () () 
          [constant:676] = ArchNop
gap () () 
          [constant:675] = ArchNop
gap () ([rbx|R|w64] = v675(-); [rax|R|w64] = v6(-); [rsi|R|t] = v676(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1291] #-1 #202 v2(S) v3(S) v4(S) v674(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1290]
gap () () 
          ArchJmp [immediate:1289]
gap () (v678 = v674(-);) 
          ArchJmp [immediate:1288]
gap () () 
          ArchJmp [immediate:1287]
gap () () 
          v590(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1286]
gap () () 
          v591(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1285]
gap () () 
          v671(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1284]
gap () () 
          X64Test32 && deoptimize if equal v671 #1 #201 v2(S) v3(-) v4(S) v590(-) v591(-) v671(-) [immediate:1283]
gap () () 
          [constant:146] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v671(R) [immediate:1281] v146(R) #200 v2(S) v3(-) v4(S) v590(-) v591(-) v671(-) [immediate:1282]
gap () () 
          v669(R) = X64MovqDecompressTaggedPointer : MRI v671(R) [immediate:1280]
gap () () 
          v672(R) = X64MovqDecompressTaggedSigned : MRI v671(R) [immediate:1279]
gap () (v670(R) = v672(-);) 
          v670(1) = X64Sar32 v670(R) #1
gap () () 
          [constant:147] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v670 #8 #199 v2(S) v3(-) v4(S) v590(-) v591(-) v671(-) [immediate:1278]
gap () () 
          v667(R) = X64MovqDecompressAnyTagged : MRI v669(R) [immediate:1277]
gap () () 
          [constant:668] = ArchNop
gap () () 
          [constant:31] = ArchNop
gap () ([rdx|R|t] = v667(-); [rcx|R|t] = v31(-); [rax|R|w64] = v668(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1276] #-1 #198 v2(S) v3(S) v4(S) v590(S) v591(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v659(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v659 #1 #197 v2(S) v3(-) v4(S) v590(-) v591(-) v659(-) [immediate:1275]
gap () () 
          [constant:80] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v659(R) [immediate:1273] v80(R) #196 v2(S) v3(-) v4(S) v590(-) v591(-) v659(-) [immediate:1274]
gap () () 
          v664(R) = X64MovqDecompressTaggedPointer : MRI v659(R) [immediate:1272]
gap () () 
          v666(R) = X64MovqDecompressTaggedSigned : MRI v659(R) [immediate:1271]
gap () () 
          [constant:120] = ArchNop
gap () (v665(R) = v666(-);) 
          v665(1) = X64Sar32 v665(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v665 #0 #195 v2(S) v3(-) v4(S) v590(-) v591(-) v659(-) [immediate:1270]
gap () () 
          v661(R) = X64Movsd : MRI v664(R) [immediate:1269]
gap () () 
          v663(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1268]
gap () () 
          X64Test32 && deoptimize if equal v663 #1 #194 v2(S) v3(-) v4(S) v590(-) v591(-) v659(-) [immediate:1267]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v663(R) [immediate:1265] v146(R) #193 v2(S) v3(-) v4(S) v590(-) v591(-) v659(-) [immediate:1266]
gap () () 
          v657(R) = X64MovqDecompressTaggedPointer : MRI v663(R) [immediate:1264]
gap () () 
          v662(R) = X64MovqDecompressTaggedSigned : MRI v663(R) [immediate:1263]
gap () (v658(R) = v662(-);) 
          v658(1) = X64Sar32 v658(R) #1
gap () () 
          v592(R) = AVXFloat64Neg v661
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v658 #8 #192 v2(S) v3(-) v4(S) v590(-) v591(-) v659(-) [immediate:1262]
gap () () 
          v655(R) = X64MovqDecompressAnyTagged : MRI v657(R) [immediate:1261]
gap () () 
          [constant:656] = ArchNop
gap () ([rdx|R|t] = v655(-); [rcx|R|t] = v31(-); [rax|R|w64] = v656(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1260] #-1 #191 v2(S) v3(S) v4(S) v590(S) v591(S) v592(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v647(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v647 #1 #190 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v647(-) [immediate:1259]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v647(R) [immediate:1257] v80(R) #189 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v647(-) [immediate:1258]
gap () () 
          v652(R) = X64MovqDecompressTaggedPointer : MRI v647(R) [immediate:1256]
gap () () 
          v654(R) = X64MovqDecompressTaggedSigned : MRI v647(R) [immediate:1255]
gap () (v653(R) = v654(-);) 
          v653(1) = X64Sar32 v653(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v653 #1 #188 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v647(-) [immediate:1254]
gap () () 
          v649(R) = X64Movsd : MRI v652(R) [immediate:1253]
gap () () 
          v651(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1252]
gap () () 
          X64Test32 && deoptimize if equal v651 #1 #187 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v647(-) [immediate:1251]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v651(R) [immediate:1249] v146(R) #186 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v647(-) [immediate:1250]
gap () () 
          v645(R) = X64MovqDecompressTaggedPointer : MRI v651(R) [immediate:1248]
gap () () 
          v650(R) = X64MovqDecompressTaggedSigned : MRI v651(R) [immediate:1247]
gap () (v646(R) = v650(-);) 
          v646(1) = X64Sar32 v646(R) #1
gap () () 
          v593(R) = AVXFloat64Neg v649
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v646 #8 #185 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v647(-) [immediate:1246]
gap () () 
          v643(R) = X64MovqDecompressAnyTagged : MRI v645(R) [immediate:1245]
gap () () 
          [constant:644] = ArchNop
gap () ([rdx|R|t] = v643(-); [rcx|R|t] = v31(-); [rax|R|w64] = v644(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1244] #-1 #184 v2(S) v3(S) v4(S) v590(S) v591(S) v592(S) v593(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v638(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v638 #1 #183 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v593(-) v638(-) [immediate:1243]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v638(R) [immediate:1241] v80(R) #182 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v593(-) v638(-) [immediate:1242]
gap () () 
          v640(R) = X64MovqDecompressTaggedPointer : MRI v638(R) [immediate:1240]
gap () () 
          v642(R) = X64MovqDecompressTaggedSigned : MRI v638(R) [immediate:1239]
gap () (v641(R) = v642(-);) 
          v641(1) = X64Sar32 v641(R) #1
gap () () 
          [constant:108] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v641 #2 #181 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v593(-) v638(-) [immediate:1238]
gap () () 
          v605(R) = X64Movsd : MRI v640(R) [immediate:1237]
gap () () 
          X64Test32 && deoptimize if equal v590 #1 #180 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v593(-) v638(-) [immediate:1236]
gap () () 
          v639(R) = X64MovqDecompressTaggedPointer : MRI v590(R) [immediate:1235]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v639(R) [immediate:1233] #1068 #179 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v593(-) v638(-) [immediate:1234]
gap () () 
          [constant:401] = ArchNop
gap () () 
          v637(R) = X64MovqDecompressTaggedPointer : MRI v590(R) [immediate:1232]
gap () () 
          X64Cmp && deoptimize if not equal v637(R) v401 #178 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v593(-) v638(-) [immediate:1231]
gap () () 
          v595(R) = X64MovqDecompressTaggedPointer : MRI v590(R) [immediate:1230]
gap () () 
          [constant:132] = ArchNop
gap () () 
          [constant:399] = ArchNop
gap () () 
          v632(R) = X64Movq : MR v120(R)
gap () () 
          v636(R) = X64Lea : MRI v632(R) [immediate:1229]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v636(R) [immediate:1227] [immediate:1228]
gap () () 
          ArchJmp [immediate:1226]
gap () ([rdx|R|w64] = v399(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1225] #-1 [rdx|R|w64]
gap (v635(-) = [rax|R|tp];) () 
          v633(R) = X64Lea : MRI v635(R) [immediate:1224]
gap () (v631 = v633(-);) 
          ArchJmp [immediate:1223]
gap () (v631 = v632(-);) 
          ArchJmp [immediate:1222]
gap () () 
          v629(R) = X64Lea : MRI v631(R) [immediate:1221]
gap () () 
          X64Movq : MR v120(R) v629(R)
gap () () 
          v630(R) = X64Lea : MRI v631(R) [immediate:1220]
gap () (v627 = v630(-);) 
          v627(1) = ArchNop v627
gap () () 
          [constant:110] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v627(R) [immediate:1219] v110(R)
gap () () 
          [constant:117] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v627(R) [immediate:1218] v117(R)
gap () () 
          [constant:392] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v627(R) [immediate:1217] v392(R)
gap () () 
          X64MovqCompressTagged : MRI v627(R) [immediate:1215] [immediate:1216]
gap () () 
          v626(R) = X64Lea : MRI v629(R) [immediate:1214]
gap () () 
          X64Movq : MR v120(R) v626(R)
gap () () 
          v628(R) = X64Lea : MRI v629(R) [immediate:1213]
gap () (v600 = v628(-);) 
          v600(1) = ArchNop v600
gap () () 
          [constant:329] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1212] v329(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1210] [immediate:1211]
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1208] [immediate:1209]
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1206] [immediate:1207]
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1204] [immediate:1205]
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1203] v627(R)
gap () () 
          v624(R) = X64Lea : MRI v626(R) [immediate:1202]
gap () () 
          X64Movq : MR v120(R) v624(R)
gap () () 
          v625(R) = X64Lea : MRI v626(R) [immediate:1201]
gap () (v597 = v625(-);) 
          v597(1) = ArchNop v597
gap () () 
          [constant:116] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v597(R) [immediate:1200] v116(R)
gap () () 
          X64MovqCompressTagged : MRI v597(R) [immediate:1199] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v597(R) [immediate:1198] v600(R)
gap () () 
          X64MovqCompressTagged : MRI v597(R) [immediate:1196] [immediate:1197]
gap () () 
          v622(R) = X64Lea : MRI v624(R) [immediate:1195]
gap () () 
          X64Movq : MR v120(R) v622(R)
gap () () 
          v623(R) = X64Lea : MRI v624(R) [immediate:1194]
gap () (v619 = v623(-);) 
          v619(1) = ArchNop v619
gap () () 
          [constant:123] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v619(R) [immediate:1193] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v619(R) [immediate:1191] [immediate:1192]
gap () () 
          [constant:370] = ArchNop
gap () () 
          X64Movsd : MRI v619(R) [immediate:1190] v370(R)
gap () () 
          [constant:369] = ArchNop
gap () () 
          X64Movsd : MRI v619(R) [immediate:1189] v369(R)
gap () () 
          X64Movsd : MRI v619(R) [immediate:1188] v369(R)
gap () () 
          X64Movsd : MRI v619(R) [immediate:1187] v369(R)
gap () () 
          v617(R) = X64Lea : MRI v622(R) [immediate:1186]
gap () () 
          X64Movq : MR v120(R) v617(R)
gap () () 
          v621(R) = X64Lea : MRI v622(R) [immediate:1185]
gap () (v618 = v621(-);) 
          v618(1) = ArchNop v618
gap () () 
          X64MovqCompressTagged : MRI v618(R) [immediate:1184] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v618(R) [immediate:1183] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v618(R) [immediate:1182] v619(R)
gap () () 
          X64MovqCompressTagged : MRI v618(R) [immediate:1180] [immediate:1181]
gap () (v620(R) = v592(-);) 
          v620(1) = SSEFloat64SilenceNaN v620(R)
gap () () 
          X64Movsd : MRI v619(R) [immediate:1179] v620(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1178] v618(R)
gap () () 
          v615(R) = X64Lea : MRI v617(R) [immediate:1177]
gap () () 
          X64Movq : MR v120(R) v615(R)
gap () () 
          v616(R) = X64Lea : MRI v617(R) [immediate:1176]
gap () (v612 = v616(-);) 
          v612(1) = ArchNop v612
gap () () 
          X64MovqCompressTagged : MRI v612(R) [immediate:1175] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v612(R) [immediate:1173] [immediate:1174]
gap () () 
          X64Movsd : MRI v612(R) [immediate:1172] v369(R)
gap () () 
          X64Movsd : MRI v612(R) [immediate:1171] v370(R)
gap () () 
          X64Movsd : MRI v612(R) [immediate:1170] v369(R)
gap () () 
          X64Movsd : MRI v612(R) [immediate:1169] v369(R)
gap () () 
          v610(R) = X64Lea : MRI v615(R) [immediate:1168]
gap () () 
          X64Movq : MR v120(R) v610(R)
gap () () 
          v614(R) = X64Lea : MRI v615(R) [immediate:1167]
gap () (v611 = v614(-);) 
          v611(1) = ArchNop v611
gap () () 
          X64MovqCompressTagged : MRI v611(R) [immediate:1166] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v611(R) [immediate:1165] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v611(R) [immediate:1164] v612(R)
gap () () 
          X64MovqCompressTagged : MRI v611(R) [immediate:1162] [immediate:1163]
gap () (v613(R) = v593(-);) 
          v613(1) = SSEFloat64SilenceNaN v613(R)
gap () () 
          X64Movsd : MRI v612(R) [immediate:1161] v613(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1160] v611(R)
gap () () 
          v607(R) = X64Lea : MRI v610(R) [immediate:1159]
gap () () 
          X64Movq : MR v120(R) v607(R)
gap () () 
          v609(R) = X64Lea : MRI v610(R) [immediate:1158]
gap () (v602 = v609(-);) 
          v602(1) = ArchNop v602
gap () () 
          X64MovqCompressTagged : MRI v602(R) [immediate:1157] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v602(R) [immediate:1155] [immediate:1156]
gap () () 
          X64Movsd : MRI v602(R) [immediate:1154] v369(R)
gap () () 
          X64Movsd : MRI v602(R) [immediate:1153] v369(R)
gap () () 
          X64Movsd : MRI v602(R) [immediate:1152] v370(R)
gap () () 
          X64Movsd : MRI v602(R) [immediate:1151] v369(R)
gap () () 
          v608(R) = X64Lea : MRI v607(R) [immediate:1150]
gap () () 
          X64Movq : MR v120(R) v608(R)
gap () () 
          v606(R) = X64Lea : MRI v607(R) [immediate:1149]
gap () (v601 = v606(-);) 
          v601(1) = ArchNop v601
gap () () 
          X64MovqCompressTagged : MRI v601(R) [immediate:1148] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v601(R) [immediate:1147] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v601(R) [immediate:1146] v602(R)
gap () () 
          v594(R) = AVXFloat64Neg v605
gap () () 
          X64MovqCompressTagged : MRI v601(R) [immediate:1144] [immediate:1145]
gap () (v603(R) = v594(-);) 
          v603(1) = SSEFloat64SilenceNaN v603(R)
gap () () 
          X64Movsd : MRI v602(R) [immediate:1143] v603(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1142] v601(R)
gap () () 
          v596(R) = X64MovqDecompressAnyTagged : MRI v595(R) [immediate:1141]
gap () () 
          X64Test32 && deoptimize if equal v596 #1 #177 v2(S) v3(-) v4(S) v590(S) [immediate:1140] v591(-) v592(-) v593(-) v594(-) v595(S) v597(-) v596(-)
gap () () 
          v599(R) = X64MovqDecompressTaggedPointer : MRI v596(R) [immediate:1139]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v599(R) [immediate:1137] #1068 #176 v2(S) v3(-) v4(S) v590(S) [immediate:1138] v591(-) v592(-) v593(-) v594(-) v595(S) v597(-) v596(-)
gap () () 
          [constant:346] = ArchNop
gap () () 
          v598(R) = X64MovqDecompressTaggedPointer : MRI v596(R) [immediate:1136]
gap () () 
          [constant:359] = ArchNop
gap () () 
          X64Cmp && deoptimize if not equal v598(R) v346 #175 v2(S) v3(-) v4(S) v590(S) [immediate:1135] v591(-) v592(-) v593(-) v594(-) v595(S) v597(-) v596(-)
gap () () 
          X64Push v591(-)
gap () () 
          X64Push v597(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v596(-); [rax|R|w64] = v108(-); [rsi|R|t] = v359(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1133] #-1 #174 v2(S) v3(S) v4(S) v590(S) [immediate:1134] v591(S) v592(S) v593(S) v594(S) v595(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap (v541(-) = [rax|R|t];) () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:1132] v541(R)
gap () () 
          v540(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1131]
gap () () 
          X64Test32 && deoptimize if equal v540 #1 #173 v2(S) v3(-) v4(S) v540(-) v541(-) [immediate:1130]
gap () () 
          v587(R) = X64MovqDecompressTaggedPointer : MRI v540(R) [immediate:1129]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v587(R) [immediate:1127] #1068 #172 v2(S) v3(-) v4(S) v540(-) v541(-) [immediate:1128]
gap () () 
          [constant:585] = ArchNop
gap () () 
          v586(R) = X64MovqDecompressTaggedPointer : MRI v540(R) [immediate:1126]
gap () () 
          X64Cmp && deoptimize if not equal v585(R) v586 #171 v2(S) v3(-) v4(S) v540(-) v541(-) [immediate:1125]
gap () () 
          v542(R) = X64MovqDecompressTaggedPointer : MRI v540(R) [immediate:1124]
gap () () 
          [constant:484] = ArchNop
gap () () 
          [constant:483] = ArchNop
gap () () 
          [constant:481] = ArchNop
gap () () 
          [constant:479] = ArchNop
gap () () 
          v584(R) = X64MovqDecompressTaggedPointer : MRI v484(R) [immediate:1123]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v584(R) [immediate:1119] v483(R) #170 v2(S) v3(-) v4(S) v540(S) [immediate:1120] v541(-) [immediate:1121] v542(S) [immediate:1122]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v584(R) [immediate:1115] v481(R) #169 v2(S) v3(-) v4(S) v540(S) [immediate:1116] v541(-) [immediate:1117] v542(S) [immediate:1118]
gap () () 
          v579(R) = X64Movq : MR v120(R)
gap () () 
          v583(R) = X64Lea : MRI v579(R) [immediate:1114]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v583(R) [immediate:1112] [immediate:1113]
gap () () 
          ArchJmp [immediate:1111]
gap () ([rdx|R|w64] = v479(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1110] #-1 [rdx|R|w64]
gap (v582(-) = [rax|R|tp];) () 
          v580(R) = X64Lea : MRI v582(R) [immediate:1109]
gap () (v578 = v580(-);) 
          ArchJmp [immediate:1108]
gap () (v578 = v579(-);) 
          ArchJmp [immediate:1107]
gap () () 
          v575(R) = X64Lea : MRI v578(R) [immediate:1106]
gap () () 
          X64Movq : MR v120(R) v575(R)
gap () () 
          v577(R) = X64Lea : MRI v578(R) [immediate:1105]
gap () (v570 = v577(-);) 
          v570(1) = ArchNop v570
gap () () 
          X64MovqCompressTagged : MRI v570(R) [immediate:1104] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v570(R) [immediate:1103] v117(R)
gap () () 
          [constant:576] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v570(R) [immediate:1102] v576(R)
gap () () 
          X64MovqCompressTagged : MRI v570(R) [immediate:1100] [immediate:1101]
gap () () 
          v572(R) = X64Lea : MRI v575(R) [immediate:1099]
gap () () 
          X64Movq : MR v120(R) v572(R)
gap () () 
          v574(R) = X64Lea : MRI v575(R) [immediate:1098]
gap () (v569 = v574(-);) 
          v569(1) = ArchNop v569
gap () () 
          X64MovqCompressTagged : MRI v569(R) [immediate:1097] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v569(R) [immediate:1096] v117(R)
gap () () 
          [constant:573] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v569(R) [immediate:1095] v573(R)
gap () () 
          X64MovqCompressTagged : MRI v569(R) [immediate:1093] [immediate:1094]
gap () () 
          v568(R) = X64Lea : MRI v572(R) [immediate:1092]
gap () () 
          X64Movq : MR v120(R) v568(R)
gap () () 
          v571(R) = X64Lea : MRI v572(R) [immediate:1091]
gap () (v547 = v571(-);) 
          v547(1) = ArchNop v547
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1090] v329(R)
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1088] [immediate:1089]
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1087] v570(R)
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1085] [immediate:1086]
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1083] [immediate:1084]
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1082] v569(R)
gap () () 
          v566(R) = X64Lea : MRI v568(R) [immediate:1081]
gap () () 
          X64Movq : MR v120(R) v566(R)
gap () () 
          v567(R) = X64Lea : MRI v568(R) [immediate:1080]
gap () (v544 = v567(-);) 
          v544(1) = ArchNop v544
gap () () 
          X64MovqCompressTagged : MRI v544(R) [immediate:1079] v116(R)
gap () () 
          X64MovqCompressTagged : MRI v544(R) [immediate:1078] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v544(R) [immediate:1077] v547(R)
gap () () 
          X64MovqCompressTagged : MRI v544(R) [immediate:1075] [immediate:1076]
gap () () 
          v564(R) = X64Lea : MRI v566(R) [immediate:1074]
gap () () 
          X64Movq : MR v120(R) v564(R)
gap () () 
          v565(R) = X64Lea : MRI v566(R) [immediate:1073]
gap () (v559 = v565(-);) 
          v559(1) = ArchNop v559
gap () () 
          X64MovqCompressTagged : MRI v559(R) [immediate:1072] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v559(R) [immediate:1070] [immediate:1071]
gap () () 
          X64Movsd : MRI v559(R) [immediate:1069] v369(R)
gap () () 
          X64Movsd : MRI v559(R) [immediate:1068] v369(R)
gap () () 
          X64Movsd : MRI v559(R) [immediate:1067] v369(R)
gap () () 
          X64Movsd : MRI v559(R) [immediate:1066] v369(R)
gap () () 
          v557(R) = X64Lea : MRI v564(R) [immediate:1065]
gap () () 
          X64Movq : MR v120(R) v557(R)
gap () () 
          v563(R) = X64Lea : MRI v564(R) [immediate:1064]
gap () (v558 = v563(-);) 
          v558(1) = ArchNop v558
gap () () 
          X64MovqCompressTagged : MRI v558(R) [immediate:1063] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v558(R) [immediate:1062] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v558(R) [immediate:1061] v559(R)
gap () () 
          [constant:562] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v558(R) [immediate:1059] [immediate:1060]
gap () (v550(R) = v562(-);) 
          v550(1) = SSEFloat64SilenceNaN v550(R)
gap () () 
          [constant:561] = ArchNop
gap () () 
          X64Movsd : MRI v559(R) [immediate:1058] v550(R)
gap () (v560(R) = v561(-);) 
          v560(1) = SSEFloat64SilenceNaN v560(R)
gap () () 
          X64Movsd : MRI v559(R) [immediate:1057] v560(R)
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1056] v558(R)
gap () () 
          v554(R) = X64Lea : MRI v557(R) [immediate:1055]
gap () () 
          X64Movq : MR v120(R) v554(R)
gap () () 
          v556(R) = X64Lea : MRI v557(R) [immediate:1054]
gap () (v549 = v556(-);) 
          v549(1) = ArchNop v549
gap () () 
          X64MovqCompressTagged : MRI v549(R) [immediate:1053] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v549(R) [immediate:1051] [immediate:1052]
gap () () 
          X64Movsd : MRI v549(R) [immediate:1050] v369(R)
gap () () 
          X64Movsd : MRI v549(R) [immediate:1049] v369(R)
gap () () 
          X64Movsd : MRI v549(R) [immediate:1048] v369(R)
gap () () 
          X64Movsd : MRI v549(R) [immediate:1047] v369(R)
gap () () 
          v555(R) = X64Lea : MRI v554(R) [immediate:1046]
gap () () 
          X64Movq : MR v120(R) v555(R)
gap () () 
          v553(R) = X64Lea : MRI v554(R) [immediate:1045]
gap () (v548 = v553(-);) 
          v548(1) = ArchNop v548
gap () () 
          X64MovqCompressTagged : MRI v548(R) [immediate:1044] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v548(R) [immediate:1043] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v548(R) [immediate:1042] v549(R)
gap () () 
          [constant:552] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v548(R) [immediate:1040] [immediate:1041]
gap () (v551(R) = v552(-);) 
          v551(1) = SSEFloat64SilenceNaN v551(R)
gap () () 
          X64Movsd : MRI v549(R) [immediate:1039] v551(R)
gap () () 
          X64Movsd : MRI v549(R) [immediate:1038] v550(R)
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1037] v548(R)
gap () () 
          v543(R) = X64MovqDecompressAnyTagged : MRI v542(R) [immediate:1036]
gap () () 
          X64Test32 && deoptimize if equal v543 #1 #168 v2(S) v3(-) v4(S) v540(S) [immediate:1034] v541(-) [immediate:1035] v542(S) v544(-) v543(-)
gap () () 
          v546(R) = X64MovqDecompressTaggedPointer : MRI v543(R) [immediate:1033]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v546(R) [immediate:1030] #1068 #167 v2(S) v3(-) v4(S) v540(S) [immediate:1031] v541(-) [immediate:1032] v542(S) v544(-) v543(-)
gap () () 
          v545(R) = X64MovqDecompressTaggedPointer : MRI v543(R) [immediate:1029]
gap () () 
          X64Cmp && deoptimize if not equal v545(R) v346 #166 v2(S) v3(-) v4(S) v540(S) [immediate:1027] v541(-) [immediate:1028] v542(S) v544(-) v543(-)
gap () () 
          X64Push v541(-)
gap () () 
          X64Push v544(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v543(-); [rax|R|w64] = v108(-); [rsi|R|t] = v359(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1024] #-1 #165 v2(S) v3(S) v4(S) v540(S) [immediate:1025] v541(S) [immediate:1026] v542(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap (v491(-) = [rax|R|t];) () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:1023] v491(R)
gap () () 
          v490(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1022]
gap () () 
          X64Test32 && deoptimize if equal v490 #1 #164 v2(S) v3(-) v4(S) v490(-) v491(-) [immediate:1021]
gap () () 
          v537(R) = X64MovqDecompressTaggedPointer : MRI v490(R) [immediate:1020]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v537(R) [immediate:1018] #1068 #163 v2(S) v3(-) v4(S) v490(-) v491(-) [immediate:1019]
gap () () 
          [constant:535] = ArchNop
gap () () 
          v536(R) = X64MovqDecompressTaggedPointer : MRI v490(R) [immediate:1017]
gap () () 
          X64Cmp && deoptimize if not equal v535(R) v536 #162 v2(S) v3(-) v4(S) v490(-) v491(-) [immediate:1016]
gap () () 
          v492(R) = X64MovqDecompressTaggedPointer : MRI v490(R) [immediate:1015]
gap () () 
          v534(R) = X64MovqDecompressTaggedPointer : MRI v484(R) [immediate:1014]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v534(R) [immediate:1010] v483(R) #161 v2(S) v3(-) v4(S) v490(S) [immediate:1011] v491(-) [immediate:1012] v492(S) [immediate:1013]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v534(R) [immediate:1006] v481(R) #160 v2(S) v3(-) v4(S) v490(S) [immediate:1007] v491(-) [immediate:1008] v492(S) [immediate:1009]
gap () () 
          v529(R) = X64Movq : MR v120(R)
gap () () 
          v533(R) = X64Lea : MRI v529(R) [immediate:1005]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v533(R) [immediate:1003] [immediate:1004]
gap () () 
          ArchJmp [immediate:1002]
gap () ([rdx|R|w64] = v479(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1001] #-1 [rdx|R|w64]
gap (v532(-) = [rax|R|tp];) () 
          v530(R) = X64Lea : MRI v532(R) [immediate:1000]
gap () (v528 = v530(-);) 
          ArchJmp [immediate:999]
gap () (v528 = v529(-);) 
          ArchJmp [immediate:998]
gap () () 
          v525(R) = X64Lea : MRI v528(R) [immediate:997]
gap () () 
          X64Movq : MR v120(R) v525(R)
gap () () 
          v527(R) = X64Lea : MRI v528(R) [immediate:996]
gap () (v520 = v527(-);) 
          v520(1) = ArchNop v520
gap () () 
          X64MovqCompressTagged : MRI v520(R) [immediate:995] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v520(R) [immediate:994] v117(R)
gap () () 
          [constant:526] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v520(R) [immediate:993] v526(R)
gap () () 
          X64MovqCompressTagged : MRI v520(R) [immediate:991] [immediate:992]
gap () () 
          v522(R) = X64Lea : MRI v525(R) [immediate:990]
gap () () 
          X64Movq : MR v120(R) v522(R)
gap () () 
          v524(R) = X64Lea : MRI v525(R) [immediate:989]
gap () (v519 = v524(-);) 
          v519(1) = ArchNop v519
gap () () 
          X64MovqCompressTagged : MRI v519(R) [immediate:988] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v519(R) [immediate:987] v117(R)
gap () () 
          [constant:523] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v519(R) [immediate:986] v523(R)
gap () () 
          X64MovqCompressTagged : MRI v519(R) [immediate:984] [immediate:985]
gap () () 
          v518(R) = X64Lea : MRI v522(R) [immediate:983]
gap () () 
          X64Movq : MR v120(R) v518(R)
gap () () 
          v521(R) = X64Lea : MRI v522(R) [immediate:982]
gap () (v497 = v521(-);) 
          v497(1) = ArchNop v497
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:981] v329(R)
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:979] [immediate:980]
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:977] [immediate:978]
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:976] v520(R)
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:974] [immediate:975]
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:973] v519(R)
gap () () 
          v516(R) = X64Lea : MRI v518(R) [immediate:972]
gap () () 
          X64Movq : MR v120(R) v516(R)
gap () () 
          v517(R) = X64Lea : MRI v518(R) [immediate:971]
gap () (v494 = v517(-);) 
          v494(1) = ArchNop v494
gap () () 
          X64MovqCompressTagged : MRI v494(R) [immediate:970] v116(R)
gap () () 
          X64MovqCompressTagged : MRI v494(R) [immediate:969] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v494(R) [immediate:968] v497(R)
gap () () 
          X64MovqCompressTagged : MRI v494(R) [immediate:966] [immediate:967]
gap () () 
          v514(R) = X64Lea : MRI v516(R) [immediate:965]
gap () () 
          X64Movq : MR v120(R) v514(R)
gap () () 
          v515(R) = X64Lea : MRI v516(R) [immediate:964]
gap () (v509 = v515(-);) 
          v509(1) = ArchNop v509
gap () () 
          X64MovqCompressTagged : MRI v509(R) [immediate:963] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v509(R) [immediate:961] [immediate:962]
gap () () 
          X64Movsd : MRI v509(R) [immediate:960] v369(R)
gap () () 
          X64Movsd : MRI v509(R) [immediate:959] v369(R)
gap () () 
          X64Movsd : MRI v509(R) [immediate:958] v369(R)
gap () () 
          X64Movsd : MRI v509(R) [immediate:957] v369(R)
gap () () 
          v507(R) = X64Lea : MRI v514(R) [immediate:956]
gap () () 
          X64Movq : MR v120(R) v507(R)
gap () () 
          v513(R) = X64Lea : MRI v514(R) [immediate:955]
gap () (v508 = v513(-);) 
          v508(1) = ArchNop v508
gap () () 
          X64MovqCompressTagged : MRI v508(R) [immediate:954] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v508(R) [immediate:953] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v508(R) [immediate:952] v509(R)
gap () () 
          [constant:512] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v508(R) [immediate:950] [immediate:951]
gap () (v500(R) = v512(-);) 
          v500(1) = SSEFloat64SilenceNaN v500(R)
gap () () 
          [constant:511] = ArchNop
gap () () 
          X64Movsd : MRI v509(R) [immediate:949] v500(R)
gap () (v510(R) = v511(-);) 
          v510(1) = SSEFloat64SilenceNaN v510(R)
gap () () 
          X64Movsd : MRI v509(R) [immediate:948] v510(R)
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:947] v508(R)
gap () () 
          v504(R) = X64Lea : MRI v507(R) [immediate:946]
gap () () 
          X64Movq : MR v120(R) v504(R)
gap () () 
          v506(R) = X64Lea : MRI v507(R) [immediate:945]
gap () (v499 = v506(-);) 
          v499(1) = ArchNop v499
gap () () 
          X64MovqCompressTagged : MRI v499(R) [immediate:944] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v499(R) [immediate:942] [immediate:943]
gap () () 
          X64Movsd : MRI v499(R) [immediate:941] v369(R)
gap () () 
          X64Movsd : MRI v499(R) [immediate:940] v369(R)
gap () () 
          X64Movsd : MRI v499(R) [immediate:939] v369(R)
gap () () 
          X64Movsd : MRI v499(R) [immediate:938] v369(R)
gap () () 
          v505(R) = X64Lea : MRI v504(R) [immediate:937]
gap () () 
          X64Movq : MR v120(R) v505(R)
gap () () 
          v503(R) = X64Lea : MRI v504(R) [immediate:936]
gap () (v498 = v503(-);) 
          v498(1) = ArchNop v498
gap () () 
          X64MovqCompressTagged : MRI v498(R) [immediate:935] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v498(R) [immediate:934] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v498(R) [immediate:933] v499(R)
gap () () 
          [constant:502] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v498(R) [immediate:931] [immediate:932]
gap () (v501(R) = v502(-);) 
          v501(1) = SSEFloat64SilenceNaN v501(R)
gap () () 
          X64Movsd : MRI v499(R) [immediate:930] v501(R)
gap () () 
          X64Movsd : MRI v499(R) [immediate:929] v500(R)
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:928] v498(R)
gap () () 
          v493(R) = X64MovqDecompressAnyTagged : MRI v492(R) [immediate:927]
gap () () 
          X64Test32 && deoptimize if equal v493 #1 #159 v2(S) v3(-) v4(S) v490(S) [immediate:925] v491(-) [immediate:926] v492(S) v494(-) v493(-)
gap () () 
          v496(R) = X64MovqDecompressTaggedPointer : MRI v493(R) [immediate:924]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v496(R) [immediate:921] #1068 #158 v2(S) v3(-) v4(S) v490(S) [immediate:922] v491(-) [immediate:923] v492(S) v494(-) v493(-)
gap () () 
          v495(R) = X64MovqDecompressTaggedPointer : MRI v493(R) [immediate:920]
gap () () 
          X64Cmp && deoptimize if not equal v495(R) v346 #157 v2(S) v3(-) v4(S) v490(S) [immediate:918] v491(-) [immediate:919] v492(S) v494(-) v493(-)
gap () () 
          X64Push v491(-)
gap () () 
          X64Push v494(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v493(-); [rax|R|w64] = v108(-); [rsi|R|t] = v359(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:915] #-1 #156 v2(S) v3(S) v4(S) v490(S) [immediate:916] v491(S) [immediate:917] v492(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap (v437(-) = [rax|R|t];) () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:914] v437(R)
gap () () 
          v436(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:913]
gap () () 
          X64Test32 && deoptimize if equal v436 #1 #155 v2(S) v3(-) v4(S) v436(-) v437(-) [immediate:912]
gap () () 
          v487(R) = X64MovqDecompressTaggedPointer : MRI v436(R) [immediate:911]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v487(R) [immediate:909] #1068 #154 v2(S) v3(-) v4(S) v436(-) v437(-) [immediate:910]
gap () () 
          [constant:485] = ArchNop
gap () () 
          v486(R) = X64MovqDecompressTaggedPointer : MRI v436(R) [immediate:908]
gap () () 
          X64Cmp && deoptimize if not equal v485(R) v486 #153 v2(S) v3(-) v4(S) v436(-) v437(-) [immediate:907]
gap () () 
          v438(R) = X64MovqDecompressTaggedPointer : MRI v436(R) [immediate:906]
gap () () 
          v482(R) = X64MovqDecompressTaggedPointer : MRI v484(R) [immediate:905]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v482(R) [immediate:901] v483(R) #152 v2(S) v3(-) v4(S) v436(S) [immediate:902] v437(-) [immediate:903] v438(S) [immediate:904]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v482(R) [immediate:897] v481(R) #151 v2(S) v3(-) v4(S) v436(S) [immediate:898] v437(-) [immediate:899] v438(S) [immediate:900]
gap () () 
          v475(R) = X64Movq : MR v120(R)
gap () () 
          v480(R) = X64Lea : MRI v475(R) [immediate:896]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v480(R) [immediate:894] [immediate:895]
gap () () 
          ArchJmp [immediate:893]
gap () ([rdx|R|w64] = v479(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:892] #-1 [rdx|R|w64]
gap (v478(-) = [rax|R|tp];) () 
          v476(R) = X64Lea : MRI v478(R) [immediate:891]
gap () (v474 = v476(-);) 
          ArchJmp [immediate:890]
gap () (v474 = v475(-);) 
          ArchJmp [immediate:889]
gap () () 
          v471(R) = X64Lea : MRI v474(R) [immediate:888]
gap () () 
          X64Movq : MR v120(R) v471(R)
gap () () 
          v473(R) = X64Lea : MRI v474(R) [immediate:887]
gap () (v466 = v473(-);) 
          v466(1) = ArchNop v466
gap () () 
          X64MovqCompressTagged : MRI v466(R) [immediate:886] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v466(R) [immediate:885] v117(R)
gap () () 
          [constant:472] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v466(R) [immediate:884] v472(R)
gap () () 
          X64MovqCompressTagged : MRI v466(R) [immediate:882] [immediate:883]
gap () () 
          v468(R) = X64Lea : MRI v471(R) [immediate:881]
gap () () 
          X64Movq : MR v120(R) v468(R)
gap () () 
          v470(R) = X64Lea : MRI v471(R) [immediate:880]
gap () (v465 = v470(-);) 
          v465(1) = ArchNop v465
gap () () 
          X64MovqCompressTagged : MRI v465(R) [immediate:879] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v465(R) [immediate:878] v117(R)
gap () () 
          [constant:469] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v465(R) [immediate:877] v469(R)
gap () () 
          X64MovqCompressTagged : MRI v465(R) [immediate:875] [immediate:876]
gap () () 
          v464(R) = X64Lea : MRI v468(R) [immediate:874]
gap () () 
          X64Movq : MR v120(R) v464(R)
gap () () 
          v467(R) = X64Lea : MRI v468(R) [immediate:873]
gap () (v443 = v467(-);) 
          v443(1) = ArchNop v443
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:872] v329(R)
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:870] [immediate:871]
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:868] [immediate:869]
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:866] [immediate:867]
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:865] v466(R)
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:864] v465(R)
gap () () 
          v462(R) = X64Lea : MRI v464(R) [immediate:863]
gap () () 
          X64Movq : MR v120(R) v462(R)
gap () () 
          v463(R) = X64Lea : MRI v464(R) [immediate:862]
gap () (v440 = v463(-);) 
          v440(1) = ArchNop v440
gap () () 
          X64MovqCompressTagged : MRI v440(R) [immediate:861] v116(R)
gap () () 
          X64MovqCompressTagged : MRI v440(R) [immediate:860] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v440(R) [immediate:859] v443(R)
gap () () 
          X64MovqCompressTagged : MRI v440(R) [immediate:857] [immediate:858]
gap () () 
          v460(R) = X64Lea : MRI v462(R) [immediate:856]
gap () () 
          X64Movq : MR v120(R) v460(R)
gap () () 
          v461(R) = X64Lea : MRI v462(R) [immediate:855]
gap () (v455 = v461(-);) 
          v455(1) = ArchNop v455
gap () () 
          X64MovqCompressTagged : MRI v455(R) [immediate:854] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v455(R) [immediate:852] [immediate:853]
gap () () 
          X64Movsd : MRI v455(R) [immediate:851] v369(R)
gap () () 
          X64Movsd : MRI v455(R) [immediate:850] v369(R)
gap () () 
          X64Movsd : MRI v455(R) [immediate:849] v369(R)
gap () () 
          X64Movsd : MRI v455(R) [immediate:848] v369(R)
gap () () 
          v453(R) = X64Lea : MRI v460(R) [immediate:847]
gap () () 
          X64Movq : MR v120(R) v453(R)
gap () () 
          v459(R) = X64Lea : MRI v460(R) [immediate:846]
gap () (v454 = v459(-);) 
          v454(1) = ArchNop v454
gap () () 
          X64MovqCompressTagged : MRI v454(R) [immediate:845] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v454(R) [immediate:844] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v454(R) [immediate:843] v455(R)
gap () () 
          [constant:458] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v454(R) [immediate:841] [immediate:842]
gap () (v446(R) = v458(-);) 
          v446(1) = SSEFloat64SilenceNaN v446(R)
gap () () 
          [constant:457] = ArchNop
gap () () 
          X64Movsd : MRI v455(R) [immediate:840] v446(R)
gap () (v456(R) = v457(-);) 
          v456(1) = SSEFloat64SilenceNaN v456(R)
gap () () 
          X64Movsd : MRI v455(R) [immediate:839] v456(R)
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:838] v454(R)
gap () () 
          v450(R) = X64Lea : MRI v453(R) [immediate:837]
gap () () 
          X64Movq : MR v120(R) v450(R)
gap () () 
          v452(R) = X64Lea : MRI v453(R) [immediate:836]
gap () (v445 = v452(-);) 
          v445(1) = ArchNop v445
gap () () 
          X64MovqCompressTagged : MRI v445(R) [immediate:835] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v445(R) [immediate:833] [immediate:834]
gap () () 
          X64Movsd : MRI v445(R) [immediate:832] v369(R)
gap () () 
          X64Movsd : MRI v445(R) [immediate:831] v369(R)
gap () () 
          X64Movsd : MRI v445(R) [immediate:830] v369(R)
gap () () 
          X64Movsd : MRI v445(R) [immediate:829] v369(R)
gap () () 
          v451(R) = X64Lea : MRI v450(R) [immediate:828]
gap () () 
          X64Movq : MR v120(R) v451(R)
gap () () 
          v449(R) = X64Lea : MRI v450(R) [immediate:827]
gap () (v444 = v449(-);) 
          v444(1) = ArchNop v444
gap () () 
          X64MovqCompressTagged : MRI v444(R) [immediate:826] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v444(R) [immediate:825] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v444(R) [immediate:824] v445(R)
gap () () 
          [constant:448] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v444(R) [immediate:822] [immediate:823]
gap () (v447(R) = v448(-);) 
          v447(1) = SSEFloat64SilenceNaN v447(R)
gap () () 
          X64Movsd : MRI v445(R) [immediate:821] v447(R)
gap () () 
          X64Movsd : MRI v445(R) [immediate:820] v446(R)
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:819] v444(R)
gap () () 
          v439(R) = X64MovqDecompressAnyTagged : MRI v438(R) [immediate:818]
gap () () 
          X64Test32 && deoptimize if equal v439 #1 #150 v2(S) v3(-) v4(S) v436(S) [immediate:816] v437(-) [immediate:817] v438(S) v440(-) v439(-)
gap () () 
          v442(R) = X64MovqDecompressTaggedPointer : MRI v439(R) [immediate:815]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v442(R) [immediate:812] #1068 #149 v2(S) v3(-) v4(S) v436(S) [immediate:813] v437(-) [immediate:814] v438(S) v440(-) v439(-)
gap () () 
          v441(R) = X64MovqDecompressTaggedPointer : MRI v439(R) [immediate:811]
gap () () 
          X64Cmp && deoptimize if not equal v441(R) v346 #148 v2(S) v3(-) v4(S) v436(S) [immediate:809] v437(-) [immediate:810] v438(S) v440(-) v439(-)
gap () () 
          X64Push v437(-)
gap () () 
          X64Push v440(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v439(-); [rax|R|w64] = v108(-); [rsi|R|t] = v359(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:806] #-1 #147 v2(S) v3(S) v4(S) v436(S) [immediate:807] v437(S) [immediate:808] v438(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap (v352(-) = [rax|R|t];) () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:805] v352(R)
gap () () 
          v351(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:804]
gap () () 
          v432(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:803]
gap () () 
          X64Test32 && deoptimize if equal v432 #1 #146 v2(S) v3(-) v4(S) v351(-) v352(-) v432(-) [immediate:802]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v432(R) [immediate:800] v146(R) #145 v2(S) v3(-) v4(S) v351(-) v352(-) v432(-) [immediate:801]
gap () () 
          v430(R) = X64MovqDecompressTaggedPointer : MRI v432(R) [immediate:799]
gap () () 
          v433(R) = X64MovqDecompressTaggedSigned : MRI v432(R) [immediate:798]
gap () (v431(R) = v433(-);) 
          v431(1) = X64Sar32 v431(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v431 #8 #144 v2(S) v3(-) v4(S) v351(-) v352(-) v432(-) [immediate:797]
gap () () 
          v428(R) = X64MovqDecompressAnyTagged : MRI v430(R) [immediate:796]
gap () () 
          [constant:429] = ArchNop
gap () ([rdx|R|t] = v428(-); [rcx|R|t] = v31(-); [rax|R|w64] = v429(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:795] #-1 #143 v2(S) v3(S) v4(S) v351(S) v352(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v422(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v422 #1 #142 v2(S) v3(-) v4(S) v351(-) v352(-) v422(-) [immediate:794]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v422(R) [immediate:792] v80(R) #141 v2(S) v3(-) v4(S) v351(-) v352(-) v422(-) [immediate:793]
gap () () 
          v425(R) = X64MovqDecompressTaggedPointer : MRI v422(R) [immediate:791]
gap () () 
          v427(R) = X64MovqDecompressTaggedSigned : MRI v422(R) [immediate:790]
gap () (v426(R) = v427(-);) 
          v426(1) = X64Sar32 v426(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v426 #0 #140 v2(S) v3(-) v4(S) v351(-) v352(-) v422(-) [immediate:789]
gap () () 
          v353(R) = X64Movsd : MRI v425(R) [immediate:788]
gap () () 
          v424(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:787]
gap () () 
          X64Test32 && deoptimize if equal v424 #1 #139 v2(S) v3(-) v4(S) v351(-) v352(-) v422(-) [immediate:786]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v424(R) [immediate:784] v146(R) #138 v2(S) v3(-) v4(S) v351(-) v352(-) v422(-) [immediate:785]
gap () () 
          v420(R) = X64MovqDecompressTaggedPointer : MRI v424(R) [immediate:783]
gap () () 
          v423(R) = X64MovqDecompressTaggedSigned : MRI v424(R) [immediate:782]
gap () (v421(R) = v423(-);) 
          v421(1) = X64Sar32 v421(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v421 #8 #137 v2(S) v3(-) v4(S) v351(-) v352(-) v422(-) [immediate:781]
gap () () 
          v418(R) = X64MovqDecompressAnyTagged : MRI v420(R) [immediate:780]
gap () () 
          [constant:419] = ArchNop
gap () ([rdx|R|t] = v418(-); [rcx|R|t] = v31(-); [rax|R|w64] = v419(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:779] #-1 #136 v2(S) v3(S) v4(S) v351(S) v352(S) v353(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v412(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v412 #1 #135 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v412(-) [immediate:778]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v412(R) [immediate:776] v80(R) #134 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v412(-) [immediate:777]
gap () () 
          v415(R) = X64MovqDecompressTaggedPointer : MRI v412(R) [immediate:775]
gap () () 
          v417(R) = X64MovqDecompressTaggedSigned : MRI v412(R) [immediate:774]
gap () (v416(R) = v417(-);) 
          v416(1) = X64Sar32 v416(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v416 #1 #133 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v412(-) [immediate:773]
gap () () 
          v354(R) = X64Movsd : MRI v415(R) [immediate:772]
gap () () 
          v414(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:771]
gap () () 
          X64Test32 && deoptimize if equal v414 #1 #132 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v412(-) [immediate:770]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v414(R) [immediate:768] v146(R) #131 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v412(-) [immediate:769]
gap () () 
          v410(R) = X64MovqDecompressTaggedPointer : MRI v414(R) [immediate:767]
gap () () 
          v413(R) = X64MovqDecompressTaggedSigned : MRI v414(R) [immediate:766]
gap () (v411(R) = v413(-);) 
          v411(1) = X64Sar32 v411(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v411 #8 #130 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v412(-) [immediate:765]
gap () () 
          v408(R) = X64MovqDecompressAnyTagged : MRI v410(R) [immediate:764]
gap () () 
          [constant:409] = ArchNop
gap () ([rdx|R|t] = v408(-); [rcx|R|t] = v31(-); [rax|R|w64] = v409(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:763] #-1 #129 v2(S) v3(S) v4(S) v351(S) v352(S) v353(S) v354(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v403(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v403 #1 #128 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v354(-) v403(-) [immediate:762]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v403(R) [immediate:760] v80(R) #127 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v354(-) v403(-) [immediate:761]
gap () () 
          v405(R) = X64MovqDecompressTaggedPointer : MRI v403(R) [immediate:759]
gap () () 
          v407(R) = X64MovqDecompressTaggedSigned : MRI v403(R) [immediate:758]
gap () (v406(R) = v407(-);) 
          v406(1) = X64Sar32 v406(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v406 #2 #126 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v354(-) v403(-) [immediate:757]
gap () () 
          v355(R) = X64Movsd : MRI v405(R) [immediate:756]
gap () () 
          X64Test32 && deoptimize if equal v351 #1 #125 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v354(-) v403(-) [immediate:755]
gap () () 
          v404(R) = X64MovqDecompressTaggedPointer : MRI v351(R) [immediate:754]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v404(R) [immediate:752] #1068 #124 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v354(-) v403(-) [immediate:753]
gap () () 
          v402(R) = X64MovqDecompressTaggedPointer : MRI v351(R) [immediate:751]
gap () () 
          X64Cmp && deoptimize if not equal v401(R) v402 #123 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v354(-) v403(-) [immediate:750]
gap () () 
          v356(R) = X64MovqDecompressTaggedPointer : MRI v351(R) [immediate:749]
gap () () 
          v395(R) = X64Movq : MR v120(R)
gap () () 
          v400(R) = X64Lea : MRI v395(R) [immediate:748]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v400(R) [immediate:746] [immediate:747]
gap () () 
          ArchJmp [immediate:745]
gap () ([rdx|R|w64] = v399(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:744] #-1 [rdx|R|w64]
gap (v398(-) = [rax|R|tp];) () 
          v396(R) = X64Lea : MRI v398(R) [immediate:743]
gap () (v394 = v396(-);) 
          ArchJmp [immediate:742]
gap () (v394 = v395(-);) 
          ArchJmp [immediate:741]
gap () () 
          v391(R) = X64Lea : MRI v394(R) [immediate:740]
gap () () 
          X64Movq : MR v120(R) v391(R)
gap () () 
          v393(R) = X64Lea : MRI v394(R) [immediate:739]
gap () (v389 = v393(-);) 
          v389(1) = ArchNop v389
gap () () 
          X64MovqCompressTagged : MRI v389(R) [immediate:738] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v389(R) [immediate:737] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v389(R) [immediate:736] v392(R)
gap () () 
          X64MovqCompressTagged : MRI v389(R) [immediate:734] [immediate:735]
gap () () 
          v388(R) = X64Lea : MRI v391(R) [immediate:733]
gap () () 
          X64Movq : MR v120(R) v388(R)
gap () () 
          v390(R) = X64Lea : MRI v391(R) [immediate:732]
gap () (v362 = v390(-);) 
          v362(1) = ArchNop v362
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:731] v329(R)
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:729] [immediate:730]
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:727] [immediate:728]
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:725] [immediate:726]
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:723] [immediate:724]
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:722] v389(R)
gap () () 
          v386(R) = X64Lea : MRI v388(R) [immediate:721]
gap () () 
          X64Movq : MR v120(R) v386(R)
gap () () 
          v387(R) = X64Lea : MRI v388(R) [immediate:720]
gap () (v358 = v387(-);) 
          v358(1) = ArchNop v358
gap () () 
          X64MovqCompressTagged : MRI v358(R) [immediate:719] v116(R)
gap () () 
          X64MovqCompressTagged : MRI v358(R) [immediate:718] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v358(R) [immediate:717] v362(R)
gap () () 
          X64MovqCompressTagged : MRI v358(R) [immediate:715] [immediate:716]
gap () () 
          v384(R) = X64Lea : MRI v386(R) [immediate:714]
gap () () 
          X64Movq : MR v120(R) v384(R)
gap () () 
          v385(R) = X64Lea : MRI v386(R) [immediate:713]
gap () (v381 = v385(-);) 
          v381(1) = ArchNop v381
gap () () 
          X64MovqCompressTagged : MRI v381(R) [immediate:712] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v381(R) [immediate:710] [immediate:711]
gap () () 
          X64Movsd : MRI v381(R) [immediate:709] v370(R)
gap () () 
          X64Movsd : MRI v381(R) [immediate:708] v369(R)
gap () () 
          X64Movsd : MRI v381(R) [immediate:707] v369(R)
gap () () 
          X64Movsd : MRI v381(R) [immediate:706] v369(R)
gap () () 
          v379(R) = X64Lea : MRI v384(R) [immediate:705]
gap () () 
          X64Movq : MR v120(R) v379(R)
gap () () 
          v383(R) = X64Lea : MRI v384(R) [immediate:704]
gap () (v380 = v383(-);) 
          v380(1) = ArchNop v380
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:703] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:702] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:701] v381(R)
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:699] [immediate:700]
gap () (v382(R) = v353(-);) 
          v382(1) = SSEFloat64SilenceNaN v382(R)
gap () () 
          X64Movsd : MRI v381(R) [immediate:698] v382(R)
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:697] v380(R)
gap () () 
          v377(R) = X64Lea : MRI v379(R) [immediate:696]
gap () () 
          X64Movq : MR v120(R) v377(R)
gap () () 
          v378(R) = X64Lea : MRI v379(R) [immediate:695]
gap () (v374 = v378(-);) 
          v374(1) = ArchNop v374
gap () () 
          X64MovqCompressTagged : MRI v374(R) [immediate:694] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v374(R) [immediate:692] [immediate:693]
gap () () 
          X64Movsd : MRI v374(R) [immediate:691] v369(R)
gap () () 
          X64Movsd : MRI v374(R) [immediate:690] v370(R)
gap () () 
          X64Movsd : MRI v374(R) [immediate:689] v369(R)
gap () () 
          X64Movsd : MRI v374(R) [immediate:688] v369(R)
gap () () 
          v372(R) = X64Lea : MRI v377(R) [immediate:687]
gap () () 
          X64Movq : MR v120(R) v372(R)
gap () () 
          v376(R) = X64Lea : MRI v377(R) [immediate:686]
gap () (v373 = v376(-);) 
          v373(1) = ArchNop v373
gap () () 
          X64MovqCompressTagged : MRI v373(R) [immediate:685] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v373(R) [immediate:684] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v373(R) [immediate:683] v374(R)
gap () () 
          X64MovqCompressTagged : MRI v373(R) [immediate:681] [immediate:682]
gap () (v375(R) = v354(-);) 
          v375(1) = SSEFloat64SilenceNaN v375(R)
gap () () 
          X64Movsd : MRI v374(R) [immediate:680] v375(R)
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:679] v373(R)
gap () () 
          v367(R) = X64Lea : MRI v372(R) [immediate:678]
gap () () 
          X64Movq : MR v120(R) v367(R)
gap () () 
          v371(R) = X64Lea : MRI v372(R) [immediate:677]
gap () (v364 = v371(-);) 
          v364(1) = ArchNop v364
gap () () 
          X64MovqCompressTagged : MRI v364(R) [immediate:676] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v364(R) [immediate:674] [immediate:675]
gap () () 
          X64Movsd : MRI v364(R) [immediate:673] v369(R)
gap () () 
          X64Movsd : MRI v364(R) [immediate:672] v369(R)
gap () () 
          X64Movsd : MRI v364(R) [immediate:671] v370(R)
gap () () 
          X64Movsd : MRI v364(R) [immediate:670] v369(R)
gap () () 
          v368(R) = X64Lea : MRI v367(R) [immediate:669]
gap () () 
          X64Movq : MR v120(R) v368(R)
gap () () 
          v366(R) = X64Lea : MRI v367(R) [immediate:668]
gap () (v363 = v366(-);) 
          v363(1) = ArchNop v363
gap () () 
          X64MovqCompressTagged : MRI v363(R) [immediate:667] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v363(R) [immediate:666] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v363(R) [immediate:665] v364(R)
gap () () 
          X64MovqCompressTagged : MRI v363(R) [immediate:663] [immediate:664]
gap () (v365(R) = v355(-);) 
          v365(1) = SSEFloat64SilenceNaN v365(R)
gap () () 
          X64Movsd : MRI v364(R) [immediate:662] v365(R)
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:661] v363(R)
gap () () 
          v357(R) = X64MovqDecompressAnyTagged : MRI v356(R) [immediate:660]
gap () () 
          X64Test32 && deoptimize if equal v357 #1 #122 v2(S) v3(-) v4(S) v351(S) [immediate:659] v352(-) v353(-) v354(-) v355(-) v356(S) v358(-) v357(-)
gap () () 
          v361(R) = X64MovqDecompressTaggedPointer : MRI v357(R) [immediate:658]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v361(R) [immediate:656] #1068 #121 v2(S) v3(-) v4(S) v351(S) [immediate:657] v352(-) v353(-) v354(-) v355(-) v356(S) v358(-) v357(-)
gap () () 
          v360(R) = X64MovqDecompressTaggedPointer : MRI v357(R) [immediate:655]
gap () () 
          X64Cmp && deoptimize if not equal v360(R) v346 #120 v2(S) v3(-) v4(S) v351(S) [immediate:654] v352(-) v353(-) v354(-) v355(-) v356(S) v358(-) v357(-)
gap () () 
          X64Push v352(-)
gap () () 
          X64Push v358(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v357(-); [rax|R|w64] = v108(-); [rsi|R|t] = v359(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:652] #-1 #119 v2(S) v3(S) v4(S) v351(S) [immediate:653] v352(S) v353(S) v354(S) v355(S) v356(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap (v153(-) = [rax|R|t];) () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:651] v153(R)
gap () () 
          v152(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:650]
gap () () 
          v154(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:649]
gap () () 
          X64Test32 && deoptimize if equal v152 #1 #118 v2(S) v3(-) v4(S) v152(-) v153(-) v154(-)
gap () () 
          v348(R) = X64MovqDecompressTaggedPointer : MRI v152(R) [immediate:648]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v348(R) [immediate:647] #1068 #117 v2(S) v3(-) v4(S) v152(-) v153(-) v154(-)
gap () () 
          v347(R) = X64MovqDecompressTaggedPointer : MRI v152(R) [immediate:646]
gap () () 
          X64Cmp && deoptimize if not equal v346(R) v347 #116 v2(S) v3(-) v4(S) v152(-) v153(-) v154(-)
gap () () 
          v155(R) = X64Movl : MRI v152(R) [immediate:645]
gap () () 
          v340(R) = X64Movq : MR v120(R)
gap () () 
          [constant:344] = ArchNop
gap () () 
          v345(R) = X64Lea : MRI v340(R) [immediate:644]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v345(R) [immediate:642] [immediate:643]
gap () () 
          ArchJmp [immediate:641]
gap () ([rdx|R|w64] = v344(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:640] #-1 [rdx|R|w64]
gap (v343(-) = [rax|R|tp];) () 
          v341(R) = X64Lea : MRI v343(R) [immediate:639]
gap () (v339 = v341(-);) 
          ArchJmp [immediate:638]
gap () (v339 = v340(-);) 
          ArchJmp [immediate:637]
gap () () 
          v337(R) = X64Lea : MRI v339(R) [immediate:636]
gap () () 
          X64Movq : MR v120(R) v337(R)
gap () () 
          v338(R) = X64Lea : MRI v339(R) [immediate:635]
gap () (v328 = v338(-);) 
          v328(1) = ArchNop v328
gap () () 
          X64MovqCompressTagged : MRI v328(R) [immediate:634] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v328(R) [immediate:633] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v328(R) [immediate:632] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v328(R) [immediate:630] [immediate:631]
gap () () 
          v335(R) = X64Lea : MRI v337(R) [immediate:629]
gap () () 
          X64Movq : MR v120(R) v335(R)
gap () () 
          v336(R) = X64Lea : MRI v337(R) [immediate:628]
gap () (v327 = v336(-);) 
          v327(1) = ArchNop v327
gap () () 
          X64MovqCompressTagged : MRI v327(R) [immediate:627] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v327(R) [immediate:626] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v327(R) [immediate:625] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v327(R) [immediate:623] [immediate:624]
gap () () 
          v333(R) = X64Lea : MRI v335(R) [immediate:622]
gap () () 
          X64Movq : MR v120(R) v333(R)
gap () () 
          v334(R) = X64Lea : MRI v335(R) [immediate:621]
gap () (v326 = v334(-);) 
          v326(1) = ArchNop v326
gap () () 
          X64MovqCompressTagged : MRI v326(R) [immediate:620] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v326(R) [immediate:619] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v326(R) [immediate:618] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v326(R) [immediate:616] [immediate:617]
gap () () 
          v331(R) = X64Lea : MRI v333(R) [immediate:615]
gap () () 
          X64Movq : MR v120(R) v331(R)
gap () () 
          v332(R) = X64Lea : MRI v333(R) [immediate:614]
gap () (v325 = v332(-);) 
          v325(1) = ArchNop v325
gap () () 
          X64MovqCompressTagged : MRI v325(R) [immediate:613] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v325(R) [immediate:612] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v325(R) [immediate:611] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v325(R) [immediate:609] [immediate:610]
gap () () 
          v323(R) = X64Lea : MRI v331(R) [immediate:608]
gap () () 
          X64Movq : MR v120(R) v323(R)
gap () () 
          v330(R) = X64Lea : MRI v331(R) [immediate:607]
gap () (v321 = v330(-);) 
          v321(1) = ArchNop v321
gap () () 
          X64MovqCompressTagged : MRI v321(R) [immediate:606] v329(R)
gap () () 
          X64MovqCompressTagged : MRI v321(R) [immediate:604] [immediate:605]
gap () () 
          X64MovqCompressTagged : MRI v321(R) [immediate:603] v328(R)
gap () () 
          X64MovqCompressTagged : MRI v321(R) [immediate:602] v327(R)
gap () () 
          X64MovqCompressTagged : MRI v321(R) [immediate:601] v326(R)
gap () () 
          X64MovqCompressTagged : MRI v321(R) [immediate:600] v325(R)
gap () () 
          v324(R) = X64Lea : MRI v323(R) [immediate:599]
gap () () 
          X64Movq : MR v120(R) v324(R)
gap () () 
          v322(R) = X64Lea : MRI v323(R) [immediate:598]
gap () (v148 = v322(-);) 
          v148(1) = ArchNop v148
gap () () 
          [constant:107] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v148(R) [immediate:597] v116(R)
gap () () 
          X64MovqCompressTagged : MRI v148(R) [immediate:596] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v148(R) [immediate:595] v321(R)
gap () () 
          X64MovqCompressTagged : MRI v148(R) [immediate:593] [immediate:594]
gap () (v159 = v6(-);) 
          ArchJmp [immediate:592]
gap () () 
          X64Cmp32 && branch if unsigned less than v159 #4 [immediate:590] [immediate:591]
gap () () 
          v318(R) = X64MovqDecompressTaggedPointer : MRI v148(R) [immediate:589]
gap () () 
          v320(R) = X64MovqDecompressTaggedSigned : MRI v148(R) [immediate:588]
gap () (v319(R) = v320(-);) 
          v319(1) = X64Sar32 v319(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v159(R) v319 #115 v2(S) v3(-) v4(S) v152(S) [immediate:586] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:587]
gap () () 
          v264(R) = X64MovqDecompressAnyTagged : MR4I v318(R) v159(R) [immediate:585]
gap () () 
          X64Test32 && deoptimize if equal v153 #1 #114 v2(S) v3(-) v4(S) v152(S) [immediate:583] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:584]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v153(R) [immediate:580] v116(R) #113 v2(S) v3(-) v4(S) v152(S) [immediate:581] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:582]
gap () () 
          v290(R) = X64MovqDecompressTaggedPointer : MRI v153(R) [immediate:579]
gap () () 
          v317(R) = X64MovqDecompressTaggedSigned : MRI v153(R) [immediate:578]
gap () (v316(R) = v317(-);) 
          v316(1) = X64Sar32 v316(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v159(R) v316 #112 v2(S) v3(-) v4(S) v152(S) [immediate:576] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:577]
gap () () 
          v313(R) = X64MovqDecompressAnyTagged : MR4I v290(R) v159(R) [immediate:575]
gap () () 
          X64Test32 && deoptimize if equal v313 #1 #111 v2(S) v3(-) v4(S) v152(S) [immediate:573] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:574]
gap () () 
          X64Cmp32 : MRI && branch if equal v313(R) [immediate:570] v110(R) [immediate:571] [immediate:572]
gap () () 
          ArchJmp [immediate:569]
gap () () 
          [constant:315] = ArchNop
gap () () 
          X64Push v313(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v315(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:568] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:567]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v313(R) [immediate:563] v80(R) #110 v2(S) v3(-) v4(S) v152(S) [immediate:564] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:565] [immediate:566]
gap () () 
          v297(R) = X64MovqDecompressTaggedPointer : MRI v313(R) [immediate:562]
gap () () 
          v312(R) = X64MovqDecompressTaggedSigned : MRI v313(R) [immediate:561]
gap () (v298(R) = v312(-);) 
          v298(1) = X64Sar32 v298(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v298 #0 #109 v2(S) v3(-) v4(S) v152(S) [immediate:558] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:559] [immediate:560]
gap () () 
          v261(R) = X64Movsd : MRI v297(R) [immediate:557]
gap () () 
          X64Test32 && deoptimize if equal v154 #1 #108 v2(S) v3(-) v4(S) v152(S) [immediate:554] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:555] [immediate:556]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v154(R) [immediate:550] v116(R) #107 v2(S) v3(-) v4(S) v152(S) [immediate:551] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:552] [immediate:553]
gap () () 
          v282(R) = X64MovqDecompressTaggedPointer : MRI v154(R) [immediate:549]
gap () () 
          v311(R) = X64MovqDecompressTaggedSigned : MRI v154(R) [immediate:548]
gap () (v283(R) = v311(-);) 
          v283(1) = X64Sar32 v283(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v283 #0 #106 v2(S) v3(-) v4(S) v152(S) [immediate:545] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:546] [immediate:547]
gap () () 
          v308(R) = X64MovqDecompressAnyTagged : MRI v282(R) [immediate:544]
gap () () 
          X64Test32 && deoptimize if equal v308 #1 #105 v2(S) v3(-) v4(S) v152(S) [immediate:541] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:542] [immediate:543]
gap () () 
          X64Cmp32 : MRI && branch if equal v308(R) [immediate:538] v110(R) [immediate:539] [immediate:540]
gap () () 
          ArchJmp [immediate:537]
gap () () 
          [constant:310] = ArchNop
gap () () 
          X64Push v308(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v310(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:536] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:535]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v308(R) [immediate:531] v80(R) #104 v2(S) v3(-) v4(S) v152(S) [immediate:532] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:533] [immediate:534]
gap () () 
          v305(R) = X64MovqDecompressTaggedPointer : MRI v308(R) [immediate:530]
gap () () 
          v307(R) = X64MovqDecompressTaggedSigned : MRI v308(R) [immediate:529]
gap () (v306(R) = v307(-);) 
          v306(1) = X64Sar32 v306(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v306 #0 #103 v2(S) v3(-) v4(S) v152(S) [immediate:526] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:527] [immediate:528]
gap () () 
          v260(R) = X64Movsd : MRI v305(R) [immediate:525]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v298 #1 #102 v2(S) v3(-) v4(S) v152(S) [immediate:522] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:523] [immediate:524]
gap () () 
          v263(R) = X64Movsd : MRI v297(R) [immediate:521]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v283 #1 #101 v2(S) v3(-) v4(S) v152(S) [immediate:518] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:519] [immediate:520]
gap () () 
          v302(R) = X64MovqDecompressAnyTagged : MRI v282(R) [immediate:517]
gap () () 
          X64Test32 && deoptimize if equal v302 #1 #100 v2(S) v3(-) v4(S) v152(S) [immediate:514] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:515] [immediate:516]
gap () () 
          X64Cmp32 : MRI && branch if equal v302(R) [immediate:511] v110(R) [immediate:512] [immediate:513]
gap () () 
          ArchJmp [immediate:510]
gap () () 
          [constant:304] = ArchNop
gap () () 
          X64Push v302(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v304(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:509] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:508]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v302(R) [immediate:504] v80(R) #99 v2(S) v3(-) v4(S) v152(S) [immediate:505] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:506] [immediate:507]
gap () () 
          v299(R) = X64MovqDecompressTaggedPointer : MRI v302(R) [immediate:503]
gap () () 
          v301(R) = X64MovqDecompressTaggedSigned : MRI v302(R) [immediate:502]
gap () (v300(R) = v301(-);) 
          v300(1) = X64Sar32 v300(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v300 #0 #98 v2(S) v3(-) v4(S) v152(S) [immediate:499] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:500] [immediate:501]
gap () () 
          v262(R) = X64Movsd : MRI v299(R) [immediate:498]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v298 #2 #97 v2(S) v3(-) v4(S) v152(S) [immediate:495] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:496] [immediate:497]
gap () () 
          v259(R) = X64Movsd : MRI v297(R) [immediate:494]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v283 #2 #96 v2(S) v3(-) v4(S) v152(S) [immediate:491] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:492] [immediate:493]
gap () () 
          v294(R) = X64MovqDecompressAnyTagged : MRI v282(R) [immediate:490]
gap () () 
          X64Test32 && deoptimize if equal v294 #1 #95 v2(S) v3(-) v4(S) v152(S) [immediate:487] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:488] [immediate:489]
gap () () 
          X64Cmp32 : MRI && branch if equal v294(R) [immediate:484] v110(R) [immediate:485] [immediate:486]
gap () () 
          ArchJmp [immediate:483]
gap () () 
          [constant:296] = ArchNop
gap () () 
          X64Push v294(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v296(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:482] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:481]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v294(R) [immediate:477] v80(R) #94 v2(S) v3(-) v4(S) v152(S) [immediate:478] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:479] [immediate:480]
gap () () 
          v291(R) = X64MovqDecompressTaggedPointer : MRI v294(R) [immediate:476]
gap () () 
          v293(R) = X64MovqDecompressTaggedSigned : MRI v294(R) [immediate:475]
gap () (v292(R) = v293(-);) 
          v292(1) = X64Sar32 v292(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v292 #0 #93 v2(S) v3(-) v4(S) v152(S) [immediate:472] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:473] [immediate:474]
gap () () 
          v258(R) = X64Movsd : MRI v291(R) [immediate:471]
gap () () 
          v287(R) = X64MovqDecompressAnyTagged : MR4I v290(R) v159(R) [immediate:470]
gap () () 
          X64Test32 && deoptimize if equal v287 #1 #92 v2(S) v3(-) v4(S) v152(S) [immediate:467] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:468] [immediate:469]
gap () () 
          X64Cmp32 : MRI && branch if equal v287(R) [immediate:464] v110(R) [immediate:465] [immediate:466]
gap () () 
          ArchJmp [immediate:463]
gap () () 
          [constant:289] = ArchNop
gap () () 
          X64Push v287(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v289(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:462] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:461]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v287(R) [immediate:457] v80(R) #91 v2(S) v3(-) v4(S) v152(S) [immediate:458] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:459] [immediate:460]
gap () () 
          v284(R) = X64MovqDecompressTaggedPointer : MRI v287(R) [immediate:456]
gap () () 
          v286(R) = X64MovqDecompressTaggedSigned : MRI v287(R) [immediate:455]
gap () (v285(R) = v286(-);) 
          v285(1) = X64Sar32 v285(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v285 #3 #90 v2(S) v3(-) v4(S) v152(S) [immediate:452] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:453] [immediate:454]
gap () () 
          v255(R) = X64Movsd : MRI v284(R) [immediate:451]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v283 #3 #89 v2(S) v3(-) v4(S) v152(S) [immediate:448] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:449] [immediate:450]
gap () () 
          v279(R) = X64MovqDecompressAnyTagged : MRI v282(R) [immediate:447]
gap () () 
          X64Test32 && deoptimize if equal v279 #1 #88 v2(S) v3(-) v4(S) v152(S) [immediate:444] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:445] [immediate:446]
gap () () 
          X64Cmp32 : MRI && branch if equal v279(R) [immediate:441] v110(R) [immediate:442] [immediate:443]
gap () () 
          ArchJmp [immediate:440]
gap () () 
          [constant:281] = ArchNop
gap () () 
          X64Push v279(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v281(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:439] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:438]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v279(R) [immediate:434] v80(R) #87 v2(S) v3(-) v4(S) v152(S) [immediate:435] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:436] [immediate:437]
gap () () 
          v276(R) = X64MovqDecompressTaggedPointer : MRI v279(R) [immediate:433]
gap () () 
          v278(R) = X64MovqDecompressTaggedSigned : MRI v279(R) [immediate:432]
gap () (v277(R) = v278(-);) 
          v277(1) = X64Sar32 v277(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v277 #0 #86 v2(S) v3(-) v4(S) v152(S) [immediate:429] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:430] [immediate:431]
gap () () 
          v254(R) = X64Movsd : MRI v276(R) [immediate:428]
gap () () 
          X64Test32 && deoptimize if equal v264 #1 #85 v2(S) v3(-) v4(S) v152(S) [immediate:425] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:426] [immediate:427]
gap () () 
          X64Cmp32 : MRI && branch if equal v264(R) [immediate:422] v110(R) [immediate:423] [immediate:424]
gap () () 
          ArchJmp [immediate:421]
gap () () 
          [constant:275] = ArchNop
gap () () 
          X64Push v264(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v275(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:420] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:419]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v264(R) [immediate:415] v80(R) #84 v2(S) v3(-) v4(S) v152(S) [immediate:416] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:417] [immediate:418]
gap () () 
          v266(R) = X64MovqDecompressTaggedPointer : MRI v264(R) [immediate:414]
gap () () 
          v273(R) = X64MovqDecompressTaggedSigned : MRI v264(R) [immediate:413]
gap () () 
          v271(R) = X64MovqDecompressTaggedSigned : MRI v266(R) [immediate:412]
gap () (v265(R) = v273(-);) 
          v265(1) = X64Sar32 v265(R) #1
gap () () 
          v272(R) = X64Lea32 : MRI v265(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v272 #0 [immediate:410] [immediate:411]
gap () (v270(R) = v271(-);) 
          v270(1) = X64Sar32 v270(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v270 #0 [immediate:408] [immediate:409]
gap () () 
          [constant:269] = ArchNop
gap () ([rax|R|t] = v264(-); [rbx|R|w64] = v268(-); [rsi|R|w64] = v269(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:407] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v267(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v267 #1 #83 v2(S) v3(-) v4(S) v152(S) [immediate:404] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:405] [immediate:406]
gap () (v247 = v267(-);) 
          ArchJmp [immediate:403]
gap () (v247 = v266(-);) 
          ArchJmp [immediate:402]
gap () () 
          X64Cmp32 && branch if unsigned greater than v265 #0 [immediate:400] [immediate:401]
gap () () 
          X64MovqCompressTagged : MRI v264(R) [immediate:398] [immediate:399]
gap () () 
          ArchJmp [immediate:397]
gap () () 
          ArchJmp [immediate:396]
gap () () 
          v256(R) = AVXFloat64Mul v262(R) v263
gap () () 
          v257(R) = AVXFloat64Mul v260(R) v261
gap () () 
          v252(R) = AVXFloat64Mul v258(R) v259
gap () () 
          v253(R) = AVXFloat64Add v256(R) v257
gap () () 
          v250(R) = AVXFloat64Mul v254(R) v255
gap () () 
          v251(R) = AVXFloat64Add v252(R) v253
gap () () 
          v249(R) = AVXFloat64Add v250(R) v251
gap () () 
          X64Movsd : MRI v247(R) [immediate:395] v249(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:393] [immediate:394]
gap () () 
          [constant:246] = ArchNop
gap () () 
          [constant:245] = ArchNop
gap () ([rbx|R|w64] = v245(-); [rax|R|w64] = v6(-); [rsi|R|t] = v246(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:391] #-1 #82 v2(S) v3(S) v4(S) v152(S) [immediate:392] v153(S) v154(S) v155(S) v148(S) v159(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:390]
gap () () 
          ArchJmp [immediate:389]
gap () (v185 = v84(-);) 
          ArchJmp [immediate:388]
gap () () 
          X64Cmp32 && branch if unsigned less than v185 #4 [immediate:386] [immediate:387]
gap () () 
          v241(R) = X64MovqDecompressTaggedPointer : MRI v148(R) [immediate:385]
gap () () 
          v243(R) = X64MovqDecompressTaggedSigned : MRI v148(R) [immediate:384]
gap () (v242(R) = v243(-);) 
          v242(1) = X64Sar32 v242(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v159(R) v242 #81 v2(S) v3(-) v4(S) v152(S) [immediate:382] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:383]
gap () () 
          v182(R) = X64MovqDecompressAnyTagged : MR4I v241(R) v159(R) [immediate:381]
gap () () 
          v212(R) = X64MovqDecompressTaggedPointer : MRI v153(R) [immediate:380]
gap () () 
          v240(R) = X64MovqDecompressTaggedSigned : MRI v153(R) [immediate:379]
gap () (v239(R) = v240(-);) 
          v239(1) = X64Sar32 v239(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v159(R) v239 #80 v2(S) v3(-) v4(S) v152(S) [immediate:377] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:378]
gap () () 
          v236(R) = X64MovqDecompressAnyTagged : MR4I v212(R) v159(R) [immediate:376]
gap () () 
          X64Test32 && deoptimize if equal v236 #1 #79 v2(S) v3(-) v4(S) v152(S) [immediate:374] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:375]
gap () () 
          X64Cmp32 : MRI && branch if equal v236(R) [immediate:371] v110(R) [immediate:372] [immediate:373]
gap () () 
          ArchJmp [immediate:370]
gap () () 
          [constant:238] = ArchNop
gap () () 
          X64Push v236(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v238(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:369] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:368]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v236(R) [immediate:365] v80(R) #78 v2(S) v3(-) v4(S) v152(S) [immediate:366] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:367]
gap () () 
          v220(R) = X64MovqDecompressTaggedPointer : MRI v236(R) [immediate:364]
gap () () 
          v235(R) = X64MovqDecompressTaggedSigned : MRI v236(R) [immediate:363]
gap () (v221(R) = v235(-);) 
          v221(1) = X64Sar32 v221(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v221 #0 #77 v2(S) v3(-) v4(S) v152(S) [immediate:361] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:362]
gap () () 
          v179(R) = X64Movsd : MRI v220(R) [immediate:360]
gap () () 
          v204(R) = X64MovqDecompressTaggedPointer : MRI v154(R) [immediate:359]
gap () () 
          v234(R) = X64MovqDecompressTaggedSigned : MRI v154(R) [immediate:358]
gap () (v205(R) = v234(-);) 
          v205(1) = X64Sar32 v205(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v205 #0 #76 v2(S) v3(-) v4(S) v152(S) [immediate:356] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:357]
gap () () 
          v231(R) = X64MovqDecompressAnyTagged : MRI v204(R) [immediate:355]
gap () () 
          X64Test32 && deoptimize if equal v231 #1 #75 v2(S) v3(-) v4(S) v152(S) [immediate:353] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:354]
gap () () 
          X64Cmp32 : MRI && branch if equal v231(R) [immediate:350] v110(R) [immediate:351] [immediate:352]
gap () () 
          ArchJmp [immediate:349]
gap () () 
          [constant:233] = ArchNop
gap () () 
          X64Push v231(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v233(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:348] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:347]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v231(R) [immediate:344] v80(R) #74 v2(S) v3(-) v4(S) v152(S) [immediate:345] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:346]
gap () () 
          v228(R) = X64MovqDecompressTaggedPointer : MRI v231(R) [immediate:343]
gap () () 
          v230(R) = X64MovqDecompressTaggedSigned : MRI v231(R) [immediate:342]
gap () (v229(R) = v230(-);) 
          v229(1) = X64Sar32 v229(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v185(R) v229 #73 v2(S) v3(-) v4(S) v152(S) [immediate:340] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:341]
gap () () 
          v178(R) = X64Movsd : MR8I v228(R) v185(R) [immediate:339]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v221 #1 #72 v2(S) v3(-) v4(S) v152(S) [immediate:337] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:338]
gap () () 
          v181(R) = X64Movsd : MRI v220(R) [immediate:336]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v205 #1 #71 v2(S) v3(-) v4(S) v152(S) [immediate:334] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:335]
gap () () 
          v225(R) = X64MovqDecompressAnyTagged : MRI v204(R) [immediate:333]
gap () () 
          X64Test32 && deoptimize if equal v225 #1 #70 v2(S) v3(-) v4(S) v152(S) [immediate:331] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:332]
gap () () 
          X64Cmp32 : MRI && branch if equal v225(R) [immediate:328] v110(R) [immediate:329] [immediate:330]
gap () () 
          ArchJmp [immediate:327]
gap () () 
          [constant:227] = ArchNop
gap () () 
          X64Push v225(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v227(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:326] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:325]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v225(R) [immediate:322] v80(R) #69 v2(S) v3(-) v4(S) v152(S) [immediate:323] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:324]
gap () () 
          v222(R) = X64MovqDecompressTaggedPointer : MRI v225(R) [immediate:321]
gap () () 
          v224(R) = X64MovqDecompressTaggedSigned : MRI v225(R) [immediate:320]
gap () (v223(R) = v224(-);) 
          v223(1) = X64Sar32 v223(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v185(R) v223 #68 v2(S) v3(-) v4(S) v152(S) [immediate:318] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:319]
gap () () 
          v180(R) = X64Movsd : MR8I v222(R) v185(R) [immediate:317]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v221 #2 #67 v2(S) v3(-) v4(S) v152(S) [immediate:315] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:316]
gap () () 
          v177(R) = X64Movsd : MRI v220(R) [immediate:314]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v205 #2 #66 v2(S) v3(-) v4(S) v152(S) [immediate:312] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:313]
gap () () 
          v217(R) = X64MovqDecompressAnyTagged : MRI v204(R) [immediate:311]
gap () () 
          X64Test32 && deoptimize if equal v217 #1 #65 v2(S) v3(-) v4(S) v152(S) [immediate:309] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:310]
gap () () 
          X64Cmp32 : MRI && branch if equal v217(R) [immediate:306] v110(R) [immediate:307] [immediate:308]
gap () () 
          ArchJmp [immediate:305]
gap () () 
          [constant:219] = ArchNop
gap () () 
          X64Push v217(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v219(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:304] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:303]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v217(R) [immediate:300] v80(R) #64 v2(S) v3(-) v4(S) v152(S) [immediate:301] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:302]
gap () () 
          v214(R) = X64MovqDecompressTaggedPointer : MRI v217(R) [immediate:299]
gap () () 
          v216(R) = X64MovqDecompressTaggedSigned : MRI v217(R) [immediate:298]
gap () (v215(R) = v216(-);) 
          v215(1) = X64Sar32 v215(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v185(R) v215 #63 v2(S) v3(-) v4(S) v152(S) [immediate:296] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:297]
gap () () 
          v176(R) = X64Movsd : MR8I v214(R) v185(R) [immediate:295]
gap () () 
          v209(R) = X64MovqDecompressAnyTagged : MR4I v212(R) v159(R) [immediate:294]
gap () () 
          X64Test32 && deoptimize if equal v209 #1 #62 v2(S) v3(-) v4(S) v152(S) [immediate:292] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:293]
gap () () 
          X64Cmp32 : MRI && branch if equal v209(R) [immediate:289] v110(R) [immediate:290] [immediate:291]
gap () () 
          ArchJmp [immediate:288]
gap () () 
          [constant:211] = ArchNop
gap () () 
          X64Push v209(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v211(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:287] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:286]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v209(R) [immediate:283] v80(R) #61 v2(S) v3(-) v4(S) v152(S) [immediate:284] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:285]
gap () () 
          v206(R) = X64MovqDecompressTaggedPointer : MRI v209(R) [immediate:282]
gap () () 
          v208(R) = X64MovqDecompressTaggedSigned : MRI v209(R) [immediate:281]
gap () (v207(R) = v208(-);) 
          v207(1) = X64Sar32 v207(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v207 #3 #60 v2(S) v3(-) v4(S) v152(S) [immediate:279] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:280]
gap () () 
          v173(R) = X64Movsd : MRI v206(R) [immediate:278]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v205 #3 #59 v2(S) v3(-) v4(S) v152(S) [immediate:276] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:277]
gap () () 
          v201(R) = X64MovqDecompressAnyTagged : MRI v204(R) [immediate:275]
gap () () 
          X64Test32 && deoptimize if equal v201 #1 #58 v2(S) v3(-) v4(S) v152(S) [immediate:273] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:274]
gap () () 
          X64Cmp32 : MRI && branch if equal v201(R) [immediate:270] v110(R) [immediate:271] [immediate:272]
gap () () 
          ArchJmp [immediate:269]
gap () () 
          [constant:203] = ArchNop
gap () () 
          X64Push v201(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v203(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:268] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:267]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v201(R) [immediate:264] v80(R) #57 v2(S) v3(-) v4(S) v152(S) [immediate:265] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:266]
gap () () 
          v198(R) = X64MovqDecompressTaggedPointer : MRI v201(R) [immediate:263]
gap () () 
          v200(R) = X64MovqDecompressTaggedSigned : MRI v201(R) [immediate:262]
gap () (v199(R) = v200(-);) 
          v199(1) = X64Sar32 v199(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v185(R) v199 #56 v2(S) v3(-) v4(S) v152(S) [immediate:260] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:261]
gap () () 
          v172(R) = X64Movsd : MR8I v198(R) v185(R) [immediate:259]
gap () () 
          X64Test32 && deoptimize if equal v182 #1 #55 v2(S) v3(-) v4(S) v152(S) [immediate:257] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:258]
gap () () 
          X64Cmp32 : MRI && branch if equal v182(R) [immediate:254] v110(R) [immediate:255] [immediate:256]
gap () () 
          ArchJmp [immediate:253]
gap () () 
          [constant:197] = ArchNop
gap () () 
          X64Push v182(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v197(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:252] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:251]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v182(R) [immediate:248] v80(R) #54 v2(S) v3(-) v4(S) v152(S) [immediate:249] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:250]
gap () () 
          v187(R) = X64MovqDecompressTaggedPointer : MRI v182(R) [immediate:247]
gap () () 
          v195(R) = X64MovqDecompressTaggedSigned : MRI v182(R) [immediate:246]
gap () (v186(R) = v195(-);) 
          v186(1) = X64Sar32 v186(R) #1
gap () () 
          v194(R) = X64MovqDecompressTaggedSigned : MRI v187(R) [immediate:245]
gap () (v192(R) = v194(-);) 
          v192(1) = X64Sar32 v192(R) #1
gap () () 
          v193(R) = X64Lea32 : MRI v186(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v185(R) v193 #53 v2(S) v3(-) v4(S) v152(S) [immediate:243] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:244]
gap () () 
          X64Cmp32 && branch if unsigned less than v185(R) v192 [immediate:241] [immediate:242]
gap () () 
          [constant:190] = ArchNop
gap () () 
          v191(R) = X64Lea32 : MR1 v185(R) v185(R)
gap () ([rax|R|t] = v182(-); [rbx|R|w32] = v191(-); [rsi|R|w64] = v190(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:240] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v188(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v188 #1 #52 v2(S) v3(-) v4(S) v152(S) [immediate:238] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:239]
gap () (v164 = v188(-);) 
          ArchJmp [immediate:237]
gap () (v164 = v187(-);) 
          ArchJmp [immediate:236]
gap () () 
          v161(R) = X64Lea32 : MRI v185(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v185(R) v186 [immediate:234] [immediate:235]
gap () () 
          v184(R) = X64Lea32 : MR1 v161(R) v161(R)
gap () () 
          X64MovqCompressTagged : MRI v182(R) [immediate:233] v184(R)
gap () () 
          ArchJmp [immediate:232]
gap () () 
          ArchJmp [immediate:231]
gap () () 
          v174(R) = AVXFloat64Mul v180(R) v181
gap () () 
          v175(R) = AVXFloat64Mul v178(R) v179
gap () () 
          v170(R) = AVXFloat64Mul v176(R) v177
gap () () 
          v171(R) = AVXFloat64Add v174(R) v175
gap () () 
          v168(R) = AVXFloat64Mul v172(R) v173
gap () () 
          v169(R) = AVXFloat64Add v170(R) v171
gap () () 
          v167(R) = AVXFloat64Add v168(R) v169
gap () () 
          X64Movsd : MR8I v164(R) v185(R) [immediate:230] v167(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:228] [immediate:229]
gap () () 
          [constant:163] = ArchNop
gap () () 
          [constant:162] = ArchNop
gap () ([rbx|R|w64] = v162(-); [rax|R|w64] = v6(-); [rsi|R|t] = v163(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:226] #-1 #51 v2(S) v3(S) v4(S) v152(S) [immediate:227] v153(S) v154(S) v155(S) v148(S) v159(S) v161(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:225]
gap () () 
          ArchJmp [immediate:224]
gap () (v185 = v161(-);) 
          ArchJmp [immediate:223]
gap () () 
          v156(R) = X64Lea32 : MRI v159(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:221] [immediate:222]
gap () () 
          [constant:158] = ArchNop
gap () () 
          [constant:157] = ArchNop
gap () ([rbx|R|w64] = v157(-); [rax|R|w64] = v6(-); [rsi|R|t] = v158(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:219] #-1 #50 v2(S) v3(S) v4(S) v152(S) [immediate:220] v153(S) v154(S) v155(S) v148(S) v156(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:218]
gap () () 
          ArchJmp [immediate:217]
gap () (v159 = v156(-);) 
          ArchJmp [immediate:216]
gap () () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:215] v148(R)
gap () (v23 = v147(-);) 
          ArchJmp [immediate:214]
gap () () 
          X64Cmp32 && branch if signed greater than v23 #-1 [immediate:212] [immediate:213]
gap () () 
          v145(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:211]
gap () () 
          X64Test32 && deoptimize if equal v145 #1 #49 v2(S) v3(-) v4(S) v23(-) [immediate:210]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v145(R) [immediate:208] v146(R) #48 v2(S) v3(-) v4(S) v23(-) [immediate:209]
gap () () 
          v141(R) = X64MovqDecompressTaggedPointer : MRI v145(R) [immediate:207]
gap () () 
          v144(R) = X64MovqDecompressTaggedSigned : MRI v145(R) [immediate:206]
gap () (v143(R) = v144(-);) 
          v143(1) = X64Sar32 v143(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v23(R) v143 #47 v2(S) v3(-) v4(S) v23(-) [immediate:205]
gap () () 
          v30(R) = X64MovqDecompressAnyTagged : MR4I v141(R) v23(R) [immediate:204]
gap () () 
          v35(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:203]
gap () () 
          v36(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:202]
gap () () 
          [constant:140] = ArchNop
gap () ([rdx|R|t] = v30(-); [rcx|R|t] = v31(-); [rax|R|w64] = v140(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:201] #-1 #46 v2(S) v3(S) v4(S) v23(S) v30(S) v35(S) v36(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v37(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v35 #1 #45 v2(S) v3(-) v4(S) v23(-) v30(-) v35(-) v36(-) v37(-)
gap () () 
          v139(R) = X64MovqDecompressTaggedPointer : MRI v35(R) [immediate:200]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v139(R) [immediate:199] #1068 #44 v2(S) v3(-) v4(S) v23(-) v30(-) v35(-) v36(-) v37(-)
gap () () 
          [constant:137] = ArchNop
gap () () 
          v138(R) = X64MovqDecompressTaggedPointer : MRI v35(R) [immediate:198]
gap () () 
          X64Cmp && deoptimize if not equal v137(R) v138 #43 v2(S) v3(-) v4(S) v23(-) v30(-) v35(-) v36(-) v37(-)
gap () () 
          v38(R) = X64Movl : MRI v35(R) [immediate:197]
gap () () 
          [constant:136] = ArchNop
gap () () 
          X64Test32 && branch if equal v136 #1 [immediate:195] [immediate:196]
gap () () 
          v134(R) = X64Movsd : MRI v136(R) [immediate:194]
gap () (v122 = v134(-);) 
          ArchJmp [immediate:193]
gap () (v135(R) = v136(-);) 
          v135(1) = X64Sar32 v135(R) #1
gap () () 
          v133(R) = SSEInt32ToFloat64 v135
gap () (v122 = v133(-);) 
          ArchJmp [immediate:192]
gap () () 
          v126(R) = X64Movq : MR v120(R)
gap () () 
          [constant:130] = ArchNop
gap () () 
          v131(R) = X64Lea : MRI v126(R) [immediate:191]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v131(R) [immediate:189] [immediate:190]
gap () () 
          ArchJmp [immediate:188]
gap () ([rdx|R|w64] = v130(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:187] #-1 [rdx|R|w64]
gap (v129(-) = [rax|R|tp];) () 
          v127(R) = X64Lea : MRI v129(R) [immediate:186]
gap () (v125 = v127(-);) 
          ArchJmp [immediate:185]
gap () (v125 = v126(-);) 
          ArchJmp [immediate:184]
gap () () 
          v119(R) = X64Lea : MRI v125(R) [immediate:183]
gap () () 
          X64Movq : MR v120(R) v119(R)
gap () () 
          v124(R) = X64Lea : MRI v125(R) [immediate:182]
gap () (v88 = v124(-);) 
          v88(1) = ArchNop v88
gap () () 
          X64MovqCompressTagged : MRI v88(R) [immediate:181] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v88(R) [immediate:179] [immediate:180]
gap () () 
          X64Movsd : MRI v88(R) [immediate:178] v122(R)
gap () () 
          X64Movsd : MRI v88(R) [immediate:177] v122(R)
gap () () 
          X64Movsd : MRI v88(R) [immediate:176] v122(R)
gap () () 
          X64Movsd : MRI v88(R) [immediate:175] v122(R)
gap () () 
          v121(R) = X64Lea : MRI v119(R) [immediate:174]
gap () () 
          X64Movq : MR v120(R) v121(R)
gap () () 
          v118(R) = X64Lea : MRI v119(R) [immediate:173]
gap () (v32 = v118(-);) 
          v32(1) = ArchNop v32
gap () () 
          X64MovqCompressTagged : MRI v32(R) [immediate:172] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v32(R) [immediate:171] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v32(R) [immediate:170] v88(R)
gap () () 
          X64MovqCompressTagged : MRI v32(R) [immediate:168] [immediate:169]
gap () () 
          X64Test32 && deoptimize if equal v36 #1 #42 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:165] v36(-) v37(-) v38(S) v32(-) [immediate:166] [immediate:167]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v36(R) [immediate:161] v116(R) #41 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:162] v36(-) v37(-) v38(S) v32(-) [immediate:163] [immediate:164]
gap () () 
          v113(R) = X64MovqDecompressTaggedPointer : MRI v36(R) [immediate:160]
gap () () 
          v115(R) = X64MovqDecompressTaggedSigned : MRI v36(R) [immediate:159]
gap () (v114(R) = v115(-);) 
          v114(1) = X64Sar32 v114(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v114 #0 #40 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:156] v36(-) v37(-) v38(S) v32(-) [immediate:157] [immediate:158]
gap () () 
          v112(R) = X64MovqDecompressAnyTagged : MRI v113(R) [immediate:155]
gap () () 
          X64Test32 && deoptimize if equal v112 #1 #39 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:152] v36(-) v37(-) v38(S) v32(-) [immediate:153] [immediate:154]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v112(R) [immediate:148] v80(R) #38 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:149] v36(-) v37(-) v38(S) v32(-) [immediate:150] [immediate:151]
gap () () 
          v103(R) = X64MovqDecompressTaggedPointer : MRI v112(R) [immediate:147]
gap () () 
          v111(R) = X64MovqDecompressTaggedSigned : MRI v112(R) [immediate:146]
gap () (v104(R) = v111(-);) 
          v104(1) = X64Sar32 v104(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v104 #0 #37 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:143] v36(-) v37(-) v38(S) v32(-) [immediate:144] [immediate:145]
gap () () 
          v100(R) = X64Movsd : MRI v103(R) [immediate:142]
gap () () 
          X64Test32 && deoptimize if equal v37 #1 #36 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:139] v36(-) v37(-) v38(S) v32(-) [immediate:140] [immediate:141]
gap () () 
          X64Cmp32 : MRI && branch if equal v37(R) [immediate:136] v110(R) [immediate:137] [immediate:138]
gap () () 
          ArchJmp [immediate:135]
gap () () 
          [constant:109] = ArchNop
gap () () 
          X64Push v37(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v109(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:134] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:133]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v37(R) [immediate:129] v80(R) #35 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:130] v36(-) v37(-) v38(S) v32(-) [immediate:131] [immediate:132]
gap () () 
          v96(R) = X64MovqDecompressTaggedPointer : MRI v37(R) [immediate:128]
gap () () 
          v105(R) = X64MovqDecompressTaggedSigned : MRI v37(R) [immediate:127]
gap () (v102(R) = v105(-);) 
          v102(1) = X64Sar32 v102(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v102 #0 #34 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:124] v36(-) v37(-) v38(S) v32(-) [immediate:125] [immediate:126]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v104 #1 #33 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:121] v36(-) v37(-) v38(S) v32(-) [immediate:122] [immediate:123]
gap () () 
          v101(R) = X64Movsd : MRI v103(R) [immediate:120]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v102 #1 #32 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:117] v36(-) v37(-) v38(S) v32(-) [immediate:118] [immediate:119]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v104 #2 #31 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:114] v36(-) v37(-) v38(S) v32(-) [immediate:115] [immediate:116]
gap () () 
          v99(R) = X64Movsd : MRI v103(R) [immediate:113]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v102 #2 #30 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:110] v36(-) v37(-) v38(S) v32(-) [immediate:111] [immediate:112]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v104 #3 #29 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:107] v36(-) v37(-) v38(S) v32(-) [immediate:108] [immediate:109]
gap () () 
          v95(R) = X64Movsd : MRI v103(R) [immediate:106]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v102 #3 #28 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:103] v36(-) v37(-) v38(S) v32(-) [immediate:104] [immediate:105]
gap () () 
          v97(R) = AVXFloat64Mul : MRI v101(R) v96(R) [immediate:102]
gap () () 
          v98(R) = AVXFloat64Mul : MRI v100(R) v96(R) [immediate:101]
gap () () 
          v93(R) = AVXFloat64Mul : MRI v99(R) v96(R) [immediate:100]
gap () () 
          v94(R) = AVXFloat64Add v97(R) v98
gap () () 
          v91(R) = AVXFloat64Mul : MRI v95(R) v96(R) [immediate:99]
gap () () 
          v92(R) = AVXFloat64Add v93(R) v94
gap () () 
          v90(R) = AVXFloat64Add v91(R) v92
gap () () 
          X64MovqCompressTagged : MRI v32(R) [immediate:97] [immediate:98]
gap () () 
          X64Movsd : MRI v88(R) [immediate:96] v90(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:94] [immediate:95]
gap () () 
          [constant:87] = ArchNop
gap () () 
          [constant:86] = ArchNop
gap () ([rbx|R|w64] = v86(-); [rax|R|w64] = v6(-); [rsi|R|t] = v87(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:92] #-1 #27 v2(S) v3(S) v4(S) v23(S) v30(S) v35(S) [immediate:93] v36(S) v37(S) v38(S) v32(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:91]
gap () () 
          ArchJmp [immediate:90]
gap () (v62 = v84(-);) 
          ArchJmp [immediate:89]
gap () () 
          X64Cmp32 && branch if unsigned less than v62 #4 [immediate:87] [immediate:88]
gap () () 
          v81(R) = X64MovqDecompressTaggedPointer : MRI v36(R) [immediate:86]
gap () () 
          v83(R) = X64MovqDecompressTaggedSigned : MRI v36(R) [immediate:85]
gap () (v82(R) = v83(-);) 
          v82(1) = X64Sar32 v82(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v62(R) v82 #26 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:83] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:84]
gap () () 
          v79(R) = X64MovqDecompressAnyTagged : MR4I v81(R) v62(R) [immediate:82]
gap () () 
          X64Test32 && deoptimize if equal v79 #1 #25 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:80] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:81]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v79(R) [immediate:77] v80(R) #24 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:78] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:79]
gap () () 
          v75(R) = X64MovqDecompressTaggedPointer : MRI v79(R) [immediate:76]
gap () () 
          v78(R) = X64MovqDecompressTaggedSigned : MRI v79(R) [immediate:75]
gap () (v76(R) = v78(-);) 
          v76(1) = X64Sar32 v76(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v76 #0 #23 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:73] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:74]
gap () () 
          v57(R) = X64Movsd : MRI v75(R) [immediate:72]
gap () () 
          v73(R) = X64MovqDecompressTaggedPointer : MRI v37(R) [immediate:71]
gap () () 
          v77(R) = X64MovqDecompressTaggedSigned : MRI v37(R) [immediate:70]
gap () (v74(R) = v77(-);) 
          v74(1) = X64Sar32 v74(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v74 #0 #22 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:68] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:69]
gap () () 
          v56(R) = X64Movsd : MRI v73(R) [immediate:67]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v76 #1 #21 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:65] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:66]
gap () () 
          v59(R) = X64Movsd : MRI v75(R) [immediate:64]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v74 #1 #20 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:62] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:63]
gap () () 
          v58(R) = X64Movsd : MRI v73(R) [immediate:61]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v76 #2 #19 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:59] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:60]
gap () () 
          v55(R) = X64Movsd : MRI v75(R) [immediate:58]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v74 #2 #18 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:56] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:57]
gap () () 
          v54(R) = X64Movsd : MRI v73(R) [immediate:55]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v76 #3 #17 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:53] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:54]
gap () () 
          v51(R) = X64Movsd : MRI v75(R) [immediate:52]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v74 #3 #16 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:50] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:51]
gap () () 
          v50(R) = X64Movsd : MRI v73(R) [immediate:49]
gap () () 
          v64(R) = X64MovqDecompressTaggedPointer : MRI v32(R) [immediate:48]
gap () () 
          v71(R) = X64MovqDecompressTaggedSigned : MRI v32(R) [immediate:47]
gap () () 
          v72(R) = X64MovqDecompressTaggedSigned : MRI v64(R) [immediate:46]
gap () (v69(R) = v72(-);) 
          v69(1) = X64Sar32 v69(R) #1
gap () (v63(R) = v71(-);) 
          v63(1) = X64Sar32 v63(R) #1
gap () () 
          v70(R) = X64Lea32 : MRI v63(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v62(R) v70 #15 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:44] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:45]
gap () () 
          X64Cmp32 && branch if unsigned less than v62(R) v69 [immediate:42] [immediate:43]
gap () () 
          v68(R) = X64Lea32 : MR1 v62(R) v62(R)
gap () () 
          [constant:67] = ArchNop
gap () ([rax|R|t] = v32(-); [rbx|R|w32] = v68(-); [rsi|R|w64] = v67(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:41] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v65(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v65 #1 #14 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:39] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:40]
gap () (v42 = v65(-);) 
          ArchJmp [immediate:38]
gap () (v42 = v64(-);) 
          ArchJmp [immediate:37]
gap () () 
          v39(R) = X64Lea32 : MRI v62(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v62(R) v63 [immediate:35] [immediate:36]
gap () () 
          v61(R) = X64Lea32 : MR1 v39(R) v39(R)
gap () () 
          X64MovqCompressTagged : MRI v32(R) [immediate:34] v61(R)
gap () () 
          ArchJmp [immediate:33]
gap () () 
          ArchJmp [immediate:32]
gap () () 
          v52(R) = AVXFloat64Mul v58(R) v59
gap () () 
          v53(R) = AVXFloat64Mul v56(R) v57
gap () () 
          v48(R) = AVXFloat64Mul v54(R) v55
gap () () 
          v49(R) = AVXFloat64Add v52(R) v53
gap () () 
          v46(R) = AVXFloat64Mul v50(R) v51
gap () () 
          v47(R) = AVXFloat64Add v48(R) v49
gap () () 
          v45(R) = AVXFloat64Add v46(R) v47
gap () () 
          X64Movsd : MR8I v42(R) v62(R) [immediate:31] v45(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:29] [immediate:30]
gap () () 
          [constant:41] = ArchNop
gap () () 
          [constant:40] = ArchNop
gap () ([rbx|R|w64] = v40(-); [rax|R|w64] = v6(-); [rsi|R|t] = v41(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:27] #-1 #13 v2(S) v3(S) v4(S) v23(S) v30(S) v35(S) [immediate:28] v36(S) v37(S) v38(S) v32(S) v39(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:26]
gap () () 
          ArchJmp [immediate:25]
gap () (v62 = v39(-);) 
          ArchJmp [immediate:24]
gap () () 
          [constant:33] = ArchNop
gap () ([rdx|R|t] = v30(-); [rcx|R|t] = v31(-); [rax|R|t] = v32(-); [rdi|R|w64] = v33(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:23] #-1 #12 v2(S) v3(S) v4(S) v23(S) [rdx|R|t] [rcx|R|t] [rax|R|t] [rdi|R|w64] [rsi|R|t]
gap () () 
          v26(R) = X64Lea32 : MRI v23(R) #-1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:21] [immediate:22]
gap () () 
          [constant:28] = ArchNop
gap () () 
          [constant:27] = ArchNop
gap () ([rbx|R|w64] = v27(-); [rax|R|w64] = v6(-); [rsi|R|t] = v28(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:20] #-1 #11 v2(S) v3(S) v4(S) v26(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:19]
gap () () 
          ArchJmp [immediate:18]
gap () (v23 = v26(-);) 
          ArchJmp [immediate:17]
gap () () 
          [constant:7] = ArchNop
gap () () 
          v20(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:16]
gap () () 
          X64Test32 && deoptimize if equal v20 #1 #10 v2(S) v3(-) v4(S) v23(-) [immediate:15]
gap () () 
          v24(R) = X64MovqDecompressTaggedPointer : MRI v20(R) [immediate:14]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v24(R) [immediate:12] #1068 #9 v2(S) v3(-) v4(S) v23(-) [immediate:13]
gap () () 
          [constant:21] = ArchNop
gap () () 
          v22(R) = X64MovqDecompressTaggedPointer : MRI v20(R) [immediate:11]
gap () () 
          X64Cmp && deoptimize if not equal v21(R) v22 #8 v2(S) v3(-) v4(S) v23(-) [immediate:10]
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v20(-); [rax|R|w64] = v6(-); [rsi|R|t] = v7(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:9] #-1 #7 v2(S) v3(S) v4(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v11(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:8]
gap () () 
          X64Test32 && deoptimize if equal v11 #1 #6 v2(S) v3(-) v4(S) v11(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v11(R) [immediate:7] v18(R) #5 v2(S) v3(-) v4(S) v11(-)
gap () () 
          v17(R) = X64MovqDecompressTaggedSigned : MRI v11(R) [immediate:6]
gap () (v16(R) = v17(-);) 
          v16(1) = X64Sar32 v16(R) #1
gap () () 
          v15(R) = X64Lea32 : MRI v16(R) #1
gap () (v14(R) = v15(-);) 
          v14(1) = X64Add32 && deoptimize if overflow v14(R) v15(R) #4 v2(S) v3(-) v4(S) v11(-)
gap () (v13 = v14(-);) 
          v13(1) = ArchNop v13
gap () () 
          X64MovqCompressTagged : MRI v11(R) [immediate:5] v13(R)
gap () () 
          v5(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:4]
gap () () 
          X64Test32 && deoptimize if equal v5 #1 #3 v2(S) v3(-) v4(S) v5(-)
gap () () 
          v10(R) = X64MovqDecompressTaggedPointer : MRI v5(R) [immediate:3]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v10(R) [immediate:2] #1068 #2 v2(S) v3(-) v4(S) v5(-)
gap () () 
          [constant:8] = ArchNop
gap () () 
          v9(R) = X64MovqDecompressTaggedPointer : MRI v5(R) [immediate:1]
gap () () 
          X64Cmp && deoptimize if not equal v8(R) v9 #1 v2(S) v3(-) v4(S) v5(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v5(-); [rax|R|w64] = v6(-); [rsi|R|t] = v7(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:0] #-1 #0 v2(S) v3(S) v4(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
gap () () 
          ArchDebugBreak
gap () () 
          ArchThrowTerminator
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
2, v62, v81
2, v23, v141
2, v159, v212
2, v159, v290
2, v159, v241
2, v159, v318
3, v62, v42
3, v185, v198
3, v185, v214
3, v185, v164
3, v185, v222
3, v185, v228
print modrm pairs
1, v9, v5
1, v15, v16
1, v11, v4
1, v22, v20
1, v39, v62
1, v70, v63
1, v72, v64
1, v50, v73
1, v54, v73
1, v515, v516
1, v55, v75
1, v58, v73
1, v77, v37
1, v73, v37
1, v75, v79
1, v81, v36
1, v99, v103
1, v643, v645
1, v101, v103
1, v100, v103
1, v112, v113
1, v282, v154
1, v115, v36
1, v118, v119
1, v425, v422
1, v598, v596
1, v121, v119
1, v105, v37
1, v144, v145
1, v122, v88
1, v637, v590
1, v464, v468
1, v504, v507
1, v119, v125
1, v642, v638
1, v388, v391
1, v131, v126
1, v134, v136
1, v38, v35
1, v36, v4
1, v200, v201
1, v217, v204
1, v141, v145
1, v145, v4
1, v688, v689
1, v156, v159
1, v193, v186
1, v57, v75
1, v194, v187
1, v71, v32
1, v187, v182
1, v602, v601
1, v201, v204
1, v206, v209
1, v216, v217
1, v224, v225
1, v430, v432
1, v222, v225
1, v181, v220
1, v177, v220
1, v230, v231
1, v228, v231
1, v404, v351
1, v234, v154
1, v204, v154
1, v235, v236
1, v466, v443
1, v220, v236
1, v240, v153
1, v241, v148
1, v249, v247
1, v272, v265
1, v271, v266
1, v573, v569
1, v139, v35
1, v266, v264
1, v284, v287
1, v231, v204
1, v258, v291
1, v465, v443
1, v291, v294
1, v301, v302
1, v255, v284
1, v261, v297
1, v312, v313
1, v278, v279
1, v297, v313
1, v586, v540
1, v318, v148
1, v354, v415
1, v321, v148
1, v322, v323
1, v326, v321
1, v279, v282
1, v547, v544
1, v276, v279
1, v374, v373
1, v330, v331
1, v323, v331
1, v332, v333
1, v333, v335
1, v336, v337
1, v59, v75
1, v88, v32
1, v335, v337
1, v338, v339
1, v290, v153
1, v345, v340
1, v337, v339
1, v161, v185
1, v341, v343
1, v525, v528
1, v348, v152
1, v355, v405
1, v154, v4
1, v623, v624
1, v361, v357
1, v357, v356
1, v363, v362
1, v305, v308
1, v225, v204
1, v607, v610
1, v365, v364
1, v95, v103
1, v366, v367
1, v260, v305
1, v371, v372
1, v327, v321
1, v367, v372
1, v373, v362
1, v376, v377
1, v372, v377
1, v378, v379
1, v595, v590
1, v382, v381
1, v381, v380
1, v379, v384
1, v293, v294
1, v362, v358
1, v148, v4
1, v541, v4
1, v195, v182
1, v633, v635
1, v387, v388
1, v483, v482
1, v483, v534
1, v483, v584
1, v444, v443
1, v389, v362
1, v558, v547
1, v462, v464
1, v393, v394
1, v391, v394
1, v13, v11
1, v432, v4
1, v461, v462
1, v413, v414
1, v396, v398
1, v693, v694
1, v214, v217
1, v356, v351
1, v407, v403
1, v80, v79
1, v80, v112
1, v80, v37
1, v80, v32
1, v80, v182
1, v80, v209
1, v80, v217
1, v80, v225
1, v80, v231
1, v80, v236
1, v80, v287
1, v80, v294
1, v80, v611
1, v80, v638
1, v80, v422
1, v80, v313
1, v80, v325
1, v80, v327
1, v80, v328
1, v80, v380
1, v80, v403
1, v80, v326
1, v80, v412
1, v80, v454
1, v80, v508
1, v80, v498
1, v80, v363
1, v80, v279
1, v80, v373
1, v80, v548
1, v80, v264
1, v80, v618
1, v80, v201
1, v80, v302
1, v80, v308
1, v80, v444
1, v80, v558
1, v80, v601
1, v80, v659
1, v80, v647
1, v405, v403
1, v408, v410
1, v410, v414
1, v78, v79
1, v415, v412
1, v424, v4
1, v380, v362
1, v427, v422
1, v83, v36
1, v307, v308
1, v352, v4
1, v428, v430
1, v471, v474
1, v689, v686
1, v445, v444
1, v655, v657
1, v452, v453
1, v636, v632
1, v518, v522
1, v460, v462
1, v530, v532
1, v450, v453
1, v299, v302
1, v456, v455
1, v423, v424
1, v90, v88
1, v286, v287
1, v446, v445
1, v446, v455
1, v402, v351
1, v325, v321
1, v467, v468
1, v417, v412
1, v243, v148
1, v568, v572
1, v470, v471
1, v294, v282
1, v468, v471
1, v577, v578
1, v472, v466
1, v680, v681
1, v18, v11
1, v18, v694
1, v473, v474
1, v24, v20
1, v124, v125
1, v626, v629
1, v486, v436
1, v451, v450
1, v455, v454
1, v436, v4
1, v433, v432
1, v522, v525
1, v208, v209
1, v493, v492
1, v499, v498
1, v385, v386
1, v56, v73
1, v505, v504
1, v574, v575
1, v534, v484
1, v510, v509
1, v469, v465
1, v96, v37
1, v320, v148
1, v360, v357
1, v480, v475
1, v368, v367
1, v375, v374
1, v500, v499
1, v500, v509
1, v103, v112
1, v517, v518
1, v138, v35
1, v259, v297
1, v447, v445
1, v497, v494
1, v509, v508
1, v513, v514
1, v692, v690
1, v514, v516
1, v61, v32
1, v146, v145
1, v146, v414
1, v146, v424
1, v146, v432
1, v146, v651
1, v146, v663
1, v146, v671
1, v459, v460
1, v449, v450
1, v519, v497
1, v652, v647
1, v559, v558
1, v179, v220
1, v487, v436
1, v523, v519
1, v353, v425
1, v273, v264
1, v524, v525
1, v476, v478
1, v526, v520
1, v606, v607
1, v437, v4
1, v501, v499
1, v383, v384
1, v308, v282
1, v567, v568
1, v564, v566
1, v533, v529
1, v113, v36
1, v439, v438
1, v536, v490
1, v563, v564
1, v537, v490
1, v390, v391
1, v490, v4
1, v5, v4
1, v492, v490
1, v520, v497
1, v155, v152
1, v491, v4
1, v603, v602
1, v454, v443
1, v620, v619
1, v495, v493
1, v331, v333
1, v364, v363
1, v630, v631
1, v545, v543
1, v612, v611
1, v546, v543
1, v551, v549
1, v543, v542
1, v420, v424
1, v400, v395
1, v580, v582
1, v152, v4
1, v549, v548
1, v212, v153
1, v442, v439
1, v555, v554
1, v453, v460
1, v566, v568
1, v556, v557
1, v20, v4
1, v614, v615
1, v560, v559
1, v173, v206
1, v557, v564
1, v571, v572
1, v600, v597
1, v565, v566
1, v570, v547
1, v441, v439
1, v496, v493
1, v624, v626
1, v572, v575
1, v540, v4
1, v575, v578
1, v481, v482
1, v481, v534
1, v481, v584
1, v616, v617
1, v583, v579
1, v584, v484
1, v369, v374
1, v369, v445
1, v369, v364
1, v369, v455
1, v369, v499
1, v369, v612
1, v369, v549
1, v369, v509
1, v369, v602
1, v369, v559
1, v369, v381
1, v369, v619
1, v621, v622
1, v554, v557
1, v599, v596
1, v329, v362
1, v329, v497
1, v329, v547
1, v329, v443
1, v329, v321
1, v329, v600
1, v596, v595
1, v649, v652
1, v418, v420
1, v608, v607
1, v51, v75
1, v609, v610
1, v506, v507
1, v622, v624
1, v662, v663
1, v611, v600
1, v613, v612
1, v347, v152
1, v654, v647
1, v482, v484
1, v438, v436
1, v553, v554
1, v657, v663
1, v384, v386
1, v615, v617
1, v625, v626
1, v262, v299
1, v617, v622
1, v386, v388
1, v527, v528
1, v666, v659
1, v619, v618
1, v123, v88
1, v123, v374
1, v123, v445
1, v123, v364
1, v123, v455
1, v123, v499
1, v123, v612
1, v123, v549
1, v123, v509
1, v123, v602
1, v123, v559
1, v123, v381
1, v123, v619
1, v569, v547
1, v627, v600
1, v311, v154
1, v324, v323
1, v610, v615
1, v328, v321
1, v628, v629
1, v576, v570
1, v669, v671
1, v392, v389
1, v392, v627
1, v498, v497
1, v17, v11
1, v629, v631
1, v153, v4
1, v667, v669
1, v645, v651
1, v694, v4
1, v117, v32
1, v117, v148
1, v117, v325
1, v117, v327
1, v117, v328
1, v117, v363
1, v117, v326
1, v117, v494
1, v117, v358
1, v117, v466
1, v117, v454
1, v117, v465
1, v117, v570
1, v117, v498
1, v117, v373
1, v117, v519
1, v117, v597
1, v117, v548
1, v117, v520
1, v117, v569
1, v117, v544
1, v117, v380
1, v117, v389
1, v117, v601
1, v117, v558
1, v117, v611
1, v117, v440
1, v117, v618
1, v117, v444
1, v117, v508
1, v117, v627
1, v26, v23
1, v127, v129
1, v116, v154
1, v116, v153
1, v116, v36
1, v116, v358
1, v116, v494
1, v116, v440
1, v116, v544
1, v116, v148
1, v116, v597
1, v672, v671
1, v334, v335
1, v605, v640
1, v302, v282
1, v601, v600
1, v661, v664
1, v640, v638
1, v377, v379
1, v651, v4
1, v521, v522
1, v618, v600
1, v110, v201
1, v110, v225
1, v110, v236
1, v110, v264
1, v110, v279
1, v110, v519
1, v110, v313
1, v110, v37
1, v110, v217
1, v110, v287
1, v110, v465
1, v110, v302
1, v110, v389
1, v110, v231
1, v110, v466
1, v110, v520
1, v110, v569
1, v110, v570
1, v110, v308
1, v110, v182
1, v110, v209
1, v110, v294
1, v110, v627
1, v507, v514
1, v548, v547
1, v463, v464
1, v650, v651
1, v542, v540
1, v550, v549
1, v550, v559
1, v516, v518
1, v681, v678
1, v64, v32
1, v663, v4
1, v443, v440
1, v664, v659
1, v254, v276
1, v587, v540
1, v111, v112
1, v317, v153
1, v414, v4
1, v590, v4
1, v591, v4
1, v10, v5
1, v639, v590
1, v198, v201
1, v370, v374
1, v370, v364
1, v370, v619
1, v370, v381
1, v370, v602
1, v370, v612
1, v503, v504
1, v691, v694
1, v351, v4
1, v508, v497
1, v35, v4
1, v184, v182
1, v671, v4
1, v263, v297
assign r8 to v696:0
assign 8 to v696:0
assign rax to v84:1
assign 0 to v84:1
assign rbx to v697:1
assign 3 to v697:1
assign rsi to v698:1
assign 6 to v698:1
assign r8 to v84:2
assign 8 to v84:2
v4:1 not intersect with v11:0, removed
v4:2 intersect with v11:0, adding
v4:1 not intersect with v36:0, removed
v4:2 intersect with v36:0, adding
v4:1 not intersect with v148:0, removed
v4:2 intersect with v148:0, adding
v4:1 not intersect with v651:0, removed
v4:2 intersect with v651:0, adding
v4:1 not intersect with v414:0, removed
v4:2 intersect with v414:0, adding
v4:1 not intersect with v424:0, removed
v4:2 intersect with v424:0, adding
v4:1 not intersect with v436:0, removed
v4:2 intersect with v436:0, adding
v4:1 not intersect with v153:0, removed
v4:2 intersect with v153:0, adding
v4:1 not intersect with v432:0, removed
v4:2 intersect with v432:0, adding
v4:1 not intersect with v351:0, removed
v4:2 intersect with v351:0, adding
v4:1 not intersect with v352:0, removed
v4:2 intersect with v352:0, adding
v4:1 not intersect with v154:0, removed
v4:2 intersect with v154:0, adding
v4:1 not intersect with v145:0, removed
v4:2 intersect with v145:0, adding
v4:1 not intersect with v437:0, removed
v4:2 intersect with v437:0, adding
v4:1 not intersect with v20:0, removed
v4:2 intersect with v20:0, adding
v4:1 not intersect with v490:0, removed
v4:2 intersect with v490:0, adding
v4:1 not intersect with v491:0, removed
v4:2 intersect with v491:0, adding
v4:1 not intersect with v540:0, removed
v4:2 intersect with v540:0, adding
v4:1 not intersect with v541:0, removed
v4:2 intersect with v541:0, adding
v4:1 not intersect with v663:0, removed
v4:2 intersect with v663:0, adding
v4:1 not intersect with v671:0, removed
v4:2 intersect with v671:0, adding
v4:1 not intersect with v5:0, removed
v4:2 intersect with v5:0, adding
v4:1 not intersect with v152:0, removed
v4:2 intersect with v152:0, adding
v4:1 not intersect with v591:0, removed
v4:2 intersect with v591:0, adding
v4:1 not intersect with v35:0, removed
v4:2 intersect with v35:0, adding
v4:1 not intersect with v590:0, removed
v4:2 intersect with v590:0, adding
assign rsi to v4:1
assign 6 to v4:1
assign r8 to v694:0
assign 8 to v694:0
v18:1 not intersect with v11:0, removed
v18:2 intersect with v11:0, adding
assign r9 to v18:1
assign 9 to v18:1
assign r12 to v691:0
assign 12 to v691:0
assign r8 to v693:0
assign 8 to v693:0
assign rdi to v690:1
assign 7 to v690:1
assign r8 to v692:0
assign 8 to v692:0
assign rdx to v0:1
assign 2 to v0:1
v4:2 not intersect with v590:0, removed
v4:3 intersect with v590:0, adding
v4:2 not intersect with v35:0, removed
v4:3 intersect with v35:0, adding
v4:2 not intersect with v591:0, removed
v4:3 intersect with v591:0, adding
v4:2 not intersect with v152:0, removed
v4:3 intersect with v152:0, adding
v4:2 not intersect with v5:0, removed
v4:3 intersect with v5:0, adding
v4:2 not intersect with v671:0, removed
v4:3 intersect with v671:0, adding
v4:2 not intersect with v663:0, removed
v4:3 intersect with v663:0, adding
v4:2 not intersect with v540:0, removed
v4:3 intersect with v540:0, adding
v4:2 not intersect with v491:0, removed
v4:3 intersect with v491:0, adding
v4:2 not intersect with v541:0, removed
v4:3 intersect with v541:0, adding
v4:2 not intersect with v437:0, removed
v4:3 intersect with v437:0, adding
v4:2 not intersect with v145:0, removed
v4:3 intersect with v145:0, adding
v4:2 not intersect with v490:0, removed
v4:3 intersect with v490:0, adding
v4:2 not intersect with v20:0, removed
v4:3 intersect with v20:0, adding
v4:2 not intersect with v154:0, removed
v4:3 intersect with v154:0, adding
v4:2 not intersect with v352:0, removed
v4:3 intersect with v352:0, adding
v4:2 not intersect with v436:0, removed
v4:3 intersect with v436:0, adding
v4:2 not intersect with v153:0, removed
v4:3 intersect with v153:0, adding
v4:2 not intersect with v432:0, removed
v4:3 intersect with v432:0, adding
v4:2 not intersect with v651:0, removed
v4:3 intersect with v651:0, adding
v4:2 not intersect with v414:0, removed
v4:3 intersect with v414:0, adding
v4:2 not intersect with v424:0, removed
v4:3 intersect with v424:0, adding
v4:2 not intersect with v11:0, removed
v4:3 intersect with v11:0, adding
v4:2 not intersect with v148:0, removed
v4:3 intersect with v148:0, adding
v4:2 not intersect with v351:0, removed
v4:3 intersect with v351:0, adding
v4:2 not intersect with v36:0, removed
v4:3 intersect with v36:0, adding
assign r8 to v4:2
assign 8 to v4:2
assign r11 to v0:2
assign 11 to v0:2
blocking v4 pick register r8
blocking v0 pick register r8
blocking v18 pick register r8
assign rax to v686:0
assign 0 to v686:0
assign r8 to v689:0
assign 8 to v689:0
assign r8 to v688:0
assign 8 to v688:0
assign r8 to v677:1
assign 8 to v677:1
assign rsi to v687:1
assign 6 to v687:1
assign rax to v682:0
assign 0 to v682:0
assign r8 to v6:1
assign 8 to v6:1
assign rbx to v684:1
assign 3 to v684:1
assign rsi to v685:1
assign 6 to v685:1
assign r9 to v682:1
assign 9 to v682:1
assign rax to v682:3
assign 0 to v682:3
assign rax to v678:0
assign 0 to v678:0
assign r8 to v681:0
assign 8 to v681:0
assign r8 to v680:0
assign 8 to v680:0
assign rsi to v679:1
assign 6 to v679:1
assign rax to v674:0
assign 0 to v674:0
assign rbx to v675:1
assign 3 to v675:1
assign rsi to v676:1
assign 6 to v676:1
assign r8 to v674:1
assign 8 to v674:1
assign rax to v674:3
assign 0 to v674:3
assign rsi to v4:4
assign 6 to v4:4
v590:0 not intersect with v4:3, removed
v590:0 not intersect with v637:0, removed
v590:1 intersect with v637:0, adding
v590:0 not intersect with v595:0, removed
v590:1 intersect with v595:0, adding
v590:0 not intersect with v639:0, removed
v590:1 intersect with v639:0, adding
assign r8 to v590:0
assign 8 to v590:0
v591:0 not intersect with v4:3, removed
assign r9 to v591:0
assign 9 to v591:0
assign r12 to v671:0
assign 12 to v671:0
v146:1 not intersect with v145:0, removed
v146:2 intersect with v145:0, adding
v146:1 not intersect with v414:0, removed
v146:2 intersect with v414:0, adding
v146:1 not intersect with v424:0, removed
v146:2 intersect with v424:0, adding
v146:1 not intersect with v432:0, removed
v146:2 intersect with v432:0, adding
v146:1 not intersect with v651:0, removed
v146:2 intersect with v651:0, adding
v146:1 not intersect with v663:0, removed
v146:2 intersect with v663:0, adding
assign rax to v146:1
assign 0 to v146:1
assign rdx to v669:0
assign 2 to v669:0
assign rcx to v672:0
assign 1 to v672:0
assign rcx to v670:0
assign 1 to v670:0
assign rdx to v667:0
assign 2 to v667:0
assign rcx to v31:1
assign 1 to v31:1
assign r11 to v668:1
assign 11 to v668:1
assign r11 to v4:5
assign 11 to v4:5
v146:2 not intersect with v663:0, removed
v146:3 intersect with v663:0, adding
v146:2 not intersect with v414:0, removed
v146:3 intersect with v414:0, adding
v146:2 not intersect with v651:0, removed
v146:3 intersect with v651:0, adding
v146:2 not intersect with v432:0, removed
v146:3 intersect with v432:0, adding
v146:2 not intersect with v424:0, removed
v146:3 intersect with v424:0, adding
v146:2 not intersect with v145:0, removed
v146:3 intersect with v145:0, adding
assign r12 to v146:2
assign 12 to v146:2
assign r14 to v31:2
assign 14 to v31:2
blocking v4 pick register r8
blocking v590 pick register r8
blocking v146 pick register r8
assign rax to v659:0
assign 0 to v659:0
v80:1 not intersect with v79:0, removed
v80:2 intersect with v79:0, adding
v80:1 not intersect with v112:0, removed
v80:2 intersect with v112:0, adding
v80:1 not intersect with v37:0, removed
v80:2 intersect with v37:0, adding
v80:1 not intersect with v32:0, removed
v80:2 intersect with v32:0, adding
v80:1 not intersect with v182:0, removed
v80:2 intersect with v182:0, adding
v80:1 not intersect with v209:0, removed
v80:2 intersect with v209:0, adding
v80:1 not intersect with v217:0, removed
v80:2 intersect with v217:0, adding
v80:1 not intersect with v225:0, removed
v80:2 intersect with v225:0, adding
v80:1 not intersect with v231:0, removed
v80:2 intersect with v231:0, adding
v80:1 not intersect with v236:0, removed
v80:2 intersect with v236:0, adding
v80:1 not intersect with v287:0, removed
v80:2 intersect with v287:0, adding
v80:1 not intersect with v294:0, removed
v80:2 intersect with v294:0, adding
v80:1 not intersect with v611:0, removed
v80:2 intersect with v611:0, adding
v80:1 not intersect with v638:0, removed
v80:2 intersect with v638:0, adding
v80:1 not intersect with v422:0, removed
v80:2 intersect with v422:0, adding
v80:1 not intersect with v313:0, removed
v80:2 intersect with v313:0, adding
v80:1 not intersect with v325:0, removed
v80:2 intersect with v325:0, adding
v80:1 not intersect with v327:0, removed
v80:2 intersect with v327:0, adding
v80:1 not intersect with v328:0, removed
v80:2 intersect with v328:0, adding
v80:1 not intersect with v380:0, removed
v80:2 intersect with v380:0, adding
v80:1 not intersect with v403:0, removed
v80:2 intersect with v403:0, adding
v80:1 not intersect with v326:0, removed
v80:2 intersect with v326:0, adding
v80:1 not intersect with v412:0, removed
v80:2 intersect with v412:0, adding
v80:1 not intersect with v454:0, removed
v80:2 intersect with v454:0, adding
v80:1 not intersect with v508:0, removed
v80:2 intersect with v508:0, adding
v80:1 not intersect with v498:0, removed
v80:2 intersect with v498:0, adding
v80:1 not intersect with v363:0, removed
v80:2 intersect with v363:0, adding
v80:1 not intersect with v279:0, removed
v80:2 intersect with v279:0, adding
v80:1 not intersect with v373:0, removed
v80:2 intersect with v373:0, adding
v80:1 not intersect with v548:0, removed
v80:2 intersect with v548:0, adding
v80:1 not intersect with v264:0, removed
v80:2 intersect with v264:0, adding
v80:1 not intersect with v618:0, removed
v80:2 intersect with v618:0, adding
v80:1 not intersect with v201:0, removed
v80:2 intersect with v201:0, adding
v80:1 not intersect with v302:0, removed
v80:2 intersect with v302:0, adding
v80:1 not intersect with v308:0, removed
v80:2 intersect with v308:0, adding
v80:1 not intersect with v444:0, removed
v80:2 intersect with v444:0, adding
v80:1 not intersect with v558:0, removed
v80:2 intersect with v558:0, adding
v80:1 not intersect with v601:0, removed
v80:2 intersect with v601:0, adding
v80:1 not intersect with v647:0, removed
v80:2 intersect with v647:0, adding
assign r8 to v80:1
assign 8 to v80:1
assign r9 to v664:0
assign 9 to v664:0
assign r12 to v666:0
assign 12 to v666:0
assign r12 to v665:0
assign 12 to v665:0
assign rsi to v4:7
assign 6 to v4:7
assign r9 to v663:0
assign 9 to v663:0
assign r11 to v146:4
assign 11 to v146:4
assign r12 to v657:0
assign 12 to v657:0
assign r9 to v662:0
assign 9 to v662:0
assign r9 to v658:0
assign 9 to v658:0
assign rdx to v655:0
assign 2 to v655:0
assign rax to v656:1
assign 0 to v656:1
assign r9 to v4:8
assign 9 to v4:8
blocking v4 pick register r8
blocking v80 pick register r8
blocking v146 pick register r8
assign rax to v647:0
assign 0 to v647:0
assign r8 to v80:3
assign 8 to v80:3
assign r9 to v652:0
assign 9 to v652:0
assign r12 to v654:0
assign 12 to v654:0
assign r12 to v653:0
assign 12 to v653:0
assign rsi to v4:10
assign 6 to v4:10
assign r9 to v651:0
assign 9 to v651:0
assign r11 to v146:6
assign 11 to v146:6
assign r12 to v645:0
assign 12 to v645:0
assign r9 to v650:0
assign 9 to v650:0
assign r9 to v646:0
assign 9 to v646:0
assign rdx to v643:0
assign 2 to v643:0
assign rax to v644:1
assign 0 to v644:1
assign r9 to v4:11
assign 9 to v4:11
blocking v4 pick register r8
blocking v80 pick register r8
blocking v146 pick register r8
assign rax to v638:0
assign 0 to v638:0
assign r8 to v80:5
assign 8 to v80:5
assign r9 to v640:0
assign 9 to v640:0
assign r12 to v642:0
assign 12 to v642:0
assign r12 to v641:0
assign 12 to v641:0
assign r9 to v590:2
assign 9 to v590:2
assign r12 to v639:0
assign 12 to v639:0
assign r12 to v637:0
assign 12 to v637:0
assign r11 to v401:1
assign 11 to v401:1
v595:0 not intersect with v590:1, removed
assign r12 to v595:0
assign 12 to v595:0
assign r14 to v120:1
assign 14 to v120:1
assign r15 to v632:0
assign 15 to v632:0
assign rax to v636:0
assign 0 to v636:0
assign rbx to v132:1
assign 3 to v132:1
assign rdx to v399:1
assign 2 to v399:1
assign r15 to v399:2
assign 15 to v399:2
blocking v80 pick register r8
blocking v595 pick register r12
blocking v120 pick register r14
assign rax to v635:0
assign 0 to v635:0
assign r15 to v633:0
assign 15 to v633:0
assign rbx to v132:4
assign 3 to v132:4
assign r14 to v120:5
assign 14 to v120:5
assign r12 to v595:4
assign 12 to v595:4
assign r11 to v401:4
assign 11 to v401:4
assign r9 to v590:5
assign 9 to v590:5
assign r8 to v80:9
assign 8 to v80:9
assign r15 to v631:0
assign 15 to v631:0
assign rax to v629:0
assign 0 to v629:0
assign r14 to v120:4
assign 14 to v120:4
assign r15 to v630:0
assign 15 to v630:0
assign r15 to v627:0
assign 15 to v627:0
v110:1 not intersect with v201:0, removed
v110:2 intersect with v201:0, adding
v110:1 not intersect with v225:0, removed
v110:2 intersect with v225:0, adding
v110:1 not intersect with v236:0, removed
v110:2 intersect with v236:0, adding
v110:1 not intersect with v264:0, removed
v110:2 intersect with v264:0, adding
v110:1 not intersect with v279:0, removed
v110:2 intersect with v279:0, adding
v110:1 not intersect with v519:0, removed
v110:2 intersect with v519:0, adding
v110:1 not intersect with v313:0, removed
v110:2 intersect with v313:0, adding
v110:1 not intersect with v37:0, removed
v110:2 intersect with v37:0, adding
v110:1 not intersect with v217:0, removed
v110:2 intersect with v217:0, adding
v110:1 not intersect with v287:0, removed
v110:2 intersect with v287:0, adding
v110:1 not intersect with v465:0, removed
v110:2 intersect with v465:0, adding
v110:1 not intersect with v302:0, removed
v110:2 intersect with v302:0, adding
v110:1 not intersect with v389:0, removed
v110:2 intersect with v389:0, adding
v110:1 not intersect with v231:0, removed
v110:2 intersect with v231:0, adding
v110:1 not intersect with v466:0, removed
v110:2 intersect with v466:0, adding
v110:1 not intersect with v520:0, removed
v110:2 intersect with v520:0, adding
v110:1 not intersect with v569:0, removed
v110:2 intersect with v569:0, adding
v110:1 not intersect with v570:0, removed
v110:2 intersect with v570:0, adding
v110:1 not intersect with v308:0, removed
v110:2 intersect with v308:0, adding
v110:1 not intersect with v182:0, removed
v110:2 intersect with v182:0, adding
v110:1 not intersect with v209:0, removed
v110:2 intersect with v209:0, adding
v110:1 not intersect with v294:0, removed
v110:2 intersect with v294:0, adding
assign rdx to v110:1
assign 2 to v110:1
v117:1 not intersect with v32:0, removed
v117:2 intersect with v32:0, adding
v117:1 not intersect with v148:0, removed
v117:2 intersect with v148:0, adding
v117:1 not intersect with v325:0, removed
v117:2 intersect with v325:0, adding
v117:1 not intersect with v327:0, removed
v117:2 intersect with v327:0, adding
v117:1 not intersect with v328:0, removed
v117:2 intersect with v328:0, adding
v117:1 not intersect with v363:0, removed
v117:2 intersect with v363:0, adding
v117:1 not intersect with v326:0, removed
v117:2 intersect with v326:0, adding
v117:1 not intersect with v494:0, removed
v117:2 intersect with v494:0, adding
v117:1 not intersect with v358:0, removed
v117:2 intersect with v358:0, adding
v117:1 not intersect with v466:0, removed
v117:2 intersect with v466:0, adding
v117:1 not intersect with v454:0, removed
v117:2 intersect with v454:0, adding
v117:1 not intersect with v465:0, removed
v117:2 intersect with v465:0, adding
v117:1 not intersect with v570:0, removed
v117:2 intersect with v570:0, adding
v117:1 not intersect with v498:0, removed
v117:2 intersect with v498:0, adding
v117:1 not intersect with v373:0, removed
v117:2 intersect with v373:0, adding
v117:1 not intersect with v519:0, removed
v117:2 intersect with v519:0, adding
v117:1 not intersect with v548:0, removed
v117:2 intersect with v548:0, adding
v117:1 not intersect with v520:0, removed
v117:2 intersect with v520:0, adding
v117:1 not intersect with v569:0, removed
v117:2 intersect with v569:0, adding
v117:1 not intersect with v544:0, removed
v117:2 intersect with v544:0, adding
v117:1 not intersect with v380:0, removed
v117:2 intersect with v380:0, adding
v117:1 not intersect with v389:0, removed
v117:2 intersect with v389:0, adding
v117:1 not intersect with v558:0, removed
v117:2 intersect with v558:0, adding
v117:1 not intersect with v440:0, removed
v117:2 intersect with v440:0, adding
v117:1 not intersect with v444:0, removed
v117:2 intersect with v444:0, adding
v117:1 not intersect with v508:0, removed
v117:2 intersect with v508:0, adding
assign rcx to v117:1
assign 1 to v117:1
v392:1 not intersect with v389:0, removed
v392:2 intersect with v389:0, adding
assign rsi to v392:1
assign 6 to v392:1
assign rdi to v626:0
assign 7 to v626:0
assign rax to v628:0
assign 0 to v628:0
assign rax to v600:0
assign 0 to v600:0
blocking v329 pick register r9
assign r9 to v329:1
assign 9 to v329:1
assign r15 to v624:0
assign 15 to v624:0
assign rdi to v625:0
assign 7 to v625:0
assign rdi to v597:0
assign 7 to v597:0
blocking v116 pick register r9
assign r9 to v116:1
assign 9 to v116:1
v329:1 not intersect with v362:0, removed
v329:1 not intersect with v497:0, removed
v329:1 not intersect with v547:0, removed
v329:1 not intersect with v443:0, removed
v329:1 not intersect with v321:0, removed
v329:3 intersect with v600:0, adding
blocking v622 pick register r9
assign r9 to v622:0
assign 9 to v622:0
v116:1 not intersect with v154:0, removed
v116:1 not intersect with v153:0, removed
v116:1 not intersect with v36:0, removed
v116:1 not intersect with v358:0, removed
v116:1 not intersect with v494:0, removed
v116:1 not intersect with v440:0, removed
v116:1 not intersect with v544:0, removed
v116:1 not intersect with v148:0, removed
v116:3 intersect with v597:0, adding
assign r15 to v623:0
assign 15 to v623:0
assign r15 to v619:0
assign 15 to v619:0
blocking v123 pick register rdx
assign rdx to v123:1
assign 2 to v123:1
blocking v617 pick register rsi
assign rsi to v617:0
assign 6 to v617:0
assign r9 to v621:0
assign 9 to v621:0
assign r9 to v618:0
assign 9 to v618:0
assign r8 to v80:8
assign 8 to v80:8
assign r9 to v615:0
assign 9 to v615:0
assign r15 to v616:0
assign 15 to v616:0
assign r15 to v612:0
assign 15 to v612:0
assign rsi to v610:0
assign 6 to v610:0
assign r9 to v614:0
assign 9 to v614:0
assign r9 to v611:0
assign 9 to v611:0
assign r9 to v607:0
assign 9 to v607:0
assign r15 to v609:0
assign 15 to v609:0
assign r15 to v602:0
assign 15 to v602:0
assign rsi to v608:0
assign 6 to v608:0
assign r9 to v606:0
assign 9 to v606:0
assign r9 to v601:0
assign 9 to v601:0
assign r12 to v595:3
assign 12 to v595:3
assign r9 to v596:0
assign 9 to v596:0
assign r15 to v599:0
assign 15 to v599:0
assign r15 to v598:0
assign 15 to v598:0
assign rax to v346:1
assign 0 to v346:1
assign r15 to v0:4
assign 15 to v0:4
assign rsi to v108:1
assign 6 to v108:1
assign rdi to v359:1
assign 7 to v359:1
assign r9 to v346:2
assign 9 to v346:2
blocking v392 pick register r8
blocking v120 pick register r8
blocking v132 pick register r8
blocking v110 pick register r8
blocking v117 pick register r8
blocking v329 pick register r8
blocking v116 pick register r8
blocking v123 pick register r8
blocking v80 pick register r8
blocking v346 pick register r8
blocking v0 pick register r8
blocking v401 pick register r8
v541:0 not intersect with v4:3, removed
assign rax to v541:0
assign 0 to v541:0
assign rsi to v4:13
assign 6 to v4:13
assign r8 to v588:0
assign 8 to v588:0
assign r9 to v589:0
assign 9 to v589:0
v540:0 not intersect with v4:3, removed
v540:1 intersect with v542:0, adding
assign r8 to v540:0
assign 8 to v540:0
assign r9 to v587:0
assign 9 to v587:0
assign r9 to v586:0
assign 9 to v586:0
assign r11 to v585:1
assign 11 to v585:1
v542:0 not intersect with v540:1, removed
v542:1 intersect with v540:1, adding
assign r9 to v542:0
assign 9 to v542:0
v484:1 not intersect with v482:0, removed
v484:1 not intersect with v534:0, removed
v484:2 intersect with v534:0, adding
assign r11 to v484:1
assign 11 to v484:1
assign r12 to v584:0
assign 12 to v584:0
v483:1 not intersect with v482:0, removed
v483:2 intersect with v482:0, adding
v483:1 not intersect with v534:0, removed
v483:2 intersect with v534:0, adding
assign rdx to v483:1
assign 2 to v483:1
v481:1 not intersect with v482:0, removed
v481:2 intersect with v482:0, adding
v481:1 not intersect with v534:0, removed
v481:2 intersect with v534:0, adding
assign rcx to v481:1
assign 1 to v481:1
assign r12 to v120:6
assign 12 to v120:6
assign r14 to v579:0
assign 14 to v579:0
assign r15 to v583:0
assign 15 to v583:0
assign rbx to v132:5
assign 3 to v132:5
assign r14 to v479:1
assign 14 to v479:1
assign r15 to v483:3
assign 15 to v483:3
blocking v542 pick register r9
blocking v120 pick register r12
assign rax to v582:0
assign 0 to v582:0
assign r14 to v580:0
assign 14 to v580:0
assign rbx to v132:8
assign 3 to v132:8
assign r12 to v120:10
assign 12 to v120:10
assign rcx to v481:4
assign 1 to v481:4
assign rdx to v483:5
assign 2 to v483:5
assign r11 to v484:4
assign 11 to v484:4
assign r9 to v542:4
assign 9 to v542:4
assign r8 to v540:3
assign 8 to v540:3
assign rsi to v4:16
assign 6 to v4:16
assign rax to v541:3
assign 0 to v541:3
assign r14 to v578:0
assign 14 to v578:0
assign r15 to v575:0
assign 15 to v575:0
assign r12 to v120:9
assign 12 to v120:9
assign r14 to v577:0
assign 14 to v577:0
assign r14 to v570:0
assign 14 to v570:0
assign rdi to v110:4
assign 7 to v110:4
blocking v117 pick register r8
assign r8 to v117:3
assign 8 to v117:3
blocking v576 pick register rax
assign rax to v576:1
assign 0 to v576:1
assign rax to v572:0
assign 0 to v572:0
assign r15 to v574:0
assign 15 to v574:0
assign r15 to v569:0
assign 15 to v569:0
blocking v573 pick register rdx
assign rdx to v573:1
assign 2 to v573:1
assign rdx to v568:0
assign 2 to v568:0
assign rax to v571:0
assign 0 to v571:0
assign rax to v547:0
assign 0 to v547:0
blocking v329 pick register r11
assign r11 to v329:4
assign 11 to v329:4
assign r14 to v566:0
assign 14 to v566:0
assign r15 to v567:0
assign 15 to v567:0
assign r15 to v544:0
assign 15 to v544:0
assign rdx to v116:4
assign 2 to v116:4
blocking v564 pick register rdx
assign rdx to v564:0
assign 2 to v564:0
assign r14 to v565:0
assign 14 to v565:0
assign r14 to v559:0
assign 14 to v559:0
blocking v123 pick register r11
assign r11 to v123:3
assign 11 to v123:3
blocking v557 pick register rcx
assign rcx to v557:0
assign 1 to v557:0
assign rdx to v563:0
assign 2 to v563:0
assign rdx to v558:0
assign 2 to v558:0
blocking v80 pick register rbx
assign rbx to v80:10
assign 3 to v80:10
assign r14 to v554:0
assign 14 to v554:0
assign rdx to v556:0
assign 2 to v556:0
assign rdx to v549:0
assign 2 to v549:0
assign rcx to v555:0
assign 1 to v555:0
assign r14 to v553:0
assign 14 to v553:0
assign r14 to v548:0
assign 14 to v548:0
assign r9 to v542:3
assign 9 to v542:3
assign r14 to v543:0
assign 14 to v543:0
assign rax to v546:0
assign 0 to v546:0
assign rax to v545:0
assign 0 to v545:0
assign rdx to v346:4
assign 2 to v346:4
assign rax to v0:6
assign 0 to v0:6
assign r14 to v4:14
assign 14 to v4:14
assign r15 to v541:1
assign 15 to v541:1
assign rcx to v110:5
assign 1 to v110:5
blocking v0 pick register r8
blocking v4 pick register r8
blocking v484 pick register r8
blocking v483 pick register r8
blocking v481 pick register r8
blocking v120 pick register r8
blocking v132 pick register r8
blocking v110 pick register r8
blocking v117 pick register r8
blocking v329 pick register r8
blocking v116 pick register r8
blocking v123 pick register r8
blocking v80 pick register r8
blocking v346 pick register r8
v491:0 not intersect with v4:3, removed
assign rax to v491:0
assign 0 to v491:0
assign rsi to v4:18
assign 6 to v4:18
assign r8 to v538:0
assign 8 to v538:0
assign r9 to v539:0
assign 9 to v539:0
v490:0 not intersect with v4:3, removed
v490:1 intersect with v492:0, adding
assign r8 to v490:0
assign 8 to v490:0
assign r9 to v537:0
assign 9 to v537:0
assign r9 to v536:0
assign 9 to v536:0
assign r11 to v535:1
assign 11 to v535:1
v492:0 not intersect with v490:1, removed
v492:1 intersect with v490:1, adding
assign r9 to v492:0
assign 9 to v492:0
assign r11 to v484:6
assign 11 to v484:6
assign r12 to v534:0
assign 12 to v534:0
assign r14 to v483:7
assign 14 to v483:7
assign r15 to v481:6
assign 15 to v481:6
assign r12 to v120:11
assign 12 to v120:11
assign rbx to v529:0
assign 3 to v529:0
assign rdx to v533:0
assign 2 to v533:0
assign rcx to v132:10
assign 1 to v132:10
blocking v492 pick register r9
blocking v120 pick register r12
assign rax to v532:0
assign 0 to v532:0
assign r8 to v530:0
assign 8 to v530:0
assign rcx to v132:13
assign 1 to v132:13
assign r12 to v120:15
assign 12 to v120:15
assign r15 to v481:9
assign 15 to v481:9
assign r14 to v483:10
assign 14 to v483:10
assign r11 to v484:9
assign 11 to v484:9
assign r9 to v492:4
assign 9 to v492:4
assign r8 to v490:3
assign 8 to v490:3
assign rsi to v4:21
assign 6 to v4:21
assign rax to v491:3
assign 0 to v491:3
assign rbx to v528:0
assign 3 to v528:0
assign rdx to v525:0
assign 2 to v525:0
assign r12 to v120:14
assign 12 to v120:14
assign rdi to v527:0
assign 7 to v527:0
assign rdi to v520:0
assign 7 to v520:0
assign rbx to v110:7
assign 3 to v110:7
blocking v117 pick register r8
assign r8 to v117:5
assign 8 to v117:5
blocking v526 pick register r14
assign r14 to v526:1
assign 14 to v526:1
assign r14 to v522:0
assign 14 to v522:0
assign rdx to v524:0
assign 2 to v524:0
assign rdx to v519:0
assign 2 to v519:0
blocking v523 pick register r15
assign r15 to v523:1
assign 15 to v523:1
assign r15 to v518:0
assign 15 to v518:0
assign r14 to v521:0
assign 14 to v521:0
assign r14 to v497:0
assign 14 to v497:0
blocking v329 pick register r11
assign r11 to v329:7
assign 11 to v329:7
assign rdx to v516:0
assign 2 to v516:0
assign r15 to v517:0
assign 15 to v517:0
assign r15 to v494:0
assign 15 to v494:0
assign rdi to v116:7
assign 7 to v116:7
blocking v514 pick register rax
assign rax to v514:0
assign 0 to v514:0
assign rdx to v515:0
assign 2 to v515:0
assign rdx to v509:0
assign 2 to v509:0
blocking v123 pick register r11
assign r11 to v123:5
assign 11 to v123:5
blocking v507 pick register rcx
assign rcx to v507:0
assign 1 to v507:0
assign rax to v513:0
assign 0 to v513:0
assign rax to v508:0
assign 0 to v508:0
blocking v80 pick register rbx
assign rbx to v80:12
assign 3 to v80:12
assign rax to v504:0
assign 0 to v504:0
assign rdx to v506:0
assign 2 to v506:0
assign rdx to v499:0
assign 2 to v499:0
assign rcx to v505:0
assign 1 to v505:0
assign rax to v503:0
assign 0 to v503:0
assign rax to v498:0
assign 0 to v498:0
assign r9 to v492:3
assign 9 to v492:3
assign r14 to v493:0
assign 14 to v493:0
assign rax to v496:0
assign 0 to v496:0
assign rax to v495:0
assign 0 to v495:0
assign rdx to v346:6
assign 2 to v346:6
assign rax to v0:8
assign 0 to v0:8
assign r14 to v4:19
assign 14 to v4:19
assign r15 to v491:1
assign 15 to v491:1
assign rcx to v116:8
assign 1 to v116:8
blocking v0 pick register r8
blocking v4 pick register r8
blocking v484 pick register r8
blocking v483 pick register r8
blocking v481 pick register r8
blocking v120 pick register r8
blocking v132 pick register r8
blocking v110 pick register r8
blocking v117 pick register r8
blocking v329 pick register r8
blocking v116 pick register r8
blocking v123 pick register r8
blocking v80 pick register r8
blocking v346 pick register r8
v437:0 not intersect with v4:3, removed
assign rax to v437:0
assign 0 to v437:0
assign rsi to v4:23
assign 6 to v4:23
assign r8 to v488:0
assign 8 to v488:0
assign r9 to v489:0
assign 9 to v489:0
v436:0 not intersect with v4:3, removed
v436:1 intersect with v438:0, adding
assign r8 to v436:0
assign 8 to v436:0
assign r9 to v487:0
assign 9 to v487:0
assign r9 to v486:0
assign 9 to v486:0
assign r11 to v485:1
assign 11 to v485:1
v438:0 not intersect with v436:1, removed
v438:1 intersect with v436:1, adding
assign r9 to v438:0
assign 9 to v438:0
assign r11 to v484:11
assign 11 to v484:11
assign r12 to v482:0
assign 12 to v482:0
assign r11 to v483:12
assign 11 to v483:12
assign r11 to v481:11
assign 11 to v481:11
assign r11 to v120:16
assign 11 to v120:16
assign r12 to v475:0
assign 12 to v475:0
assign rdx to v480:0
assign 2 to v480:0
assign r14 to v132:15
assign 14 to v132:15
blocking v438 pick register r9
blocking v120 pick register r11
assign rax to v478:0
assign 0 to v478:0
assign r12 to v476:0
assign 12 to v476:0
assign r14 to v132:18
assign 14 to v132:18
assign r11 to v120:20
assign 11 to v120:20
assign r9 to v438:4
assign 9 to v438:4
assign r8 to v436:3
assign 8 to v436:3
assign rsi to v4:26
assign 6 to v4:26
assign rax to v437:3
assign 0 to v437:3
assign r12 to v474:0
assign 12 to v474:0
assign rdx to v471:0
assign 2 to v471:0
assign r11 to v120:19
assign 11 to v120:19
assign r12 to v473:0
assign 12 to v473:0
assign r12 to v466:0
assign 12 to v466:0
assign r15 to v110:10
assign 15 to v110:10
assign rbx to v117:7
assign 3 to v117:7
assign rcx to v472:1
assign 1 to v472:1
assign rcx to v468:0
assign 1 to v468:0
assign rdx to v470:0
assign 2 to v470:0
assign rdx to v465:0
assign 2 to v465:0
assign rdi to v469:1
assign 7 to v469:1
assign rdi to v464:0
assign 7 to v464:0
assign rcx to v467:0
assign 1 to v467:0
assign rcx to v443:0
assign 1 to v443:0
blocking v329 pick register r8
assign r8 to v329:10
assign 8 to v329:10
assign r12 to v462:0
assign 12 to v462:0
assign rdx to v463:0
assign 2 to v463:0
assign rdx to v440:0
assign 2 to v440:0
assign rdi to v116:10
assign 7 to v116:10
blocking v460 pick register r8
assign r8 to v460:0
assign 8 to v460:0
assign r12 to v461:0
assign 12 to v461:0
assign r12 to v455:0
assign 12 to v455:0
blocking v123 pick register r14
assign r14 to v123:7
assign 14 to v123:7
blocking v453 pick register r15
assign r15 to v453:0
assign 15 to v453:0
assign r8 to v459:0
assign 8 to v459:0
assign r8 to v454:0
assign 8 to v454:0
blocking v80 pick register rax
assign rax to v80:14
assign 0 to v80:14
assign r8 to v450:0
assign 8 to v450:0
assign r12 to v452:0
assign 12 to v452:0
assign r12 to v445:0
assign 12 to v445:0
assign r15 to v451:0
assign 15 to v451:0
assign r8 to v449:0
assign 8 to v449:0
assign r8 to v444:0
assign 8 to v444:0
assign r9 to v438:3
assign 9 to v438:3
assign r8 to v439:0
assign 8 to v439:0
assign r12 to v442:0
assign 12 to v442:0
assign r12 to v441:0
assign 12 to v441:0
assign r15 to v346:8
assign 15 to v346:8
assign r12 to v0:10
assign 12 to v0:10
assign rax to v80:15
assign 0 to v80:15
assign r8 to v4:24
assign 8 to v4:24
assign rdx to v437:1
assign 2 to v437:1
assign rcx to v80:16
assign 1 to v80:16
blocking v116 pick register r8
blocking v4 pick register r8
blocking v80 pick register r8
blocking v120 pick register r8
blocking v132 pick register r8
blocking v110 pick register r8
blocking v117 pick register r8
blocking v329 pick register r8
blocking v123 pick register r8
blocking v346 pick register r8
blocking v0 pick register r8
v352:0 not intersect with v4:3, removed
assign rax to v352:0
assign 0 to v352:0
assign rsi to v4:28
assign 6 to v4:28
assign r8 to v434:0
assign 8 to v434:0
assign r9 to v435:0
assign 9 to v435:0
v351:0 not intersect with v4:3, removed
v351:0 not intersect with v356:0, removed
v351:1 intersect with v356:0, adding
v351:0 not intersect with v402:0, removed
v351:1 intersect with v402:0, adding
v351:0 not intersect with v404:0, removed
v351:1 intersect with v404:0, adding
assign r8 to v351:0
assign 8 to v351:0
assign r9 to v432:0
assign 9 to v432:0
assign r11 to v146:8
assign 11 to v146:8
assign r12 to v430:0
assign 12 to v430:0
assign r14 to v433:0
assign 14 to v433:0
assign r14 to v431:0
assign 14 to v431:0
assign rdx to v428:0
assign 2 to v428:0
assign r9 to v429:1
assign 9 to v429:1
assign r9 to v4:29
assign 9 to v4:29
assign r12 to v352:1
assign 12 to v352:1
blocking v4 pick register r8
blocking v351 pick register r8
blocking v146 pick register r8
assign rax to v422:0
assign 0 to v422:0
assign r8 to v80:18
assign 8 to v80:18
assign r9 to v425:0
assign 9 to v425:0
assign r12 to v427:0
assign 12 to v427:0
assign r12 to v426:0
assign 12 to v426:0
assign rsi to v4:31
assign 6 to v4:31
assign r9 to v424:0
assign 9 to v424:0
assign r11 to v146:10
assign 11 to v146:10
assign r12 to v420:0
assign 12 to v420:0
assign r9 to v423:0
assign 9 to v423:0
assign r9 to v421:0
assign 9 to v421:0
assign rdx to v418:0
assign 2 to v418:0
assign rax to v419:1
assign 0 to v419:1
assign r9 to v4:32
assign 9 to v4:32
blocking v4 pick register r8
blocking v80 pick register r8
blocking v146 pick register r8
assign rax to v412:0
assign 0 to v412:0
assign r8 to v80:20
assign 8 to v80:20
assign r9 to v415:0
assign 9 to v415:0
assign r12 to v417:0
assign 12 to v417:0
assign r12 to v416:0
assign 12 to v416:0
assign rsi to v4:34
assign 6 to v4:34
assign r9 to v414:0
assign 9 to v414:0
assign r11 to v146:12
assign 11 to v146:12
assign r12 to v410:0
assign 12 to v410:0
assign r9 to v413:0
assign 9 to v413:0
assign r9 to v411:0
assign 9 to v411:0
assign rdx to v408:0
assign 2 to v408:0
assign rax to v409:1
assign 0 to v409:1
assign r9 to v4:35
assign 9 to v4:35
blocking v4 pick register r8
blocking v80 pick register r8
blocking v146 pick register r8
assign rax to v403:0
assign 0 to v403:0
assign r8 to v80:22
assign 8 to v80:22
assign r9 to v405:0
assign 9 to v405:0
assign r12 to v407:0
assign 12 to v407:0
assign r12 to v406:0
assign 12 to v406:0
assign r9 to v351:2
assign 9 to v351:2
assign r12 to v404:0
assign 12 to v404:0
assign r12 to v402:0
assign 12 to v402:0
assign r11 to v401:5
assign 11 to v401:5
v356:0 not intersect with v351:1, removed
assign r12 to v356:0
assign 12 to v356:0
assign r11 to v120:21
assign 11 to v120:21
assign r14 to v395:0
assign 14 to v395:0
assign r15 to v400:0
assign 15 to v400:0
assign rax to v132:20
assign 0 to v132:20
blocking v80 pick register r8
blocking v120 pick register r11
blocking v356 pick register r12
assign rax to v398:0
assign 0 to v398:0
assign r14 to v396:0
assign 14 to v396:0
assign rax to v132:23
assign 0 to v132:23
assign r11 to v120:25
assign 11 to v120:25
assign r12 to v356:4
assign 12 to v356:4
assign r9 to v351:5
assign 9 to v351:5
assign r8 to v80:26
assign 8 to v80:26
assign r14 to v394:0
assign 14 to v394:0
assign r15 to v391:0
assign 15 to v391:0
assign r11 to v120:24
assign 11 to v120:24
assign r14 to v393:0
assign 14 to v393:0
assign r14 to v389:0
assign 14 to v389:0
assign rbx to v110:13
assign 3 to v110:13
assign rdx to v117:9
assign 2 to v117:9
assign rcx to v392:4
assign 1 to v392:4
assign rcx to v388:0
assign 1 to v388:0
assign r15 to v390:0
assign 15 to v390:0
assign r15 to v362:0
assign 15 to v362:0
assign rsi to v329:13
assign 6 to v329:13
assign r14 to v386:0
assign 14 to v386:0
assign rcx to v387:0
assign 1 to v387:0
assign rcx to v358:0
assign 1 to v358:0
assign rdi to v116:12
assign 7 to v116:12
blocking v384 pick register r9
assign r9 to v384:0
assign 9 to v384:0
assign r14 to v385:0
assign 14 to v385:0
assign r14 to v381:0
assign 14 to v381:0
blocking v123 pick register rax
assign rax to v123:9
assign 0 to v123:9
blocking v379 pick register rsi
assign rsi to v379:0
assign 6 to v379:0
assign r9 to v383:0
assign 9 to v383:0
assign r9 to v380:0
assign 9 to v380:0
assign r8 to v80:25
assign 8 to v80:25
assign r9 to v377:0
assign 9 to v377:0
assign r14 to v378:0
assign 14 to v378:0
assign r14 to v374:0
assign 14 to v374:0
assign rsi to v372:0
assign 6 to v372:0
assign r9 to v376:0
assign 9 to v376:0
assign r9 to v373:0
assign 9 to v373:0
assign r9 to v367:0
assign 9 to v367:0
assign r14 to v371:0
assign 14 to v371:0
assign r14 to v364:0
assign 14 to v364:0
assign rsi to v368:0
assign 6 to v368:0
assign r9 to v366:0
assign 9 to v366:0
assign r9 to v363:0
assign 9 to v363:0
assign r12 to v356:3
assign 12 to v356:3
assign r9 to v357:0
assign 9 to v357:0
assign r14 to v361:0
assign 14 to v361:0
assign r14 to v360:0
assign 14 to v360:0
assign r15 to v346:10
assign 15 to v346:10
assign r14 to v0:12
assign 14 to v0:12
assign rax to v123:10
assign 0 to v123:10
assign r9 to v132:21
assign 9 to v132:21
assign rcx to v329:14
assign 1 to v329:14
blocking v116 pick register r8
blocking v123 pick register r8
blocking v346 pick register r8
blocking v120 pick register r8
blocking v132 pick register r8
blocking v80 pick register r8
blocking v117 pick register r8
blocking v329 pick register r8
blocking v110 pick register r8
blocking v0 pick register r8
assign rax to v153:0
assign 0 to v153:0
assign rsi to v4:37
assign 6 to v4:37
assign r8 to v349:0
assign 8 to v349:0
assign r9 to v350:0
assign 9 to v350:0
assign r8 to v152:0
assign 8 to v152:0
assign r9 to v154:0
assign 9 to v154:0
assign r12 to v348:0
assign 12 to v348:0
assign r12 to v347:0
assign 12 to v347:0
assign r11 to v346:12
assign 11 to v346:12
assign r12 to v155:0
assign 12 to v155:0
assign r11 to v120:26
assign 11 to v120:26
assign r14 to v340:0
assign 14 to v340:0
assign r15 to v345:0
assign 15 to v345:0
assign rbx to v132:26
assign 3 to v132:26
assign rdx to v344:1
assign 2 to v344:1
blocking v153 pick register rax
blocking v4 pick register rsi
blocking v154 pick register r9
blocking v120 pick register r11
assign rax to v343:0
assign 0 to v343:0
assign r14 to v341:0
assign 14 to v341:0
assign rbx to v132:29
assign 3 to v132:29
assign r11 to v120:30
assign 11 to v120:30
assign r12 to v155:2
assign 12 to v155:2
assign r9 to v154:3
assign 9 to v154:3
assign r8 to v152:2
assign 8 to v152:2
assign rsi to v4:41
assign 6 to v4:41
assign rax to v153:3
assign 0 to v153:3
assign r14 to v339:0
assign 14 to v339:0
assign r15 to v337:0
assign 15 to v337:0
assign r11 to v120:29
assign 11 to v120:29
assign r14 to v338:0
assign 14 to v338:0
assign r14 to v328:0
assign 14 to v328:0
assign rdx to v80:27
assign 2 to v80:27
assign rcx to v117:11
assign 1 to v117:11
assign rdi to v335:0
assign 7 to v335:0
assign r15 to v336:0
assign 15 to v336:0
assign r15 to v327:0
assign 15 to v327:0
blocking v333 pick register r8
assign r8 to v333:0
assign 8 to v333:0
assign rdi to v334:0
assign 7 to v334:0
assign rdi to v326:0
assign 7 to v326:0
blocking v331 pick register r12
assign r12 to v331:0
assign 12 to v331:0
assign r8 to v332:0
assign 8 to v332:0
assign r8 to v325:0
assign 8 to v325:0
blocking v323 pick register rdx
assign rdx to v323:0
assign 2 to v323:0
assign r12 to v330:0
assign 12 to v330:0
blocking v321 pick register rsi
assign rsi to v321:0
assign 6 to v321:0
assign r12 to v329:17
assign 12 to v329:17
assign r8 to v324:0
assign 8 to v324:0
assign r8 to v322:0
assign 8 to v322:0
assign r8 to v148:0
assign 8 to v148:0
assign r12 to v116:14
assign 12 to v116:14
assign rax to v153:2
assign 0 to v153:2
assign r9 to v154:2
assign 9 to v154:2
assign r14 to v159:0
assign 14 to v159:0
assign r15 to v110:15
assign 15 to v110:15
assign rdx to v80:30
assign 2 to v80:30
assign rsi to v107:1
assign 6 to v107:1
assign rdi to v268:1
assign 7 to v268:1
blocking v318 pick register rcx
assign rcx to v318:0
assign 1 to v318:0
blocking v320 pick register rdi
assign rdi to v320:0
assign 7 to v320:0
assign rdi to v319:0
assign 7 to v319:0
assign rcx to v264:0
assign 1 to v264:0
assign rdi to v290:0
assign 7 to v290:0
blocking v317 pick register r8
assign r8 to v317:0
assign 8 to v317:0
v148:0 not intersect with v4:3, removed
v148:0 not intersect with v117:2, removed
v148:0 not intersect with v243:0, removed
v148:1 intersect with v243:0, adding
v148:0 not intersect with v241:0, removed
v148:1 intersect with v241:0, adding
assign r8 to v316:0
assign 8 to v316:0
assign r8 to v313:0
assign 8 to v313:0
blocking v153 pick register r8
blocking v264 pick register rcx
blocking v80 pick register rdx
blocking v290 pick register rdi
blocking v313 pick register r8
blocking v154 pick register r9
blocking v116 pick register r12
blocking v159 pick register r14
blocking v110 pick register r15
assign r8 to v313:3
assign 8 to v313:3
assign rdi to v290:3
assign 7 to v290:3
assign rcx to v264:3
assign 1 to v264:3
assign rsi to v107:4
assign 6 to v107:4
assign rdx to v80:33
assign 2 to v80:33
assign r15 to v110:19
assign 15 to v110:19
assign r14 to v159:3
assign 14 to v159:3
assign r9 to v154:6
assign 9 to v154:6
assign rax to v153:6
assign 0 to v153:6
assign r12 to v116:18
assign 12 to v116:18
assign r11 to v120:32
assign 11 to v120:32
assign rbx to v132:31
assign 3 to v132:31
assign rdx to v80:32
assign 2 to v80:32
assign r8 to v313:2
assign 8 to v313:2
blocking v297 pick register rax
assign rax to v297:0
assign 0 to v297:0
assign r8 to v312:0
assign 8 to v312:0
assign r8 to v298:0
assign 8 to v298:0
assign r9 to v154:5
assign 9 to v154:5
assign r12 to v116:17
assign 12 to v116:17
blocking v282 pick register r12
assign r12 to v282:0
assign 12 to v282:0
blocking v311 pick register rcx
assign rcx to v311:0
assign 1 to v311:0
assign rcx to v283:0
assign 1 to v283:0
blocking v308 pick register r9
assign r9 to v308:0
assign 9 to v308:0
assign r15 to v110:18
assign 15 to v110:18
blocking v297 pick register r8
blocking v80 pick register rdx
blocking v308 pick register r9
blocking v282 pick register r12
blocking v110 pick register r15
assign r15 to v110:22
assign 15 to v110:22
assign r9 to v308:3
assign 9 to v308:3
assign rcx to v283:2
assign 1 to v283:2
assign r8 to v298:2
assign 8 to v298:2
assign rax to v297:3
assign 0 to v297:3
assign r12 to v282:3
assign 12 to v282:3
assign rdx to v80:36
assign 2 to v80:36
assign rbx to v132:33
assign 3 to v132:33
assign r11 to v120:34
assign 11 to v120:34
assign r14 to v159:5
assign 14 to v159:5
assign rsi to v107:6
assign 6 to v107:6
assign rdi to v290:5
assign 7 to v290:5
assign rdx to v80:35
assign 2 to v80:35
assign r9 to v308:2
assign 9 to v308:2
blocking v305 pick register r14
assign r14 to v305:0
assign 14 to v305:0
assign r9 to v307:0
assign 9 to v307:0
assign r9 to v306:0
assign 9 to v306:0
assign rax to v297:2
assign 0 to v297:2
assign r12 to v282:2
assign 12 to v282:2
assign r9 to v302:0
assign 9 to v302:0
assign r15 to v110:21
assign 15 to v110:21
assign r14 to v304:1
assign 14 to v304:1
assign r14 to v297:4
assign 14 to v297:4
blocking v80 pick register rdx
blocking v302 pick register r9
blocking v282 pick register r12
blocking v110 pick register r15
blocking v297 pick register r8
assign r15 to v110:25
assign 15 to v110:25
assign r9 to v302:3
assign 9 to v302:3
assign rax to v297:7
assign 0 to v297:7
assign r12 to v282:6
assign 12 to v282:6
assign rdx to v80:39
assign 2 to v80:39
assign rdi to v290:7
assign 7 to v290:7
assign rsi to v107:8
assign 6 to v107:8
assign r11 to v120:36
assign 11 to v120:36
assign rbx to v132:35
assign 3 to v132:35
assign r8 to v298:4
assign 8 to v298:4
assign rcx to v283:4
assign 1 to v283:4
assign rdx to v80:38
assign 2 to v80:38
assign r9 to v302:2
assign 9 to v302:2
assign r14 to v299:0
assign 14 to v299:0
assign r9 to v301:0
assign 9 to v301:0
assign r9 to v300:0
assign 9 to v300:0
assign r8 to v297:6
assign 8 to v297:6
assign r12 to v282:5
assign 12 to v282:5
assign r8 to v294:0
assign 8 to v294:0
assign r15 to v110:24
assign 15 to v110:24
assign r9 to v296:1
assign 9 to v296:1
assign r9 to v132:36
assign 9 to v132:36
assign r14 to v107:9
assign 14 to v107:9
blocking v80 pick register rdx
blocking v294 pick register r8
blocking v282 pick register r12
blocking v110 pick register r15
assign r15 to v110:28
assign 15 to v110:28
assign r8 to v294:3
assign 8 to v294:3
assign r12 to v282:9
assign 12 to v282:9
assign rdx to v80:42
assign 2 to v80:42
assign rcx to v283:6
assign 1 to v283:6
assign rbx to v132:38
assign 3 to v132:38
assign r11 to v120:38
assign 11 to v120:38
assign rsi to v107:11
assign 6 to v107:11
assign rdi to v290:9
assign 7 to v290:9
assign rdx to v80:41
assign 2 to v80:41
assign r8 to v294:2
assign 8 to v294:2
assign r9 to v291:0
assign 9 to v291:0
assign r8 to v293:0
assign 8 to v293:0
assign r8 to v292:0
assign 8 to v292:0
assign rdi to v290:2
assign 7 to v290:2
assign r14 to v159:2
assign 14 to v159:2
assign r8 to v287:0
assign 8 to v287:0
assign r15 to v110:27
assign 15 to v110:27
assign r9 to v289:1
assign 9 to v289:1
assign r9 to v132:39
assign 9 to v132:39
assign rdi to v107:12
assign 7 to v107:12
blocking v80 pick register rdx
blocking v287 pick register r8
blocking v159 pick register r14
blocking v110 pick register r15
assign r15 to v110:31
assign 15 to v110:31
assign r8 to v287:3
assign 8 to v287:3
assign r14 to v159:9
assign 14 to v159:9
assign rsi to v107:14
assign 6 to v107:14
assign r11 to v120:40
assign 11 to v120:40
assign rbx to v132:41
assign 3 to v132:41
assign rcx to v283:8
assign 1 to v283:8
assign rdx to v80:45
assign 2 to v80:45
assign r12 to v282:11
assign 12 to v282:11
assign rdx to v80:44
assign 2 to v80:44
assign r8 to v287:2
assign 8 to v287:2
assign r9 to v284:0
assign 9 to v284:0
assign r8 to v286:0
assign 8 to v286:0
assign r8 to v285:0
assign 8 to v285:0
assign r12 to v282:8
assign 12 to v282:8
assign r8 to v279:0
assign 8 to v279:0
assign r15 to v110:30
assign 15 to v110:30
assign r9 to v281:1
assign 9 to v281:1
assign r9 to v132:42
assign 9 to v132:42
assign r12 to v107:15
assign 12 to v107:15
blocking v80 pick register rdx
blocking v279 pick register r8
blocking v110 pick register r15
assign r15 to v110:34
assign 15 to v110:34
assign r8 to v279:3
assign 8 to v279:3
assign rdx to v80:48
assign 2 to v80:48
assign rbx to v132:44
assign 3 to v132:44
assign r11 to v120:42
assign 11 to v120:42
assign rsi to v107:17
assign 6 to v107:17
assign r14 to v159:11
assign 14 to v159:11
assign rdx to v80:47
assign 2 to v80:47
assign r8 to v279:2
assign 8 to v279:2
assign r9 to v276:0
assign 9 to v276:0
assign r8 to v278:0
assign 8 to v278:0
assign r8 to v277:0
assign 8 to v277:0
assign rcx to v264:2
assign 1 to v264:2
assign r15 to v110:33
assign 15 to v110:33
assign r8 to v275:1
assign 8 to v275:1
assign r8 to v132:45
assign 8 to v132:45
assign r9 to v107:18
assign 9 to v107:18
blocking v264 pick register rcx
blocking v80 pick register rdx
blocking v110 pick register r15
assign r15 to v110:37
assign 15 to v110:37
assign rcx to v264:7
assign 1 to v264:7
assign rdx to v80:51
assign 2 to v80:51
assign r14 to v159:13
assign 14 to v159:13
assign rsi to v107:20
assign 6 to v107:20
assign r11 to v120:44
assign 11 to v120:44
assign rbx to v132:47
assign 3 to v132:47
assign rcx to v264:6
assign 1 to v264:6
assign rdx to v80:50
assign 2 to v80:50
assign r8 to v266:0
assign 8 to v266:0
assign r9 to v273:0
assign 9 to v273:0
assign r12 to v271:0
assign 12 to v271:0
assign r9 to v265:0
assign 9 to v265:0
assign rax to v272:0
assign 0 to v272:0
assign r12 to v270:0
assign 12 to v270:0
assign r8 to v269:1
assign 8 to v269:1
assign r8 to v132:48
assign 8 to v132:48
assign r12 to v107:21
assign 12 to v107:21
blocking v264 pick register rcx
blocking v80 pick register rdx
assign rax to v267:0
assign 0 to v267:0
assign r9 to v265:2
assign 9 to v265:2
assign rdx to v80:54
assign 2 to v80:54
assign rcx to v264:10
assign 1 to v264:10
assign rbx to v132:50
assign 3 to v132:50
assign r11 to v120:46
assign 11 to v120:46
assign rsi to v107:23
assign 6 to v107:23
assign r14 to v159:15
assign 14 to v159:15
assign r15 to v110:39
assign 15 to v110:39
assign r8 to v247:0
assign 8 to v247:0
assign rcx to v264:9
assign 1 to v264:9
assign r8 to v245:1
assign 8 to v245:1
assign r9 to v246:1
assign 9 to v246:1
assign r8 to v132:51
assign 8 to v132:51
assign r9 to v107:24
assign 9 to v107:24
assign r15 to v110:41
assign 15 to v110:41
assign r14 to v159:17
assign 14 to v159:17
assign rsi to v107:26
assign 6 to v107:26
assign r11 to v120:48
assign 11 to v120:48
assign rbx to v132:53
assign 3 to v132:53
assign rdx to v80:56
assign 2 to v80:56
assign rax to v153:5
assign 0 to v153:5
assign rdx to v80:53
assign 2 to v80:53
assign r14 to v159:8
assign 14 to v159:8
assign r15 to v110:36
assign 15 to v110:36
assign r8 to v185:0
assign 8 to v185:0
assign r9 to v148:2
assign 9 to v148:2
assign r12 to v154:8
assign 12 to v154:8
assign rcx to v241:0
assign 1 to v241:0
assign rdi to v243:0
assign 7 to v243:0
assign rdi to v242:0
assign 7 to v242:0
assign rcx to v182:0
assign 1 to v182:0
assign rdi to v212:0
assign 7 to v212:0
blocking v240 pick register r9
assign r9 to v240:0
assign 9 to v240:0
assign r9 to v239:0
assign 9 to v239:0
assign r9 to v236:0
assign 9 to v236:0
blocking v182 pick register rcx
blocking v80 pick register rdx
blocking v212 pick register rdi
blocking v185 pick register r8
blocking v236 pick register r9
blocking v154 pick register r12
blocking v159 pick register r14
blocking v110 pick register r15
assign r9 to v236:3
assign 9 to v236:3
assign rdi to v212:3
assign 7 to v212:3
assign rcx to v182:3
assign 1 to v182:3
assign r12 to v154:11
assign 12 to v154:11
assign r8 to v185:3
assign 8 to v185:3
assign r15 to v110:44
assign 15 to v110:44
assign r14 to v159:20
assign 14 to v159:20
assign rdx to v80:59
assign 2 to v80:59
assign rax to v153:9
assign 0 to v153:9
assign rbx to v132:55
assign 3 to v132:55
assign r11 to v120:50
assign 11 to v120:50
assign rsi to v107:28
assign 6 to v107:28
assign rdx to v80:58
assign 2 to v80:58
assign r9 to v236:2
assign 9 to v236:2
blocking v220 pick register rax
assign rax to v220:0
assign 0 to v220:0
assign r9 to v235:0
assign 9 to v235:0
assign r9 to v221:0
assign 9 to v221:0
assign r12 to v154:10
assign 12 to v154:10
blocking v204 pick register rcx
assign rcx to v204:0
assign 1 to v204:0
blocking v234 pick register r14
assign r14 to v234:0
assign 14 to v234:0
assign r14 to v205:0
assign 14 to v205:0
blocking v231 pick register r12
assign r12 to v231:0
assign 12 to v231:0
assign r15 to v110:43
assign 15 to v110:43
blocking v220 pick register r8
blocking v204 pick register rcx
blocking v80 pick register rdx
blocking v231 pick register r12
blocking v110 pick register r15
assign r15 to v110:47
assign 15 to v110:47
assign r12 to v231:3
assign 12 to v231:3
assign r14 to v205:2
assign 14 to v205:2
assign rcx to v204:3
assign 1 to v204:3
assign rax to v220:3
assign 0 to v220:3
assign rdx to v80:62
assign 2 to v80:62
assign rsi to v107:30
assign 6 to v107:30
assign r9 to v221:2
assign 9 to v221:2
assign r11 to v120:52
assign 11 to v120:52
assign rbx to v132:57
assign 3 to v132:57
assign r8 to v185:5
assign 8 to v185:5
assign rdi to v212:5
assign 7 to v212:5
assign rdx to v80:61
assign 2 to v80:61
assign r12 to v231:2
assign 12 to v231:2
blocking v228 pick register rdx
assign rdx to v228:0
assign 2 to v228:0
assign r12 to v230:0
assign 12 to v230:0
assign r12 to v229:0
assign 12 to v229:0
assign r8 to v185:2
assign 8 to v185:2
assign rax to v220:2
assign 0 to v220:2
assign rcx to v204:2
assign 1 to v204:2
assign r12 to v225:0
assign 12 to v225:0
assign r15 to v110:46
assign 15 to v110:46
assign rdx to v80:64
assign 2 to v80:64
blocking v220 pick register r8
blocking v204 pick register rcx
blocking v185 pick register r8
blocking v225 pick register r12
blocking v110 pick register r15
blocking v80 pick register r8
assign r15 to v110:50
assign 15 to v110:50
assign r12 to v225:3
assign 12 to v225:3
assign rcx to v204:6
assign 1 to v204:6
assign rax to v220:6
assign 0 to v220:6
assign r8 to v185:8
assign 8 to v185:8
assign rdi to v212:7
assign 7 to v212:7
assign rbx to v132:59
assign 3 to v132:59
assign r11 to v120:54
assign 11 to v120:54
assign r9 to v221:4
assign 9 to v221:4
assign rsi to v107:32
assign 6 to v107:32
assign r14 to v205:4
assign 14 to v205:4
assign r12 to v225:2
assign 12 to v225:2
assign rdx to v80:66
assign 2 to v80:66
blocking v222 pick register rdx
assign rdx to v222:0
assign 2 to v222:0
assign r12 to v224:0
assign 12 to v224:0
assign r12 to v223:0
assign 12 to v223:0
assign r8 to v185:7
assign 8 to v185:7
assign rax to v220:5
assign 0 to v220:5
assign rcx to v204:5
assign 1 to v204:5
assign r9 to v217:0
assign 9 to v217:0
assign r15 to v110:49
assign 15 to v110:49
assign r12 to v80:68
assign 12 to v80:68
assign rax to v219:1
assign 0 to v219:1
assign rdx to v132:60
assign 2 to v132:60
blocking v204 pick register rcx
blocking v185 pick register r8
blocking v217 pick register r9
blocking v110 pick register r15
blocking v80 pick register r8
assign r15 to v110:53
assign 15 to v110:53
assign r9 to v217:3
assign 9 to v217:3
assign rcx to v204:9
assign 1 to v204:9
assign r8 to v185:11
assign 8 to v185:11
assign r14 to v205:6
assign 14 to v205:6
assign rsi to v107:34
assign 6 to v107:34
assign r11 to v120:56
assign 11 to v120:56
assign rbx to v132:62
assign 3 to v132:62
assign rdi to v212:9
assign 7 to v212:9
assign r9 to v217:2
assign 9 to v217:2
assign r12 to v80:70
assign 12 to v80:70
assign rax to v214:0
assign 0 to v214:0
assign r9 to v216:0
assign 9 to v216:0
assign r9 to v215:0
assign 9 to v215:0
assign r8 to v185:10
assign 8 to v185:10
assign rdi to v212:2
assign 7 to v212:2
assign r9 to v159:19
assign 9 to v159:19
assign rax to v209:0
assign 0 to v209:0
assign r15 to v110:52
assign 15 to v110:52
assign rdx to v211:1
assign 2 to v211:1
assign rdx to v209:1
assign 2 to v209:1
assign rdi to v132:63
assign 7 to v132:63
blocking v185 pick register r8
blocking v159 pick register r9
blocking v80 pick register r12
blocking v110 pick register r15
blocking v209 pick register r8
assign r15 to v110:56
assign 15 to v110:56
assign rax to v209:4
assign 0 to v209:4
assign r9 to v159:24
assign 9 to v159:24
assign r8 to v185:14
assign 8 to v185:14
assign r12 to v80:73
assign 12 to v80:73
assign rbx to v132:65
assign 3 to v132:65
assign r11 to v120:58
assign 11 to v120:58
assign rsi to v107:36
assign 6 to v107:36
assign r14 to v205:8
assign 14 to v205:8
assign rcx to v204:11
assign 1 to v204:11
assign r12 to v80:72
assign 12 to v80:72
assign rax to v209:3
assign 0 to v209:3
assign rdx to v206:0
assign 2 to v206:0
assign rax to v208:0
assign 0 to v208:0
assign rax to v207:0
assign 0 to v207:0
assign rcx to v204:8
assign 1 to v204:8
assign r14 to v201:0
assign 14 to v201:0
assign r15 to v110:55
assign 15 to v110:55
assign rax to v203:1
assign 0 to v203:1
assign rdx to v132:66
assign 2 to v132:66
assign rcx to v107:37
assign 1 to v107:37
blocking v80 pick register r12
blocking v201 pick register r14
blocking v110 pick register r15
assign r15 to v110:59
assign 15 to v110:59
assign r14 to v201:3
assign 14 to v201:3
assign r12 to v80:76
assign 12 to v80:76
assign rsi to v107:39
assign 6 to v107:39
assign r11 to v120:60
assign 11 to v120:60
assign rbx to v132:68
assign 3 to v132:68
assign r8 to v185:16
assign 8 to v185:16
assign r9 to v159:26
assign 9 to v159:26
assign r12 to v80:75
assign 12 to v80:75
assign r14 to v201:2
assign 14 to v201:2
assign rax to v198:0
assign 0 to v198:0
assign r14 to v200:0
assign 14 to v200:0
assign r14 to v199:0
assign 14 to v199:0
assign r8 to v185:13
assign 8 to v185:13
assign rcx to v182:2
assign 1 to v182:2
assign r15 to v110:58
assign 15 to v110:58
assign r14 to v197:1
assign 14 to v197:1
assign r14 to v132:69
assign 14 to v132:69
assign rdx to v107:40
assign 2 to v107:40
blocking v182 pick register rcx
blocking v185 pick register r8
blocking v80 pick register r12
assign r15 to v110:61
assign 15 to v110:61
assign rcx to v182:7
assign 1 to v182:7
assign r8 to v185:19
assign 8 to v185:19
assign r12 to v80:79
assign 12 to v80:79
assign r9 to v159:28
assign 9 to v159:28
assign rbx to v132:71
assign 3 to v132:71
assign r11 to v120:62
assign 11 to v120:62
assign rsi to v107:42
assign 6 to v107:42
assign rcx to v182:6
assign 1 to v182:6
assign r12 to v80:78
assign 12 to v80:78
assign r14 to v187:0
assign 14 to v187:0
assign rax to v195:0
assign 0 to v195:0
assign rax to v186:0
assign 0 to v186:0
assign rdx to v194:0
assign 2 to v194:0
assign rdx to v192:0
assign 2 to v192:0
assign rdi to v193:0
assign 7 to v193:0
assign r8 to v185:18
assign 8 to v185:18
assign r14 to v191:0
assign 14 to v191:0
assign rdx to v190:1
assign 2 to v190:1
assign r14 to v186:1
assign 14 to v186:1
assign rdx to v132:72
assign 2 to v132:72
assign rdi to v107:43
assign 7 to v107:43
blocking v182 pick register rcx
blocking v185 pick register r8
assign rax to v188:0
assign 0 to v188:0
assign r8 to v185:22
assign 8 to v185:22
assign rax to v186:3
assign 0 to v186:3
assign r12 to v80:81
assign 12 to v80:81
assign rcx to v182:10
assign 1 to v182:10
assign rsi to v107:45
assign 6 to v107:45
assign r11 to v120:64
assign 11 to v120:64
assign rbx to v132:74
assign 3 to v132:74
assign r9 to v159:30
assign 9 to v159:30
assign r15 to v110:63
assign 15 to v110:63
assign r14 to v164:0
assign 14 to v164:0
assign r8 to v185:21
assign 8 to v185:21
assign rdx to v161:0
assign 2 to v161:0
assign rax to v184:0
assign 0 to v184:0
assign rcx to v182:9
assign 1 to v182:9
assign r8 to v162:1
assign 8 to v162:1
assign r14 to v163:1
assign 14 to v163:1
assign r8 to v132:75
assign 8 to v132:75
assign r14 to v107:46
assign 14 to v107:46
assign rdx to v161:2
assign 2 to v161:2
assign r15 to v110:65
assign 15 to v110:65
assign r9 to v159:32
assign 9 to v159:32
assign rbx to v132:77
assign 3 to v132:77
assign r11 to v120:66
assign 11 to v120:66
assign rsi to v107:48
assign 6 to v107:48
assign r12 to v80:83
assign 12 to v80:83
assign r12 to v154:13
assign 12 to v154:13
assign r9 to v148:5
assign 9 to v148:5
assign rax to v153:11
assign 0 to v153:11
assign rdx to v80:84
assign 2 to v80:84
assign r14 to v159:33
assign 14 to v159:33
assign r8 to v159:23
assign 8 to v159:23
assign r14 to v156:0
assign 14 to v156:0
assign r8 to v157:1
assign 8 to v157:1
assign rcx to v158:1
assign 1 to v158:1
assign r8 to v153:12
assign 8 to v153:12
assign rcx to v132:78
assign 1 to v132:78
assign rdi to v107:49
assign 7 to v107:49
assign r14 to v156:2
assign 14 to v156:2
assign rdx to v80:86
assign 2 to v80:86
assign rax to v153:14
assign 0 to v153:14
assign r9 to v148:7
assign 9 to v148:7
assign r12 to v154:15
assign 12 to v154:15
assign rsi to v107:51
assign 6 to v107:51
assign r11 to v120:68
assign 11 to v120:68
assign rbx to v132:80
assign 3 to v132:80
assign r15 to v110:67
assign 15 to v110:67
assign r12 to v116:20
assign 12 to v116:20
assign r8 to v148:8
assign 8 to v148:8
assign r8 to v4:40
assign 8 to v4:40
assign r9 to v148:4
assign 9 to v148:4
assign r14 to v149:0
assign 14 to v149:0
assign rax to v150:0
assign 0 to v150:0
assign r9 to v147:1
assign 9 to v147:1
v23:0 not intersect with v26:0, removed
assign r9 to v23:0
assign 9 to v23:0
assign r14 to v146:14
assign 14 to v146:14
assign rax to v123:12
assign 0 to v123:12
assign rcx to v145:0
assign 1 to v145:0
assign rdi to v141:0
assign 7 to v141:0
assign rcx to v144:0
assign 1 to v144:0
assign rcx to v143:0
assign 1 to v143:0
assign rcx to v30:0
assign 1 to v30:0
v35:0 not intersect with v4:3, removed
v35:0 not intersect with v38:0, removed
v35:1 intersect with v38:0, adding
v35:0 not intersect with v138:0, removed
v35:1 intersect with v138:0, adding
v35:0 not intersect with v139:0, removed
v35:1 intersect with v139:0, adding
assign rdi to v35:0
assign 7 to v35:0
blocking v36 pick register r9
assign r9 to v36:0
assign 9 to v36:0
assign r8 to v4:38
assign 8 to v4:38
blocking v123 pick register r8
blocking v80 pick register r8
blocking v117 pick register r8
blocking v4 pick register r8
blocking v23 pick register r9
blocking v35 pick register r8
blocking v36 pick register r8
blocking v120 pick register r8
blocking v132 pick register r8
blocking v116 pick register r8
blocking v110 pick register r8
assign rax to v37:0
assign 0 to v37:0
assign r8 to v35:2
assign 8 to v35:2
assign r9 to v139:0
assign 9 to v139:0
assign r9 to v138:0
assign 9 to v138:0
assign r11 to v137:1
assign 11 to v137:1
assign r9 to v38:0
assign 9 to v38:0
assign r11 to v136:1
assign 11 to v136:1
assign r11 to v135:0
assign 11 to v135:0
assign r11 to v120:69
assign 11 to v120:69
assign r12 to v126:0
assign 12 to v126:0
assign rdx to v131:0
assign 2 to v131:0
assign r14 to v132:81
assign 14 to v132:81
assign rdx to v130:1
assign 2 to v130:1
blocking v37 pick register rax
blocking v120 pick register r11
assign rax to v129:0
assign 0 to v129:0
assign r12 to v127:0
assign 12 to v127:0
assign r14 to v132:84
assign 14 to v132:84
assign r11 to v120:73
assign 11 to v120:73
assign r9 to v38:2
assign 9 to v38:2
assign r8 to v35:4
assign 8 to v35:4
assign rax to v37:3
assign 0 to v37:3
assign r12 to v125:0
assign 12 to v125:0
assign rdx to v119:0
assign 2 to v119:0
assign r11 to v120:72
assign 11 to v120:72
assign r12 to v124:0
assign 12 to v124:0
assign r12 to v88:0
assign 12 to v88:0
assign r15 to v123:14
assign 15 to v123:14
assign rcx to v121:0
assign 1 to v121:0
assign rdx to v118:0
assign 2 to v118:0
assign rdx to v32:0
assign 2 to v32:0
assign rbx to v80:87
assign 3 to v80:87
assign rcx to v117:14
assign 1 to v117:14
assign rsi to v36:2
assign 6 to v36:2
assign rdi to v116:21
assign 7 to v116:21
blocking v113 pick register r14
assign r14 to v113:0
assign 14 to v113:0
blocking v115 pick register r15
assign r15 to v115:0
assign 15 to v115:0
assign r15 to v114:0
assign 15 to v114:0
assign r14 to v112:0
assign 14 to v112:0
assign r15 to v103:0
assign 15 to v103:0
assign r14 to v111:0
assign 14 to v111:0
assign r14 to v104:0
assign 14 to v104:0
assign rax to v37:2
assign 0 to v37:2
blocking v110 pick register r11
assign r11 to v110:68
assign 11 to v110:68
blocking v37 pick register r8
blocking v80 pick register r8
blocking v36 pick register r8
blocking v32 pick register rdx
blocking v88 pick register r12
blocking v103 pick register r15
assign r11 to v110:71
assign 11 to v110:71
assign rax to v37:6
assign 0 to v37:6
assign r14 to v104:2
assign 14 to v104:2
assign r15 to v103:3
assign 15 to v103:3
assign rdi to v116:24
assign 7 to v116:24
assign rsi to v36:5
assign 6 to v36:5
assign rcx to v117:17
assign 1 to v117:17
assign rbx to v80:91
assign 3 to v80:91
assign rdx to v32:3
assign 2 to v32:3
assign r12 to v88:3
assign 12 to v88:3
assign r8 to v35:6
assign 8 to v35:6
assign r9 to v38:4
assign 9 to v38:4
assign rax to v37:5
assign 0 to v37:5
assign rbx to v80:90
assign 3 to v80:90
blocking v96 pick register rcx
assign rcx to v96:0
assign 1 to v96:0
blocking v105 pick register rdi
assign rdi to v105:0
assign 7 to v105:0
assign rdi to v102:0
assign 7 to v102:0
assign r15 to v103:2
assign 15 to v103:2
assign rdx to v32:2
assign 2 to v32:2
assign r12 to v88:2
assign 12 to v88:2
assign r12 to v86:1
assign 12 to v86:1
assign r14 to v87:1
assign 14 to v87:1
assign r12 to v37:7
assign 12 to v37:7
assign r14 to v80:92
assign 14 to v80:92
assign r15 to v36:6
assign 15 to v36:6
blocking v32 pick register rdx
blocking v37 pick register r8
blocking v80 pick register r8
assign rdx to v32:6
assign 2 to v32:6
assign rbx to v80:95
assign 3 to v80:95
assign rax to v37:10
assign 0 to v37:10
assign r9 to v38:6
assign 9 to v38:6
assign r8 to v35:8
assign 8 to v35:8
assign rsi to v36:8
assign 6 to v36:8
assign r11 to v110:73
assign 11 to v110:73
assign rdx to v32:5
assign 2 to v32:5
assign rsi to v36:4
assign 6 to v36:4
assign r12 to v62:0
assign 12 to v62:0
assign r14 to v37:9
assign 14 to v37:9
assign r15 to v80:94
assign 15 to v80:94
assign rax to v81:0
assign 0 to v81:0
assign rcx to v83:0
assign 1 to v83:0
assign rcx to v82:0
assign 1 to v82:0
assign rax to v79:0
assign 0 to v79:0
assign rcx to v75:0
assign 1 to v75:0
assign rax to v78:0
assign 0 to v78:0
assign rax to v76:0
assign 0 to v76:0
assign rdi to v73:0
assign 7 to v73:0
blocking v77 pick register r15
assign r15 to v77:0
assign 15 to v77:0
assign r15 to v74:0
assign 15 to v74:0
assign r15 to v64:0
assign 15 to v64:0
assign rax to v71:0
assign 0 to v71:0
assign rcx to v72:0
assign 1 to v72:0
assign rcx to v69:0
assign 1 to v69:0
assign rax to v63:0
assign 0 to v63:0
assign rdi to v70:0
assign 7 to v70:0
assign rbx to v68:0
assign 3 to v68:0
assign r15 to v67:1
assign 15 to v67:1
assign r15 to v63:1
assign 15 to v63:1
assign rcx to v36:9
assign 1 to v36:9
blocking v32 pick register rdx
blocking v62 pick register r12
assign rax to v65:0
assign 0 to v65:0
assign rax to v63:3
assign 0 to v63:3
assign r14 to v37:12
assign 14 to v37:12
assign r12 to v62:3
assign 12 to v62:3
assign rsi to v36:11
assign 6 to v36:11
assign rdx to v32:9
assign 2 to v32:9
assign r11 to v110:75
assign 11 to v110:75
assign r8 to v35:10
assign 8 to v35:10
assign r9 to v38:8
assign 9 to v38:8
assign r15 to v42:0
assign 15 to v42:0
assign r12 to v62:2
assign 12 to v62:2
assign rcx to v39:0
assign 1 to v39:0
assign rax to v61:0
assign 0 to v61:0
assign rdx to v32:8
assign 2 to v32:8
assign rbx to v40:1
assign 3 to v40:1
assign r12 to v41:1
assign 12 to v41:1
assign r12 to v36:12
assign 12 to v36:12
assign rdx to v32:11
assign 2 to v32:11
assign rcx to v39:2
assign 1 to v39:2
assign r9 to v38:10
assign 9 to v38:10
assign r8 to v35:12
assign 8 to v35:12
assign r11 to v110:77
assign 11 to v110:77
assign rsi to v36:14
assign 6 to v36:14
assign r14 to v37:14
assign 14 to v37:14
assign r15 to v80:97
assign 15 to v80:97
assign rdi to v33:1
assign 7 to v33:1
assign r8 to v116:22
assign 8 to v116:22
assign r9 to v117:15
assign 9 to v117:15
assign r9 to v23:3
assign 9 to v23:3
assign r9 to v26:0
assign 9 to v26:0
assign rbx to v27:1
assign 3 to v27:1
assign rsi to v28:1
assign 6 to v28:1
assign r9 to v26:2
assign 9 to v26:2
assign r8 to v4:45
assign 8 to v4:45
assign r8 to v4:44
assign 8 to v4:44
assign rdi to v20:0
assign 7 to v20:0
assign r12 to v24:0
assign 12 to v24:0
assign r12 to v22:0
assign 12 to v22:0
assign r11 to v21:1
assign 11 to v21:1
assign rax to v0:14
assign 0 to v0:14
assign rsi to v7:1
assign 6 to v7:1
assign r9 to v0:15
assign 9 to v0:15
assign r11 to v7:2
assign 11 to v7:2
blocking v4 pick register r8
blocking v0 pick register r8
assign r8 to v4:47
assign 8 to v4:47
assign r9 to v11:0
assign 9 to v11:0
assign r11 to v18:3
assign 11 to v18:3
assign r12 to v17:0
assign 12 to v17:0
assign r12 to v16:0
assign 12 to v16:0
assign r12 to v15:0
assign 12 to v15:0
assign r11 to v14:0
assign 11 to v14:0
assign r12 to v13:0
assign 12 to v13:0
assign rdi to v5:0
assign 7 to v5:0
assign r9 to v10:0
assign 9 to v10:0
assign r9 to v9:0
assign 9 to v9:0
assign r11 to v8:1
assign 11 to v8:1
assign rax to v0:17
assign 0 to v0:17
assign r9 to v0:18
assign 9 to v0:18
spill count : 455
add v694->v4
add v18->v694
add v691->v694
add v693->v694
add v692->v690
add v689->v686
add v688->v689
add v681->v678
add v680->v681
add v590->v4
add v591->v4
add v671->v4
add v146->v671
add v669->v671
add v672->v671
add v667->v669
add v80->v659
add v664->v659
add v666->v659
add v661->v664
add v663->v4
add v146->v663
add v657->v663
add v662->v663
add v655->v657
add v80->v647
add v652->v647
add v654->v647
add v649->v652
add v651->v4
add v146->v651
add v645->v651
add v650->v651
add v643->v645
add v80->v638
add v640->v638
add v642->v638
add v605->v640
add v639->v590
add v637->v590
add v595->v590
add v636->v632
add v633->v635
add v629->v631
add v630->v631
add v110->v627
add v117->v627
add v392->v627
add v626->v629
add v628->v629
add v329->v600
add v627->v600
add v624->v626
add v625->v626
add v116->v597
add v117->v597
add v600->v597
add v622->v624
add v623->v624
add v123->v619
add v370->v619
add v369->v619
add v369->v619
add v369->v619
add v617->v622
add v621->v622
add v80->v618
add v117->v618
add v619->v618
add v620->v619
add v618->v600
add v615->v617
add v616->v617
add v123->v612
add v369->v612
add v370->v612
add v369->v612
add v369->v612
add v610->v615
add v614->v615
add v80->v611
add v117->v611
add v612->v611
add v613->v612
add v611->v600
add v607->v610
add v609->v610
add v123->v602
add v369->v602
add v369->v602
add v370->v602
add v369->v602
add v608->v607
add v606->v607
add v80->v601
add v117->v601
add v602->v601
add v603->v602
add v601->v600
add v596->v595
add v599->v596
add v598->v596
add v541->v4
add v540->v4
add v587->v540
add v586->v540
add v542->v540
add v584->v484
add v483->v584
add v481->v584
add v583->v579
add v580->v582
add v575->v578
add v577->v578
add v110->v570
add v117->v570
add v576->v570
add v572->v575
add v574->v575
add v110->v569
add v117->v569
add v573->v569
add v568->v572
add v571->v572
add v329->v547
add v570->v547
add v569->v547
add v566->v568
add v567->v568
add v116->v544
add v117->v544
add v547->v544
add v564->v566
add v565->v566
add v123->v559
add v369->v559
add v369->v559
add v369->v559
add v369->v559
add v557->v564
add v563->v564
add v80->v558
add v117->v558
add v559->v558
add v550->v559
add v560->v559
add v558->v547
add v554->v557
add v556->v557
add v123->v549
add v369->v549
add v369->v549
add v369->v549
add v369->v549
add v555->v554
add v553->v554
add v80->v548
add v117->v548
add v549->v548
add v551->v549
add v550->v549
add v548->v547
add v543->v542
add v546->v543
add v545->v543
add v491->v4
add v490->v4
add v537->v490
add v536->v490
add v492->v490
add v534->v484
add v483->v534
add v481->v534
add v533->v529
add v530->v532
add v525->v528
add v527->v528
add v110->v520
add v117->v520
add v526->v520
add v522->v525
add v524->v525
add v110->v519
add v117->v519
add v523->v519
add v518->v522
add v521->v522
add v329->v497
add v520->v497
add v519->v497
add v516->v518
add v517->v518
add v116->v494
add v117->v494
add v497->v494
add v514->v516
add v515->v516
add v123->v509
add v369->v509
add v369->v509
add v369->v509
add v369->v509
add v507->v514
add v513->v514
add v80->v508
add v117->v508
add v509->v508
add v500->v509
add v510->v509
add v508->v497
add v504->v507
add v506->v507
add v123->v499
add v369->v499
add v369->v499
add v369->v499
add v369->v499
add v505->v504
add v503->v504
add v80->v498
add v117->v498
add v499->v498
add v501->v499
add v500->v499
add v498->v497
add v493->v492
add v496->v493
add v495->v493
add v437->v4
add v436->v4
add v487->v436
add v486->v436
add v438->v436
add v482->v484
add v483->v482
add v481->v482
add v480->v475
add v476->v478
add v471->v474
add v473->v474
add v110->v466
add v117->v466
add v472->v466
add v468->v471
add v470->v471
add v110->v465
add v117->v465
add v469->v465
add v464->v468
add v467->v468
add v329->v443
add v466->v443
add v465->v443
add v462->v464
add v463->v464
add v116->v440
add v117->v440
add v443->v440
add v460->v462
add v461->v462
add v123->v455
add v369->v455
add v369->v455
add v369->v455
add v369->v455
add v453->v460
add v459->v460
add v80->v454
add v117->v454
add v455->v454
add v446->v455
add v456->v455
add v454->v443
add v450->v453
add v452->v453
add v123->v445
add v369->v445
add v369->v445
add v369->v445
add v369->v445
add v451->v450
add v449->v450
add v80->v444
add v117->v444
add v445->v444
add v447->v445
add v446->v445
add v444->v443
add v439->v438
add v442->v439
add v441->v439
add v352->v4
add v351->v4
add v432->v4
add v146->v432
add v430->v432
add v433->v432
add v428->v430
add v80->v422
add v425->v422
add v427->v422
add v353->v425
add v424->v4
add v146->v424
add v420->v424
add v423->v424
add v418->v420
add v80->v412
add v415->v412
add v417->v412
add v354->v415
add v414->v4
add v146->v414
add v410->v414
add v413->v414
add v408->v410
add v80->v403
add v405->v403
add v407->v403
add v355->v405
add v404->v351
add v402->v351
add v356->v351
add v400->v395
add v396->v398
add v391->v394
add v393->v394
add v110->v389
add v117->v389
add v392->v389
add v388->v391
add v390->v391
add v329->v362
add v389->v362
add v386->v388
add v387->v388
add v116->v358
add v117->v358
add v362->v358
add v384->v386
add v385->v386
add v123->v381
add v370->v381
add v369->v381
add v369->v381
add v369->v381
add v379->v384
add v383->v384
add v80->v380
add v117->v380
add v381->v380
add v382->v381
add v380->v362
add v377->v379
add v378->v379
add v123->v374
add v369->v374
add v370->v374
add v369->v374
add v369->v374
add v372->v377
add v376->v377
add v80->v373
add v117->v373
add v374->v373
add v375->v374
add v373->v362
add v367->v372
add v371->v372
add v123->v364
add v369->v364
add v369->v364
add v370->v364
add v369->v364
add v368->v367
add v366->v367
add v80->v363
add v117->v363
add v364->v363
add v365->v364
add v363->v362
add v357->v356
add v361->v357
add v360->v357
add v153->v4
add v152->v4
add v154->v4
add v348->v152
add v347->v152
add v155->v152
add v345->v340
add v341->v343
add v337->v339
add v338->v339
add v80->v328
add v117->v328
add v117->v328
add v335->v337
add v336->v337
add v80->v327
add v117->v327
add v117->v327
add v333->v335
add v334->v335
add v80->v326
add v117->v326
add v117->v326
add v331->v333
add v332->v333
add v80->v325
add v117->v325
add v117->v325
add v323->v331
add v330->v331
add v329->v321
add v328->v321
add v327->v321
add v326->v321
add v325->v321
add v324->v323
add v322->v323
add v116->v148
add v117->v148
add v321->v148
add v318->v148
add v320->v148
adding pairs 2, v159:0x7fffc0136330, v318:0x7fffc012b3c8
add v116->v153
add v290->v153
add v317->v153
adding pairs 2, v159:0x7fffc0136330, v290:0x7fffc012b648
add v110->v313
add v80->v313
add v297->v313
add v312->v313
add v261->v297
add v116->v154
add v282->v154
add v311->v154
add v308->v282
add v110->v308
add v80->v308
add v305->v308
add v307->v308
add v260->v305
add v263->v297
add v302->v282
add v110->v302
add v80->v302
add v299->v302
add v301->v302
add v262->v299
add v259->v297
add v294->v282
add v110->v294
add v80->v294
add v291->v294
add v293->v294
add v258->v291
adding pairs 2, v159:0x7fffc002daa0, v290:0x7fffc002d820
add v110->v287
add v80->v287
add v284->v287
add v286->v287
add v255->v284
add v279->v282
add v110->v279
add v80->v279
add v276->v279
add v278->v279
add v254->v276
add v110->v264
add v80->v264
add v266->v264
add v273->v264
add v271->v266
add v272->v265
add v249->v247
add v241->v148
add v243->v148
adding pairs 2, v159:0x7fffc0033d50, v241:0x7fffc012e118
add v212->v153
add v240->v153
adding pairs 2, v159:0x7fffc0033d50, v212:0x7fffc012e3f8
add v110->v236
add v80->v236
add v220->v236
add v235->v236
add v179->v220
add v204->v154
add v234->v154
add v231->v204
add v110->v231
add v80->v231
add v228->v231
add v230->v231
adding pairs 3, v185:0x7fffc0042cb8, v228:0x7fffc012edc8
add v181->v220
add v225->v204
add v110->v225
add v80->v225
add v222->v225
add v224->v225
adding pairs 3, v185:0x7fffc0046348, v222:0x7fffc012f2b0
add v177->v220
add v217->v204
add v110->v217
add v80->v217
add v214->v217
add v216->v217
adding pairs 3, v185:0x7fffc0047b50, v214:0x7fffc012f798
adding pairs 2, v159:0x7fffc0042ed0, v212:0x7fffc0042be0
add v110->v209
add v80->v209
add v206->v209
add v208->v209
add v173->v206
add v201->v204
add v110->v201
add v80->v201
add v198->v201
add v200->v201
adding pairs 3, v185:0x7fffc00511f8, v198:0x7fffc0130028
add v110->v182
add v80->v182
add v187->v182
add v195->v182
add v194->v187
add v193->v186
add v161->v185
add v184->v182
adding pairs 3, v185:0x7fffc0054d50, v164:0x7fffc0135fe8
add v156->v159
add v148->v4
add v145->v4
add v146->v145
add v141->v145
add v144->v145
adding pairs 2, v23:0x7fffc0135ed0, v141:0x7fffc0131398
add v35->v4
add v36->v4
add v139->v35
add v138->v35
add v38->v35
add v134->v136
add v131->v126
add v127->v129
add v119->v125
add v124->v125
add v123->v88
add v122->v88
add v122->v88
add v122->v88
add v122->v88
add v121->v119
add v118->v119
add v80->v32
add v117->v32
add v88->v32
add v116->v36
add v113->v36
add v115->v36
add v112->v113
add v80->v112
add v103->v112
add v111->v112
add v100->v103
add v110->v37
add v80->v37
add v96->v37
add v105->v37
add v101->v103
add v99->v103
add v95->v103
add v90->v88
add v81->v36
add v83->v36
adding pairs 2, v62:0x7fffc0135b88, v81:0x7fffc0133410
add v80->v79
add v75->v79
add v78->v79
add v57->v75
add v73->v37
add v77->v37
add v56->v73
add v59->v75
add v58->v73
add v55->v75
add v54->v73
add v51->v75
add v50->v73
add v64->v32
add v71->v32
add v72->v64
add v70->v63
add v39->v62
add v61->v32
adding pairs 3, v62:0x7fffc005f5a0, v42:0x7fffc0135a70
add v26->v23
add v20->v4
add v24->v20
add v22->v20
add v11->v4
add v18->v11
add v17->v11
add v15->v16
add v13->v11
add v5->v4
add v10->v5
add v9->v5
gap () () 
          [rsi|R|t] = ArchNop
gap (v4(-) = [rsi|R|t];) () 
          [stack:-1|t] = ArchNop
gap (v3(-) = [stack:-1|t];) () 
          [rdi|R|t] = ArchNop
gap (v2(-) = [rdi|R|t];) () 
          [constant:84] = ArchNop
gap () () 
          [constant:268] = ArchNop
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1320] [immediate:1321]
gap () () 
          [constant:698] = ArchNop
gap () () 
          [constant:697] = ArchNop
gap () () 
          v696(R) = ArchStackCheckOffset
gap () () 
          X64Push v696(-)
gap () ([rbx|R|w64] = v697(-); [rax|R|w64] = v84(-); [rsi|R|t] = v698(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1319] #-1 #209 v2(S) v3(S) v4(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1318]
gap () () 
          ArchJmp [immediate:1317]
gap () () 
          [constant:6] = ArchNop
gap () () 
          [constant:0] = ArchNop
gap () () 
          [constant:18] = ArchNop
gap () () 
          v694(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1316]
gap () () 
          X64Test32 && deoptimize if equal v694 #1 #208 v2(S) v3(-) v4(S) v694(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v694(R) [immediate:1315] v18(R) #207 v2(S) v3(-) v4(S) v694(-)
gap () () 
          v691(R) = X64MovqDecompressTaggedSigned : MRI v694(R) [immediate:1314]
gap () () 
          v693(R) = X64MovqDecompressTaggedSigned : MRI v694(R) [immediate:1313]
gap () () 
          X64Cmp32 && branch if signed less than v693(R) v691 [immediate:1311] [immediate:1312]
gap () () 
          [constant:690] = ArchNop
gap () () 
          v692(R) = X64MovqDecompressTaggedPointer : MRI v690(R) [immediate:1310]
gap () () 
          X64Push v691(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v690(-); [rdx|R|t] = v0(-); [rax|R|w64] = v84(-); [rsi|R|tp] = v692(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1309] #-1 #206 v2(S) v3(S) v4(S) [rdi|R|t] [rdx|R|t] [rax|R|w64] [rsi|R|tp]
gap (v686(-) = [rax|R|t];) () 
          v689(R) = X64Movl : MRI v686(R) [immediate:1308]
gap () () 
          X64Cmp32 && branch if unsigned less than v689 #3 [immediate:1306] [immediate:1307]
gap () () 
          ArchJmp [immediate:1305]
gap () () 
          [constant:687] = ArchNop
gap () () 
          [constant:677] = ArchNop
gap () () 
          v688(R) = X64Lea32 : MRI v689(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v688 #536870889 #205 v2(S) v3(-) v4(S) v686(-)
gap () ([rax|R|t] = v677(-); [rbx|R|t] = v686(-); [rsi|R|w64] = v687(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1304] #-1 [rax|R|t] [rbx|R|t] [rsi|R|w64]
gap (v682(-) = [rax|R|t];) () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1302] [immediate:1303]
gap () () 
          [constant:685] = ArchNop
gap () () 
          [constant:684] = ArchNop
gap () ([rbx|R|w64] = v684(-); [rax|R|w64] = v6(-); [rsi|R|t] = v685(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1301] #-1 #204 v2(S) v3(S) v4(S) v682(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1300]
gap () () 
          ArchJmp [immediate:1299]
gap () (v678 = v682(-);) 
          ArchJmp [immediate:1298]
gap () () 
          v681(R) = X64Movl : MRI v678(R) [immediate:1297]
gap () () 
          X64Cmp32 && branch if unsigned less than v681 #3 [immediate:1295] [immediate:1296]
gap () () 
          [constant:679] = ArchNop
gap () () 
          v680(R) = X64Lea32 : MRI v681(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v680 #536870889 #203 v2(S) v3(-) v4(S) v678(-)
gap () ([rax|R|t] = v677(-); [rbx|R|t] = v678(-); [rsi|R|w64] = v679(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1294] #-1 [rax|R|t] [rbx|R|t] [rsi|R|w64]
gap (v674(-) = [rax|R|t];) () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:1292] [immediate:1293]
gap () () 
          [constant:676] = ArchNop
gap () () 
          [constant:675] = ArchNop
gap () ([rbx|R|w64] = v675(-); [rax|R|w64] = v6(-); [rsi|R|t] = v676(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1291] #-1 #202 v2(S) v3(S) v4(S) v674(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:1290]
gap () () 
          ArchJmp [immediate:1289]
gap () (v678 = v674(-);) 
          ArchJmp [immediate:1288]
gap () () 
          ArchJmp [immediate:1287]
gap () () 
          v590(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1286]
gap () () 
          v591(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1285]
gap () () 
          v671(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1284]
gap () () 
          X64Test32 && deoptimize if equal v671 #1 #201 v2(S) v3(-) v4(S) v590(-) v591(-) v671(-) [immediate:1283]
gap () () 
          [constant:146] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v671(R) [immediate:1281] v146(R) #200 v2(S) v3(-) v4(S) v590(-) v591(-) v671(-) [immediate:1282]
gap () () 
          v669(R) = X64MovqDecompressTaggedPointer : MRI v671(R) [immediate:1280]
gap () () 
          v672(R) = X64MovqDecompressTaggedSigned : MRI v671(R) [immediate:1279]
gap () (v670(R) = v672(-);) 
          v670(1) = X64Sar32 v670(R) #1
gap () () 
          [constant:147] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v670 #8 #199 v2(S) v3(-) v4(S) v590(-) v591(-) v671(-) [immediate:1278]
gap () () 
          v667(R) = X64MovqDecompressAnyTagged : MRI v669(R) [immediate:1277]
gap () () 
          [constant:668] = ArchNop
gap () () 
          [constant:31] = ArchNop
gap () ([rdx|R|t] = v667(-); [rcx|R|t] = v31(-); [rax|R|w64] = v668(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1276] #-1 #198 v2(S) v3(S) v4(S) v590(S) v591(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v659(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v659 #1 #197 v2(S) v3(-) v4(S) v590(-) v591(-) v659(-) [immediate:1275]
gap () () 
          [constant:80] = ArchNop
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v659(R) [immediate:1273] v80(R) #196 v2(S) v3(-) v4(S) v590(-) v591(-) v659(-) [immediate:1274]
gap () () 
          v664(R) = X64MovqDecompressTaggedPointer : MRI v659(R) [immediate:1272]
gap () () 
          v666(R) = X64MovqDecompressTaggedSigned : MRI v659(R) [immediate:1271]
gap () () 
          [constant:120] = ArchNop
gap () (v665(R) = v666(-);) 
          v665(1) = X64Sar32 v665(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v665 #0 #195 v2(S) v3(-) v4(S) v590(-) v591(-) v659(-) [immediate:1270]
gap () () 
          v661(R) = X64Movsd : MRI v664(R) [immediate:1269]
gap () () 
          v663(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1268]
gap () () 
          X64Test32 && deoptimize if equal v663 #1 #194 v2(S) v3(-) v4(S) v590(-) v591(-) v659(-) [immediate:1267]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v663(R) [immediate:1265] v146(R) #193 v2(S) v3(-) v4(S) v590(-) v591(-) v659(-) [immediate:1266]
gap () () 
          v657(R) = X64MovqDecompressTaggedPointer : MRI v663(R) [immediate:1264]
gap () () 
          v662(R) = X64MovqDecompressTaggedSigned : MRI v663(R) [immediate:1263]
gap () (v658(R) = v662(-);) 
          v658(1) = X64Sar32 v658(R) #1
gap () () 
          v592(R) = AVXFloat64Neg v661
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v658 #8 #192 v2(S) v3(-) v4(S) v590(-) v591(-) v659(-) [immediate:1262]
gap () () 
          v655(R) = X64MovqDecompressAnyTagged : MRI v657(R) [immediate:1261]
gap () () 
          [constant:656] = ArchNop
gap () ([rdx|R|t] = v655(-); [rcx|R|t] = v31(-); [rax|R|w64] = v656(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1260] #-1 #191 v2(S) v3(S) v4(S) v590(S) v591(S) v592(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v647(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v647 #1 #190 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v647(-) [immediate:1259]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v647(R) [immediate:1257] v80(R) #189 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v647(-) [immediate:1258]
gap () () 
          v652(R) = X64MovqDecompressTaggedPointer : MRI v647(R) [immediate:1256]
gap () () 
          v654(R) = X64MovqDecompressTaggedSigned : MRI v647(R) [immediate:1255]
gap () (v653(R) = v654(-);) 
          v653(1) = X64Sar32 v653(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v653 #1 #188 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v647(-) [immediate:1254]
gap () () 
          v649(R) = X64Movsd : MRI v652(R) [immediate:1253]
gap () () 
          v651(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1252]
gap () () 
          X64Test32 && deoptimize if equal v651 #1 #187 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v647(-) [immediate:1251]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v651(R) [immediate:1249] v146(R) #186 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v647(-) [immediate:1250]
gap () () 
          v645(R) = X64MovqDecompressTaggedPointer : MRI v651(R) [immediate:1248]
gap () () 
          v650(R) = X64MovqDecompressTaggedSigned : MRI v651(R) [immediate:1247]
gap () (v646(R) = v650(-);) 
          v646(1) = X64Sar32 v646(R) #1
gap () () 
          v593(R) = AVXFloat64Neg v649
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v646 #8 #185 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v647(-) [immediate:1246]
gap () () 
          v643(R) = X64MovqDecompressAnyTagged : MRI v645(R) [immediate:1245]
gap () () 
          [constant:644] = ArchNop
gap () ([rdx|R|t] = v643(-); [rcx|R|t] = v31(-); [rax|R|w64] = v644(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1244] #-1 #184 v2(S) v3(S) v4(S) v590(S) v591(S) v592(S) v593(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v638(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v638 #1 #183 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v593(-) v638(-) [immediate:1243]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v638(R) [immediate:1241] v80(R) #182 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v593(-) v638(-) [immediate:1242]
gap () () 
          v640(R) = X64MovqDecompressTaggedPointer : MRI v638(R) [immediate:1240]
gap () () 
          v642(R) = X64MovqDecompressTaggedSigned : MRI v638(R) [immediate:1239]
gap () (v641(R) = v642(-);) 
          v641(1) = X64Sar32 v641(R) #1
gap () () 
          [constant:108] = ArchNop
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v641 #2 #181 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v593(-) v638(-) [immediate:1238]
gap () () 
          v605(R) = X64Movsd : MRI v640(R) [immediate:1237]
gap () () 
          X64Test32 && deoptimize if equal v590 #1 #180 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v593(-) v638(-) [immediate:1236]
gap () () 
          v639(R) = X64MovqDecompressTaggedPointer : MRI v590(R) [immediate:1235]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v639(R) [immediate:1233] #1068 #179 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v593(-) v638(-) [immediate:1234]
gap () () 
          [constant:401] = ArchNop
gap () () 
          v637(R) = X64MovqDecompressTaggedPointer : MRI v590(R) [immediate:1232]
gap () () 
          X64Cmp && deoptimize if not equal v637(R) v401 #178 v2(S) v3(-) v4(S) v590(-) v591(-) v592(-) v593(-) v638(-) [immediate:1231]
gap () () 
          v595(R) = X64MovqDecompressTaggedPointer : MRI v590(R) [immediate:1230]
gap () () 
          [constant:132] = ArchNop
gap () () 
          [constant:399] = ArchNop
gap () () 
          v632(R) = X64Movq : MR v120(R)
gap () () 
          v636(R) = X64Lea : MRI v632(R) [immediate:1229]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v636(R) [immediate:1227] [immediate:1228]
gap () () 
          ArchJmp [immediate:1226]
gap () ([rdx|R|w64] = v399(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1225] #-1 [rdx|R|w64]
gap (v635(-) = [rax|R|tp];) () 
          v633(R) = X64Lea : MRI v635(R) [immediate:1224]
gap () (v631 = v633(-);) 
          ArchJmp [immediate:1223]
gap () (v631 = v632(-);) 
          ArchJmp [immediate:1222]
gap () () 
          v629(R) = X64Lea : MRI v631(R) [immediate:1221]
gap () () 
          X64Movq : MR v120(R) v629(R)
gap () () 
          v630(R) = X64Lea : MRI v631(R) [immediate:1220]
gap () (v627 = v630(-);) 
          v627(1) = ArchNop v627
gap () () 
          [constant:110] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v627(R) [immediate:1219] v110(R)
gap () () 
          [constant:117] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v627(R) [immediate:1218] v117(R)
gap () () 
          [constant:392] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v627(R) [immediate:1217] v392(R)
gap () () 
          X64MovqCompressTagged : MRI v627(R) [immediate:1215] [immediate:1216]
gap () () 
          v626(R) = X64Lea : MRI v629(R) [immediate:1214]
gap () () 
          X64Movq : MR v120(R) v626(R)
gap () () 
          v628(R) = X64Lea : MRI v629(R) [immediate:1213]
gap () (v600 = v628(-);) 
          v600(1) = ArchNop v600
gap () () 
          [constant:329] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1212] v329(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1210] [immediate:1211]
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1208] [immediate:1209]
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1206] [immediate:1207]
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1204] [immediate:1205]
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1203] v627(R)
gap () () 
          v624(R) = X64Lea : MRI v626(R) [immediate:1202]
gap () () 
          X64Movq : MR v120(R) v624(R)
gap () () 
          v625(R) = X64Lea : MRI v626(R) [immediate:1201]
gap () (v597 = v625(-);) 
          v597(1) = ArchNop v597
gap () () 
          [constant:116] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v597(R) [immediate:1200] v116(R)
gap () () 
          X64MovqCompressTagged : MRI v597(R) [immediate:1199] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v597(R) [immediate:1198] v600(R)
gap () () 
          X64MovqCompressTagged : MRI v597(R) [immediate:1196] [immediate:1197]
gap () () 
          v622(R) = X64Lea : MRI v624(R) [immediate:1195]
gap () () 
          X64Movq : MR v120(R) v622(R)
gap () () 
          v623(R) = X64Lea : MRI v624(R) [immediate:1194]
gap () (v619 = v623(-);) 
          v619(1) = ArchNop v619
gap () () 
          [constant:123] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v619(R) [immediate:1193] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v619(R) [immediate:1191] [immediate:1192]
gap () () 
          [constant:370] = ArchNop
gap () () 
          X64Movsd : MRI v619(R) [immediate:1190] v370(R)
gap () () 
          [constant:369] = ArchNop
gap () () 
          X64Movsd : MRI v619(R) [immediate:1189] v369(R)
gap () () 
          X64Movsd : MRI v619(R) [immediate:1188] v369(R)
gap () () 
          X64Movsd : MRI v619(R) [immediate:1187] v369(R)
gap () () 
          v617(R) = X64Lea : MRI v622(R) [immediate:1186]
gap () () 
          X64Movq : MR v120(R) v617(R)
gap () () 
          v621(R) = X64Lea : MRI v622(R) [immediate:1185]
gap () (v618 = v621(-);) 
          v618(1) = ArchNop v618
gap () () 
          X64MovqCompressTagged : MRI v618(R) [immediate:1184] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v618(R) [immediate:1183] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v618(R) [immediate:1182] v619(R)
gap () () 
          X64MovqCompressTagged : MRI v618(R) [immediate:1180] [immediate:1181]
gap () (v620(R) = v592(-);) 
          v620(1) = SSEFloat64SilenceNaN v620(R)
gap () () 
          X64Movsd : MRI v619(R) [immediate:1179] v620(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1178] v618(R)
gap () () 
          v615(R) = X64Lea : MRI v617(R) [immediate:1177]
gap () () 
          X64Movq : MR v120(R) v615(R)
gap () () 
          v616(R) = X64Lea : MRI v617(R) [immediate:1176]
gap () (v612 = v616(-);) 
          v612(1) = ArchNop v612
gap () () 
          X64MovqCompressTagged : MRI v612(R) [immediate:1175] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v612(R) [immediate:1173] [immediate:1174]
gap () () 
          X64Movsd : MRI v612(R) [immediate:1172] v369(R)
gap () () 
          X64Movsd : MRI v612(R) [immediate:1171] v370(R)
gap () () 
          X64Movsd : MRI v612(R) [immediate:1170] v369(R)
gap () () 
          X64Movsd : MRI v612(R) [immediate:1169] v369(R)
gap () () 
          v610(R) = X64Lea : MRI v615(R) [immediate:1168]
gap () () 
          X64Movq : MR v120(R) v610(R)
gap () () 
          v614(R) = X64Lea : MRI v615(R) [immediate:1167]
gap () (v611 = v614(-);) 
          v611(1) = ArchNop v611
gap () () 
          X64MovqCompressTagged : MRI v611(R) [immediate:1166] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v611(R) [immediate:1165] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v611(R) [immediate:1164] v612(R)
gap () () 
          X64MovqCompressTagged : MRI v611(R) [immediate:1162] [immediate:1163]
gap () (v613(R) = v593(-);) 
          v613(1) = SSEFloat64SilenceNaN v613(R)
gap () () 
          X64Movsd : MRI v612(R) [immediate:1161] v613(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1160] v611(R)
gap () () 
          v607(R) = X64Lea : MRI v610(R) [immediate:1159]
gap () () 
          X64Movq : MR v120(R) v607(R)
gap () () 
          v609(R) = X64Lea : MRI v610(R) [immediate:1158]
gap () (v602 = v609(-);) 
          v602(1) = ArchNop v602
gap () () 
          X64MovqCompressTagged : MRI v602(R) [immediate:1157] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v602(R) [immediate:1155] [immediate:1156]
gap () () 
          X64Movsd : MRI v602(R) [immediate:1154] v369(R)
gap () () 
          X64Movsd : MRI v602(R) [immediate:1153] v369(R)
gap () () 
          X64Movsd : MRI v602(R) [immediate:1152] v370(R)
gap () () 
          X64Movsd : MRI v602(R) [immediate:1151] v369(R)
gap () () 
          v608(R) = X64Lea : MRI v607(R) [immediate:1150]
gap () () 
          X64Movq : MR v120(R) v608(R)
gap () () 
          v606(R) = X64Lea : MRI v607(R) [immediate:1149]
gap () (v601 = v606(-);) 
          v601(1) = ArchNop v601
gap () () 
          X64MovqCompressTagged : MRI v601(R) [immediate:1148] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v601(R) [immediate:1147] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v601(R) [immediate:1146] v602(R)
gap () () 
          v594(R) = AVXFloat64Neg v605
gap () () 
          X64MovqCompressTagged : MRI v601(R) [immediate:1144] [immediate:1145]
gap () (v603(R) = v594(-);) 
          v603(1) = SSEFloat64SilenceNaN v603(R)
gap () () 
          X64Movsd : MRI v602(R) [immediate:1143] v603(R)
gap () () 
          X64MovqCompressTagged : MRI v600(R) [immediate:1142] v601(R)
gap () () 
          v596(R) = X64MovqDecompressAnyTagged : MRI v595(R) [immediate:1141]
gap () () 
          X64Test32 && deoptimize if equal v596 #1 #177 v2(S) v3(-) v4(S) v590(S) [immediate:1140] v591(-) v592(-) v593(-) v594(-) v595(S) v597(-) v596(-)
gap () () 
          v599(R) = X64MovqDecompressTaggedPointer : MRI v596(R) [immediate:1139]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v599(R) [immediate:1137] #1068 #176 v2(S) v3(-) v4(S) v590(S) [immediate:1138] v591(-) v592(-) v593(-) v594(-) v595(S) v597(-) v596(-)
gap () () 
          [constant:346] = ArchNop
gap () () 
          v598(R) = X64MovqDecompressTaggedPointer : MRI v596(R) [immediate:1136]
gap () () 
          [constant:359] = ArchNop
gap () () 
          X64Cmp && deoptimize if not equal v598(R) v346 #175 v2(S) v3(-) v4(S) v590(S) [immediate:1135] v591(-) v592(-) v593(-) v594(-) v595(S) v597(-) v596(-)
gap () () 
          X64Push v591(-)
gap () () 
          X64Push v597(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v596(-); [rax|R|w64] = v108(-); [rsi|R|t] = v359(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1133] #-1 #174 v2(S) v3(S) v4(S) v590(S) [immediate:1134] v591(S) v592(S) v593(S) v594(S) v595(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap (v541(-) = [rax|R|t];) () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:1132] v541(R)
gap () () 
          v540(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1131]
gap () () 
          X64Test32 && deoptimize if equal v540 #1 #173 v2(S) v3(-) v4(S) v540(-) v541(-) [immediate:1130]
gap () () 
          v587(R) = X64MovqDecompressTaggedPointer : MRI v540(R) [immediate:1129]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v587(R) [immediate:1127] #1068 #172 v2(S) v3(-) v4(S) v540(-) v541(-) [immediate:1128]
gap () () 
          [constant:585] = ArchNop
gap () () 
          v586(R) = X64MovqDecompressTaggedPointer : MRI v540(R) [immediate:1126]
gap () () 
          X64Cmp && deoptimize if not equal v585(R) v586 #171 v2(S) v3(-) v4(S) v540(-) v541(-) [immediate:1125]
gap () () 
          v542(R) = X64MovqDecompressTaggedPointer : MRI v540(R) [immediate:1124]
gap () () 
          [constant:484] = ArchNop
gap () () 
          [constant:483] = ArchNop
gap () () 
          [constant:481] = ArchNop
gap () () 
          [constant:479] = ArchNop
gap () () 
          v584(R) = X64MovqDecompressTaggedPointer : MRI v484(R) [immediate:1123]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v584(R) [immediate:1119] v483(R) #170 v2(S) v3(-) v4(S) v540(S) [immediate:1120] v541(-) [immediate:1121] v542(S) [immediate:1122]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v584(R) [immediate:1115] v481(R) #169 v2(S) v3(-) v4(S) v540(S) [immediate:1116] v541(-) [immediate:1117] v542(S) [immediate:1118]
gap () () 
          v579(R) = X64Movq : MR v120(R)
gap () () 
          v583(R) = X64Lea : MRI v579(R) [immediate:1114]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v583(R) [immediate:1112] [immediate:1113]
gap () () 
          ArchJmp [immediate:1111]
gap () ([rdx|R|w64] = v479(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1110] #-1 [rdx|R|w64]
gap (v582(-) = [rax|R|tp];) () 
          v580(R) = X64Lea : MRI v582(R) [immediate:1109]
gap () (v578 = v580(-);) 
          ArchJmp [immediate:1108]
gap () (v578 = v579(-);) 
          ArchJmp [immediate:1107]
gap () () 
          v575(R) = X64Lea : MRI v578(R) [immediate:1106]
gap () () 
          X64Movq : MR v120(R) v575(R)
gap () () 
          v577(R) = X64Lea : MRI v578(R) [immediate:1105]
gap () (v570 = v577(-);) 
          v570(1) = ArchNop v570
gap () () 
          X64MovqCompressTagged : MRI v570(R) [immediate:1104] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v570(R) [immediate:1103] v117(R)
gap () () 
          [constant:576] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v570(R) [immediate:1102] v576(R)
gap () () 
          X64MovqCompressTagged : MRI v570(R) [immediate:1100] [immediate:1101]
gap () () 
          v572(R) = X64Lea : MRI v575(R) [immediate:1099]
gap () () 
          X64Movq : MR v120(R) v572(R)
gap () () 
          v574(R) = X64Lea : MRI v575(R) [immediate:1098]
gap () (v569 = v574(-);) 
          v569(1) = ArchNop v569
gap () () 
          X64MovqCompressTagged : MRI v569(R) [immediate:1097] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v569(R) [immediate:1096] v117(R)
gap () () 
          [constant:573] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v569(R) [immediate:1095] v573(R)
gap () () 
          X64MovqCompressTagged : MRI v569(R) [immediate:1093] [immediate:1094]
gap () () 
          v568(R) = X64Lea : MRI v572(R) [immediate:1092]
gap () () 
          X64Movq : MR v120(R) v568(R)
gap () () 
          v571(R) = X64Lea : MRI v572(R) [immediate:1091]
gap () (v547 = v571(-);) 
          v547(1) = ArchNop v547
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1090] v329(R)
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1088] [immediate:1089]
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1087] v570(R)
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1085] [immediate:1086]
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1083] [immediate:1084]
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1082] v569(R)
gap () () 
          v566(R) = X64Lea : MRI v568(R) [immediate:1081]
gap () () 
          X64Movq : MR v120(R) v566(R)
gap () () 
          v567(R) = X64Lea : MRI v568(R) [immediate:1080]
gap () (v544 = v567(-);) 
          v544(1) = ArchNop v544
gap () () 
          X64MovqCompressTagged : MRI v544(R) [immediate:1079] v116(R)
gap () () 
          X64MovqCompressTagged : MRI v544(R) [immediate:1078] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v544(R) [immediate:1077] v547(R)
gap () () 
          X64MovqCompressTagged : MRI v544(R) [immediate:1075] [immediate:1076]
gap () () 
          v564(R) = X64Lea : MRI v566(R) [immediate:1074]
gap () () 
          X64Movq : MR v120(R) v564(R)
gap () () 
          v565(R) = X64Lea : MRI v566(R) [immediate:1073]
gap () (v559 = v565(-);) 
          v559(1) = ArchNop v559
gap () () 
          X64MovqCompressTagged : MRI v559(R) [immediate:1072] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v559(R) [immediate:1070] [immediate:1071]
gap () () 
          X64Movsd : MRI v559(R) [immediate:1069] v369(R)
gap () () 
          X64Movsd : MRI v559(R) [immediate:1068] v369(R)
gap () () 
          X64Movsd : MRI v559(R) [immediate:1067] v369(R)
gap () () 
          X64Movsd : MRI v559(R) [immediate:1066] v369(R)
gap () () 
          v557(R) = X64Lea : MRI v564(R) [immediate:1065]
gap () () 
          X64Movq : MR v120(R) v557(R)
gap () () 
          v563(R) = X64Lea : MRI v564(R) [immediate:1064]
gap () (v558 = v563(-);) 
          v558(1) = ArchNop v558
gap () () 
          X64MovqCompressTagged : MRI v558(R) [immediate:1063] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v558(R) [immediate:1062] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v558(R) [immediate:1061] v559(R)
gap () () 
          [constant:562] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v558(R) [immediate:1059] [immediate:1060]
gap () (v550(R) = v562(-);) 
          v550(1) = SSEFloat64SilenceNaN v550(R)
gap () () 
          [constant:561] = ArchNop
gap () () 
          X64Movsd : MRI v559(R) [immediate:1058] v550(R)
gap () (v560(R) = v561(-);) 
          v560(1) = SSEFloat64SilenceNaN v560(R)
gap () () 
          X64Movsd : MRI v559(R) [immediate:1057] v560(R)
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1056] v558(R)
gap () () 
          v554(R) = X64Lea : MRI v557(R) [immediate:1055]
gap () () 
          X64Movq : MR v120(R) v554(R)
gap () () 
          v556(R) = X64Lea : MRI v557(R) [immediate:1054]
gap () (v549 = v556(-);) 
          v549(1) = ArchNop v549
gap () () 
          X64MovqCompressTagged : MRI v549(R) [immediate:1053] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v549(R) [immediate:1051] [immediate:1052]
gap () () 
          X64Movsd : MRI v549(R) [immediate:1050] v369(R)
gap () () 
          X64Movsd : MRI v549(R) [immediate:1049] v369(R)
gap () () 
          X64Movsd : MRI v549(R) [immediate:1048] v369(R)
gap () () 
          X64Movsd : MRI v549(R) [immediate:1047] v369(R)
gap () () 
          v555(R) = X64Lea : MRI v554(R) [immediate:1046]
gap () () 
          X64Movq : MR v120(R) v555(R)
gap () () 
          v553(R) = X64Lea : MRI v554(R) [immediate:1045]
gap () (v548 = v553(-);) 
          v548(1) = ArchNop v548
gap () () 
          X64MovqCompressTagged : MRI v548(R) [immediate:1044] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v548(R) [immediate:1043] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v548(R) [immediate:1042] v549(R)
gap () () 
          [constant:552] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v548(R) [immediate:1040] [immediate:1041]
gap () (v551(R) = v552(-);) 
          v551(1) = SSEFloat64SilenceNaN v551(R)
gap () () 
          X64Movsd : MRI v549(R) [immediate:1039] v551(R)
gap () () 
          X64Movsd : MRI v549(R) [immediate:1038] v550(R)
gap () () 
          X64MovqCompressTagged : MRI v547(R) [immediate:1037] v548(R)
gap () () 
          v543(R) = X64MovqDecompressAnyTagged : MRI v542(R) [immediate:1036]
gap () () 
          X64Test32 && deoptimize if equal v543 #1 #168 v2(S) v3(-) v4(S) v540(S) [immediate:1034] v541(-) [immediate:1035] v542(S) v544(-) v543(-)
gap () () 
          v546(R) = X64MovqDecompressTaggedPointer : MRI v543(R) [immediate:1033]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v546(R) [immediate:1030] #1068 #167 v2(S) v3(-) v4(S) v540(S) [immediate:1031] v541(-) [immediate:1032] v542(S) v544(-) v543(-)
gap () () 
          v545(R) = X64MovqDecompressTaggedPointer : MRI v543(R) [immediate:1029]
gap () () 
          X64Cmp && deoptimize if not equal v545(R) v346 #166 v2(S) v3(-) v4(S) v540(S) [immediate:1027] v541(-) [immediate:1028] v542(S) v544(-) v543(-)
gap () () 
          X64Push v541(-)
gap () () 
          X64Push v544(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v543(-); [rax|R|w64] = v108(-); [rsi|R|t] = v359(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:1024] #-1 #165 v2(S) v3(S) v4(S) v540(S) [immediate:1025] v541(S) [immediate:1026] v542(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap (v491(-) = [rax|R|t];) () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:1023] v491(R)
gap () () 
          v490(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:1022]
gap () () 
          X64Test32 && deoptimize if equal v490 #1 #164 v2(S) v3(-) v4(S) v490(-) v491(-) [immediate:1021]
gap () () 
          v537(R) = X64MovqDecompressTaggedPointer : MRI v490(R) [immediate:1020]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v537(R) [immediate:1018] #1068 #163 v2(S) v3(-) v4(S) v490(-) v491(-) [immediate:1019]
gap () () 
          [constant:535] = ArchNop
gap () () 
          v536(R) = X64MovqDecompressTaggedPointer : MRI v490(R) [immediate:1017]
gap () () 
          X64Cmp && deoptimize if not equal v535(R) v536 #162 v2(S) v3(-) v4(S) v490(-) v491(-) [immediate:1016]
gap () () 
          v492(R) = X64MovqDecompressTaggedPointer : MRI v490(R) [immediate:1015]
gap () () 
          v534(R) = X64MovqDecompressTaggedPointer : MRI v484(R) [immediate:1014]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v534(R) [immediate:1010] v483(R) #161 v2(S) v3(-) v4(S) v490(S) [immediate:1011] v491(-) [immediate:1012] v492(S) [immediate:1013]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v534(R) [immediate:1006] v481(R) #160 v2(S) v3(-) v4(S) v490(S) [immediate:1007] v491(-) [immediate:1008] v492(S) [immediate:1009]
gap () () 
          v529(R) = X64Movq : MR v120(R)
gap () () 
          v533(R) = X64Lea : MRI v529(R) [immediate:1005]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v533(R) [immediate:1003] [immediate:1004]
gap () () 
          ArchJmp [immediate:1002]
gap () ([rdx|R|w64] = v479(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:1001] #-1 [rdx|R|w64]
gap (v532(-) = [rax|R|tp];) () 
          v530(R) = X64Lea : MRI v532(R) [immediate:1000]
gap () (v528 = v530(-);) 
          ArchJmp [immediate:999]
gap () (v528 = v529(-);) 
          ArchJmp [immediate:998]
gap () () 
          v525(R) = X64Lea : MRI v528(R) [immediate:997]
gap () () 
          X64Movq : MR v120(R) v525(R)
gap () () 
          v527(R) = X64Lea : MRI v528(R) [immediate:996]
gap () (v520 = v527(-);) 
          v520(1) = ArchNop v520
gap () () 
          X64MovqCompressTagged : MRI v520(R) [immediate:995] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v520(R) [immediate:994] v117(R)
gap () () 
          [constant:526] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v520(R) [immediate:993] v526(R)
gap () () 
          X64MovqCompressTagged : MRI v520(R) [immediate:991] [immediate:992]
gap () () 
          v522(R) = X64Lea : MRI v525(R) [immediate:990]
gap () () 
          X64Movq : MR v120(R) v522(R)
gap () () 
          v524(R) = X64Lea : MRI v525(R) [immediate:989]
gap () (v519 = v524(-);) 
          v519(1) = ArchNop v519
gap () () 
          X64MovqCompressTagged : MRI v519(R) [immediate:988] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v519(R) [immediate:987] v117(R)
gap () () 
          [constant:523] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v519(R) [immediate:986] v523(R)
gap () () 
          X64MovqCompressTagged : MRI v519(R) [immediate:984] [immediate:985]
gap () () 
          v518(R) = X64Lea : MRI v522(R) [immediate:983]
gap () () 
          X64Movq : MR v120(R) v518(R)
gap () () 
          v521(R) = X64Lea : MRI v522(R) [immediate:982]
gap () (v497 = v521(-);) 
          v497(1) = ArchNop v497
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:981] v329(R)
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:979] [immediate:980]
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:977] [immediate:978]
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:976] v520(R)
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:974] [immediate:975]
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:973] v519(R)
gap () () 
          v516(R) = X64Lea : MRI v518(R) [immediate:972]
gap () () 
          X64Movq : MR v120(R) v516(R)
gap () () 
          v517(R) = X64Lea : MRI v518(R) [immediate:971]
gap () (v494 = v517(-);) 
          v494(1) = ArchNop v494
gap () () 
          X64MovqCompressTagged : MRI v494(R) [immediate:970] v116(R)
gap () () 
          X64MovqCompressTagged : MRI v494(R) [immediate:969] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v494(R) [immediate:968] v497(R)
gap () () 
          X64MovqCompressTagged : MRI v494(R) [immediate:966] [immediate:967]
gap () () 
          v514(R) = X64Lea : MRI v516(R) [immediate:965]
gap () () 
          X64Movq : MR v120(R) v514(R)
gap () () 
          v515(R) = X64Lea : MRI v516(R) [immediate:964]
gap () (v509 = v515(-);) 
          v509(1) = ArchNop v509
gap () () 
          X64MovqCompressTagged : MRI v509(R) [immediate:963] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v509(R) [immediate:961] [immediate:962]
gap () () 
          X64Movsd : MRI v509(R) [immediate:960] v369(R)
gap () () 
          X64Movsd : MRI v509(R) [immediate:959] v369(R)
gap () () 
          X64Movsd : MRI v509(R) [immediate:958] v369(R)
gap () () 
          X64Movsd : MRI v509(R) [immediate:957] v369(R)
gap () () 
          v507(R) = X64Lea : MRI v514(R) [immediate:956]
gap () () 
          X64Movq : MR v120(R) v507(R)
gap () () 
          v513(R) = X64Lea : MRI v514(R) [immediate:955]
gap () (v508 = v513(-);) 
          v508(1) = ArchNop v508
gap () () 
          X64MovqCompressTagged : MRI v508(R) [immediate:954] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v508(R) [immediate:953] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v508(R) [immediate:952] v509(R)
gap () () 
          [constant:512] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v508(R) [immediate:950] [immediate:951]
gap () (v500(R) = v512(-);) 
          v500(1) = SSEFloat64SilenceNaN v500(R)
gap () () 
          [constant:511] = ArchNop
gap () () 
          X64Movsd : MRI v509(R) [immediate:949] v500(R)
gap () (v510(R) = v511(-);) 
          v510(1) = SSEFloat64SilenceNaN v510(R)
gap () () 
          X64Movsd : MRI v509(R) [immediate:948] v510(R)
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:947] v508(R)
gap () () 
          v504(R) = X64Lea : MRI v507(R) [immediate:946]
gap () () 
          X64Movq : MR v120(R) v504(R)
gap () () 
          v506(R) = X64Lea : MRI v507(R) [immediate:945]
gap () (v499 = v506(-);) 
          v499(1) = ArchNop v499
gap () () 
          X64MovqCompressTagged : MRI v499(R) [immediate:944] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v499(R) [immediate:942] [immediate:943]
gap () () 
          X64Movsd : MRI v499(R) [immediate:941] v369(R)
gap () () 
          X64Movsd : MRI v499(R) [immediate:940] v369(R)
gap () () 
          X64Movsd : MRI v499(R) [immediate:939] v369(R)
gap () () 
          X64Movsd : MRI v499(R) [immediate:938] v369(R)
gap () () 
          v505(R) = X64Lea : MRI v504(R) [immediate:937]
gap () () 
          X64Movq : MR v120(R) v505(R)
gap () () 
          v503(R) = X64Lea : MRI v504(R) [immediate:936]
gap () (v498 = v503(-);) 
          v498(1) = ArchNop v498
gap () () 
          X64MovqCompressTagged : MRI v498(R) [immediate:935] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v498(R) [immediate:934] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v498(R) [immediate:933] v499(R)
gap () () 
          [constant:502] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v498(R) [immediate:931] [immediate:932]
gap () (v501(R) = v502(-);) 
          v501(1) = SSEFloat64SilenceNaN v501(R)
gap () () 
          X64Movsd : MRI v499(R) [immediate:930] v501(R)
gap () () 
          X64Movsd : MRI v499(R) [immediate:929] v500(R)
gap () () 
          X64MovqCompressTagged : MRI v497(R) [immediate:928] v498(R)
gap () () 
          v493(R) = X64MovqDecompressAnyTagged : MRI v492(R) [immediate:927]
gap () () 
          X64Test32 && deoptimize if equal v493 #1 #159 v2(S) v3(-) v4(S) v490(S) [immediate:925] v491(-) [immediate:926] v492(S) v494(-) v493(-)
gap () () 
          v496(R) = X64MovqDecompressTaggedPointer : MRI v493(R) [immediate:924]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v496(R) [immediate:921] #1068 #158 v2(S) v3(-) v4(S) v490(S) [immediate:922] v491(-) [immediate:923] v492(S) v494(-) v493(-)
gap () () 
          v495(R) = X64MovqDecompressTaggedPointer : MRI v493(R) [immediate:920]
gap () () 
          X64Cmp && deoptimize if not equal v495(R) v346 #157 v2(S) v3(-) v4(S) v490(S) [immediate:918] v491(-) [immediate:919] v492(S) v494(-) v493(-)
gap () () 
          X64Push v491(-)
gap () () 
          X64Push v494(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v493(-); [rax|R|w64] = v108(-); [rsi|R|t] = v359(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:915] #-1 #156 v2(S) v3(S) v4(S) v490(S) [immediate:916] v491(S) [immediate:917] v492(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap (v437(-) = [rax|R|t];) () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:914] v437(R)
gap () () 
          v436(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:913]
gap () () 
          X64Test32 && deoptimize if equal v436 #1 #155 v2(S) v3(-) v4(S) v436(-) v437(-) [immediate:912]
gap () () 
          v487(R) = X64MovqDecompressTaggedPointer : MRI v436(R) [immediate:911]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v487(R) [immediate:909] #1068 #154 v2(S) v3(-) v4(S) v436(-) v437(-) [immediate:910]
gap () () 
          [constant:485] = ArchNop
gap () () 
          v486(R) = X64MovqDecompressTaggedPointer : MRI v436(R) [immediate:908]
gap () () 
          X64Cmp && deoptimize if not equal v485(R) v486 #153 v2(S) v3(-) v4(S) v436(-) v437(-) [immediate:907]
gap () () 
          v438(R) = X64MovqDecompressTaggedPointer : MRI v436(R) [immediate:906]
gap () () 
          v482(R) = X64MovqDecompressTaggedPointer : MRI v484(R) [immediate:905]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v482(R) [immediate:901] v483(R) #152 v2(S) v3(-) v4(S) v436(S) [immediate:902] v437(-) [immediate:903] v438(S) [immediate:904]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v482(R) [immediate:897] v481(R) #151 v2(S) v3(-) v4(S) v436(S) [immediate:898] v437(-) [immediate:899] v438(S) [immediate:900]
gap () () 
          v475(R) = X64Movq : MR v120(R)
gap () () 
          v480(R) = X64Lea : MRI v475(R) [immediate:896]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v480(R) [immediate:894] [immediate:895]
gap () () 
          ArchJmp [immediate:893]
gap () ([rdx|R|w64] = v479(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:892] #-1 [rdx|R|w64]
gap (v478(-) = [rax|R|tp];) () 
          v476(R) = X64Lea : MRI v478(R) [immediate:891]
gap () (v474 = v476(-);) 
          ArchJmp [immediate:890]
gap () (v474 = v475(-);) 
          ArchJmp [immediate:889]
gap () () 
          v471(R) = X64Lea : MRI v474(R) [immediate:888]
gap () () 
          X64Movq : MR v120(R) v471(R)
gap () () 
          v473(R) = X64Lea : MRI v474(R) [immediate:887]
gap () (v466 = v473(-);) 
          v466(1) = ArchNop v466
gap () () 
          X64MovqCompressTagged : MRI v466(R) [immediate:886] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v466(R) [immediate:885] v117(R)
gap () () 
          [constant:472] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v466(R) [immediate:884] v472(R)
gap () () 
          X64MovqCompressTagged : MRI v466(R) [immediate:882] [immediate:883]
gap () () 
          v468(R) = X64Lea : MRI v471(R) [immediate:881]
gap () () 
          X64Movq : MR v120(R) v468(R)
gap () () 
          v470(R) = X64Lea : MRI v471(R) [immediate:880]
gap () (v465 = v470(-);) 
          v465(1) = ArchNop v465
gap () () 
          X64MovqCompressTagged : MRI v465(R) [immediate:879] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v465(R) [immediate:878] v117(R)
gap () () 
          [constant:469] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v465(R) [immediate:877] v469(R)
gap () () 
          X64MovqCompressTagged : MRI v465(R) [immediate:875] [immediate:876]
gap () () 
          v464(R) = X64Lea : MRI v468(R) [immediate:874]
gap () () 
          X64Movq : MR v120(R) v464(R)
gap () () 
          v467(R) = X64Lea : MRI v468(R) [immediate:873]
gap () (v443 = v467(-);) 
          v443(1) = ArchNop v443
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:872] v329(R)
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:870] [immediate:871]
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:868] [immediate:869]
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:866] [immediate:867]
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:865] v466(R)
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:864] v465(R)
gap () () 
          v462(R) = X64Lea : MRI v464(R) [immediate:863]
gap () () 
          X64Movq : MR v120(R) v462(R)
gap () () 
          v463(R) = X64Lea : MRI v464(R) [immediate:862]
gap () (v440 = v463(-);) 
          v440(1) = ArchNop v440
gap () () 
          X64MovqCompressTagged : MRI v440(R) [immediate:861] v116(R)
gap () () 
          X64MovqCompressTagged : MRI v440(R) [immediate:860] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v440(R) [immediate:859] v443(R)
gap () () 
          X64MovqCompressTagged : MRI v440(R) [immediate:857] [immediate:858]
gap () () 
          v460(R) = X64Lea : MRI v462(R) [immediate:856]
gap () () 
          X64Movq : MR v120(R) v460(R)
gap () () 
          v461(R) = X64Lea : MRI v462(R) [immediate:855]
gap () (v455 = v461(-);) 
          v455(1) = ArchNop v455
gap () () 
          X64MovqCompressTagged : MRI v455(R) [immediate:854] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v455(R) [immediate:852] [immediate:853]
gap () () 
          X64Movsd : MRI v455(R) [immediate:851] v369(R)
gap () () 
          X64Movsd : MRI v455(R) [immediate:850] v369(R)
gap () () 
          X64Movsd : MRI v455(R) [immediate:849] v369(R)
gap () () 
          X64Movsd : MRI v455(R) [immediate:848] v369(R)
gap () () 
          v453(R) = X64Lea : MRI v460(R) [immediate:847]
gap () () 
          X64Movq : MR v120(R) v453(R)
gap () () 
          v459(R) = X64Lea : MRI v460(R) [immediate:846]
gap () (v454 = v459(-);) 
          v454(1) = ArchNop v454
gap () () 
          X64MovqCompressTagged : MRI v454(R) [immediate:845] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v454(R) [immediate:844] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v454(R) [immediate:843] v455(R)
gap () () 
          [constant:458] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v454(R) [immediate:841] [immediate:842]
gap () (v446(R) = v458(-);) 
          v446(1) = SSEFloat64SilenceNaN v446(R)
gap () () 
          [constant:457] = ArchNop
gap () () 
          X64Movsd : MRI v455(R) [immediate:840] v446(R)
gap () (v456(R) = v457(-);) 
          v456(1) = SSEFloat64SilenceNaN v456(R)
gap () () 
          X64Movsd : MRI v455(R) [immediate:839] v456(R)
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:838] v454(R)
gap () () 
          v450(R) = X64Lea : MRI v453(R) [immediate:837]
gap () () 
          X64Movq : MR v120(R) v450(R)
gap () () 
          v452(R) = X64Lea : MRI v453(R) [immediate:836]
gap () (v445 = v452(-);) 
          v445(1) = ArchNop v445
gap () () 
          X64MovqCompressTagged : MRI v445(R) [immediate:835] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v445(R) [immediate:833] [immediate:834]
gap () () 
          X64Movsd : MRI v445(R) [immediate:832] v369(R)
gap () () 
          X64Movsd : MRI v445(R) [immediate:831] v369(R)
gap () () 
          X64Movsd : MRI v445(R) [immediate:830] v369(R)
gap () () 
          X64Movsd : MRI v445(R) [immediate:829] v369(R)
gap () () 
          v451(R) = X64Lea : MRI v450(R) [immediate:828]
gap () () 
          X64Movq : MR v120(R) v451(R)
gap () () 
          v449(R) = X64Lea : MRI v450(R) [immediate:827]
gap () (v444 = v449(-);) 
          v444(1) = ArchNop v444
gap () () 
          X64MovqCompressTagged : MRI v444(R) [immediate:826] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v444(R) [immediate:825] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v444(R) [immediate:824] v445(R)
gap () () 
          [constant:448] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v444(R) [immediate:822] [immediate:823]
gap () (v447(R) = v448(-);) 
          v447(1) = SSEFloat64SilenceNaN v447(R)
gap () () 
          X64Movsd : MRI v445(R) [immediate:821] v447(R)
gap () () 
          X64Movsd : MRI v445(R) [immediate:820] v446(R)
gap () () 
          X64MovqCompressTagged : MRI v443(R) [immediate:819] v444(R)
gap () () 
          v439(R) = X64MovqDecompressAnyTagged : MRI v438(R) [immediate:818]
gap () () 
          X64Test32 && deoptimize if equal v439 #1 #150 v2(S) v3(-) v4(S) v436(S) [immediate:816] v437(-) [immediate:817] v438(S) v440(-) v439(-)
gap () () 
          v442(R) = X64MovqDecompressTaggedPointer : MRI v439(R) [immediate:815]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v442(R) [immediate:812] #1068 #149 v2(S) v3(-) v4(S) v436(S) [immediate:813] v437(-) [immediate:814] v438(S) v440(-) v439(-)
gap () () 
          v441(R) = X64MovqDecompressTaggedPointer : MRI v439(R) [immediate:811]
gap () () 
          X64Cmp && deoptimize if not equal v441(R) v346 #148 v2(S) v3(-) v4(S) v436(S) [immediate:809] v437(-) [immediate:810] v438(S) v440(-) v439(-)
gap () () 
          X64Push v437(-)
gap () () 
          X64Push v440(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v439(-); [rax|R|w64] = v108(-); [rsi|R|t] = v359(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:806] #-1 #147 v2(S) v3(S) v4(S) v436(S) [immediate:807] v437(S) [immediate:808] v438(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap (v352(-) = [rax|R|t];) () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:805] v352(R)
gap () () 
          v351(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:804]
gap () () 
          v432(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:803]
gap () () 
          X64Test32 && deoptimize if equal v432 #1 #146 v2(S) v3(-) v4(S) v351(-) v352(-) v432(-) [immediate:802]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v432(R) [immediate:800] v146(R) #145 v2(S) v3(-) v4(S) v351(-) v352(-) v432(-) [immediate:801]
gap () () 
          v430(R) = X64MovqDecompressTaggedPointer : MRI v432(R) [immediate:799]
gap () () 
          v433(R) = X64MovqDecompressTaggedSigned : MRI v432(R) [immediate:798]
gap () (v431(R) = v433(-);) 
          v431(1) = X64Sar32 v431(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v431 #8 #144 v2(S) v3(-) v4(S) v351(-) v352(-) v432(-) [immediate:797]
gap () () 
          v428(R) = X64MovqDecompressAnyTagged : MRI v430(R) [immediate:796]
gap () () 
          [constant:429] = ArchNop
gap () ([rdx|R|t] = v428(-); [rcx|R|t] = v31(-); [rax|R|w64] = v429(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:795] #-1 #143 v2(S) v3(S) v4(S) v351(S) v352(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v422(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v422 #1 #142 v2(S) v3(-) v4(S) v351(-) v352(-) v422(-) [immediate:794]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v422(R) [immediate:792] v80(R) #141 v2(S) v3(-) v4(S) v351(-) v352(-) v422(-) [immediate:793]
gap () () 
          v425(R) = X64MovqDecompressTaggedPointer : MRI v422(R) [immediate:791]
gap () () 
          v427(R) = X64MovqDecompressTaggedSigned : MRI v422(R) [immediate:790]
gap () (v426(R) = v427(-);) 
          v426(1) = X64Sar32 v426(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v426 #0 #140 v2(S) v3(-) v4(S) v351(-) v352(-) v422(-) [immediate:789]
gap () () 
          v353(R) = X64Movsd : MRI v425(R) [immediate:788]
gap () () 
          v424(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:787]
gap () () 
          X64Test32 && deoptimize if equal v424 #1 #139 v2(S) v3(-) v4(S) v351(-) v352(-) v422(-) [immediate:786]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v424(R) [immediate:784] v146(R) #138 v2(S) v3(-) v4(S) v351(-) v352(-) v422(-) [immediate:785]
gap () () 
          v420(R) = X64MovqDecompressTaggedPointer : MRI v424(R) [immediate:783]
gap () () 
          v423(R) = X64MovqDecompressTaggedSigned : MRI v424(R) [immediate:782]
gap () (v421(R) = v423(-);) 
          v421(1) = X64Sar32 v421(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v421 #8 #137 v2(S) v3(-) v4(S) v351(-) v352(-) v422(-) [immediate:781]
gap () () 
          v418(R) = X64MovqDecompressAnyTagged : MRI v420(R) [immediate:780]
gap () () 
          [constant:419] = ArchNop
gap () ([rdx|R|t] = v418(-); [rcx|R|t] = v31(-); [rax|R|w64] = v419(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:779] #-1 #136 v2(S) v3(S) v4(S) v351(S) v352(S) v353(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v412(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v412 #1 #135 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v412(-) [immediate:778]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v412(R) [immediate:776] v80(R) #134 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v412(-) [immediate:777]
gap () () 
          v415(R) = X64MovqDecompressTaggedPointer : MRI v412(R) [immediate:775]
gap () () 
          v417(R) = X64MovqDecompressTaggedSigned : MRI v412(R) [immediate:774]
gap () (v416(R) = v417(-);) 
          v416(1) = X64Sar32 v416(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v416 #1 #133 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v412(-) [immediate:773]
gap () () 
          v354(R) = X64Movsd : MRI v415(R) [immediate:772]
gap () () 
          v414(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:771]
gap () () 
          X64Test32 && deoptimize if equal v414 #1 #132 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v412(-) [immediate:770]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v414(R) [immediate:768] v146(R) #131 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v412(-) [immediate:769]
gap () () 
          v410(R) = X64MovqDecompressTaggedPointer : MRI v414(R) [immediate:767]
gap () () 
          v413(R) = X64MovqDecompressTaggedSigned : MRI v414(R) [immediate:766]
gap () (v411(R) = v413(-);) 
          v411(1) = X64Sar32 v411(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v411 #8 #130 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v412(-) [immediate:765]
gap () () 
          v408(R) = X64MovqDecompressAnyTagged : MRI v410(R) [immediate:764]
gap () () 
          [constant:409] = ArchNop
gap () ([rdx|R|t] = v408(-); [rcx|R|t] = v31(-); [rax|R|w64] = v409(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:763] #-1 #129 v2(S) v3(S) v4(S) v351(S) v352(S) v353(S) v354(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v403(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v403 #1 #128 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v354(-) v403(-) [immediate:762]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v403(R) [immediate:760] v80(R) #127 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v354(-) v403(-) [immediate:761]
gap () () 
          v405(R) = X64MovqDecompressTaggedPointer : MRI v403(R) [immediate:759]
gap () () 
          v407(R) = X64MovqDecompressTaggedSigned : MRI v403(R) [immediate:758]
gap () (v406(R) = v407(-);) 
          v406(1) = X64Sar32 v406(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v406 #2 #126 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v354(-) v403(-) [immediate:757]
gap () () 
          v355(R) = X64Movsd : MRI v405(R) [immediate:756]
gap () () 
          X64Test32 && deoptimize if equal v351 #1 #125 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v354(-) v403(-) [immediate:755]
gap () () 
          v404(R) = X64MovqDecompressTaggedPointer : MRI v351(R) [immediate:754]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v404(R) [immediate:752] #1068 #124 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v354(-) v403(-) [immediate:753]
gap () () 
          v402(R) = X64MovqDecompressTaggedPointer : MRI v351(R) [immediate:751]
gap () () 
          X64Cmp && deoptimize if not equal v401(R) v402 #123 v2(S) v3(-) v4(S) v351(-) v352(-) v353(-) v354(-) v403(-) [immediate:750]
gap () () 
          v356(R) = X64MovqDecompressTaggedPointer : MRI v351(R) [immediate:749]
gap () () 
          v395(R) = X64Movq : MR v120(R)
gap () () 
          v400(R) = X64Lea : MRI v395(R) [immediate:748]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v400(R) [immediate:746] [immediate:747]
gap () () 
          ArchJmp [immediate:745]
gap () ([rdx|R|w64] = v399(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:744] #-1 [rdx|R|w64]
gap (v398(-) = [rax|R|tp];) () 
          v396(R) = X64Lea : MRI v398(R) [immediate:743]
gap () (v394 = v396(-);) 
          ArchJmp [immediate:742]
gap () (v394 = v395(-);) 
          ArchJmp [immediate:741]
gap () () 
          v391(R) = X64Lea : MRI v394(R) [immediate:740]
gap () () 
          X64Movq : MR v120(R) v391(R)
gap () () 
          v393(R) = X64Lea : MRI v394(R) [immediate:739]
gap () (v389 = v393(-);) 
          v389(1) = ArchNop v389
gap () () 
          X64MovqCompressTagged : MRI v389(R) [immediate:738] v110(R)
gap () () 
          X64MovqCompressTagged : MRI v389(R) [immediate:737] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v389(R) [immediate:736] v392(R)
gap () () 
          X64MovqCompressTagged : MRI v389(R) [immediate:734] [immediate:735]
gap () () 
          v388(R) = X64Lea : MRI v391(R) [immediate:733]
gap () () 
          X64Movq : MR v120(R) v388(R)
gap () () 
          v390(R) = X64Lea : MRI v391(R) [immediate:732]
gap () (v362 = v390(-);) 
          v362(1) = ArchNop v362
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:731] v329(R)
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:729] [immediate:730]
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:727] [immediate:728]
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:725] [immediate:726]
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:723] [immediate:724]
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:722] v389(R)
gap () () 
          v386(R) = X64Lea : MRI v388(R) [immediate:721]
gap () () 
          X64Movq : MR v120(R) v386(R)
gap () () 
          v387(R) = X64Lea : MRI v388(R) [immediate:720]
gap () (v358 = v387(-);) 
          v358(1) = ArchNop v358
gap () () 
          X64MovqCompressTagged : MRI v358(R) [immediate:719] v116(R)
gap () () 
          X64MovqCompressTagged : MRI v358(R) [immediate:718] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v358(R) [immediate:717] v362(R)
gap () () 
          X64MovqCompressTagged : MRI v358(R) [immediate:715] [immediate:716]
gap () () 
          v384(R) = X64Lea : MRI v386(R) [immediate:714]
gap () () 
          X64Movq : MR v120(R) v384(R)
gap () () 
          v385(R) = X64Lea : MRI v386(R) [immediate:713]
gap () (v381 = v385(-);) 
          v381(1) = ArchNop v381
gap () () 
          X64MovqCompressTagged : MRI v381(R) [immediate:712] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v381(R) [immediate:710] [immediate:711]
gap () () 
          X64Movsd : MRI v381(R) [immediate:709] v370(R)
gap () () 
          X64Movsd : MRI v381(R) [immediate:708] v369(R)
gap () () 
          X64Movsd : MRI v381(R) [immediate:707] v369(R)
gap () () 
          X64Movsd : MRI v381(R) [immediate:706] v369(R)
gap () () 
          v379(R) = X64Lea : MRI v384(R) [immediate:705]
gap () () 
          X64Movq : MR v120(R) v379(R)
gap () () 
          v383(R) = X64Lea : MRI v384(R) [immediate:704]
gap () (v380 = v383(-);) 
          v380(1) = ArchNop v380
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:703] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:702] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:701] v381(R)
gap () () 
          X64MovqCompressTagged : MRI v380(R) [immediate:699] [immediate:700]
gap () (v382(R) = v353(-);) 
          v382(1) = SSEFloat64SilenceNaN v382(R)
gap () () 
          X64Movsd : MRI v381(R) [immediate:698] v382(R)
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:697] v380(R)
gap () () 
          v377(R) = X64Lea : MRI v379(R) [immediate:696]
gap () () 
          X64Movq : MR v120(R) v377(R)
gap () () 
          v378(R) = X64Lea : MRI v379(R) [immediate:695]
gap () (v374 = v378(-);) 
          v374(1) = ArchNop v374
gap () () 
          X64MovqCompressTagged : MRI v374(R) [immediate:694] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v374(R) [immediate:692] [immediate:693]
gap () () 
          X64Movsd : MRI v374(R) [immediate:691] v369(R)
gap () () 
          X64Movsd : MRI v374(R) [immediate:690] v370(R)
gap () () 
          X64Movsd : MRI v374(R) [immediate:689] v369(R)
gap () () 
          X64Movsd : MRI v374(R) [immediate:688] v369(R)
gap () () 
          v372(R) = X64Lea : MRI v377(R) [immediate:687]
gap () () 
          X64Movq : MR v120(R) v372(R)
gap () () 
          v376(R) = X64Lea : MRI v377(R) [immediate:686]
gap () (v373 = v376(-);) 
          v373(1) = ArchNop v373
gap () () 
          X64MovqCompressTagged : MRI v373(R) [immediate:685] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v373(R) [immediate:684] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v373(R) [immediate:683] v374(R)
gap () () 
          X64MovqCompressTagged : MRI v373(R) [immediate:681] [immediate:682]
gap () (v375(R) = v354(-);) 
          v375(1) = SSEFloat64SilenceNaN v375(R)
gap () () 
          X64Movsd : MRI v374(R) [immediate:680] v375(R)
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:679] v373(R)
gap () () 
          v367(R) = X64Lea : MRI v372(R) [immediate:678]
gap () () 
          X64Movq : MR v120(R) v367(R)
gap () () 
          v371(R) = X64Lea : MRI v372(R) [immediate:677]
gap () (v364 = v371(-);) 
          v364(1) = ArchNop v364
gap () () 
          X64MovqCompressTagged : MRI v364(R) [immediate:676] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v364(R) [immediate:674] [immediate:675]
gap () () 
          X64Movsd : MRI v364(R) [immediate:673] v369(R)
gap () () 
          X64Movsd : MRI v364(R) [immediate:672] v369(R)
gap () () 
          X64Movsd : MRI v364(R) [immediate:671] v370(R)
gap () () 
          X64Movsd : MRI v364(R) [immediate:670] v369(R)
gap () () 
          v368(R) = X64Lea : MRI v367(R) [immediate:669]
gap () () 
          X64Movq : MR v120(R) v368(R)
gap () () 
          v366(R) = X64Lea : MRI v367(R) [immediate:668]
gap () (v363 = v366(-);) 
          v363(1) = ArchNop v363
gap () () 
          X64MovqCompressTagged : MRI v363(R) [immediate:667] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v363(R) [immediate:666] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v363(R) [immediate:665] v364(R)
gap () () 
          X64MovqCompressTagged : MRI v363(R) [immediate:663] [immediate:664]
gap () (v365(R) = v355(-);) 
          v365(1) = SSEFloat64SilenceNaN v365(R)
gap () () 
          X64Movsd : MRI v364(R) [immediate:662] v365(R)
gap () () 
          X64MovqCompressTagged : MRI v362(R) [immediate:661] v363(R)
gap () () 
          v357(R) = X64MovqDecompressAnyTagged : MRI v356(R) [immediate:660]
gap () () 
          X64Test32 && deoptimize if equal v357 #1 #122 v2(S) v3(-) v4(S) v351(S) [immediate:659] v352(-) v353(-) v354(-) v355(-) v356(S) v358(-) v357(-)
gap () () 
          v361(R) = X64MovqDecompressTaggedPointer : MRI v357(R) [immediate:658]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v361(R) [immediate:656] #1068 #121 v2(S) v3(-) v4(S) v351(S) [immediate:657] v352(-) v353(-) v354(-) v355(-) v356(S) v358(-) v357(-)
gap () () 
          v360(R) = X64MovqDecompressTaggedPointer : MRI v357(R) [immediate:655]
gap () () 
          X64Cmp && deoptimize if not equal v360(R) v346 #120 v2(S) v3(-) v4(S) v351(S) [immediate:654] v352(-) v353(-) v354(-) v355(-) v356(S) v358(-) v357(-)
gap () () 
          X64Push v352(-)
gap () () 
          X64Push v358(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v357(-); [rax|R|w64] = v108(-); [rsi|R|t] = v359(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:652] #-1 #119 v2(S) v3(S) v4(S) v351(S) [immediate:653] v352(S) v353(S) v354(S) v355(S) v356(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap (v153(-) = [rax|R|t];) () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:651] v153(R)
gap () () 
          v152(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:650]
gap () () 
          v154(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:649]
gap () () 
          X64Test32 && deoptimize if equal v152 #1 #118 v2(S) v3(-) v4(S) v152(-) v153(-) v154(-)
gap () () 
          v348(R) = X64MovqDecompressTaggedPointer : MRI v152(R) [immediate:648]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v348(R) [immediate:647] #1068 #117 v2(S) v3(-) v4(S) v152(-) v153(-) v154(-)
gap () () 
          v347(R) = X64MovqDecompressTaggedPointer : MRI v152(R) [immediate:646]
gap () () 
          X64Cmp && deoptimize if not equal v346(R) v347 #116 v2(S) v3(-) v4(S) v152(-) v153(-) v154(-)
gap () () 
          v155(R) = X64Movl : MRI v152(R) [immediate:645]
gap () () 
          v340(R) = X64Movq : MR v120(R)
gap () () 
          [constant:344] = ArchNop
gap () () 
          v345(R) = X64Lea : MRI v340(R) [immediate:644]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v345(R) [immediate:642] [immediate:643]
gap () () 
          ArchJmp [immediate:641]
gap () ([rdx|R|w64] = v344(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:640] #-1 [rdx|R|w64]
gap (v343(-) = [rax|R|tp];) () 
          v341(R) = X64Lea : MRI v343(R) [immediate:639]
gap () (v339 = v341(-);) 
          ArchJmp [immediate:638]
gap () (v339 = v340(-);) 
          ArchJmp [immediate:637]
gap () () 
          v337(R) = X64Lea : MRI v339(R) [immediate:636]
gap () () 
          X64Movq : MR v120(R) v337(R)
gap () () 
          v338(R) = X64Lea : MRI v339(R) [immediate:635]
gap () (v328 = v338(-);) 
          v328(1) = ArchNop v328
gap () () 
          X64MovqCompressTagged : MRI v328(R) [immediate:634] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v328(R) [immediate:633] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v328(R) [immediate:632] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v328(R) [immediate:630] [immediate:631]
gap () () 
          v335(R) = X64Lea : MRI v337(R) [immediate:629]
gap () () 
          X64Movq : MR v120(R) v335(R)
gap () () 
          v336(R) = X64Lea : MRI v337(R) [immediate:628]
gap () (v327 = v336(-);) 
          v327(1) = ArchNop v327
gap () () 
          X64MovqCompressTagged : MRI v327(R) [immediate:627] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v327(R) [immediate:626] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v327(R) [immediate:625] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v327(R) [immediate:623] [immediate:624]
gap () () 
          v333(R) = X64Lea : MRI v335(R) [immediate:622]
gap () () 
          X64Movq : MR v120(R) v333(R)
gap () () 
          v334(R) = X64Lea : MRI v335(R) [immediate:621]
gap () (v326 = v334(-);) 
          v326(1) = ArchNop v326
gap () () 
          X64MovqCompressTagged : MRI v326(R) [immediate:620] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v326(R) [immediate:619] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v326(R) [immediate:618] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v326(R) [immediate:616] [immediate:617]
gap () () 
          v331(R) = X64Lea : MRI v333(R) [immediate:615]
gap () () 
          X64Movq : MR v120(R) v331(R)
gap () () 
          v332(R) = X64Lea : MRI v333(R) [immediate:614]
gap () (v325 = v332(-);) 
          v325(1) = ArchNop v325
gap () () 
          X64MovqCompressTagged : MRI v325(R) [immediate:613] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v325(R) [immediate:612] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v325(R) [immediate:611] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v325(R) [immediate:609] [immediate:610]
gap () () 
          v323(R) = X64Lea : MRI v331(R) [immediate:608]
gap () () 
          X64Movq : MR v120(R) v323(R)
gap () () 
          v330(R) = X64Lea : MRI v331(R) [immediate:607]
gap () (v321 = v330(-);) 
          v321(1) = ArchNop v321
gap () () 
          X64MovqCompressTagged : MRI v321(R) [immediate:606] v329(R)
gap () () 
          X64MovqCompressTagged : MRI v321(R) [immediate:604] [immediate:605]
gap () () 
          X64MovqCompressTagged : MRI v321(R) [immediate:603] v328(R)
gap () () 
          X64MovqCompressTagged : MRI v321(R) [immediate:602] v327(R)
gap () () 
          X64MovqCompressTagged : MRI v321(R) [immediate:601] v326(R)
gap () () 
          X64MovqCompressTagged : MRI v321(R) [immediate:600] v325(R)
gap () () 
          v324(R) = X64Lea : MRI v323(R) [immediate:599]
gap () () 
          X64Movq : MR v120(R) v324(R)
gap () () 
          v322(R) = X64Lea : MRI v323(R) [immediate:598]
gap () (v148 = v322(-);) 
          v148(1) = ArchNop v148
gap () () 
          [constant:107] = ArchNop
gap () () 
          X64MovqCompressTagged : MRI v148(R) [immediate:597] v116(R)
gap () () 
          X64MovqCompressTagged : MRI v148(R) [immediate:596] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v148(R) [immediate:595] v321(R)
gap () () 
          X64MovqCompressTagged : MRI v148(R) [immediate:593] [immediate:594]
gap () (v159 = v6(-);) 
          ArchJmp [immediate:592]
gap () () 
          X64Cmp32 && branch if unsigned less than v159 #4 [immediate:590] [immediate:591]
gap () () 
          v318(R) = X64MovqDecompressTaggedPointer : MRI v148(R) [immediate:589]
gap () () 
          v320(R) = X64MovqDecompressTaggedSigned : MRI v148(R) [immediate:588]
gap () (v319(R) = v320(-);) 
          v319(1) = X64Sar32 v319(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v159(R) v319 #115 v2(S) v3(-) v4(S) v152(S) [immediate:586] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:587]
gap () () 
          v264(R) = X64MovqDecompressAnyTagged : MR4I v318(R) v159(R) [immediate:585]
gap () () 
          X64Test32 && deoptimize if equal v153 #1 #114 v2(S) v3(-) v4(S) v152(S) [immediate:583] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:584]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v153(R) [immediate:580] v116(R) #113 v2(S) v3(-) v4(S) v152(S) [immediate:581] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:582]
gap () () 
          v290(R) = X64MovqDecompressTaggedPointer : MRI v153(R) [immediate:579]
gap () () 
          v317(R) = X64MovqDecompressTaggedSigned : MRI v153(R) [immediate:578]
gap () (v316(R) = v317(-);) 
          v316(1) = X64Sar32 v316(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v159(R) v316 #112 v2(S) v3(-) v4(S) v152(S) [immediate:576] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:577]
gap () () 
          v313(R) = X64MovqDecompressAnyTagged : MR4I v290(R) v159(R) [immediate:575]
gap () () 
          X64Test32 && deoptimize if equal v313 #1 #111 v2(S) v3(-) v4(S) v152(S) [immediate:573] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:574]
gap () () 
          X64Cmp32 : MRI && branch if equal v313(R) [immediate:570] v110(R) [immediate:571] [immediate:572]
gap () () 
          ArchJmp [immediate:569]
gap () () 
          [constant:315] = ArchNop
gap () () 
          X64Push v313(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v315(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:568] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:567]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v313(R) [immediate:563] v80(R) #110 v2(S) v3(-) v4(S) v152(S) [immediate:564] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:565] [immediate:566]
gap () () 
          v297(R) = X64MovqDecompressTaggedPointer : MRI v313(R) [immediate:562]
gap () () 
          v312(R) = X64MovqDecompressTaggedSigned : MRI v313(R) [immediate:561]
gap () (v298(R) = v312(-);) 
          v298(1) = X64Sar32 v298(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v298 #0 #109 v2(S) v3(-) v4(S) v152(S) [immediate:558] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:559] [immediate:560]
gap () () 
          v261(R) = X64Movsd : MRI v297(R) [immediate:557]
gap () () 
          X64Test32 && deoptimize if equal v154 #1 #108 v2(S) v3(-) v4(S) v152(S) [immediate:554] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:555] [immediate:556]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v154(R) [immediate:550] v116(R) #107 v2(S) v3(-) v4(S) v152(S) [immediate:551] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:552] [immediate:553]
gap () () 
          v282(R) = X64MovqDecompressTaggedPointer : MRI v154(R) [immediate:549]
gap () () 
          v311(R) = X64MovqDecompressTaggedSigned : MRI v154(R) [immediate:548]
gap () (v283(R) = v311(-);) 
          v283(1) = X64Sar32 v283(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v283 #0 #106 v2(S) v3(-) v4(S) v152(S) [immediate:545] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:546] [immediate:547]
gap () () 
          v308(R) = X64MovqDecompressAnyTagged : MRI v282(R) [immediate:544]
gap () () 
          X64Test32 && deoptimize if equal v308 #1 #105 v2(S) v3(-) v4(S) v152(S) [immediate:541] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:542] [immediate:543]
gap () () 
          X64Cmp32 : MRI && branch if equal v308(R) [immediate:538] v110(R) [immediate:539] [immediate:540]
gap () () 
          ArchJmp [immediate:537]
gap () () 
          [constant:310] = ArchNop
gap () () 
          X64Push v308(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v310(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:536] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:535]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v308(R) [immediate:531] v80(R) #104 v2(S) v3(-) v4(S) v152(S) [immediate:532] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:533] [immediate:534]
gap () () 
          v305(R) = X64MovqDecompressTaggedPointer : MRI v308(R) [immediate:530]
gap () () 
          v307(R) = X64MovqDecompressTaggedSigned : MRI v308(R) [immediate:529]
gap () (v306(R) = v307(-);) 
          v306(1) = X64Sar32 v306(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v306 #0 #103 v2(S) v3(-) v4(S) v152(S) [immediate:526] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:527] [immediate:528]
gap () () 
          v260(R) = X64Movsd : MRI v305(R) [immediate:525]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v298 #1 #102 v2(S) v3(-) v4(S) v152(S) [immediate:522] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:523] [immediate:524]
gap () () 
          v263(R) = X64Movsd : MRI v297(R) [immediate:521]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v283 #1 #101 v2(S) v3(-) v4(S) v152(S) [immediate:518] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:519] [immediate:520]
gap () () 
          v302(R) = X64MovqDecompressAnyTagged : MRI v282(R) [immediate:517]
gap () () 
          X64Test32 && deoptimize if equal v302 #1 #100 v2(S) v3(-) v4(S) v152(S) [immediate:514] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:515] [immediate:516]
gap () () 
          X64Cmp32 : MRI && branch if equal v302(R) [immediate:511] v110(R) [immediate:512] [immediate:513]
gap () () 
          ArchJmp [immediate:510]
gap () () 
          [constant:304] = ArchNop
gap () () 
          X64Push v302(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v304(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:509] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:508]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v302(R) [immediate:504] v80(R) #99 v2(S) v3(-) v4(S) v152(S) [immediate:505] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:506] [immediate:507]
gap () () 
          v299(R) = X64MovqDecompressTaggedPointer : MRI v302(R) [immediate:503]
gap () () 
          v301(R) = X64MovqDecompressTaggedSigned : MRI v302(R) [immediate:502]
gap () (v300(R) = v301(-);) 
          v300(1) = X64Sar32 v300(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v300 #0 #98 v2(S) v3(-) v4(S) v152(S) [immediate:499] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:500] [immediate:501]
gap () () 
          v262(R) = X64Movsd : MRI v299(R) [immediate:498]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v298 #2 #97 v2(S) v3(-) v4(S) v152(S) [immediate:495] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:496] [immediate:497]
gap () () 
          v259(R) = X64Movsd : MRI v297(R) [immediate:494]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v283 #2 #96 v2(S) v3(-) v4(S) v152(S) [immediate:491] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:492] [immediate:493]
gap () () 
          v294(R) = X64MovqDecompressAnyTagged : MRI v282(R) [immediate:490]
gap () () 
          X64Test32 && deoptimize if equal v294 #1 #95 v2(S) v3(-) v4(S) v152(S) [immediate:487] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:488] [immediate:489]
gap () () 
          X64Cmp32 : MRI && branch if equal v294(R) [immediate:484] v110(R) [immediate:485] [immediate:486]
gap () () 
          ArchJmp [immediate:483]
gap () () 
          [constant:296] = ArchNop
gap () () 
          X64Push v294(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v296(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:482] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:481]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v294(R) [immediate:477] v80(R) #94 v2(S) v3(-) v4(S) v152(S) [immediate:478] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:479] [immediate:480]
gap () () 
          v291(R) = X64MovqDecompressTaggedPointer : MRI v294(R) [immediate:476]
gap () () 
          v293(R) = X64MovqDecompressTaggedSigned : MRI v294(R) [immediate:475]
gap () (v292(R) = v293(-);) 
          v292(1) = X64Sar32 v292(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v292 #0 #93 v2(S) v3(-) v4(S) v152(S) [immediate:472] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:473] [immediate:474]
gap () () 
          v258(R) = X64Movsd : MRI v291(R) [immediate:471]
gap () () 
          v287(R) = X64MovqDecompressAnyTagged : MR4I v290(R) v159(R) [immediate:470]
gap () () 
          X64Test32 && deoptimize if equal v287 #1 #92 v2(S) v3(-) v4(S) v152(S) [immediate:467] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:468] [immediate:469]
gap () () 
          X64Cmp32 : MRI && branch if equal v287(R) [immediate:464] v110(R) [immediate:465] [immediate:466]
gap () () 
          ArchJmp [immediate:463]
gap () () 
          [constant:289] = ArchNop
gap () () 
          X64Push v287(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v289(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:462] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:461]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v287(R) [immediate:457] v80(R) #91 v2(S) v3(-) v4(S) v152(S) [immediate:458] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:459] [immediate:460]
gap () () 
          v284(R) = X64MovqDecompressTaggedPointer : MRI v287(R) [immediate:456]
gap () () 
          v286(R) = X64MovqDecompressTaggedSigned : MRI v287(R) [immediate:455]
gap () (v285(R) = v286(-);) 
          v285(1) = X64Sar32 v285(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v285 #3 #90 v2(S) v3(-) v4(S) v152(S) [immediate:452] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:453] [immediate:454]
gap () () 
          v255(R) = X64Movsd : MRI v284(R) [immediate:451]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v283 #3 #89 v2(S) v3(-) v4(S) v152(S) [immediate:448] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:449] [immediate:450]
gap () () 
          v279(R) = X64MovqDecompressAnyTagged : MRI v282(R) [immediate:447]
gap () () 
          X64Test32 && deoptimize if equal v279 #1 #88 v2(S) v3(-) v4(S) v152(S) [immediate:444] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:445] [immediate:446]
gap () () 
          X64Cmp32 : MRI && branch if equal v279(R) [immediate:441] v110(R) [immediate:442] [immediate:443]
gap () () 
          ArchJmp [immediate:440]
gap () () 
          [constant:281] = ArchNop
gap () () 
          X64Push v279(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v281(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:439] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:438]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v279(R) [immediate:434] v80(R) #87 v2(S) v3(-) v4(S) v152(S) [immediate:435] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:436] [immediate:437]
gap () () 
          v276(R) = X64MovqDecompressTaggedPointer : MRI v279(R) [immediate:433]
gap () () 
          v278(R) = X64MovqDecompressTaggedSigned : MRI v279(R) [immediate:432]
gap () (v277(R) = v278(-);) 
          v277(1) = X64Sar32 v277(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v277 #0 #86 v2(S) v3(-) v4(S) v152(S) [immediate:429] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:430] [immediate:431]
gap () () 
          v254(R) = X64Movsd : MRI v276(R) [immediate:428]
gap () () 
          X64Test32 && deoptimize if equal v264 #1 #85 v2(S) v3(-) v4(S) v152(S) [immediate:425] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:426] [immediate:427]
gap () () 
          X64Cmp32 : MRI && branch if equal v264(R) [immediate:422] v110(R) [immediate:423] [immediate:424]
gap () () 
          ArchJmp [immediate:421]
gap () () 
          [constant:275] = ArchNop
gap () () 
          X64Push v264(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v275(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:420] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:419]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v264(R) [immediate:415] v80(R) #84 v2(S) v3(-) v4(S) v152(S) [immediate:416] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:417] [immediate:418]
gap () () 
          v266(R) = X64MovqDecompressTaggedPointer : MRI v264(R) [immediate:414]
gap () () 
          v273(R) = X64MovqDecompressTaggedSigned : MRI v264(R) [immediate:413]
gap () () 
          v271(R) = X64MovqDecompressTaggedSigned : MRI v266(R) [immediate:412]
gap () (v265(R) = v273(-);) 
          v265(1) = X64Sar32 v265(R) #1
gap () () 
          v272(R) = X64Lea32 : MRI v265(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v272 #0 [immediate:410] [immediate:411]
gap () (v270(R) = v271(-);) 
          v270(1) = X64Sar32 v270(R) #1
gap () () 
          X64Cmp32 && branch if unsigned greater than v270 #0 [immediate:408] [immediate:409]
gap () () 
          [constant:269] = ArchNop
gap () ([rax|R|t] = v264(-); [rbx|R|w64] = v268(-); [rsi|R|w64] = v269(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:407] #-1 [rax|R|t] [rbx|R|w64] [rsi|R|w64]
gap (v267(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v267 #1 #83 v2(S) v3(-) v4(S) v152(S) [immediate:404] v153(-) v154(-) v155(S) v148(-) v159(-) [immediate:405] [immediate:406]
gap () (v247 = v267(-);) 
          ArchJmp [immediate:403]
gap () (v247 = v266(-);) 
          ArchJmp [immediate:402]
gap () () 
          X64Cmp32 && branch if unsigned greater than v265 #0 [immediate:400] [immediate:401]
gap () () 
          X64MovqCompressTagged : MRI v264(R) [immediate:398] [immediate:399]
gap () () 
          ArchJmp [immediate:397]
gap () () 
          ArchJmp [immediate:396]
gap () () 
          v256(R) = AVXFloat64Mul v262(R) v263
gap () () 
          v257(R) = AVXFloat64Mul v260(R) v261
gap () () 
          v252(R) = AVXFloat64Mul v258(R) v259
gap () () 
          v253(R) = AVXFloat64Add v256(R) v257
gap () () 
          v250(R) = AVXFloat64Mul v254(R) v255
gap () () 
          v251(R) = AVXFloat64Add v252(R) v253
gap () () 
          v249(R) = AVXFloat64Add v250(R) v251
gap () () 
          X64Movsd : MRI v247(R) [immediate:395] v249(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:393] [immediate:394]
gap () () 
          [constant:246] = ArchNop
gap () () 
          [constant:245] = ArchNop
gap () ([rbx|R|w64] = v245(-); [rax|R|w64] = v6(-); [rsi|R|t] = v246(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:391] #-1 #82 v2(S) v3(S) v4(S) v152(S) [immediate:392] v153(S) v154(S) v155(S) v148(S) v159(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:390]
gap () () 
          ArchJmp [immediate:389]
gap () (v185 = v84(-);) 
          ArchJmp [immediate:388]
gap () () 
          X64Cmp32 && branch if unsigned less than v185 #4 [immediate:386] [immediate:387]
gap () () 
          v241(R) = X64MovqDecompressTaggedPointer : MRI v148(R) [immediate:385]
gap () () 
          v243(R) = X64MovqDecompressTaggedSigned : MRI v148(R) [immediate:384]
gap () (v242(R) = v243(-);) 
          v242(1) = X64Sar32 v242(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v159(R) v242 #81 v2(S) v3(-) v4(S) v152(S) [immediate:382] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:383]
gap () () 
          v182(R) = X64MovqDecompressAnyTagged : MR4I v241(R) v159(R) [immediate:381]
gap () () 
          v212(R) = X64MovqDecompressTaggedPointer : MRI v153(R) [immediate:380]
gap () () 
          v240(R) = X64MovqDecompressTaggedSigned : MRI v153(R) [immediate:379]
gap () (v239(R) = v240(-);) 
          v239(1) = X64Sar32 v239(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v159(R) v239 #80 v2(S) v3(-) v4(S) v152(S) [immediate:377] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:378]
gap () () 
          v236(R) = X64MovqDecompressAnyTagged : MR4I v212(R) v159(R) [immediate:376]
gap () () 
          X64Test32 && deoptimize if equal v236 #1 #79 v2(S) v3(-) v4(S) v152(S) [immediate:374] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:375]
gap () () 
          X64Cmp32 : MRI && branch if equal v236(R) [immediate:371] v110(R) [immediate:372] [immediate:373]
gap () () 
          ArchJmp [immediate:370]
gap () () 
          [constant:238] = ArchNop
gap () () 
          X64Push v236(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v238(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:369] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:368]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v236(R) [immediate:365] v80(R) #78 v2(S) v3(-) v4(S) v152(S) [immediate:366] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:367]
gap () () 
          v220(R) = X64MovqDecompressTaggedPointer : MRI v236(R) [immediate:364]
gap () () 
          v235(R) = X64MovqDecompressTaggedSigned : MRI v236(R) [immediate:363]
gap () (v221(R) = v235(-);) 
          v221(1) = X64Sar32 v221(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v221 #0 #77 v2(S) v3(-) v4(S) v152(S) [immediate:361] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:362]
gap () () 
          v179(R) = X64Movsd : MRI v220(R) [immediate:360]
gap () () 
          v204(R) = X64MovqDecompressTaggedPointer : MRI v154(R) [immediate:359]
gap () () 
          v234(R) = X64MovqDecompressTaggedSigned : MRI v154(R) [immediate:358]
gap () (v205(R) = v234(-);) 
          v205(1) = X64Sar32 v205(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v205 #0 #76 v2(S) v3(-) v4(S) v152(S) [immediate:356] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:357]
gap () () 
          v231(R) = X64MovqDecompressAnyTagged : MRI v204(R) [immediate:355]
gap () () 
          X64Test32 && deoptimize if equal v231 #1 #75 v2(S) v3(-) v4(S) v152(S) [immediate:353] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:354]
gap () () 
          X64Cmp32 : MRI && branch if equal v231(R) [immediate:350] v110(R) [immediate:351] [immediate:352]
gap () () 
          ArchJmp [immediate:349]
gap () () 
          [constant:233] = ArchNop
gap () () 
          X64Push v231(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v233(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:348] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:347]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v231(R) [immediate:344] v80(R) #74 v2(S) v3(-) v4(S) v152(S) [immediate:345] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:346]
gap () () 
          v228(R) = X64MovqDecompressTaggedPointer : MRI v231(R) [immediate:343]
gap () () 
          v230(R) = X64MovqDecompressTaggedSigned : MRI v231(R) [immediate:342]
gap () (v229(R) = v230(-);) 
          v229(1) = X64Sar32 v229(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v185(R) v229 #73 v2(S) v3(-) v4(S) v152(S) [immediate:340] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:341]
gap () () 
          v178(R) = X64Movsd : MR8I v228(R) v185(R) [immediate:339]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v221 #1 #72 v2(S) v3(-) v4(S) v152(S) [immediate:337] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:338]
gap () () 
          v181(R) = X64Movsd : MRI v220(R) [immediate:336]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v205 #1 #71 v2(S) v3(-) v4(S) v152(S) [immediate:334] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:335]
gap () () 
          v225(R) = X64MovqDecompressAnyTagged : MRI v204(R) [immediate:333]
gap () () 
          X64Test32 && deoptimize if equal v225 #1 #70 v2(S) v3(-) v4(S) v152(S) [immediate:331] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:332]
gap () () 
          X64Cmp32 : MRI && branch if equal v225(R) [immediate:328] v110(R) [immediate:329] [immediate:330]
gap () () 
          ArchJmp [immediate:327]
gap () () 
          [constant:227] = ArchNop
gap () () 
          X64Push v225(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v227(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:326] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:325]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v225(R) [immediate:322] v80(R) #69 v2(S) v3(-) v4(S) v152(S) [immediate:323] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:324]
gap () () 
          v222(R) = X64MovqDecompressTaggedPointer : MRI v225(R) [immediate:321]
gap () () 
          v224(R) = X64MovqDecompressTaggedSigned : MRI v225(R) [immediate:320]
gap () (v223(R) = v224(-);) 
          v223(1) = X64Sar32 v223(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v185(R) v223 #68 v2(S) v3(-) v4(S) v152(S) [immediate:318] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:319]
gap () () 
          v180(R) = X64Movsd : MR8I v222(R) v185(R) [immediate:317]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v221 #2 #67 v2(S) v3(-) v4(S) v152(S) [immediate:315] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:316]
gap () () 
          v177(R) = X64Movsd : MRI v220(R) [immediate:314]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v205 #2 #66 v2(S) v3(-) v4(S) v152(S) [immediate:312] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:313]
gap () () 
          v217(R) = X64MovqDecompressAnyTagged : MRI v204(R) [immediate:311]
gap () () 
          X64Test32 && deoptimize if equal v217 #1 #65 v2(S) v3(-) v4(S) v152(S) [immediate:309] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:310]
gap () () 
          X64Cmp32 : MRI && branch if equal v217(R) [immediate:306] v110(R) [immediate:307] [immediate:308]
gap () () 
          ArchJmp [immediate:305]
gap () () 
          [constant:219] = ArchNop
gap () () 
          X64Push v217(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v219(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:304] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:303]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v217(R) [immediate:300] v80(R) #64 v2(S) v3(-) v4(S) v152(S) [immediate:301] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:302]
gap () () 
          v214(R) = X64MovqDecompressTaggedPointer : MRI v217(R) [immediate:299]
gap () () 
          v216(R) = X64MovqDecompressTaggedSigned : MRI v217(R) [immediate:298]
gap () (v215(R) = v216(-);) 
          v215(1) = X64Sar32 v215(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v185(R) v215 #63 v2(S) v3(-) v4(S) v152(S) [immediate:296] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:297]
gap () () 
          v176(R) = X64Movsd : MR8I v214(R) v185(R) [immediate:295]
gap () () 
          v209(R) = X64MovqDecompressAnyTagged : MR4I v212(R) v159(R) [immediate:294]
gap () () 
          X64Test32 && deoptimize if equal v209 #1 #62 v2(S) v3(-) v4(S) v152(S) [immediate:292] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:293]
gap () () 
          X64Cmp32 : MRI && branch if equal v209(R) [immediate:289] v110(R) [immediate:290] [immediate:291]
gap () () 
          ArchJmp [immediate:288]
gap () () 
          [constant:211] = ArchNop
gap () () 
          X64Push v209(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v211(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:287] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:286]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v209(R) [immediate:283] v80(R) #61 v2(S) v3(-) v4(S) v152(S) [immediate:284] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:285]
gap () () 
          v206(R) = X64MovqDecompressTaggedPointer : MRI v209(R) [immediate:282]
gap () () 
          v208(R) = X64MovqDecompressTaggedSigned : MRI v209(R) [immediate:281]
gap () (v207(R) = v208(-);) 
          v207(1) = X64Sar32 v207(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v207 #3 #60 v2(S) v3(-) v4(S) v152(S) [immediate:279] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:280]
gap () () 
          v173(R) = X64Movsd : MRI v206(R) [immediate:278]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v205 #3 #59 v2(S) v3(-) v4(S) v152(S) [immediate:276] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:277]
gap () () 
          v201(R) = X64MovqDecompressAnyTagged : MRI v204(R) [immediate:275]
gap () () 
          X64Test32 && deoptimize if equal v201 #1 #58 v2(S) v3(-) v4(S) v152(S) [immediate:273] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:274]
gap () () 
          X64Cmp32 : MRI && branch if equal v201(R) [immediate:270] v110(R) [immediate:271] [immediate:272]
gap () () 
          ArchJmp [immediate:269]
gap () () 
          [constant:203] = ArchNop
gap () () 
          X64Push v201(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v203(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:268] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:267]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v201(R) [immediate:264] v80(R) #57 v2(S) v3(-) v4(S) v152(S) [immediate:265] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:266]
gap () () 
          v198(R) = X64MovqDecompressTaggedPointer : MRI v201(R) [immediate:263]
gap () () 
          v200(R) = X64MovqDecompressTaggedSigned : MRI v201(R) [immediate:262]
gap () (v199(R) = v200(-);) 
          v199(1) = X64Sar32 v199(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v185(R) v199 #56 v2(S) v3(-) v4(S) v152(S) [immediate:260] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:261]
gap () () 
          v172(R) = X64Movsd : MR8I v198(R) v185(R) [immediate:259]
gap () () 
          X64Test32 && deoptimize if equal v182 #1 #55 v2(S) v3(-) v4(S) v152(S) [immediate:257] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:258]
gap () () 
          X64Cmp32 : MRI && branch if equal v182(R) [immediate:254] v110(R) [immediate:255] [immediate:256]
gap () () 
          ArchJmp [immediate:253]
gap () () 
          [constant:197] = ArchNop
gap () () 
          X64Push v182(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v197(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:252] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:251]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v182(R) [immediate:248] v80(R) #54 v2(S) v3(-) v4(S) v152(S) [immediate:249] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:250]
gap () () 
          v187(R) = X64MovqDecompressTaggedPointer : MRI v182(R) [immediate:247]
gap () () 
          v195(R) = X64MovqDecompressTaggedSigned : MRI v182(R) [immediate:246]
gap () (v186(R) = v195(-);) 
          v186(1) = X64Sar32 v186(R) #1
gap () () 
          v194(R) = X64MovqDecompressTaggedSigned : MRI v187(R) [immediate:245]
gap () (v192(R) = v194(-);) 
          v192(1) = X64Sar32 v192(R) #1
gap () () 
          v193(R) = X64Lea32 : MRI v186(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v185(R) v193 #53 v2(S) v3(-) v4(S) v152(S) [immediate:243] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:244]
gap () () 
          X64Cmp32 && branch if unsigned less than v185(R) v192 [immediate:241] [immediate:242]
gap () () 
          [constant:190] = ArchNop
gap () () 
          v191(R) = X64Lea32 : MR1 v185(R) v185(R)
gap () ([rax|R|t] = v182(-); [rbx|R|w32] = v191(-); [rsi|R|w64] = v190(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:240] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v188(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v188 #1 #52 v2(S) v3(-) v4(S) v152(S) [immediate:238] v153(-) v154(-) v155(S) v148(-) v159(-) v185(-) [immediate:239]
gap () (v164 = v188(-);) 
          ArchJmp [immediate:237]
gap () (v164 = v187(-);) 
          ArchJmp [immediate:236]
gap () () 
          v161(R) = X64Lea32 : MRI v185(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v185(R) v186 [immediate:234] [immediate:235]
gap () () 
          v184(R) = X64Lea32 : MR1 v161(R) v161(R)
gap () () 
          X64MovqCompressTagged : MRI v182(R) [immediate:233] v184(R)
gap () () 
          ArchJmp [immediate:232]
gap () () 
          ArchJmp [immediate:231]
gap () () 
          v174(R) = AVXFloat64Mul v180(R) v181
gap () () 
          v175(R) = AVXFloat64Mul v178(R) v179
gap () () 
          v170(R) = AVXFloat64Mul v176(R) v177
gap () () 
          v171(R) = AVXFloat64Add v174(R) v175
gap () () 
          v168(R) = AVXFloat64Mul v172(R) v173
gap () () 
          v169(R) = AVXFloat64Add v170(R) v171
gap () () 
          v167(R) = AVXFloat64Add v168(R) v169
gap () () 
          X64Movsd : MR8I v164(R) v185(R) [immediate:230] v167(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:228] [immediate:229]
gap () () 
          [constant:163] = ArchNop
gap () () 
          [constant:162] = ArchNop
gap () ([rbx|R|w64] = v162(-); [rax|R|w64] = v6(-); [rsi|R|t] = v163(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:226] #-1 #51 v2(S) v3(S) v4(S) v152(S) [immediate:227] v153(S) v154(S) v155(S) v148(S) v159(S) v161(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:225]
gap () () 
          ArchJmp [immediate:224]
gap () (v185 = v161(-);) 
          ArchJmp [immediate:223]
gap () () 
          v156(R) = X64Lea32 : MRI v159(R) #1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:221] [immediate:222]
gap () () 
          [constant:158] = ArchNop
gap () () 
          [constant:157] = ArchNop
gap () ([rbx|R|w64] = v157(-); [rax|R|w64] = v6(-); [rsi|R|t] = v158(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:219] #-1 #50 v2(S) v3(S) v4(S) v152(S) [immediate:220] v153(S) v154(S) v155(S) v148(S) v156(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:218]
gap () () 
          ArchJmp [immediate:217]
gap () (v159 = v156(-);) 
          ArchJmp [immediate:216]
gap () () 
          ArchStoreWithWriteBarrier : MRI v4(R) [immediate:215] v148(R)
gap () (v23 = v147(-);) 
          ArchJmp [immediate:214]
gap () () 
          X64Cmp32 && branch if signed greater than v23 #-1 [immediate:212] [immediate:213]
gap () () 
          v145(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:211]
gap () () 
          X64Test32 && deoptimize if equal v145 #1 #49 v2(S) v3(-) v4(S) v23(-) [immediate:210]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v145(R) [immediate:208] v146(R) #48 v2(S) v3(-) v4(S) v23(-) [immediate:209]
gap () () 
          v141(R) = X64MovqDecompressTaggedPointer : MRI v145(R) [immediate:207]
gap () () 
          v144(R) = X64MovqDecompressTaggedSigned : MRI v145(R) [immediate:206]
gap () (v143(R) = v144(-);) 
          v143(1) = X64Sar32 v143(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v23(R) v143 #47 v2(S) v3(-) v4(S) v23(-) [immediate:205]
gap () () 
          v30(R) = X64MovqDecompressAnyTagged : MR4I v141(R) v23(R) [immediate:204]
gap () () 
          v35(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:203]
gap () () 
          v36(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:202]
gap () () 
          [constant:140] = ArchNop
gap () ([rdx|R|t] = v30(-); [rcx|R|t] = v31(-); [rax|R|w64] = v140(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:201] #-1 #46 v2(S) v3(S) v4(S) v23(S) v30(S) v35(S) v36(S) [rdx|R|t] [rcx|R|t] [rax|R|w64] [rsi|R|t]
gap (v37(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v35 #1 #45 v2(S) v3(-) v4(S) v23(-) v30(-) v35(-) v36(-) v37(-)
gap () () 
          v139(R) = X64MovqDecompressTaggedPointer : MRI v35(R) [immediate:200]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v139(R) [immediate:199] #1068 #44 v2(S) v3(-) v4(S) v23(-) v30(-) v35(-) v36(-) v37(-)
gap () () 
          [constant:137] = ArchNop
gap () () 
          v138(R) = X64MovqDecompressTaggedPointer : MRI v35(R) [immediate:198]
gap () () 
          X64Cmp && deoptimize if not equal v137(R) v138 #43 v2(S) v3(-) v4(S) v23(-) v30(-) v35(-) v36(-) v37(-)
gap () () 
          v38(R) = X64Movl : MRI v35(R) [immediate:197]
gap () () 
          [constant:136] = ArchNop
gap () () 
          X64Test32 && branch if equal v136 #1 [immediate:195] [immediate:196]
gap () () 
          v134(R) = X64Movsd : MRI v136(R) [immediate:194]
gap () (v122 = v134(-);) 
          ArchJmp [immediate:193]
gap () (v135(R) = v136(-);) 
          v135(1) = X64Sar32 v135(R) #1
gap () () 
          v133(R) = SSEInt32ToFloat64 v135
gap () (v122 = v133(-);) 
          ArchJmp [immediate:192]
gap () () 
          v126(R) = X64Movq : MR v120(R)
gap () () 
          [constant:130] = ArchNop
gap () () 
          v131(R) = X64Lea : MRI v126(R) [immediate:191]
gap () () 
          X64Cmp : MR && branch if unsigned greater than v132(R) v131(R) [immediate:189] [immediate:190]
gap () () 
          ArchJmp [immediate:188]
gap () ([rdx|R|w64] = v130(-);) 
          [rax|R|tp] = ArchCallCodeObject [immediate:187] #-1 [rdx|R|w64]
gap (v129(-) = [rax|R|tp];) () 
          v127(R) = X64Lea : MRI v129(R) [immediate:186]
gap () (v125 = v127(-);) 
          ArchJmp [immediate:185]
gap () (v125 = v126(-);) 
          ArchJmp [immediate:184]
gap () () 
          v119(R) = X64Lea : MRI v125(R) [immediate:183]
gap () () 
          X64Movq : MR v120(R) v119(R)
gap () () 
          v124(R) = X64Lea : MRI v125(R) [immediate:182]
gap () (v88 = v124(-);) 
          v88(1) = ArchNop v88
gap () () 
          X64MovqCompressTagged : MRI v88(R) [immediate:181] v123(R)
gap () () 
          X64MovqCompressTagged : MRI v88(R) [immediate:179] [immediate:180]
gap () () 
          X64Movsd : MRI v88(R) [immediate:178] v122(R)
gap () () 
          X64Movsd : MRI v88(R) [immediate:177] v122(R)
gap () () 
          X64Movsd : MRI v88(R) [immediate:176] v122(R)
gap () () 
          X64Movsd : MRI v88(R) [immediate:175] v122(R)
gap () () 
          v121(R) = X64Lea : MRI v119(R) [immediate:174]
gap () () 
          X64Movq : MR v120(R) v121(R)
gap () () 
          v118(R) = X64Lea : MRI v119(R) [immediate:173]
gap () (v32 = v118(-);) 
          v32(1) = ArchNop v32
gap () () 
          X64MovqCompressTagged : MRI v32(R) [immediate:172] v80(R)
gap () () 
          X64MovqCompressTagged : MRI v32(R) [immediate:171] v117(R)
gap () () 
          X64MovqCompressTagged : MRI v32(R) [immediate:170] v88(R)
gap () () 
          X64MovqCompressTagged : MRI v32(R) [immediate:168] [immediate:169]
gap () () 
          X64Test32 && deoptimize if equal v36 #1 #42 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:165] v36(-) v37(-) v38(S) v32(-) [immediate:166] [immediate:167]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v36(R) [immediate:161] v116(R) #41 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:162] v36(-) v37(-) v38(S) v32(-) [immediate:163] [immediate:164]
gap () () 
          v113(R) = X64MovqDecompressTaggedPointer : MRI v36(R) [immediate:160]
gap () () 
          v115(R) = X64MovqDecompressTaggedSigned : MRI v36(R) [immediate:159]
gap () (v114(R) = v115(-);) 
          v114(1) = X64Sar32 v114(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v114 #0 #40 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:156] v36(-) v37(-) v38(S) v32(-) [immediate:157] [immediate:158]
gap () () 
          v112(R) = X64MovqDecompressAnyTagged : MRI v113(R) [immediate:155]
gap () () 
          X64Test32 && deoptimize if equal v112 #1 #39 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:152] v36(-) v37(-) v38(S) v32(-) [immediate:153] [immediate:154]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v112(R) [immediate:148] v80(R) #38 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:149] v36(-) v37(-) v38(S) v32(-) [immediate:150] [immediate:151]
gap () () 
          v103(R) = X64MovqDecompressTaggedPointer : MRI v112(R) [immediate:147]
gap () () 
          v111(R) = X64MovqDecompressTaggedSigned : MRI v112(R) [immediate:146]
gap () (v104(R) = v111(-);) 
          v104(1) = X64Sar32 v104(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v104 #0 #37 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:143] v36(-) v37(-) v38(S) v32(-) [immediate:144] [immediate:145]
gap () () 
          v100(R) = X64Movsd : MRI v103(R) [immediate:142]
gap () () 
          X64Test32 && deoptimize if equal v37 #1 #36 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:139] v36(-) v37(-) v38(S) v32(-) [immediate:140] [immediate:141]
gap () () 
          X64Cmp32 : MRI && branch if equal v37(R) [immediate:136] v110(R) [immediate:137] [immediate:138]
gap () () 
          ArchJmp [immediate:135]
gap () () 
          [constant:109] = ArchNop
gap () () 
          X64Push v37(-)
gap () () 
          X64Push v80(-)
gap () ([rbx|R|w64] = v107(-); [rax|R|w64] = v108(-); [rsi|R|w64] = v109(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:134] #-1 [rbx|R|w64] [rax|R|w64] [rsi|R|w64]
gap () () 
          ArchJmp [immediate:133]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v37(R) [immediate:129] v80(R) #35 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:130] v36(-) v37(-) v38(S) v32(-) [immediate:131] [immediate:132]
gap () () 
          v96(R) = X64MovqDecompressTaggedPointer : MRI v37(R) [immediate:128]
gap () () 
          v105(R) = X64MovqDecompressTaggedSigned : MRI v37(R) [immediate:127]
gap () (v102(R) = v105(-);) 
          v102(1) = X64Sar32 v102(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v102 #0 #34 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:124] v36(-) v37(-) v38(S) v32(-) [immediate:125] [immediate:126]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v104 #1 #33 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:121] v36(-) v37(-) v38(S) v32(-) [immediate:122] [immediate:123]
gap () () 
          v101(R) = X64Movsd : MRI v103(R) [immediate:120]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v102 #1 #32 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:117] v36(-) v37(-) v38(S) v32(-) [immediate:118] [immediate:119]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v104 #2 #31 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:114] v36(-) v37(-) v38(S) v32(-) [immediate:115] [immediate:116]
gap () () 
          v99(R) = X64Movsd : MRI v103(R) [immediate:113]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v102 #2 #30 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:110] v36(-) v37(-) v38(S) v32(-) [immediate:111] [immediate:112]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v104 #3 #29 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:107] v36(-) v37(-) v38(S) v32(-) [immediate:108] [immediate:109]
gap () () 
          v95(R) = X64Movsd : MRI v103(R) [immediate:106]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v102 #3 #28 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:103] v36(-) v37(-) v38(S) v32(-) [immediate:104] [immediate:105]
gap () () 
          v97(R) = AVXFloat64Mul : MRI v101(R) v96(R) [immediate:102]
gap () () 
          v98(R) = AVXFloat64Mul : MRI v100(R) v96(R) [immediate:101]
gap () () 
          v93(R) = AVXFloat64Mul : MRI v99(R) v96(R) [immediate:100]
gap () () 
          v94(R) = AVXFloat64Add v97(R) v98
gap () () 
          v91(R) = AVXFloat64Mul : MRI v95(R) v96(R) [immediate:99]
gap () () 
          v92(R) = AVXFloat64Add v93(R) v94
gap () () 
          v90(R) = AVXFloat64Add v91(R) v92
gap () () 
          X64MovqCompressTagged : MRI v32(R) [immediate:97] [immediate:98]
gap () () 
          X64Movsd : MRI v88(R) [immediate:96] v90(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:94] [immediate:95]
gap () () 
          [constant:87] = ArchNop
gap () () 
          [constant:86] = ArchNop
gap () ([rbx|R|w64] = v86(-); [rax|R|w64] = v6(-); [rsi|R|t] = v87(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:92] #-1 #27 v2(S) v3(S) v4(S) v23(S) v30(S) v35(S) [immediate:93] v36(S) v37(S) v38(S) v32(S) #1 [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:91]
gap () () 
          ArchJmp [immediate:90]
gap () (v62 = v84(-);) 
          ArchJmp [immediate:89]
gap () () 
          X64Cmp32 && branch if unsigned less than v62 #4 [immediate:87] [immediate:88]
gap () () 
          v81(R) = X64MovqDecompressTaggedPointer : MRI v36(R) [immediate:86]
gap () () 
          v83(R) = X64MovqDecompressTaggedSigned : MRI v36(R) [immediate:85]
gap () (v82(R) = v83(-);) 
          v82(1) = X64Sar32 v82(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v62(R) v82 #26 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:83] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:84]
gap () () 
          v79(R) = X64MovqDecompressAnyTagged : MR4I v81(R) v62(R) [immediate:82]
gap () () 
          X64Test32 && deoptimize if equal v79 #1 #25 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:80] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:81]
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v79(R) [immediate:77] v80(R) #24 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:78] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:79]
gap () () 
          v75(R) = X64MovqDecompressTaggedPointer : MRI v79(R) [immediate:76]
gap () () 
          v78(R) = X64MovqDecompressTaggedSigned : MRI v79(R) [immediate:75]
gap () (v76(R) = v78(-);) 
          v76(1) = X64Sar32 v76(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v76 #0 #23 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:73] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:74]
gap () () 
          v57(R) = X64Movsd : MRI v75(R) [immediate:72]
gap () () 
          v73(R) = X64MovqDecompressTaggedPointer : MRI v37(R) [immediate:71]
gap () () 
          v77(R) = X64MovqDecompressTaggedSigned : MRI v37(R) [immediate:70]
gap () (v74(R) = v77(-);) 
          v74(1) = X64Sar32 v74(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v74 #0 #22 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:68] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:69]
gap () () 
          v56(R) = X64Movsd : MRI v73(R) [immediate:67]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v76 #1 #21 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:65] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:66]
gap () () 
          v59(R) = X64Movsd : MRI v75(R) [immediate:64]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v74 #1 #20 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:62] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:63]
gap () () 
          v58(R) = X64Movsd : MRI v73(R) [immediate:61]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v76 #2 #19 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:59] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:60]
gap () () 
          v55(R) = X64Movsd : MRI v75(R) [immediate:58]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v74 #2 #18 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:56] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:57]
gap () () 
          v54(R) = X64Movsd : MRI v73(R) [immediate:55]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v76 #3 #17 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:53] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:54]
gap () () 
          v51(R) = X64Movsd : MRI v75(R) [immediate:52]
gap () () 
          X64Cmp32 && deoptimize if unsigned less than or equal v74 #3 #16 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:50] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:51]
gap () () 
          v50(R) = X64Movsd : MRI v73(R) [immediate:49]
gap () () 
          v64(R) = X64MovqDecompressTaggedPointer : MRI v32(R) [immediate:48]
gap () () 
          v71(R) = X64MovqDecompressTaggedSigned : MRI v32(R) [immediate:47]
gap () () 
          v72(R) = X64MovqDecompressTaggedSigned : MRI v64(R) [immediate:46]
gap () (v69(R) = v72(-);) 
          v69(1) = X64Sar32 v69(R) #1
gap () (v63(R) = v71(-);) 
          v63(1) = X64Sar32 v63(R) #1
gap () () 
          v70(R) = X64Lea32 : MRI v63(R) #1
gap () () 
          X64Cmp32 && deoptimize if unsigned greater than or equal v62(R) v70 #15 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:44] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:45]
gap () () 
          X64Cmp32 && branch if unsigned less than v62(R) v69 [immediate:42] [immediate:43]
gap () () 
          v68(R) = X64Lea32 : MR1 v62(R) v62(R)
gap () () 
          [constant:67] = ArchNop
gap () ([rax|R|t] = v32(-); [rbx|R|w32] = v68(-); [rsi|R|w64] = v67(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:41] #-1 [rax|R|t] [rbx|R|w32] [rsi|R|w64]
gap (v65(-) = [rax|R|t];) () 
          X64Test32 && deoptimize if equal v65 #1 #14 v2(S) v3(-) v4(S) v23(-) v30(-) v35(S) [immediate:39] v36(-) v37(-) v38(S) v32(-) v62(-) [immediate:40]
gap () (v42 = v65(-);) 
          ArchJmp [immediate:38]
gap () (v42 = v64(-);) 
          ArchJmp [immediate:37]
gap () () 
          v39(R) = X64Lea32 : MRI v62(R) #1
gap () () 
          X64Cmp32 && branch if unsigned less than v62(R) v63 [immediate:35] [immediate:36]
gap () () 
          v61(R) = X64Lea32 : MR1 v39(R) v39(R)
gap () () 
          X64MovqCompressTagged : MRI v32(R) [immediate:34] v61(R)
gap () () 
          ArchJmp [immediate:33]
gap () () 
          ArchJmp [immediate:32]
gap () () 
          v52(R) = AVXFloat64Mul v58(R) v59
gap () () 
          v53(R) = AVXFloat64Mul v56(R) v57
gap () () 
          v48(R) = AVXFloat64Mul v54(R) v55
gap () () 
          v49(R) = AVXFloat64Add v52(R) v53
gap () () 
          v46(R) = AVXFloat64Mul v50(R) v51
gap () () 
          v47(R) = AVXFloat64Add v48(R) v49
gap () () 
          v45(R) = AVXFloat64Add v46(R) v47
gap () () 
          X64Movsd : MR8I v42(R) v62(R) [immediate:31] v45(R)
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:29] [immediate:30]
gap () () 
          [constant:41] = ArchNop
gap () () 
          [constant:40] = ArchNop
gap () ([rbx|R|w64] = v40(-); [rax|R|w64] = v6(-); [rsi|R|t] = v41(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:27] #-1 #13 v2(S) v3(S) v4(S) v23(S) v30(S) v35(S) [immediate:28] v36(S) v37(S) v38(S) v32(S) v39(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:26]
gap () () 
          ArchJmp [immediate:25]
gap () (v62 = v39(-);) 
          ArchJmp [immediate:24]
gap () () 
          [constant:33] = ArchNop
gap () ([rdx|R|t] = v30(-); [rcx|R|t] = v31(-); [rax|R|t] = v32(-); [rdi|R|w64] = v33(-); [rsi|R|t] = v4(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:23] #-1 #12 v2(S) v3(S) v4(S) v23(S) [rdx|R|t] [rcx|R|t] [rax|R|t] [rdi|R|w64] [rsi|R|t]
gap () () 
          v26(R) = X64Lea32 : MRI v23(R) #-1
gap () () 
          ArchStackPointerGreaterThan : Root && branch if unsigned greater than #80 [immediate:21] [immediate:22]
gap () () 
          [constant:28] = ArchNop
gap () () 
          [constant:27] = ArchNop
gap () ([rbx|R|w64] = v27(-); [rax|R|w64] = v6(-); [rsi|R|t] = v28(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:20] #-1 #11 v2(S) v3(S) v4(S) v26(S) [rbx|R|w64] [rax|R|w64] [rsi|R|t]
gap () () 
          ArchJmp [immediate:19]
gap () () 
          ArchJmp [immediate:18]
gap () (v23 = v26(-);) 
          ArchJmp [immediate:17]
gap () () 
          [constant:7] = ArchNop
gap () () 
          v20(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:16]
gap () () 
          X64Test32 && deoptimize if equal v20 #1 #10 v2(S) v3(-) v4(S) v23(-) [immediate:15]
gap () () 
          v24(R) = X64MovqDecompressTaggedPointer : MRI v20(R) [immediate:14]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v24(R) [immediate:12] #1068 #9 v2(S) v3(-) v4(S) v23(-) [immediate:13]
gap () () 
          [constant:21] = ArchNop
gap () () 
          v22(R) = X64MovqDecompressTaggedPointer : MRI v20(R) [immediate:11]
gap () () 
          X64Cmp && deoptimize if not equal v21(R) v22 #8 v2(S) v3(-) v4(S) v23(-) [immediate:10]
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v20(-); [rax|R|w64] = v6(-); [rsi|R|t] = v7(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:9] #-1 #7 v2(S) v3(S) v4(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () () 
          v11(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:8]
gap () () 
          X64Test32 && deoptimize if equal v11 #1 #6 v2(S) v3(-) v4(S) v11(-)
gap () () 
          X64Cmp32 : MRI && deoptimize if not equal v11(R) [immediate:7] v18(R) #5 v2(S) v3(-) v4(S) v11(-)
gap () () 
          v17(R) = X64MovqDecompressTaggedSigned : MRI v11(R) [immediate:6]
gap () (v16(R) = v17(-);) 
          v16(1) = X64Sar32 v16(R) #1
gap () () 
          v15(R) = X64Lea32 : MRI v16(R) #1
gap () (v14(R) = v15(-);) 
          v14(1) = X64Add32 && deoptimize if overflow v14(R) v15(R) #4 v2(S) v3(-) v4(S) v11(-)
gap () (v13 = v14(-);) 
          v13(1) = ArchNop v13
gap () () 
          X64MovqCompressTagged : MRI v11(R) [immediate:5] v13(R)
gap () () 
          v5(R) = X64MovqDecompressAnyTagged : MRI v4(R) [immediate:4]
gap () () 
          X64Test32 && deoptimize if equal v5 #1 #3 v2(S) v3(-) v4(S) v5(-)
gap () () 
          v10(R) = X64MovqDecompressTaggedPointer : MRI v5(R) [immediate:3]
gap () () 
          X64Cmp16 : MRI && deoptimize if not equal v10(R) [immediate:2] #1068 #2 v2(S) v3(-) v4(S) v5(-)
gap () () 
          [constant:8] = ArchNop
gap () () 
          v9(R) = X64MovqDecompressTaggedPointer : MRI v5(R) [immediate:1]
gap () () 
          X64Cmp && deoptimize if not equal v8(R) v9 #1 v2(S) v3(-) v4(S) v5(-)
gap () () 
          X64Push v0(-)
gap () ([rdi|R|t] = v5(-); [rax|R|w64] = v6(-); [rsi|R|t] = v7(-);) 
          [rax|R|t] = ArchCallCodeObject [immediate:0] #-1 #0 v2(S) v3(S) v4(S) [rdi|R|t] [rax|R|w64] [rsi|R|t]
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
gap () () 
          ArchDebugBreak
gap () () 
          ArchThrowTerminator
gap () ([rax|R|t] = v0(-);) 
          ArchRet #0 [rax|R|t]
print sib pairs
2, v23, v141
2, v159, v212
2, v62, v81
2, v159, v212
2, v159, v241
2, v159, v290
2, v159, v290
2, v159, v318
3, v185, v198
3, v185, v164
3, v185, v214
3, v185, v222
3, v62, v42
3, v185, v228
print modrm pairs
1, v9, v5
1, v15, v16
1, v11, v4
1, v22, v20
1, v39, v62
1, v70, v63
1, v72, v64
1, v71, v32
1, v64, v32
1, v50, v73
1, v51, v75
1, v54, v73
1, v58, v73
1, v77, v37
1, v73, v37
1, v57, v75
1, v78, v79
1, v75, v79
1, v80, v79
1, v83, v36
1, v81, v36
1, v95, v103
1, v99, v103
1, v96, v37
1, v80, v37
1, v110, v37
1, v100, v103
1, v103, v112
1, v112, v113
1, v113, v36
1, v116, v36
1, v118, v119
1, v123, v88
1, v24, v20
1, v124, v125
1, v134, v136
1, v36, v4
1, v35, v4
1, v105, v37
1, v122, v88
1, v144, v145
1, v146, v145
1, v145, v4
1, v148, v4
1, v184, v182
1, v161, v185
1, v193, v186
1, v194, v187
1, v187, v182
1, v80, v182
1, v80, v201
1, v110, v201
1, v173, v206
1, v206, v209
1, v80, v209
1, v110, v209
1, v216, v217
1, v80, v217
1, v110, v217
1, v141, v145
1, v200, v201
1, v217, v204
1, v224, v225
1, v181, v220
1, v177, v220
1, v230, v231
1, v228, v231
1, v404, v351
1, v234, v154
1, v204, v154
1, v235, v236
1, v466, v443
1, v220, v236
1, v26, v23
1, v127, v129
1, v110, v236
1, v240, v153
1, v241, v148
1, v249, v247
1, v671, v4
1, v80, v231
1, v271, v266
1, v266, v264
1, v345, v340
1, v337, v339
1, v80, v279
1, v284, v287
1, v347, v152
1, v80, v287
1, v231, v204
1, v258, v291
1, v465, v443
1, v291, v294
1, v110, v182
1, v301, v302
1, v110, v302
1, v80, v308
1, v110, v308
1, v255, v284
1, v115, v36
1, v282, v154
1, v116, v154
1, v261, v297
1, v312, v313
1, v278, v279
1, v297, v313
1, v80, v313
1, v586, v540
1, v318, v148
1, v354, v415
1, v321, v148
1, v322, v323
1, v329, v321
1, v279, v282
1, v547, v544
1, v276, v279
1, v374, v373
1, v330, v331
1, v332, v333
1, v333, v335
1, v336, v337
1, v110, v264
1, v335, v337
1, v290, v153
1, v341, v343
1, v525, v528
1, v348, v152
1, v355, v405
1, v154, v4
1, v363, v362
1, v305, v308
1, v225, v204
1, v607, v610
1, v365, v364
1, v366, v367
1, v260, v305
1, v371, v372
1, v327, v321
1, v367, v372
1, v376, v377
1, v372, v377
1, v378, v379
1, v595, v590
1, v80, v373
1, v80, v363
1, v80, v380
1, v382, v381
1, v381, v380
1, v379, v384
1, v123, v364
1, v123, v374
1, v123, v381
1, v110, v231
1, v293, v294
1, v362, v358
1, v633, v635
1, v387, v388
1, v444, v443
1, v483, v584
1, v389, v362
1, v373, v362
1, v329, v362
1, v392, v389
1, v469, v465
1, v117, v373
1, v117, v363
1, v117, v380
1, v117, v358
1, v117, v389
1, v110, v389
1, v558, v547
1, v462, v464
1, v393, v394
1, v391, v394
1, v13, v11
1, v461, v462
1, v432, v4
1, v413, v414
1, v396, v398
1, v356, v351
1, v407, v403
1, v326, v321
1, v80, v403
1, v408, v410
1, v410, v414
1, v18, v11
1, v146, v414
1, v415, v412
1, v338, v339
1, v117, v325
1, v117, v326
1, v117, v327
1, v117, v148
1, v117, v328
1, v80, v412
1, v80, v659
1, v405, v403
1, v146, v424
1, v424, v4
1, v380, v362
1, v427, v422
1, v61, v32
1, v146, v671
1, v459, v460
1, v80, v422
1, v307, v308
1, v352, v4
1, v428, v430
1, v146, v432
1, v254, v276
1, v80, v294
1, v212, v153
1, v442, v439
1, v655, v657
1, v452, v453
1, v80, v264
1, v603, v602
1, v620, v619
1, v454, v443
1, v299, v302
1, v456, v455
1, v116, v544
1, v286, v287
1, v446, v445
1, v446, v455
1, v455, v454
1, v443, v440
1, v116, v440
1, v463, v464
1, v131, v126
1, v642, v638
1, v388, v391
1, v402, v351
1, v123, v499
1, v123, v509
1, v353, v425
1, v294, v282
1, v468, v471
1, v417, v412
1, v243, v148
1, v568, v572
1, v470, v471
1, v621, v622
1, v499, v498
1, v481, v482
1, v323, v331
1, v110, v465
1, v110, v466
1, v262, v299
1, v617, v622
1, v483, v482
1, v680, v681
1, v18, v694
1, v473, v474
1, v626, v629
1, v486, v436
1, v436, v4
1, v433, v432
1, v522, v525
1, v208, v209
1, v493, v492
1, v146, v663
1, v117, v548
1, v117, v558
1, v117, v544
1, v117, v569
1, v117, v570
1, v574, v575
1, v534, v484
1, v510, v509
1, v360, v357
1, v320, v148
1, v480, v475
1, v368, v367
1, v375, v374
1, v500, v499
1, v500, v509
1, v110, v225
1, v259, v297
1, v447, v445
1, v497, v494
1, v509, v508
1, v80, v302
1, v88, v32
1, v329, v443
1, v513, v514
1, v222, v225
1, v123, v549
1, v123, v559
1, v430, v432
1, v55, v75
1, v515, v516
1, v514, v516
1, v80, v112
1, v80, v32
1, v681, v678
1, v516, v518
1, v449, v450
1, v519, v497
1, v652, v647
1, v559, v558
1, v636, v632
1, v460, v462
1, v518, v522
1, v329, v497
1, v179, v220
1, v487, v436
1, v523, v519
1, v273, v264
1, v524, v525
1, v272, v265
1, v664, v659
1, v117, v444
1, v117, v440
1, v117, v465
1, v117, v454
1, v117, v466
1, v476, v478
1, v526, v520
1, v505, v504
1, v80, v236
1, v110, v519
1, v110, v520
1, v606, v607
1, v437, v4
1, v501, v499
1, v383, v384
1, v308, v282
1, v567, v568
1, v689, v686
1, v471, v474
1, v450, v453
1, v530, v532
1, v564, v566
1, v533, v529
1, v481, v534
1, v439, v438
1, v536, v490
1, v38, v35
1, v110, v313
1, v563, v564
1, v537, v490
1, v390, v391
1, v490, v4
1, v5, v4
1, v492, v490
1, v520, v497
1, v155, v152
1, v491, v4
1, v495, v493
1, v331, v333
1, v364, v363
1, v630, v631
1, v545, v543
1, v612, v611
1, v546, v543
1, v551, v549
1, v543, v542
1, v420, v424
1, v400, v395
1, v580, v582
1, v152, v4
1, v549, v548
1, v555, v554
1, v453, v460
1, v566, v568
1, v556, v557
1, v20, v4
1, v614, v615
1, v560, v559
1, v138, v35
1, v517, v518
1, v623, v624
1, v361, v357
1, v590, v4
1, v80, v548
1, v80, v558
1, v557, v564
1, v80, v325
1, v80, v326
1, v80, v327
1, v80, v328
1, v369, v374
1, v369, v445
1, v369, v364
1, v369, v455
1, v369, v499
1, v369, v612
1, v369, v549
1, v369, v509
1, v369, v602
1, v369, v559
1, v369, v381
1, v369, v619
1, v571, v572
1, v600, v597
1, v565, v566
1, v80, v225
1, v570, v547
1, v329, v547
1, v496, v493
1, v624, v626
1, v139, v35
1, v573, v569
1, v156, v159
1, v688, v689
1, v572, v575
1, v119, v125
1, v464, v468
1, v637, v590
1, v504, v507
1, v666, v659
1, v116, v494
1, v540, v4
1, v575, v578
1, v481, v584
1, v616, v617
1, v201, v204
1, v602, v601
1, v583, v579
1, v584, v484
1, v325, v321
1, v110, v279
1, v467, v468
1, v121, v119
1, v425, v422
1, v598, v596
1, v554, v557
1, v599, v596
1, v195, v182
1, v541, v4
1, v329, v600
1, v596, v595
1, v56, v73
1, v385, v386
1, v90, v88
1, v423, v424
1, v649, v652
1, v418, v420
1, v608, v607
1, v609, v610
1, v506, v507
1, v622, v624
1, v662, v663
1, v611, v600
1, v357, v356
1, v117, v508
1, v117, v494
1, v117, v519
1, v117, v498
1, v117, v520
1, v613, v612
1, v654, v647
1, v482, v484
1, v377, v379
1, v123, v445
1, v123, v455
1, v619, v618
1, v625, v626
1, v80, v647
1, v577, v578
1, v472, v466
1, v386, v388
1, v527, v528
1, v123, v602
1, v123, v612
1, v123, v619
1, v569, v547
1, v627, v600
1, v17, v11
1, v629, v631
1, v153, v4
1, v667, v669
1, v645, v651
1, v694, v4
1, v117, v611
1, v117, v618
1, v117, v601
1, v117, v597
1, v117, v627
1, v324, v323
1, v610, v615
1, v328, v321
1, v628, v629
1, v311, v154
1, v110, v287
1, v110, v569
1, v110, v570
1, v116, v597
1, v672, v671
1, v334, v335
1, v214, v217
1, v693, v694
1, v605, v640
1, v445, v444
1, v80, v601
1, v80, v611
1, v80, v618
1, v302, v282
1, v601, v600
1, v117, v32
1, v661, v664
1, v640, v638
1, v441, v439
1, v80, v638
1, v483, v534
1, v651, v4
1, v521, v522
1, v451, v450
1, v669, v671
1, v618, v600
1, v110, v627
1, v507, v514
1, v116, v358
1, v548, v547
1, v438, v436
1, v650, v651
1, v542, v540
1, v550, v549
1, v550, v559
1, v663, v4
1, v110, v294
1, v146, v651
1, v370, v374
1, v370, v364
1, v370, v619
1, v370, v381
1, v370, v602
1, v370, v612
1, v392, v627
1, v576, v570
1, v317, v153
1, v414, v4
1, v553, v554
1, v657, v663
1, v384, v386
1, v615, v617
1, v692, v690
1, v591, v4
1, v263, v297
1, v80, v498
1, v80, v508
1, v503, v504
1, v691, v694
1, v59, v75
1, v116, v153
1, v116, v148
1, v498, v497
1, v351, v4
1, v508, v497
1, v80, v444
1, v80, v454
1, v101, v103
1, v643, v645
1, v10, v5
1, v198, v201
1, v639, v590
1, v111, v112
1, v587, v540
assign xmm0 to v661:0
assign 0 to v661:0
assign xmm1 to v592:0
assign 1 to v592:0
assign xmm2 to v660:0
assign 2 to v660:0
assign xmm0 to v649:0
assign 0 to v649:0
assign xmm1 to v593:0
assign 1 to v593:0
assign xmm2 to v648:0
assign 2 to v648:0
assign xmm0 to v605:0
assign 0 to v605:0
assign xmm0 to v605:2
assign 0 to v605:2
v370:1 not intersect with v374:0, removed
v370:2 intersect with v374:0, adding
v370:1 not intersect with v364:0, removed
v370:2 intersect with v364:0, adding
v370:1 not intersect with v381:0, removed
v370:2 intersect with v381:0, adding
assign xmm1 to v370:1
assign 1 to v370:1
v369:1 not intersect with v374:0, removed
v369:2 intersect with v374:0, adding
v369:1 not intersect with v445:0, removed
v369:2 intersect with v445:0, adding
v369:1 not intersect with v364:0, removed
v369:2 intersect with v364:0, adding
v369:1 not intersect with v455:0, removed
v369:2 intersect with v455:0, adding
v369:1 not intersect with v499:0, removed
v369:2 intersect with v499:0, adding
v369:1 not intersect with v549:0, removed
v369:2 intersect with v549:0, adding
v369:1 not intersect with v509:0, removed
v369:2 intersect with v509:0, adding
v369:1 not intersect with v559:0, removed
v369:2 intersect with v559:0, adding
v369:1 not intersect with v381:0, removed
v369:2 intersect with v381:0, adding
assign xmm2 to v369:1
assign 2 to v369:1
assign xmm4 to v620:0
assign 4 to v620:0
assign xmm4 to v613:0
assign 4 to v613:0
assign xmm3 to v594:0
assign 3 to v594:0
assign xmm4 to v604:0
assign 4 to v604:0
assign xmm0 to v603:0
assign 0 to v603:0
blocking v369 pick register xmm0
blocking v370 pick register xmm0
assign xmm0 to v369:3
assign 0 to v369:3
assign xmm1 to v562:1
assign 1 to v562:1
assign xmm1 to v550:0
assign 1 to v550:0
assign xmm2 to v561:1
assign 2 to v561:1
assign xmm2 to v560:0
assign 2 to v560:0
assign xmm2 to v552:1
assign 2 to v552:1
assign xmm2 to v551:0
assign 2 to v551:0
blocking v369 pick register xmm0
assign xmm0 to v369:5
assign 0 to v369:5
assign xmm1 to v512:1
assign 1 to v512:1
assign xmm1 to v500:0
assign 1 to v500:0
assign xmm2 to v511:1
assign 2 to v511:1
assign xmm2 to v510:0
assign 2 to v510:0
assign xmm2 to v502:1
assign 2 to v502:1
assign xmm2 to v501:0
assign 2 to v501:0
blocking v369 pick register xmm0
assign xmm0 to v369:7
assign 0 to v369:7
assign xmm1 to v458:1
assign 1 to v458:1
assign xmm1 to v446:0
assign 1 to v446:0
assign xmm2 to v457:1
assign 2 to v457:1
assign xmm2 to v456:0
assign 2 to v456:0
assign xmm2 to v448:1
assign 2 to v448:1
assign xmm2 to v447:0
assign 2 to v447:0
blocking v369 pick register xmm0
v353:0 not intersect with v425:0, removed
assign xmm0 to v353:0
assign 0 to v353:0
v354:0 not intersect with v415:0, removed
assign xmm0 to v354:0
assign 0 to v354:0
v355:0 not intersect with v405:0, removed
assign xmm0 to v355:0
assign 0 to v355:0
assign xmm0 to v355:3
assign 0 to v355:3
assign xmm1 to v370:3
assign 1 to v370:3
assign xmm2 to v369:9
assign 2 to v369:9
assign xmm4 to v382:0
assign 4 to v382:0
assign xmm4 to v375:0
assign 4 to v375:0
assign xmm1 to v365:0
assign 1 to v365:0
assign xmm0 to v261:0
assign 0 to v261:0
assign xmm0 to v261:2
assign 0 to v261:2
assign xmm1 to v260:0
assign 1 to v260:0
assign xmm2 to v263:0
assign 2 to v263:0
blocking v260 pick register xmm1
assign xmm2 to v263:2
assign 2 to v263:2
assign xmm1 to v260:3
assign 1 to v260:3
assign xmm0 to v261:4
assign 0 to v261:4
assign xmm4 to v262:0
assign 4 to v262:0
assign xmm5 to v259:0
assign 5 to v259:0
blocking v262 pick register xmm4
assign xmm5 to v259:2
assign 5 to v259:2
assign xmm4 to v262:3
assign 4 to v262:3
assign xmm0 to v261:6
assign 0 to v261:6
assign xmm1 to v260:5
assign 1 to v260:5
assign xmm2 to v263:4
assign 2 to v263:4
assign xmm6 to v258:0
assign 6 to v258:0
blocking v258 pick register xmm6
assign xmm6 to v258:3
assign 6 to v258:3
assign xmm2 to v263:6
assign 2 to v263:6
assign xmm1 to v260:7
assign 1 to v260:7
assign xmm0 to v261:8
assign 0 to v261:8
assign xmm4 to v262:5
assign 4 to v262:5
assign xmm5 to v259:4
assign 5 to v259:4
assign xmm7 to v255:0
assign 7 to v255:0
assign xmm7 to v255:2
assign 7 to v255:2
assign xmm5 to v259:6
assign 5 to v259:6
assign xmm4 to v262:7
assign 4 to v262:7
assign xmm0 to v261:10
assign 0 to v261:10
assign xmm1 to v260:9
assign 1 to v260:9
assign xmm2 to v263:8
assign 2 to v263:8
assign xmm6 to v258:5
assign 6 to v258:5
assign xmm8 to v254:0
assign 8 to v254:0
blocking v254 pick register xmm8
assign xmm8 to v254:3
assign 8 to v254:3
assign xmm6 to v258:7
assign 6 to v258:7
assign xmm2 to v263:10
assign 2 to v263:10
assign xmm1 to v260:11
assign 1 to v260:11
assign xmm0 to v261:12
assign 0 to v261:12
assign xmm4 to v262:9
assign 4 to v262:9
assign xmm5 to v259:8
assign 5 to v259:8
assign xmm7 to v255:4
assign 7 to v255:4
assign xmm7 to v255:6
assign 7 to v255:6
assign xmm5 to v259:10
assign 5 to v259:10
assign xmm4 to v262:11
assign 4 to v262:11
assign xmm0 to v261:14
assign 0 to v261:14
assign xmm1 to v260:13
assign 1 to v260:13
assign xmm2 to v263:12
assign 2 to v263:12
assign xmm6 to v258:9
assign 6 to v258:9
assign xmm8 to v254:5
assign 8 to v254:5
assign xmm4 to v262:2
assign 4 to v262:2
assign xmm2 to v256:0
assign 2 to v256:0
assign xmm1 to v260:2
assign 1 to v260:2
--- Raw source ---
() {
      // calc current normals
      var CurN = new Array();
      var i = 5;
      Q.LastPx = 0;
      for (; i > -1; i--) CurN[i] = VMulti2(MQube, Q.Normal[i]);
      if (CurN[0][2] < 0) {
        if (!Q.Line[0]) { DrawLine(Q[0], Q[1]); Q.Line[0] = true; };
        if (!Q.Line[1]) { DrawLine(Q[1], Q[2]); Q.Line[1] = true; };
        if (!Q.Line[2]) { DrawLine(Q[2], Q[3]); Q.Line[2] = true; };
        if (!Q.Line[3]) { DrawLine(Q[3], Q[0]); Q.Line[3] = true; };
      }
      if (CurN[1][2] < 0) {
        if (!Q.Line[2]) { DrawLine(Q[3], Q[2]); Q.Line[2] = true; };
        if (!Q.Line[9]) { DrawLine(Q[2], Q[6]); Q.Line[9] = true; };
        if (!Q.Line[6]) { DrawLine(Q[6], Q[7]); Q.Line[6] = true; };
        if (!Q.Line[10]) { DrawLine(Q[7], Q[3]); Q.Line[10] = true; };
      }
      if (CurN[2][2] < 0) {
        if (!Q.Line[4]) { DrawLine(Q[4], Q[5]); Q.Line[4] = true; };
        if (!Q.Line[5]) { DrawLine(Q[5], Q[6]); Q.Line[5] = true; };
        if (!Q.Line[6]) { DrawLine(Q[6], Q[7]); Q.Line[6] = true; };
        if (!Q.Line[7]) { DrawLine(Q[7], Q[4]); Q.Line[7] = true; };
      }
      if (CurN[3][2] < 0) {
        if (!Q.Line[4]) { DrawLine(Q[4], Q[5]); Q.Line[4] = true; };
        if (!Q.Line[8]) { DrawLine(Q[5], Q[1]); Q.Line[8] = true; };
        if (!Q.Line[0]) { DrawLine(Q[1], Q[0]); Q.Line[0] = true; };
        if (!Q.Line[11]) { DrawLine(Q[0], Q[4]); Q.Line[11] = true; };
      }
      if (CurN[4][2] < 0) {
        if (!Q.Line[11]) { DrawLine(Q[4], Q[0]); Q.Line[11] = true; };
        if (!Q.Line[3]) { DrawLine(Q[0], Q[3]); Q.Line[3] = true; };
        if (!Q.Line[10]) { DrawLine(Q[3], Q[7]); Q.Line[10] = true; };
        if (!Q.Line[7]) { DrawLine(Q[7], Q[4]); Q.Line[7] = true; };
      }
      if (CurN[5][2] < 0) {
        if (!Q.Line[8]) { DrawLine(Q[1], Q[5]); Q.Line[8] = true; };
        if (!Q.Line[5]) { DrawLine(Q[5], Q[6]); Q.Line[5] = true; };
        if (!Q.Line[9]) { DrawLine(Q[6], Q[2]); Q.Line[9] = true; };
        if (!Q.Line[1]) { DrawLine(Q[2], Q[1]); Q.Line[1] = true; };
      }
      Q.Line = [false,false,false,false,false,false,false,false,false,false,false,false];
      Q.LastPx = 0;
    }


--- Optimized code ---
optimization_id = 14
source_position = 4412
kind = TURBOFAN
name = DrawQube
stack_slots = 27
compiler = turbofan
address = 0x19db0008f821

Instructions (size = 18616)
0x19db0008f860     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db0008f867     7  483bd9         REX.W cmpq rbx,rcx
assign xmm0 to v257:0
assign 0 to v257:0
assign xmm6 to v258:2
assign 6 to v258:2
assign xmm1 to v252:0
assign 1 to v252:0
assign xmm0 to v253:0
assign 0 to v253:0
assign xmm8 to v254:2
assign 8 to v254:2
assign xmm2 to v250:0
assign 2 to v250:0
assign xmm0 to v251:0
assign 0 to v251:0
assign xmm0 to v249:0
assign 0 to v249:0
assign xmm0 to v179:0
assign 0 to v179:0
assign xmm0 to v179:2
assign 0 to v179:2
assign xmm1 to v178:0
assign 1 to v178:0
0x19db0008f86a     a  7418           jz 0x19db0008f884  <+0x24>
assign xmm2 to v181:0
assign 2 to v181:0
blocking v178 pick register xmm1
assign xmm2 to v181:2
assign 2 to v181:2
assign xmm1 to v178:3
assign 1 to v178:3
assign xmm0 to v179:4
assign 0 to v179:4
assign xmm4 to v180:0
assign 4 to v180:0
assign xmm5 to v177:0
assign 5 to v177:0
0x19db0008f86c     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db0008f876    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db0008f880    20  41ffd2         call r10
0x19db0008f883    23  cc             int3l
0x19db0008f884    24  8b59d0         movl rbx,[rcx-0x30]
0x19db0008f887    27  4903dd         REX.W addq rbx,r13
0x19db0008f88a    2a  f6430701       testb [rbx+0x7],0x1
blocking v180 pick register xmm4
assign xmm5 to v177:2
assign 5 to v177:2
assign xmm4 to v180:3
assign 4 to v180:3
assign xmm0 to v179:6
assign 0 to v179:6
assign xmm1 to v178:5
assign 1 to v178:5
assign xmm2 to v181:4
assign 2 to v181:4
assign xmm8 to v176:0
assign 8 to v176:0
0x19db0008f88e    2e  740d           jz 0x19db0008f89d  <+0x3d>
0x19db0008f890    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db0008f89a    3a  41ffe2         jmp r10
0x19db0008f89d    3d  55             push rbp
0x19db0008f89e    3e  4889e5         REX.W movq rbp,rsp
0x19db0008f8a1    41  56             push rsi
0x19db0008f8a2    42  57             push rdi
0x19db0008f8a3    43  50             push rax
0x19db0008f8a4    44  4881ecb0000000 REX.W subq rsp,0xb0
0x19db0008f8ab    4b  488975d8       REX.W movq [rbp-0x28],rsi
0x19db0008f8af    4f  48897de0       REX.W movq [rbp-0x20],rdi
0x19db0008f8b3    53  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
blocking v176 pick register xmm8
assign xmm8 to v176:3
assign 8 to v176:3
assign xmm2 to v181:6
assign 2 to v181:6
assign xmm1 to v178:7
assign 1 to v178:7
assign xmm0 to v179:8
assign 0 to v179:8
assign xmm4 to v180:5
assign 4 to v180:5
assign xmm5 to v177:4
assign 5 to v177:4
assign xmm6 to v173:0
assign 6 to v173:0
assign xmm6 to v173:2
assign 6 to v173:2
assign xmm5 to v177:6
assign 5 to v177:6
assign xmm4 to v180:7
assign 4 to v180:7
assign xmm0 to v179:10
assign 0 to v179:10
assign xmm1 to v178:9
assign 1 to v178:9
assign xmm2 to v181:8
assign 2 to v181:8
assign xmm8 to v176:5
assign 8 to v176:5
assign xmm9 to v172:0
assign 9 to v172:0
0x19db0008f8b7    57  0f86d42f0000   jna 0x19db00092891  <+0x3031>
blocking v172 pick register xmm9
assign xmm9 to v172:3
assign 9 to v172:3
assign xmm8 to v176:7
assign 8 to v176:7
assign xmm2 to v181:10
assign 2 to v181:10
assign xmm1 to v178:11
assign 1 to v178:11
assign xmm0 to v179:12
assign 0 to v179:12
assign xmm4 to v180:9
assign 4 to v180:9
assign xmm5 to v177:8
assign 5 to v177:8
assign xmm6 to v173:4
assign 6 to v173:4
0x19db0008f8bd    5d  49b8f87d6d5555550000 REX.W movq r8,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db0008f8c7    67  4d8b08         REX.W movq r9,[r8]
0x19db0008f8ca    6a  4d8d6128       REX.W leaq r12,[r9+0x28]
assign xmm6 to v173:6
assign 6 to v173:6
assign xmm5 to v177:10
assign 5 to v177:10
assign xmm4 to v180:11
assign 4 to v180:11
assign xmm0 to v179:14
assign 0 to v179:14
assign xmm1 to v178:13
assign 1 to v178:13
assign xmm2 to v181:12
assign 2 to v181:12
assign xmm8 to v176:9
assign 8 to v176:9
assign xmm9 to v172:5
assign 9 to v172:5
assign xmm4 to v180:2
assign 4 to v180:2
assign xmm2 to v174:0
assign 2 to v174:0
assign xmm1 to v178:2
assign 1 to v178:2
assign xmm0 to v175:0
assign 0 to v175:0
assign xmm8 to v176:2
assign 8 to v176:2
assign xmm1 to v170:0
assign 1 to v170:0
assign xmm0 to v171:0
assign 0 to v171:0
assign xmm9 to v172:2
assign 9 to v172:2
assign xmm2 to v168:0
assign 2 to v168:0
assign xmm0 to v169:0
assign 0 to v169:0
assign xmm0 to v167:0
assign 0 to v167:0
assign xmm0 to v134:0
assign 0 to v134:0
assign xmm0 to v133:0
assign 0 to v133:0
assign xmm0 to v122:0
assign 0 to v122:0
0x19db0008f8ce    6e  49bb007e6d5555550000 REX.W movq r11,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db0008f8d8    78  4d3923         REX.W cmpq [r11],r12
blocking v122 pick register xmm0
assign xmm0 to v122:3
assign 0 to v122:3
assign xmm0 to v122:2
assign 0 to v122:2
assign xmm0 to v100:0
assign 0 to v100:0
blocking v100 pick register xmm0
assign xmm0 to v100:3
assign 0 to v100:3
assign xmm1 to v101:0
assign 1 to v101:0
assign xmm2 to v99:0
assign 2 to v99:0
assign xmm4 to v95:0
assign 4 to v95:0
assign xmm1 to v97:0
assign 1 to v97:0
0x19db0008f8db    7b  0f86ea2f0000   jna 0x19db000928cb  <+0x306b>
0x19db0008f8e1    81  4d8d6118       REX.W leaq r12,[r9+0x18]
assign xmm0 to v100:2
0x19db0008f8e5    85  4d8920         REX.W movq [r8],r12
assign 0 to v100:2
0x19db0008f8e8    88  4983c101       REX.W addq r9,0x1
0x19db0008f8ec    8c  4d8bb5d0000000 REX.W movq r14,[r13+0xd0] (root (fixed_array_map))
0x19db0008f8f3    93  458971ff       movl [r9-0x1],r14
0x19db0008f8f7    97  41c7410308000000 movl [r9+0x3],0x8
0x19db0008f8ff    9f  4d8bb598000000 REX.W movq r14,[r13+0x98] (root (the_hole_value))
0x19db0008f906    a6  45897107       movl [r9+0x7],r14
0x19db0008f90a    aa  4589710b       movl [r9+0xb],r14
0x19db0008f90e    ae  4589710f       movl [r9+0xf],r14
0x19db0008f912    b2  45897113       movl [r9+0x13],r14
assign xmm0 to v98:0
0x19db0008f916    b6  498d442410     REX.W leaq rax,[r12+0x10]
assign 0 to v98:0
0x19db0008f91b    bb  498900         REX.W movq [r8],rax
0x19db0008f91e    be  4983c401       REX.W addq r12,0x1
assign xmm2 to v93:0
assign 2 to v93:0
assign xmm0 to v94:0
assign 0 to v94:0
assign xmm1 to v91:0
assign 1 to v91:0
assign xmm0 to v92:0
assign 0 to v92:0
assign xmm0 to v90:0
assign 0 to v90:0
assign xmm0 to v57:0
assign 0 to v57:0
assign xmm1 to v56:0
assign 1 to v56:0
assign xmm2 to v59:0
assign 2 to v59:0
assign xmm4 to v58:0
assign 4 to v58:0
assign xmm5 to v55:0
0x19db0008f922    c2  b8cd9f3008     movl rax,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
assign 5 to v55:0
0x19db0008f927    c7  41894424ff     movl [r12-0x1],rax
0x19db0008f92c    cc  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db0008f933    d3  4189542403     movl [r12+0x3],rdx
0x19db0008f938    d8  45894c2407     movl [r12+0x7],r9
0x19db0008f93d    dd  41c744240b00000000 movl [r12+0xb],0x0
0x19db0008f946    e6  4c8b4dd8       REX.W movq r9,[rbp-0x28]
0x19db0008f94a    ea  458b790f       movl r15,[r9+0xf]
0x19db0008f94e    ee  4d03fd         REX.W addq r15,r13
0x19db0008f951    f1  41f6c701       testb r15,0x1
assign xmm6 to v54:0
assign 6 to v54:0
assign xmm7 to v51:0
assign 7 to v51:0
assign xmm8 to v50:0
assign 8 to v50:0
blocking v56 pick register xmm1
blocking v58 pick register xmm4
blocking v54 pick register xmm6
0x19db0008f955    f5  0f849c3d0000   jz 0x19db000936f7  <+0x3e97>
0x19db0008f95b    fb  4c8965d0       REX.W movq [rbp-0x30],r12
0x19db0008f95f    ff  4c897dc8       REX.W movq [rbp-0x38],r15
blocking v50 pick register xmm8
assign xmm8 to v50:3
assign 8 to v50:3
assign xmm7 to v51:2
assign 7 to v51:2
assign xmm6 to v54:3
assign 6 to v54:3
assign xmm5 to v55:2
assign 5 to v55:2
assign xmm4 to v58:3
assign 4 to v58:3
assign xmm2 to v59:2
assign 2 to v59:2
assign xmm1 to v56:3
assign 1 to v56:3
assign xmm0 to v57:2
assign 0 to v57:2
assign xmm4 to v58:2
assign 4 to v58:2
assign xmm2 to v52:0
assign 2 to v52:0
assign xmm1 to v56:2
assign 1 to v56:2
assign xmm0 to v53:0
assign 0 to v53:0
assign xmm6 to v54:2
assign 6 to v54:2
assign xmm1 to v48:0
assign 1 to v48:0
assign xmm0 to v49:0
assign 0 to v49:0
assign xmm8 to v50:2
assign 8 to v50:2
assign xmm2 to v46:0
assign 2 to v46:0
assign xmm0 to v47:0
assign 0 to v47:0
0x19db0008f963   103  b96ddc3008     movl rcx,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008f968   108  41394fff       cmpl [r15-0x1],rcx
assign xmm0 to v45:0
assign 0 to v45:0
spill count : 99
0x19db0008f96c   10c  0f843a000000   jz 0x19db0008f9ac  <+0x14c>
0x19db0008f972   112  be45dc3008     movl rsi,0x830dc45      ;; (compressed) object: 0x19db0830dc45 <Map(PACKED_ELEMENTS)>
0x19db0008f977   117  413977ff       cmpl [r15-0x1],rsi
0x19db0008f97b   11b  0f857d3d0000   jnz 0x19db000936fe  <+0x3e9e>
0x19db0008f981   121  418b7703       movl rsi,[r15+0x3]
0x19db0008f985   125  4903f5         REX.W addq rsi,r13
0x19db0008f988   128  41894fff       movl [r15-0x1],rcx
0x19db0008f98c   12c  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0008f993   133  4923df         REX.W andq rbx,r15
0x19db0008f996   136  f6430804       testb [rbx+0x8],0x4
0x19db0008f99a   13a  0f85103d0000   jnz 0x19db000936b0  <+0x3e50>
0x19db0008f9a0   140  c7461700000000 movl [rsi+0x17],0x0
0x19db0008f9a7   147  e90e000000     jmp 0x19db0008f9ba  <+0x15a>
0x19db0008f9ac   14c  418b7703       movl rsi,[r15+0x3]
0x19db0008f9b0   150  4903f5         REX.W addq rsi,r13
0x19db0008f9b3   153  c7461700000000 movl [rsi+0x17],0x0
0x19db0008f9ba   15a  bb05000000     movl rbx,0x5
0x19db0008f9bf   15f  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0008f9c4   164  e923000000     jmp 0x19db0008f9ec  <+0x18c>
0x19db0008f9c9   169  0f1f8000000000 nop
0x19db0008f9d0   170  488bd3         REX.W movq rdx,rbx
0x19db0008f9d3   173  498bd9         REX.W movq rbx,r9
0x19db0008f9d6   176  4c8b4dd8       REX.W movq r9,[rbp-0x28]
0x19db0008f9da   17a  4c8b7dc8       REX.W movq r15,[rbp-0x38]
0x19db0008f9de   17e  4d8bb598000000 REX.W movq r14,[r13+0x98] (root (the_hole_value))
0x19db0008f9e5   185  4c8b05d3feffff REX.W movq r8,[rip+0xfffffed3]
0x19db0008f9ec   18c  bea59f3008     movl rsi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0008f9f1   191  83fbff         cmpl rbx,0xff
0x19db0008f9f4   194  0f8ecf040000   jle 0x19db0008fec9  <+0x669>
0x19db0008f9fa   19a  418b4943       movl rcx,[r9+0x43]
0x19db0008f9fe   19e  4903cd         REX.W addq rcx,r13
0x19db0008fa01   1a1  418b4117       movl rax,[r9+0x17]
0x19db0008fa05   1a5  4903c5         REX.W addq rax,r13
0x19db0008fa08   1a8  458b4f03       movl r9,[r15+0x3]
0x19db0008fa0c   1ac  4d03cd         REX.W addq r9,r13
0x19db0008fa0f   1af  458b490b       movl r9,[r9+0xb]
0x19db0008fa13   1b3  4d03cd         REX.W addq r9,r13
0x19db0008fa16   1b6  41f6c101       testb r9,0x1
0x19db0008fa1a   1ba  0f84e53c0000   jz 0x19db00093705  <+0x3ea5>
0x19db0008fa20   1c0  413971ff       cmpl [r9-0x1],rsi
0x19db0008fa24   1c4  0f85e23c0000   jnz 0x19db0009370c  <+0x3eac>
0x19db0008fa2a   1ca  458b7907       movl r15,[r9+0x7]
0x19db0008fa2e   1ce  4d03fd         REX.W addq r15,r13
0x19db0008fa31   1d1  458b490b       movl r9,[r9+0xb]
0x19db0008fa35   1d5  41d1f9         sarl r9, 1
0x19db0008fa38   1d8  413bd9         cmpl rbx,r9
0x19db0008fa3b   1db  0f83d23c0000   jnc 0x19db00093713  <+0x3eb3>
0x19db0008fa41   1e1  4c8d0c9d07000000 REX.W leaq r9,[rbx*4+0x7]
0x19db0008fa49   1e9  4c894db8       REX.W movq [rbp-0x48],r9
0x19db0008fa4d   1ed  458b4c9f07     movl r9,[r15+rbx*4+0x7]
0x19db0008fa52   1f2  4d03cd         REX.W addq r9,r13
0x19db0008fa55   1f5  f6c101         testb rcx,0x1
0x19db0008fa58   1f8  0f84bc3c0000   jz 0x19db0009371a  <+0x3eba>
0x19db0008fa5e   1fe  448b79ff       movl r15,[rcx-0x1]
0x19db0008fa62   202  4d03fd         REX.W addq r15,r13
0x19db0008fa65   205  6641817f072c04 cmpw [r15+0x7],0x42c
0x19db0008fa6c   20c  0f85af3c0000   jnz 0x19db00093721  <+0x3ec1>
0x19db0008fa72   212  448b7913       movl r15,[rcx+0x13]
0x19db0008fa76   216  4d03fd         REX.W addq r15,r13
0x19db0008fa79   219  48895dc0       REX.W movq [rbp-0x40],rbx
0x19db0008fa7d   21d  48bbe9422f08db190000 REX.W movq rbx,0x19db082f42e9    ;; object: 0x19db082f42e9 <FeedbackCell[many closures]>
0x19db0008fa87   227  493bdf         REX.W cmpq rbx,r15
0x19db0008fa8a   22a  0f85983c0000   jnz 0x19db00093728  <+0x3ec8>
0x19db0008fa90   230  448b790f       movl r15,[rcx+0xf]
0x19db0008fa94   234  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db0008fa9e   23e  4d3bd7         REX.W cmpq r10,r15
0x19db0008faa1   241  7715           ja 0x19db0008fab8  <+0x258>
0x19db0008faa3   243  48ba0200000000000000 REX.W movq rdx,0x2
0x19db0008faad   24d  4c8b15c4fdffff REX.W movq r10,[rip+0xfffffdc4]
0x19db0008fab4   254  41ffd2         call r10
0x19db0008fab7   257  cc             int3l
0x19db0008fab8   258  48894da8       REX.W movq [rbp-0x58],rcx
0x19db0008fabc   25c  4c897d90       REX.W movq [rbp-0x70],r15
0x19db0008fac0   260  41f6c601       testb r14,0x1
0x19db0008fac4   264  0f852a2e0000   jnz 0x19db000928f4  <+0x3094>
0x19db0008faca   26a  498bde         REX.W movq rbx,r14
0x19db0008facd   26d  d1fb           sarl rbx, 1
0x19db0008facf   26f  c5832ac3       vcvtlsi2sd xmm0,xmm15,rbx
0x19db0008fad3   273  498b18         REX.W movq rbx,[r8]
0x19db0008fad6   276  4c8d7338       REX.W leaq r14,[rbx+0x38]
0x19db0008fada   27a  4d3933         REX.W cmpq [r11],r14
0x19db0008fadd   27d  0f861c2e0000   jna 0x19db000928ff  <+0x309f>
0x19db0008fae3   283  4c8d7328       REX.W leaq r14,[rbx+0x28]
0x19db0008fae7   287  4d8930         REX.W movq [r8],r14
0x19db0008faea   28a  4c8d6301       REX.W leaq r12,[rbx+0x1]
0x19db0008faee   28e  498b8dd8010000 REX.W movq rcx,[r13+0x1d8] (root (fixed_double_array_map))
0x19db0008faf5   295  41894c24ff     movl [r12-0x1],rcx
0x19db0008fafa   29a  41c744240308000000 movl [r12+0x3],0x8
0x19db0008fb03   2a3  c4c17b11442407 vmovsd [r12+0x7],xmm0
0x19db0008fb0a   2aa  c4c17b1144240f vmovsd [r12+0xf],xmm0
0x19db0008fb11   2b1  c4c17b11442417 vmovsd [r12+0x17],xmm0
0x19db0008fb18   2b8  c4c17b1144241f vmovsd [r12+0x1f],xmm0
0x19db0008fb1f   2bf  498d4e10       REX.W leaq rcx,[r14+0x10]
0x19db0008fb23   2c3  498908         REX.W movq [r8],rcx
0x19db0008fb26   2c6  4983c601       REX.W addq r14,0x1
0x19db0008fb2a   2ca  41897eff       movl [r14-0x1],rdi
0x19db0008fb2e   2ce  488bda         REX.W movq rbx,rdx
0x19db0008fb31   2d1  41895e03       movl [r14+0x3],rbx
0x19db0008fb35   2d5  45896607       movl [r14+0x7],r12
0x19db0008fb39   2d9  41c7460b00000000 movl [r14+0xb],0x0
0x19db0008fb41   2e1  a801           test al,0x1
0x19db0008fb43   2e3  0f84e63b0000   jz 0x19db0009372f  <+0x3ecf>
0x19db0008fb49   2e9  3970ff         cmpl [rax-0x1],rsi
0x19db0008fb4c   2ec  0f85e43b0000   jnz 0x19db00093736  <+0x3ed6>
0x19db0008fb52   2f2  8b5007         movl rdx,[rax+0x7]
0x19db0008fb55   2f5  4903d5         REX.W addq rdx,r13
0x19db0008fb58   2f8  8b480b         movl rcx,[rax+0xb]
0x19db0008fb5b   2fb  d1f9           sarl rcx, 1
0x19db0008fb5d   2fd  83f900         cmpl rcx,0x0
0x19db0008fb60   300  0f86d73b0000   jna 0x19db0009373d  <+0x3edd>
0x19db0008fb66   306  8b5207         movl rdx,[rdx+0x7]
0x19db0008fb69   309  4903d5         REX.W addq rdx,r13
0x19db0008fb6c   30c  f6c201         testb rdx,0x1
0x19db0008fb6f   30f  0f84cf3b0000   jz 0x19db00093744  <+0x3ee4>
0x19db0008fb75   315  397aff         cmpl [rdx-0x1],rdi
0x19db0008fb78   318  0f85cd3b0000   jnz 0x19db0009374b  <+0x3eeb>
0x19db0008fb7e   31e  8b4a07         movl rcx,[rdx+0x7]
0x19db0008fb81   321  4903cd         REX.W addq rcx,r13
0x19db0008fb84   324  8b520b         movl rdx,[rdx+0xb]
0x19db0008fb87   327  d1fa           sarl rdx, 1
0x19db0008fb89   329  83fa00         cmpl rdx,0x0
0x19db0008fb8c   32c  0f86c03b0000   jna 0x19db00093752  <+0x3ef2>
0x19db0008fb92   332  c5fb104107     vmovsd xmm0,[rcx+0x7]
0x19db0008fb97   337  41f6c101       testb r9,0x1
0x19db0008fb9b   33b  0f84b83b0000   jz 0x19db00093759  <+0x3ef9>
0x19db0008fba1   341  413979ff       cmpl [r9-0x1],rdi
0x19db0008fba5   345  0f85b53b0000   jnz 0x19db00093760  <+0x3f00>
0x19db0008fbab   34b  458b4107       movl r8,[r9+0x7]
0x19db0008fbaf   34f  4d03c5         REX.W addq r8,r13
0x19db0008fbb2   352  418b710b       movl rsi,[r9+0xb]
0x19db0008fbb6   356  d1fe           sarl rsi, 1
0x19db0008fbb8   358  83fe00         cmpl rsi,0x0
0x19db0008fbbb   35b  0f86a63b0000   jna 0x19db00093767  <+0x3f07>
0x19db0008fbc1   361  83fa01         cmpl rdx,0x1
0x19db0008fbc4   364  0f86a43b0000   jna 0x19db0009376e  <+0x3f0e>
0x19db0008fbca   36a  c5fb10490f     vmovsd xmm1,[rcx+0xf]
0x19db0008fbcf   36f  83fe01         cmpl rsi,0x1
0x19db0008fbd2   372  0f869d3b0000   jna 0x19db00093775  <+0x3f15>
0x19db0008fbd8   378  83fa02         cmpl rdx,0x2
0x19db0008fbdb   37b  0f869b3b0000   jna 0x19db0009377c  <+0x3f1c>
0x19db0008fbe1   381  c5fb105117     vmovsd xmm2,[rcx+0x17]
0x19db0008fbe6   386  83fe02         cmpl rsi,0x2
0x19db0008fbe9   389  0f86943b0000   jna 0x19db00093783  <+0x3f23>
0x19db0008fbef   38f  c4c17359480f   vmulsd xmm1,xmm1,[r8+0xf]
0x19db0008fbf5   395  c4c17b594007   vmulsd xmm0,xmm0,[r8+0x7]
0x19db0008fbfb   39b  c4c16b595017   vmulsd xmm2,xmm2,[r8+0x17]
0x19db0008fc01   3a1  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db0008fc05   3a5  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db0008fc09   3a9  41c7460b02000000 movl [r14+0xb],0x2
0x19db0008fc11   3b1  c4c17b11442407 vmovsd [r12+0x7],xmm0
0x19db0008fc18   3b8  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008fc1c   3bc  0f86382d0000   jna 0x19db0009295a  <+0x30fa>
0x19db0008fc22   3c2  41b801000000   movl r8,0x1
0x19db0008fc28   3c8  4c8be0         REX.W movq r12,rax
0x19db0008fc2b   3cb  e903000000     jmp 0x19db0008fc33  <+0x3d3>
0x19db0008fc30   3d0  4c8bc1         REX.W movq r8,rcx
0x19db0008fc33   3d3  4183f803       cmpl r8,0x3
0x19db0008fc37   3d7  0f835c010000   jnc 0x19db0008fd99  <+0x539>
0x19db0008fc3d   3dd  418b442407     movl rax,[r12+0x7]
0x19db0008fc42   3e2  4903c5         REX.W addq rax,r13
0x19db0008fc45   3e5  418b54240b     movl rdx,[r12+0xb]
0x19db0008fc4a   3ea  d1fa           sarl rdx, 1
0x19db0008fc4c   3ec  443bc2         cmpl r8,rdx
0x19db0008fc4f   3ef  0f83353b0000   jnc 0x19db0009378a  <+0x3f2a>
0x19db0008fc55   3f5  428b448007     movl rax,[rax+r8*4+0x7]
0x19db0008fc5a   3fa  4903c5         REX.W addq rax,r13
0x19db0008fc5d   3fd  a801           test al,0x1
0x19db0008fc5f   3ff  0f842c3b0000   jz 0x19db00093791  <+0x3f31>
0x19db0008fc65   405  3978ff         cmpl [rax-0x1],rdi
0x19db0008fc68   408  0f852a3b0000   jnz 0x19db00093798  <+0x3f38>
0x19db0008fc6e   40e  8b5007         movl rdx,[rax+0x7]
0x19db0008fc71   411  4903d5         REX.W addq rdx,r13
0x19db0008fc74   414  8b400b         movl rax,[rax+0xb]
0x19db0008fc77   417  d1f8           sarl rax, 1
0x19db0008fc79   419  83f800         cmpl rax,0x0
0x19db0008fc7c   41c  0f861d3b0000   jna 0x19db0009379f  <+0x3f3f>
0x19db0008fc82   422  c5fb104207     vmovsd xmm0,[rdx+0x7]
0x19db0008fc87   427  418b4907       movl rcx,[r9+0x7]
0x19db0008fc8b   42b  4903cd         REX.W addq rcx,r13
0x19db0008fc8e   42e  418b710b       movl rsi,[r9+0xb]
0x19db0008fc92   432  d1fe           sarl rsi, 1
0x19db0008fc94   434  83fe00         cmpl rsi,0x0
0x19db0008fc97   437  0f86093b0000   jna 0x19db000937a6  <+0x3f46>
0x19db0008fc9d   43d  c5fb104907     vmovsd xmm1,[rcx+0x7]
0x19db0008fca2   442  83f801         cmpl rax,0x1
0x19db0008fca5   445  0f86023b0000   jna 0x19db000937ad  <+0x3f4d>
0x19db0008fcab   44b  c5fb10520f     vmovsd xmm2,[rdx+0xf]
0x19db0008fcb0   450  83fe01         cmpl rsi,0x1
0x19db0008fcb3   453  0f86fb3a0000   jna 0x19db000937b4  <+0x3f54>
0x19db0008fcb9   459  c5fb10610f     vmovsd xmm4,[rcx+0xf]
0x19db0008fcbe   45e  83f802         cmpl rax,0x2
0x19db0008fcc1   461  0f86f43a0000   jna 0x19db000937bb  <+0x3f5b>
0x19db0008fcc7   467  c5fb106a17     vmovsd xmm5,[rdx+0x17]
0x19db0008fccc   46c  83fe02         cmpl rsi,0x2
0x19db0008fccf   46f  0f86ed3a0000   jna 0x19db000937c2  <+0x3f62>
0x19db0008fcd5   475  c5fb107117     vmovsd xmm6,[rcx+0x17]
0x19db0008fcda   47a  418b4607       movl rax,[r14+0x7]
0x19db0008fcde   47e  4903c5         REX.W addq rax,r13
0x19db0008fce1   481  418b560b       movl rdx,[r14+0xb]
0x19db0008fce5   485  8b4803         movl rcx,[rax+0x3]
0x19db0008fce8   488  d1f9           sarl rcx, 1
0x19db0008fcea   48a  d1fa           sarl rdx, 1
0x19db0008fcec   48c  8d7201         leal rsi,[rdx+0x1]
0x19db0008fcef   48f  4c8b15a0fdffff REX.W movq r10,[rip+0xfffffda0]
0x19db0008fcf6   496  4c3bd6         REX.W cmpq r10,rsi
0x19db0008fcf9   499  7712           ja 0x19db0008fd0d  <+0x4ad>
0x19db0008fcfb   49b  488b15a3fdffff REX.W movq rdx,[rip+0xfffffda3]
0x19db0008fd02   4a2  4c8b156ffbffff REX.W movq r10,[rip+0xfffffb6f]
0x19db0008fd09   4a9  41ffd2         call r10
0x19db0008fd0c   4ac  cc             int3l
0x19db0008fd0d   4ad  443bc6         cmpl r8,rsi
0x19db0008fd10   4b0  0f83b33a0000   jnc 0x19db000937c9  <+0x3f69>
0x19db0008fd16   4b6  443bc1         cmpl r8,rcx
0x19db0008fd19   4b9  0f83952c0000   jnc 0x19db000929b4  <+0x3154>
0x19db0008fd1f   4bf  418d4801       leal rcx,[r8+0x1]
0x19db0008fd23   4c3  4c8b156cfdffff REX.W movq r10,[rip+0xfffffd6c]
0x19db0008fd2a   4ca  4c3bd1         REX.W cmpq r10,rcx
0x19db0008fd2d   4cd  7712           ja 0x19db0008fd41  <+0x4e1>
0x19db0008fd2f   4cf  488b156ffdffff REX.W movq rdx,[rip+0xfffffd6f]
0x19db0008fd36   4d6  4c8b153bfbffff REX.W movq r10,[rip+0xfffffb3b]
0x19db0008fd3d   4dd  41ffd2         call r10
0x19db0008fd40   4e0  cc             int3l
0x19db0008fd41   4e1  443bc2         cmpl r8,rdx
0x19db0008fd44   4e4  0f8225000000   jc 0x19db0008fd6f  <+0x50f>
0x19db0008fd4a   4ea  8d1409         leal rdx,[rcx+rcx*1]
0x19db0008fd4d   4ed  4c8b1542fdffff REX.W movq r10,[rip+0xfffffd42]
0x19db0008fd54   4f4  4c3bd2         REX.W cmpq r10,rdx
0x19db0008fd57   4f7  7712           ja 0x19db0008fd6b  <+0x50b>
0x19db0008fd59   4f9  488b1545fdffff REX.W movq rdx,[rip+0xfffffd45]
0x19db0008fd60   500  4c8b1511fbffff REX.W movq r10,[rip+0xfffffb11]
0x19db0008fd67   507  41ffd2         call r10
0x19db0008fd6a   50a  cc             int3l
0x19db0008fd6b   50b  4189560b       movl [r14+0xb],rdx
0x19db0008fd6f   50f  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db0008fd73   513  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db0008fd77   517  c5cb59cd       vmulsd xmm1,xmm6,xmm5
0x19db0008fd7b   51b  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db0008fd7f   51f  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db0008fd83   523  c4a17b1144c007 vmovsd [rax+r8*8+0x7],xmm0
0x19db0008fd8a   52a  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008fd8e   52e  0f879cfeffff   ja 0x19db0008fc30  <+0x3d0>
0x19db0008fd94   534  e9072d0000     jmp 0x19db00092aa0  <+0x3240>
0x19db0008fd99   539  4c8b65d0       REX.W movq r12,[rbp-0x30]
0x19db0008fd9d   53d  41b8cd9f3008   movl r8,0x8309fcd       ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008fda3   543  45394424ff     cmpl [r12-0x1],r8
0x19db0008fda8   548  0f85223a0000   jnz 0x19db000937d0  <+0x3f70>
0x19db0008fdae   54e  458b4c2407     movl r9,[r12+0x7]
0x19db0008fdb3   553  4d03cd         REX.W addq r9,r13
0x19db0008fdb6   556  458b7c240b     movl r15,[r12+0xb]
0x19db0008fdbb   55b  418b4103       movl rax,[r9+0x3]
0x19db0008fdbf   55f  d1f8           sarl rax, 1
0x19db0008fdc1   561  8d9000040000   leal rdx,[rax+0x400]
0x19db0008fdc7   567  4c8b15c8fcffff REX.W movq r10,[rip+0xfffffcc8]
0x19db0008fdce   56e  4c3bd2         REX.W cmpq r10,rdx
0x19db0008fdd1   571  7712           ja 0x19db0008fde5  <+0x585>
0x19db0008fdd3   573  488b15cbfcffff REX.W movq rdx,[rip+0xfffffccb]
0x19db0008fdda   57a  4c8b1597faffff REX.W movq r10,[rip+0xfffffa97]
0x19db0008fde1   581  41ffd2         call r10
0x19db0008fde4   584  cc             int3l
0x19db0008fde5   585  488b4dc0       REX.W movq rcx,[rbp-0x40]
0x19db0008fde9   589  3bca           cmpl rcx,rdx
0x19db0008fdeb   58b  0f83e6390000   jnc 0x19db000937d7  <+0x3f77>
0x19db0008fdf1   591  3bc8           cmpl rcx,rax
0x19db0008fdf3   593  0f83032d0000   jnc 0x19db00092afc  <+0x329c>
0x19db0008fdf9   599  418b41ff       movl rax,[r9-0x1]
0x19db0008fdfd   59d  4c8b1592fcffff REX.W movq r10,[rip+0xfffffc92]
0x19db0008fe04   5a4  4c3bd0         REX.W cmpq r10,rax
0x19db0008fe07   5a7  7712           ja 0x19db0008fe1b  <+0x5bb>
0x19db0008fe09   5a9  488b1595fcffff REX.W movq rdx,[rip+0xfffffc95]
0x19db0008fe10   5b0  4c8b1561faffff REX.W movq r10,[rip+0xfffffa61]
0x19db0008fe17   5b7  41ffd2         call r10
0x19db0008fe1a   5ba  cc             int3l
0x19db0008fe1b   5bb  413985d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rax
0x19db0008fe22   5c2  0f85522d0000   jnz 0x19db00092b7a  <+0x331a>
0x19db0008fe28   5c8  41d1ff         sarl r15, 1
0x19db0008fe2b   5cb  413bcf         cmpl rcx,r15
0x19db0008fe2e   5ce  0f8248000000   jc 0x19db0008fe7c  <+0x61c>
0x19db0008fe34   5d4  448d7901       leal r15,[rcx+0x1]
0x19db0008fe38   5d8  4c8b1557fcffff REX.W movq r10,[rip+0xfffffc57]
0x19db0008fe3f   5df  4d3bd7         REX.W cmpq r10,r15
0x19db0008fe42   5e2  7712           ja 0x19db0008fe56  <+0x5f6>
0x19db0008fe44   5e4  488b155afcffff REX.W movq rdx,[rip+0xfffffc5a]
0x19db0008fe4b   5eb  4c8b1526faffff REX.W movq r10,[rip+0xfffffa26]
0x19db0008fe52   5f2  41ffd2         call r10
0x19db0008fe55   5f5  cc             int3l
0x19db0008fe56   5f6  41d1e7         shll r15, 1
0x19db0008fe59   5f9  4c8b1536fcffff REX.W movq r10,[rip+0xfffffc36]
0x19db0008fe60   600  4d3bd7         REX.W cmpq r10,r15
0x19db0008fe63   603  7712           ja 0x19db0008fe77  <+0x617>
0x19db0008fe65   605  488b1539fcffff REX.W movq rdx,[rip+0xfffffc39]
0x19db0008fe6c   60c  4c8b1505faffff REX.W movq r10,[rip+0xfffffa05]
0x19db0008fe73   613  41ffd2         call r10
0x19db0008fe76   616  cc             int3l
0x19db0008fe77   617  45897c240b     movl [r12+0xb],r15
0x19db0008fe7c   61c  4c8b7db8       REX.W movq r15,[rbp-0x48]
0x19db0008fe80   620  47893439       movl [r9+r15*1],r14
0x19db0008fe84   624  48c7c00000fcff REX.W movq rax,0xfffc0000
0x19db0008fe8b   62b  4923c1         REX.W andq rax,r9
0x19db0008fe8e   62e  f6400804       testb [rax+0x8],0x4
0x19db0008fe92   632  0f85d2370000   jnz 0x19db0009366a  <+0x3e0a>
0x19db0008fe98   638  448d49ff       leal r9,[rcx-0x1]
0x19db0008fe9c   63c  4c8b15f3fbffff REX.W movq r10,[rip+0xfffffbf3]
0x19db0008fea3   643  4d3bd1         REX.W cmpq r10,r9
0x19db0008fea6   646  7712           ja 0x19db0008feba  <+0x65a>
0x19db0008fea8   648  488b15f6fbffff REX.W movq rdx,[rip+0xfffffbf6]
0x19db0008feaf   64f  4c8b15c2f9ffff REX.W movq r10,[rip+0xfffff9c2]
0x19db0008feb6   656  41ffd2         call r10
0x19db0008feb9   659  cc             int3l
0x19db0008feba   65a  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0008febe   65e  0f870cfbffff   ja 0x19db0008f9d0  <+0x170>
0x19db0008fec4   664  e9fc2c0000     jmp 0x19db00092bc5  <+0x3365>
0x19db0008fec9   669  4c8b75d0       REX.W movq r14,[rbp-0x30]
0x19db0008fecd   66d  41bccd9f3008   movl r12,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0008fed3   673  453966ff       cmpl [r14-0x1],r12
0x19db0008fed7   677  0f8501390000   jnz 0x19db000937de  <+0x3f7e>
0x19db0008fedd   67d  418b4607       movl rax,[r14+0x7]
0x19db0008fee1   681  4903c5         REX.W addq rax,r13
0x19db0008fee4   684  418b4e0b       movl rcx,[r14+0xb]
0x19db0008fee8   688  d1f9           sarl rcx, 1
0x19db0008feea   68a  83f900         cmpl rcx,0x0
0x19db0008feed   68d  0f86f2380000   jna 0x19db000937e5  <+0x3f85>
0x19db0008fef3   693  448b4007       movl r8,[rax+0x7]
0x19db0008fef7   697  4d03c5         REX.W addq r8,r13
0x19db0008fefa   69a  45398598000000 cmpl [r13+0x98] (root (the_hole_value)),r8
0x19db0008ff01   6a1  0f84082d0000   jz 0x19db00092c0f  <+0x33af>
0x19db0008ff07   6a7  41f6c001       testb r8,0x1
0x19db0008ff0b   6ab  0f84db380000   jz 0x19db000937ec  <+0x3f8c>
0x19db0008ff11   6b1  413978ff       cmpl [r8-0x1],rdi
0x19db0008ff15   6b5  0f85d8380000   jnz 0x19db000937f3  <+0x3f93>
0x19db0008ff1b   6bb  458b6007       movl r12,[r8+0x7]
0x19db0008ff1f   6bf  4d03e5         REX.W addq r12,r13
0x19db0008ff22   6c2  458b400b       movl r8,[r8+0xb]
0x19db0008ff26   6c6  41d1f8         sarl r8, 1
0x19db0008ff29   6c9  4183f802       cmpl r8,0x2
0x19db0008ff2d   6cd  0f86c7380000   jna 0x19db000937fa  <+0x3f9a>
0x19db0008ff33   6d3  c4c17b10442417 vmovsd xmm0,[r12+0x17]
0x19db0008ff3a   6da  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0008ff3e   6de  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008ff42   6e2  0f871b290000   ja 0x19db00092863  <+0x3003>
0x19db0008ff48   6e8  83f901         cmpl rcx,0x1
0x19db0008ff4b   6eb  0f86b0380000   jna 0x19db00093801  <+0x3fa1>
0x19db0008ff51   6f1  448b400b       movl r8,[rax+0xb]
0x19db0008ff55   6f5  4d03c5         REX.W addq r8,r13
0x19db0008ff58   6f8  45398598000000 cmpl [r13+0x98] (root (the_hole_value)),r8
0x19db0008ff5f   6ff  0f84b62c0000   jz 0x19db00092c1b  <+0x33bb>
0x19db0008ff65   705  41f6c001       testb r8,0x1
0x19db0008ff69   709  0f8499380000   jz 0x19db00093808  <+0x3fa8>
0x19db0008ff6f   70f  413978ff       cmpl [r8-0x1],rdi
0x19db0008ff73   713  0f8596380000   jnz 0x19db0009380f  <+0x3faf>
0x19db0008ff79   719  458b6007       movl r12,[r8+0x7]
0x19db0008ff7d   71d  4d03e5         REX.W addq r12,r13
0x19db0008ff80   720  458b400b       movl r8,[r8+0xb]
0x19db0008ff84   724  41d1f8         sarl r8, 1
0x19db0008ff87   727  4183f802       cmpl r8,0x2
0x19db0008ff8b   72b  0f8685380000   jna 0x19db00093816  <+0x3fb6>
0x19db0008ff91   731  c4c17b10442417 vmovsd xmm0,[r12+0x17]
0x19db0008ff98   738  c5f92ec8       vucomisd xmm1,xmm0
0x19db0008ff9c   73c  0f8711000000   ja 0x19db0008ffb3  <+0x753>
0x19db0008ffa2   742  4d8bc1         REX.W movq r8,r9
0x19db0008ffa5   745  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0008ffab   74b  4c8bf6         REX.W movq r14,rsi
0x19db0008ffae   74e  e9c5070000     jmp 0x19db00090778  <+0xf18>
0x19db0008ffb3   753  4d8bc7         REX.W movq r8,r15
0x19db0008ffb6   756  458b6003       movl r12,[r8+0x3]
0x19db0008ffba   75a  4d03e5         REX.W addq r12,r13
0x19db0008ffbd   75d  418b44240f     movl rax,[r12+0xf]
0x19db0008ffc2   762  4903c5         REX.W addq rax,r13
0x19db0008ffc5   765  a801           test al,0x1
0x19db0008ffc7   767  0f8450380000   jz 0x19db0009381d  <+0x3fbd>
0x19db0008ffcd   76d  4c8be6         REX.W movq r12,rsi
0x19db0008ffd0   770  443960ff       cmpl [rax-0x1],r12
0x19db0008ffd4   774  0f854a380000   jnz 0x19db00093824  <+0x3fc4>
0x19db0008ffda   77a  448b7807       movl r15,[rax+0x7]
0x19db0008ffde   77e  4d03fd         REX.W addq r15,r13
0x19db0008ffe1   781  8b400b         movl rax,[rax+0xb]
0x19db0008ffe4   784  d1f8           sarl rax, 1
0x19db0008ffe6   786  83f802         cmpl rax,0x2
0x19db0008ffe9   789  0f863c380000   jna 0x19db0009382b  <+0x3fcb>
0x19db0008ffef   78f  458b7f0f       movl r15,[r15+0xf]
0x19db0008fff3   793  4d03fd         REX.W addq r15,r13
0x19db0008fff6   796  41f6c701       testb r15,0x1
0x19db0008fffa   79a  0f844f2c0000   jz 0x19db00092c4f  <+0x33ef>
0x19db00090000   7a0  4539bdb0000000 cmpl [r13+0xb0] (root (false_value)),r15
0x19db00090007   7a7  0f843d000000   jz 0x19db0009004a  <+0x7ea>
0x19db0009000d   7ad  4539bdb8000000 cmpl [r13+0xb8] (root (empty_string)),r15
0x19db00090014   7b4  0f8430000000   jz 0x19db0009004a  <+0x7ea>
0x19db0009001a   7ba  418b47ff       movl rax,[r15-0x1]
0x19db0009001e   7be  4903c5         REX.W addq rax,r13
0x19db00090021   7c1  f6400910       testb [rax+0x9],0x10
0x19db00090025   7c5  0f851f000000   jnz 0x19db0009004a  <+0x7ea>
0x19db0009002b   7cb  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db00090032   7d2  0f84022c0000   jz 0x19db00092c3a  <+0x33da>
0x19db00090038   7d8  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db0009003f   7df  0f84e22b0000   jz 0x19db00092c27  <+0x33c7>
0x19db00090045   7e5  e95f010000     jmp 0x19db000901a9  <+0x949>
0x19db0009004a   7ea  458b792b       movl r15,[r9+0x2b]
0x19db0009004e   7ee  4d03fd         REX.W addq r15,r13
0x19db00090051   7f1  418b4007       movl rax,[r8+0x7]
0x19db00090055   7f5  4903c5         REX.W addq rax,r13
0x19db00090058   7f8  458b400b       movl r8,[r8+0xb]
0x19db0009005c   7fc  41d1f8         sarl r8, 1
0x19db0009005f   7ff  4183f803       cmpl r8,0x3
0x19db00090063   803  0f86c9370000   jna 0x19db00093832  <+0x3fd2>
0x19db00090069   809  8b4813         movl rcx,[rax+0x13]
0x19db0009006c   80c  4903cd         REX.W addq rcx,r13
0x19db0009006f   80f  4183f802       cmpl r8,0x2
0x19db00090073   813  0f86c0370000   jna 0x19db00093839  <+0x3fd9>
0x19db00090079   819  448b400f       movl r8,[rax+0xf]
0x19db0009007d   81d  4d03c5         REX.W addq r8,r13
0x19db00090080   820  41f6c701       testb r15,0x1
0x19db00090084   824  0f84b6370000   jz 0x19db00093840  <+0x3fe0>
0x19db0009008a   82a  418b47ff       movl rax,[r15-0x1]
0x19db0009008e   82e  4903c5         REX.W addq rax,r13
0x19db00090091   831  668178072c04   cmpw [rax+0x7],0x42c
0x19db00090097   837  0f85aa370000   jnz 0x19db00093847  <+0x3fe7>
0x19db0009009d   83d  418b4713       movl rax,[r15+0x13]
0x19db000900a1   841  4903c5         REX.W addq rax,r13
0x19db000900a4   844  48bea1422f08db190000 REX.W movq rsi,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db000900ae   84e  483bf0         REX.W cmpq rsi,rax
0x19db000900b1   851  0f8597370000   jnz 0x19db0009384e  <+0x3fee>
0x19db000900b7   857  4150           push r8
0x19db000900b9   859  51             push rcx
0x19db000900ba   85a  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db000900c1   861  4150           push r8
0x19db000900c3   863  b802000000     movl rax,0x2
0x19db000900c8   868  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000900d2   872  488bcf         REX.W movq rcx,rdi
0x19db000900d5   875  498bff         REX.W movq rdi,r15
0x19db000900d8   878  4d89e0         REX.W movq r8,r12
0x19db000900db   87b  41bfcd9f3008   movl r15,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db000900e1   881  4c8be0         REX.W movq r12,rax
0x19db000900e4   884  49ba8079b8f5ff7f0000 REX.W movq r10,0x7ffff5b87980  (Call_ReceiverIsNullOrUndefined)    ;; off heap target
0x19db000900ee   88e  41ffd2         call r10
0x19db000900f1   891  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db000900f5   895  458b480f       movl r9,[r8+0xf]
0x19db000900f9   899  4d03cd         REX.W addq r9,r13
0x19db000900fc   89c  41f6c101       testb r9,0x1
0x19db00090100   8a0  0f8456370000   jz 0x19db0009385c  <+0x3ffc>
0x19db00090106   8a6  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009010c   8ac  453959ff       cmpl [r9-0x1],r11
0x19db00090110   8b0  0f854d370000   jnz 0x19db00093863  <+0x4003>
0x19db00090116   8b6  458b6103       movl r12,[r9+0x3]
0x19db0009011a   8ba  4d03e5         REX.W addq r12,r13
0x19db0009011d   8bd  418b44240f     movl rax,[r12+0xf]
0x19db00090122   8c2  4903c5         REX.W addq rax,r13
0x19db00090125   8c5  a801           test al,0x1
0x19db00090127   8c7  0f843d370000   jz 0x19db0009386a  <+0x400a>
0x19db0009012d   8cd  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00090133   8d3  443960ff       cmpl [rax-0x1],r12
0x19db00090137   8d7  0f8534370000   jnz 0x19db00093871  <+0x4011>
0x19db0009013d   8dd  448b7007       movl r14,[rax+0x7]
0x19db00090141   8e1  4d03f5         REX.W addq r14,r13
0x19db00090144   8e4  448b780b       movl r15,[rax+0xb]
0x19db00090148   8e8  41d1ff         sarl r15, 1
0x19db0009014b   8eb  4183ff02       cmpl r15,0x2
0x19db0009014f   8ef  0f8623370000   jna 0x19db00093878  <+0x4018>
0x19db00090155   8f5  458b4eff       movl r9,[r14-0x1]
0x19db00090159   8f9  4c8b1536f9ffff REX.W movq r10,[rip+0xfffff936]
0x19db00090160   900  4d3bd1         REX.W cmpq r10,r9
0x19db00090163   903  7712           ja 0x19db00090177  <+0x917>
0x19db00090165   905  488b1539f9ffff REX.W movq rdx,[rip+0xfffff939]
0x19db0009016c   90c  4c8b1505f7ffff REX.W movq r10,[rip+0xfffff705]
0x19db00090173   913  41ffd2         call r10
0x19db00090176   916  cc             int3l
0x19db00090177   917  45398dd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r9
0x19db0009017e   91e  0f85da2a0000   jnz 0x19db00092c5e  <+0x33fe>
0x19db00090184   924  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db0009018b   92b  45894e0f       movl [r14+0xf],r9
0x19db0009018f   92f  4d8bc8         REX.W movq r9,r8
0x19db00090192   932  4c8b75d0       REX.W movq r14,[rbp-0x30]
0x19db00090196   936  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db0009019d   93d  4c8b1d2cf7ffff REX.W movq r11,[rip+0xfffff72c]
0x19db000901a4   944  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000901a9   949  4d8bc1         REX.W movq r8,r9
0x19db000901ac   94c  458b480f       movl r9,[r8+0xf]
0x19db000901b0   950  4d03cd         REX.W addq r9,r13
0x19db000901b3   953  41f6c101       testb r9,0x1
0x19db000901b7   957  0f84c2360000   jz 0x19db0009387f  <+0x401f>
0x19db000901bd   95d  41bf6ddc3008   movl r15,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db000901c3   963  453979ff       cmpl [r9-0x1],r15
0x19db000901c7   967  0f85b9360000   jnz 0x19db00093886  <+0x4026>
0x19db000901cd   96d  418b4103       movl rax,[r9+0x3]
0x19db000901d1   971  4903c5         REX.W addq rax,r13
0x19db000901d4   974  8b400f         movl rax,[rax+0xf]
0x19db000901d7   977  4903c5         REX.W addq rax,r13
0x19db000901da   97a  a801           test al,0x1
0x19db000901dc   97c  0f84ab360000   jz 0x19db0009388d  <+0x402d>
0x19db000901e2   982  443960ff       cmpl [rax-0x1],r12
0x19db000901e6   986  0f85a8360000   jnz 0x19db00093894  <+0x4034>
0x19db000901ec   98c  8b4807         movl rcx,[rax+0x7]
0x19db000901ef   98f  4903cd         REX.W addq rcx,r13
0x19db000901f2   992  8b400b         movl rax,[rax+0xb]
0x19db000901f5   995  d1f8           sarl rax, 1
0x19db000901f7   997  83f809         cmpl rax,0x9
0x19db000901fa   99a  0f869b360000   jna 0x19db0009389b  <+0x403b>
0x19db00090200   9a0  8b412b         movl rax,[rcx+0x2b]
0x19db00090203   9a3  4903c5         REX.W addq rax,r13
0x19db00090206   9a6  a801           test al,0x1
0x19db00090208   9a8  0f849e2a0000   jz 0x19db00092cac  <+0x344c>
0x19db0009020e   9ae  413985b0000000 cmpl [r13+0xb0] (root (false_value)),rax
0x19db00090215   9b5  0f843c000000   jz 0x19db00090257  <+0x9f7>
0x19db0009021b   9bb  413985b8000000 cmpl [r13+0xb8] (root (empty_string)),rax
0x19db00090222   9c2  0f842f000000   jz 0x19db00090257  <+0x9f7>
0x19db00090228   9c8  8b48ff         movl rcx,[rax-0x1]
0x19db0009022b   9cb  4903cd         REX.W addq rcx,r13
0x19db0009022e   9ce  f6410910       testb [rcx+0x9],0x10
0x19db00090232   9d2  0f851f000000   jnz 0x19db00090257  <+0x9f7>
0x19db00090238   9d8  41398d30010000 cmpl [r13+0x130] (root (heap_number_map)),rcx
0x19db0009023f   9df  0f844f2a0000   jz 0x19db00092c94  <+0x3434>
0x19db00090245   9e5  41398db0010000 cmpl [r13+0x1b0] (root (bigint_map)),rcx
0x19db0009024c   9ec  0f84302a0000   jz 0x19db00092c82  <+0x3422>
0x19db00090252   9f2  e939010000     jmp 0x19db00090390  <+0xb30>
0x19db00090257   9f7  418b402b       movl rax,[r8+0x2b]
0x19db0009025b   9fb  4903c5         REX.W addq rax,r13
0x19db0009025e   9fe  418b4907       movl rcx,[r9+0x7]
0x19db00090262   a02  4903cd         REX.W addq rcx,r13
0x19db00090265   a05  418b710b       movl rsi,[r9+0xb]
0x19db00090269   a09  d1fe           sarl rsi, 1
0x19db0009026b   a0b  83fe02         cmpl rsi,0x2
0x19db0009026e   a0e  0f862e360000   jna 0x19db000938a2  <+0x4042>
0x19db00090274   a14  448b410f       movl r8,[rcx+0xf]
0x19db00090278   a18  4d03c5         REX.W addq r8,r13
0x19db0009027b   a1b  83fe06         cmpl rsi,0x6
0x19db0009027e   a1e  0f8625360000   jna 0x19db000938a9  <+0x4049>
0x19db00090284   a24  8b491f         movl rcx,[rcx+0x1f]
0x19db00090287   a27  4903cd         REX.W addq rcx,r13
0x19db0009028a   a2a  a801           test al,0x1
0x19db0009028c   a2c  0f841e360000   jz 0x19db000938b0  <+0x4050>
0x19db00090292   a32  8b70ff         movl rsi,[rax-0x1]
0x19db00090295   a35  4903f5         REX.W addq rsi,r13
0x19db00090298   a38  66817e072c04   cmpw [rsi+0x7],0x42c
0x19db0009029e   a3e  0f8513360000   jnz 0x19db000938b7  <+0x4057>
0x19db000902a4   a44  8b7013         movl rsi,[rax+0x13]
0x19db000902a7   a47  4903f5         REX.W addq rsi,r13
0x19db000902aa   a4a  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db000902b4   a54  483bde         REX.W cmpq rbx,rsi
0x19db000902b7   a57  0f8501360000   jnz 0x19db000938be  <+0x405e>
0x19db000902bd   a5d  51             push rcx
0x19db000902be   a5e  4150           push r8
0x19db000902c0   a60  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db000902c7   a67  4150           push r8
0x19db000902c9   a69  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000902d3   a73  4c8bc7         REX.W movq r8,rdi
0x19db000902d6   a76  488bf8         REX.W movq rdi,rax
0x19db000902d9   a79  b802000000     movl rax,0x2
0x19db000902de   a7e  4c8b1501feffff REX.W movq r10,[rip+0xfffffe01]
0x19db000902e5   a85  41ffd2         call r10
0x19db000902e8   a88  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db000902ec   a8c  458b480f       movl r9,[r8+0xf]
0x19db000902f0   a90  4d03cd         REX.W addq r9,r13
0x19db000902f3   a93  41f6c101       testb r9,0x1
0x19db000902f7   a97  0f84cf350000   jz 0x19db000938cc  <+0x406c>
0x19db000902fd   a9d  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00090303   aa3  453959ff       cmpl [r9-0x1],r11
0x19db00090307   aa7  0f85c6350000   jnz 0x19db000938d3  <+0x4073>
0x19db0009030d   aad  458b6103       movl r12,[r9+0x3]
0x19db00090311   ab1  4d03e5         REX.W addq r12,r13
0x19db00090314   ab4  458b64240f     movl r12,[r12+0xf]
0x19db00090319   ab9  4d03e5         REX.W addq r12,r13
0x19db0009031c   abc  41f6c401       testb r12,0x1
0x19db00090320   ac0  0f84b4350000   jz 0x19db000938da  <+0x407a>
0x19db00090326   ac6  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009032c   acc  45397424ff     cmpl [r12-0x1],r14
0x19db00090331   ad1  0f85aa350000   jnz 0x19db000938e1  <+0x4081>
0x19db00090337   ad7  418b442407     movl rax,[r12+0x7]
0x19db0009033c   adc  4903c5         REX.W addq rax,r13
0x19db0009033f   adf  448b78ff       movl r15,[rax-0x1]
0x19db00090343   ae3  4c8b154cf7ffff REX.W movq r10,[rip+0xfffff74c]
0x19db0009034a   aea  4d3bd7         REX.W cmpq r10,r15
0x19db0009034d   aed  7712           ja 0x19db00090361  <+0xb01>
0x19db0009034f   aef  488b154ff7ffff REX.W movq rdx,[rip+0xfffff74f]
0x19db00090356   af6  4c8b151bf5ffff REX.W movq r10,[rip+0xfffff51b]
0x19db0009035d   afd  41ffd2         call r10
0x19db00090360   b00  cc             int3l
0x19db00090361   b01  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db00090368   b08  0f857a350000   jnz 0x19db000938e8  <+0x4088>
0x19db0009036e   b0e  458b64240b     movl r12,[r12+0xb]
0x19db00090373   b13  41d1fc         sarl r12, 1
0x19db00090376   b16  4183fc09       cmpl r12,0x9
0x19db0009037a   b1a  0f866f350000   jna 0x19db000938ef  <+0x408f>
0x19db00090380   b20  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db00090387   b27  4489482b       movl [rax+0x2b],r9
0x19db0009038b   b2b  e906000000     jmp 0x19db00090396  <+0xb36>
0x19db00090390   b30  4d8bdf         REX.W movq r11,r15
0x19db00090393   b33  4d89e6         REX.W movq r14,r12
0x19db00090396   b36  458b480f       movl r9,[r8+0xf]
0x19db0009039a   b3a  4d03cd         REX.W addq r9,r13
0x19db0009039d   b3d  41f6c101       testb r9,0x1
0x19db000903a1   b41  0f844f350000   jz 0x19db000938f6  <+0x4096>
0x19db000903a7   b47  453959ff       cmpl [r9-0x1],r11
0x19db000903ab   b4b  0f854c350000   jnz 0x19db000938fd  <+0x409d>
0x19db000903b1   b51  458b6103       movl r12,[r9+0x3]
0x19db000903b5   b55  4d03e5         REX.W addq r12,r13
0x19db000903b8   b58  458b64240f     movl r12,[r12+0xf]
0x19db000903bd   b5d  4d03e5         REX.W addq r12,r13
0x19db000903c0   b60  41f6c401       testb r12,0x1
0x19db000903c4   b64  0f843a350000   jz 0x19db00093904  <+0x40a4>
0x19db000903ca   b6a  45397424ff     cmpl [r12-0x1],r14
0x19db000903cf   b6f  0f8536350000   jnz 0x19db0009390b  <+0x40ab>
0x19db000903d5   b75  418b442407     movl rax,[r12+0x7]
0x19db000903da   b7a  4903c5         REX.W addq rax,r13
0x19db000903dd   b7d  458b64240b     movl r12,[r12+0xb]
0x19db000903e2   b82  41d1fc         sarl r12, 1
0x19db000903e5   b85  4183fc06       cmpl r12,0x6
0x19db000903e9   b89  0f8623350000   jna 0x19db00093912  <+0x40b2>
0x19db000903ef   b8f  448b601f       movl r12,[rax+0x1f]
0x19db000903f3   b93  4d03e5         REX.W addq r12,r13
0x19db000903f6   b96  41f6c401       testb r12,0x1
0x19db000903fa   b9a  0f84e8280000   jz 0x19db00092ce8  <+0x3488>
0x19db00090400   ba0  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db00090407   ba7  0f843e000000   jz 0x19db0009044b  <+0xbeb>
0x19db0009040d   bad  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db00090414   bb4  0f8431000000   jz 0x19db0009044b  <+0xbeb>
0x19db0009041a   bba  418b4424ff     movl rax,[r12-0x1]
0x19db0009041f   bbf  4903c5         REX.W addq rax,r13
0x19db00090422   bc2  f6400910       testb [rax+0x9],0x10
0x19db00090426   bc6  0f851f000000   jnz 0x19db0009044b  <+0xbeb>
0x19db0009042c   bcc  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db00090433   bd3  0f8495280000   jz 0x19db00092cce  <+0x346e>
0x19db00090439   bd9  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db00090440   be0  0f8474280000   jz 0x19db00092cba  <+0x345a>
0x19db00090446   be6  e93f010000     jmp 0x19db0009058a  <+0xd2a>
0x19db0009044b   beb  418b782b       movl rdi,[r8+0x2b]
0x19db0009044f   bef  4903fd         REX.W addq rdi,r13
0x19db00090452   bf2  458b6107       movl r12,[r9+0x7]
0x19db00090456   bf6  4d03e5         REX.W addq r12,r13
0x19db00090459   bf9  458b790b       movl r15,[r9+0xb]
0x19db0009045d   bfd  41d1ff         sarl r15, 1
0x19db00090460   c00  4183ff06       cmpl r15,0x6
0x19db00090464   c04  0f86af340000   jna 0x19db00093919  <+0x40b9>
0x19db0009046a   c0a  418b44241f     movl rax,[r12+0x1f]
0x19db0009046f   c0f  4903c5         REX.W addq rax,r13
0x19db00090472   c12  4183ff07       cmpl r15,0x7
0x19db00090476   c16  0f86a4340000   jna 0x19db00093920  <+0x40c0>
0x19db0009047c   c1c  458b642423     movl r12,[r12+0x23]
0x19db00090481   c21  4d03e5         REX.W addq r12,r13
0x19db00090484   c24  40f6c701       testb rdi,0x1
0x19db00090488   c28  0f8499340000   jz 0x19db00093927  <+0x40c7>
0x19db0009048e   c2e  448b7fff       movl r15,[rdi-0x1]
0x19db00090492   c32  4d03fd         REX.W addq r15,r13
0x19db00090495   c35  6641817f072c04 cmpw [r15+0x7],0x42c
0x19db0009049c   c3c  0f858c340000   jnz 0x19db0009392e  <+0x40ce>
0x19db000904a2   c42  448b7f13       movl r15,[rdi+0x13]
0x19db000904a6   c46  4d03fd         REX.W addq r15,r13
0x19db000904a9   c49  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db000904b3   c53  493bdf         REX.W cmpq rbx,r15
0x19db000904b6   c56  0f8579340000   jnz 0x19db00093935  <+0x40d5>
0x19db000904bc   c5c  4154           push r12
0x19db000904be   c5e  50             push rax
0x19db000904bf   c5f  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db000904c6   c66  4151           push r9
0x19db000904c8   c68  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000904d2   c72  b802000000     movl rax,0x2
0x19db000904d7   c77  41b9559f3008   movl r9,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000904dd   c7d  4c8b1502fcffff REX.W movq r10,[rip+0xfffffc02]
0x19db000904e4   c84  41ffd2         call r10
0x19db000904e7   c87  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db000904eb   c8b  458b480f       movl r9,[r8+0xf]
0x19db000904ef   c8f  4d03cd         REX.W addq r9,r13
0x19db000904f2   c92  41f6c101       testb r9,0x1
0x19db000904f6   c96  0f8447340000   jz 0x19db00093943  <+0x40e3>
0x19db000904fc   c9c  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00090502   ca2  453959ff       cmpl [r9-0x1],r11
0x19db00090506   ca6  0f853e340000   jnz 0x19db0009394a  <+0x40ea>
0x19db0009050c   cac  458b6103       movl r12,[r9+0x3]
0x19db00090510   cb0  4d03e5         REX.W addq r12,r13
0x19db00090513   cb3  458b64240f     movl r12,[r12+0xf]
0x19db00090518   cb8  4d03e5         REX.W addq r12,r13
0x19db0009051b   cbb  41f6c401       testb r12,0x1
0x19db0009051f   cbf  0f842c340000   jz 0x19db00093951  <+0x40f1>
0x19db00090525   cc5  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009052b   ccb  45397424ff     cmpl [r12-0x1],r14
0x19db00090530   cd0  0f8522340000   jnz 0x19db00093958  <+0x40f8>
0x19db00090536   cd6  418b442407     movl rax,[r12+0x7]
0x19db0009053b   cdb  4903c5         REX.W addq rax,r13
0x19db0009053e   cde  448b78ff       movl r15,[rax-0x1]
0x19db00090542   ce2  4c8b154df5ffff REX.W movq r10,[rip+0xfffff54d]
0x19db00090549   ce9  4d3bd7         REX.W cmpq r10,r15
0x19db0009054c   cec  7712           ja 0x19db00090560  <+0xd00>
0x19db0009054e   cee  488b1550f5ffff REX.W movq rdx,[rip+0xfffff550]
0x19db00090555   cf5  4c8b151cf3ffff REX.W movq r10,[rip+0xfffff31c]
0x19db0009055c   cfc  41ffd2         call r10
0x19db0009055f   cff  cc             int3l
0x19db00090560   d00  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db00090567   d07  0f85f2330000   jnz 0x19db0009395f  <+0x40ff>
0x19db0009056d   d0d  458b64240b     movl r12,[r12+0xb]
0x19db00090572   d12  41d1fc         sarl r12, 1
0x19db00090575   d15  4183fc06       cmpl r12,0x6
0x19db00090579   d19  0f86e7330000   jna 0x19db00093966  <+0x4106>
0x19db0009057f   d1f  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db00090586   d26  4489481f       movl [rax+0x1f],r9
0x19db0009058a   d2a  458b480f       movl r9,[r8+0xf]
0x19db0009058e   d2e  4d03cd         REX.W addq r9,r13
0x19db00090591   d31  41f6c101       testb r9,0x1
0x19db00090595   d35  0f84d2330000   jz 0x19db0009396d  <+0x410d>
0x19db0009059b   d3b  453959ff       cmpl [r9-0x1],r11
0x19db0009059f   d3f  0f85cf330000   jnz 0x19db00093974  <+0x4114>
0x19db000905a5   d45  458b6103       movl r12,[r9+0x3]
0x19db000905a9   d49  4d03e5         REX.W addq r12,r13
0x19db000905ac   d4c  458b64240f     movl r12,[r12+0xf]
0x19db000905b1   d51  4d03e5         REX.W addq r12,r13
0x19db000905b4   d54  41f6c401       testb r12,0x1
0x19db000905b8   d58  0f84bd330000   jz 0x19db0009397b  <+0x411b>
0x19db000905be   d5e  45397424ff     cmpl [r12-0x1],r14
0x19db000905c3   d63  0f85b9330000   jnz 0x19db00093982  <+0x4122>
0x19db000905c9   d69  418b442407     movl rax,[r12+0x7]
0x19db000905ce   d6e  4903c5         REX.W addq rax,r13
0x19db000905d1   d71  458b64240b     movl r12,[r12+0xb]
0x19db000905d6   d76  41d1fc         sarl r12, 1
0x19db000905d9   d79  4183fc0a       cmpl r12,0xa
0x19db000905dd   d7d  0f86a6330000   jna 0x19db00093989  <+0x4129>
0x19db000905e3   d83  448b602f       movl r12,[rax+0x2f]
0x19db000905e7   d87  4d03e5         REX.W addq r12,r13
0x19db000905ea   d8a  41f6c401       testb r12,0x1
0x19db000905ee   d8e  0f8431270000   jz 0x19db00092d25  <+0x34c5>
0x19db000905f4   d94  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db000905fb   d9b  0f843e000000   jz 0x19db0009063f  <+0xddf>
0x19db00090601   da1  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db00090608   da8  0f8431000000   jz 0x19db0009063f  <+0xddf>
0x19db0009060e   dae  418b4424ff     movl rax,[r12-0x1]
0x19db00090613   db3  4903c5         REX.W addq rax,r13
0x19db00090616   db6  f6400910       testb [rax+0x9],0x10
0x19db0009061a   dba  0f851f000000   jnz 0x19db0009063f  <+0xddf>
0x19db00090620   dc0  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db00090627   dc7  0f84de260000   jz 0x19db00092d0b  <+0x34ab>
0x19db0009062d   dcd  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db00090634   dd4  0f84bd260000   jz 0x19db00092cf7  <+0x3497>
0x19db0009063a   dda  e939010000     jmp 0x19db00090778  <+0xf18>
0x19db0009063f   ddf  418b782b       movl rdi,[r8+0x2b]
0x19db00090643   de3  4903fd         REX.W addq rdi,r13
0x19db00090646   de6  458b6107       movl r12,[r9+0x7]
0x19db0009064a   dea  4d03e5         REX.W addq r12,r13
0x19db0009064d   ded  458b790b       movl r15,[r9+0xb]
0x19db00090651   df1  41d1ff         sarl r15, 1
0x19db00090654   df4  4183ff07       cmpl r15,0x7
0x19db00090658   df8  0f8632330000   jna 0x19db00093990  <+0x4130>
0x19db0009065e   dfe  418b442423     movl rax,[r12+0x23]
0x19db00090663   e03  4903c5         REX.W addq rax,r13
0x19db00090666   e06  4183ff03       cmpl r15,0x3
0x19db0009066a   e0a  0f8627330000   jna 0x19db00093997  <+0x4137>
0x19db00090670   e10  458b642413     movl r12,[r12+0x13]
0x19db00090675   e15  4d03e5         REX.W addq r12,r13
0x19db00090678   e18  40f6c701       testb rdi,0x1
0x19db0009067c   e1c  0f841c330000   jz 0x19db0009399e  <+0x413e>
0x19db00090682   e22  448b7fff       movl r15,[rdi-0x1]
0x19db00090686   e26  4d03fd         REX.W addq r15,r13
0x19db00090689   e29  6641817f072c04 cmpw [r15+0x7],0x42c
0x19db00090690   e30  0f850f330000   jnz 0x19db000939a5  <+0x4145>
0x19db00090696   e36  448b7f13       movl r15,[rdi+0x13]
0x19db0009069a   e3a  4d03fd         REX.W addq r15,r13
0x19db0009069d   e3d  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db000906a7   e47  493bdf         REX.W cmpq rbx,r15
0x19db000906aa   e4a  0f85fc320000   jnz 0x19db000939ac  <+0x414c>
0x19db000906b0   e50  4154           push r12
0x19db000906b2   e52  50             push rax
0x19db000906b3   e53  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db000906ba   e5a  4151           push r9
0x19db000906bc   e5c  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000906c6   e66  b802000000     movl rax,0x2
0x19db000906cb   e6b  4c8b1514faffff REX.W movq r10,[rip+0xfffffa14]
0x19db000906d2   e72  41ffd2         call r10
0x19db000906d5   e75  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db000906d9   e79  458b480f       movl r9,[r8+0xf]
0x19db000906dd   e7d  4d03cd         REX.W addq r9,r13
0x19db000906e0   e80  41f6c101       testb r9,0x1
0x19db000906e4   e84  0f84d0320000   jz 0x19db000939ba  <+0x415a>
0x19db000906ea   e8a  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db000906f0   e90  453959ff       cmpl [r9-0x1],r11
0x19db000906f4   e94  0f85c7320000   jnz 0x19db000939c1  <+0x4161>
0x19db000906fa   e9a  458b6103       movl r12,[r9+0x3]
0x19db000906fe   e9e  4d03e5         REX.W addq r12,r13
0x19db00090701   ea1  458b64240f     movl r12,[r12+0xf]
0x19db00090706   ea6  4d03e5         REX.W addq r12,r13
0x19db00090709   ea9  41f6c401       testb r12,0x1
0x19db0009070d   ead  0f84b5320000   jz 0x19db000939c8  <+0x4168>
0x19db00090713   eb3  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00090719   eb9  45397424ff     cmpl [r12-0x1],r14
0x19db0009071e   ebe  0f85ab320000   jnz 0x19db000939cf  <+0x416f>
0x19db00090724   ec4  418b442407     movl rax,[r12+0x7]
0x19db00090729   ec9  4903c5         REX.W addq rax,r13
0x19db0009072c   ecc  448b78ff       movl r15,[rax-0x1]
0x19db00090730   ed0  4c8b155ff3ffff REX.W movq r10,[rip+0xfffff35f]
0x19db00090737   ed7  4d3bd7         REX.W cmpq r10,r15
0x19db0009073a   eda  7712           ja 0x19db0009074e  <+0xeee>
0x19db0009073c   edc  488b1562f3ffff REX.W movq rdx,[rip+0xfffff362]
0x19db00090743   ee3  4c8b152ef1ffff REX.W movq r10,[rip+0xfffff12e]
0x19db0009074a   eea  41ffd2         call r10
0x19db0009074d   eed  cc             int3l
0x19db0009074e   eee  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db00090755   ef5  0f857b320000   jnz 0x19db000939d6  <+0x4176>
0x19db0009075b   efb  458b64240b     movl r12,[r12+0xb]
0x19db00090760   f00  41d1fc         sarl r12, 1
0x19db00090763   f03  4183fc0a       cmpl r12,0xa
0x19db00090767   f07  0f8670320000   jna 0x19db000939dd  <+0x417d>
0x19db0009076d   f0d  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db00090774   f14  4489482f       movl [rax+0x2f],r9
0x19db00090778   f18  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db0009077c   f1c  41bccd9f3008   movl r12,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db00090782   f22  453961ff       cmpl [r9-0x1],r12
0x19db00090786   f26  0f8558320000   jnz 0x19db000939e4  <+0x4184>
0x19db0009078c   f2c  458b7907       movl r15,[r9+0x7]
0x19db00090790   f30  4d03fd         REX.W addq r15,r13
0x19db00090793   f33  418b410b       movl rax,[r9+0xb]
0x19db00090797   f37  d1f8           sarl rax, 1
0x19db00090799   f39  83f802         cmpl rax,0x2
0x19db0009079c   f3c  0f8649320000   jna 0x19db000939eb  <+0x418b>
0x19db000907a2   f42  458b7f0f       movl r15,[r15+0xf]
0x19db000907a6   f46  4d03fd         REX.W addq r15,r13
0x19db000907a9   f49  4539bd98000000 cmpl [r13+0x98] (root (the_hole_value)),r15
0x19db000907b0   f50  0f847e250000   jz 0x19db00092d34  <+0x34d4>
0x19db000907b6   f56  41f6c701       testb r15,0x1
0x19db000907ba   f5a  0f8432320000   jz 0x19db000939f2  <+0x4192>
0x19db000907c0   f60  b8559f3008     movl rax,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000907c5   f65  413947ff       cmpl [r15-0x1],rax
0x19db000907c9   f69  0f852a320000   jnz 0x19db000939f9  <+0x4199>
0x19db000907cf   f6f  418b5707       movl rdx,[r15+0x7]
0x19db000907d3   f73  4903d5         REX.W addq rdx,r13
0x19db000907d6   f76  458b7f0b       movl r15,[r15+0xb]
0x19db000907da   f7a  41d1ff         sarl r15, 1
0x19db000907dd   f7d  4183ff02       cmpl r15,0x2
0x19db000907e1   f81  0f8619320000   jna 0x19db00093a00  <+0x41a0>
0x19db000907e7   f87  c5fb104217     vmovsd xmm0,[rdx+0x17]
0x19db000907ec   f8c  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db000907f0   f90  c5f92ec8       vucomisd xmm1,xmm0
0x19db000907f4   f94  0f8698100000   jna 0x19db00091892  <+0x2032>
0x19db000907fa   f9a  458b780f       movl r15,[r8+0xf]
0x19db000907fe   f9e  4d03fd         REX.W addq r15,r13
0x19db00090801   fa1  41f6c701       testb r15,0x1
0x19db00090805   fa5  0f84fc310000   jz 0x19db00093a07  <+0x41a7>
0x19db0009080b   fab  45395fff       cmpl [r15-0x1],r11
0x19db0009080f   faf  0f85f9310000   jnz 0x19db00093a0e  <+0x41ae>
0x19db00090815   fb5  418b5703       movl rdx,[r15+0x3]
0x19db00090819   fb9  4903d5         REX.W addq rdx,r13
0x19db0009081c   fbc  8b520f         movl rdx,[rdx+0xf]
0x19db0009081f   fbf  4903d5         REX.W addq rdx,r13
0x19db00090822   fc2  f6c201         testb rdx,0x1
0x19db00090825   fc5  0f84ea310000   jz 0x19db00093a15  <+0x41b5>
0x19db0009082b   fcb  443972ff       cmpl [rdx-0x1],r14
0x19db0009082f   fcf  0f85e7310000   jnz 0x19db00093a1c  <+0x41bc>
0x19db00090835   fd5  8b4a07         movl rcx,[rdx+0x7]
0x19db00090838   fd8  4903cd         REX.W addq rcx,r13
0x19db0009083b   fdb  8b520b         movl rdx,[rdx+0xb]
0x19db0009083e   fde  d1fa           sarl rdx, 1
0x19db00090840   fe0  83fa04         cmpl rdx,0x4
0x19db00090843   fe3  0f86da310000   jna 0x19db00093a23  <+0x41c3>
0x19db00090849   fe9  8b5117         movl rdx,[rcx+0x17]
0x19db0009084c   fec  4903d5         REX.W addq rdx,r13
0x19db0009084f   fef  f6c201         testb rdx,0x1
0x19db00090852   ff2  0f840e250000   jz 0x19db00092d66  <+0x3506>
0x19db00090858   ff8  413995b0000000 cmpl [r13+0xb0] (root (false_value)),rdx
0x19db0009085f   fff  0f843c000000   jz 0x19db000908a1  <+0x1041>
0x19db00090865  1005  413995b8000000 cmpl [r13+0xb8] (root (empty_string)),rdx
0x19db0009086c  100c  0f842f000000   jz 0x19db000908a1  <+0x1041>
0x19db00090872  1012  8b4aff         movl rcx,[rdx-0x1]
0x19db00090875  1015  4903cd         REX.W addq rcx,r13
0x19db00090878  1018  f6410910       testb [rcx+0x9],0x10
0x19db0009087c  101c  0f851f000000   jnz 0x19db000908a1  <+0x1041>
0x19db00090882  1022  41398d30010000 cmpl [r13+0x130] (root (heap_number_map)),rcx
0x19db00090889  1029  0f84c3240000   jz 0x19db00092d52  <+0x34f2>
0x19db0009088f  102f  41398db0010000 cmpl [r13+0x1b0] (root (bigint_map)),rcx
0x19db00090896  1036  0f84a4240000   jz 0x19db00092d40  <+0x34e0>
0x19db0009089c  103c  e943010000     jmp 0x19db000909e4  <+0x1184>
0x19db000908a1  1041  418b782b       movl rdi,[r8+0x2b]
0x19db000908a5  1045  4903fd         REX.W addq rdi,r13
0x19db000908a8  1048  418b5707       movl rdx,[r15+0x7]
0x19db000908ac  104c  4903d5         REX.W addq rdx,r13
0x19db000908af  104f  458b7f0b       movl r15,[r15+0xb]
0x19db000908b3  1053  41d1ff         sarl r15, 1
0x19db000908b6  1056  4183ff04       cmpl r15,0x4
0x19db000908ba  105a  0f866a310000   jna 0x19db00093a2a  <+0x41ca>
0x19db000908c0  1060  8b4a17         movl rcx,[rdx+0x17]
0x19db000908c3  1063  4903cd         REX.W addq rcx,r13
0x19db000908c6  1066  4183ff05       cmpl r15,0x5
0x19db000908ca  106a  0f8661310000   jna 0x19db00093a31  <+0x41d1>
0x19db000908d0  1070  448b7a1b       movl r15,[rdx+0x1b]
0x19db000908d4  1074  4d03fd         REX.W addq r15,r13
0x19db000908d7  1077  40f6c701       testb rdi,0x1
0x19db000908db  107b  0f8457310000   jz 0x19db00093a38  <+0x41d8>
0x19db000908e1  1081  8b57ff         movl rdx,[rdi-0x1]
0x19db000908e4  1084  4903d5         REX.W addq rdx,r13
0x19db000908e7  1087  66817a072c04   cmpw [rdx+0x7],0x42c
0x19db000908ed  108d  0f854c310000   jnz 0x19db00093a3f  <+0x41df>
0x19db000908f3  1093  8b5713         movl rdx,[rdi+0x13]
0x19db000908f6  1096  4903d5         REX.W addq rdx,r13
0x19db000908f9  1099  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db00090903  10a3  483bda         REX.W cmpq rbx,rdx
0x19db00090906  10a6  0f853a310000   jnz 0x19db00093a46  <+0x41e6>
0x19db0009090c  10ac  4157           push r15
0x19db0009090e  10ae  51             push rcx
0x19db0009090f  10af  4d8bbd90000000 REX.W movq r15,[r13+0x90] (root (undefined_value))
0x19db00090916  10b6  4157           push r15
0x19db00090918  10b8  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00090922  10c2  4c8bf8         REX.W movq r15,rax
0x19db00090925  10c5  b802000000     movl rax,0x2
0x19db0009092a  10ca  4c8b15b5f7ffff REX.W movq r10,[rip+0xfffff7b5]
0x19db00090931  10d1  41ffd2         call r10
0x19db00090934  10d4  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db00090938  10d8  458b480f       movl r9,[r8+0xf]
0x19db0009093c  10dc  4d03cd         REX.W addq r9,r13
0x19db0009093f  10df  41f6c101       testb r9,0x1
0x19db00090943  10e3  0f840b310000   jz 0x19db00093a54  <+0x41f4>
0x19db00090949  10e9  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009094f  10ef  453959ff       cmpl [r9-0x1],r11
0x19db00090953  10f3  0f8502310000   jnz 0x19db00093a5b  <+0x41fb>
0x19db00090959  10f9  458b6103       movl r12,[r9+0x3]
0x19db0009095d  10fd  4d03e5         REX.W addq r12,r13
0x19db00090960  1100  418b44240f     movl rax,[r12+0xf]
0x19db00090965  1105  4903c5         REX.W addq rax,r13
0x19db00090968  1108  a801           test al,0x1
0x19db0009096a  110a  0f84f2300000   jz 0x19db00093a62  <+0x4202>
0x19db00090970  1110  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00090976  1116  443960ff       cmpl [rax-0x1],r12
0x19db0009097a  111a  0f85e9300000   jnz 0x19db00093a69  <+0x4209>
0x19db00090980  1120  448b7007       movl r14,[rax+0x7]
0x19db00090984  1124  4d03f5         REX.W addq r14,r13
0x19db00090987  1127  448b780b       movl r15,[rax+0xb]
0x19db0009098b  112b  41d1ff         sarl r15, 1
0x19db0009098e  112e  4183ff04       cmpl r15,0x4
0x19db00090992  1132  0f86d8300000   jna 0x19db00093a70  <+0x4210>
0x19db00090998  1138  458b4eff       movl r9,[r14-0x1]
0x19db0009099c  113c  4c8b15f3f0ffff REX.W movq r10,[rip+0xfffff0f3]
0x19db000909a3  1143  4d3bd1         REX.W cmpq r10,r9
0x19db000909a6  1146  7712           ja 0x19db000909ba  <+0x115a>
0x19db000909a8  1148  488b15f6f0ffff REX.W movq rdx,[rip+0xfffff0f6]
0x19db000909af  114f  4c8b15c2eeffff REX.W movq r10,[rip+0xffffeec2]
0x19db000909b6  1156  41ffd2         call r10
0x19db000909b9  1159  cc             int3l
0x19db000909ba  115a  45398dd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r9
0x19db000909c1  1161  0f85ad230000   jnz 0x19db00092d74  <+0x3514>
0x19db000909c7  1167  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db000909ce  116e  45894e17       movl [r14+0x17],r9
0x19db000909d2  1172  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db000909d6  1176  4d89e6         REX.W movq r14,r12
0x19db000909d9  1179  b8559f3008     movl rax,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000909de  117e  41bccd9f3008   movl r12,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db000909e4  1184  458b780f       movl r15,[r8+0xf]
0x19db000909e8  1188  4d03fd         REX.W addq r15,r13
0x19db000909eb  118b  41f6c701       testb r15,0x1
0x19db000909ef  118f  0f8482300000   jz 0x19db00093a77  <+0x4217>
0x19db000909f5  1195  45395fff       cmpl [r15-0x1],r11
0x19db000909f9  1199  0f857f300000   jnz 0x19db00093a7e  <+0x421e>
0x19db000909ff  119f  418b5703       movl rdx,[r15+0x3]
0x19db00090a03  11a3  4903d5         REX.W addq rdx,r13
0x19db00090a06  11a6  8b520f         movl rdx,[rdx+0xf]
0x19db00090a09  11a9  4903d5         REX.W addq rdx,r13
0x19db00090a0c  11ac  f6c201         testb rdx,0x1
0x19db00090a0f  11af  0f8470300000   jz 0x19db00093a85  <+0x4225>
0x19db00090a15  11b5  443972ff       cmpl [rdx-0x1],r14
0x19db00090a19  11b9  0f856d300000   jnz 0x19db00093a8c  <+0x422c>
0x19db00090a1f  11bf  8b4a07         movl rcx,[rdx+0x7]
0x19db00090a22  11c2  4903cd         REX.W addq rcx,r13
0x19db00090a25  11c5  8b520b         movl rdx,[rdx+0xb]
0x19db00090a28  11c8  d1fa           sarl rdx, 1
0x19db00090a2a  11ca  83fa05         cmpl rdx,0x5
0x19db00090a2d  11cd  0f8660300000   jna 0x19db00093a93  <+0x4233>
0x19db00090a33  11d3  8b511b         movl rdx,[rcx+0x1b]
0x19db00090a36  11d6  4903d5         REX.W addq rdx,r13
0x19db00090a39  11d9  f6c201         testb rdx,0x1
0x19db00090a3c  11dc  0f8480230000   jz 0x19db00092dc2  <+0x3562>
0x19db00090a42  11e2  413995b0000000 cmpl [r13+0xb0] (root (false_value)),rdx
0x19db00090a49  11e9  0f843c000000   jz 0x19db00090a8b  <+0x122b>
0x19db00090a4f  11ef  413995b8000000 cmpl [r13+0xb8] (root (empty_string)),rdx
0x19db00090a56  11f6  0f842f000000   jz 0x19db00090a8b  <+0x122b>
0x19db00090a5c  11fc  8b4aff         movl rcx,[rdx-0x1]
0x19db00090a5f  11ff  4903cd         REX.W addq rcx,r13
0x19db00090a62  1202  f6410910       testb [rcx+0x9],0x10
0x19db00090a66  1206  0f851f000000   jnz 0x19db00090a8b  <+0x122b>
0x19db00090a6c  120c  41398d30010000 cmpl [r13+0x130] (root (heap_number_map)),rcx
0x19db00090a73  1213  0f8431230000   jz 0x19db00092daa  <+0x354a>
0x19db00090a79  1219  41398db0010000 cmpl [r13+0x1b0] (root (bigint_map)),rcx
0x19db00090a80  1220  0f8412230000   jz 0x19db00092d98  <+0x3538>
0x19db00090a86  1226  e9a8050000     jmp 0x19db00091033  <+0x17d3>
0x19db00090a8b  122b  418b502b       movl rdx,[r8+0x2b]
0x19db00090a8f  122f  4903d5         REX.W addq rdx,r13
0x19db00090a92  1232  418b4f07       movl rcx,[r15+0x7]
0x19db00090a96  1236  4903cd         REX.W addq rcx,r13
0x19db00090a99  1239  418b770b       movl rsi,[r15+0xb]
0x19db00090a9d  123d  d1fe           sarl rsi, 1
0x19db00090a9f  123f  83fe05         cmpl rsi,0x5
0x19db00090aa2  1242  0f86f22f0000   jna 0x19db00093a9a  <+0x423a>
0x19db00090aa8  1248  8b791b         movl rdi,[rcx+0x1b]
0x19db00090aab  124b  4903fd         REX.W addq rdi,r13
0x19db00090aae  124e  83fe06         cmpl rsi,0x6
0x19db00090ab1  1251  0f86ea2f0000   jna 0x19db00093aa1  <+0x4241>
0x19db00090ab7  1257  8b491f         movl rcx,[rcx+0x1f]
0x19db00090aba  125a  4903cd         REX.W addq rcx,r13
0x19db00090abd  125d  f6c201         testb rdx,0x1
0x19db00090ac0  1260  0f84e22f0000   jz 0x19db00093aa8  <+0x4248>
0x19db00090ac6  1266  8b72ff         movl rsi,[rdx-0x1]
0x19db00090ac9  1269  4903f5         REX.W addq rsi,r13
0x19db00090acc  126c  66817e072c04   cmpw [rsi+0x7],0x42c
0x19db00090ad2  1272  0f85d72f0000   jnz 0x19db00093aaf  <+0x424f>
0x19db00090ad8  1278  8b7213         movl rsi,[rdx+0x13]
0x19db00090adb  127b  4903f5         REX.W addq rsi,r13
0x19db00090ade  127e  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db00090ae8  1288  483bde         REX.W cmpq rbx,rsi
0x19db00090aeb  128b  0f85c52f0000   jnz 0x19db00093ab6  <+0x4256>
0x19db00090af1  1291  8b720f         movl rsi,[rdx+0xf]
0x19db00090af4  1294  4903f5         REX.W addq rsi,r13
0x19db00090af7  1297  488955b0       REX.W movq [rbp-0x50],rdx
0x19db00090afb  129b  48897da8       REX.W movq [rbp-0x58],rdi
0x19db00090aff  129f  48894da0       REX.W movq [rbp-0x60],rcx
0x19db00090b03  12a3  33c0           xorl rax,rax
0x19db00090b05  12a5  48bb0d6a2f08db190000 REX.W movq rbx,0x19db082f6a0d    ;; object: 0x19db082f6a0d <FeedbackVector[45]>
0x19db00090b0f  12af  48897598       REX.W movq [rbp-0x68],rsi
0x19db00090b13  12b3  488bd7         REX.W movq rdx,rdi
0x19db00090b16  12b6  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db00090b20  12c0  4c8bf9         REX.W movq r15,rcx
0x19db00090b23  12c3  49ba80f6cbf5ff7f0000 REX.W movq r10,0x7ffff5cbf680  (LoadIC_Megamorphic)    ;; off heap target
0x19db00090b2d  12cd  41ffd2         call r10
0x19db00090b30  12d0  a801           test al,0x1
0x19db00090b32  12d2  0f848c2f0000   jz 0x19db00093ac4  <+0x4264>
0x19db00090b38  12d8  41b8559f3008   movl r8,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00090b3e  12de  443940ff       cmpl [rax-0x1],r8
0x19db00090b42  12e2  0f85832f0000   jnz 0x19db00093acb  <+0x426b>
0x19db00090b48  12e8  448b4807       movl r9,[rax+0x7]
0x19db00090b4c  12ec  4d03cd         REX.W addq r9,r13
0x19db00090b4f  12ef  448b600b       movl r12,[rax+0xb]
0x19db00090b53  12f3  41d1fc         sarl r12, 1
0x19db00090b56  12f6  4183fc00       cmpl r12,0x0
0x19db00090b5a  12fa  0f86722f0000   jna 0x19db00093ad2  <+0x4272>
0x19db00090b60  1300  c4c17b104107   vmovsd xmm0,[r9+0x7]
0x19db00090b66  1306  b808000000     movl rax,0x8
0x19db00090b6b  130b  c5fb118548ffffff vmovsd [rbp-0xb8],xmm0
0x19db00090b73  1313  488b55a0       REX.W movq rdx,[rbp-0x60]
0x19db00090b77  1317  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db00090b81  1321  48bb0d6a2f08db190000 REX.W movq rbx,0x19db082f6a0d    ;; object: 0x19db082f6a0d <FeedbackVector[45]>
0x19db00090b8b  132b  488b7598       REX.W movq rsi,[rbp-0x68]
0x19db00090b8f  132f  4c8bc8         REX.W movq r9,rax
0x19db00090b92  1332  4c8b158cffffff REX.W movq r10,[rip+0xffffff8c]
0x19db00090b99  1339  41ffd2         call r10
0x19db00090b9c  133c  a801           test al,0x1
0x19db00090b9e  133e  0f843c2f0000   jz 0x19db00093ae0  <+0x4280>
0x19db00090ba4  1344  41b8559f3008   movl r8,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00090baa  134a  443940ff       cmpl [rax-0x1],r8
0x19db00090bae  134e  0f85332f0000   jnz 0x19db00093ae7  <+0x4287>
0x19db00090bb4  1354  448b4807       movl r9,[rax+0x7]
0x19db00090bb8  1358  4d03cd         REX.W addq r9,r13
0x19db00090bbb  135b  448b600b       movl r12,[rax+0xb]
0x19db00090bbf  135f  41d1fc         sarl r12, 1
0x19db00090bc2  1362  4183fc00       cmpl r12,0x0
0x19db00090bc6  1366  0f86222f0000   jna 0x19db00093aee  <+0x428e>
0x19db00090bcc  136c  c4c17b104107   vmovsd xmm0,[r9+0x7]
0x19db00090bd2  1372  c5fb118540ffffff vmovsd [rbp-0xc0],xmm0
0x19db00090bda  137a  488b55a8       REX.W movq rdx,[rbp-0x58]
0x19db00090bde  137e  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db00090be8  1388  33c0           xorl rax,rax
0x19db00090bea  138a  48bb0d6a2f08db190000 REX.W movq rbx,0x19db082f6a0d    ;; object: 0x19db082f6a0d <FeedbackVector[45]>
0x19db00090bf4  1394  488b7598       REX.W movq rsi,[rbp-0x68]
0x19db00090bf8  1398  4c8b1526ffffff REX.W movq r10,[rip+0xffffff26]
0x19db00090bff  139f  41ffd2         call r10
0x19db00090c02  13a2  a801           test al,0x1
0x19db00090c04  13a4  0f84f22e0000   jz 0x19db00093afc  <+0x429c>
0x19db00090c0a  13aa  41b8559f3008   movl r8,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00090c10  13b0  443940ff       cmpl [rax-0x1],r8
0x19db00090c14  13b4  0f85e92e0000   jnz 0x19db00093b03  <+0x42a3>
0x19db00090c1a  13ba  448b4807       movl r9,[rax+0x7]
0x19db00090c1e  13be  4d03cd         REX.W addq r9,r13
0x19db00090c21  13c1  448b600b       movl r12,[rax+0xb]
0x19db00090c25  13c5  41d1fc         sarl r12, 1
0x19db00090c28  13c8  4183fc01       cmpl r12,0x1
0x19db00090c2c  13cc  0f86d82e0000   jna 0x19db00093b0a  <+0x42aa>
0x19db00090c32  13d2  c4c17b10410f   vmovsd xmm0,[r9+0xf]
0x19db00090c38  13d8  c5fb118538ffffff vmovsd [rbp-0xc8],xmm0
0x19db00090c40  13e0  488b55a0       REX.W movq rdx,[rbp-0x60]
0x19db00090c44  13e4  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db00090c4e  13ee  b808000000     movl rax,0x8
0x19db00090c53  13f3  48bb0d6a2f08db190000 REX.W movq rbx,0x19db082f6a0d    ;; object: 0x19db082f6a0d <FeedbackVector[45]>
0x19db00090c5d  13fd  488b7598       REX.W movq rsi,[rbp-0x68]
0x19db00090c61  1401  4c8b15bdfeffff REX.W movq r10,[rip+0xfffffebd]
0x19db00090c68  1408  41ffd2         call r10
0x19db00090c6b  140b  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db00090c73  1413  c5f92e8548ffffff vucomisd xmm0,[rbp-0xb8]
0x19db00090c7b  141b  0f830b000000   jnc 0x19db00090c8c  <+0x142c>
0x19db00090c81  1421  41b9ffffffff   movl r9,0xffffffff
0x19db00090c87  1427  e906000000     jmp 0x19db00090c92  <+0x1432>
0x19db00090c8c  142c  41b901000000   movl r9,0x1
0x19db00090c92  1432  a801           test al,0x1
0x19db00090c94  1434  0f847e2e0000   jz 0x19db00093b18  <+0x42b8>
0x19db00090c9a  143a  41bb559f3008   movl r11,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00090ca0  1440  443958ff       cmpl [rax-0x1],r11
0x19db00090ca4  1444  0f85752e0000   jnz 0x19db00093b1f  <+0x42bf>
0x19db00090caa  144a  448b6007       movl r12,[rax+0x7]
0x19db00090cae  144e  4d03e5         REX.W addq r12,r13
0x19db00090cb1  1451  448b700b       movl r14,[rax+0xb]
0x19db00090cb5  1455  41d1fe         sarl r14, 1
0x19db00090cb8  1458  4183fe01       cmpl r14,0x1
0x19db00090cbc  145c  0f86642e0000   jna 0x19db00093b26  <+0x42c6>
0x19db00090cc2  1462  c4c17b104c240f vmovsd xmm1,[r12+0xf]
0x19db00090cc9  1469  41b8ffffffff   movl r8,0xffffffff
0x19db00090ccf  146f  c5f92e8d38ffffff vucomisd xmm1,[rbp-0xc8]
0x19db00090cd7  1477  0f8308000000   jnc 0x19db00090ce5  <+0x1485>
0x19db00090cdd  147d  4d8be0         REX.W movq r12,r8
0x19db00090ce0  1480  e906000000     jmp 0x19db00090ceb  <+0x148b>
0x19db00090ce5  1485  41bc01000000   movl r12,0x1
0x19db00090ceb  148b  c5f35c8d38ffffff vsubsd xmm1,xmm1,[rbp-0xc8]
0x19db00090cf3  1493  c5e176db       vpcmpeqd xmm3,xmm3,xmm3
0x19db00090cf7  1497  c5e173d301     vpsrlq xmm3,xmm3,1
0x19db00090cfc  149c  c5e154d1       vandpd xmm2,xmm3,xmm1
0x19db00090d00  14a0  c5fb5c8d48ffffff vsubsd xmm1,xmm0,[rbp-0xb8]
0x19db00090d08  14a8  c5d976e4       vpcmpeqd xmm4,xmm4,xmm4
0x19db00090d0c  14ac  c5d973d401     vpsrlq xmm4,xmm4,1
0x19db00090d11  14b1  c5d954d9       vandpd xmm3,xmm4,xmm1
0x19db00090d15  14b5  c5f92eda       vucomisd xmm3,xmm2
0x19db00090d19  14b9  0f832d000000   jnc 0x19db00090d4c  <+0x14ec>
0x19db00090d1f  14bf  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db00090d23  14c3  c5f173f137     vpsllq xmm1,xmm1,55
0x19db00090d28  14c8  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db00090d2d  14cd  c5eb59e1       vmulsd xmm4,xmm2,xmm1
0x19db00090d31  14d1  4d89e7         REX.W movq r15,r12
0x19db00090d34  14d4  4531e4         xorl r12,r12
0x19db00090d37  14d7  c57928fb       vmovapd xmm15,xmm3
0x19db00090d3b  14db  c5f928da       vmovapd xmm3,xmm2
0x19db00090d3f  14df  c4c17928d7     vmovapd xmm2,xmm15
0x19db00090d44  14e4  4d89e6         REX.W movq r14,r12
0x19db00090d47  14e7  e91b000000     jmp 0x19db00090d67  <+0x1507>
0x19db00090d4c  14ec  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db00090d50  14f0  c5f173f137     vpsllq xmm1,xmm1,55
0x19db00090d55  14f5  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db00090d5a  14fa  c5e359e1       vmulsd xmm4,xmm3,xmm1
0x19db00090d5e  14fe  4d8bf1         REX.W movq r14,r9
0x19db00090d61  1501  4533c9         xorl r9,r9
0x19db00090d64  1504  4d8bf9         REX.W movq r15,r9
0x19db00090d67  1507  48bb09652e08db190000 REX.W movq rbx,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db00090d71  1511  ba39692e08     movl rdx,0x82e6939      ;; (compressed) object: 0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)>
0x19db00090d76  1516  39530b         cmpl [rbx+0xb],rdx
0x19db00090d79  1519  0f85ae2d0000   jnz 0x19db00093b2d  <+0x42cd>
0x19db00090d7f  151f  8b5303         movl rdx,[rbx+0x3]
0x19db00090d82  1522  4903d5         REX.W addq rdx,r13
0x19db00090d85  1525  8b5263         movl rdx,[rdx+0x63]
0x19db00090d88  1528  4c8b1507edffff REX.W movq r10,[rip+0xffffed07]
0x19db00090d8f  152f  4c3bd2         REX.W cmpq r10,rdx
0x19db00090d92  1532  7712           ja 0x19db00090da6  <+0x1546>
0x19db00090d94  1534  488b150aedffff REX.W movq rdx,[rip+0xffffed0a]
0x19db00090d9b  153b  4c8b15d6eaffff REX.W movq r10,[rip+0xffffead6]
0x19db00090da2  1542  41ffd2         call r10
0x19db00090da5  1545  cc             int3l
0x19db00090da6  1546  488b5d98       REX.W movq rbx,[rbp-0x68]
0x19db00090daa  154a  8b4b0f         movl rcx,[rbx+0xf]
0x19db00090dad  154d  4903cd         REX.W addq rcx,r13
0x19db00090db0  1550  f6c101         testb rcx,0x1
0x19db00090db3  1553  0f847b2d0000   jz 0x19db00093b34  <+0x42d4>
0x19db00090db9  1559  be6ddc3008     movl rsi,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00090dbe  155e  3971ff         cmpl [rcx-0x1],rsi
0x19db00090dc1  1561  0f85742d0000   jnz 0x19db00093b3b  <+0x42db>
0x19db00090dc7  1567  8b4903         movl rcx,[rcx+0x3]
0x19db00090dca  156a  4903cd         REX.W addq rcx,r13
0x19db00090dcd  156d  8b7917         movl rdi,[rcx+0x17]
0x19db00090dd0  1570  4903fd         REX.W addq rdi,r13
0x19db00090dd3  1573  40f6c701       testb rdi,0x1
0x19db00090dd7  1577  410f94c0       setzl r8l
0x19db00090ddb  157b  450fb6c0       movzxbl r8,r8
0x19db00090ddf  157f  4c8bdf         REX.W movq r11,rdi
0x19db00090de2  1582  41d1fb         sarl r11, 1
0x19db00090de5  1585  4183f800       cmpl r8,0x0
0x19db00090de9  1589  0f852d000000   jnz 0x19db00090e1c  <+0x15bc>
0x19db00090def  158f  8b77ff         movl rsi,[rdi-0x1]
0x19db00090df2  1592  4903f5         REX.W addq rsi,r13
0x19db00090df5  1595  4139b530010000 cmpl [r13+0x130] (root (heap_number_map)),rsi
0x19db00090dfc  159c  0f840b000000   jz 0x19db00090e0d  <+0x15ad>
0x19db00090e02  15a2  66837e0743     cmpw [rsi+0x7],0x43
0x19db00090e07  15a7  0f85352d0000   jnz 0x19db00093b42  <+0x42e2>
0x19db00090e0d  15ad  c5fb106f03     vmovsd xmm5,[rdi+0x3]
0x19db00090e12  15b2  be6ddc3008     movl rsi,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00090e17  15b7  e905000000     jmp 0x19db00090e21  <+0x15c1>
0x19db00090e1c  15bc  c4c1032aeb     vcvtlsi2sd xmm5,xmm15,r11
0x19db00090e21  15c1  c5d358eb       vaddsd xmm5,xmm5,xmm3
0x19db00090e25  15c5  c4e3490bf50a   vroundsd xmm6,xmm6,xmm5,0xa
0x19db00090e2b  15cb  c5cb5cc9       vsubsd xmm1,xmm6,xmm1
0x19db00090e2f  15cf  c5f92ee9       vucomisd xmm5,xmm1
0x19db00090e33  15d3  0f8312000000   jnc 0x19db00090e4b  <+0x15eb>
0x19db00090e39  15d9  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db00090e3d  15dd  c5f173f136     vpsllq xmm1,xmm1,54
0x19db00090e42  15e2  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db00090e47  15e7  c5cb5cf1       vsubsd xmm6,xmm6,xmm1
0x19db00090e4b  15eb  c5fb2cfe       vcvttsd2si rdi,xmm6
0x19db00090e4f  15ef  be59682e08     movl rsi,0x82e6859      ;; (compressed) object: 0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)>
0x19db00090e54  15f4  3bf2           cmpl rsi,rdx
0x19db00090e56  15f6  0f85ed2c0000   jnz 0x19db00093b49  <+0x42e9>
0x19db00090e5c  15fc  c5832acf       vcvtlsi2sd xmm1,xmm15,rdi
0x19db00090e60  1600  4183f800       cmpl r8,0x0
0x19db00090e64  1604  0f84e62c0000   jz 0x19db00093b50  <+0x42f0>
0x19db00090e6a  160a  c5f92ece       vucomisd xmm1,xmm6
0x19db00090e6e  160e  0f8ae32c0000   jpe 0x19db00093b57  <+0x42f7>
0x19db00090e74  1614  0f85dd2c0000   jnz 0x19db00093b57  <+0x42f7>
0x19db00090e7a  161a  443bdf         cmpl r11,rdi
0x19db00090e7d  161d  0f8ddf000000   jge 0x19db00090f62  <+0x1702>
0x19db00090e83  1623  c5db58ca       vaddsd xmm1,xmm4,xmm2
0x19db00090e87  1627  c5f92ecb       vucomisd xmm1,xmm3
0x19db00090e8b  162b  0f8315000000   jnc 0x19db00090ea6  <+0x1646>
0x19db00090e91  1631  c5fb10a538ffffff vmovsd xmm4,[rbp-0xc8]
0x19db00090e99  1639  c5fb10ad48ffffff vmovsd xmm5,[rbp-0xb8]
0x19db00090ea1  1641  e91e000000     jmp 0x19db00090ec4  <+0x1664>
0x19db00090ea6  1646  c4c1032ae4     vcvtlsi2sd xmm4,xmm15,r12
0x19db00090eab  164b  c4c1032ae9     vcvtlsi2sd xmm5,xmm15,r9
0x19db00090eb0  1650  c5db58a538ffffff vaddsd xmm4,xmm4,[rbp-0xc8]
0x19db00090eb8  1658  c5d358ad48ffffff vaddsd xmm5,xmm5,[rbp-0xb8]
0x19db00090ec0  1660  c5f35ccb       vsubsd xmm1,xmm1,xmm3
0x19db00090ec4  1664  c4c1032aff     vcvtlsi2sd xmm7,xmm15,r15
0x19db00090ec9  1669  c441032ac6     vcvtlsi2sd xmm8,xmm15,r14
0x19db00090ece  166e  4183c301       addl r11,0x1
0x19db00090ed2  1672  0f80862c0000   jo 0x19db00093b5e  <+0x42fe>
0x19db00090ed8  1678  c5db58c7       vaddsd xmm0,xmm4,xmm7
0x19db00090edc  167c  c4c15358e0     vaddsd xmm4,xmm5,xmm8
0x19db00090ee1  1681  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00090ee5  1685  0f870c000000   ja 0x19db00090ef7  <+0x1697>
0x19db00090eeb  168b  e9e01e0000     jmp 0x19db00092dd0  <+0x3570>
0x19db00090ef0  1690  4d8bd8         REX.W movq r11,r8
0x19db00090ef3  1693  c5f928cd       vmovapd xmm1,xmm5
0x19db00090ef7  1697  443bdf         cmpl r11,rdi
0x19db00090efa  169a  0f8d62000000   jge 0x19db00090f62  <+0x1702>
0x19db00090f00  16a0  c5f358ea       vaddsd xmm5,xmm1,xmm2
0x19db00090f04  16a4  c5f92eeb       vucomisd xmm5,xmm3
0x19db00090f08  16a8  0f830d000000   jnc 0x19db00090f1b  <+0x16bb>
0x19db00090f0e  16ae  c57928d0       vmovapd xmm10,xmm0
0x19db00090f12  16b2  c57928cc       vmovapd xmm9,xmm4
0x19db00090f16  16b6  e925000000     jmp 0x19db00090f40  <+0x16e0>
0x19db00090f1b  16bb  c441032acc     vcvtlsi2sd xmm9,xmm15,r12
0x19db00090f20  16c0  c53358c8       vaddsd xmm9,xmm9,xmm0
0x19db00090f24  16c4  c441032ad1     vcvtlsi2sd xmm10,xmm15,r9
0x19db00090f29  16c9  c52b58d4       vaddsd xmm10,xmm10,xmm4
0x19db00090f2d  16cd  c5d35ceb       vsubsd xmm5,xmm5,xmm3
0x19db00090f31  16d1  c4417928fa     vmovapd xmm15,xmm10
0x19db00090f36  16d6  c4417928d1     vmovapd xmm10,xmm9
0x19db00090f3b  16db  c4417928cf     vmovapd xmm9,xmm15
0x19db00090f40  16e0  4d8bc3         REX.W movq r8,r11
0x19db00090f43  16e3  4183c001       addl r8,0x1
0x19db00090f47  16e7  0f80182c0000   jo 0x19db00093b65  <+0x4305>
0x19db00090f4d  16ed  c4c14358c2     vaddsd xmm0,xmm7,xmm10
0x19db00090f52  16f2  c4c13b58e1     vaddsd xmm4,xmm8,xmm9
0x19db00090f57  16f7  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00090f5b  16fb  7793           ja 0x19db00090ef0  <+0x1690>
0x19db00090f5d  16fd  e9551f0000     jmp 0x19db00092eb7  <+0x3657>
0x19db00090f62  1702  83ff00         cmpl rdi,0x0
0x19db00090f65  1705  0f8433200000   jz 0x19db00092f9e  <+0x373e>
0x19db00090f6b  170b  4c8bc7         REX.W movq r8,rdi
0x19db00090f6e  170e  4403c7         addl r8,rdi
0x19db00090f71  1711  0f8045200000   jo 0x19db00092fbc  <+0x375c>
0x19db00090f77  1717  44894117       movl [rcx+0x17],r8
0x19db00090f7b  171b  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db00090f82  1722  4c23c9         REX.W andq r9,rcx
0x19db00090f85  1725  41f6410804     testb [r9+0x8],0x4
0x19db00090f8a  172a  0f8589260000   jnz 0x19db00093619  <+0x3db9>
0x19db00090f90  1730  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db00090f94  1734  458b480f       movl r9,[r8+0xf]
0x19db00090f98  1738  4d03cd         REX.W addq r9,r13
0x19db00090f9b  173b  41f6c101       testb r9,0x1
0x19db00090f9f  173f  0f84c72b0000   jz 0x19db00093b6c  <+0x430c>
0x19db00090fa5  1745  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00090fab  174b  453959ff       cmpl [r9-0x1],r11
0x19db00090faf  174f  0f85be2b0000   jnz 0x19db00093b73  <+0x4313>
0x19db00090fb5  1755  458b6103       movl r12,[r9+0x3]
0x19db00090fb9  1759  4d03e5         REX.W addq r12,r13
0x19db00090fbc  175c  458b64240f     movl r12,[r12+0xf]
0x19db00090fc1  1761  4d03e5         REX.W addq r12,r13
0x19db00090fc4  1764  41f6c401       testb r12,0x1
0x19db00090fc8  1768  0f84ac2b0000   jz 0x19db00093b7a  <+0x431a>
0x19db00090fce  176e  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00090fd4  1774  45397424ff     cmpl [r12-0x1],r14
0x19db00090fd9  1779  0f85a22b0000   jnz 0x19db00093b81  <+0x4321>
0x19db00090fdf  177f  418b442407     movl rax,[r12+0x7]
0x19db00090fe4  1784  4903c5         REX.W addq rax,r13
0x19db00090fe7  1787  448b78ff       movl r15,[rax-0x1]
0x19db00090feb  178b  4c8b15a4eaffff REX.W movq r10,[rip+0xffffeaa4]
0x19db00090ff2  1792  4d3bd7         REX.W cmpq r10,r15
0x19db00090ff5  1795  7712           ja 0x19db00091009  <+0x17a9>
0x19db00090ff7  1797  488b15a7eaffff REX.W movq rdx,[rip+0xffffeaa7]
0x19db00090ffe  179e  4c8b1573e8ffff REX.W movq r10,[rip+0xffffe873]
0x19db00091005  17a5  41ffd2         call r10
0x19db00091008  17a8  cc             int3l
0x19db00091009  17a9  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db00091010  17b0  0f85722b0000   jnz 0x19db00093b88  <+0x4328>
0x19db00091016  17b6  458b64240b     movl r12,[r12+0xb]
0x19db0009101b  17bb  41d1fc         sarl r12, 1
0x19db0009101e  17be  4183fc05       cmpl r12,0x5
0x19db00091022  17c2  0f86672b0000   jna 0x19db00093b8f  <+0x432f>
0x19db00091028  17c8  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db0009102f  17cf  4489481b       movl [rax+0x1b],r9
0x19db00091033  17d3  458b480f       movl r9,[r8+0xf]
0x19db00091037  17d7  4d03cd         REX.W addq r9,r13
0x19db0009103a  17da  41f6c101       testb r9,0x1
0x19db0009103e  17de  0f84522b0000   jz 0x19db00093b96  <+0x4336>
0x19db00091044  17e4  453959ff       cmpl [r9-0x1],r11
0x19db00091048  17e8  0f854f2b0000   jnz 0x19db00093b9d  <+0x433d>
0x19db0009104e  17ee  458b6103       movl r12,[r9+0x3]
0x19db00091052  17f2  4d03e5         REX.W addq r12,r13
0x19db00091055  17f5  458b64240f     movl r12,[r12+0xf]
0x19db0009105a  17fa  4d03e5         REX.W addq r12,r13
0x19db0009105d  17fd  41f6c401       testb r12,0x1
0x19db00091061  1801  0f843d2b0000   jz 0x19db00093ba4  <+0x4344>
0x19db00091067  1807  45397424ff     cmpl [r12-0x1],r14
0x19db0009106c  180c  0f85392b0000   jnz 0x19db00093bab  <+0x434b>
0x19db00091072  1812  418b442407     movl rax,[r12+0x7]
0x19db00091077  1817  4903c5         REX.W addq rax,r13
0x19db0009107a  181a  458b64240b     movl r12,[r12+0xb]
0x19db0009107f  181f  41d1fc         sarl r12, 1
0x19db00091082  1822  4183fc06       cmpl r12,0x6
0x19db00091086  1826  0f86262b0000   jna 0x19db00093bb2  <+0x4352>
0x19db0009108c  182c  448b601f       movl r12,[rax+0x1f]
0x19db00091090  1830  4d03e5         REX.W addq r12,r13
0x19db00091093  1833  41f6c401       testb r12,0x1
0x19db00091097  1837  0f84b81f0000   jz 0x19db00093055  <+0x37f5>
0x19db0009109d  183d  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db000910a4  1844  0f843e000000   jz 0x19db000910e8  <+0x1888>
0x19db000910aa  184a  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db000910b1  1851  0f8431000000   jz 0x19db000910e8  <+0x1888>
0x19db000910b7  1857  418b4424ff     movl rax,[r12-0x1]
0x19db000910bc  185c  4903c5         REX.W addq rax,r13
0x19db000910bf  185f  f6400910       testb [rax+0x9],0x10
0x19db000910c3  1863  0f851f000000   jnz 0x19db000910e8  <+0x1888>
0x19db000910c9  1869  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db000910d0  1870  0f84651f0000   jz 0x19db0009303b  <+0x37db>
0x19db000910d6  1876  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db000910dd  187d  0f84441f0000   jz 0x19db00093027  <+0x37c7>
0x19db000910e3  1883  e942010000     jmp 0x19db0009122a  <+0x19ca>
0x19db000910e8  1888  418b782b       movl rdi,[r8+0x2b]
0x19db000910ec  188c  4903fd         REX.W addq rdi,r13
0x19db000910ef  188f  458b6107       movl r12,[r9+0x7]
0x19db000910f3  1893  4d03e5         REX.W addq r12,r13
0x19db000910f6  1896  458b790b       movl r15,[r9+0xb]
0x19db000910fa  189a  41d1ff         sarl r15, 1
0x19db000910fd  189d  4183ff06       cmpl r15,0x6
0x19db00091101  18a1  0f86b22a0000   jna 0x19db00093bb9  <+0x4359>
0x19db00091107  18a7  418b44241f     movl rax,[r12+0x1f]
0x19db0009110c  18ac  4903c5         REX.W addq rax,r13
0x19db0009110f  18af  4183ff07       cmpl r15,0x7
0x19db00091113  18b3  0f86a72a0000   jna 0x19db00093bc0  <+0x4360>
0x19db00091119  18b9  458b642423     movl r12,[r12+0x23]
0x19db0009111e  18be  4d03e5         REX.W addq r12,r13
0x19db00091121  18c1  40f6c701       testb rdi,0x1
0x19db00091125  18c5  0f849c2a0000   jz 0x19db00093bc7  <+0x4367>
0x19db0009112b  18cb  448b7fff       movl r15,[rdi-0x1]
0x19db0009112f  18cf  4d03fd         REX.W addq r15,r13
0x19db00091132  18d2  6641817f072c04 cmpw [r15+0x7],0x42c
0x19db00091139  18d9  0f858f2a0000   jnz 0x19db00093bce  <+0x436e>
0x19db0009113f  18df  448b7f13       movl r15,[rdi+0x13]
0x19db00091143  18e3  4d03fd         REX.W addq r15,r13
0x19db00091146  18e6  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db00091150  18f0  493bdf         REX.W cmpq rbx,r15
0x19db00091153  18f3  0f857c2a0000   jnz 0x19db00093bd5  <+0x4375>
0x19db00091159  18f9  4154           push r12
0x19db0009115b  18fb  50             push rax
0x19db0009115c  18fc  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db00091163  1903  4151           push r9
0x19db00091165  1905  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009116f  190f  b802000000     movl rax,0x2
0x19db00091174  1914  4d8bcb         REX.W movq r9,r11
0x19db00091177  1917  41bb559f3008   movl r11,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009117d  191d  4c8b1562efffff REX.W movq r10,[rip+0xffffef62]
0x19db00091184  1924  41ffd2         call r10
0x19db00091187  1927  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db0009118b  192b  458b480f       movl r9,[r8+0xf]
0x19db0009118f  192f  4d03cd         REX.W addq r9,r13
0x19db00091192  1932  41f6c101       testb r9,0x1
0x19db00091196  1936  0f84472a0000   jz 0x19db00093be3  <+0x4383>
0x19db0009119c  193c  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db000911a2  1942  453959ff       cmpl [r9-0x1],r11
0x19db000911a6  1946  0f853e2a0000   jnz 0x19db00093bea  <+0x438a>
0x19db000911ac  194c  458b6103       movl r12,[r9+0x3]
0x19db000911b0  1950  4d03e5         REX.W addq r12,r13
0x19db000911b3  1953  458b64240f     movl r12,[r12+0xf]
0x19db000911b8  1958  4d03e5         REX.W addq r12,r13
0x19db000911bb  195b  41f6c401       testb r12,0x1
0x19db000911bf  195f  0f842c2a0000   jz 0x19db00093bf1  <+0x4391>
0x19db000911c5  1965  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db000911cb  196b  45397424ff     cmpl [r12-0x1],r14
0x19db000911d0  1970  0f85222a0000   jnz 0x19db00093bf8  <+0x4398>
0x19db000911d6  1976  418b442407     movl rax,[r12+0x7]
0x19db000911db  197b  4903c5         REX.W addq rax,r13
0x19db000911de  197e  448b78ff       movl r15,[rax-0x1]
0x19db000911e2  1982  4c8b15ade8ffff REX.W movq r10,[rip+0xffffe8ad]
0x19db000911e9  1989  4d3bd7         REX.W cmpq r10,r15
0x19db000911ec  198c  7712           ja 0x19db00091200  <+0x19a0>
0x19db000911ee  198e  488b15b0e8ffff REX.W movq rdx,[rip+0xffffe8b0]
0x19db000911f5  1995  4c8b157ce6ffff REX.W movq r10,[rip+0xffffe67c]
0x19db000911fc  199c  41ffd2         call r10
0x19db000911ff  199f  cc             int3l
0x19db00091200  19a0  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db00091207  19a7  0f85f2290000   jnz 0x19db00093bff  <+0x439f>
0x19db0009120d  19ad  458b64240b     movl r12,[r12+0xb]
0x19db00091212  19b2  41d1fc         sarl r12, 1
0x19db00091215  19b5  4183fc06       cmpl r12,0x6
0x19db00091219  19b9  0f86e7290000   jna 0x19db00093c06  <+0x43a6>
0x19db0009121f  19bf  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db00091226  19c6  4489481f       movl [rax+0x1f],r9
0x19db0009122a  19ca  458b480f       movl r9,[r8+0xf]
0x19db0009122e  19ce  4d03cd         REX.W addq r9,r13
0x19db00091231  19d1  41f6c101       testb r9,0x1
0x19db00091235  19d5  0f84d2290000   jz 0x19db00093c0d  <+0x43ad>
0x19db0009123b  19db  453959ff       cmpl [r9-0x1],r11
0x19db0009123f  19df  0f85cf290000   jnz 0x19db00093c14  <+0x43b4>
0x19db00091245  19e5  458b6103       movl r12,[r9+0x3]
0x19db00091249  19e9  4d03e5         REX.W addq r12,r13
0x19db0009124c  19ec  458b64240f     movl r12,[r12+0xf]
0x19db00091251  19f1  4d03e5         REX.W addq r12,r13
0x19db00091254  19f4  41f6c401       testb r12,0x1
0x19db00091258  19f8  0f84bd290000   jz 0x19db00093c1b  <+0x43bb>
0x19db0009125e  19fe  45397424ff     cmpl [r12-0x1],r14
0x19db00091263  1a03  0f85b9290000   jnz 0x19db00093c22  <+0x43c2>
0x19db00091269  1a09  418b442407     movl rax,[r12+0x7]
0x19db0009126e  1a0e  4903c5         REX.W addq rax,r13
0x19db00091271  1a11  458b64240b     movl r12,[r12+0xb]
0x19db00091276  1a16  41d1fc         sarl r12, 1
0x19db00091279  1a19  4183fc07       cmpl r12,0x7
0x19db0009127d  1a1d  0f86a6290000   jna 0x19db00093c29  <+0x43c9>
0x19db00091283  1a23  448b6023       movl r12,[rax+0x23]
0x19db00091287  1a27  4d03e5         REX.W addq r12,r13
0x19db0009128a  1a2a  41f6c401       testb r12,0x1
0x19db0009128e  1a2e  0f84fe1d0000   jz 0x19db00093092  <+0x3832>
0x19db00091294  1a34  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db0009129b  1a3b  0f843e000000   jz 0x19db000912df  <+0x1a7f>
0x19db000912a1  1a41  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db000912a8  1a48  0f8431000000   jz 0x19db000912df  <+0x1a7f>
0x19db000912ae  1a4e  418b4424ff     movl rax,[r12-0x1]
0x19db000912b3  1a53  4903c5         REX.W addq rax,r13
0x19db000912b6  1a56  f6400910       testb [rax+0x9],0x10
0x19db000912ba  1a5a  0f851f000000   jnz 0x19db000912df  <+0x1a7f>
0x19db000912c0  1a60  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db000912c7  1a67  0f84ab1d0000   jz 0x19db00093078  <+0x3818>
0x19db000912cd  1a6d  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db000912d4  1a74  0f848a1d0000   jz 0x19db00093064  <+0x3804>
0x19db000912da  1a7a  e9b3050000     jmp 0x19db00091892  <+0x2032>
0x19db000912df  1a7f  458b602b       movl r12,[r8+0x2b]
0x19db000912e3  1a83  4d03e5         REX.W addq r12,r13
0x19db000912e6  1a86  458b7907       movl r15,[r9+0x7]
0x19db000912ea  1a8a  4d03fd         REX.W addq r15,r13
0x19db000912ed  1a8d  418b410b       movl rax,[r9+0xb]
0x19db000912f1  1a91  d1f8           sarl rax, 1
0x19db000912f3  1a93  83f807         cmpl rax,0x7
0x19db000912f6  1a96  0f8634290000   jna 0x19db00093c30  <+0x43d0>
0x19db000912fc  1a9c  418b5723       movl rdx,[r15+0x23]
0x19db00091300  1aa0  4903d5         REX.W addq rdx,r13
0x19db00091303  1aa3  83f804         cmpl rax,0x4
0x19db00091306  1aa6  0f862b290000   jna 0x19db00093c37  <+0x43d7>
0x19db0009130c  1aac  458b7f17       movl r15,[r15+0x17]
0x19db00091310  1ab0  4d03fd         REX.W addq r15,r13
0x19db00091313  1ab3  41f6c401       testb r12,0x1
0x19db00091317  1ab7  0f8421290000   jz 0x19db00093c3e  <+0x43de>
0x19db0009131d  1abd  418b4424ff     movl rax,[r12-0x1]
0x19db00091322  1ac2  4903c5         REX.W addq rax,r13
0x19db00091325  1ac5  668178072c04   cmpw [rax+0x7],0x42c
0x19db0009132b  1acb  0f8514290000   jnz 0x19db00093c45  <+0x43e5>
0x19db00091331  1ad1  418b442413     movl rax,[r12+0x13]
0x19db00091336  1ad6  4903c5         REX.W addq rax,r13
0x19db00091339  1ad9  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db00091343  1ae3  483bd8         REX.W cmpq rbx,rax
0x19db00091346  1ae6  0f8500290000   jnz 0x19db00093c4c  <+0x43ec>
0x19db0009134c  1aec  458b4c240f     movl r9,[r12+0xf]
0x19db00091351  1af1  4d03cd         REX.W addq r9,r13
0x19db00091354  1af4  4c8965b0       REX.W movq [rbp-0x50],r12
0x19db00091358  1af8  488955a8       REX.W movq [rbp-0x58],rdx
0x19db0009135c  1afc  4c897da0       REX.W movq [rbp-0x60],r15
0x19db00091360  1b00  4c894d98       REX.W movq [rbp-0x68],r9
0x19db00091364  1b04  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0009136e  1b0e  48bb0d6a2f08db190000 REX.W movq rbx,0x19db082f6a0d    ;; object: 0x19db082f6a0d <FeedbackVector[45]>
0x19db00091378  1b18  33c0           xorl rax,rax
0x19db0009137a  1b1a  498bf1         REX.W movq rsi,r9
0x19db0009137d  1b1d  488bfa         REX.W movq rdi,rdx
0x19db00091380  1b20  4c8b159ef7ffff REX.W movq r10,[rip+0xfffff79e]
0x19db00091387  1b27  41ffd2         call r10
0x19db0009138a  1b2a  a801           test al,0x1
0x19db0009138c  1b2c  0f84c8280000   jz 0x19db00093c5a  <+0x43fa>
0x19db00091392  1b32  41b8559f3008   movl r8,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00091398  1b38  443940ff       cmpl [rax-0x1],r8
0x19db0009139c  1b3c  0f85bf280000   jnz 0x19db00093c61  <+0x4401>
0x19db000913a2  1b42  448b4807       movl r9,[rax+0x7]
0x19db000913a6  1b46  4d03cd         REX.W addq r9,r13
0x19db000913a9  1b49  448b600b       movl r12,[rax+0xb]
0x19db000913ad  1b4d  41d1fc         sarl r12, 1
0x19db000913b0  1b50  4183fc00       cmpl r12,0x0
0x19db000913b4  1b54  0f86ae280000   jna 0x19db00093c68  <+0x4408>
0x19db000913ba  1b5a  c4c17b104107   vmovsd xmm0,[r9+0x7]
0x19db000913c0  1b60  c5fb118548ffffff vmovsd [rbp-0xb8],xmm0
0x19db000913c8  1b68  b808000000     movl rax,0x8
0x19db000913cd  1b6d  488b55a0       REX.W movq rdx,[rbp-0x60]
0x19db000913d1  1b71  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db000913db  1b7b  48bb0d6a2f08db190000 REX.W movq rbx,0x19db082f6a0d    ;; object: 0x19db082f6a0d <FeedbackVector[45]>
0x19db000913e5  1b85  488b7598       REX.W movq rsi,[rbp-0x68]
0x19db000913e9  1b89  4c8bc8         REX.W movq r9,rax
0x19db000913ec  1b8c  4c8b1532f7ffff REX.W movq r10,[rip+0xfffff732]
0x19db000913f3  1b93  41ffd2         call r10
0x19db000913f6  1b96  a801           test al,0x1
0x19db000913f8  1b98  0f8478280000   jz 0x19db00093c76  <+0x4416>
0x19db000913fe  1b9e  41b8559f3008   movl r8,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00091404  1ba4  443940ff       cmpl [rax-0x1],r8
0x19db00091408  1ba8  0f856f280000   jnz 0x19db00093c7d  <+0x441d>
0x19db0009140e  1bae  448b4807       movl r9,[rax+0x7]
0x19db00091412  1bb2  4d03cd         REX.W addq r9,r13
0x19db00091415  1bb5  448b600b       movl r12,[rax+0xb]
0x19db00091419  1bb9  41d1fc         sarl r12, 1
0x19db0009141c  1bbc  4183fc00       cmpl r12,0x0
0x19db00091420  1bc0  0f865e280000   jna 0x19db00093c84  <+0x4424>
0x19db00091426  1bc6  c4c17b104107   vmovsd xmm0,[r9+0x7]
0x19db0009142c  1bcc  c5fb118540ffffff vmovsd [rbp-0xc0],xmm0
0x19db00091434  1bd4  488b55a8       REX.W movq rdx,[rbp-0x58]
0x19db00091438  1bd8  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db00091442  1be2  33c0           xorl rax,rax
0x19db00091444  1be4  48bb0d6a2f08db190000 REX.W movq rbx,0x19db082f6a0d    ;; object: 0x19db082f6a0d <FeedbackVector[45]>
0x19db0009144e  1bee  488b7598       REX.W movq rsi,[rbp-0x68]
0x19db00091452  1bf2  4c8b15ccf6ffff REX.W movq r10,[rip+0xfffff6cc]
0x19db00091459  1bf9  41ffd2         call r10
0x19db0009145c  1bfc  a801           test al,0x1
0x19db0009145e  1bfe  0f842e280000   jz 0x19db00093c92  <+0x4432>
0x19db00091464  1c04  41b8559f3008   movl r8,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009146a  1c0a  443940ff       cmpl [rax-0x1],r8
0x19db0009146e  1c0e  0f8525280000   jnz 0x19db00093c99  <+0x4439>
0x19db00091474  1c14  448b4807       movl r9,[rax+0x7]
0x19db00091478  1c18  4d03cd         REX.W addq r9,r13
0x19db0009147b  1c1b  448b600b       movl r12,[rax+0xb]
0x19db0009147f  1c1f  41d1fc         sarl r12, 1
0x19db00091482  1c22  4183fc01       cmpl r12,0x1
0x19db00091486  1c26  0f8614280000   jna 0x19db00093ca0  <+0x4440>
0x19db0009148c  1c2c  c4c17b10410f   vmovsd xmm0,[r9+0xf]
0x19db00091492  1c32  c5fb118538ffffff vmovsd [rbp-0xc8],xmm0
0x19db0009149a  1c3a  488b55a0       REX.W movq rdx,[rbp-0x60]
0x19db0009149e  1c3e  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db000914a8  1c48  b808000000     movl rax,0x8
0x19db000914ad  1c4d  48bb0d6a2f08db190000 REX.W movq rbx,0x19db082f6a0d    ;; object: 0x19db082f6a0d <FeedbackVector[45]>
0x19db000914b7  1c57  488b7598       REX.W movq rsi,[rbp-0x68]
0x19db000914bb  1c5b  4c8b1563f6ffff REX.W movq r10,[rip+0xfffff663]
0x19db000914c2  1c62  41ffd2         call r10
0x19db000914c5  1c65  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db000914cd  1c6d  c5f92e8548ffffff vucomisd xmm0,[rbp-0xb8]
0x19db000914d5  1c75  0f830b000000   jnc 0x19db000914e6  <+0x1c86>
0x19db000914db  1c7b  41b8ffffffff   movl r8,0xffffffff
0x19db000914e1  1c81  e906000000     jmp 0x19db000914ec  <+0x1c8c>
0x19db000914e6  1c86  41b801000000   movl r8,0x1
0x19db000914ec  1c8c  a801           test al,0x1
0x19db000914ee  1c8e  0f84ba270000   jz 0x19db00093cae  <+0x444e>
0x19db000914f4  1c94  41b9559f3008   movl r9,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000914fa  1c9a  443948ff       cmpl [rax-0x1],r9
0x19db000914fe  1c9e  0f85b1270000   jnz 0x19db00093cb5  <+0x4455>
0x19db00091504  1ca4  448b6007       movl r12,[rax+0x7]
0x19db00091508  1ca8  4d03e5         REX.W addq r12,r13
0x19db0009150b  1cab  448b700b       movl r14,[rax+0xb]
0x19db0009150f  1caf  41d1fe         sarl r14, 1
0x19db00091512  1cb2  4183fe01       cmpl r14,0x1
0x19db00091516  1cb6  0f86a0270000   jna 0x19db00093cbc  <+0x445c>
0x19db0009151c  1cbc  c4c17b104c240f vmovsd xmm1,[r12+0xf]
0x19db00091523  1cc3  c5f92e8d38ffffff vucomisd xmm1,[rbp-0xc8]
0x19db0009152b  1ccb  0f830b000000   jnc 0x19db0009153c  <+0x1cdc>
0x19db00091531  1cd1  41bbffffffff   movl r11,0xffffffff
0x19db00091537  1cd7  e906000000     jmp 0x19db00091542  <+0x1ce2>
0x19db0009153c  1cdc  41bb01000000   movl r11,0x1
0x19db00091542  1ce2  c5f35c8d38ffffff vsubsd xmm1,xmm1,[rbp-0xc8]
0x19db0009154a  1cea  c5e176db       vpcmpeqd xmm3,xmm3,xmm3
0x19db0009154e  1cee  c5e173d301     vpsrlq xmm3,xmm3,1
0x19db00091553  1cf3  c5e154d1       vandpd xmm2,xmm3,xmm1
0x19db00091557  1cf7  c5fb5c8d48ffffff vsubsd xmm1,xmm0,[rbp-0xb8]
0x19db0009155f  1cff  c5d976e4       vpcmpeqd xmm4,xmm4,xmm4
0x19db00091563  1d03  c5d973d401     vpsrlq xmm4,xmm4,1
0x19db00091568  1d08  c5d954d9       vandpd xmm3,xmm4,xmm1
0x19db0009156c  1d0c  c5f92eda       vucomisd xmm3,xmm2
0x19db00091570  1d10  0f832d000000   jnc 0x19db000915a3  <+0x1d43>
0x19db00091576  1d16  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0009157a  1d1a  c5f173f137     vpsllq xmm1,xmm1,55
0x19db0009157f  1d1f  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db00091584  1d24  c5eb59e1       vmulsd xmm4,xmm2,xmm1
0x19db00091588  1d28  4d8bf3         REX.W movq r14,r11
0x19db0009158b  1d2b  4533db         xorl r11,r11
0x19db0009158e  1d2e  c57928fb       vmovapd xmm15,xmm3
0x19db00091592  1d32  c5f928da       vmovapd xmm3,xmm2
0x19db00091596  1d36  c4c17928d7     vmovapd xmm2,xmm15
0x19db0009159b  1d3b  4d8be3         REX.W movq r12,r11
0x19db0009159e  1d3e  e91b000000     jmp 0x19db000915be  <+0x1d5e>
0x19db000915a3  1d43  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db000915a7  1d47  c5f173f137     vpsllq xmm1,xmm1,55
0x19db000915ac  1d4c  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db000915b1  1d51  c5e359e1       vmulsd xmm4,xmm3,xmm1
0x19db000915b5  1d55  4d8be0         REX.W movq r12,r8
0x19db000915b8  1d58  4533c0         xorl r8,r8
0x19db000915bb  1d5b  4d8bf0         REX.W movq r14,r8
0x19db000915be  1d5e  49bf09652e08db190000 REX.W movq r15,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db000915c8  1d68  ba39692e08     movl rdx,0x82e6939      ;; (compressed) object: 0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)>
0x19db000915cd  1d6d  4139570b       cmpl [r15+0xb],rdx
0x19db000915d1  1d71  0f85ec260000   jnz 0x19db00093cc3  <+0x4463>
0x19db000915d7  1d77  458b7f03       movl r15,[r15+0x3]
0x19db000915db  1d7b  4d03fd         REX.W addq r15,r13
0x19db000915de  1d7e  458b7f63       movl r15,[r15+0x63]
0x19db000915e2  1d82  4c8b15ade4ffff REX.W movq r10,[rip+0xffffe4ad]
0x19db000915e9  1d89  4d3bd7         REX.W cmpq r10,r15
0x19db000915ec  1d8c  7712           ja 0x19db00091600  <+0x1da0>
0x19db000915ee  1d8e  488b15b0e4ffff REX.W movq rdx,[rip+0xffffe4b0]
0x19db000915f5  1d95  4c8b157ce2ffff REX.W movq r10,[rip+0xffffe27c]
0x19db000915fc  1d9c  41ffd2         call r10
0x19db000915ff  1d9f  cc             int3l
0x19db00091600  1da0  488b5d98       REX.W movq rbx,[rbp-0x68]
0x19db00091604  1da4  8b530f         movl rdx,[rbx+0xf]
0x19db00091607  1da7  4903d5         REX.W addq rdx,r13
0x19db0009160a  1daa  f6c201         testb rdx,0x1
0x19db0009160d  1dad  0f84b7260000   jz 0x19db00093cca  <+0x446a>
0x19db00091613  1db3  b96ddc3008     movl rcx,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00091618  1db8  394aff         cmpl [rdx-0x1],rcx
0x19db0009161b  1dbb  0f85b0260000   jnz 0x19db00093cd1  <+0x4471>
0x19db00091621  1dc1  8b5203         movl rdx,[rdx+0x3]
0x19db00091624  1dc4  4903d5         REX.W addq rdx,r13
0x19db00091627  1dc7  8b7217         movl rsi,[rdx+0x17]
0x19db0009162a  1dca  4903f5         REX.W addq rsi,r13
0x19db0009162d  1dcd  40f6c601       testb rsi,0x1
0x19db00091631  1dd1  400f94c7       setzl dil
0x19db00091635  1dd5  400fb6ff       movzxbl rdi,rdi
0x19db00091639  1dd9  4c8bce         REX.W movq r9,rsi
0x19db0009163c  1ddc  41d1f9         sarl r9, 1
0x19db0009163f  1ddf  83ff00         cmpl rdi,0x0
0x19db00091642  1de2  0f852d000000   jnz 0x19db00091675  <+0x1e15>
0x19db00091648  1de8  8b4eff         movl rcx,[rsi-0x1]
0x19db0009164b  1deb  4903cd         REX.W addq rcx,r13
0x19db0009164e  1dee  41398d30010000 cmpl [r13+0x130] (root (heap_number_map)),rcx
0x19db00091655  1df5  0f840b000000   jz 0x19db00091666  <+0x1e06>
0x19db0009165b  1dfb  6683790743     cmpw [rcx+0x7],0x43
0x19db00091660  1e00  0f8572260000   jnz 0x19db00093cd8  <+0x4478>
0x19db00091666  1e06  c5fb106e03     vmovsd xmm5,[rsi+0x3]
0x19db0009166b  1e0b  b96ddc3008     movl rcx,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00091670  1e10  e905000000     jmp 0x19db0009167a  <+0x1e1a>
0x19db00091675  1e15  c4c1032ae9     vcvtlsi2sd xmm5,xmm15,r9
0x19db0009167a  1e1a  c5d358eb       vaddsd xmm5,xmm5,xmm3
0x19db0009167e  1e1e  c4e3490bf50a   vroundsd xmm6,xmm6,xmm5,0xa
0x19db00091684  1e24  c5cb5cc9       vsubsd xmm1,xmm6,xmm1
0x19db00091688  1e28  c5f92ee9       vucomisd xmm5,xmm1
0x19db0009168c  1e2c  0f8312000000   jnc 0x19db000916a4  <+0x1e44>
0x19db00091692  1e32  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db00091696  1e36  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0009169b  1e3b  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db000916a0  1e40  c5cb5cf1       vsubsd xmm6,xmm6,xmm1
0x19db000916a4  1e44  c5fb2cf6       vcvttsd2si rsi,xmm6
0x19db000916a8  1e48  b959682e08     movl rcx,0x82e6859      ;; (compressed) object: 0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)>
0x19db000916ad  1e4d  413bcf         cmpl rcx,r15
0x19db000916b0  1e50  0f8529260000   jnz 0x19db00093cdf  <+0x447f>
0x19db000916b6  1e56  c5832ace       vcvtlsi2sd xmm1,xmm15,rsi
0x19db000916ba  1e5a  83ff00         cmpl rdi,0x0
0x19db000916bd  1e5d  0f8423260000   jz 0x19db00093ce6  <+0x4486>
0x19db000916c3  1e63  c5f92ece       vucomisd xmm1,xmm6
0x19db000916c7  1e67  0f8a20260000   jpe 0x19db00093ced  <+0x448d>
0x19db000916cd  1e6d  0f851a260000   jnz 0x19db00093ced  <+0x448d>
0x19db000916d3  1e73  443bce         cmpl r9,rsi
0x19db000916d6  1e76  0f8de6000000   jge 0x19db000917c2  <+0x1f62>
0x19db000916dc  1e7c  c5db58ca       vaddsd xmm1,xmm4,xmm2
0x19db000916e0  1e80  c5f92ecb       vucomisd xmm1,xmm3
0x19db000916e4  1e84  0f8315000000   jnc 0x19db000916ff  <+0x1e9f>
0x19db000916ea  1e8a  c5fb10a538ffffff vmovsd xmm4,[rbp-0xc8]
0x19db000916f2  1e92  c5fb10ad48ffffff vmovsd xmm5,[rbp-0xb8]
0x19db000916fa  1e9a  e91e000000     jmp 0x19db0009171d  <+0x1ebd>
0x19db000916ff  1e9f  c4c1032ae3     vcvtlsi2sd xmm4,xmm15,r11
0x19db00091704  1ea4  c4c1032ae8     vcvtlsi2sd xmm5,xmm15,r8
0x19db00091709  1ea9  c5db58a538ffffff vaddsd xmm4,xmm4,[rbp-0xc8]
0x19db00091711  1eb1  c5d358ad48ffffff vaddsd xmm5,xmm5,[rbp-0xb8]
0x19db00091719  1eb9  c5f35ccb       vsubsd xmm1,xmm1,xmm3
0x19db0009171d  1ebd  c4c1032afe     vcvtlsi2sd xmm7,xmm15,r14
0x19db00091722  1ec2  c441032ac4     vcvtlsi2sd xmm8,xmm15,r12
0x19db00091727  1ec7  4183c101       addl r9,0x1
0x19db0009172b  1ecb  0f80c3250000   jo 0x19db00093cf4  <+0x4494>
0x19db00091731  1ed1  c5db58c7       vaddsd xmm0,xmm4,xmm7
0x19db00091735  1ed5  c4c15358e0     vaddsd xmm4,xmm5,xmm8
0x19db0009173a  1eda  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009173e  1ede  0f8713000000   ja 0x19db00091757  <+0x1ef7>
0x19db00091744  1ee4  e958190000     jmp 0x19db000930a1  <+0x3841>
0x19db00091749  1ee9  0f1f8000000000 nop
0x19db00091750  1ef0  4d8bcf         REX.W movq r9,r15
0x19db00091753  1ef3  c5f928cd       vmovapd xmm1,xmm5
0x19db00091757  1ef7  443bce         cmpl r9,rsi
0x19db0009175a  1efa  0f8d62000000   jge 0x19db000917c2  <+0x1f62>
0x19db00091760  1f00  c5f358ea       vaddsd xmm5,xmm1,xmm2
0x19db00091764  1f04  c5f92eeb       vucomisd xmm5,xmm3
0x19db00091768  1f08  0f830d000000   jnc 0x19db0009177b  <+0x1f1b>
0x19db0009176e  1f0e  c57928d0       vmovapd xmm10,xmm0
0x19db00091772  1f12  c57928cc       vmovapd xmm9,xmm4
0x19db00091776  1f16  e925000000     jmp 0x19db000917a0  <+0x1f40>
0x19db0009177b  1f1b  c441032acb     vcvtlsi2sd xmm9,xmm15,r11
0x19db00091780  1f20  c53358c8       vaddsd xmm9,xmm9,xmm0
0x19db00091784  1f24  c441032ad0     vcvtlsi2sd xmm10,xmm15,r8
0x19db00091789  1f29  c52b58d4       vaddsd xmm10,xmm10,xmm4
0x19db0009178d  1f2d  c5d35ceb       vsubsd xmm5,xmm5,xmm3
0x19db00091791  1f31  c4417928fa     vmovapd xmm15,xmm10
0x19db00091796  1f36  c4417928d1     vmovapd xmm10,xmm9
0x19db0009179b  1f3b  c4417928cf     vmovapd xmm9,xmm15
0x19db000917a0  1f40  4d8bf9         REX.W movq r15,r9
0x19db000917a3  1f43  4183c701       addl r15,0x1
0x19db000917a7  1f47  0f804e250000   jo 0x19db00093cfb  <+0x449b>
0x19db000917ad  1f4d  c4c14358c2     vaddsd xmm0,xmm7,xmm10
0x19db000917b2  1f52  c4c13b58e1     vaddsd xmm4,xmm8,xmm9
0x19db000917b7  1f57  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db000917bb  1f5b  7793           ja 0x19db00091750  <+0x1ef0>
0x19db000917bd  1f5d  e9c9190000     jmp 0x19db0009318b  <+0x392b>
0x19db000917c2  1f62  83fe00         cmpl rsi,0x0
0x19db000917c5  1f65  0f84aa1a0000   jz 0x19db00093275  <+0x3a15>
0x19db000917cb  1f6b  4c8bc6         REX.W movq r8,rsi
0x19db000917ce  1f6e  4103f0         addl rsi,r8
0x19db000917d1  1f71  0f80bc1a0000   jo 0x19db00093293  <+0x3a33>
0x19db000917d7  1f77  897217         movl [rdx+0x17],rsi
0x19db000917da  1f7a  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db000917e1  1f81  4c23c2         REX.W andq r8,rdx
0x19db000917e4  1f84  41f6400804     testb [r8+0x8],0x4
0x19db000917e9  1f89  0f85da1d0000   jnz 0x19db000935c9  <+0x3d69>
0x19db000917ef  1f8f  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db000917f3  1f93  458b480f       movl r9,[r8+0xf]
0x19db000917f7  1f97  4d03cd         REX.W addq r9,r13
0x19db000917fa  1f9a  41f6c101       testb r9,0x1
0x19db000917fe  1f9e  0f84fe240000   jz 0x19db00093d02  <+0x44a2>
0x19db00091804  1fa4  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009180a  1faa  453959ff       cmpl [r9-0x1],r11
0x19db0009180e  1fae  0f85f5240000   jnz 0x19db00093d09  <+0x44a9>
0x19db00091814  1fb4  458b6103       movl r12,[r9+0x3]
0x19db00091818  1fb8  4d03e5         REX.W addq r12,r13
0x19db0009181b  1fbb  458b64240f     movl r12,[r12+0xf]
0x19db00091820  1fc0  4d03e5         REX.W addq r12,r13
0x19db00091823  1fc3  41f6c401       testb r12,0x1
0x19db00091827  1fc7  0f84e3240000   jz 0x19db00093d10  <+0x44b0>
0x19db0009182d  1fcd  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00091833  1fd3  45397424ff     cmpl [r12-0x1],r14
0x19db00091838  1fd8  0f85d9240000   jnz 0x19db00093d17  <+0x44b7>
0x19db0009183e  1fde  418b442407     movl rax,[r12+0x7]
0x19db00091843  1fe3  4903c5         REX.W addq rax,r13
0x19db00091846  1fe6  448b78ff       movl r15,[rax-0x1]
0x19db0009184a  1fea  4c8b1545e2ffff REX.W movq r10,[rip+0xffffe245]
0x19db00091851  1ff1  4d3bd7         REX.W cmpq r10,r15
0x19db00091854  1ff4  7712           ja 0x19db00091868  <+0x2008>
0x19db00091856  1ff6  488b1548e2ffff REX.W movq rdx,[rip+0xffffe248]
0x19db0009185d  1ffd  4c8b1514e0ffff REX.W movq r10,[rip+0xffffe014]
0x19db00091864  2004  41ffd2         call r10
0x19db00091867  2007  cc             int3l
0x19db00091868  2008  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db0009186f  200f  0f85a9240000   jnz 0x19db00093d1e  <+0x44be>
0x19db00091875  2015  458b64240b     movl r12,[r12+0xb]
0x19db0009187a  201a  41d1fc         sarl r12, 1
0x19db0009187d  201d  4183fc07       cmpl r12,0x7
0x19db00091881  2021  0f869e240000   jna 0x19db00093d25  <+0x44c5>
0x19db00091887  2027  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db0009188e  202e  44894823       movl [rax+0x23],r9
0x19db00091892  2032  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db00091896  2036  41bccd9f3008   movl r12,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db0009189c  203c  453961ff       cmpl [r9-0x1],r12
0x19db000918a0  2040  0f8586240000   jnz 0x19db00093d2c  <+0x44cc>
0x19db000918a6  2046  458b7907       movl r15,[r9+0x7]
0x19db000918aa  204a  4d03fd         REX.W addq r15,r13
0x19db000918ad  204d  418b410b       movl rax,[r9+0xb]
0x19db000918b1  2051  d1f8           sarl rax, 1
0x19db000918b3  2053  83f803         cmpl rax,0x3
0x19db000918b6  2056  0f8677240000   jna 0x19db00093d33  <+0x44d3>
0x19db000918bc  205c  458b7f13       movl r15,[r15+0x13]
0x19db000918c0  2060  4d03fd         REX.W addq r15,r13
0x19db000918c3  2063  4539bd98000000 cmpl [r13+0x98] (root (the_hole_value)),r15
0x19db000918ca  206a  0f84341a0000   jz 0x19db00093304  <+0x3aa4>
0x19db000918d0  2070  41f6c701       testb r15,0x1
0x19db000918d4  2074  0f8460240000   jz 0x19db00093d3a  <+0x44da>
0x19db000918da  207a  bb559f3008     movl rbx,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000918df  207f  41395fff       cmpl [r15-0x1],rbx
0x19db000918e3  2083  0f8558240000   jnz 0x19db00093d41  <+0x44e1>
0x19db000918e9  2089  418b4707       movl rax,[r15+0x7]
0x19db000918ed  208d  4903c5         REX.W addq rax,r13
0x19db000918f0  2090  458b7f0b       movl r15,[r15+0xb]
0x19db000918f4  2094  41d1ff         sarl r15, 1
0x19db000918f7  2097  4183ff02       cmpl r15,0x2
0x19db000918fb  209b  0f8647240000   jna 0x19db00093d48  <+0x44e8>
0x19db00091901  20a1  c5fb104017     vmovsd xmm0,[rax+0x17]
0x19db00091906  20a6  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0009190a  20aa  c5f92ec8       vucomisd xmm1,xmm0
0x19db0009190e  20ae  0f863c060000   jna 0x19db00091f50  <+0x26f0>
0x19db00091914  20b4  458b780f       movl r15,[r8+0xf]
0x19db00091918  20b8  4d03fd         REX.W addq r15,r13
0x19db0009191b  20bb  41f6c701       testb r15,0x1
0x19db0009191f  20bf  0f842a240000   jz 0x19db00093d4f  <+0x44ef>
0x19db00091925  20c5  45395fff       cmpl [r15-0x1],r11
0x19db00091929  20c9  0f8527240000   jnz 0x19db00093d56  <+0x44f6>
0x19db0009192f  20cf  418b4703       movl rax,[r15+0x3]
0x19db00091933  20d3  4903c5         REX.W addq rax,r13
0x19db00091936  20d6  8b400f         movl rax,[rax+0xf]
0x19db00091939  20d9  4903c5         REX.W addq rax,r13
0x19db0009193c  20dc  a801           test al,0x1
0x19db0009193e  20de  0f8419240000   jz 0x19db00093d5d  <+0x44fd>
0x19db00091944  20e4  443970ff       cmpl [rax-0x1],r14
0x19db00091948  20e8  0f8516240000   jnz 0x19db00093d64  <+0x4504>
0x19db0009194e  20ee  8b5007         movl rdx,[rax+0x7]
0x19db00091951  20f1  4903d5         REX.W addq rdx,r13
0x19db00091954  20f4  8b400b         movl rax,[rax+0xb]
0x19db00091957  20f7  d1f8           sarl rax, 1
0x19db00091959  20f9  83f804         cmpl rax,0x4
0x19db0009195c  20fc  0f8609240000   jna 0x19db00093d6b  <+0x450b>
0x19db00091962  2102  8b4a17         movl rcx,[rdx+0x17]
0x19db00091965  2105  4903cd         REX.W addq rcx,r13
0x19db00091968  2108  f6c101         testb rcx,0x1
0x19db0009196b  210b  0f84c5190000   jz 0x19db00093336  <+0x3ad6>
0x19db00091971  2111  41398db0000000 cmpl [r13+0xb0] (root (false_value)),rcx
0x19db00091978  2118  0f843c000000   jz 0x19db000919ba  <+0x215a>
0x19db0009197e  211e  41398db8000000 cmpl [r13+0xb8] (root (empty_string)),rcx
0x19db00091985  2125  0f842f000000   jz 0x19db000919ba  <+0x215a>
0x19db0009198b  212b  8b71ff         movl rsi,[rcx-0x1]
0x19db0009198e  212e  4903f5         REX.W addq rsi,r13
0x19db00091991  2131  f6460910       testb [rsi+0x9],0x10
0x19db00091995  2135  0f851f000000   jnz 0x19db000919ba  <+0x215a>
0x19db0009199b  213b  4139b530010000 cmpl [r13+0x130] (root (heap_number_map)),rsi
0x19db000919a2  2142  0f847a190000   jz 0x19db00093322  <+0x3ac2>
0x19db000919a8  2148  4139b5b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rsi
0x19db000919af  214f  0f845b190000   jz 0x19db00093310  <+0x3ab0>
0x19db000919b5  2155  e927000000     jmp 0x19db000919e1  <+0x2181>
0x19db000919ba  215a  458b602b       movl r12,[r8+0x2b]
0x19db000919be  215e  4c8b15d1e0ffff REX.W movq r10,[rip+0xffffe0d1]
0x19db000919c5  2165  4d39e2         REX.W cmpq r10,r12
0x19db000919c8  2168  7712           ja 0x19db000919dc  <+0x217c>
0x19db000919ca  216a  488b15d4e0ffff REX.W movq rdx,[rip+0xffffe0d4]
0x19db000919d1  2171  4c8b15a0deffff REX.W movq r10,[rip+0xffffdea0]
0x19db000919d8  2178  41ffd2         call r10
0x19db000919db  217b  cc             int3l
0x19db000919dc  217c  e954260000     jmp 0x19db00094035  <+0x47d5>
0x19db000919e1  2181  83f808         cmpl rax,0x8
0x19db000919e4  2184  0f868f230000   jna 0x19db00093d79  <+0x4519>
0x19db000919ea  218a  8b4227         movl rax,[rdx+0x27]
0x19db000919ed  218d  4903c5         REX.W addq rax,r13
0x19db000919f0  2190  a801           test al,0x1
0x19db000919f2  2192  0f8477190000   jz 0x19db0009336f  <+0x3b0f>
0x19db000919f8  2198  413985b0000000 cmpl [r13+0xb0] (root (false_value)),rax
0x19db000919ff  219f  0f843c000000   jz 0x19db00091a41  <+0x21e1>
0x19db00091a05  21a5  413985b8000000 cmpl [r13+0xb8] (root (empty_string)),rax
0x19db00091a0c  21ac  0f842f000000   jz 0x19db00091a41  <+0x21e1>
0x19db00091a12  21b2  8b50ff         movl rdx,[rax-0x1]
0x19db00091a15  21b5  4903d5         REX.W addq rdx,r13
0x19db00091a18  21b8  f6420910       testb [rdx+0x9],0x10
0x19db00091a1c  21bc  0f851f000000   jnz 0x19db00091a41  <+0x21e1>
0x19db00091a22  21c2  41399530010000 cmpl [r13+0x130] (root (heap_number_map)),rdx
0x19db00091a29  21c9  0f842c190000   jz 0x19db0009335b  <+0x3afb>
0x19db00091a2f  21cf  413995b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rdx
0x19db00091a36  21d6  0f840d190000   jz 0x19db00093349  <+0x3ae9>
0x19db00091a3c  21dc  e933010000     jmp 0x19db00091b74  <+0x2314>
0x19db00091a41  21e1  418b782b       movl rdi,[r8+0x2b]
0x19db00091a45  21e5  4903fd         REX.W addq rdi,r13
0x19db00091a48  21e8  418b4707       movl rax,[r15+0x7]
0x19db00091a4c  21ec  4903c5         REX.W addq rax,r13
0x19db00091a4f  21ef  458b7f0b       movl r15,[r15+0xb]
0x19db00091a53  21f3  41d1ff         sarl r15, 1
0x19db00091a56  21f6  4183ff05       cmpl r15,0x5
0x19db00091a5a  21fa  0f8620230000   jna 0x19db00093d80  <+0x4520>
0x19db00091a60  2200  8b501b         movl rdx,[rax+0x1b]
0x19db00091a63  2203  4903d5         REX.W addq rdx,r13
0x19db00091a66  2206  4183ff01       cmpl r15,0x1
0x19db00091a6a  220a  0f8617230000   jna 0x19db00093d87  <+0x4527>
0x19db00091a70  2210  448b780b       movl r15,[rax+0xb]
0x19db00091a74  2214  4d03fd         REX.W addq r15,r13
0x19db00091a77  2217  40f6c701       testb rdi,0x1
0x19db00091a7b  221b  0f840d230000   jz 0x19db00093d8e  <+0x452e>
0x19db00091a81  2221  8b47ff         movl rax,[rdi-0x1]
0x19db00091a84  2224  4903c5         REX.W addq rax,r13
0x19db00091a87  2227  668178072c04   cmpw [rax+0x7],0x42c
0x19db00091a8d  222d  0f8502230000   jnz 0x19db00093d95  <+0x4535>
0x19db00091a93  2233  8b4713         movl rax,[rdi+0x13]
0x19db00091a96  2236  4903c5         REX.W addq rax,r13
0x19db00091a99  2239  48b9a1422f08db190000 REX.W movq rcx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db00091aa3  2243  483bc8         REX.W cmpq rcx,rax
0x19db00091aa6  2246  0f85f0220000   jnz 0x19db00093d9c  <+0x453c>
0x19db00091aac  224c  4157           push r15
0x19db00091aae  224e  52             push rdx
0x19db00091aaf  224f  4d8bbd90000000 REX.W movq r15,[r13+0x90] (root (undefined_value))
0x19db00091ab6  2256  4157           push r15
0x19db00091ab8  2258  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00091ac2  2262  b802000000     movl rax,0x2
0x19db00091ac7  2267  4c8b1518e6ffff REX.W movq r10,[rip+0xffffe618]
0x19db00091ace  226e  41ffd2         call r10
0x19db00091ad1  2271  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db00091ad5  2275  458b480f       movl r9,[r8+0xf]
0x19db00091ad9  2279  4d03cd         REX.W addq r9,r13
0x19db00091adc  227c  41f6c101       testb r9,0x1
0x19db00091ae0  2280  0f84c4220000   jz 0x19db00093daa  <+0x454a>
0x19db00091ae6  2286  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00091aec  228c  453959ff       cmpl [r9-0x1],r11
0x19db00091af0  2290  0f85bb220000   jnz 0x19db00093db1  <+0x4551>
0x19db00091af6  2296  458b6103       movl r12,[r9+0x3]
0x19db00091afa  229a  4d03e5         REX.W addq r12,r13
0x19db00091afd  229d  458b64240f     movl r12,[r12+0xf]
0x19db00091b02  22a2  4d03e5         REX.W addq r12,r13
0x19db00091b05  22a5  41f6c401       testb r12,0x1
0x19db00091b09  22a9  0f84a9220000   jz 0x19db00093db8  <+0x4558>
0x19db00091b0f  22af  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00091b15  22b5  45397424ff     cmpl [r12-0x1],r14
0x19db00091b1a  22ba  0f859f220000   jnz 0x19db00093dbf  <+0x455f>
0x19db00091b20  22c0  418b442407     movl rax,[r12+0x7]
0x19db00091b25  22c5  4903c5         REX.W addq rax,r13
0x19db00091b28  22c8  448b78ff       movl r15,[rax-0x1]
0x19db00091b2c  22cc  4c8b1563dfffff REX.W movq r10,[rip+0xffffdf63]
0x19db00091b33  22d3  4d3bd7         REX.W cmpq r10,r15
0x19db00091b36  22d6  7712           ja 0x19db00091b4a  <+0x22ea>
0x19db00091b38  22d8  488b1566dfffff REX.W movq rdx,[rip+0xffffdf66]
0x19db00091b3f  22df  4c8b1532ddffff REX.W movq r10,[rip+0xffffdd32]
0x19db00091b46  22e6  41ffd2         call r10
0x19db00091b49  22e9  cc             int3l
0x19db00091b4a  22ea  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db00091b51  22f1  0f856f220000   jnz 0x19db00093dc6  <+0x4566>
0x19db00091b57  22f7  458b64240b     movl r12,[r12+0xb]
0x19db00091b5c  22fc  41d1fc         sarl r12, 1
0x19db00091b5f  22ff  4183fc08       cmpl r12,0x8
0x19db00091b63  2303  0f8664220000   jna 0x19db00093dcd  <+0x456d>
0x19db00091b69  2309  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db00091b70  2310  44894827       movl [rax+0x27],r9
0x19db00091b74  2314  458b480f       movl r9,[r8+0xf]
0x19db00091b78  2318  4d03cd         REX.W addq r9,r13
0x19db00091b7b  231b  41f6c101       testb r9,0x1
0x19db00091b7f  231f  0f844f220000   jz 0x19db00093dd4  <+0x4574>
0x19db00091b85  2325  453959ff       cmpl [r9-0x1],r11
0x19db00091b89  2329  0f854c220000   jnz 0x19db00093ddb  <+0x457b>
0x19db00091b8f  232f  458b6103       movl r12,[r9+0x3]
0x19db00091b93  2333  4d03e5         REX.W addq r12,r13
0x19db00091b96  2336  458b64240f     movl r12,[r12+0xf]
0x19db00091b9b  233b  4d03e5         REX.W addq r12,r13
0x19db00091b9e  233e  41f6c401       testb r12,0x1
0x19db00091ba2  2342  0f843a220000   jz 0x19db00093de2  <+0x4582>
0x19db00091ba8  2348  45397424ff     cmpl [r12-0x1],r14
0x19db00091bad  234d  0f8536220000   jnz 0x19db00093de9  <+0x4589>
0x19db00091bb3  2353  418b442407     movl rax,[r12+0x7]
0x19db00091bb8  2358  4903c5         REX.W addq rax,r13
0x19db00091bbb  235b  458b64240b     movl r12,[r12+0xb]
0x19db00091bc0  2360  41d1fc         sarl r12, 1
0x19db00091bc3  2363  4183fc00       cmpl r12,0x0
0x19db00091bc7  2367  0f8623220000   jna 0x19db00093df0  <+0x4590>
0x19db00091bcd  236d  448b6007       movl r12,[rax+0x7]
0x19db00091bd1  2371  4d03e5         REX.W addq r12,r13
0x19db00091bd4  2374  41f6c401       testb r12,0x1
0x19db00091bd8  2378  0f84cd170000   jz 0x19db000933ab  <+0x3b4b>
0x19db00091bde  237e  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db00091be5  2385  0f843e000000   jz 0x19db00091c29  <+0x23c9>
0x19db00091beb  238b  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db00091bf2  2392  0f8431000000   jz 0x19db00091c29  <+0x23c9>
0x19db00091bf8  2398  418b4424ff     movl rax,[r12-0x1]
0x19db00091bfd  239d  4903c5         REX.W addq rax,r13
0x19db00091c00  23a0  f6400910       testb [rax+0x9],0x10
0x19db00091c04  23a4  0f851f000000   jnz 0x19db00091c29  <+0x23c9>
0x19db00091c0a  23aa  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db00091c11  23b1  0f847a170000   jz 0x19db00093391  <+0x3b31>
0x19db00091c17  23b7  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db00091c1e  23be  0f8459170000   jz 0x19db0009337d  <+0x3b1d>
0x19db00091c24  23c4  e939010000     jmp 0x19db00091d62  <+0x2502>
0x19db00091c29  23c9  418b782b       movl rdi,[r8+0x2b]
0x19db00091c2d  23cd  4903fd         REX.W addq rdi,r13
0x19db00091c30  23d0  458b6107       movl r12,[r9+0x7]
0x19db00091c34  23d4  4d03e5         REX.W addq r12,r13
0x19db00091c37  23d7  458b790b       movl r15,[r9+0xb]
0x19db00091c3b  23db  41d1ff         sarl r15, 1
0x19db00091c3e  23de  4183ff01       cmpl r15,0x1
0x19db00091c42  23e2  0f86af210000   jna 0x19db00093df7  <+0x4597>
0x19db00091c48  23e8  418b44240b     movl rax,[r12+0xb]
0x19db00091c4d  23ed  4903c5         REX.W addq rax,r13
0x19db00091c50  23f0  4183ff00       cmpl r15,0x0
0x19db00091c54  23f4  0f86a4210000   jna 0x19db00093dfe  <+0x459e>
0x19db00091c5a  23fa  458b642407     movl r12,[r12+0x7]
0x19db00091c5f  23ff  4d03e5         REX.W addq r12,r13
0x19db00091c62  2402  40f6c701       testb rdi,0x1
0x19db00091c66  2406  0f8499210000   jz 0x19db00093e05  <+0x45a5>
0x19db00091c6c  240c  448b7fff       movl r15,[rdi-0x1]
0x19db00091c70  2410  4d03fd         REX.W addq r15,r13
0x19db00091c73  2413  6641817f072c04 cmpw [r15+0x7],0x42c
0x19db00091c7a  241a  0f858c210000   jnz 0x19db00093e0c  <+0x45ac>
0x19db00091c80  2420  448b7f13       movl r15,[rdi+0x13]
0x19db00091c84  2424  4d03fd         REX.W addq r15,r13
0x19db00091c87  2427  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db00091c91  2431  493bdf         REX.W cmpq rbx,r15
0x19db00091c94  2434  0f8579210000   jnz 0x19db00093e13  <+0x45b3>
0x19db00091c9a  243a  4154           push r12
0x19db00091c9c  243c  50             push rax
0x19db00091c9d  243d  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db00091ca4  2444  4151           push r9
0x19db00091ca6  2446  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00091cb0  2450  b802000000     movl rax,0x2
0x19db00091cb5  2455  4c8b152ae4ffff REX.W movq r10,[rip+0xffffe42a]
0x19db00091cbc  245c  41ffd2         call r10
0x19db00091cbf  245f  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db00091cc3  2463  458b480f       movl r9,[r8+0xf]
0x19db00091cc7  2467  4d03cd         REX.W addq r9,r13
0x19db00091cca  246a  41f6c101       testb r9,0x1
0x19db00091cce  246e  0f844d210000   jz 0x19db00093e21  <+0x45c1>
0x19db00091cd4  2474  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00091cda  247a  453959ff       cmpl [r9-0x1],r11
0x19db00091cde  247e  0f8544210000   jnz 0x19db00093e28  <+0x45c8>
0x19db00091ce4  2484  458b6103       movl r12,[r9+0x3]
0x19db00091ce8  2488  4d03e5         REX.W addq r12,r13
0x19db00091ceb  248b  458b64240f     movl r12,[r12+0xf]
0x19db00091cf0  2490  4d03e5         REX.W addq r12,r13
0x19db00091cf3  2493  41f6c401       testb r12,0x1
0x19db00091cf7  2497  0f8432210000   jz 0x19db00093e2f  <+0x45cf>
0x19db00091cfd  249d  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00091d03  24a3  45397424ff     cmpl [r12-0x1],r14
0x19db00091d08  24a8  0f8528210000   jnz 0x19db00093e36  <+0x45d6>
0x19db00091d0e  24ae  418b442407     movl rax,[r12+0x7]
0x19db00091d13  24b3  4903c5         REX.W addq rax,r13
0x19db00091d16  24b6  448b78ff       movl r15,[rax-0x1]
0x19db00091d1a  24ba  4c8b1575ddffff REX.W movq r10,[rip+0xffffdd75]
0x19db00091d21  24c1  4d3bd7         REX.W cmpq r10,r15
0x19db00091d24  24c4  7712           ja 0x19db00091d38  <+0x24d8>
0x19db00091d26  24c6  488b1578ddffff REX.W movq rdx,[rip+0xffffdd78]
0x19db00091d2d  24cd  4c8b1544dbffff REX.W movq r10,[rip+0xffffdb44]
0x19db00091d34  24d4  41ffd2         call r10
0x19db00091d37  24d7  cc             int3l
0x19db00091d38  24d8  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db00091d3f  24df  0f85f8200000   jnz 0x19db00093e3d  <+0x45dd>
0x19db00091d45  24e5  458b64240b     movl r12,[r12+0xb]
0x19db00091d4a  24ea  41d1fc         sarl r12, 1
0x19db00091d4d  24ed  4183fc00       cmpl r12,0x0
0x19db00091d51  24f1  0f86ed200000   jna 0x19db00093e44  <+0x45e4>
0x19db00091d57  24f7  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db00091d5e  24fe  44894807       movl [rax+0x7],r9
0x19db00091d62  2502  458b480f       movl r9,[r8+0xf]
0x19db00091d66  2506  4d03cd         REX.W addq r9,r13
0x19db00091d69  2509  41f6c101       testb r9,0x1
0x19db00091d6d  250d  0f84d8200000   jz 0x19db00093e4b  <+0x45eb>
0x19db00091d73  2513  453959ff       cmpl [r9-0x1],r11
0x19db00091d77  2517  0f85d5200000   jnz 0x19db00093e52  <+0x45f2>
0x19db00091d7d  251d  458b6103       movl r12,[r9+0x3]
0x19db00091d81  2521  4d03e5         REX.W addq r12,r13
0x19db00091d84  2524  458b64240f     movl r12,[r12+0xf]
0x19db00091d89  2529  4d03e5         REX.W addq r12,r13
0x19db00091d8c  252c  41f6c401       testb r12,0x1
0x19db00091d90  2530  0f84c3200000   jz 0x19db00093e59  <+0x45f9>
0x19db00091d96  2536  45397424ff     cmpl [r12-0x1],r14
0x19db00091d9b  253b  0f85bf200000   jnz 0x19db00093e60  <+0x4600>
0x19db00091da1  2541  418b442407     movl rax,[r12+0x7]
0x19db00091da6  2546  4903c5         REX.W addq rax,r13
0x19db00091da9  2549  458b64240b     movl r12,[r12+0xb]
0x19db00091dae  254e  41d1fc         sarl r12, 1
0x19db00091db1  2551  4183fc0b       cmpl r12,0xb
0x19db00091db5  2555  0f86ac200000   jna 0x19db00093e67  <+0x4607>
0x19db00091dbb  255b  448b6033       movl r12,[rax+0x33]
0x19db00091dbf  255f  4d03e5         REX.W addq r12,r13
0x19db00091dc2  2562  41f6c401       testb r12,0x1
0x19db00091dc6  2566  0f841c160000   jz 0x19db000933e8  <+0x3b88>
0x19db00091dcc  256c  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db00091dd3  2573  0f843e000000   jz 0x19db00091e17  <+0x25b7>
0x19db00091dd9  2579  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db00091de0  2580  0f8431000000   jz 0x19db00091e17  <+0x25b7>
0x19db00091de6  2586  418b4424ff     movl rax,[r12-0x1]
0x19db00091deb  258b  4903c5         REX.W addq rax,r13
0x19db00091dee  258e  f6400910       testb [rax+0x9],0x10
0x19db00091df2  2592  0f851f000000   jnz 0x19db00091e17  <+0x25b7>
0x19db00091df8  2598  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db00091dff  259f  0f84c9150000   jz 0x19db000933ce  <+0x3b6e>
0x19db00091e05  25a5  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db00091e0c  25ac  0f84a8150000   jz 0x19db000933ba  <+0x3b5a>
0x19db00091e12  25b2  e939010000     jmp 0x19db00091f50  <+0x26f0>
0x19db00091e17  25b7  418b782b       movl rdi,[r8+0x2b]
0x19db00091e1b  25bb  4903fd         REX.W addq rdi,r13
0x19db00091e1e  25be  458b6107       movl r12,[r9+0x7]
0x19db00091e22  25c2  4d03e5         REX.W addq r12,r13
0x19db00091e25  25c5  458b790b       movl r15,[r9+0xb]
0x19db00091e29  25c9  41d1ff         sarl r15, 1
0x19db00091e2c  25cc  4183ff00       cmpl r15,0x0
0x19db00091e30  25d0  0f8638200000   jna 0x19db00093e6e  <+0x460e>
0x19db00091e36  25d6  418b442407     movl rax,[r12+0x7]
0x19db00091e3b  25db  4903c5         REX.W addq rax,r13
0x19db00091e3e  25de  4183ff04       cmpl r15,0x4
0x19db00091e42  25e2  0f862d200000   jna 0x19db00093e75  <+0x4615>
0x19db00091e48  25e8  458b642417     movl r12,[r12+0x17]
0x19db00091e4d  25ed  4d03e5         REX.W addq r12,r13
0x19db00091e50  25f0  40f6c701       testb rdi,0x1
0x19db00091e54  25f4  0f8422200000   jz 0x19db00093e7c  <+0x461c>
0x19db00091e5a  25fa  448b7fff       movl r15,[rdi-0x1]
0x19db00091e5e  25fe  4d03fd         REX.W addq r15,r13
0x19db00091e61  2601  6641817f072c04 cmpw [r15+0x7],0x42c
0x19db00091e68  2608  0f8515200000   jnz 0x19db00093e83  <+0x4623>
0x19db00091e6e  260e  448b7f13       movl r15,[rdi+0x13]
0x19db00091e72  2612  4d03fd         REX.W addq r15,r13
0x19db00091e75  2615  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db00091e7f  261f  493bdf         REX.W cmpq rbx,r15
0x19db00091e82  2622  0f8502200000   jnz 0x19db00093e8a  <+0x462a>
0x19db00091e88  2628  4154           push r12
0x19db00091e8a  262a  50             push rax
0x19db00091e8b  262b  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db00091e92  2632  4151           push r9
0x19db00091e94  2634  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00091e9e  263e  b802000000     movl rax,0x2
0x19db00091ea3  2643  4c8b153ce2ffff REX.W movq r10,[rip+0xffffe23c]
0x19db00091eaa  264a  41ffd2         call r10
0x19db00091ead  264d  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db00091eb1  2651  458b480f       movl r9,[r8+0xf]
0x19db00091eb5  2655  4d03cd         REX.W addq r9,r13
0x19db00091eb8  2658  41f6c101       testb r9,0x1
0x19db00091ebc  265c  0f84d61f0000   jz 0x19db00093e98  <+0x4638>
0x19db00091ec2  2662  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00091ec8  2668  453959ff       cmpl [r9-0x1],r11
0x19db00091ecc  266c  0f85cd1f0000   jnz 0x19db00093e9f  <+0x463f>
0x19db00091ed2  2672  458b6103       movl r12,[r9+0x3]
0x19db00091ed6  2676  4d03e5         REX.W addq r12,r13
0x19db00091ed9  2679  458b64240f     movl r12,[r12+0xf]
0x19db00091ede  267e  4d03e5         REX.W addq r12,r13
0x19db00091ee1  2681  41f6c401       testb r12,0x1
0x19db00091ee5  2685  0f84bb1f0000   jz 0x19db00093ea6  <+0x4646>
0x19db00091eeb  268b  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00091ef1  2691  45397424ff     cmpl [r12-0x1],r14
0x19db00091ef6  2696  0f85b11f0000   jnz 0x19db00093ead  <+0x464d>
0x19db00091efc  269c  418b442407     movl rax,[r12+0x7]
0x19db00091f01  26a1  4903c5         REX.W addq rax,r13
0x19db00091f04  26a4  448b78ff       movl r15,[rax-0x1]
0x19db00091f08  26a8  4c8b1587dbffff REX.W movq r10,[rip+0xffffdb87]
0x19db00091f0f  26af  4d3bd7         REX.W cmpq r10,r15
0x19db00091f12  26b2  7712           ja 0x19db00091f26  <+0x26c6>
0x19db00091f14  26b4  488b158adbffff REX.W movq rdx,[rip+0xffffdb8a]
0x19db00091f1b  26bb  4c8b1556d9ffff REX.W movq r10,[rip+0xffffd956]
0x19db00091f22  26c2  41ffd2         call r10
0x19db00091f25  26c5  cc             int3l
0x19db00091f26  26c6  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db00091f2d  26cd  0f85811f0000   jnz 0x19db00093eb4  <+0x4654>
0x19db00091f33  26d3  458b64240b     movl r12,[r12+0xb]
0x19db00091f38  26d8  41d1fc         sarl r12, 1
0x19db00091f3b  26db  4183fc0b       cmpl r12,0xb
0x19db00091f3f  26df  0f86761f0000   jna 0x19db00093ebb  <+0x465b>
0x19db00091f45  26e5  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db00091f4c  26ec  44894833       movl [rax+0x33],r9
0x19db00091f50  26f0  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db00091f54  26f4  41bccd9f3008   movl r12,0x8309fcd      ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db00091f5a  26fa  453961ff       cmpl [r9-0x1],r12
0x19db00091f5e  26fe  0f855e1f0000   jnz 0x19db00093ec2  <+0x4662>
0x19db00091f64  2704  458b7907       movl r15,[r9+0x7]
0x19db00091f68  2708  4d03fd         REX.W addq r15,r13
0x19db00091f6b  270b  418b410b       movl rax,[r9+0xb]
0x19db00091f6f  270f  d1f8           sarl rax, 1
0x19db00091f71  2711  83f804         cmpl rax,0x4
0x19db00091f74  2714  0f864f1f0000   jna 0x19db00093ec9  <+0x4669>
0x19db00091f7a  271a  458b7f17       movl r15,[r15+0x17]
0x19db00091f7e  271e  4d03fd         REX.W addq r15,r13
0x19db00091f81  2721  4539bd98000000 cmpl [r13+0x98] (root (the_hole_value)),r15
0x19db00091f88  2728  0f8469140000   jz 0x19db000933f7  <+0x3b97>
0x19db00091f8e  272e  41f6c701       testb r15,0x1
0x19db00091f92  2732  0f84381f0000   jz 0x19db00093ed0  <+0x4670>
0x19db00091f98  2738  b8559f3008     movl rax,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00091f9d  273d  413947ff       cmpl [r15-0x1],rax
0x19db00091fa1  2741  0f85301f0000   jnz 0x19db00093ed7  <+0x4677>
0x19db00091fa7  2747  418b5707       movl rdx,[r15+0x7]
0x19db00091fab  274b  4903d5         REX.W addq rdx,r13
0x19db00091fae  274e  458b7f0b       movl r15,[r15+0xb]
0x19db00091fb2  2752  41d1ff         sarl r15, 1
0x19db00091fb5  2755  4183ff02       cmpl r15,0x2
0x19db00091fb9  2759  0f861f1f0000   jna 0x19db00093ede  <+0x467e>
0x19db00091fbf  275f  c5fb104217     vmovsd xmm0,[rdx+0x17]
0x19db00091fc4  2764  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db00091fc8  2768  c5f92ec8       vucomisd xmm1,xmm0
0x19db00091fcc  276c  0f8708000000   ja 0x19db00091fda  <+0x277a>
0x19db00091fd2  2772  4d8bc8         REX.W movq r9,r8
0x19db00091fd5  2775  e9a3060000     jmp 0x19db0009267d  <+0x2e1d>
0x19db00091fda  277a  458b780f       movl r15,[r8+0xf]
0x19db00091fde  277e  4d03fd         REX.W addq r15,r13
0x19db00091fe1  2781  41f6c701       testb r15,0x1
0x19db00091fe5  2785  0f84fa1e0000   jz 0x19db00093ee5  <+0x4685>
0x19db00091feb  278b  45395fff       cmpl [r15-0x1],r11
0x19db00091fef  278f  0f85f71e0000   jnz 0x19db00093eec  <+0x468c>
0x19db00091ff5  2795  418b5703       movl rdx,[r15+0x3]
0x19db00091ff9  2799  4903d5         REX.W addq rdx,r13
0x19db00091ffc  279c  8b520f         movl rdx,[rdx+0xf]
0x19db00091fff  279f  4903d5         REX.W addq rdx,r13
0x19db00092002  27a2  f6c201         testb rdx,0x1
0x19db00092005  27a5  0f84e81e0000   jz 0x19db00093ef3  <+0x4693>
0x19db0009200b  27ab  443972ff       cmpl [rdx-0x1],r14
0x19db0009200f  27af  0f85e51e0000   jnz 0x19db00093efa  <+0x469a>
0x19db00092015  27b5  8b4a07         movl rcx,[rdx+0x7]
0x19db00092018  27b8  4903cd         REX.W addq rcx,r13
0x19db0009201b  27bb  8b520b         movl rdx,[rdx+0xb]
0x19db0009201e  27be  d1fa           sarl rdx, 1
0x19db00092020  27c0  83fa0b         cmpl rdx,0xb
0x19db00092023  27c3  0f86d81e0000   jna 0x19db00093f01  <+0x46a1>
0x19db00092029  27c9  8b5133         movl rdx,[rcx+0x33]
0x19db0009202c  27cc  4903d5         REX.W addq rdx,r13
0x19db0009202f  27cf  f6c201         testb rdx,0x1
0x19db00092032  27d2  0f84f1130000   jz 0x19db00093429  <+0x3bc9>
0x19db00092038  27d8  413995b0000000 cmpl [r13+0xb0] (root (false_value)),rdx
0x19db0009203f  27df  0f843c000000   jz 0x19db00092081  <+0x2821>
0x19db00092045  27e5  413995b8000000 cmpl [r13+0xb8] (root (empty_string)),rdx
0x19db0009204c  27ec  0f842f000000   jz 0x19db00092081  <+0x2821>
0x19db00092052  27f2  8b4aff         movl rcx,[rdx-0x1]
0x19db00092055  27f5  4903cd         REX.W addq rcx,r13
0x19db00092058  27f8  f6410910       testb [rcx+0x9],0x10
0x19db0009205c  27fc  0f851f000000   jnz 0x19db00092081  <+0x2821>
0x19db00092062  2802  41398d30010000 cmpl [r13+0x130] (root (heap_number_map)),rcx
0x19db00092069  2809  0f84a6130000   jz 0x19db00093415  <+0x3bb5>
0x19db0009206f  280f  41398db0010000 cmpl [r13+0x1b0] (root (bigint_map)),rcx
0x19db00092076  2816  0f8487130000   jz 0x19db00093403  <+0x3ba3>
0x19db0009207c  281c  e936010000     jmp 0x19db000921b7  <+0x2957>
0x19db00092081  2821  418b782b       movl rdi,[r8+0x2b]
0x19db00092085  2825  4903fd         REX.W addq rdi,r13
0x19db00092088  2828  418b5707       movl rdx,[r15+0x7]
0x19db0009208c  282c  4903d5         REX.W addq rdx,r13
0x19db0009208f  282f  458b7f0b       movl r15,[r15+0xb]
0x19db00092093  2833  41d1ff         sarl r15, 1
0x19db00092096  2836  4183ff04       cmpl r15,0x4
0x19db0009209a  283a  0f86681e0000   jna 0x19db00093f08  <+0x46a8>
0x19db000920a0  2840  8b4a17         movl rcx,[rdx+0x17]
0x19db000920a3  2843  4903cd         REX.W addq rcx,r13
0x19db000920a6  2846  4183ff00       cmpl r15,0x0
0x19db000920aa  284a  0f865f1e0000   jna 0x19db00093f0f  <+0x46af>
0x19db000920b0  2850  448b7a07       movl r15,[rdx+0x7]
0x19db000920b4  2854  4d03fd         REX.W addq r15,r13
0x19db000920b7  2857  40f6c701       testb rdi,0x1
0x19db000920bb  285b  0f84551e0000   jz 0x19db00093f16  <+0x46b6>
0x19db000920c1  2861  8b57ff         movl rdx,[rdi-0x1]
0x19db000920c4  2864  4903d5         REX.W addq rdx,r13
0x19db000920c7  2867  66817a072c04   cmpw [rdx+0x7],0x42c
0x19db000920cd  286d  0f854a1e0000   jnz 0x19db00093f1d  <+0x46bd>
0x19db000920d3  2873  8b5713         movl rdx,[rdi+0x13]
0x19db000920d6  2876  4903d5         REX.W addq rdx,r13
0x19db000920d9  2879  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db000920e3  2883  483bda         REX.W cmpq rbx,rdx
0x19db000920e6  2886  0f85381e0000   jnz 0x19db00093f24  <+0x46c4>
0x19db000920ec  288c  4157           push r15
0x19db000920ee  288e  51             push rcx
0x19db000920ef  288f  4d8bbd90000000 REX.W movq r15,[r13+0x90] (root (undefined_value))
0x19db000920f6  2896  4157           push r15
0x19db000920f8  2898  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00092102  28a2  4c8bf8         REX.W movq r15,rax
0x19db00092105  28a5  b802000000     movl rax,0x2
0x19db0009210a  28aa  4c8b15d5dfffff REX.W movq r10,[rip+0xffffdfd5]
0x19db00092111  28b1  41ffd2         call r10
0x19db00092114  28b4  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db00092118  28b8  458b480f       movl r9,[r8+0xf]
0x19db0009211c  28bc  4d03cd         REX.W addq r9,r13
0x19db0009211f  28bf  41f6c101       testb r9,0x1
0x19db00092123  28c3  0f84091e0000   jz 0x19db00093f32  <+0x46d2>
0x19db00092129  28c9  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009212f  28cf  453959ff       cmpl [r9-0x1],r11
0x19db00092133  28d3  0f85001e0000   jnz 0x19db00093f39  <+0x46d9>
0x19db00092139  28d9  458b6103       movl r12,[r9+0x3]
0x19db0009213d  28dd  4d03e5         REX.W addq r12,r13
0x19db00092140  28e0  458b64240f     movl r12,[r12+0xf]
0x19db00092145  28e5  4d03e5         REX.W addq r12,r13
0x19db00092148  28e8  41f6c401       testb r12,0x1
0x19db0009214c  28ec  0f84ee1d0000   jz 0x19db00093f40  <+0x46e0>
0x19db00092152  28f2  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00092158  28f8  45397424ff     cmpl [r12-0x1],r14
0x19db0009215d  28fd  0f85e41d0000   jnz 0x19db00093f47  <+0x46e7>
0x19db00092163  2903  418b442407     movl rax,[r12+0x7]
0x19db00092168  2908  4903c5         REX.W addq rax,r13
0x19db0009216b  290b  448b78ff       movl r15,[rax-0x1]
0x19db0009216f  290f  4c8b1520d9ffff REX.W movq r10,[rip+0xffffd920]
0x19db00092176  2916  4d3bd7         REX.W cmpq r10,r15
0x19db00092179  2919  7712           ja 0x19db0009218d  <+0x292d>
0x19db0009217b  291b  488b1523d9ffff REX.W movq rdx,[rip+0xffffd923]
0x19db00092182  2922  4c8b15efd6ffff REX.W movq r10,[rip+0xffffd6ef]
0x19db00092189  2929  41ffd2         call r10
0x19db0009218c  292c  cc             int3l
0x19db0009218d  292d  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db00092194  2934  0f85b41d0000   jnz 0x19db00093f4e  <+0x46ee>
0x19db0009219a  293a  458b64240b     movl r12,[r12+0xb]
0x19db0009219f  293f  41d1fc         sarl r12, 1
0x19db000921a2  2942  4183fc0b       cmpl r12,0xb
0x19db000921a6  2946  0f86a91d0000   jna 0x19db00093f55  <+0x46f5>
0x19db000921ac  294c  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db000921b3  2953  44894833       movl [rax+0x33],r9
0x19db000921b7  2957  458b480f       movl r9,[r8+0xf]
0x19db000921bb  295b  4d03cd         REX.W addq r9,r13
0x19db000921be  295e  41f6c101       testb r9,0x1
0x19db000921c2  2962  0f84941d0000   jz 0x19db00093f5c  <+0x46fc>
0x19db000921c8  2968  453959ff       cmpl [r9-0x1],r11
0x19db000921cc  296c  0f85911d0000   jnz 0x19db00093f63  <+0x4703>
0x19db000921d2  2972  458b6103       movl r12,[r9+0x3]
0x19db000921d6  2976  4d03e5         REX.W addq r12,r13
0x19db000921d9  2979  458b64240f     movl r12,[r12+0xf]
0x19db000921de  297e  4d03e5         REX.W addq r12,r13
0x19db000921e1  2981  41f6c401       testb r12,0x1
0x19db000921e5  2985  0f847f1d0000   jz 0x19db00093f6a  <+0x470a>
0x19db000921eb  298b  45397424ff     cmpl [r12-0x1],r14
0x19db000921f0  2990  0f857b1d0000   jnz 0x19db00093f71  <+0x4711>
0x19db000921f6  2996  418b442407     movl rax,[r12+0x7]
0x19db000921fb  299b  4903c5         REX.W addq rax,r13
0x19db000921fe  299e  458b64240b     movl r12,[r12+0xb]
0x19db00092203  29a3  41d1fc         sarl r12, 1
0x19db00092206  29a6  4183fc03       cmpl r12,0x3
0x19db0009220a  29aa  0f86681d0000   jna 0x19db00093f78  <+0x4718>
0x19db00092210  29b0  448b6013       movl r12,[rax+0x13]
0x19db00092214  29b4  4d03e5         REX.W addq r12,r13
0x19db00092217  29b7  41f6c401       testb r12,0x1
0x19db0009221b  29bb  0f8444120000   jz 0x19db00093465  <+0x3c05>
0x19db00092221  29c1  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db00092228  29c8  0f843e000000   jz 0x19db0009226c  <+0x2a0c>
0x19db0009222e  29ce  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db00092235  29d5  0f8431000000   jz 0x19db0009226c  <+0x2a0c>
0x19db0009223b  29db  418b4424ff     movl rax,[r12-0x1]
0x19db00092240  29e0  4903c5         REX.W addq rax,r13
0x19db00092243  29e3  f6400910       testb [rax+0x9],0x10
0x19db00092247  29e7  0f851f000000   jnz 0x19db0009226c  <+0x2a0c>
0x19db0009224d  29ed  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db00092254  29f4  0f84f1110000   jz 0x19db0009344b  <+0x3beb>
0x19db0009225a  29fa  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db00092261  2a01  0f84d0110000   jz 0x19db00093437  <+0x3bd7>
0x19db00092267  2a07  e93f010000     jmp 0x19db000923ab  <+0x2b4b>
0x19db0009226c  2a0c  418b782b       movl rdi,[r8+0x2b]
0x19db00092270  2a10  4903fd         REX.W addq rdi,r13
0x19db00092273  2a13  458b6107       movl r12,[r9+0x7]
0x19db00092277  2a17  4d03e5         REX.W addq r12,r13
0x19db0009227a  2a1a  458b790b       movl r15,[r9+0xb]
0x19db0009227e  2a1e  41d1ff         sarl r15, 1
0x19db00092281  2a21  4183ff00       cmpl r15,0x0
0x19db00092285  2a25  0f86f41c0000   jna 0x19db00093f7f  <+0x471f>
0x19db0009228b  2a2b  418b442407     movl rax,[r12+0x7]
0x19db00092290  2a30  4903c5         REX.W addq rax,r13
0x19db00092293  2a33  4183ff03       cmpl r15,0x3
0x19db00092297  2a37  0f86e91c0000   jna 0x19db00093f86  <+0x4726>
0x19db0009229d  2a3d  458b642413     movl r12,[r12+0x13]
0x19db000922a2  2a42  4d03e5         REX.W addq r12,r13
0x19db000922a5  2a45  40f6c701       testb rdi,0x1
0x19db000922a9  2a49  0f84de1c0000   jz 0x19db00093f8d  <+0x472d>
0x19db000922af  2a4f  448b7fff       movl r15,[rdi-0x1]
0x19db000922b3  2a53  4d03fd         REX.W addq r15,r13
0x19db000922b6  2a56  6641817f072c04 cmpw [r15+0x7],0x42c
0x19db000922bd  2a5d  0f85d11c0000   jnz 0x19db00093f94  <+0x4734>
0x19db000922c3  2a63  448b7f13       movl r15,[rdi+0x13]
0x19db000922c7  2a67  4d03fd         REX.W addq r15,r13
0x19db000922ca  2a6a  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db000922d4  2a74  493bdf         REX.W cmpq rbx,r15
0x19db000922d7  2a77  0f85be1c0000   jnz 0x19db00093f9b  <+0x473b>
0x19db000922dd  2a7d  4154           push r12
0x19db000922df  2a7f  50             push rax
0x19db000922e0  2a80  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db000922e7  2a87  4151           push r9
0x19db000922e9  2a89  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000922f3  2a93  b802000000     movl rax,0x2
0x19db000922f8  2a98  41b9559f3008   movl r9,0x8309f55       ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000922fe  2a9e  4c8b15e1ddffff REX.W movq r10,[rip+0xffffdde1]
0x19db00092305  2aa5  41ffd2         call r10
0x19db00092308  2aa8  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db0009230c  2aac  458b480f       movl r9,[r8+0xf]
0x19db00092310  2ab0  4d03cd         REX.W addq r9,r13
0x19db00092313  2ab3  41f6c101       testb r9,0x1
0x19db00092317  2ab7  0f848c1c0000   jz 0x19db00093fa9  <+0x4749>
0x19db0009231d  2abd  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00092323  2ac3  453959ff       cmpl [r9-0x1],r11
0x19db00092327  2ac7  0f85831c0000   jnz 0x19db00093fb0  <+0x4750>
0x19db0009232d  2acd  458b6103       movl r12,[r9+0x3]
0x19db00092331  2ad1  4d03e5         REX.W addq r12,r13
0x19db00092334  2ad4  458b64240f     movl r12,[r12+0xf]
0x19db00092339  2ad9  4d03e5         REX.W addq r12,r13
0x19db0009233c  2adc  41f6c401       testb r12,0x1
0x19db00092340  2ae0  0f84711c0000   jz 0x19db00093fb7  <+0x4757>
0x19db00092346  2ae6  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009234c  2aec  45397424ff     cmpl [r12-0x1],r14
0x19db00092351  2af1  0f85671c0000   jnz 0x19db00093fbe  <+0x475e>
0x19db00092357  2af7  418b442407     movl rax,[r12+0x7]
0x19db0009235c  2afc  4903c5         REX.W addq rax,r13
0x19db0009235f  2aff  448b78ff       movl r15,[rax-0x1]
0x19db00092363  2b03  4c8b152cd7ffff REX.W movq r10,[rip+0xffffd72c]
0x19db0009236a  2b0a  4d3bd7         REX.W cmpq r10,r15
0x19db0009236d  2b0d  7712           ja 0x19db00092381  <+0x2b21>
0x19db0009236f  2b0f  488b152fd7ffff REX.W movq rdx,[rip+0xffffd72f]
0x19db00092376  2b16  4c8b15fbd4ffff REX.W movq r10,[rip+0xffffd4fb]
0x19db0009237d  2b1d  41ffd2         call r10
0x19db00092380  2b20  cc             int3l
0x19db00092381  2b21  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db00092388  2b28  0f85371c0000   jnz 0x19db00093fc5  <+0x4765>
0x19db0009238e  2b2e  458b64240b     movl r12,[r12+0xb]
0x19db00092393  2b33  41d1fc         sarl r12, 1
0x19db00092396  2b36  4183fc03       cmpl r12,0x3
0x19db0009239a  2b3a  0f862c1c0000   jna 0x19db00093fcc  <+0x476c>
0x19db000923a0  2b40  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db000923a7  2b47  44894813       movl [rax+0x13],r9
0x19db000923ab  2b4b  458b480f       movl r9,[r8+0xf]
0x19db000923af  2b4f  4d03cd         REX.W addq r9,r13
0x19db000923b2  2b52  41f6c101       testb r9,0x1
0x19db000923b6  2b56  0f84171c0000   jz 0x19db00093fd3  <+0x4773>
0x19db000923bc  2b5c  453959ff       cmpl [r9-0x1],r11
0x19db000923c0  2b60  0f85141c0000   jnz 0x19db00093fda  <+0x477a>
0x19db000923c6  2b66  458b6103       movl r12,[r9+0x3]
0x19db000923ca  2b6a  4d03e5         REX.W addq r12,r13
0x19db000923cd  2b6d  458b64240f     movl r12,[r12+0xf]
0x19db000923d2  2b72  4d03e5         REX.W addq r12,r13
0x19db000923d5  2b75  41f6c401       testb r12,0x1
0x19db000923d9  2b79  0f84021c0000   jz 0x19db00093fe1  <+0x4781>
0x19db000923df  2b7f  45397424ff     cmpl [r12-0x1],r14
0x19db000923e4  2b84  0f85fe1b0000   jnz 0x19db00093fe8  <+0x4788>
0x19db000923ea  2b8a  418b442407     movl rax,[r12+0x7]
0x19db000923ef  2b8f  4903c5         REX.W addq rax,r13
0x19db000923f2  2b92  458b64240b     movl r12,[r12+0xb]
0x19db000923f7  2b97  41d1fc         sarl r12, 1
0x19db000923fa  2b9a  4183fc0a       cmpl r12,0xa
0x19db000923fe  2b9e  0f86eb1b0000   jna 0x19db00093fef  <+0x478f>
0x19db00092404  2ba4  448b602f       movl r12,[rax+0x2f]
0x19db00092408  2ba8  4d03e5         REX.W addq r12,r13
0x19db0009240b  2bab  41f6c401       testb r12,0x1
0x19db0009240f  2baf  0f848d100000   jz 0x19db000934a2  <+0x3c42>
0x19db00092415  2bb5  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db0009241c  2bbc  0f843e000000   jz 0x19db00092460  <+0x2c00>
0x19db00092422  2bc2  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db00092429  2bc9  0f8431000000   jz 0x19db00092460  <+0x2c00>
0x19db0009242f  2bcf  418b4424ff     movl rax,[r12-0x1]
0x19db00092434  2bd4  4903c5         REX.W addq rax,r13
0x19db00092437  2bd7  f6400910       testb [rax+0x9],0x10
0x19db0009243b  2bdb  0f851f000000   jnz 0x19db00092460  <+0x2c00>
0x19db00092441  2be1  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db00092448  2be8  0f843a100000   jz 0x19db00093488  <+0x3c28>
0x19db0009244e  2bee  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db00092455  2bf5  0f8419100000   jz 0x19db00093474  <+0x3c14>
0x19db0009245b  2bfb  e93e010000     jmp 0x19db0009259e  <+0x2d3e>
0x19db00092460  2c00  418b782b       movl rdi,[r8+0x2b]
0x19db00092464  2c04  4903fd         REX.W addq rdi,r13
0x19db00092467  2c07  458b6107       movl r12,[r9+0x7]
0x19db0009246b  2c0b  4d03e5         REX.W addq r12,r13
0x19db0009246e  2c0e  458b790b       movl r15,[r9+0xb]
0x19db00092472  2c12  41d1ff         sarl r15, 1
0x19db00092475  2c15  4183ff03       cmpl r15,0x3
0x19db00092479  2c19  0f86771b0000   jna 0x19db00093ff6  <+0x4796>
0x19db0009247f  2c1f  418b442413     movl rax,[r12+0x13]
0x19db00092484  2c24  4903c5         REX.W addq rax,r13
0x19db00092487  2c27  4183ff07       cmpl r15,0x7
0x19db0009248b  2c2b  0f866c1b0000   jna 0x19db00093ffd  <+0x479d>
0x19db00092491  2c31  458b642423     movl r12,[r12+0x23]
0x19db00092496  2c36  4d03e5         REX.W addq r12,r13
0x19db00092499  2c39  40f6c701       testb rdi,0x1
0x19db0009249d  2c3d  0f84611b0000   jz 0x19db00094004  <+0x47a4>
0x19db000924a3  2c43  448b7fff       movl r15,[rdi-0x1]
0x19db000924a7  2c47  4d03fd         REX.W addq r15,r13
0x19db000924aa  2c4a  6641817f072c04 cmpw [r15+0x7],0x42c
0x19db000924b1  2c51  0f85541b0000   jnz 0x19db0009400b  <+0x47ab>
0x19db000924b7  2c57  448b7f13       movl r15,[rdi+0x13]
0x19db000924bb  2c5b  4d03fd         REX.W addq r15,r13
0x19db000924be  2c5e  48bba1422f08db190000 REX.W movq rbx,0x19db082f42a1    ;; object: 0x19db082f42a1 <FeedbackCell[many closures]>
0x19db000924c8  2c68  493bdf         REX.W cmpq rbx,r15
0x19db000924cb  2c6b  0f85411b0000   jnz 0x19db00094012  <+0x47b2>
0x19db000924d1  2c71  4154           push r12
0x19db000924d3  2c73  50             push rax
0x19db000924d4  2c74  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db000924db  2c7b  4151           push r9
0x19db000924dd  2c7d  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000924e7  2c87  b802000000     movl rax,0x2
0x19db000924ec  2c8c  4c8b15f3dbffff REX.W movq r10,[rip+0xffffdbf3]
0x19db000924f3  2c93  41ffd2         call r10
0x19db000924f6  2c96  4c8b4dd8       REX.W movq r9,[rbp-0x28]
0x19db000924fa  2c9a  458b410f       movl r8,[r9+0xf]
0x19db000924fe  2c9e  4d03c5         REX.W addq r8,r13
0x19db00092501  2ca1  41f6c001       testb r8,0x1
0x19db00092505  2ca5  0f84151b0000   jz 0x19db00094020  <+0x47c0>
0x19db0009250b  2cab  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00092511  2cb1  453958ff       cmpl [r8-0x1],r11
0x19db00092515  2cb5  0f850c1b0000   jnz 0x19db00094027  <+0x47c7>
0x19db0009251b  2cbb  458b6003       movl r12,[r8+0x3]
0x19db0009251f  2cbf  4d03e5         REX.W addq r12,r13
0x19db00092522  2cc2  458b64240f     movl r12,[r12+0xf]
0x19db00092527  2cc7  4d03e5         REX.W addq r12,r13
0x19db0009252a  2cca  41f6c401       testb r12,0x1
0x19db0009252e  2cce  0f84fa1a0000   jz 0x19db0009402e  <+0x47ce>
0x19db00092534  2cd4  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009253a  2cda  45397424ff     cmpl [r12-0x1],r14
0x19db0009253f  2cdf  0f85d41a0000   jnz 0x19db00094019  <+0x47b9>
0x19db00092545  2ce5  418b442407     movl rax,[r12+0x7]
0x19db0009254a  2cea  4903c5         REX.W addq rax,r13
0x19db0009254d  2ced  448b78ff       movl r15,[rax-0x1]
0x19db00092551  2cf1  4c8b153ed5ffff REX.W movq r10,[rip+0xffffd53e]
0x19db00092558  2cf8  4d3bd7         REX.W cmpq r10,r15
0x19db0009255b  2cfb  7712           ja 0x19db0009256f  <+0x2d0f>
0x19db0009255d  2cfd  488b1541d5ffff REX.W movq rdx,[rip+0xffffd541]
0x19db00092564  2d04  4c8b150dd3ffff REX.W movq r10,[rip+0xffffd30d]
0x19db0009256b  2d0b  41ffd2         call r10
0x19db0009256e  2d0e  cc             int3l
0x19db0009256f  2d0f  4539bdd0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r15
0x19db00092576  2d16  0f85261a0000   jnz 0x19db00093fa2  <+0x4742>
0x19db0009257c  2d1c  458b64240b     movl r12,[r12+0xb]
0x19db00092581  2d21  41d1fc         sarl r12, 1
0x19db00092584  2d24  4183fc0a       cmpl r12,0xa
0x19db00092588  2d28  0f869d190000   jna 0x19db00093f2b  <+0x46cb>
0x19db0009258e  2d2e  4d8b85a8000000 REX.W movq r8,[r13+0xa8] (root (true_value))
0x19db00092595  2d35  4489402f       movl [rax+0x2f],r8
0x19db00092599  2d39  e903000000     jmp 0x19db000925a1  <+0x2d41>
0x19db0009259e  2d3e  4d8bc8         REX.W movq r9,r8
0x19db000925a1  2d41  458b410f       movl r8,[r9+0xf]
0x19db000925a5  2d45  4d03c5         REX.W addq r8,r13
0x19db000925a8  2d48  41f6c001       testb r8,0x1
0x19db000925ac  2d4c  0f84df180000   jz 0x19db00093e91  <+0x4631>
0x19db000925b2  2d52  453958ff       cmpl [r8-0x1],r11
0x19db000925b6  2d56  0f855e180000   jnz 0x19db00093e1a  <+0x45ba>
0x19db000925bc  2d5c  458b6003       movl r12,[r8+0x3]
0x19db000925c0  2d60  4d03e5         REX.W addq r12,r13
0x19db000925c3  2d63  458b64240f     movl r12,[r12+0xf]
0x19db000925c8  2d68  4d03e5         REX.W addq r12,r13
0x19db000925cb  2d6b  41f6c401       testb r12,0x1
0x19db000925cf  2d6f  0f84ce170000   jz 0x19db00093da3  <+0x4543>
0x19db000925d5  2d75  45397424ff     cmpl [r12-0x1],r14
0x19db000925da  2d7a  0f8592170000   jnz 0x19db00093d72  <+0x4512>
0x19db000925e0  2d80  418b442407     movl rax,[r12+0x7]
0x19db000925e5  2d85  4903c5         REX.W addq rax,r13
0x19db000925e8  2d88  458b64240b     movl r12,[r12+0xb]
0x19db000925ed  2d8d  41d1fc         sarl r12, 1
0x19db000925f0  2d90  4183fc07       cmpl r12,0x7
0x19db000925f4  2d94  0f86ad160000   jna 0x19db00093ca7  <+0x4447>
0x19db000925fa  2d9a  448b6023       movl r12,[rax+0x23]
0x19db000925fe  2d9e  4d03e5         REX.W addq r12,r13
0x19db00092601  2da1  41f6c401       testb r12,0x1
0x19db00092605  2da5  0f84d40e0000   jz 0x19db000934df  <+0x3c7f>
0x19db0009260b  2dab  4539a5b0000000 cmpl [r13+0xb0] (root (false_value)),r12
0x19db00092612  2db2  0f843e000000   jz 0x19db00092656  <+0x2df6>
0x19db00092618  2db8  4539a5b8000000 cmpl [r13+0xb8] (root (empty_string)),r12
0x19db0009261f  2dbf  0f8431000000   jz 0x19db00092656  <+0x2df6>
0x19db00092625  2dc5  418b4424ff     movl rax,[r12-0x1]
0x19db0009262a  2dca  4903c5         REX.W addq rax,r13
0x19db0009262d  2dcd  f6400910       testb [rax+0x9],0x10
0x19db00092631  2dd1  0f851f000000   jnz 0x19db00092656  <+0x2df6>
0x19db00092637  2dd7  41398530010000 cmpl [r13+0x130] (root (heap_number_map)),rax
0x19db0009263e  2dde  0f84810e0000   jz 0x19db000934c5  <+0x3c65>
0x19db00092644  2de4  413985b0010000 cmpl [r13+0x1b0] (root (bigint_map)),rax
0x19db0009264b  2deb  0f84600e0000   jz 0x19db000934b1  <+0x3c51>
0x19db00092651  2df1  e927000000     jmp 0x19db0009267d  <+0x2e1d>
0x19db00092656  2df6  458b612b       movl r12,[r9+0x2b]
0x19db0009265a  2dfa  4c8b1535d4ffff REX.W movq r10,[rip+0xffffd435]
0x19db00092661  2e01  4d39e2         REX.W cmpq r10,r12
0x19db00092664  2e04  7712           ja 0x19db00092678  <+0x2e18>
0x19db00092666  2e06  488b1538d4ffff REX.W movq rdx,[rip+0xffffd438]
0x19db0009266d  2e0d  4c8b1504d2ffff REX.W movq r10,[rip+0xffffd204]
0x19db00092674  2e14  41ffd2         call r10
0x19db00092677  2e17  cc             int3l
0x19db00092678  2e18  e9bf190000     jmp 0x19db0009403c  <+0x47dc>
0x19db0009267d  2e1d  4c8b65d0       REX.W movq r12,[rbp-0x30]
0x19db00092681  2e21  41b8cd9f3008   movl r8,0x8309fcd       ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db00092687  2e27  45394424ff     cmpl [r12-0x1],r8
0x19db0009268c  2e2c  0f85f9150000   jnz 0x19db00093c8b  <+0x442b>
0x19db00092692  2e32  458b442407     movl r8,[r12+0x7]
0x19db00092697  2e37  4d03c5         REX.W addq r8,r13
0x19db0009269a  2e3a  458b7c240b     movl r15,[r12+0xb]
0x19db0009269f  2e3f  41d1ff         sarl r15, 1
0x19db000926a2  2e42  4183ff05       cmpl r15,0x5
0x19db000926a6  2e46  0f86c3150000   jna 0x19db00093c6f  <+0x440f>
0x19db000926ac  2e4c  458b401b       movl r8,[r8+0x1b]
0x19db000926b0  2e50  4d03c5         REX.W addq r8,r13
0x19db000926b3  2e53  45398598000000 cmpl [r13+0x98] (root (the_hole_value)),r8
0x19db000926ba  2e5a  0f84330e0000   jz 0x19db000934f3  <+0x3c93>
0x19db000926c0  2e60  41f6c001       testb r8,0x1
0x19db000926c4  2e64  0f8489150000   jz 0x19db00093c53  <+0x43f3>
0x19db000926ca  2e6a  41bf559f3008   movl r15,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000926d0  2e70  453978ff       cmpl [r8-0x1],r15
0x19db000926d4  2e74  0f8502150000   jnz 0x19db00093bdc  <+0x437c>
0x19db000926da  2e7a  458b7807       movl r15,[r8+0x7]
0x19db000926de  2e7e  4d03fd         REX.W addq r15,r13
0x19db000926e1  2e81  458b400b       movl r8,[r8+0xb]
0x19db000926e5  2e85  41d1f8         sarl r8, 1
0x19db000926e8  2e88  4183f802       cmpl r8,0x2
0x19db000926ec  2e8c  0f861f140000   jna 0x19db00093b11  <+0x42b1>
0x19db000926f2  2e92  c4c17b104f17   vmovsd xmm1,[r15+0x17]
0x19db000926f8  2e98  c5f957c0       vxorpd xmm0,xmm0,xmm0
0x19db000926fc  2e9c  c5f92ec1       vucomisd xmm0,xmm1
0x19db00092700  2ea0  0f8714010000   ja 0x19db0009281a  <+0x2fba>
0x19db00092706  2ea6  458b410f       movl r8,[r9+0xf]
0x19db0009270a  2eaa  4d03c5         REX.W addq r8,r13
0x19db0009270d  2ead  4c8b25abd1ffff REX.W movq r12,[rip+0xffffd1ab]
0x19db00092714  2eb4  4d8b3c24       REX.W movq r15,[r12]
0x19db00092718  2eb8  498d4710       REX.W leaq rax,[r15+0x10]
0x19db0009271c  2ebc  488b1dadd1ffff REX.W movq rbx,[rip+0xffffd1ad]
0x19db00092723  2ec3  483903         REX.W cmpq [rbx],rax
0x19db00092726  2ec6  0f86d30d0000   jna 0x19db000934ff  <+0x3c9f>
0x19db0009272c  2ecc  498d4710       REX.W leaq rax,[r15+0x10]
0x19db00092730  2ed0  49890424       REX.W movq [r12],rax
0x19db00092734  2ed4  4d8d6701       REX.W leaq r12,[r15+0x1]
0x19db00092738  2ed8  45897424ff     movl [r12-0x1],r14
0x19db0009273d  2edd  4d8bb558010000 REX.W movq r14,[r13+0x158] (root (empty_fixed_array))
0x19db00092744  2ee4  4589742403     movl [r12+0x3],r14
0x19db00092749  2ee9  b8715d2f08     movl rax,0x82f5d71      ;; (compressed) object: 0x19db082f5d71 <FixedArray[12]>
0x19db0009274e  2eee  4189442407     movl [r12+0x7],rax
0x19db00092753  2ef3  41c744240b18000000 movl [r12+0xb],0x18
0x19db0009275c  2efc  41f6c001       testb r8,0x1
0x19db00092760  2f00  0f848f130000   jz 0x19db00093af5  <+0x4295>
0x19db00092766  2f06  453958ff       cmpl [r8-0x1],r11
0x19db0009276a  2f0a  0f8569130000   jnz 0x19db00093ad9  <+0x4279>
0x19db00092770  2f10  458b4003       movl r8,[r8+0x3]
0x19db00092774  2f14  4d03c5         REX.W addq r8,r13
0x19db00092777  2f17  4589600f       movl [r8+0xf],r12
0x19db0009277b  2f1b  49c7c60000fcff REX.W movq r14,0xfffc0000
0x19db00092782  2f22  4d23f0         REX.W andq r14,r8
0x19db00092785  2f25  41f6460804     testb [r14+0x8],0x4
0x19db0009278a  2f2a  0f85f20d0000   jnz 0x19db00093582  <+0x3d22>
0x19db00092790  2f30  458b410f       movl r8,[r9+0xf]
0x19db00092794  2f34  4d03c5         REX.W addq r8,r13
0x19db00092797  2f37  41f6c001       testb r8,0x1
0x19db0009279b  2f3b  0f841c130000   jz 0x19db00093abd  <+0x425d>
0x19db000927a1  2f41  453958ff       cmpl [r8-0x1],r11
0x19db000927a5  2f45  0f843e000000   jz 0x19db000927e9  <+0x2f89>
0x19db000927ab  2f4b  41bc45dc3008   movl r12,0x830dc45      ;; (compressed) object: 0x19db0830dc45 <Map(PACKED_ELEMENTS)>
0x19db000927b1  2f51  453960ff       cmpl [r8-0x1],r12
0x19db000927b5  2f55  0f8592120000   jnz 0x19db00093a4d  <+0x41ed>
0x19db000927bb  2f5b  458b4803       movl r9,[r8+0x3]
0x19db000927bf  2f5f  4d03cd         REX.W addq r9,r13
0x19db000927c2  2f62  458958ff       movl [r8-0x1],r11
0x19db000927c6  2f66  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db000927cd  2f6d  4d23e0         REX.W andq r12,r8
0x19db000927d0  2f70  41f644240804   testb [r12+0x8],0x4
0x19db000927d6  2f76  0f855a0d0000   jnz 0x19db00093536  <+0x3cd6>
0x19db000927dc  2f7c  41c7411700000000 movl [r9+0x17],0x0
0x19db000927e4  2f84  e90f000000     jmp 0x19db000927f8  <+0x2f98>
0x19db000927e9  2f89  458b4003       movl r8,[r8+0x3]
0x19db000927ed  2f8d  4d03c5         REX.W addq r8,r13
0x19db000927f0  2f90  41c7401700000000 movl [r8+0x17],0x0
0x19db000927f8  2f98  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db000927ff  2f9f  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db00092803  2fa3  488be5         REX.W movq rsp,rbp
0x19db00092806  2fa6  5d             pop rbp
0x19db00092807  2fa7  4883f900       REX.W cmpq rcx,0x0
0x19db0009280b  2fab  7f03           jg 0x19db00092810  <+0x2fb0>
0x19db0009280d  2fad  c20800         ret 0x8
0x19db00092810  2fb0  415a           pop r10
0x19db00092812  2fb2  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db00092817  2fb7  4152           push r10
0x19db00092819  2fb9  c3             retl
0x19db0009281a  2fba  458b410f       movl r8,[r9+0xf]
0x19db0009281e  2fbe  4d03c5         REX.W addq r8,r13
0x19db00092821  2fc1  41f6c001       testb r8,0x1
0x19db00092825  2fc5  0f8488110000   jz 0x19db000939b3  <+0x4153>
0x19db0009282b  2fcb  453958ff       cmpl [r8-0x1],r11
0x19db0009282f  2fcf  0f8507110000   jnz 0x19db0009393c  <+0x40dc>
0x19db00092835  2fd5  458b4003       movl r8,[r8+0x3]
0x19db00092839  2fd9  4d03c5         REX.W addq r8,r13
0x19db0009283c  2fdc  458b400f       movl r8,[r8+0xf]
0x19db00092840  2fe0  4c8b154fd2ffff REX.W movq r10,[rip+0xffffd24f]
0x19db00092847  2fe7  4d3bd0         REX.W cmpq r10,r8
0x19db0009284a  2fea  7712           ja 0x19db0009285e  <+0x2ffe>
0x19db0009284c  2fec  488b1552d2ffff REX.W movq rdx,[rip+0xffffd252]
0x19db00092853  2ff3  4c8b151ed0ffff REX.W movq r10,[rip+0xffffd01e]
0x19db0009285a  2ffa  41ffd2         call r10
0x19db0009285d  2ffd  cc             int3l
0x19db0009285e  2ffe  e9e0170000     jmp 0x19db00094043  <+0x47e3>
0x19db00092863  3003  458b4703       movl r8,[r15+0x3]
0x19db00092867  3007  4d03c5         REX.W addq r8,r13
0x19db0009286a  300a  458b400f       movl r8,[r8+0xf]
0x19db0009286e  300e  4c8b1521d2ffff REX.W movq r10,[rip+0xffffd221]
0x19db00092875  3015  4d3bd0         REX.W cmpq r10,r8
0x19db00092878  3018  7712           ja 0x19db0009288c  <+0x302c>
0x19db0009287a  301a  488b1524d2ffff REX.W movq rdx,[rip+0xffffd224]
0x19db00092881  3021  4c8b15f0cfffff REX.W movq r10,[rip+0xffffcff0]
0x19db00092888  3028  41ffd2         call r10
0x19db0009288b  302b  cc             int3l
0x19db0009288c  302c  e9b9170000     jmp 0x19db0009404a  <+0x47ea>
0x19db00092891  3031  49b84001000000000000 REX.W movq r8,0x140
0x19db0009289b  303b  4150           push r8
0x19db0009289d  303d  b801000000     movl rax,0x1
0x19db000928a2  3042  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db000928ac  304c  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000928b6  3056  4c8bc0         REX.W movq r8,rax
0x19db000928b9  3059  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db000928c3  3063  41ffd2         call r10
0x19db000928c6  3066  e9f2cfffff     jmp 0x19db0008f8bd  <+0x5d>
0x19db000928cb  306b  ba28000000     movl rdx,0x28
0x19db000928d0  3070  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db000928da  307a  41ffd2         call r10
0x19db000928dd  307d  4c8d48ff       REX.W leaq r9,[rax-0x1]
0x19db000928e1  3081  4c8b1de8cfffff REX.W movq r11,[rip+0xffffcfe8]
0x19db000928e8  3088  4c8b05d0cfffff REX.W movq r8,[rip+0xffffcfd0]
0x19db000928ef  308f  e9edcfffff     jmp 0x19db0008f8e1  <+0x81>
0x19db000928f4  3094  c4c17b104603   vmovsd xmm0,[r14+0x3]
0x19db000928fa  309a  e9d4d1ffff     jmp 0x19db0008fad3  <+0x273>
0x19db000928ff  309f  488945a0       REX.W movq [rbp-0x60],rax
0x19db00092903  30a3  4c894d98       REX.W movq [rbp-0x68],r9
0x19db00092907  30a7  c5fb1145b0     vmovsd [rbp-0x50],xmm0
0x19db0009290c  30ac  4c8bf2         REX.W movq r14,rdx
0x19db0009290f  30af  ba38000000     movl rdx,0x38
0x19db00092914  30b4  4c8b15b7ffffff REX.W movq r10,[rip+0xffffffb7]
0x19db0009291b  30bb  41ffd2         call r10
0x19db0009291e  30be  4c8d40ff       REX.W leaq r8,[rax-0x1]
0x19db00092922  30c2  498bd8         REX.W movq rbx,r8
0x19db00092925  30c5  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db0009292c  30cc  bea59f3008     movl rsi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00092931  30d1  4c8b0587cfffff REX.W movq r8,[rip+0xffffcf87]
0x19db00092938  30d8  4c8b1d91cfffff REX.W movq r11,[rip+0xffffcf91]
0x19db0009293f  30df  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00092944  30e4  488b45a0       REX.W movq rax,[rbp-0x60]
0x19db00092948  30e8  4c8b4d98       REX.W movq r9,[rbp-0x68]
0x19db0009294c  30ec  4c8b7d90       REX.W movq r15,[rbp-0x70]
0x19db00092950  30f0  c5fb1045b0     vmovsd xmm0,[rbp-0x50]
0x19db00092955  30f5  e989d1ffff     jmp 0x19db0008fae3  <+0x283>
0x19db0009295a  30fa  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009295e  30fe  488945a0       REX.W movq [rbp-0x60],rax
0x19db00092962  3102  4c894d98       REX.W movq [rbp-0x68],r9
0x19db00092966  3106  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00092970  3110  4c8be3         REX.W movq r12,rbx
0x19db00092973  3113  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db0009297d  311d  4c8bc0         REX.W movq r8,rax
0x19db00092980  3120  33c0           xorl rax,rax
0x19db00092982  3122  4c8b1532ffffff REX.W movq r10,[rip+0xffffff32]
0x19db00092989  3129  41ffd2         call r10
0x19db0009298c  312c  498b9d58010000 REX.W movq rbx,[r13+0x158] (root (empty_fixed_array))
0x19db00092993  3133  4c8b1d36cfffff REX.W movq r11,[rip+0xffffcf36]
0x19db0009299a  313a  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009299f  313f  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db000929a3  3143  488b45a0       REX.W movq rax,[rbp-0x60]
0x19db000929a7  3147  4c8b4d98       REX.W movq r9,[rbp-0x68]
0x19db000929ab  314b  4c8b7d90       REX.W movq r15,[rbp-0x70]
0x19db000929af  314f  e96ed2ffff     jmp 0x19db0008fc22  <+0x3c2>
0x19db000929b4  3154  438d0400       leal rax,[r8+r8*1]
0x19db000929b8  3158  4c8b15d7d0ffff REX.W movq r10,[rip+0xffffd0d7]
0x19db000929bf  315f  4c3bd0         REX.W cmpq r10,rax
0x19db000929c2  3162  7712           ja 0x19db000929d6  <+0x3176>
0x19db000929c4  3164  488b15dad0ffff REX.W movq rdx,[rip+0xffffd0da]
0x19db000929cb  316b  4c8b15a6ceffff REX.W movq r10,[rip+0xffffcea6]
0x19db000929d2  3172  41ffd2         call r10
0x19db000929d5  3175  cc             int3l
0x19db000929d6  3176  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db000929da  317a  4c8965a0       REX.W movq [rbp-0x60],r12
0x19db000929de  317e  4c894d98       REX.W movq [rbp-0x68],r9
0x19db000929e2  3182  c5fb117580     vmovsd [rbp-0x80],xmm6
0x19db000929e7  3187  c5fb11ad78ffffff vmovsd [rbp-0x88],xmm5
0x19db000929ef  318f  c5fb118d70ffffff vmovsd [rbp-0x90],xmm1
0x19db000929f7  3197  c5fb118568ffffff vmovsd [rbp-0x98],xmm0
0x19db000929ff  319f  c5fb11a560ffffff vmovsd [rbp-0xa0],xmm4
0x19db00092a07  31a7  c5fb119558ffffff vmovsd [rbp-0xa8],xmm2
0x19db00092a0f  31af  4c898550ffffff REX.W movq [rbp-0xb0],r8
0x19db00092a16  31b6  48899548ffffff REX.W movq [rbp-0xb8],rdx
0x19db00092a1d  31bd  488bcb         REX.W movq rcx,rbx
0x19db00092a20  31c0  488bd8         REX.W movq rbx,rax
0x19db00092a23  31c3  498bc6         REX.W movq rax,r14
0x19db00092a26  31c6  33f6           xorl rsi,rsi
0x19db00092a28  31c8  49ba20e7baf5ff7f0000 REX.W movq r10,0x7ffff5bae720  (GrowFastDoubleElements)    ;; off heap target
0x19db00092a32  31d2  41ffd2         call r10
0x19db00092a35  31d5  a801           test al,0x1
0x19db00092a37  31d7  0f84880e0000   jz 0x19db000938c5  <+0x4065>
0x19db00092a3d  31dd  488b9548ffffff REX.W movq rdx,[rbp-0xb8]
0x19db00092a44  31e4  498b9d58010000 REX.W movq rbx,[r13+0x158] (root (empty_fixed_array))
0x19db00092a4b  31eb  4c8b1d7eceffff REX.W movq r11,[rip+0xffffce7e]
0x19db00092a52  31f2  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00092a57  31f7  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db00092a5b  31fb  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db00092a5f  31ff  4c8b4d98       REX.W movq r9,[rbp-0x68]
0x19db00092a63  3203  4c8b7d90       REX.W movq r15,[rbp-0x70]
0x19db00092a67  3207  c5fb107580     vmovsd xmm6,[rbp-0x80]
0x19db00092a6c  320c  c5fb10ad78ffffff vmovsd xmm5,[rbp-0x88]
0x19db00092a74  3214  c5fb108d70ffffff vmovsd xmm1,[rbp-0x90]
0x19db00092a7c  321c  c5fb108568ffffff vmovsd xmm0,[rbp-0x98]
0x19db00092a84  3224  c5fb10a560ffffff vmovsd xmm4,[rbp-0xa0]
0x19db00092a8c  322c  c5fb109558ffffff vmovsd xmm2,[rbp-0xa8]
0x19db00092a94  3234  4c8b8550ffffff REX.W movq r8,[rbp-0xb0]
0x19db00092a9b  323b  e97fd2ffff     jmp 0x19db0008fd1f  <+0x4bf>
0x19db00092aa0  3240  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db00092aa4  3244  4c8965a0       REX.W movq [rbp-0x60],r12
0x19db00092aa8  3248  4c894d98       REX.W movq [rbp-0x68],r9
0x19db00092aac  324c  48894d88       REX.W movq [rbp-0x78],rcx
0x19db00092ab0  3250  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00092aba  325a  4c8bc3         REX.W movq r8,rbx
0x19db00092abd  325d  488b1db1feffff REX.W movq rbx,[rip+0xfffffeb1]
0x19db00092ac4  3264  33c0           xorl rax,rax
0x19db00092ac6  3266  4c8b15eefdffff REX.W movq r10,[rip+0xfffffdee]
0x19db00092acd  326d  41ffd2         call r10
0x19db00092ad0  3270  498b9d58010000 REX.W movq rbx,[r13+0x158] (root (empty_fixed_array))
0x19db00092ad7  3277  4c8b1df2cdffff REX.W movq r11,[rip+0xffffcdf2]
0x19db00092ade  327e  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00092ae3  3283  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db00092ae7  3287  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db00092aeb  328b  4c8b4d98       REX.W movq r9,[rbp-0x68]
0x19db00092aef  328f  4c8b7d90       REX.W movq r15,[rbp-0x70]
0x19db00092af3  3293  488b4d88       REX.W movq rcx,[rbp-0x78]
0x19db00092af7  3297  e934d1ffff     jmp 0x19db0008fc30  <+0x3d0>
0x19db00092afc  329c  448d0c09       leal r9,[rcx+rcx*1]
0x19db00092b00  32a0  4c8b158fcfffff REX.W movq r10,[rip+0xffffcf8f]
0x19db00092b07  32a7  4d3bd1         REX.W cmpq r10,r9
0x19db00092b0a  32aa  7712           ja 0x19db00092b1e  <+0x32be>
0x19db00092b0c  32ac  488b1592cfffff REX.W movq rdx,[rip+0xffffcf92]
0x19db00092b13  32b3  4c8b155ecdffff REX.W movq r10,[rip+0xffffcd5e]
0x19db00092b1a  32ba  41ffd2         call r10
0x19db00092b1d  32bd  cc             int3l
0x19db00092b1e  32be  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db00092b22  32c2  4c897da8       REX.W movq [rbp-0x58],r15
0x19db00092b26  32c6  4c89e0         REX.W movq rax,r12
0x19db00092b29  32c9  4c8bd3         REX.W movq r10,rbx
0x19db00092b2c  32cc  498bd9         REX.W movq rbx,r9
0x19db00092b2f  32cf  4d8bca         REX.W movq r9,r10
0x19db00092b32  32d2  33f6           xorl rsi,rsi
0x19db00092b34  32d4  49bae0eebaf5ff7f0000 REX.W movq r10,0x7ffff5baeee0  (GrowFastSmiOrObjectElements)    ;; off heap target
0x19db00092b3e  32de  41ffd2         call r10
0x19db00092b41  32e1  a801           test al,0x1
0x19db00092b43  32e3  0f840c0d0000   jz 0x19db00093855  <+0x3ff5>
0x19db00092b49  32e9  4c8bc8         REX.W movq r9,rax
0x19db00092b4c  32ec  4c8b65d0       REX.W movq r12,[rbp-0x30]
0x19db00092b50  32f0  498b9d58010000 REX.W movq rbx,[r13+0x158] (root (empty_fixed_array))
0x19db00092b57  32f7  4c8b1d72cdffff REX.W movq r11,[rip+0xffffcd72]
0x19db00092b5e  32fe  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00092b63  3303  41b8cd9f3008   movl r8,0x8309fcd       ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db00092b69  3309  488b4dc0       REX.W movq rcx,[rbp-0x40]
0x19db00092b6d  330d  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db00092b71  3311  4c8b7da8       REX.W movq r15,[rbp-0x58]
0x19db00092b75  3315  e97fd2ffff     jmp 0x19db0008fdf9  <+0x599>
0x19db00092b7a  331a  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db00092b7e  331e  4c897da8       REX.W movq [rbp-0x58],r15
0x19db00092b82  3322  4c89e0         REX.W movq rax,r12
0x19db00092b85  3325  33f6           xorl rsi,rsi
0x19db00092b87  3327  49bac0dfbaf5ff7f0000 REX.W movq r10,0x7ffff5badfc0  (CopyFastSmiOrObjectElements)    ;; off heap target
0x19db00092b91  3331  41ffd2         call r10
0x19db00092b94  3334  4c8bc8         REX.W movq r9,rax
0x19db00092b97  3337  4c8b65d0       REX.W movq r12,[rbp-0x30]
0x19db00092b9b  333b  498b9d58010000 REX.W movq rbx,[r13+0x158] (root (empty_fixed_array))
0x19db00092ba2  3342  4c8b1d27cdffff REX.W movq r11,[rip+0xffffcd27]
0x19db00092ba9  3349  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00092bae  334e  41b8cd9f3008   movl r8,0x8309fcd       ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db00092bb4  3354  488b4dc0       REX.W movq rcx,[rbp-0x40]
0x19db00092bb8  3358  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db00092bbc  335c  4c8b7da8       REX.W movq r15,[rbp-0x58]
0x19db00092bc0  3360  e963d2ffff     jmp 0x19db0008fe28  <+0x5c8>
0x19db00092bc5  3365  4c894dc0       REX.W movq [rbp-0x40],r9
0x19db00092bc9  3369  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00092bd3  3373  4c8bf3         REX.W movq r14,rbx
0x19db00092bd6  3376  488b1d98fdffff REX.W movq rbx,[rip+0xfffffd98]
0x19db00092bdd  337d  33c0           xorl rax,rax
0x19db00092bdf  337f  4c8b15d5fcffff REX.W movq r10,[rip+0xfffffcd5]
0x19db00092be6  3386  41ffd2         call r10
0x19db00092be9  3389  4c8b65d0       REX.W movq r12,[rbp-0x30]
0x19db00092bed  338d  498b9d58010000 REX.W movq rbx,[r13+0x158] (root (empty_fixed_array))
0x19db00092bf4  3394  4c8b1dd5ccffff REX.W movq r11,[rip+0xffffccd5]
0x19db00092bfb  339b  bf559f3008     movl rdi,0x8309f55      ;; (compressed) object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00092c00  33a0  41b8cd9f3008   movl r8,0x8309fcd       ;; (compressed) object: 0x19db08309fcd <Map(HOLEY_ELEMENTS)>
0x19db00092c06  33a6  4c8b4dc0       REX.W movq r9,[rbp-0x40]
0x19db00092c0a  33aa  e9c1cdffff     jmp 0x19db0008f9d0  <+0x170>
0x19db00092c0f  33af  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db00092c16  33b6  e9ecd2ffff     jmp 0x19db0008ff07  <+0x6a7>
0x19db00092c1b  33bb  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db00092c22  33c2  e93ed3ffff     jmp 0x19db0008ff65  <+0x705>
0x19db00092c27  33c7  41f74703feffff7f testl [r15+0x3],0x7ffffffe
0x19db00092c2f  33cf  0f8574d5ffff   jnz 0x19db000901a9  <+0x949>
0x19db00092c35  33d5  e910d4ffff     jmp 0x19db0009004a  <+0x7ea>
0x19db00092c3a  33da  c4c17b104703   vmovsd xmm0,[r15+0x3]
0x19db00092c40  33e0  c5f92ec8       vucomisd xmm1,xmm0
0x19db00092c44  33e4  0f855fd5ffff   jnz 0x19db000901a9  <+0x949>
0x19db00092c4a  33ea  e9fbd3ffff     jmp 0x19db0009004a  <+0x7ea>
0x19db00092c4f  33ef  4183ff00       cmpl r15,0x0
0x19db00092c53  33f3  0f8550d5ffff   jnz 0x19db000901a9  <+0x949>
0x19db00092c59  33f9  e9ecd3ffff     jmp 0x19db0009004a  <+0x7ea>
0x19db00092c5e  33fe  33f6           xorl rsi,rsi
0x19db00092c60  3400  4c8b1522ffffff REX.W movq r10,[rip+0xffffff22]
0x19db00092c67  3407  41ffd2         call r10
0x19db00092c6a  340a  4c8bf0         REX.W movq r14,rax
0x19db00092c6d  340d  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db00092c71  3411  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00092c77  3417  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00092c7d  341d  e902d5ffff     jmp 0x19db00090184  <+0x924>
0x19db00092c82  3422  f74003feffff7f testl [rax+0x3],0x7ffffffe
0x19db00092c89  3429  0f8501d7ffff   jnz 0x19db00090390  <+0xb30>
0x19db00092c8f  342f  e9c3d5ffff     jmp 0x19db00090257  <+0x9f7>
0x19db00092c94  3434  c5fb104003     vmovsd xmm0,[rax+0x3]
0x19db00092c99  3439  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db00092c9d  343d  c5f92ec8       vucomisd xmm1,xmm0
0x19db00092ca1  3441  0f85e9d6ffff   jnz 0x19db00090390  <+0xb30>
0x19db00092ca7  3447  e9abd5ffff     jmp 0x19db00090257  <+0x9f7>
0x19db00092cac  344c  83f800         cmpl rax,0x0
0x19db00092caf  344f  0f85dbd6ffff   jnz 0x19db00090390  <+0xb30>
0x19db00092cb5  3455  e99dd5ffff     jmp 0x19db00090257  <+0x9f7>
0x19db00092cba  345a  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db00092cc3  3463  0f85c1d8ffff   jnz 0x19db0009058a  <+0xd2a>
0x19db00092cc9  3469  e97dd7ffff     jmp 0x19db0009044b  <+0xbeb>
0x19db00092cce  346e  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db00092cd5  3475  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db00092cd9  3479  c5f92ec8       vucomisd xmm1,xmm0
0x19db00092cdd  347d  0f85a7d8ffff   jnz 0x19db0009058a  <+0xd2a>
0x19db00092ce3  3483  e963d7ffff     jmp 0x19db0009044b  <+0xbeb>
0x19db00092ce8  3488  4183fc00       cmpl r12,0x0
0x19db00092cec  348c  0f8598d8ffff   jnz 0x19db0009058a  <+0xd2a>
0x19db00092cf2  3492  e954d7ffff     jmp 0x19db0009044b  <+0xbeb>
0x19db00092cf7  3497  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db00092d00  34a0  0f8572daffff   jnz 0x19db00090778  <+0xf18>
0x19db00092d06  34a6  e934d9ffff     jmp 0x19db0009063f  <+0xddf>
0x19db00092d0b  34ab  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db00092d12  34b2  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db00092d16  34b6  c5f92ec8       vucomisd xmm1,xmm0
0x19db00092d1a  34ba  0f8558daffff   jnz 0x19db00090778  <+0xf18>
0x19db00092d20  34c0  e91ad9ffff     jmp 0x19db0009063f  <+0xddf>
0x19db00092d25  34c5  4183fc00       cmpl r12,0x0
0x19db00092d29  34c9  0f8549daffff   jnz 0x19db00090778  <+0xf18>
0x19db00092d2f  34cf  e90bd9ffff     jmp 0x19db0009063f  <+0xddf>
0x19db00092d34  34d4  4d8bbd90000000 REX.W movq r15,[r13+0x90] (root (undefined_value))
0x19db00092d3b  34db  e976daffff     jmp 0x19db000907b6  <+0xf56>
0x19db00092d40  34e0  f74203feffff7f testl [rdx+0x3],0x7ffffffe
0x19db00092d47  34e7  0f8597dcffff   jnz 0x19db000909e4  <+0x1184>
0x19db00092d4d  34ed  e94fdbffff     jmp 0x19db000908a1  <+0x1041>
0x19db00092d52  34f2  c5fb104203     vmovsd xmm0,[rdx+0x3]
0x19db00092d57  34f7  c5f92ec8       vucomisd xmm1,xmm0
0x19db00092d5b  34fb  0f8583dcffff   jnz 0x19db000909e4  <+0x1184>
0x19db00092d61  3501  e93bdbffff     jmp 0x19db000908a1  <+0x1041>
0x19db00092d66  3506  83fa00         cmpl rdx,0x0
0x19db00092d69  3509  0f8575dcffff   jnz 0x19db000909e4  <+0x1184>
0x19db00092d6f  350f  e92ddbffff     jmp 0x19db000908a1  <+0x1041>
0x19db00092d74  3514  33f6           xorl rsi,rsi
0x19db00092d76  3516  4c8b150cfeffff REX.W movq r10,[rip+0xfffffe0c]
0x19db00092d7d  351d  41ffd2         call r10
0x19db00092d80  3520  4c8bf0         REX.W movq r14,rax
0x19db00092d83  3523  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db00092d87  3527  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00092d8d  352d  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00092d93  3533  e92fdcffff     jmp 0x19db000909c7  <+0x1167>
0x19db00092d98  3538  f74203feffff7f testl [rdx+0x3],0x7ffffffe
0x19db00092d9f  353f  0f858ee2ffff   jnz 0x19db00091033  <+0x17d3>
0x19db00092da5  3545  e9e1dcffff     jmp 0x19db00090a8b  <+0x122b>
0x19db00092daa  354a  c5fb104203     vmovsd xmm0,[rdx+0x3]
0x19db00092daf  354f  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db00092db3  3553  c5f92ec8       vucomisd xmm1,xmm0
0x19db00092db7  3557  0f8576e2ffff   jnz 0x19db00091033  <+0x17d3>
0x19db00092dbd  355d  e9c9dcffff     jmp 0x19db00090a8b  <+0x122b>
0x19db00092dc2  3562  83fa00         cmpl rdx,0x0
0x19db00092dc5  3565  0f8568e2ffff   jnz 0x19db00091033  <+0x17d3>
0x19db00092dcb  356b  e9bbdcffff     jmp 0x19db00090a8b  <+0x122b>
0x19db00092dd0  3570  48894dc8       REX.W movq [rbp-0x38],rcx
0x19db00092dd4  3574  c5fb1175c0     vmovsd [rbp-0x40],xmm6
0x19db00092dd9  3579  48897db8       REX.W movq [rbp-0x48],rdi
0x19db00092ddd  357d  4c894d90       REX.W movq [rbp-0x70],r9
0x19db00092de1  3581  4c896588       REX.W movq [rbp-0x78],r12
0x19db00092de5  3585  4c897580       REX.W movq [rbp-0x80],r14
0x19db00092de9  3589  4c89bd78ffffff REX.W movq [rbp-0x88],r15
0x19db00092df0  3590  c5fb119d70ffffff vmovsd [rbp-0x90],xmm3
0x19db00092df8  3598  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db00092e00  35a0  c57b118558ffffff vmovsd [rbp-0xa8],xmm8
0x19db00092e08  35a8  c5fb11bd50ffffff vmovsd [rbp-0xb0],xmm7
0x19db00092e10  35b0  c5fb118548ffffff vmovsd [rbp-0xb8],xmm0
0x19db00092e18  35b8  c5fb11a540ffffff vmovsd [rbp-0xc0],xmm4
0x19db00092e20  35c0  c5fb118d68ffffff vmovsd [rbp-0x98],xmm1
0x19db00092e28  35c8  4c899d38ffffff REX.W movq [rbp-0xc8],r11
0x19db00092e2f  35cf  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00092e39  35d9  4c8bc3         REX.W movq r8,rbx
0x19db00092e3c  35dc  488b1d32fbffff REX.W movq rbx,[rip+0xfffffb32]
0x19db00092e43  35e3  33c0           xorl rax,rax
0x19db00092e45  35e5  4c8b156ffaffff REX.W movq r10,[rip+0xfffffa6f]
0x19db00092e4c  35ec  41ffd2         call r10
0x19db00092e4f  35ef  488b4dc8       REX.W movq rcx,[rbp-0x38]
0x19db00092e53  35f3  c5fb1075c0     vmovsd xmm6,[rbp-0x40]
0x19db00092e58  35f8  488b7db8       REX.W movq rdi,[rbp-0x48]
0x19db00092e5c  35fc  488b5d98       REX.W movq rbx,[rbp-0x68]
0x19db00092e60  3600  4c8b4d90       REX.W movq r9,[rbp-0x70]
0x19db00092e64  3604  4c8b6588       REX.W movq r12,[rbp-0x78]
0x19db00092e68  3608  4c8b7580       REX.W movq r14,[rbp-0x80]
0x19db00092e6c  360c  4c8bbd78ffffff REX.W movq r15,[rbp-0x88]
0x19db00092e73  3613  c5fb109d70ffffff vmovsd xmm3,[rbp-0x90]
0x19db00092e7b  361b  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db00092e83  3623  c57b108558ffffff vmovsd xmm8,[rbp-0xa8]
0x19db00092e8b  362b  c5fb10bd50ffffff vmovsd xmm7,[rbp-0xb0]
0x19db00092e93  3633  c5fb108548ffffff vmovsd xmm0,[rbp-0xb8]
0x19db00092e9b  363b  c5fb10a540ffffff vmovsd xmm4,[rbp-0xc0]
0x19db00092ea3  3643  c5fb108d68ffffff vmovsd xmm1,[rbp-0x98]
0x19db00092eab  364b  4c8b9d38ffffff REX.W movq r11,[rbp-0xc8]
0x19db00092eb2  3652  e940e0ffff     jmp 0x19db00090ef7  <+0x1697>
0x19db00092eb7  3657  48894dc8       REX.W movq [rbp-0x38],rcx
0x19db00092ebb  365b  c5fb1175c0     vmovsd [rbp-0x40],xmm6
0x19db00092ec0  3660  48897db8       REX.W movq [rbp-0x48],rdi
0x19db00092ec4  3664  c5fb11a540ffffff vmovsd [rbp-0xc0],xmm4
0x19db00092ecc  366c  c5fb118548ffffff vmovsd [rbp-0xb8],xmm0
0x19db00092ed4  3674  4c894d90       REX.W movq [rbp-0x70],r9
0x19db00092ed8  3678  4c896588       REX.W movq [rbp-0x78],r12
0x19db00092edc  367c  4c897580       REX.W movq [rbp-0x80],r14
0x19db00092ee0  3680  4c89bd78ffffff REX.W movq [rbp-0x88],r15
0x19db00092ee7  3687  c5fb119d70ffffff vmovsd [rbp-0x90],xmm3
0x19db00092eef  368f  c5fb11ad68ffffff vmovsd [rbp-0x98],xmm5
0x19db00092ef7  3697  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db00092eff  369f  4c898538ffffff REX.W movq [rbp-0xc8],r8
0x19db00092f06  36a6  c57b118558ffffff vmovsd [rbp-0xa8],xmm8
0x19db00092f0e  36ae  c5fb11bd50ffffff vmovsd [rbp-0xb0],xmm7
0x19db00092f16  36b6  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00092f20  36c0  4c8bdb         REX.W movq r11,rbx
0x19db00092f23  36c3  488b1d4bfaffff REX.W movq rbx,[rip+0xfffffa4b]
0x19db00092f2a  36ca  33c0           xorl rax,rax
0x19db00092f2c  36cc  4c8b1588f9ffff REX.W movq r10,[rip+0xfffff988]
0x19db00092f33  36d3  41ffd2         call r10
0x19db00092f36  36d6  488b4dc8       REX.W movq rcx,[rbp-0x38]
0x19db00092f3a  36da  c5fb1075c0     vmovsd xmm6,[rbp-0x40]
0x19db00092f3f  36df  488b7db8       REX.W movq rdi,[rbp-0x48]
0x19db00092f43  36e3  488b5d98       REX.W movq rbx,[rbp-0x68]
0x19db00092f47  36e7  c5fb10a540ffffff vmovsd xmm4,[rbp-0xc0]
0x19db00092f4f  36ef  c5fb108548ffffff vmovsd xmm0,[rbp-0xb8]
0x19db00092f57  36f7  4c8b4d90       REX.W movq r9,[rbp-0x70]
0x19db00092f5b  36fb  4c8b6588       REX.W movq r12,[rbp-0x78]
0x19db00092f5f  36ff  4c8b7580       REX.W movq r14,[rbp-0x80]
0x19db00092f63  3703  4c8bbd78ffffff REX.W movq r15,[rbp-0x88]
0x19db00092f6a  370a  c5fb109d70ffffff vmovsd xmm3,[rbp-0x90]
0x19db00092f72  3712  c5fb10ad68ffffff vmovsd xmm5,[rbp-0x98]
0x19db00092f7a  371a  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db00092f82  3722  4c8b8538ffffff REX.W movq r8,[rbp-0xc8]
0x19db00092f89  3729  c57b108558ffffff vmovsd xmm8,[rbp-0xa8]
0x19db00092f91  3731  c5fb10bd50ffffff vmovsd xmm7,[rbp-0xb0]
0x19db00092f99  3739  e952dfffff     jmp 0x19db00090ef0  <+0x1690>
0x19db00092f9e  373e  c4c37916f001   vpextrd r8,xmm6,0x1,
0x19db00092fa4  3744  48894dc8       REX.W movq [rbp-0x38],rcx
0x19db00092fa8  3748  c5fb1175c0     vmovsd [rbp-0x40],xmm6
0x19db00092fad  374d  4183f800       cmpl r8,0x0
0x19db00092fb1  3751  0f8c0e000000   jl 0x19db00092fc5  <+0x3765>
0x19db00092fb7  3757  e9afdfffff     jmp 0x19db00090f6b  <+0x170b>
0x19db00092fbc  375c  48894dc8       REX.W movq [rbp-0x38],rcx
0x19db00092fc0  3760  c5fb1175c0     vmovsd [rbp-0x40],xmm6
0x19db00092fc5  3765  4c8b05f3c8ffff REX.W movq r8,[rip+0xffffc8f3]
0x19db00092fcc  376c  4d8b08         REX.W movq r9,[r8]
0x19db00092fcf  376f  4d8d610c       REX.W leaq r12,[r9+0xc]
0x19db00092fd3  3773  4c8b1df6c8ffff REX.W movq r11,[rip+0xffffc8f6]
0x19db00092fda  377a  4d3923         REX.W cmpq [r11],r12
0x19db00092fdd  377d  0f8713000000   ja 0x19db00092ff6  <+0x3796>
0x19db00092fe3  3783  ba0c000000     movl rdx,0xc
0x19db00092fe8  3788  4c8b15e3f8ffff REX.W movq r10,[rip+0xfffff8e3]
0x19db00092fef  378f  41ffd2         call r10
0x19db00092ff2  3792  4c8d48ff       REX.W leaq r9,[rax-0x1]
0x19db00092ff6  3796  4d8d410c       REX.W leaq r8,[r9+0xc]
0x19db00092ffa  379a  4c8b1dbec8ffff REX.W movq r11,[rip+0xffffc8be]
0x19db00093001  37a1  4d8903         REX.W movq [r11],r8
0x19db00093004  37a4  4d8d4101       REX.W leaq r8,[r9+0x1]
0x19db00093008  37a8  4d8b8d30010000 REX.W movq r9,[r13+0x130] (root (heap_number_map))
0x19db0009300f  37af  458948ff       movl [r8-0x1],r9
0x19db00093013  37b3  c5fb1075c0     vmovsd xmm6,[rbp-0x40]
0x19db00093018  37b8  c4c17b117003   vmovsd [r8+0x3],xmm6
0x19db0009301e  37be  488b4dc8       REX.W movq rcx,[rbp-0x38]
0x19db00093022  37c2  e950dfffff     jmp 0x19db00090f77  <+0x1717>
0x19db00093027  37c7  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db00093030  37d0  0f85f4e1ffff   jnz 0x19db0009122a  <+0x19ca>
0x19db00093036  37d6  e9ade0ffff     jmp 0x19db000910e8  <+0x1888>
0x19db0009303b  37db  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db00093042  37e2  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db00093046  37e6  c5f92ec8       vucomisd xmm1,xmm0
0x19db0009304a  37ea  0f85dae1ffff   jnz 0x19db0009122a  <+0x19ca>
0x19db00093050  37f0  e993e0ffff     jmp 0x19db000910e8  <+0x1888>
0x19db00093055  37f5  4183fc00       cmpl r12,0x0
0x19db00093059  37f9  0f85cbe1ffff   jnz 0x19db0009122a  <+0x19ca>
0x19db0009305f  37ff  e984e0ffff     jmp 0x19db000910e8  <+0x1888>
0x19db00093064  3804  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db0009306d  380d  0f851fe8ffff   jnz 0x19db00091892  <+0x2032>
0x19db00093073  3813  e967e2ffff     jmp 0x19db000912df  <+0x1a7f>
0x19db00093078  3818  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db0009307f  381f  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db00093083  3823  c5f92ec8       vucomisd xmm1,xmm0
0x19db00093087  3827  0f8505e8ffff   jnz 0x19db00091892  <+0x2032>
0x19db0009308d  382d  e94de2ffff     jmp 0x19db000912df  <+0x1a7f>
0x19db00093092  3832  4183fc00       cmpl r12,0x0
0x19db00093096  3836  0f85f6e7ffff   jnz 0x19db00091892  <+0x2032>
0x19db0009309c  383c  e93ee2ffff     jmp 0x19db000912df  <+0x1a7f>
0x19db000930a1  3841  488955c8       REX.W movq [rbp-0x38],rdx
0x19db000930a5  3845  c5fb1175c0     vmovsd [rbp-0x40],xmm6
0x19db000930aa  384a  488975b8       REX.W movq [rbp-0x48],rsi
0x19db000930ae  384e  4c894590       REX.W movq [rbp-0x70],r8
0x19db000930b2  3852  4c895d88       REX.W movq [rbp-0x78],r11
0x19db000930b6  3856  4c896580       REX.W movq [rbp-0x80],r12
0x19db000930ba  385a  4c89b578ffffff REX.W movq [rbp-0x88],r14
0x19db000930c1  3861  c5fb119d70ffffff vmovsd [rbp-0x90],xmm3
0x19db000930c9  3869  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db000930d1  3871  c57b118558ffffff vmovsd [rbp-0xa8],xmm8
0x19db000930d9  3879  c5fb11bd50ffffff vmovsd [rbp-0xb0],xmm7
0x19db000930e1  3881  c5fb118548ffffff vmovsd [rbp-0xb8],xmm0
0x19db000930e9  3889  c5fb11a540ffffff vmovsd [rbp-0xc0],xmm4
0x19db000930f1  3891  c5fb118d68ffffff vmovsd [rbp-0x98],xmm1
0x19db000930f9  3899  4c898d38ffffff REX.W movq [rbp-0xc8],r9
0x19db00093100  38a0  4c8bfb         REX.W movq r15,rbx
0x19db00093103  38a3  488b1d6bf8ffff REX.W movq rbx,[rip+0xfffff86b]
0x19db0009310a  38aa  33c0           xorl rax,rax
0x19db0009310c  38ac  488bce         REX.W movq rcx,rsi
0x19db0009310f  38af  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00093119  38b9  4c8b159bf7ffff REX.W movq r10,[rip+0xfffff79b]
0x19db00093120  38c0  41ffd2         call r10
0x19db00093123  38c3  488b55c8       REX.W movq rdx,[rbp-0x38]
0x19db00093127  38c7  c5fb1075c0     vmovsd xmm6,[rbp-0x40]
0x19db0009312c  38cc  488b75b8       REX.W movq rsi,[rbp-0x48]
0x19db00093130  38d0  488b5d98       REX.W movq rbx,[rbp-0x68]
0x19db00093134  38d4  4c8b4590       REX.W movq r8,[rbp-0x70]
0x19db00093138  38d8  4c8b5d88       REX.W movq r11,[rbp-0x78]
0x19db0009313c  38dc  4c8b6580       REX.W movq r12,[rbp-0x80]
0x19db00093140  38e0  4c8bb578ffffff REX.W movq r14,[rbp-0x88]
0x19db00093147  38e7  c5fb109d70ffffff vmovsd xmm3,[rbp-0x90]
0x19db0009314f  38ef  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db00093157  38f7  c57b108558ffffff vmovsd xmm8,[rbp-0xa8]
0x19db0009315f  38ff  c5fb10bd50ffffff vmovsd xmm7,[rbp-0xb0]
0x19db00093167  3907  c5fb108548ffffff vmovsd xmm0,[rbp-0xb8]
0x19db0009316f  390f  c5fb10a540ffffff vmovsd xmm4,[rbp-0xc0]
0x19db00093177  3917  c5fb108d68ffffff vmovsd xmm1,[rbp-0x98]
0x19db0009317f  391f  4c8b8d38ffffff REX.W movq r9,[rbp-0xc8]
0x19db00093186  3926  e9cce5ffff     jmp 0x19db00091757  <+0x1ef7>
0x19db0009318b  392b  488955c8       REX.W movq [rbp-0x38],rdx
0x19db0009318f  392f  c5fb1175c0     vmovsd [rbp-0x40],xmm6
0x19db00093194  3934  488975b8       REX.W movq [rbp-0x48],rsi
0x19db00093198  3938  c5fb11a540ffffff vmovsd [rbp-0xc0],xmm4
0x19db000931a0  3940  c5fb118548ffffff vmovsd [rbp-0xb8],xmm0
0x19db000931a8  3948  4c894590       REX.W movq [rbp-0x70],r8
0x19db000931ac  394c  4c895d88       REX.W movq [rbp-0x78],r11
0x19db000931b0  3950  4c896580       REX.W movq [rbp-0x80],r12
0x19db000931b4  3954  4c89b578ffffff REX.W movq [rbp-0x88],r14
0x19db000931bb  395b  c5fb119d70ffffff vmovsd [rbp-0x90],xmm3
0x19db000931c3  3963  c5fb11ad68ffffff vmovsd [rbp-0x98],xmm5
0x19db000931cb  396b  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db000931d3  3973  4c89bd38ffffff REX.W movq [rbp-0xc8],r15
0x19db000931da  397a  c57b118558ffffff vmovsd [rbp-0xa8],xmm8
0x19db000931e2  3982  c5fb11bd50ffffff vmovsd [rbp-0xb0],xmm7
0x19db000931ea  398a  4c8bcb         REX.W movq r9,rbx
0x19db000931ed  398d  488b1d81f7ffff REX.W movq rbx,[rip+0xfffff781]
0x19db000931f4  3994  33c0           xorl rax,rax
0x19db000931f6  3996  488bce         REX.W movq rcx,rsi
0x19db000931f9  3999  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00093203  39a3  4c8b15b1f6ffff REX.W movq r10,[rip+0xfffff6b1]
0x19db0009320a  39aa  41ffd2         call r10
0x19db0009320d  39ad  488b55c8       REX.W movq rdx,[rbp-0x38]
0x19db00093211  39b1  c5fb1075c0     vmovsd xmm6,[rbp-0x40]
0x19db00093216  39b6  488b75b8       REX.W movq rsi,[rbp-0x48]
0x19db0009321a  39ba  488b5d98       REX.W movq rbx,[rbp-0x68]
0x19db0009321e  39be  c5fb10a540ffffff vmovsd xmm4,[rbp-0xc0]
0x19db00093226  39c6  c5fb108548ffffff vmovsd xmm0,[rbp-0xb8]
0x19db0009322e  39ce  4c8b4590       REX.W movq r8,[rbp-0x70]
0x19db00093232  39d2  4c8b5d88       REX.W movq r11,[rbp-0x78]
0x19db00093236  39d6  4c8b6580       REX.W movq r12,[rbp-0x80]
0x19db0009323a  39da  4c8bb578ffffff REX.W movq r14,[rbp-0x88]
0x19db00093241  39e1  c5fb109d70ffffff vmovsd xmm3,[rbp-0x90]
0x19db00093249  39e9  c5fb10ad68ffffff vmovsd xmm5,[rbp-0x98]
0x19db00093251  39f1  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db00093259  39f9  4c8bbd38ffffff REX.W movq r15,[rbp-0xc8]
0x19db00093260  3a00  c57b108558ffffff vmovsd xmm8,[rbp-0xa8]
0x19db00093268  3a08  c5fb10bd50ffffff vmovsd xmm7,[rbp-0xb0]
0x19db00093270  3a10  e9dbe4ffff     jmp 0x19db00091750  <+0x1ef0>
0x19db00093275  3a15  c4c37916f001   vpextrd r8,xmm6,0x1,
0x19db0009327b  3a1b  488955c8       REX.W movq [rbp-0x38],rdx
0x19db0009327f  3a1f  c5fb1175c0     vmovsd [rbp-0x40],xmm6
0x19db00093284  3a24  4183f800       cmpl r8,0x0
0x19db00093288  3a28  0f8c0e000000   jl 0x19db0009329c  <+0x3a3c>
0x19db0009328e  3a2e  e938e5ffff     jmp 0x19db000917cb  <+0x1f6b>
0x19db00093293  3a33  488955c8       REX.W movq [rbp-0x38],rdx
0x19db00093297  3a37  c5fb1175c0     vmovsd [rbp-0x40],xmm6
0x19db0009329c  3a3c  4c8b051cc6ffff REX.W movq r8,[rip+0xffffc61c]
0x19db000932a3  3a43  4d8b08         REX.W movq r9,[r8]
0x19db000932a6  3a46  4d8d610c       REX.W leaq r12,[r9+0xc]
0x19db000932aa  3a4a  4c8b1d1fc6ffff REX.W movq r11,[rip+0xffffc61f]
0x19db000932b1  3a51  4d3923         REX.W cmpq [r11],r12
0x19db000932b4  3a54  0f8716000000   ja 0x19db000932d0  <+0x3a70>
0x19db000932ba  3a5a  4c8bca         REX.W movq r9,rdx
0x19db000932bd  3a5d  ba0c000000     movl rdx,0xc
0x19db000932c2  3a62  4c8b1509f6ffff REX.W movq r10,[rip+0xfffff609]
0x19db000932c9  3a69  41ffd2         call r10
0x19db000932cc  3a6c  4c8d48ff       REX.W leaq r9,[rax-0x1]
0x19db000932d0  3a70  4d8d410c       REX.W leaq r8,[r9+0xc]
0x19db000932d4  3a74  4c8b1de4c5ffff REX.W movq r11,[rip+0xffffc5e4]
0x19db000932db  3a7b  4d8903         REX.W movq [r11],r8
0x19db000932de  3a7e  4d8d4101       REX.W leaq r8,[r9+0x1]
0x19db000932e2  3a82  4d8b8d30010000 REX.W movq r9,[r13+0x130] (root (heap_number_map))
0x19db000932e9  3a89  458948ff       movl [r8-0x1],r9
0x19db000932ed  3a8d  c5fb1075c0     vmovsd xmm6,[rbp-0x40]
0x19db000932f2  3a92  c4c17b117003   vmovsd [r8+0x3],xmm6
0x19db000932f8  3a98  498bf0         REX.W movq rsi,r8
0x19db000932fb  3a9b  488b55c8       REX.W movq rdx,[rbp-0x38]
0x19db000932ff  3a9f  e9d3e4ffff     jmp 0x19db000917d7  <+0x1f77>
0x19db00093304  3aa4  4d8bbd90000000 REX.W movq r15,[r13+0x90] (root (undefined_value))
0x19db0009330b  3aab  e9c0e5ffff     jmp 0x19db000918d0  <+0x2070>
0x19db00093310  3ab0  f74103feffff7f testl [rcx+0x3],0x7ffffffe
0x19db00093317  3ab7  0f85c4e6ffff   jnz 0x19db000919e1  <+0x2181>
0x19db0009331d  3abd  e998e6ffff     jmp 0x19db000919ba  <+0x215a>
0x19db00093322  3ac2  c5fb104103     vmovsd xmm0,[rcx+0x3]
0x19db00093327  3ac7  c5f92ec8       vucomisd xmm1,xmm0
0x19db0009332b  3acb  0f85b0e6ffff   jnz 0x19db000919e1  <+0x2181>
0x19db00093331  3ad1  e984e6ffff     jmp 0x19db000919ba  <+0x215a>
0x19db00093336  3ad6  83f900         cmpl rcx,0x0
0x19db00093339  3ad9  0f85a2e6ffff   jnz 0x19db000919e1  <+0x2181>
0x19db0009333f  3adf  e976e6ffff     jmp 0x19db000919ba  <+0x215a>
0x19db00093344  3ae4  e998e6ffff     jmp 0x19db000919e1  <+0x2181>
0x19db00093349  3ae9  f74003feffff7f testl [rax+0x3],0x7ffffffe
0x19db00093350  3af0  0f851ee8ffff   jnz 0x19db00091b74  <+0x2314>
0x19db00093356  3af6  e9e6e6ffff     jmp 0x19db00091a41  <+0x21e1>
0x19db0009335b  3afb  c5fb104003     vmovsd xmm0,[rax+0x3]
0x19db00093360  3b00  c5f92ec8       vucomisd xmm1,xmm0
0x19db00093364  3b04  0f850ae8ffff   jnz 0x19db00091b74  <+0x2314>
0x19db0009336a  3b0a  e9d2e6ffff     jmp 0x19db00091a41  <+0x21e1>
0x19db0009336f  3b0f  83f800         cmpl rax,0x0
0x19db00093372  3b12  0f85fce7ffff   jnz 0x19db00091b74  <+0x2314>
0x19db00093378  3b18  e9c4e6ffff     jmp 0x19db00091a41  <+0x21e1>
0x19db0009337d  3b1d  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db00093386  3b26  0f85d6e9ffff   jnz 0x19db00091d62  <+0x2502>
0x19db0009338c  3b2c  e998e8ffff     jmp 0x19db00091c29  <+0x23c9>
0x19db00093391  3b31  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db00093398  3b38  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db0009339c  3b3c  c5f92ec8       vucomisd xmm1,xmm0
0x19db000933a0  3b40  0f85bce9ffff   jnz 0x19db00091d62  <+0x2502>
0x19db000933a6  3b46  e97ee8ffff     jmp 0x19db00091c29  <+0x23c9>
0x19db000933ab  3b4b  4183fc00       cmpl r12,0x0
0x19db000933af  3b4f  0f85ade9ffff   jnz 0x19db00091d62  <+0x2502>
0x19db000933b5  3b55  e96fe8ffff     jmp 0x19db00091c29  <+0x23c9>
0x19db000933ba  3b5a  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db000933c3  3b63  0f8587ebffff   jnz 0x19db00091f50  <+0x26f0>
0x19db000933c9  3b69  e949eaffff     jmp 0x19db00091e17  <+0x25b7>
0x19db000933ce  3b6e  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db000933d5  3b75  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db000933d9  3b79  c5f92ec8       vucomisd xmm1,xmm0
0x19db000933dd  3b7d  0f856debffff   jnz 0x19db00091f50  <+0x26f0>
0x19db000933e3  3b83  e92feaffff     jmp 0x19db00091e17  <+0x25b7>
0x19db000933e8  3b88  4183fc00       cmpl r12,0x0
0x19db000933ec  3b8c  0f855eebffff   jnz 0x19db00091f50  <+0x26f0>
0x19db000933f2  3b92  e920eaffff     jmp 0x19db00091e17  <+0x25b7>
0x19db000933f7  3b97  4d8bbd90000000 REX.W movq r15,[r13+0x90] (root (undefined_value))
0x19db000933fe  3b9e  e98bebffff     jmp 0x19db00091f8e  <+0x272e>
0x19db00093403  3ba3  f74203feffff7f testl [rdx+0x3],0x7ffffffe
0x19db0009340a  3baa  0f85a7edffff   jnz 0x19db000921b7  <+0x2957>
0x19db00093410  3bb0  e96cecffff     jmp 0x19db00092081  <+0x2821>
0x19db00093415  3bb5  c5fb104203     vmovsd xmm0,[rdx+0x3]
0x19db0009341a  3bba  c5f92ec8       vucomisd xmm1,xmm0
0x19db0009341e  3bbe  0f8593edffff   jnz 0x19db000921b7  <+0x2957>
0x19db00093424  3bc4  e958ecffff     jmp 0x19db00092081  <+0x2821>
0x19db00093429  3bc9  83fa00         cmpl rdx,0x0
0x19db0009342c  3bcc  0f8585edffff   jnz 0x19db000921b7  <+0x2957>
0x19db00093432  3bd2  e94aecffff     jmp 0x19db00092081  <+0x2821>
0x19db00093437  3bd7  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db00093440  3be0  0f8565efffff   jnz 0x19db000923ab  <+0x2b4b>
0x19db00093446  3be6  e921eeffff     jmp 0x19db0009226c  <+0x2a0c>
0x19db0009344b  3beb  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db00093452  3bf2  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db00093456  3bf6  c5f92ec8       vucomisd xmm1,xmm0
0x19db0009345a  3bfa  0f854befffff   jnz 0x19db000923ab  <+0x2b4b>
0x19db00093460  3c00  e907eeffff     jmp 0x19db0009226c  <+0x2a0c>
0x19db00093465  3c05  4183fc00       cmpl r12,0x0
0x19db00093469  3c09  0f853cefffff   jnz 0x19db000923ab  <+0x2b4b>
0x19db0009346f  3c0f  e9f8edffff     jmp 0x19db0009226c  <+0x2a0c>
0x19db00093474  3c14  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db0009347d  3c1d  0f851bf1ffff   jnz 0x19db0009259e  <+0x2d3e>
0x19db00093483  3c23  e9d8efffff     jmp 0x19db00092460  <+0x2c00>
0x19db00093488  3c28  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db0009348f  3c2f  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db00093493  3c33  c5f92ec8       vucomisd xmm1,xmm0
0x19db00093497  3c37  0f8501f1ffff   jnz 0x19db0009259e  <+0x2d3e>
0x19db0009349d  3c3d  e9beefffff     jmp 0x19db00092460  <+0x2c00>
0x19db000934a2  3c42  4183fc00       cmpl r12,0x0
0x19db000934a6  3c46  0f85f2f0ffff   jnz 0x19db0009259e  <+0x2d3e>
0x19db000934ac  3c4c  e9afefffff     jmp 0x19db00092460  <+0x2c00>
0x19db000934b1  3c51  41f7442403feffff7f testl [r12+0x3],0x7ffffffe
0x19db000934ba  3c5a  0f85bdf1ffff   jnz 0x19db0009267d  <+0x2e1d>
0x19db000934c0  3c60  e991f1ffff     jmp 0x19db00092656  <+0x2df6>
0x19db000934c5  3c65  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db000934cc  3c6c  c5f157c9       vxorpd xmm1,xmm1,xmm1
0x19db000934d0  3c70  c5f92ec8       vucomisd xmm1,xmm0
0x19db000934d4  3c74  0f85a3f1ffff   jnz 0x19db0009267d  <+0x2e1d>
0x19db000934da  3c7a  e977f1ffff     jmp 0x19db00092656  <+0x2df6>
0x19db000934df  3c7f  4183fc00       cmpl r12,0x0
0x19db000934e3  3c83  0f8594f1ffff   jnz 0x19db0009267d  <+0x2e1d>
0x19db000934e9  3c89  e968f1ffff     jmp 0x19db00092656  <+0x2df6>
0x19db000934ee  3c8e  e98af1ffff     jmp 0x19db0009267d  <+0x2e1d>
0x19db000934f3  3c93  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db000934fa  3c9a  e9c1f1ffff     jmp 0x19db000926c0  <+0x2e60>
0x19db000934ff  3c9f  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db00093503  3ca3  ba10000000     movl rdx,0x10
0x19db00093508  3ca8  4c8b15c3f3ffff REX.W movq r10,[rip+0xfffff3c3]
0x19db0009350f  3caf  41ffd2         call r10
0x19db00093512  3cb2  4c8d78ff       REX.W leaq r15,[rax-0x1]
0x19db00093516  3cb6  4c8b25a2c3ffff REX.W movq r12,[rip+0xffffc3a2]
0x19db0009351d  3cbd  4c8b4dd8       REX.W movq r9,[rbp-0x28]
0x19db00093521  3cc1  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00093527  3cc7  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0009352b  3ccb  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00093531  3cd1  e9f6f1ffff     jmp 0x19db0009272c  <+0x2ecc>
0x19db00093536  3cd6  458bdb         movl r11,r11
0x19db00093539  3cd9  4d03dd         REX.W addq r11,r13
0x19db0009353c  3cdc  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db00093543  3ce3  4d23e3         REX.W andq r12,r11
0x19db00093546  3ce6  41f644240802   testb [r12+0x8],0x2
0x19db0009354c  3cec  0f848af2ffff   jz 0x19db000927dc  <+0x2f7c>
0x19db00093552  3cf2  4d8d70ff       REX.W leaq r14,[r8-0x1]
0x19db00093556  3cf6  50             push rax
0x19db00093557  3cf7  51             push rcx
0x19db00093558  3cf8  52             push rdx
0x19db00093559  3cf9  56             push rsi
0x19db0009355a  3cfa  57             push rdi
0x19db0009355b  3cfb  498bf6         REX.W movq rsi,r14
0x19db0009355e  3cfe  498bf8         REX.W movq rdi,r8
0x19db00093561  3d01  488b153dc5ffff REX.W movq rdx,[rip+0xffffc53d]
0x19db00093568  3d08  488bca         REX.W movq rcx,rdx
0x19db0009356b  3d0b  49bac065b8f5ff7f0000 REX.W movq r10,0x7ffff5b865c0  (RecordWrite)    ;; off heap target
0x19db00093575  3d15  41ffd2         call r10
0x19db00093578  3d18  5f             pop rdi
0x19db00093579  3d19  5e             pop rsi
0x19db0009357a  3d1a  5a             pop rdx
0x19db0009357b  3d1b  59             pop rcx
0x19db0009357c  3d1c  58             pop rax
0x19db0009357d  3d1d  e95af2ffff     jmp 0x19db000927dc  <+0x2f7c>
0x19db00093582  3d22  4589e4         movl r12,r12
0x19db00093585  3d25  4d03e5         REX.W addq r12,r13
0x19db00093588  3d28  49c7c60000fcff REX.W movq r14,0xfffc0000
0x19db0009358f  3d2f  4d21e6         REX.W andq r14,r12
0x19db00093592  3d32  41f6460802     testb [r14+0x8],0x2
0x19db00093597  3d37  0f84f3f1ffff   jz 0x19db00092790  <+0x2f30>
0x19db0009359d  3d3d  4d8d780f       REX.W leaq r15,[r8+0xf]
0x19db000935a1  3d41  50             push rax
0x19db000935a2  3d42  51             push rcx
0x19db000935a3  3d43  52             push rdx
0x19db000935a4  3d44  56             push rsi
0x19db000935a5  3d45  57             push rdi
0x19db000935a6  3d46  498bf7         REX.W movq rsi,r15
0x19db000935a9  3d49  498bf8         REX.W movq rdi,r8
0x19db000935ac  3d4c  33d2           xorl rdx,rdx
0x19db000935ae  3d4e  488b0df0c4ffff REX.W movq rcx,[rip+0xffffc4f0]
0x19db000935b5  3d55  4c8b15b1ffffff REX.W movq r10,[rip+0xffffffb1]
0x19db000935bc  3d5c  41ffd2         call r10
0x19db000935bf  3d5f  5f             pop rdi
0x19db000935c0  3d60  5e             pop rsi
0x19db000935c1  3d61  5a             pop rdx
0x19db000935c2  3d62  59             pop rcx
0x19db000935c3  3d63  58             pop rax
0x19db000935c4  3d64  e9c7f1ffff     jmp 0x19db00092790  <+0x2f30>
0x19db000935c9  3d69  40f6c601       testb rsi,0x1
0x19db000935cd  3d6d  0f841ce2ffff   jz 0x19db000917ef  <+0x1f8f>
0x19db000935d3  3d73  8bf6           movl rsi,rsi
0x19db000935d5  3d75  4903f5         REX.W addq rsi,r13
0x19db000935d8  3d78  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db000935df  3d7f  4c23c6         REX.W andq r8,rsi
0x19db000935e2  3d82  41f6400802     testb [r8+0x8],0x2
0x19db000935e7  3d87  0f8402e2ffff   jz 0x19db000917ef  <+0x1f8f>
0x19db000935ed  3d8d  4c8d4a17       REX.W leaq r9,[rdx+0x17]
0x19db000935f1  3d91  50             push rax
0x19db000935f2  3d92  51             push rcx
0x19db000935f3  3d93  52             push rdx
0x19db000935f4  3d94  56             push rsi
0x19db000935f5  3d95  57             push rdi
0x19db000935f6  3d96  498bf1         REX.W movq rsi,r9
0x19db000935f9  3d99  488bfa         REX.W movq rdi,rdx
0x19db000935fc  3d9c  33d2           xorl rdx,rdx
0x19db000935fe  3d9e  488b0da0c4ffff REX.W movq rcx,[rip+0xffffc4a0]
0x19db00093605  3da5  4c8b1561ffffff REX.W movq r10,[rip+0xffffff61]
0x19db0009360c  3dac  41ffd2         call r10
0x19db0009360f  3daf  5f             pop rdi
0x19db00093610  3db0  5e             pop rsi
0x19db00093611  3db1  5a             pop rdx
0x19db00093612  3db2  59             pop rcx
0x19db00093613  3db3  58             pop rax
0x19db00093614  3db4  e9d6e1ffff     jmp 0x19db000917ef  <+0x1f8f>
0x19db00093619  3db9  41f6c001       testb r8,0x1
0x19db0009361d  3dbd  0f846dd9ffff   jz 0x19db00090f90  <+0x1730>
0x19db00093623  3dc3  458bc0         movl r8,r8
0x19db00093626  3dc6  4d03c5         REX.W addq r8,r13
0x19db00093629  3dc9  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db00093630  3dd0  4d23c8         REX.W andq r9,r8
0x19db00093633  3dd3  41f6410802     testb [r9+0x8],0x2
0x19db00093638  3dd8  0f8452d9ffff   jz 0x19db00090f90  <+0x1730>
0x19db0009363e  3dde  4c8d5917       REX.W leaq r11,[rcx+0x17]
0x19db00093642  3de2  50             push rax
0x19db00093643  3de3  51             push rcx
0x19db00093644  3de4  52             push rdx
0x19db00093645  3de5  56             push rsi
0x19db00093646  3de6  57             push rdi
0x19db00093647  3de7  498bf3         REX.W movq rsi,r11
0x19db0009364a  3dea  488bf9         REX.W movq rdi,rcx
0x19db0009364d  3ded  33d2           xorl rdx,rdx
0x19db0009364f  3def  488b0d4fc4ffff REX.W movq rcx,[rip+0xffffc44f]
0x19db00093656  3df6  4c8b1510ffffff REX.W movq r10,[rip+0xffffff10]
0x19db0009365d  3dfd  41ffd2         call r10
0x19db00093660  3e00  5f             pop rdi
0x19db00093661  3e01  5e             pop rsi
0x19db00093662  3e02  5a             pop rdx
0x19db00093663  3e03  59             pop rcx
0x19db00093664  3e04  58             pop rax
0x19db00093665  3e05  e926d9ffff     jmp 0x19db00090f90  <+0x1730>
0x19db0009366a  3e0a  458bf6         movl r14,r14
0x19db0009366d  3e0d  4d03f5         REX.W addq r14,r13
0x19db00093670  3e10  48c7c00000fcff REX.W movq rax,0xfffc0000
0x19db00093677  3e17  4923c6         REX.W andq rax,r14
0x19db0009367a  3e1a  f6400802       testb [rax+0x8],0x2
0x19db0009367e  3e1e  0f8414c8ffff   jz 0x19db0008fe98  <+0x638>
0x19db00093684  3e24  4b8d1439       REX.W leaq rdx,[r9+r15*1]
0x19db00093688  3e28  50             push rax
0x19db00093689  3e29  51             push rcx
0x19db0009368a  3e2a  52             push rdx
0x19db0009368b  3e2b  56             push rsi
0x19db0009368c  3e2c  57             push rdi
0x19db0009368d  3e2d  488bf2         REX.W movq rsi,rdx
0x19db00093690  3e30  498bf9         REX.W movq rdi,r9
0x19db00093693  3e33  33d2           xorl rdx,rdx
0x19db00093695  3e35  488b0d09c4ffff REX.W movq rcx,[rip+0xffffc409]
0x19db0009369c  3e3c  4c8b15cafeffff REX.W movq r10,[rip+0xfffffeca]
0x19db000936a3  3e43  41ffd2         call r10
0x19db000936a6  3e46  5f             pop rdi
0x19db000936a7  3e47  5e             pop rsi
0x19db000936a8  3e48  5a             pop rdx
0x19db000936a9  3e49  59             pop rcx
0x19db000936aa  3e4a  58             pop rax
0x19db000936ab  3e4b  e9e8c7ffff     jmp 0x19db0008fe98  <+0x638>
0x19db000936b0  3e50  8bc9           movl rcx,rcx
0x19db000936b2  3e52  4903cd         REX.W addq rcx,r13
0x19db000936b5  3e55  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db000936bc  3e5c  4823d9         REX.W andq rbx,rcx
0x19db000936bf  3e5f  f6430802       testb [rbx+0x8],0x2
0x19db000936c3  3e63  0f84d7c2ffff   jz 0x19db0008f9a0  <+0x140>
0x19db000936c9  3e69  498d7fff       REX.W leaq rdi,[r15-0x1]
0x19db000936cd  3e6d  50             push rax
0x19db000936ce  3e6e  51             push rcx
0x19db000936cf  3e6f  52             push rdx
0x19db000936d0  3e70  56             push rsi
0x19db000936d1  3e71  57             push rdi
0x19db000936d2  3e72  488bf7         REX.W movq rsi,rdi
0x19db000936d5  3e75  498bff         REX.W movq rdi,r15
0x19db000936d8  3e78  488b15c6c3ffff REX.W movq rdx,[rip+0xffffc3c6]
0x19db000936df  3e7f  488bca         REX.W movq rcx,rdx
0x19db000936e2  3e82  4c8b1584feffff REX.W movq r10,[rip+0xfffffe84]
0x19db000936e9  3e89  41ffd2         call r10
0x19db000936ec  3e8c  5f             pop rdi
0x19db000936ed  3e8d  5e             pop rsi
0x19db000936ee  3e8e  5a             pop rdx
0x19db000936ef  3e8f  59             pop rcx
0x19db000936f0  3e90  58             pop rax
0x19db000936f1  3e91  e9aac2ffff     jmp 0x19db0008f9a0  <+0x140>
0x19db000936f6  3e96  90             nop
0x19db000936f7  3e97  41ff95f8360000 call [r13+0x36f8]
0x19db000936fe  3e9e  41ff95f8360000 call [r13+0x36f8]
0x19db00093705  3ea5  41ff95f8360000 call [r13+0x36f8]
0x19db0009370c  3eac  41ff95f8360000 call [r13+0x36f8]
0x19db00093713  3eb3  41ff95f8360000 call [r13+0x36f8]
0x19db0009371a  3eba  41ff95f8360000 call [r13+0x36f8]
0x19db00093721  3ec1  41ff95f8360000 call [r13+0x36f8]
0x19db00093728  3ec8  41ff95f8360000 call [r13+0x36f8]
0x19db0009372f  3ecf  41ff95f8360000 call [r13+0x36f8]
0x19db00093736  3ed6  41ff95f8360000 call [r13+0x36f8]
0x19db0009373d  3edd  41ff95f8360000 call [r13+0x36f8]
0x19db00093744  3ee4  41ff95f8360000 call [r13+0x36f8]
0x19db0009374b  3eeb  41ff95f8360000 call [r13+0x36f8]
0x19db00093752  3ef2  41ff95f8360000 call [r13+0x36f8]
0x19db00093759  3ef9  41ff95f8360000 call [r13+0x36f8]
0x19db00093760  3f00  41ff95f8360000 call [r13+0x36f8]
0x19db00093767  3f07  41ff95f8360000 call [r13+0x36f8]
0x19db0009376e  3f0e  41ff95f8360000 call [r13+0x36f8]
0x19db00093775  3f15  41ff95f8360000 call [r13+0x36f8]
0x19db0009377c  3f1c  41ff95f8360000 call [r13+0x36f8]
0x19db00093783  3f23  41ff95f8360000 call [r13+0x36f8]
0x19db0009378a  3f2a  41ff95f8360000 call [r13+0x36f8]
0x19db00093791  3f31  41ff95f8360000 call [r13+0x36f8]
0x19db00093798  3f38  41ff95f8360000 call [r13+0x36f8]
0x19db0009379f  3f3f  41ff95f8360000 call [r13+0x36f8]
0x19db000937a6  3f46  41ff95f8360000 call [r13+0x36f8]
0x19db000937ad  3f4d  41ff95f8360000 call [r13+0x36f8]
0x19db000937b4  3f54  41ff95f8360000 call [r13+0x36f8]
0x19db000937bb  3f5b  41ff95f8360000 call [r13+0x36f8]
0x19db000937c2  3f62  41ff95f8360000 call [r13+0x36f8]
0x19db000937c9  3f69  41ff95f8360000 call [r13+0x36f8]
0x19db000937d0  3f70  41ff95f8360000 call [r13+0x36f8]
0x19db000937d7  3f77  41ff95f8360000 call [r13+0x36f8]
0x19db000937de  3f7e  41ff95f8360000 call [r13+0x36f8]
0x19db000937e5  3f85  41ff95f8360000 call [r13+0x36f8]
0x19db000937ec  3f8c  41ff95f8360000 call [r13+0x36f8]
0x19db000937f3  3f93  41ff95f8360000 call [r13+0x36f8]
0x19db000937fa  3f9a  41ff95f8360000 call [r13+0x36f8]
0x19db00093801  3fa1  41ff95f8360000 call [r13+0x36f8]
0x19db00093808  3fa8  41ff95f8360000 call [r13+0x36f8]
0x19db0009380f  3faf  41ff95f8360000 call [r13+0x36f8]
0x19db00093816  3fb6  41ff95f8360000 call [r13+0x36f8]
0x19db0009381d  3fbd  41ff95f8360000 call [r13+0x36f8]
0x19db00093824  3fc4  41ff95f8360000 call [r13+0x36f8]
0x19db0009382b  3fcb  41ff95f8360000 call [r13+0x36f8]
0x19db00093832  3fd2  41ff95f8360000 call [r13+0x36f8]
0x19db00093839  3fd9  41ff95f8360000 call [r13+0x36f8]
0x19db00093840  3fe0  41ff95f8360000 call [r13+0x36f8]
0x19db00093847  3fe7  41ff95f8360000 call [r13+0x36f8]
0x19db0009384e  3fee  41ff95f8360000 call [r13+0x36f8]
0x19db00093855  3ff5  41ff95f8360000 call [r13+0x36f8]
0x19db0009385c  3ffc  41ff95f8360000 call [r13+0x36f8]
0x19db00093863  4003  41ff95f8360000 call [r13+0x36f8]
0x19db0009386a  400a  41ff95f8360000 call [r13+0x36f8]
0x19db00093871  4011  41ff95f8360000 call [r13+0x36f8]
0x19db00093878  4018  41ff95f8360000 call [r13+0x36f8]
0x19db0009387f  401f  41ff95f8360000 call [r13+0x36f8]
0x19db00093886  4026  41ff95f8360000 call [r13+0x36f8]
0x19db0009388d  402d  41ff95f8360000 call [r13+0x36f8]
0x19db00093894  4034  41ff95f8360000 call [r13+0x36f8]
0x19db0009389b  403b  41ff95f8360000 call [r13+0x36f8]
0x19db000938a2  4042  41ff95f8360000 call [r13+0x36f8]
0x19db000938a9  4049  41ff95f8360000 call [r13+0x36f8]
0x19db000938b0  4050  41ff95f8360000 call [r13+0x36f8]
0x19db000938b7  4057  41ff95f8360000 call [r13+0x36f8]
0x19db000938be  405e  41ff95f8360000 call [r13+0x36f8]
0x19db000938c5  4065  41ff95f8360000 call [r13+0x36f8]
0x19db000938cc  406c  41ff95f8360000 call [r13+0x36f8]
0x19db000938d3  4073  41ff95f8360000 call [r13+0x36f8]
0x19db000938da  407a  41ff95f8360000 call [r13+0x36f8]
0x19db000938e1  4081  41ff95f8360000 call [r13+0x36f8]
0x19db000938e8  4088  41ff95f8360000 call [r13+0x36f8]
0x19db000938ef  408f  41ff95f8360000 call [r13+0x36f8]
0x19db000938f6  4096  41ff95f8360000 call [r13+0x36f8]
0x19db000938fd  409d  41ff95f8360000 call [r13+0x36f8]
0x19db00093904  40a4  41ff95f8360000 call [r13+0x36f8]
0x19db0009390b  40ab  41ff95f8360000 call [r13+0x36f8]
0x19db00093912  40b2  41ff95f8360000 call [r13+0x36f8]
0x19db00093919  40b9  41ff95f8360000 call [r13+0x36f8]
0x19db00093920  40c0  41ff95f8360000 call [r13+0x36f8]
0x19db00093927  40c7  41ff95f8360000 call [r13+0x36f8]
0x19db0009392e  40ce  41ff95f8360000 call [r13+0x36f8]
0x19db00093935  40d5  41ff95f8360000 call [r13+0x36f8]
0x19db0009393c  40dc  41ff95f8360000 call [r13+0x36f8]
0x19db00093943  40e3  41ff95f8360000 call [r13+0x36f8]
0x19db0009394a  40ea  41ff95f8360000 call [r13+0x36f8]
0x19db00093951  40f1  41ff95f8360000 call [r13+0x36f8]
0x19db00093958  40f8  41ff95f8360000 call [r13+0x36f8]
0x19db0009395f  40ff  41ff95f8360000 call [r13+0x36f8]
0x19db00093966  4106  41ff95f8360000 call [r13+0x36f8]
0x19db0009396d  410d  41ff95f8360000 call [r13+0x36f8]
0x19db00093974  4114  41ff95f8360000 call [r13+0x36f8]
0x19db0009397b  411b  41ff95f8360000 call [r13+0x36f8]
0x19db00093982  4122  41ff95f8360000 call [r13+0x36f8]
0x19db00093989  4129  41ff95f8360000 call [r13+0x36f8]
0x19db00093990  4130  41ff95f8360000 call [r13+0x36f8]
0x19db00093997  4137  41ff95f8360000 call [r13+0x36f8]
0x19db0009399e  413e  41ff95f8360000 call [r13+0x36f8]
0x19db000939a5  4145  41ff95f8360000 call [r13+0x36f8]
0x19db000939ac  414c  41ff95f8360000 call [r13+0x36f8]
0x19db000939b3  4153  41ff95f8360000 call [r13+0x36f8]
0x19db000939ba  415a  41ff95f8360000 call [r13+0x36f8]
0x19db000939c1  4161  41ff95f8360000 call [r13+0x36f8]
0x19db000939c8  4168  41ff95f8360000 call [r13+0x36f8]
0x19db000939cf  416f  41ff95f8360000 call [r13+0x36f8]
0x19db000939d6  4176  41ff95f8360000 call [r13+0x36f8]
0x19db000939dd  417d  41ff95f8360000 call [r13+0x36f8]
0x19db000939e4  4184  41ff95f8360000 call [r13+0x36f8]
0x19db000939eb  418b  41ff95f8360000 call [r13+0x36f8]
0x19db000939f2  4192  41ff95f8360000 call [r13+0x36f8]
0x19db000939f9  4199  41ff95f8360000 call [r13+0x36f8]
0x19db00093a00  41a0  41ff95f8360000 call [r13+0x36f8]
0x19db00093a07  41a7  41ff95f8360000 call [r13+0x36f8]
0x19db00093a0e  41ae  41ff95f8360000 call [r13+0x36f8]
0x19db00093a15  41b5  41ff95f8360000 call [r13+0x36f8]
0x19db00093a1c  41bc  41ff95f8360000 call [r13+0x36f8]
0x19db00093a23  41c3  41ff95f8360000 call [r13+0x36f8]
0x19db00093a2a  41ca  41ff95f8360000 call [r13+0x36f8]
0x19db00093a31  41d1  41ff95f8360000 call [r13+0x36f8]
0x19db00093a38  41d8  41ff95f8360000 call [r13+0x36f8]
0x19db00093a3f  41df  41ff95f8360000 call [r13+0x36f8]
0x19db00093a46  41e6  41ff95f8360000 call [r13+0x36f8]
0x19db00093a4d  41ed  41ff95f8360000 call [r13+0x36f8]
0x19db00093a54  41f4  41ff95f8360000 call [r13+0x36f8]
0x19db00093a5b  41fb  41ff95f8360000 call [r13+0x36f8]
0x19db00093a62  4202  41ff95f8360000 call [r13+0x36f8]
0x19db00093a69  4209  41ff95f8360000 call [r13+0x36f8]
0x19db00093a70  4210  41ff95f8360000 call [r13+0x36f8]
0x19db00093a77  4217  41ff95f8360000 call [r13+0x36f8]
0x19db00093a7e  421e  41ff95f8360000 call [r13+0x36f8]
0x19db00093a85  4225  41ff95f8360000 call [r13+0x36f8]
0x19db00093a8c  422c  41ff95f8360000 call [r13+0x36f8]
0x19db00093a93  4233  41ff95f8360000 call [r13+0x36f8]
0x19db00093a9a  423a  41ff95f8360000 call [r13+0x36f8]
0x19db00093aa1  4241  41ff95f8360000 call [r13+0x36f8]
0x19db00093aa8  4248  41ff95f8360000 call [r13+0x36f8]
0x19db00093aaf  424f  41ff95f8360000 call [r13+0x36f8]
0x19db00093ab6  4256  41ff95f8360000 call [r13+0x36f8]
0x19db00093abd  425d  41ff95f8360000 call [r13+0x36f8]
0x19db00093ac4  4264  41ff95f8360000 call [r13+0x36f8]
0x19db00093acb  426b  41ff95f8360000 call [r13+0x36f8]
0x19db00093ad2  4272  41ff95f8360000 call [r13+0x36f8]
0x19db00093ad9  4279  41ff95f8360000 call [r13+0x36f8]
0x19db00093ae0  4280  41ff95f8360000 call [r13+0x36f8]
0x19db00093ae7  4287  41ff95f8360000 call [r13+0x36f8]
0x19db00093aee  428e  41ff95f8360000 call [r13+0x36f8]
0x19db00093af5  4295  41ff95f8360000 call [r13+0x36f8]
0x19db00093afc  429c  41ff95f8360000 call [r13+0x36f8]
0x19db00093b03  42a3  41ff95f8360000 call [r13+0x36f8]
0x19db00093b0a  42aa  41ff95f8360000 call [r13+0x36f8]
0x19db00093b11  42b1  41ff95f8360000 call [r13+0x36f8]
0x19db00093b18  42b8  41ff95f8360000 call [r13+0x36f8]
0x19db00093b1f  42bf  41ff95f8360000 call [r13+0x36f8]
0x19db00093b26  42c6  41ff95f8360000 call [r13+0x36f8]
0x19db00093b2d  42cd  41ff95f8360000 call [r13+0x36f8]
0x19db00093b34  42d4  41ff95f8360000 call [r13+0x36f8]
0x19db00093b3b  42db  41ff95f8360000 call [r13+0x36f8]
0x19db00093b42  42e2  41ff95f8360000 call [r13+0x36f8]
0x19db00093b49  42e9  41ff95f8360000 call [r13+0x36f8]
0x19db00093b50  42f0  41ff95f8360000 call [r13+0x36f8]
0x19db00093b57  42f7  41ff95f8360000 call [r13+0x36f8]
0x19db00093b5e  42fe  41ff95f8360000 call [r13+0x36f8]
0x19db00093b65  4305  41ff95f8360000 call [r13+0x36f8]
0x19db00093b6c  430c  41ff95f8360000 call [r13+0x36f8]
0x19db00093b73  4313  41ff95f8360000 call [r13+0x36f8]
0x19db00093b7a  431a  41ff95f8360000 call [r13+0x36f8]
0x19db00093b81  4321  41ff95f8360000 call [r13+0x36f8]
0x19db00093b88  4328  41ff95f8360000 call [r13+0x36f8]
0x19db00093b8f  432f  41ff95f8360000 call [r13+0x36f8]
0x19db00093b96  4336  41ff95f8360000 call [r13+0x36f8]
0x19db00093b9d  433d  41ff95f8360000 call [r13+0x36f8]
0x19db00093ba4  4344  41ff95f8360000 call [r13+0x36f8]
0x19db00093bab  434b  41ff95f8360000 call [r13+0x36f8]
0x19db00093bb2  4352  41ff95f8360000 call [r13+0x36f8]
0x19db00093bb9  4359  41ff95f8360000 call [r13+0x36f8]
0x19db00093bc0  4360  41ff95f8360000 call [r13+0x36f8]
0x19db00093bc7  4367  41ff95f8360000 call [r13+0x36f8]
0x19db00093bce  436e  41ff95f8360000 call [r13+0x36f8]
0x19db00093bd5  4375  41ff95f8360000 call [r13+0x36f8]
0x19db00093bdc  437c  41ff95f8360000 call [r13+0x36f8]
0x19db00093be3  4383  41ff95f8360000 call [r13+0x36f8]
0x19db00093bea  438a  41ff95f8360000 call [r13+0x36f8]
0x19db00093bf1  4391  41ff95f8360000 call [r13+0x36f8]
0x19db00093bf8  4398  41ff95f8360000 call [r13+0x36f8]
0x19db00093bff  439f  41ff95f8360000 call [r13+0x36f8]
0x19db00093c06  43a6  41ff95f8360000 call [r13+0x36f8]
0x19db00093c0d  43ad  41ff95f8360000 call [r13+0x36f8]
0x19db00093c14  43b4  41ff95f8360000 call [r13+0x36f8]
0x19db00093c1b  43bb  41ff95f8360000 call [r13+0x36f8]
0x19db00093c22  43c2  41ff95f8360000 call [r13+0x36f8]
0x19db00093c29  43c9  41ff95f8360000 call [r13+0x36f8]
0x19db00093c30  43d0  41ff95f8360000 call [r13+0x36f8]
0x19db00093c37  43d7  41ff95f8360000 call [r13+0x36f8]
0x19db00093c3e  43de  41ff95f8360000 call [r13+0x36f8]
0x19db00093c45  43e5  41ff95f8360000 call [r13+0x36f8]
0x19db00093c4c  43ec  41ff95f8360000 call [r13+0x36f8]
0x19db00093c53  43f3  41ff95f8360000 call [r13+0x36f8]
0x19db00093c5a  43fa  41ff95f8360000 call [r13+0x36f8]
0x19db00093c61  4401  41ff95f8360000 call [r13+0x36f8]
0x19db00093c68  4408  41ff95f8360000 call [r13+0x36f8]
0x19db00093c6f  440f  41ff95f8360000 call [r13+0x36f8]
0x19db00093c76  4416  41ff95f8360000 call [r13+0x36f8]
0x19db00093c7d  441d  41ff95f8360000 call [r13+0x36f8]
0x19db00093c84  4424  41ff95f8360000 call [r13+0x36f8]
0x19db00093c8b  442b  41ff95f8360000 call [r13+0x36f8]
0x19db00093c92  4432  41ff95f8360000 call [r13+0x36f8]
0x19db00093c99  4439  41ff95f8360000 call [r13+0x36f8]
0x19db00093ca0  4440  41ff95f8360000 call [r13+0x36f8]
0x19db00093ca7  4447  41ff95f8360000 call [r13+0x36f8]
0x19db00093cae  444e  41ff95f8360000 call [r13+0x36f8]
0x19db00093cb5  4455  41ff95f8360000 call [r13+0x36f8]
0x19db00093cbc  445c  41ff95f8360000 call [r13+0x36f8]
0x19db00093cc3  4463  41ff95f8360000 call [r13+0x36f8]
0x19db00093cca  446a  41ff95f8360000 call [r13+0x36f8]
0x19db00093cd1  4471  41ff95f8360000 call [r13+0x36f8]
0x19db00093cd8  4478  41ff95f8360000 call [r13+0x36f8]
0x19db00093cdf  447f  41ff95f8360000 call [r13+0x36f8]
0x19db00093ce6  4486  41ff95f8360000 call [r13+0x36f8]
0x19db00093ced  448d  41ff95f8360000 call [r13+0x36f8]
0x19db00093cf4  4494  41ff95f8360000 call [r13+0x36f8]
0x19db00093cfb  449b  41ff95f8360000 call [r13+0x36f8]
0x19db00093d02  44a2  41ff95f8360000 call [r13+0x36f8]
0x19db00093d09  44a9  41ff95f8360000 call [r13+0x36f8]
0x19db00093d10  44b0  41ff95f8360000 call [r13+0x36f8]
0x19db00093d17  44b7  41ff95f8360000 call [r13+0x36f8]
0x19db00093d1e  44be  41ff95f8360000 call [r13+0x36f8]
0x19db00093d25  44c5  41ff95f8360000 call [r13+0x36f8]
0x19db00093d2c  44cc  41ff95f8360000 call [r13+0x36f8]
0x19db00093d33  44d3  41ff95f8360000 call [r13+0x36f8]
0x19db00093d3a  44da  41ff95f8360000 call [r13+0x36f8]
0x19db00093d41  44e1  41ff95f8360000 call [r13+0x36f8]
0x19db00093d48  44e8  41ff95f8360000 call [r13+0x36f8]
0x19db00093d4f  44ef  41ff95f8360000 call [r13+0x36f8]
0x19db00093d56  44f6  41ff95f8360000 call [r13+0x36f8]
0x19db00093d5d  44fd  41ff95f8360000 call [r13+0x36f8]
0x19db00093d64  4504  41ff95f8360000 call [r13+0x36f8]
0x19db00093d6b  450b  41ff95f8360000 call [r13+0x36f8]
0x19db00093d72  4512  41ff95f8360000 call [r13+0x36f8]
0x19db00093d79  4519  41ff95f8360000 call [r13+0x36f8]
0x19db00093d80  4520  41ff95f8360000 call [r13+0x36f8]
0x19db00093d87  4527  41ff95f8360000 call [r13+0x36f8]
0x19db00093d8e  452e  41ff95f8360000 call [r13+0x36f8]
0x19db00093d95  4535  41ff95f8360000 call [r13+0x36f8]
0x19db00093d9c  453c  41ff95f8360000 call [r13+0x36f8]
0x19db00093da3  4543  41ff95f8360000 call [r13+0x36f8]
0x19db00093daa  454a  41ff95f8360000 call [r13+0x36f8]
0x19db00093db1  4551  41ff95f8360000 call [r13+0x36f8]
0x19db00093db8  4558  41ff95f8360000 call [r13+0x36f8]
0x19db00093dbf  455f  41ff95f8360000 call [r13+0x36f8]
0x19db00093dc6  4566  41ff95f8360000 call [r13+0x36f8]
0x19db00093dcd  456d  41ff95f8360000 call [r13+0x36f8]
0x19db00093dd4  4574  41ff95f8360000 call [r13+0x36f8]
0x19db00093ddb  457b  41ff95f8360000 call [r13+0x36f8]
0x19db00093de2  4582  41ff95f8360000 call [r13+0x36f8]
0x19db00093de9  4589  41ff95f8360000 call [r13+0x36f8]
0x19db00093df0  4590  41ff95f8360000 call [r13+0x36f8]
0x19db00093df7  4597  41ff95f8360000 call [r13+0x36f8]
0x19db00093dfe  459e  41ff95f8360000 call [r13+0x36f8]
0x19db00093e05  45a5  41ff95f8360000 call [r13+0x36f8]
0x19db00093e0c  45ac  41ff95f8360000 call [r13+0x36f8]
0x19db00093e13  45b3  41ff95f8360000 call [r13+0x36f8]
0x19db00093e1a  45ba  41ff95f8360000 call [r13+0x36f8]
0x19db00093e21  45c1  41ff95f8360000 call [r13+0x36f8]
0x19db00093e28  45c8  41ff95f8360000 call [r13+0x36f8]
0x19db00093e2f  45cf  41ff95f8360000 call [r13+0x36f8]
0x19db00093e36  45d6  41ff95f8360000 call [r13+0x36f8]
0x19db00093e3d  45dd  41ff95f8360000 call [r13+0x36f8]
0x19db00093e44  45e4  41ff95f8360000 call [r13+0x36f8]
0x19db00093e4b  45eb  41ff95f8360000 call [r13+0x36f8]
0x19db00093e52  45f2  41ff95f8360000 call [r13+0x36f8]
0x19db00093e59  45f9  41ff95f8360000 call [r13+0x36f8]
0x19db00093e60  4600  41ff95f8360000 call [r13+0x36f8]
0x19db00093e67  4607  41ff95f8360000 call [r13+0x36f8]
0x19db00093e6e  460e  41ff95f8360000 call [r13+0x36f8]
0x19db00093e75  4615  41ff95f8360000 call [r13+0x36f8]
0x19db00093e7c  461c  41ff95f8360000 call [r13+0x36f8]
0x19db00093e83  4623  41ff95f8360000 call [r13+0x36f8]
0x19db00093e8a  462a  41ff95f8360000 call [r13+0x36f8]
0x19db00093e91  4631  41ff95f8360000 call [r13+0x36f8]
0x19db00093e98  4638  41ff95f8360000 call [r13+0x36f8]
0x19db00093e9f  463f  41ff95f8360000 call [r13+0x36f8]
0x19db00093ea6  4646  41ff95f8360000 call [r13+0x36f8]
0x19db00093ead  464d  41ff95f8360000 call [r13+0x36f8]
0x19db00093eb4  4654  41ff95f8360000 call [r13+0x36f8]
0x19db00093ebb  465b  41ff95f8360000 call [r13+0x36f8]
0x19db00093ec2  4662  41ff95f8360000 call [r13+0x36f8]
0x19db00093ec9  4669  41ff95f8360000 call [r13+0x36f8]
0x19db00093ed0  4670  41ff95f8360000 call [r13+0x36f8]
0x19db00093ed7  4677  41ff95f8360000 call [r13+0x36f8]
0x19db00093ede  467e  41ff95f8360000 call [r13+0x36f8]
0x19db00093ee5  4685  41ff95f8360000 call [r13+0x36f8]
0x19db00093eec  468c  41ff95f8360000 call [r13+0x36f8]
0x19db00093ef3  4693  41ff95f8360000 call [r13+0x36f8]
0x19db00093efa  469a  41ff95f8360000 call [r13+0x36f8]
0x19db00093f01  46a1  41ff95f8360000 call [r13+0x36f8]
0x19db00093f08  46a8  41ff95f8360000 call [r13+0x36f8]
0x19db00093f0f  46af  41ff95f8360000 call [r13+0x36f8]
0x19db00093f16  46b6  41ff95f8360000 call [r13+0x36f8]
0x19db00093f1d  46bd  41ff95f8360000 call [r13+0x36f8]
0x19db00093f24  46c4  41ff95f8360000 call [r13+0x36f8]
0x19db00093f2b  46cb  41ff95f8360000 call [r13+0x36f8]
0x19db00093f32  46d2  41ff95f8360000 call [r13+0x36f8]
0x19db00093f39  46d9  41ff95f8360000 call [r13+0x36f8]
0x19db00093f40  46e0  41ff95f8360000 call [r13+0x36f8]
0x19db00093f47  46e7  41ff95f8360000 call [r13+0x36f8]
0x19db00093f4e  46ee  41ff95f8360000 call [r13+0x36f8]
0x19db00093f55  46f5  41ff95f8360000 call [r13+0x36f8]
0x19db00093f5c  46fc  41ff95f8360000 call [r13+0x36f8]
0x19db00093f63  4703  41ff95f8360000 call [r13+0x36f8]
0x19db00093f6a  470a  41ff95f8360000 call [r13+0x36f8]
0x19db00093f71  4711  41ff95f8360000 call [r13+0x36f8]
0x19db00093f78  4718  41ff95f8360000 call [r13+0x36f8]
0x19db00093f7f  471f  41ff95f8360000 call [r13+0x36f8]
0x19db00093f86  4726  41ff95f8360000 call [r13+0x36f8]
0x19db00093f8d  472d  41ff95f8360000 call [r13+0x36f8]
0x19db00093f94  4734  41ff95f8360000 call [r13+0x36f8]
0x19db00093f9b  473b  41ff95f8360000 call [r13+0x36f8]
0x19db00093fa2  4742  41ff95f8360000 call [r13+0x36f8]
0x19db00093fa9  4749  41ff95f8360000 call [r13+0x36f8]
0x19db00093fb0  4750  41ff95f8360000 call [r13+0x36f8]
0x19db00093fb7  4757  41ff95f8360000 call [r13+0x36f8]
0x19db00093fbe  475e  41ff95f8360000 call [r13+0x36f8]
0x19db00093fc5  4765  41ff95f8360000 call [r13+0x36f8]
0x19db00093fcc  476c  41ff95f8360000 call [r13+0x36f8]
0x19db00093fd3  4773  41ff95f8360000 call [r13+0x36f8]
0x19db00093fda  477a  41ff95f8360000 call [r13+0x36f8]
0x19db00093fe1  4781  41ff95f8360000 call [r13+0x36f8]
0x19db00093fe8  4788  41ff95f8360000 call [r13+0x36f8]
0x19db00093fef  478f  41ff95f8360000 call [r13+0x36f8]
0x19db00093ff6  4796  41ff95f8360000 call [r13+0x36f8]
0x19db00093ffd  479d  41ff95f8360000 call [r13+0x36f8]
0x19db00094004  47a4  41ff95f8360000 call [r13+0x36f8]
0x19db0009400b  47ab  41ff95f8360000 call [r13+0x36f8]
0x19db00094012  47b2  41ff95f8360000 call [r13+0x36f8]
0x19db00094019  47b9  41ff95f8360000 call [r13+0x36f8]
0x19db00094020  47c0  41ff95f8360000 call [r13+0x36f8]
0x19db00094027  47c7  41ff95f8360000 call [r13+0x36f8]
0x19db0009402e  47ce  41ff95f8360000 call [r13+0x36f8]
0x19db00094035  47d5  41ff9500370000 call [r13+0x3700]
0x19db0009403c  47dc  41ff9500370000 call [r13+0x3700]
0x19db00094043  47e3  41ff9500370000 call [r13+0x3700]
0x19db0009404a  47ea  41ff9500370000 call [r13+0x3700]
0x19db00094051  47f1  41ff9510370000 call [r13+0x3710]
0x19db00094058  47f8  41ff9510370000 call [r13+0x3710]
0x19db0009405f  47ff  41ff9510370000 call [r13+0x3710]
0x19db00094066  4806  41ff9510370000 call [r13+0x3710]
0x19db0009406d  480d  41ff9510370000 call [r13+0x3710]
0x19db00094074  4814  41ff9510370000 call [r13+0x3710]
0x19db0009407b  481b  41ff9510370000 call [r13+0x3710]
0x19db00094082  4822  41ff9510370000 call [r13+0x3710]
0x19db00094089  4829  41ff9510370000 call [r13+0x3710]
0x19db00094090  4830  41ff9510370000 call [r13+0x3710]
0x19db00094097  4837  41ff9510370000 call [r13+0x3710]
0x19db0009409e  483e  41ff9510370000 call [r13+0x3710]
0x19db000940a5  4845  41ff9510370000 call [r13+0x3710]
0x19db000940ac  484c  41ff9510370000 call [r13+0x3710]
0x19db000940b3  4853  41ff9510370000 call [r13+0x3710]
0x19db000940ba  485a  41ff9510370000 call [r13+0x3710]
0x19db000940c1  4861  41ff9510370000 call [r13+0x3710]
0x19db000940c8  4868  41ff9510370000 call [r13+0x3710]
0x19db000940cf  486f  41ff9510370000 call [r13+0x3710]
0x19db000940d6  4876  41ff9510370000 call [r13+0x3710]
0x19db000940dd  487d  41ff9510370000 call [r13+0x3710]
0x19db000940e4  4884  41ff9510370000 call [r13+0x3710]
0x19db000940eb  488b  41ff9510370000 call [r13+0x3710]
0x19db000940f2  4892  41ff9510370000 call [r13+0x3710]
0x19db000940f9  4899  41ff9510370000 call [r13+0x3710]
0x19db00094100  48a0  41ff9510370000 call [r13+0x3710]
0x19db00094107  48a7  41ff9510370000 call [r13+0x3710]
0x19db0009410e  48ae  41ff9510370000 call [r13+0x3710]
0x19db00094115  48b5  0f1f00         nop

Source positions:
 pc offset  position
       863      4412
      1297       647
      1905      4412
      1af4       647
      2258      4412
      30fa      3001
      3365      4412
      3570       647
      3841       647

Inlined functions (count = 2)
 0x19db082f3e95 <SharedFunctionInfo VMulti2>
 0x19db082f3d45 <SharedFunctionInfo DrawLine>

Deoptimization Input Data (deopt points = 370)
 index  bytecode-offset    pc
     0               21    NA 
     1               21    NA 
     2               27    NA 
     3               27    NA 
     4               27    NA 
     5               27    NA 
     6               27    NA 
     7               27    NA 
     8               17    NA 
     9               17    NA 
    10               17    NA 
    11               17    NA 
    12               17    NA 
    13               17    NA 
    14               17    NA 
    15               17    NA 
    16               17    NA 
    17               17    NA 
    18               17    NA 
    19               17    NA 
    20               17    NA 
    21               17    NA 
    22               17    NA 
    23               17    NA 
    24               17    NA 
    25               17    NA 
    26               17    NA 
    27               17    NA 
    28               17    NA 
    29               17    NA 
    30               17    NA 
    31               62    NA 
    32               62    NA 
    33               27    NA 
    34               27    NA 
    35               27    NA 
    36               27    NA 
    37               27    NA 
    38               27    NA 
    39               27    NA 
    40               27    NA 
    41               27    NA 
    42               27    NA 
    43               27    NA 
    44               27    NA 
    45               27    NA 
    46               27    NA 
    47               27    NA 
    48               27    NA 
    49               27    NA 
    50               62    NA 
    51              430    NA 
    52              430    NA 
    53              430    NA 
    54              430    NA 
    55              430    NA 
    56              449    NA 
    57              449    NA 
    58              449    NA 
    59              449    NA 
    60              449    NA 
    61              449    NA 
    62              449    NA 
    63              449    NA 
    64              449    NA 
    65              449    NA 
    66               17    NA 
    67              497    NA 
    68              497    NA 
    69              497    NA 
    70              497    NA 
    71              497    NA 
    72              497    NA 
    73              516    NA 
    74              516    NA 
    75              516    NA 
    76              516    NA 
    77              516    NA 
    78              516    NA 
    79              516    NA 
    80              516    NA 
    81              516    NA 
    82              516    NA 
    83             1506    NA 
    84              564    NA 
    85              564    NA 
    86              564    NA 
    87              564    NA 
    88              564    NA 
    89              564    NA 
    90              583    NA 
    91              583    NA 
    92              583    NA 
    93              583    NA 
    94              583    NA 
    95              583    NA 
    96              583    NA 
    97              583    NA 
    98              583    NA 
    99              583    NA 
   100             1506    NA 
   101              631    NA 
   102              631    NA 
   103              631    NA 
   104              631    NA 
   105              631    NA 
   106              631    NA 
   107              648    NA 
   108              648    NA 
   109              648    NA 
   110              648    NA 
   111              648    NA 
   112              648    NA 
   113              648    NA 
   114              648    NA 
   115              648    NA 
   116              648    NA 
   117              648    NA 
   118              648    NA 
   119              648    NA 
   120              648    NA 
   121              648    NA 
   122             1874    NA 
   123              718    NA 
   124              718    NA 
   125              718    NA 
   126              718    NA 
   127              718    NA 
   128              737    NA 
   129              737    NA 
   130              737    NA 
   131              737    NA 
   132              737    NA 
   133              737    NA 
   134              737    NA 
   135              737    NA 
   136              737    NA 
   137              737    NA 
   138             1874    NA 
   139                7    NA 
   140                7    NA 
   141                7    NA 
   142             1861    NA 
   143               19    NA 
   144               19    NA 
   145               19    NA 
   146             1861    NA 
   147               32    NA 
   148               32    NA 
   149               32    NA 
   150             1506    NA 
   151               45    NA 
   152               45    NA 
   153               45    NA 
   154               45    NA 
   155               45    NA 
   156               45    NA 
   157               45    NA 
   158               45    NA 
   159               45    NA 
   160               45    NA 
   161               45    NA 
   162              260    NA 
   163              785    NA 
   164              785    NA 
   165              785    NA 
   166              785    NA 
   167              785    NA 
   168              785    NA 
   169              804    NA 
   170              804    NA 
   171              804    NA 
   172              804    NA 
   173              804    NA 
   174              804    NA 
   175              804    NA 
   176              804    NA 
   177              804    NA 
   178              804    NA 
   179             1506    NA 
   180              852    NA 
   181              852    NA 
   182              852    NA 
   183              852    NA 
   184              852    NA 
   185              852    NA 
   186              871    NA 
   187              871    NA 
   188              871    NA 
   189              871    NA 
   190              871    NA 
   191              871    NA 
   192              871    NA 
   193              871    NA 
   194              871    NA 
   195              871    NA 
   196             1506    NA 
   197                7    NA 
   198                7    NA 
   199                7    NA 
   200             1506    NA 
   201               19    NA 
   202               19    NA 
   203               19    NA 
   204             1506    NA 
   205               32    NA 
   206               32    NA 
   207               32    NA 
   208             1441    NA 
   209               45    NA 
   210               45    NA 
   211               45    NA 
   212               45    NA 
   213               45    NA 
   214               45    NA 
   215               45    NA 
   216               45    NA 
   217               45    NA 
   218               45    NA 
   219               45    NA 
   220              260    NA 
   221              919    NA 
   222              919    NA 
   223              919    NA 
   224              919    NA 
   225              919    NA 
   226              919    NA 
   227              936    NA 
   228              936    NA 
   229              936    NA 
   230              936    NA 
   231              936    NA 
   232              936    NA 
   233              936    NA 
   234              936    NA 
   235              936    NA 
   236              936    NA 
   237             1441    NA 
   238              936    NA 
   239              936    NA 
   240              936    NA 
   241              936    NA 
   242              936    NA 
   243              936    NA 
   244             1441    NA 
   245             1073    NA 
   246             1073    NA 
   247             1073    NA 
   248             1073    NA 
   249             1073    NA 
   250             1073    NA 
   251             1092    NA 
   252             1092    NA 
   253             1092    NA 
   254             1092    NA 
   255             1092    NA 
   256             1092    NA 
   257             1092    NA 
   258             1092    NA 
   259             1092    NA 
   260             1092    NA 
   261             1441    NA 
   262             1138    NA 
   263             1138    NA 
   264             1138    NA 
   265             1138    NA 
   266             1138    NA 
   267             1138    NA 
   268             1156    NA 
   269             1156    NA 
   270             1156    NA 
   271             1156    NA 
   272             1156    NA 
   273             1156    NA 
   274             1156    NA 
   275             1156    NA 
   276             1156    NA 
   277             1156    NA 
   278             1441    NA 
   279             1203    NA 
   280             1203    NA 
   281             1203    NA 
   282             1203    NA 
   283             1203    NA 
   284             1203    NA 
   285             1220    NA 
   286             1220    NA 
   287             1220    NA 
   288             1220    NA 
   289             1220    NA 
   290             1220    NA 
   291             1220    NA 
   292             1220    NA 
   293             1220    NA 
   294             1220    NA 
   295             1220    NA 
   296             1220    NA 
   297             1220    NA 
   298             1220    NA 
   299             1220    NA 
   300             1422    NA 
   301             1289    NA 
   302             1289    NA 
   303             1289    NA 
   304             1289    NA 
   305             1289    NA 
   306             1289    NA 
   307             1308    NA 
   308             1308    NA 
   309             1308    NA 
   310             1308    NA 
   311             1308    NA 
   312             1308    NA 
   313             1308    NA 
   314             1308    NA 
   315             1308    NA 
   316             1308    NA 
   317             1422    NA 
   318             1355    NA 
   319             1355    NA 
   320             1355    NA 
   321             1355    NA 
   322             1355    NA 
   323             1355    NA 
   324             1374    NA 
   325             1374    NA 
   326             1374    NA 
   327             1374    NA 
   328             1374    NA 
   329             1374    NA 
   330             1374    NA 
   331             1374    NA 
   332             1374    NA 
   333             1374    NA 
   334             1422    NA 
   335             1422    NA 
   336             1422    NA 
   337             1422    NA 
   338              981    NA 
   339             1464    NA 
   340             1536    NA 
   341              105    NA 
   342              421   891 
   343              488   a88 
   344              555   c87 
   345              622   e75 
   346              709  10d4 
   347                0  12d0 
   348               12  133c 
   349               24  13a2 
   350               37  140b 
   351              843  1927 
   352                0  1b2a 
   353               12  1b96 
   354               24  1bfc 
   355               37  1c65 
   356             1064  2271 
   357             1129  245f 
   358             1194  264d 
   359             1280  28b4 
   360             1346  2aa8 
   361             1413  2c96 
   362               -1  3066 
   363              106  312c 
   364              106  3270 
   365               72  3389 
   366              338  35ef 
   367              338  36d6 
   368              338  38c3 
   369              338  39ad 

Safepoints (size = 616)
0x19db000900f1     891  47f1  000000000000000000011100000 (sp -> fp)     342
0x19db000902e8     a88  47f8  000000000000000000011100000 (sp -> fp)     343
0x19db000904e7     c87  47ff  000000000000000000011100000 (sp -> fp)     344
0x19db000906d5     e75  4806  000000000000000000011100000 (sp -> fp)     345
0x19db00090934    10d4  480d  000000000000000000011100000 (sp -> fp)     346
0x19db00090b30    12d0  4814  000000000000111100011100000 (sp -> fp)     347
0x19db00090b9c    133c  481b  000000000000111100011100000 (sp -> fp)     348
0x19db00090c02    13a2  4822  000000000000111100011100000 (sp -> fp)     349
0x19db00090c6b    140b  4829  000000000000111100011100000 (sp -> fp)     350
0x19db00091187    1927  4830  000000000000000000011100000 (sp -> fp)     351
0x19db0009138a    1b2a  4837  000000000000111100011100000 (sp -> fp)     352
0x19db000913f6    1b96  483e  000000000000111100011100000 (sp -> fp)     353
0x19db0009145c    1bfc  4845  000000000000111100011100000 (sp -> fp)     354
0x19db000914c5    1c65  484c  000000000000111100011100000 (sp -> fp)     355
0x19db00091ad1    2271  4853  000000000000000000011100000 (sp -> fp)     356
0x19db00091cbf    245f  485a  000000000000000000011100000 (sp -> fp)     357
0x19db00091ead    264d  4861  000000000000000000011100000 (sp -> fp)     358
0x19db00092114    28b4  4868  000000000000000000011100000 (sp -> fp)     359
0x19db00092308    2aa8  486f  000000000000000000011100000 (sp -> fp)     360
0x19db000924f6    2c96  4876  000000000000000000011100000 (sp -> fp)     361
0x19db000928c6    3066  487d  000000000000000000001100000 (sp -> fp)     362
0x19db000928dd    307d    NA  000000000000000000001100000 (sp -> fp)  <none>
0x19db0009291e    30be    NA  000000000001111000111100000 (sp -> fp)  <none>
0x19db0009298c    312c  4884  000000000001111100111100000 (sp -> fp)     363
0x19db00092a35    31d5    NA  000000000001111100111100000 (sp -> fp)  <none>
0x19db00092ad0    3270  488b  000000000001111100111100000 (sp -> fp)     364
0x19db00092b41    32e1    NA  000000000000000100111100000 (sp -> fp)  <none>
0x19db00092b94    3334    NA  000000000000000100111100000 (sp -> fp)  <none>
0x19db00092be9    3389  4892  000000000000000000111100000 (sp -> fp)     365
0x19db00092c6a    340a    NA  000000000000000000011100000 (sp -> fp)  <none>
0x19db00092d80    3520    NA  000000000000000000011100000 (sp -> fp)  <none>
0x19db00092e4f    35ef  4899  000000000000111100111100000 (sp -> fp)     366
0x19db00092f36    36d6  48a0  000000000000111100111100000 (sp -> fp)     367
0x19db00092ff2    3792    NA  000000000000000000111100000 (sp -> fp)  <none>
0x19db00093123    38c3  48a7  000000000000111100111100000 (sp -> fp)     368
0x19db0009320d    39ad  48ae  000000000000111100111100000 (sp -> fp)     369
0x19db000932cc    3a6c    NA  000000000000000000111100000 (sp -> fp)  <none>
0x19db00093512    3cb2    NA  000000000000000000011100000 (sp -> fp)  <none>

RelocInfo (size = 367)
0x19db0008f878  off heap target
0x19db0008f892  off heap target
0x19db0008f8bf  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db0008f8d0  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db0008f923  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008f964  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0008f973  compressed embedded object  (0x19db0830dc45 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008f9c0  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0008f9ed  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0008fa7f  full embedded object  (0x19db082f42e9 <FeedbackCell[many closures]>)
0x19db0008fd9f  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008fecf  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db0008ffa7  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db000900a6  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db000900ca  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000900dd  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db000900e6  off heap target
0x19db00090108  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009012f  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000901a5  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db000901bf  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db000902ac  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db000902cb  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000902ff  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00090328  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000904ab  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db000904ca  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000904d9  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db000904fe  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00090527  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009069f  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db000906be  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000906ec  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00090715  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009077e  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db000907c1  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db000908fb  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db0009091a  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009094b  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00090972  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000909da  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db000909e0  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db00090ae0  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db00090b07  full embedded object  (0x19db082f6a0d <FeedbackVector[45]>)
0x19db00090b18  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db00090b25  off heap target
0x19db00090b3a  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00090b79  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db00090b83  full embedded object  (0x19db082f6a0d <FeedbackVector[45]>)
0x19db00090ba6  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00090be0  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db00090bec  full embedded object  (0x19db082f6a0d <FeedbackVector[45]>)
0x19db00090c0c  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00090c46  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db00090c55  full embedded object  (0x19db082f6a0d <FeedbackVector[45]>)
0x19db00090c9c  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00090d69  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db00090d72  compressed embedded object  (0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)> compressed)
0x19db00090dba  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00090e13  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00090e50  compressed embedded object  (0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)> compressed)
0x19db00090fa7  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00090fd0  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00091148  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db00091167  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00091179  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0009119e  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db000911c7  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009133b  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db00091366  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db00091370  full embedded object  (0x19db082f6a0d <FeedbackVector[45]>)
0x19db00091394  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db000913d3  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db000913dd  full embedded object  (0x19db082f6a0d <FeedbackVector[45]>)
0x19db00091400  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0009143a  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db00091446  full embedded object  (0x19db082f6a0d <FeedbackVector[45]>)
0x19db00091466  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db000914a0  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db000914af  full embedded object  (0x19db082f6a0d <FeedbackVector[45]>)
0x19db000914f6  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db000915c0  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db000915c9  compressed embedded object  (0x19db082e6939 <JSFunction abs (sfi = 0x19db0824af09)> compressed)
0x19db00091614  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009166c  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db000916a9  compressed embedded object  (0x19db082e6859 <JSFunction round (sfi = 0x19db0824ad69)> compressed)
0x19db00091806  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009182f  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00091898  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db000918db  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00091a9b  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db00091aba  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00091ae8  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00091b11  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00091c89  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db00091ca8  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00091cd6  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00091cff  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00091e77  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db00091e96  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00091ec4  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00091eed  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00091f56  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db00091f99  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db000920db  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db000920fa  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009212b  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00092154  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000922cc  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db000922eb  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000922fa  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0009231f  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00092348  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000924c0  full embedded object  (0x19db082f42a1 <FeedbackCell[many closures]>)
0x19db000924df  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009250d  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00092536  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00092683  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db000926cc  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db0009274a  compressed embedded object  (0x19db082f5d71 <FixedArray[12]> compressed)
0x19db000927ad  compressed embedded object  (0x19db0830dc45 <Map(PACKED_ELEMENTS)> compressed)
0x19db000928a4  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db000928ae  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000928bb  off heap target
0x19db000928d2  off heap target
0x19db0009292d  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00092940  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00092968  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00092975  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db0009299b  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00092a2a  off heap target
0x19db00092a53  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00092ab2  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00092adf  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00092b36  off heap target
0x19db00092b5f  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00092b65  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db00092b89  off heap target
0x19db00092baa  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00092bb0  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db00092bcb  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00092bfc  compressed embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)> compressed)
0x19db00092c02  compressed embedded object  (0x19db08309fcd <Map(HOLEY_ELEMENTS)> compressed)
0x19db00092c73  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00092c79  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00092d89  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00092d8f  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00092e31  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00092f18  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00093111  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000931fb  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00093523  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009352d  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009356d  off heap target

--- End code ---
--- Raw source ---
() {
      if (Testing.LoopCount > Testing.LoopMax) return;
      var TestingStr = String(Testing.LoopCount);
      while (TestingStr.length < 3) TestingStr = "0" + TestingStr;
      MTrans = Translate(I, -Q[8].V[0], -Q[8].V[1], -Q[8].V[2]);
      MTrans = RotateX(MTrans, 1);
      MTrans = RotateY(MTrans, 3);
      MTrans = RotateZ(MTrans, 5);
      MTrans = Translate(MTrans, Q[8].V[0], Q[8].V[1], Q[8].V[2]);
      MQube = MMulti(MTrans, MQube);
      var i = 8;
      for (; i > -1; i--) {
        Q[i].V = VMulti(MTrans, Q[i].V);
      }
      DrawQube();
      Testing.LoopCount++;
      Loop();
    }


--- Optimized code ---
optimization_id = 15
source_position = 6593
kind = TURBOFAN
name = Loop
stack_slots = 25
compiler = turbofan
address = 0x19db00094381

Instructions (size = 15092)
0x19db000943c0     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db000943c7     7  483bd9         REX.W cmpq rbx,rcx
0x19db000943ca     a  7418           jz 0x19db000943e4  <+0x24>
0x19db000943cc     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db000943d6    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db000943e0    20  41ffd2         call r10
0x19db000943e3    23  cc             int3l
0x19db000943e4    24  8b59d0         movl rbx,[rcx-0x30]
0x19db000943e7    27  4903dd         REX.W addq rbx,r13
0x19db000943ea    2a  f6430701       testb [rbx+0x7],0x1
0x19db000943ee    2e  740d           jz 0x19db000943fd  <+0x3d>
0x19db000943f0    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db000943fa    3a  41ffe2         jmp r10
0x19db000943fd    3d  55             push rbp
0x19db000943fe    3e  4889e5         REX.W movq rbp,rsp
0x19db00094401    41  56             push rsi
0x19db00094402    42  57             push rdi
0x19db00094403    43  50             push rax
0x19db00094404    44  4881eca0000000 REX.W subq rsp,0xa0
0x19db0009440b    4b  488975d8       REX.W movq [rbp-0x28],rsi
0x19db0009440f    4f  48897de0       REX.W movq [rbp-0x20],rdi
0x19db00094413    53  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00094417    57  0f86e5220000   jna 0x19db00096702  <+0x2342>
0x19db0009441d    5d  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00094421    61  448b4623       movl r8,[rsi+0x23]
0x19db00094425    65  4d03c5         REX.W addq r8,r13
0x19db00094428    68  41f6c001       testb r8,0x1
0x19db0009442c    6c  0f84c1340000   jz 0x19db000978f3  <+0x3533>
0x19db00094432    72  41b9b5da3008   movl r9,0x830dab5       ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db00094438    78  453948ff       cmpl [r8-0x1],r9
0x19db0009443c    7c  0f85b8340000   jnz 0x19db000978fa  <+0x353a>
0x19db00094442    82  458b600b       movl r12,[r8+0xb]
0x19db00094446    86  458b400f       movl r8,[r8+0xf]
0x19db0009444a    8a  4539e0         cmpl r8,r12
0x19db0009444d    8d  0f8ca6220000   jl 0x19db000966f9  <+0x2339>
0x19db00094453    93  48bfb5772e08db190000 REX.W movq rdi,0x19db082e77b5    ;; object: 0x19db082e77b5 <JSFunction String (sfi = 0x19db0824c101)>
0x19db0009445d    9d  448b470f       movl r8,[rdi+0xf]
0x19db00094461    a1  4d03c5         REX.W addq r8,r13
0x19db00094464    a4  4154           push r12
0x19db00094466    a6  498b9590000000 REX.W movq rdx,[r13+0x90] (root (undefined_value))
0x19db0009446d    ad  52             push rdx
0x19db0009446e    ae  4d8bd0         REX.W movq r10,r8
0x19db00094471    b1  4c8bc6         REX.W movq r8,rsi
0x19db00094474    b4  498bf2         REX.W movq rsi,r10
0x19db00094477    b7  4c8bda         REX.W movq r11,rdx
0x19db0009447a    ba  b801000000     movl rax,0x1
0x19db0009447f    bf  49ba601df6f5ff7f0000 REX.W movq r10,0x7ffff5f61d60  (StringConstructor)    ;; off heap target
0x19db00094489    c9  41ffd2         call r10
0x19db0009448c    cc  448b4007       movl r8,[rax+0x7]
0x19db00094490    d0  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db0009449a    da  4d3bd0         REX.W cmpq r10,r8
0x19db0009449d    dd  7715           ja 0x19db000944b4  <+0xf4>
0x19db0009449f    df  48ba0200000000000000 REX.W movq rdx,0x2
0x19db000944a9    e9  4c8b1528ffffff REX.W movq r10,[rip+0xffffff28]
0x19db000944b0    f0  41ffd2         call r10
0x19db000944b3    f3  cc             int3l
0x19db000944b4    f4  4183f803       cmpl r8,0x3
0x19db000944b8    f8  0f83de000000   jnc 0x19db0009459c  <+0x1dc>
0x19db000944be    fe  4183c001       addl r8,0x1
0x19db000944c2   102  4c8b15c9ffffff REX.W movq r10,[rip+0xffffffc9]
0x19db000944c9   109  4d3bd0         REX.W cmpq r10,r8
0x19db000944cc   10c  7712           ja 0x19db000944e0  <+0x120>
0x19db000944ce   10e  488b15ccffffff REX.W movq rdx,[rip+0xffffffcc]
0x19db000944d5   115  4c8b15fcfeffff REX.W movq r10,[rip+0xfffffefc]
0x19db000944dc   11c  41ffd2         call r10
0x19db000944df   11f  cc             int3l
0x19db000944e0   120  4181f8e9ffff1f cmpl r8,0x1fffffe9
0x19db000944e7   127  0f831b340000   jnc 0x19db00097908  <+0x3548>
0x19db000944ed   12d  488bd8         REX.W movq rbx,rax
0x19db000944f0   130  33f6           xorl rsi,rsi
0x19db000944f2   132  498b85700e0000 REX.W movq rax,[r13+0xe70] (root (zero_string))
0x19db000944f9   139  4c8bc0         REX.W movq r8,rax
0x19db000944fc   13c  49ba2036e4f5ff7f0000 REX.W movq r10,0x7ffff5e43620  (StringAdd_CheckNone)    ;; off heap target
0x19db00094506   146  41ffd2         call r10
0x19db00094509   149  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009450d   14d  0f8629220000   jna 0x19db0009673c  <+0x237c>
0x19db00094513   153  660f1f840000000000 nop
0x19db0009451c   15c  0f1f4000       nop
0x19db00094520   160  448b4007       movl r8,[rax+0x7]
0x19db00094524   164  4c8b1567ffffff REX.W movq r10,[rip+0xffffff67]
0x19db0009452b   16b  4d3bd0         REX.W cmpq r10,r8
0x19db0009452e   16e  7712           ja 0x19db00094542  <+0x182>
0x19db00094530   170  488b156affffff REX.W movq rdx,[rip+0xffffff6a]
0x19db00094537   177  4c8b159afeffff REX.W movq r10,[rip+0xfffffe9a]
0x19db0009453e   17e  41ffd2         call r10
0x19db00094541   181  cc             int3l
0x19db00094542   182  4183f803       cmpl r8,0x3
0x19db00094546   186  0f8350000000   jnc 0x19db0009459c  <+0x1dc>
0x19db0009454c   18c  4183c001       addl r8,0x1
0x19db00094550   190  4c8b153bffffff REX.W movq r10,[rip+0xffffff3b]
0x19db00094557   197  4d3bd0         REX.W cmpq r10,r8
0x19db0009455a   19a  7712           ja 0x19db0009456e  <+0x1ae>
0x19db0009455c   19c  488b153effffff REX.W movq rdx,[rip+0xffffff3e]
0x19db00094563   1a3  4c8b156efeffff REX.W movq r10,[rip+0xfffffe6e]
0x19db0009456a   1aa  41ffd2         call r10
0x19db0009456d   1ad  cc             int3l
0x19db0009456e   1ae  4181f8e9ffff1f cmpl r8,0x1fffffe9
0x19db00094575   1b5  0f8394330000   jnc 0x19db0009790f  <+0x354f>
0x19db0009457b   1bb  33f6           xorl rsi,rsi
0x19db0009457d   1bd  488bd8         REX.W movq rbx,rax
0x19db00094580   1c0  498b85700e0000 REX.W movq rax,[r13+0xe70] (root (zero_string))
0x19db00094587   1c7  4c8b1570ffffff REX.W movq r10,[rip+0xffffff70]
0x19db0009458e   1ce  41ffd2         call r10
0x19db00094591   1d1  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00094595   1d5  7789           ja 0x19db00094520  <+0x160>
0x19db00094597   1d7  e9d3210000     jmp 0x19db0009676f  <+0x23af>
0x19db0009459c   1dc  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db000945a0   1e0  448b4647       movl r8,[rsi+0x47]
0x19db000945a4   1e4  4d03c5         REX.W addq r8,r13
0x19db000945a7   1e7  448b4e1b       movl r9,[rsi+0x1b]
0x19db000945ab   1eb  4d03cd         REX.W addq r9,r13
0x19db000945ae   1ee  448b660f       movl r12,[rsi+0xf]
0x19db000945b2   1f2  4d03e5         REX.W addq r12,r13
0x19db000945b5   1f5  41f6c401       testb r12,0x1
0x19db000945b9   1f9  0f8457330000   jz 0x19db00097916  <+0x3556>
0x19db000945bf   1ff  b86ddc3008     movl rax,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db000945c4   204  41394424ff     cmpl [r12-0x1],rax
0x19db000945c9   209  0f854e330000   jnz 0x19db0009791d  <+0x355d>
0x19db000945cf   20f  418b542407     movl rdx,[r12+0x7]
0x19db000945d4   214  4903d5         REX.W addq rdx,r13
0x19db000945d7   217  418b4c240b     movl rcx,[r12+0xb]
0x19db000945dc   21c  d1f9           sarl rcx, 1
0x19db000945de   21e  83f908         cmpl rcx,0x8
0x19db000945e1   221  0f863d330000   jna 0x19db00097924  <+0x3564>
0x19db000945e7   227  8b5227         movl rdx,[rdx+0x27]
0x19db000945ea   22a  4903d5         REX.W addq rdx,r13
0x19db000945ed   22d  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db000945f1   231  4c894dc8       REX.W movq [rbp-0x38],r9
0x19db000945f5   235  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db000945ff   23f  4c8be0         REX.W movq r12,rax
0x19db00094602   242  b81e000000     movl rax,0x1e
0x19db00094607   247  4c8bde         REX.W movq r11,rsi
0x19db0009460a   24a  4c8bf1         REX.W movq r14,rcx
0x19db0009460d   24d  49bac00acdf5ff7f0000 REX.W movq r10,0x7ffff5cd0ac0  (LoadICTrampoline_Megamorphic)    ;; off heap target
0x19db00094617   257  41ffd2         call r10
0x19db0009461a   25a  a801           test al,0x1
0x19db0009461c   25c  0f8410330000   jz 0x19db00097932  <+0x3572>
0x19db00094622   262  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009462c   26c  443940ff       cmpl [rax-0x1],r8
0x19db00094630   270  0f8503330000   jnz 0x19db00097939  <+0x3579>
0x19db00094636   276  448b4807       movl r9,[rax+0x7]
0x19db0009463a   27a  4d03cd         REX.W addq r9,r13
0x19db0009463d   27d  448b600b       movl r12,[rax+0xb]
0x19db00094641   281  41d1fc         sarl r12, 1
0x19db00094644   284  4183fc00       cmpl r12,0x0
0x19db00094648   288  0f86f2320000   jna 0x19db00097940  <+0x3580>
0x19db0009464e   28e  c4c17b104107   vmovsd xmm0,[r9+0x7]
0x19db00094654   294  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00094658   298  448b4e0f       movl r9,[rsi+0xf]
0x19db0009465c   29c  4d03cd         REX.W addq r9,r13
0x19db0009465f   29f  41f6c101       testb r9,0x1
0x19db00094663   2a3  0f84de320000   jz 0x19db00097947  <+0x3587>
0x19db00094669   2a9  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009466f   2af  453959ff       cmpl [r9-0x1],r11
0x19db00094673   2b3  0f85d5320000   jnz 0x19db0009794e  <+0x358e>
0x19db00094679   2b9  458b6107       movl r12,[r9+0x7]
0x19db0009467d   2bd  4d03e5         REX.W addq r12,r13
0x19db00094680   2c0  458b490b       movl r9,[r9+0xb]
0x19db00094684   2c4  41d1f9         sarl r9, 1
0x19db00094687   2c7  c5e976d2       vpcmpeqd xmm2,xmm2,xmm2
0x19db0009468b   2cb  c5e973f23f     vpsllq xmm2,xmm2,63
0x19db00094690   2d0  c5e957c8       vxorpd xmm1,xmm2,xmm0
0x19db00094694   2d4  4183f908       cmpl r9,0x8
0x19db00094698   2d8  0f86b7320000   jna 0x19db00097955  <+0x3595>
0x19db0009469e   2de  418b542427     movl rdx,[r12+0x27]
0x19db000946a3   2e3  4903d5         REX.W addq rdx,r13
0x19db000946a6   2e6  c5fb114dc0     vmovsd [rbp-0x40],xmm1
0x19db000946ab   2eb  b82c000000     movl rax,0x2c
0x19db000946b0   2f0  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db000946ba   2fa  4c8bce         REX.W movq r9,rsi
0x19db000946bd   2fd  4c8b154bffffff REX.W movq r10,[rip+0xffffff4b]
0x19db000946c4   304  41ffd2         call r10
0x19db000946c7   307  a801           test al,0x1
0x19db000946c9   309  0f8494320000   jz 0x19db00097963  <+0x35a3>
0x19db000946cf   30f  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000946d9   319  443940ff       cmpl [rax-0x1],r8
0x19db000946dd   31d  0f8587320000   jnz 0x19db0009796a  <+0x35aa>
0x19db000946e3   323  448b4807       movl r9,[rax+0x7]
0x19db000946e7   327  4d03cd         REX.W addq r9,r13
0x19db000946ea   32a  448b600b       movl r12,[rax+0xb]
0x19db000946ee   32e  41d1fc         sarl r12, 1
0x19db000946f1   331  4183fc01       cmpl r12,0x1
0x19db000946f5   335  0f8676320000   jna 0x19db00097971  <+0x35b1>
0x19db000946fb   33b  c4c17b10410f   vmovsd xmm0,[r9+0xf]
0x19db00094701   341  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00094705   345  448b4e0f       movl r9,[rsi+0xf]
0x19db00094709   349  4d03cd         REX.W addq r9,r13
0x19db0009470c   34c  41f6c101       testb r9,0x1
0x19db00094710   350  0f8462320000   jz 0x19db00097978  <+0x35b8>
0x19db00094716   356  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009471c   35c  453959ff       cmpl [r9-0x1],r11
0x19db00094720   360  0f8559320000   jnz 0x19db0009797f  <+0x35bf>
0x19db00094726   366  458b6107       movl r12,[r9+0x7]
0x19db0009472a   36a  4d03e5         REX.W addq r12,r13
0x19db0009472d   36d  458b490b       movl r9,[r9+0xb]
0x19db00094731   371  41d1f9         sarl r9, 1
0x19db00094734   374  c5e976d2       vpcmpeqd xmm2,xmm2,xmm2
0x19db00094738   378  c5e973f23f     vpsllq xmm2,xmm2,63
0x19db0009473d   37d  c5e957c8       vxorpd xmm1,xmm2,xmm0
0x19db00094741   381  4183f908       cmpl r9,0x8
0x19db00094745   385  0f863b320000   jna 0x19db00097986  <+0x35c6>
0x19db0009474b   38b  418b542427     movl rdx,[r12+0x27]
0x19db00094750   390  4903d5         REX.W addq rdx,r13
0x19db00094753   393  c5fb114db8     vmovsd [rbp-0x48],xmm1
0x19db00094758   398  b83a000000     movl rax,0x3a
0x19db0009475d   39d  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db00094767   3a7  4c8bce         REX.W movq r9,rsi
0x19db0009476a   3aa  4c8b159efeffff REX.W movq r10,[rip+0xfffffe9e]
0x19db00094771   3b1  41ffd2         call r10
0x19db00094774   3b4  a801           test al,0x1
0x19db00094776   3b6  0f8418320000   jz 0x19db00097994  <+0x35d4>
0x19db0009477c   3bc  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00094786   3c6  443940ff       cmpl [rax-0x1],r8
0x19db0009478a   3ca  0f850b320000   jnz 0x19db0009799b  <+0x35db>
0x19db00094790   3d0  448b4807       movl r9,[rax+0x7]
0x19db00094794   3d4  4d03cd         REX.W addq r9,r13
0x19db00094797   3d7  448b600b       movl r12,[rax+0xb]
0x19db0009479b   3db  41d1fc         sarl r12, 1
0x19db0009479e   3de  4183fc02       cmpl r12,0x2
0x19db000947a2   3e2  0f86fa310000   jna 0x19db000979a2  <+0x35e2>
0x19db000947a8   3e8  c4c17b104117   vmovsd xmm0,[r9+0x17]
0x19db000947ae   3ee  f645d001       testb [rbp-0x30],0x1
0x19db000947b2   3f2  0f84f1310000   jz 0x19db000979a9  <+0x35e9>
0x19db000947b8   3f8  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db000947bc   3fc  458b61ff       movl r12,[r9-0x1]
0x19db000947c0   400  4d03e5         REX.W addq r12,r13
0x19db000947c3   403  6641817c24072c04 cmpw [r12+0x7],0x42c
0x19db000947cb   40b  0f85df310000   jnz 0x19db000979b0  <+0x35f0>
0x19db000947d1   411  458b6113       movl r12,[r9+0x13]
0x19db000947d5   415  4d03e5         REX.W addq r12,r13
0x19db000947d8   418  49bbf5422f08db190000 REX.W movq r11,0x19db082f42f5    ;; object: 0x19db082f42f5 <FeedbackCell[many closures]>
0x19db000947e2   422  4d3be3         REX.W cmpq r12,r11
0x19db000947e5   425  0f85cc310000   jnz 0x19db000979b7  <+0x35f7>
0x19db000947eb   42b  458b610f       movl r12,[r9+0xf]
0x19db000947ef   42f  4d03e5         REX.W addq r12,r13
0x19db000947f2   432  49bef87d6d5555550000 REX.W movq r14,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db000947fc   43c  4d8b3e         REX.W movq r15,[r14]
0x19db000947ff   43f  498d87e0000000 REX.W leaq rax,[r15+0xe0]
0x19db00094806   446  4c8965a8       REX.W movq [rbp-0x58],r12
0x19db0009480a   44a  48bb007e6d5555550000 REX.W movq rbx,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db00094814   454  483903         REX.W cmpq [rbx],rax
0x19db00094817   457  0f867f1f0000   jna 0x19db0009679c  <+0x23dc>
0x19db0009481d   45d  498d4710       REX.W leaq rax,[r15+0x10]
0x19db00094821   461  498906         REX.W movq [r14],rax
0x19db00094824   464  4983c701       REX.W addq r15,0x1
0x19db00094828   468  bab59e3008     movl rdx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009482d   46d  418957ff       movl [r15-0x1],rdx
0x19db00094831   471  498b8d58010000 REX.W movq rcx,[r13+0x158] (root (empty_fixed_array))
0x19db00094838   478  41894f03       movl [r15+0x3],rcx
0x19db0009483c   47c  bee5562f08     movl rsi,0x82f56e5      ;; (compressed) object: 0x19db082f56e5 <FixedArray[4]>
0x19db00094841   481  41897707       movl [r15+0x7],rsi
0x19db00094845   485  41c7470b08000000 movl [r15+0xb],0x8
0x19db0009484d   48d  488d7818       REX.W leaq rdi,[rax+0x18]
0x19db00094851   491  49893e         REX.W movq [r14],rdi
0x19db00094854   494  4883c001       REX.W addq rax,0x1
0x19db00094858   498  4d8b8dd0000000 REX.W movq r9,[r13+0xd0] (root (fixed_array_map))
0x19db0009485f   49f  448948ff       movl [rax-0x1],r9
0x19db00094863   4a3  c7400308000000 movl [rax+0x3],0x8
0x19db0009486a   4aa  c7400700000000 movl [rax+0x7],0x0
0x19db00094871   4b1  c7400b00000000 movl [rax+0xb],0x0
0x19db00094878   4b8  c7400f00000000 movl [rax+0xf],0x0
0x19db0009487f   4bf  44897813       movl [rax+0x13],r15
0x19db00094883   4c3  4c8d7f10       REX.W leaq r15,[rdi+0x10]
0x19db00094887   4c7  4d893e         REX.W movq [r14],r15
0x19db0009488a   4ca  4883c701       REX.W addq rdi,0x1
0x19db0009488e   4ce  41b9a59f3008   movl r9,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00094894   4d4  44894fff       movl [rdi-0x1],r9
0x19db00094898   4d8  894f03         movl [rdi+0x3],rcx
0x19db0009489b   4db  894707         movl [rdi+0x7],rax
0x19db0009489e   4de  c7470b08000000 movl [rdi+0xb],0x8
0x19db000948a5   4e5  4d8d4f28       REX.W leaq r9,[r15+0x28]
0x19db000948a9   4e9  4d890e         REX.W movq [r14],r9
0x19db000948ac   4ec  4983c701       REX.W addq r15,0x1
0x19db000948b0   4f0  498b95d8010000 REX.W movq rdx,[r13+0x1d8] (root (fixed_double_array_map))
0x19db000948b7   4f7  418957ff       movl [r15-0x1],rdx
0x19db000948bb   4fb  41c7470308000000 movl [r15+0x3],0x8
0x19db000948c3   503  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db000948c7   507  c5f173f136     vpsllq xmm1,xmm1,54
0x19db000948cc   50c  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db000948d1   511  c4c17b114f07   vmovsd [r15+0x7],xmm1
0x19db000948d7   517  c5e957d2       vxorpd xmm2,xmm2,xmm2
0x19db000948db   51b  c4c17b11570f   vmovsd [r15+0xf],xmm2
0x19db000948e1   521  c4c17b115717   vmovsd [r15+0x17],xmm2
0x19db000948e7   527  c4c17b11571f   vmovsd [r15+0x1f],xmm2
0x19db000948ed   52d  498d7110       REX.W leaq rsi,[r9+0x10]
0x19db000948f1   531  498936         REX.W movq [r14],rsi
0x19db000948f4   534  4983c101       REX.W addq r9,0x1
0x19db000948f8   538  458941ff       movl [r9-0x1],r8
0x19db000948fc   53c  41894903       movl [r9+0x3],rcx
0x19db00094900   540  45897907       movl [r9+0x7],r15
0x19db00094904   544  41c7410b08000000 movl [r9+0xb],0x8
0x19db0009490c   54c  c5fb1065c0     vmovsd xmm4,[rbp-0x40]
0x19db00094911   551  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db00094916   556  c4c15b5ce7     vsubsd xmm4,xmm4,xmm15
0x19db0009491b   55b  c4c17b11671f   vmovsd [r15+0x1f],xmm4
0x19db00094921   561  44894807       movl [rax+0x7],r9
0x19db00094925   565  4c8d4e28       REX.W leaq r9,[rsi+0x28]
0x19db00094929   569  4d890e         REX.W movq [r14],r9
0x19db0009492c   56c  4c8d7e01       REX.W leaq r15,[rsi+0x1]
0x19db00094930   570  418957ff       movl [r15-0x1],rdx
0x19db00094934   574  41c7470308000000 movl [r15+0x3],0x8
0x19db0009493c   57c  c4c17b115707   vmovsd [r15+0x7],xmm2
0x19db00094942   582  c4c17b114f0f   vmovsd [r15+0xf],xmm1
0x19db00094948   588  c4c17b115717   vmovsd [r15+0x17],xmm2
0x19db0009494e   58e  c4c17b11571f   vmovsd [r15+0x1f],xmm2
0x19db00094954   594  498d7110       REX.W leaq rsi,[r9+0x10]
0x19db00094958   598  498936         REX.W movq [r14],rsi
0x19db0009495b   59b  4983c101       REX.W addq r9,0x1
0x19db0009495f   59f  458941ff       movl [r9-0x1],r8
0x19db00094963   5a3  41894903       movl [r9+0x3],rcx
0x19db00094967   5a7  45897907       movl [r9+0x7],r15
0x19db0009496b   5ab  41c7410b08000000 movl [r9+0xb],0x8
0x19db00094973   5b3  c5fb1065b8     vmovsd xmm4,[rbp-0x48]
0x19db00094978   5b8  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db0009497d   5bd  c4c15b5ce7     vsubsd xmm4,xmm4,xmm15
0x19db00094982   5c2  c4c17b11671f   vmovsd [r15+0x1f],xmm4
0x19db00094988   5c8  4489480b       movl [rax+0xb],r9
0x19db0009498c   5cc  4c8d4e28       REX.W leaq r9,[rsi+0x28]
0x19db00094990   5d0  4d890e         REX.W movq [r14],r9
0x19db00094993   5d3  4c8d7e01       REX.W leaq r15,[rsi+0x1]
0x19db00094997   5d7  418957ff       movl [r15-0x1],rdx
0x19db0009499b   5db  41c7470308000000 movl [r15+0x3],0x8
0x19db000949a3   5e3  c4c17b115707   vmovsd [r15+0x7],xmm2
0x19db000949a9   5e9  c4c17b11570f   vmovsd [r15+0xf],xmm2
0x19db000949af   5ef  c4c17b114f17   vmovsd [r15+0x17],xmm1
0x19db000949b5   5f5  c4c17b11571f   vmovsd [r15+0x1f],xmm2
0x19db000949bb   5fb  498d7110       REX.W leaq rsi,[r9+0x10]
0x19db000949bf   5ff  498936         REX.W movq [r14],rsi
0x19db000949c2   602  4983c101       REX.W addq r9,0x1
0x19db000949c6   606  458941ff       movl [r9-0x1],r8
0x19db000949ca   60a  41894903       movl [r9+0x3],rcx
0x19db000949ce   60e  45897907       movl [r9+0x7],r15
0x19db000949d2   612  c5d976e4       vpcmpeqd xmm4,xmm4,xmm4
0x19db000949d6   616  c5d973f43f     vpsllq xmm4,xmm4,63
0x19db000949db   61b  c5d957d8       vxorpd xmm3,xmm4,xmm0
0x19db000949df   61f  41c7410b08000000 movl [r9+0xb],0x8
0x19db000949e7   627  c5f928c3       vmovapd xmm0,xmm3
0x19db000949eb   62b  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db000949f0   630  c4c17b5cc7     vsubsd xmm0,xmm0,xmm15
0x19db000949f5   635  c4c17b11471f   vmovsd [r15+0x1f],xmm0
0x19db000949fb   63b  4489480f       movl [rax+0xf],r9
0x19db000949ff   63f  458b4c243b     movl r9,[r12+0x3b]
0x19db00094a04   644  4d03cd         REX.W addq r9,r13
0x19db00094a07   647  41f6c101       testb r9,0x1
0x19db00094a0b   64b  0f84ad2f0000   jz 0x19db000979be  <+0x35fe>
0x19db00094a11   651  458b79ff       movl r15,[r9-0x1]
0x19db00094a15   655  4d03fd         REX.W addq r15,r13
0x19db00094a18   658  6641817f072c04 cmpw [r15+0x7],0x42c
0x19db00094a1f   65f  0f85a02f0000   jnz 0x19db000979c5  <+0x3605>
0x19db00094a25   665  458b7913       movl r15,[r9+0x13]
0x19db00094a29   669  4d03fd         REX.W addq r15,r13
0x19db00094a2c   66c  48b8d1422f08db190000 REX.W movq rax,0x19db082f42d1    ;; object: 0x19db082f42d1 <FeedbackCell[many closures]>
0x19db00094a36   676  4c3bf8         REX.W cmpq r15,rax
0x19db00094a39   679  0f858d2f0000   jnz 0x19db000979cc  <+0x360c>
0x19db00094a3f   67f  ff75c8         push [rbp-0x38]
0x19db00094a42   682  57             push rdi
0x19db00094a43   683  4d8bbd90000000 REX.W movq r15,[r13+0x90] (root (undefined_value))
0x19db00094a4a   68a  4157           push r15
0x19db00094a4c   68c  c5fb115db0     vmovsd [rbp-0x50],xmm3
0x19db00094a51   691  498bf9         REX.W movq rdi,r9
0x19db00094a54   694  4c8bc8         REX.W movq r9,rax
0x19db00094a57   697  b802000000     movl rax,0x2
0x19db00094a5c   69c  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00094a66   6a6  49ba8079b8f5ff7f0000 REX.W movq r10,0x7ffff5b87980  (Call_ReceiverIsNullOrUndefined)    ;; off heap target
0x19db00094a70   6b0  41ffd2         call r10
0x19db00094a73   6b3  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00094a77   6b7  894613         movl [rsi+0x13],rax
0x19db00094a7a   6ba  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db00094a81   6c1  4c23c6         REX.W andq r8,rsi
0x19db00094a84   6c4  41f6400804     testb [r8+0x8],0x4
0x19db00094a89   6c9  0f85152e0000   jnz 0x19db000978a4  <+0x34e4>
0x19db00094a8f   6cf  448b464b       movl r8,[rsi+0x4b]
0x19db00094a93   6d3  4d03c5         REX.W addq r8,r13
0x19db00094a96   6d6  41f6c001       testb r8,0x1
0x19db00094a9a   6da  0f843a2f0000   jz 0x19db000979da  <+0x361a>
0x19db00094aa0   6e0  458b48ff       movl r9,[r8-0x1]
0x19db00094aa4   6e4  4d03cd         REX.W addq r9,r13
0x19db00094aa7   6e7  66418179072c04 cmpw [r9+0x7],0x42c
0x19db00094aae   6ee  0f852d2f0000   jnz 0x19db000979e1  <+0x3621>
0x19db00094ab4   6f4  458b4813       movl r9,[r8+0x13]
0x19db00094ab8   6f8  4d03cd         REX.W addq r9,r13
0x19db00094abb   6fb  49bb01432f08db190000 REX.W movq r11,0x19db082f4301    ;; object: 0x19db082f4301 <FeedbackCell[many closures]>
0x19db00094ac5   705  4d3bd9         REX.W cmpq r11,r9
0x19db00094ac8   708  0f851a2f0000   jnz 0x19db000979e8  <+0x3628>
0x19db00094ace   70e  458b480f       movl r9,[r8+0xf]
0x19db00094ad2   712  4d03cd         REX.W addq r9,r13
0x19db00094ad5   715  49bb09652e08db190000 REX.W movq r11,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db00094adf   71f  458b6303       movl r12,[r11+0x3]
0x19db00094ae3   723  4d03e5         REX.W addq r12,r13
0x19db00094ae6   726  bab5662e08     movl rdx,0x82e66b5      ;; (compressed) object: 0x19db082e66b5 <JSFunction cos (sfi = 0x19db0824ab11)>
0x19db00094aeb   72b  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db00094aef   72f  4c894dc0       REX.W movq [rbp-0x40],r9
0x19db00094af3   733  4139542427     cmpl [r12+0x27],rdx
0x19db00094af8   738  0f85f12e0000   jnz 0x19db000979ef  <+0x362f>
0x19db00094afe   73e  b991682e08     movl rcx,0x82e6891      ;; (compressed) object: 0x19db082e6891 <JSFunction sin (sfi = 0x19db0824adb9)>
0x19db00094b03   743  41394c246b     cmpl [r12+0x6b],rcx
0x19db00094b08   748  0f85e82e0000   jnz 0x19db000979f6  <+0x3636>
0x19db00094b0e   74e  4c8b25dffcffff REX.W movq r12,[rip+0xfffffcdf]
0x19db00094b15   755  4d8b3424       REX.W movq r14,[r12]
0x19db00094b19   759  4d8dbeb8000000 REX.W leaq r15,[r14+0xb8]
0x19db00094b20   760  488945c8       REX.W movq [rbp-0x38],rax
0x19db00094b24   764  488b1de1fcffff REX.W movq rbx,[rip+0xfffffce1]
0x19db00094b2b   76b  4c393b         REX.W cmpq [rbx],r15
0x19db00094b2e   76e  0f86a51c0000   jna 0x19db000967d9  <+0x2419>
0x19db00094b34   774  4d8d7e10       REX.W leaq r15,[r14+0x10]
0x19db00094b38   778  4d893c24       REX.W movq [r12],r15
0x19db00094b3c   77c  4983c601       REX.W addq r14,0x1
0x19db00094b40   780  bfb59e3008     movl rdi,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00094b45   785  41897eff       movl [r14-0x1],rdi
0x19db00094b49   789  4d8b8558010000 REX.W movq r8,[r13+0x158] (root (empty_fixed_array))
0x19db00094b50   790  45894603       movl [r14+0x3],r8
0x19db00094b54   794  b8ad6d2f08     movl rax,0x82f6dad      ;; (compressed) object: 0x19db082f6dad <FixedArray[4]>
0x19db00094b59   799  41894607       movl [r14+0x7],rax
0x19db00094b5d   79d  41c7460b08000000 movl [r14+0xb],0x8
0x19db00094b65   7a5  498d4710       REX.W leaq rax,[r15+0x10]
0x19db00094b69   7a9  49890424       REX.W movq [r12],rax
0x19db00094b6d   7ad  4983c701       REX.W addq r15,0x1
0x19db00094b71   7b1  41897fff       movl [r15-0x1],rdi
0x19db00094b75   7b5  45894703       movl [r15+0x3],r8
0x19db00094b79   7b9  ba196e2f08     movl rdx,0x82f6e19      ;; (compressed) object: 0x19db082f6e19 <FixedArray[4]>
0x19db00094b7e   7be  41895707       movl [r15+0x7],rdx
0x19db00094b82   7c2  41c7470b08000000 movl [r15+0xb],0x8
0x19db00094b8a   7ca  488d5018       REX.W leaq rdx,[rax+0x18]
0x19db00094b8e   7ce  49891424       REX.W movq [r12],rdx
0x19db00094b92   7d2  4883c001       REX.W addq rax,0x1
0x19db00094b96   7d6  4d8b9dd0000000 REX.W movq r11,[r13+0xd0] (root (fixed_array_map))
0x19db00094b9d   7dd  448958ff       movl [rax-0x1],r11
0x19db00094ba1   7e1  c7400308000000 movl [rax+0x3],0x8
0x19db00094ba8   7e8  44897007       movl [rax+0x7],r14
0x19db00094bac   7ec  c7400b00000000 movl [rax+0xb],0x0
0x19db00094bb3   7f3  c7400f00000000 movl [rax+0xf],0x0
0x19db00094bba   7fa  44897813       movl [rax+0x13],r15
0x19db00094bbe   7fe  4c8d7210       REX.W leaq r14,[rdx+0x10]
0x19db00094bc2   802  4d893424       REX.W movq [r12],r14
0x19db00094bc6   806  4c8d7a01       REX.W leaq r15,[rdx+0x1]
0x19db00094bca   80a  baa59f3008     movl rdx,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00094bcf   80f  418957ff       movl [r15-0x1],rdx
0x19db00094bd3   813  45894703       movl [r15+0x3],r8
0x19db00094bd7   817  41894707       movl [r15+0x7],rax
0x19db00094bdb   81b  41c7470b08000000 movl [r15+0xb],0x8
0x19db00094be3   823  498d5628       REX.W leaq rdx,[r14+0x28]
0x19db00094be7   827  49891424       REX.W movq [r12],rdx
0x19db00094beb   82b  4983c601       REX.W addq r14,0x1
0x19db00094bef   82f  4d8b9dd8010000 REX.W movq r11,[r13+0x1d8] (root (fixed_double_array_map))
0x19db00094bf6   836  45895eff       movl [r14-0x1],r11
0x19db00094bfa   83a  41c7460308000000 movl [r14+0x3],0x8
0x19db00094c02   842  c5f957c0       vxorpd xmm0,xmm0,xmm0
0x19db00094c06   846  c4c17b114607   vmovsd [r14+0x7],xmm0
0x19db00094c0c   84c  c4c17b11460f   vmovsd [r14+0xf],xmm0
0x19db00094c12   852  c4c17b114617   vmovsd [r14+0x17],xmm0
0x19db00094c18   858  c4c17b11461f   vmovsd [r14+0x1f],xmm0
0x19db00094c1e   85e  488d4a10       REX.W leaq rcx,[rdx+0x10]
0x19db00094c22   862  49890c24       REX.W movq [r12],rcx
0x19db00094c26   866  4883c201       REX.W addq rdx,0x1
0x19db00094c2a   86a  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00094c34   874  895aff         movl [rdx-0x1],rbx
0x19db00094c37   877  44894203       movl [rdx+0x3],r8
0x19db00094c3b   87b  44897207       movl [rdx+0x7],r14
0x19db00094c3f   87f  c7420b08000000 movl [rdx+0xb],0x8
0x19db00094c46   886  49ba8aaff597c0feef3f REX.W movq r10,0x3feffec097f5af8a
0x19db00094c50   890  c4c1f96eca     vmovq xmm1,r10
0x19db00094c55   895  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db00094c5a   89a  c4c1735ccf     vsubsd xmm1,xmm1,xmm15
0x19db00094c5f   89f  c4c17b114e0f   vmovsd [r14+0xf],xmm1
0x19db00094c65   8a5  49ba1edd892b0bdf91bf REX.W movq r10,0xbf91df0b2b89dd1e
0x19db00094c6f   8af  c4c1f96ed2     vmovq xmm2,r10
0x19db00094c74   8b4  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db00094c79   8b9  c4c16b5cd7     vsubsd xmm2,xmm2,xmm15
0x19db00094c7e   8be  c4c17b115617   vmovsd [r14+0x17],xmm2
0x19db00094c84   8c4  89500b         movl [rax+0xb],rdx
0x19db00094c87   8c7  4c8d7128       REX.W leaq r14,[rcx+0x28]
0x19db00094c8b   8cb  4d893424       REX.W movq [r12],r14
0x19db00094c8f   8cf  488d5101       REX.W leaq rdx,[rcx+0x1]
0x19db00094c93   8d3  44895aff       movl [rdx-0x1],r11
0x19db00094c97   8d7  c7420308000000 movl [rdx+0x3],0x8
0x19db00094c9e   8de  c5fb114207     vmovsd [rdx+0x7],xmm0
0x19db00094ca3   8e3  c5fb11420f     vmovsd [rdx+0xf],xmm0
0x19db00094ca8   8e8  c5fb114217     vmovsd [rdx+0x17],xmm0
0x19db00094cad   8ed  c5fb11421f     vmovsd [rdx+0x1f],xmm0
0x19db00094cb2   8f2  498d4e10       REX.W leaq rcx,[r14+0x10]
0x19db00094cb6   8f6  49890c24       REX.W movq [r12],rcx
0x19db00094cba   8fa  4983c601       REX.W addq r14,0x1
0x19db00094cbe   8fe  41895eff       movl [r14-0x1],rbx
0x19db00094cc2   902  45894603       movl [r14+0x3],r8
0x19db00094cc6   906  41895607       movl [r14+0x7],rdx
0x19db00094cca   90a  41c7460b08000000 movl [r14+0xb],0x8
0x19db00094cd2   912  49ba1edd892b0bdf913f REX.W movq r10,0x3f91df0b2b89dd1e
0x19db00094cdc   91c  c4c1f96ed2     vmovq xmm2,r10
0x19db00094ce1   921  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db00094ce6   926  c4c16b5cd7     vsubsd xmm2,xmm2,xmm15
0x19db00094ceb   92b  c5fb11520f     vmovsd [rdx+0xf],xmm2
0x19db00094cf0   930  c5fb114a17     vmovsd [rdx+0x17],xmm1
0x19db00094cf5   935  4489700f       movl [rax+0xf],r14
0x19db00094cf9   939  458b713b       movl r14,[r9+0x3b]
0x19db00094cfd   93d  4d03f5         REX.W addq r14,r13
0x19db00094d00   940  41f6c601       testb r14,0x1
0x19db00094d04   944  0f84f32c0000   jz 0x19db000979fd  <+0x363d>
0x19db00094d0a   94a  418b46ff       movl rax,[r14-0x1]
0x19db00094d0e   94e  4903c5         REX.W addq rax,r13
0x19db00094d11   951  668178072c04   cmpw [rax+0x7],0x42c
0x19db00094d17   957  0f85e72c0000   jnz 0x19db00097a04  <+0x3644>
0x19db00094d1d   95d  418b4613       movl rax,[r14+0x13]
0x19db00094d21   961  4903c5         REX.W addq rax,r13
0x19db00094d24   964  48bad1422f08db190000 REX.W movq rdx,0x19db082f42d1    ;; object: 0x19db082f42d1 <FeedbackCell[many closures]>
0x19db00094d2e   96e  483bc2         REX.W cmpq rax,rdx
0x19db00094d31   971  0f85d42c0000   jnz 0x19db00097a0b  <+0x364b>
0x19db00094d37   977  ff75c8         push [rbp-0x38]
0x19db00094d3a   97a  4157           push r15
0x19db00094d3c   97c  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db00094d43   983  50             push rax
0x19db00094d44   984  488bcf         REX.W movq rcx,rdi
0x19db00094d47   987  498bfe         REX.W movq rdi,r14
0x19db00094d4a   98a  b802000000     movl rax,0x2
0x19db00094d4f   98f  4c8bf6         REX.W movq r14,rsi
0x19db00094d52   992  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00094d5c   99c  4c8b7dc8       REX.W movq r15,[rbp-0x38]
0x19db00094d60   9a0  4c8b1501fdffff REX.W movq r10,[rip+0xfffffd01]
0x19db00094d67   9a7  41ffd2         call r10
0x19db00094d6a   9aa  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00094d6e   9ae  894613         movl [rsi+0x13],rax
0x19db00094d71   9b1  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db00094d78   9b8  4c23c6         REX.W andq r8,rsi
0x19db00094d7b   9bb  41f6400804     testb [r8+0x8],0x4
0x19db00094d80   9c0  0f85d02a0000   jnz 0x19db00097856  <+0x3496>
0x19db00094d86   9c6  448b464f       movl r8,[rsi+0x4f]
0x19db00094d8a   9ca  4d03c5         REX.W addq r8,r13
0x19db00094d8d   9cd  41f6c001       testb r8,0x1
0x19db00094d91   9d1  0f84822c0000   jz 0x19db00097a19  <+0x3659>
0x19db00094d97   9d7  458b48ff       movl r9,[r8-0x1]
0x19db00094d9b   9db  4d03cd         REX.W addq r9,r13
0x19db00094d9e   9de  66418179072c04 cmpw [r9+0x7],0x42c
0x19db00094da5   9e5  0f85752c0000   jnz 0x19db00097a20  <+0x3660>
0x19db00094dab   9eb  458b4813       movl r9,[r8+0x13]
0x19db00094daf   9ef  4d03cd         REX.W addq r9,r13
0x19db00094db2   9f2  49bb0d432f08db190000 REX.W movq r11,0x19db082f430d    ;; object: 0x19db082f430d <FeedbackCell[many closures]>
0x19db00094dbc   9fc  4d3bd9         REX.W cmpq r11,r9
0x19db00094dbf   9ff  0f85622c0000   jnz 0x19db00097a27  <+0x3667>
0x19db00094dc5   a05  458b480f       movl r9,[r8+0xf]
0x19db00094dc9   a09  4d03cd         REX.W addq r9,r13
0x19db00094dcc   a0c  49bb09652e08db190000 REX.W movq r11,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db00094dd6   a16  458b6303       movl r12,[r11+0x3]
0x19db00094dda   a1a  4d03e5         REX.W addq r12,r13
0x19db00094ddd   a1d  41beb5662e08   movl r14,0x82e66b5      ;; (compressed) object: 0x19db082e66b5 <JSFunction cos (sfi = 0x19db0824ab11)>
0x19db00094de3   a23  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db00094de7   a27  4c894dc0       REX.W movq [rbp-0x40],r9
0x19db00094deb   a2b  4539742427     cmpl [r12+0x27],r14
0x19db00094df0   a30  0f85382c0000   jnz 0x19db00097a2e  <+0x366e>
0x19db00094df6   a36  41bf91682e08   movl r15,0x82e6891      ;; (compressed) object: 0x19db082e6891 <JSFunction sin (sfi = 0x19db0824adb9)>
0x19db00094dfc   a3c  45397c246b     cmpl [r12+0x6b],r15
0x19db00094e01   a41  0f852e2c0000   jnz 0x19db00097a35  <+0x3675>
0x19db00094e07   a47  4c8b25e6f9ffff REX.W movq r12,[rip+0xfffff9e6]
0x19db00094e0e   a4e  498b1c24       REX.W movq rbx,[r12]
0x19db00094e12   a52  488d93b8000000 REX.W leaq rdx,[rbx+0xb8]
0x19db00094e19   a59  488945c8       REX.W movq [rbp-0x38],rax
0x19db00094e1d   a5d  488b0de8f9ffff REX.W movq rcx,[rip+0xfffff9e8]
0x19db00094e24   a64  483911         REX.W cmpq [rcx],rdx
0x19db00094e27   a67  0f86d9190000   jna 0x19db00096806  <+0x2446>
0x19db00094e2d   a6d  488d5310       REX.W leaq rdx,[rbx+0x10]
0x19db00094e31   a71  49891424       REX.W movq [r12],rdx
0x19db00094e35   a75  488d7b01       REX.W leaq rdi,[rbx+0x1]
0x19db00094e39   a79  bbb59e3008     movl rbx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00094e3e   a7e  895fff         movl [rdi-0x1],rbx
0x19db00094e41   a81  4d8b8558010000 REX.W movq r8,[r13+0x158] (root (empty_fixed_array))
0x19db00094e48   a88  44894703       movl [rdi+0x3],r8
0x19db00094e4c   a8c  41beb96f2f08   movl r14,0x82f6fb9      ;; (compressed) object: 0x19db082f6fb9 <FixedArray[4]>
0x19db00094e52   a92  44897707       movl [rdi+0x7],r14
0x19db00094e56   a96  c7470b08000000 movl [rdi+0xb],0x8
0x19db00094e5d   a9d  4c8d7210       REX.W leaq r14,[rdx+0x10]
0x19db00094e61   aa1  4d893424       REX.W movq [r12],r14
0x19db00094e65   aa5  4883c201       REX.W addq rdx,0x1
0x19db00094e69   aa9  895aff         movl [rdx-0x1],rbx
0x19db00094e6c   aac  44894203       movl [rdx+0x3],r8
0x19db00094e70   ab0  41bf01702f08   movl r15,0x82f7001      ;; (compressed) object: 0x19db082f7001 <FixedArray[4]>
0x19db00094e76   ab6  44897a07       movl [rdx+0x7],r15
0x19db00094e7a   aba  c7420b08000000 movl [rdx+0xb],0x8
0x19db00094e81   ac1  4d8d7e18       REX.W leaq r15,[r14+0x18]
0x19db00094e85   ac5  4d893c24       REX.W movq [r12],r15
0x19db00094e89   ac9  4983c601       REX.W addq r14,0x1
0x19db00094e8d   acd  4d8b9dd0000000 REX.W movq r11,[r13+0xd0] (root (fixed_array_map))
0x19db00094e94   ad4  45895eff       movl [r14-0x1],r11
0x19db00094e98   ad8  41c7460308000000 movl [r14+0x3],0x8
0x19db00094ea0   ae0  41c7460700000000 movl [r14+0x7],0x0
0x19db00094ea8   ae8  41897e0b       movl [r14+0xb],rdi
0x19db00094eac   aec  41c7460f00000000 movl [r14+0xf],0x0
0x19db00094eb4   af4  41895613       movl [r14+0x13],rdx
0x19db00094eb8   af8  498d5710       REX.W leaq rdx,[r15+0x10]
0x19db00094ebc   afc  49891424       REX.W movq [r12],rdx
0x19db00094ec0   b00  4983c701       REX.W addq r15,0x1
0x19db00094ec4   b04  bfa59f3008     movl rdi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00094ec9   b09  41897fff       movl [r15-0x1],rdi
0x19db00094ecd   b0d  45894703       movl [r15+0x3],r8
0x19db00094ed1   b11  45897707       movl [r15+0x7],r14
0x19db00094ed5   b15  41c7470b08000000 movl [r15+0xb],0x8
0x19db00094edd   b1d  488d4228       REX.W leaq rax,[rdx+0x28]
0x19db00094ee1   b21  49890424       REX.W movq [r12],rax
0x19db00094ee5   b25  4883c201       REX.W addq rdx,0x1
0x19db00094ee9   b29  4d8b9dd8010000 REX.W movq r11,[r13+0x1d8] (root (fixed_double_array_map))
0x19db00094ef0   b30  44895aff       movl [rdx-0x1],r11
0x19db00094ef4   b34  c7420308000000 movl [rdx+0x3],0x8
0x19db00094efb   b3b  c5f957c0       vxorpd xmm0,xmm0,xmm0
0x19db00094eff   b3f  c5fb114207     vmovsd [rdx+0x7],xmm0
0x19db00094f04   b44  c5fb11420f     vmovsd [rdx+0xf],xmm0
0x19db00094f09   b49  c5fb114217     vmovsd [rdx+0x17],xmm0
0x19db00094f0e   b4e  c5fb11421f     vmovsd [rdx+0x1f],xmm0
0x19db00094f13   b53  488d4810       REX.W leaq rcx,[rax+0x10]
0x19db00094f17   b57  49890c24       REX.W movq [r12],rcx
0x19db00094f1b   b5b  4883c001       REX.W addq rax,0x1
0x19db00094f1f   b5f  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00094f29   b69  8958ff         movl [rax-0x1],rbx
0x19db00094f2c   b6c  44894003       movl [rax+0x3],r8
0x19db00094f30   b70  895007         movl [rax+0x7],rdx
0x19db00094f33   b73  c7400b08000000 movl [rax+0xb],0x8
0x19db00094f3a   b7a  49ba1de612edc5f4ef3f REX.W movq r10,0x3feff4c5ed12e61d
0x19db00094f44   b84  c4c1f96eca     vmovq xmm1,r10
0x19db00094f49   b89  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db00094f4e   b8e  c4c1735ccf     vsubsd xmm1,xmm1,xmm15
0x19db00094f53   b93  c5fb114a07     vmovsd [rdx+0x7],xmm1
0x19db00094f58   b98  49ba0ec9ef48c7cbaa3f REX.W movq r10,0x3faacbc748efc90e
0x19db00094f62   ba2  c4c1f96ed2     vmovq xmm2,r10
0x19db00094f67   ba7  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db00094f6c   bac  c4c16b5cd7     vsubsd xmm2,xmm2,xmm15
0x19db00094f71   bb1  c5fb115217     vmovsd [rdx+0x17],xmm2
0x19db00094f76   bb6  41894607       movl [r14+0x7],rax
0x19db00094f7a   bba  488d4128       REX.W leaq rax,[rcx+0x28]
0x19db00094f7e   bbe  49890424       REX.W movq [r12],rax
0x19db00094f82   bc2  488d5101       REX.W leaq rdx,[rcx+0x1]
0x19db00094f86   bc6  44895aff       movl [rdx-0x1],r11
0x19db00094f8a   bca  c7420308000000 movl [rdx+0x3],0x8
0x19db00094f91   bd1  c5fb114207     vmovsd [rdx+0x7],xmm0
0x19db00094f96   bd6  c5fb11420f     vmovsd [rdx+0xf],xmm0
0x19db00094f9b   bdb  c5fb114217     vmovsd [rdx+0x17],xmm0
0x19db00094fa0   be0  c5fb11421f     vmovsd [rdx+0x1f],xmm0
0x19db00094fa5   be5  488d4810       REX.W leaq rcx,[rax+0x10]
0x19db00094fa9   be9  49890c24       REX.W movq [r12],rcx
0x19db00094fad   bed  4883c001       REX.W addq rax,0x1
0x19db00094fb1   bf1  8958ff         movl [rax-0x1],rbx
0x19db00094fb4   bf4  44894003       movl [rax+0x3],r8
0x19db00094fb8   bf8  895007         movl [rax+0x7],rdx
0x19db00094fbb   bfb  c7400b08000000 movl [rax+0xb],0x8
0x19db00094fc2   c02  49ba0ec9ef48c7cbaabf REX.W movq r10,0xbfaacbc748efc90e
0x19db00094fcc   c0c  c4c1f96ed2     vmovq xmm2,r10
0x19db00094fd1   c11  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db00094fd6   c16  c4c16b5cd7     vsubsd xmm2,xmm2,xmm15
0x19db00094fdb   c1b  c5fb115207     vmovsd [rdx+0x7],xmm2
0x19db00094fe0   c20  c5fb114a17     vmovsd [rdx+0x17],xmm1
0x19db00094fe5   c25  4189460f       movl [r14+0xf],rax
0x19db00094fe9   c29  458b713b       movl r14,[r9+0x3b]
0x19db00094fed   c2d  4d03f5         REX.W addq r14,r13
0x19db00094ff0   c30  41f6c601       testb r14,0x1
0x19db00094ff4   c34  0f84422a0000   jz 0x19db00097a3c  <+0x367c>
0x19db00094ffa   c3a  418b46ff       movl rax,[r14-0x1]
0x19db00094ffe   c3e  4903c5         REX.W addq rax,r13
0x19db00095001   c41  668178072c04   cmpw [rax+0x7],0x42c
0x19db00095007   c47  0f85362a0000   jnz 0x19db00097a43  <+0x3683>
0x19db0009500d   c4d  418b4613       movl rax,[r14+0x13]
0x19db00095011   c51  4903c5         REX.W addq rax,r13
0x19db00095014   c54  48bad1422f08db190000 REX.W movq rdx,0x19db082f42d1    ;; object: 0x19db082f42d1 <FeedbackCell[many closures]>
0x19db0009501e   c5e  483bc2         REX.W cmpq rax,rdx
0x19db00095021   c61  0f85232a0000   jnz 0x19db00097a4a  <+0x368a>
0x19db00095027   c67  ff75c8         push [rbp-0x38]
0x19db0009502a   c6a  4157           push r15
0x19db0009502c   c6c  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db00095033   c73  50             push rax
0x19db00095034   c74  488bcf         REX.W movq rcx,rdi
0x19db00095037   c77  498bfe         REX.W movq rdi,r14
0x19db0009503a   c7a  b802000000     movl rax,0x2
0x19db0009503f   c7f  4c8bf6         REX.W movq r14,rsi
0x19db00095042   c82  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009504c   c8c  4c8b7dc8       REX.W movq r15,[rbp-0x38]
0x19db00095050   c90  4c8b1511faffff REX.W movq r10,[rip+0xfffffa11]
0x19db00095057   c97  41ffd2         call r10
0x19db0009505a   c9a  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009505e   c9e  894613         movl [rsi+0x13],rax
0x19db00095061   ca1  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db00095068   ca8  4c23c6         REX.W andq r8,rsi
0x19db0009506b   cab  41f6400804     testb [r8+0x8],0x4
0x19db00095070   cb0  0f8592270000   jnz 0x19db00097808  <+0x3448>
0x19db00095076   cb6  448b4653       movl r8,[rsi+0x53]
0x19db0009507a   cba  4d03c5         REX.W addq r8,r13
0x19db0009507d   cbd  41f6c001       testb r8,0x1
0x19db00095081   cc1  0f84d1290000   jz 0x19db00097a58  <+0x3698>
0x19db00095087   cc7  458b48ff       movl r9,[r8-0x1]
0x19db0009508b   ccb  4d03cd         REX.W addq r9,r13
0x19db0009508e   cce  66418179072c04 cmpw [r9+0x7],0x42c
0x19db00095095   cd5  0f85c4290000   jnz 0x19db00097a5f  <+0x369f>
0x19db0009509b   cdb  458b4813       movl r9,[r8+0x13]
0x19db0009509f   cdf  4d03cd         REX.W addq r9,r13
0x19db000950a2   ce2  49bb19432f08db190000 REX.W movq r11,0x19db082f4319    ;; object: 0x19db082f4319 <FeedbackCell[many closures]>
0x19db000950ac   cec  4d3bd9         REX.W cmpq r11,r9
0x19db000950af   cef  0f85b1290000   jnz 0x19db00097a66  <+0x36a6>
0x19db000950b5   cf5  458b480f       movl r9,[r8+0xf]
0x19db000950b9   cf9  4d03cd         REX.W addq r9,r13
0x19db000950bc   cfc  49bb09652e08db190000 REX.W movq r11,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db000950c6   d06  458b6303       movl r12,[r11+0x3]
0x19db000950ca   d0a  4d03e5         REX.W addq r12,r13
0x19db000950cd   d0d  41bbb5662e08   movl r11,0x82e66b5      ;; (compressed) object: 0x19db082e66b5 <JSFunction cos (sfi = 0x19db0824ab11)>
0x19db000950d3   d13  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db000950d7   d17  4c894dc0       REX.W movq [rbp-0x40],r9
0x19db000950db   d1b  45395c2427     cmpl [r12+0x27],r11
0x19db000950e0   d20  0f8587290000   jnz 0x19db00097a6d  <+0x36ad>
0x19db000950e6   d26  41bb91682e08   movl r11,0x82e6891      ;; (compressed) object: 0x19db082e6891 <JSFunction sin (sfi = 0x19db0824adb9)>
0x19db000950ec   d2c  45395c246b     cmpl [r12+0x6b],r11
0x19db000950f1   d31  0f857d290000   jnz 0x19db00097a74  <+0x36b4>
0x19db000950f7   d37  4c8b1df6f6ffff REX.W movq r11,[rip+0xfffff6f6]
0x19db000950fe   d3e  4d8b23         REX.W movq r12,[r11]
0x19db00095101   d41  498d9424b8000000 REX.W leaq rdx,[r12+0xb8]
0x19db00095109   d49  488945c8       REX.W movq [rbp-0x38],rax
0x19db0009510d   d4d  4c8b35f8f6ffff REX.W movq r14,[rip+0xfffff6f8]
0x19db00095114   d54  493916         REX.W cmpq [r14],rdx
0x19db00095117   d57  0f8613170000   jna 0x19db00096830  <+0x2470>
0x19db0009511d   d5d  498d542410     REX.W leaq rdx,[r12+0x10]
0x19db00095122   d62  498913         REX.W movq [r11],rdx
0x19db00095125   d65  4983c401       REX.W addq r12,0x1
0x19db00095129   d69  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009512f   d6f  45897c24ff     movl [r12-0x1],r15
0x19db00095134   d74  498b9d58010000 REX.W movq rbx,[r13+0x158] (root (empty_fixed_array))
0x19db0009513b   d7b  41895c2403     movl [r12+0x3],rbx
0x19db00095140   d80  b9c1712f08     movl rcx,0x82f71c1      ;; (compressed) object: 0x19db082f71c1 <FixedArray[4]>
0x19db00095145   d85  41894c2407     movl [r12+0x7],rcx
0x19db0009514a   d8a  41c744240b08000000 movl [r12+0xb],0x8
0x19db00095153   d93  488d4a10       REX.W leaq rcx,[rdx+0x10]
0x19db00095157   d97  49890b         REX.W movq [r11],rcx
0x19db0009515a   d9a  4883c201       REX.W addq rdx,0x1
0x19db0009515e   d9e  44897aff       movl [rdx-0x1],r15
0x19db00095162   da2  895a03         movl [rdx+0x3],rbx
0x19db00095165   da5  bfe5712f08     movl rdi,0x82f71e5      ;; (compressed) object: 0x19db082f71e5 <FixedArray[4]>
0x19db0009516a   daa  897a07         movl [rdx+0x7],rdi
0x19db0009516d   dad  c7420b08000000 movl [rdx+0xb],0x8
0x19db00095174   db4  488d7918       REX.W leaq rdi,[rcx+0x18]
0x19db00095178   db8  49893b         REX.W movq [r11],rdi
0x19db0009517b   dbb  4883c101       REX.W addq rcx,0x1
0x19db0009517f   dbf  4d8b85d0000000 REX.W movq r8,[r13+0xd0] (root (fixed_array_map))
0x19db00095186   dc6  448941ff       movl [rcx-0x1],r8
0x19db0009518a   dca  c7410308000000 movl [rcx+0x3],0x8
0x19db00095191   dd1  c7410700000000 movl [rcx+0x7],0x0
0x19db00095198   dd8  c7410b00000000 movl [rcx+0xb],0x0
0x19db0009519f   ddf  4489610f       movl [rcx+0xf],r12
0x19db000951a3   de3  895113         movl [rcx+0x13],rdx
0x19db000951a6   de6  4c8d6710       REX.W leaq r12,[rdi+0x10]
0x19db000951aa   dea  4d8923         REX.W movq [r11],r12
0x19db000951ad   ded  488d5701       REX.W leaq rdx,[rdi+0x1]
0x19db000951b1   df1  bfa59f3008     movl rdi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db000951b6   df6  897aff         movl [rdx-0x1],rdi
0x19db000951b9   df9  895a03         movl [rdx+0x3],rbx
0x19db000951bc   dfc  894a07         movl [rdx+0x7],rcx
0x19db000951bf   dff  c7420b08000000 movl [rdx+0xb],0x8
0x19db000951c6   e06  4d8d442428     REX.W leaq r8,[r12+0x28]
0x19db000951cb   e0b  4d8903         REX.W movq [r11],r8
0x19db000951ce   e0e  4983c401       REX.W addq r12,0x1
0x19db000951d2   e12  4d8bb5d8010000 REX.W movq r14,[r13+0x1d8] (root (fixed_double_array_map))
0x19db000951d9   e19  45897424ff     movl [r12-0x1],r14
0x19db000951de   e1e  41c744240308000000 movl [r12+0x3],0x8
0x19db000951e7   e27  c5f957c0       vxorpd xmm0,xmm0,xmm0
0x19db000951eb   e2b  c4c17b11442407 vmovsd [r12+0x7],xmm0
0x19db000951f2   e32  c4c17b1144240f vmovsd [r12+0xf],xmm0
0x19db000951f9   e39  c4c17b11442417 vmovsd [r12+0x17],xmm0
0x19db00095200   e40  c4c17b1144241f vmovsd [r12+0x1f],xmm0
0x19db00095207   e47  4d8d7810       REX.W leaq r15,[r8+0x10]
0x19db0009520b   e4b  4d893b         REX.W movq [r11],r15
0x19db0009520e   e4e  4983c001       REX.W addq r8,0x1
0x19db00095212   e52  48b8559f3008db190000 REX.W movq rax,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009521c   e5c  418940ff       movl [r8-0x1],rax
0x19db00095220   e60  41895803       movl [r8+0x3],rbx
0x19db00095224   e64  45896007       movl [r8+0x7],r12
0x19db00095228   e68  41c7400b08000000 movl [r8+0xb],0x8
0x19db00095230   e70  49baa21518b4d3e0ef3f REX.W movq r10,0x3fefe0d3b41815a2
0x19db0009523a   e7a  c4c1f96eca     vmovq xmm1,r10
0x19db0009523f   e7f  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db00095244   e84  c4c1735ccf     vsubsd xmm1,xmm1,xmm15
0x19db00095249   e89  c4c17b114c2407 vmovsd [r12+0x7],xmm1
0x19db00095250   e90  49ba0281c2b8d64fb6bf REX.W movq r10,0xbfb64fd6b8c28102
0x19db0009525a   e9a  c4c1f96ed2     vmovq xmm2,r10
0x19db0009525f   e9f  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db00095264   ea4  c4c16b5cd7     vsubsd xmm2,xmm2,xmm15
0x19db00095269   ea9  c4c17b1154240f vmovsd [r12+0xf],xmm2
0x19db00095270   eb0  44894107       movl [rcx+0x7],r8
0x19db00095274   eb4  4d8d4728       REX.W leaq r8,[r15+0x28]
0x19db00095278   eb8  4d8903         REX.W movq [r11],r8
0x19db0009527b   ebb  4d8d6701       REX.W leaq r12,[r15+0x1]
0x19db0009527f   ebf  45897424ff     movl [r12-0x1],r14
0x19db00095284   ec4  41c744240308000000 movl [r12+0x3],0x8
0x19db0009528d   ecd  c4c17b11442407 vmovsd [r12+0x7],xmm0
0x19db00095294   ed4  c4c17b1144240f vmovsd [r12+0xf],xmm0
0x19db0009529b   edb  c4c17b11442417 vmovsd [r12+0x17],xmm0
0x19db000952a2   ee2  c4c17b1144241f vmovsd [r12+0x1f],xmm0
0x19db000952a9   ee9  4d8d7810       REX.W leaq r15,[r8+0x10]
0x19db000952ad   eed  4d893b         REX.W movq [r11],r15
0x19db000952b0   ef0  4983c001       REX.W addq r8,0x1
0x19db000952b4   ef4  418940ff       movl [r8-0x1],rax
0x19db000952b8   ef8  41895803       movl [r8+0x3],rbx
0x19db000952bc   efc  45896007       movl [r8+0x7],r12
0x19db000952c0   f00  41c7400b08000000 movl [r8+0xb],0x8
0x19db000952c8   f08  49ba0281c2b8d64fb63f REX.W movq r10,0x3fb64fd6b8c28102
0x19db000952d2   f12  c4c1f96ed2     vmovq xmm2,r10
0x19db000952d7   f17  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db000952dc   f1c  c4c16b5cd7     vsubsd xmm2,xmm2,xmm15
0x19db000952e1   f21  c4c17b11542407 vmovsd [r12+0x7],xmm2
0x19db000952e8   f28  c4c17b114c240f vmovsd [r12+0xf],xmm1
0x19db000952ef   f2f  4489410b       movl [rcx+0xb],r8
0x19db000952f3   f33  458b413b       movl r8,[r9+0x3b]
0x19db000952f7   f37  4d03c5         REX.W addq r8,r13
0x19db000952fa   f3a  41f6c001       testb r8,0x1
0x19db000952fe   f3e  0f8477270000   jz 0x19db00097a7b  <+0x36bb>
0x19db00095304   f44  458b60ff       movl r12,[r8-0x1]
0x19db00095308   f48  4d03e5         REX.W addq r12,r13
0x19db0009530b   f4b  6641817c24072c04 cmpw [r12+0x7],0x42c
0x19db00095313   f53  0f8569270000   jnz 0x19db00097a82  <+0x36c2>
0x19db00095319   f59  458b6013       movl r12,[r8+0x13]
0x19db0009531d   f5d  4d03e5         REX.W addq r12,r13
0x19db00095320   f60  49bfd1422f08db190000 REX.W movq r15,0x19db082f42d1    ;; object: 0x19db082f42d1 <FeedbackCell[many closures]>
0x19db0009532a   f6a  4d3be7         REX.W cmpq r12,r15
0x19db0009532d   f6d  0f8556270000   jnz 0x19db00097a89  <+0x36c9>
0x19db00095333   f73  ff75c8         push [rbp-0x38]
0x19db00095336   f76  52             push rdx
0x19db00095337   f77  4d8ba590000000 REX.W movq r12,[r13+0x90] (root (undefined_value))
0x19db0009533e   f7e  4154           push r12
0x19db00095340   f80  498bf8         REX.W movq rdi,r8
0x19db00095343   f83  488bc8         REX.W movq rcx,rax
0x19db00095346   f86  b802000000     movl rax,0x2
0x19db0009534b   f8b  4c8bc6         REX.W movq r8,rsi
0x19db0009534e   f8e  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00095358   f98  488b55c8       REX.W movq rdx,[rbp-0x38]
0x19db0009535c   f9c  4c8b1505f7ffff REX.W movq r10,[rip+0xfffff705]
0x19db00095363   fa3  41ffd2         call r10
0x19db00095366   fa6  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009536a   faa  894613         movl [rsi+0x13],rax
0x19db0009536d   fad  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db00095374   fb4  4c23c6         REX.W andq r8,rsi
0x19db00095377   fb7  41f6400804     testb [r8+0x8],0x4
0x19db0009537c   fbc  0f8538240000   jnz 0x19db000977ba  <+0x33fa>
0x19db00095382   fc2  448b4647       movl r8,[rsi+0x47]
0x19db00095386   fc6  4d03c5         REX.W addq r8,r13
0x19db00095389   fc9  448b4e0f       movl r9,[rsi+0xf]
0x19db0009538d   fcd  4d03cd         REX.W addq r9,r13
0x19db00095390   fd0  41f6c101       testb r9,0x1
0x19db00095394   fd4  0f84fd260000   jz 0x19db00097a97  <+0x36d7>
0x19db0009539a   fda  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db000953a0   fe0  453959ff       cmpl [r9-0x1],r11
0x19db000953a4   fe4  0f85f4260000   jnz 0x19db00097a9e  <+0x36de>
0x19db000953aa   fea  458b6107       movl r12,[r9+0x7]
0x19db000953ae   fee  4d03e5         REX.W addq r12,r13
0x19db000953b1   ff1  458b710b       movl r14,[r9+0xb]
0x19db000953b5   ff5  41d1fe         sarl r14, 1
0x19db000953b8   ff8  4183fe08       cmpl r14,0x8
0x19db000953bc   ffc  0f86e3260000   jna 0x19db00097aa5  <+0x36e5>
0x19db000953c2  1002  418b542427     movl rdx,[r12+0x27]
0x19db000953c7  1007  4903d5         REX.W addq rdx,r13
0x19db000953ca  100a  488945c8       REX.W movq [rbp-0x38],rax
0x19db000953ce  100e  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db000953d2  1012  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db000953dc  101c  4c8be0         REX.W movq r12,rax
0x19db000953df  101f  b858000000     movl rax,0x58
0x19db000953e4  1024  4c8bce         REX.W movq r9,rsi
0x19db000953e7  1027  4c8b1521f2ffff REX.W movq r10,[rip+0xfffff221]
0x19db000953ee  102e  41ffd2         call r10
0x19db000953f1  1031  a801           test al,0x1
0x19db000953f3  1033  0f84ba260000   jz 0x19db00097ab3  <+0x36f3>
0x19db000953f9  1039  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00095403  1043  443940ff       cmpl [rax-0x1],r8
0x19db00095407  1047  0f85ad260000   jnz 0x19db00097aba  <+0x36fa>
0x19db0009540d  104d  448b4807       movl r9,[rax+0x7]
0x19db00095411  1051  4d03cd         REX.W addq r9,r13
0x19db00095414  1054  448b600b       movl r12,[rax+0xb]
0x19db00095418  1058  41d1fc         sarl r12, 1
0x19db0009541b  105b  4183fc00       cmpl r12,0x0
0x19db0009541f  105f  0f869c260000   jna 0x19db00097ac1  <+0x3701>
0x19db00095425  1065  c4c17b104107   vmovsd xmm0,[r9+0x7]
0x19db0009542b  106b  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009542f  106f  448b4e0f       movl r9,[rsi+0xf]
0x19db00095433  1073  4d03cd         REX.W addq r9,r13
0x19db00095436  1076  41f6c101       testb r9,0x1
0x19db0009543a  107a  0f8488260000   jz 0x19db00097ac8  <+0x3708>
0x19db00095440  1080  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00095446  1086  453959ff       cmpl [r9-0x1],r11
0x19db0009544a  108a  0f857f260000   jnz 0x19db00097acf  <+0x370f>
0x19db00095450  1090  458b6107       movl r12,[r9+0x7]
0x19db00095454  1094  4d03e5         REX.W addq r12,r13
0x19db00095457  1097  458b490b       movl r9,[r9+0xb]
0x19db0009545b  109b  41d1f9         sarl r9, 1
0x19db0009545e  109e  4183f908       cmpl r9,0x8
0x19db00095462  10a2  0f866e260000   jna 0x19db00097ad6  <+0x3716>
0x19db00095468  10a8  418b542427     movl rdx,[r12+0x27]
0x19db0009546d  10ad  4903d5         REX.W addq rdx,r13
0x19db00095470  10b0  c5fb1145c0     vmovsd [rbp-0x40],xmm0
0x19db00095475  10b5  b864000000     movl rax,0x64
0x19db0009547a  10ba  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db00095484  10c4  4c8bce         REX.W movq r9,rsi
0x19db00095487  10c7  4c8b1581f1ffff REX.W movq r10,[rip+0xfffff181]
0x19db0009548e  10ce  41ffd2         call r10
0x19db00095491  10d1  a801           test al,0x1
0x19db00095493  10d3  0f844b260000   jz 0x19db00097ae4  <+0x3724>
0x19db00095499  10d9  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000954a3  10e3  443940ff       cmpl [rax-0x1],r8
0x19db000954a7  10e7  0f853e260000   jnz 0x19db00097aeb  <+0x372b>
0x19db000954ad  10ed  448b4807       movl r9,[rax+0x7]
0x19db000954b1  10f1  4d03cd         REX.W addq r9,r13
0x19db000954b4  10f4  448b600b       movl r12,[rax+0xb]
0x19db000954b8  10f8  41d1fc         sarl r12, 1
0x19db000954bb  10fb  4183fc01       cmpl r12,0x1
0x19db000954bf  10ff  0f862d260000   jna 0x19db00097af2  <+0x3732>
0x19db000954c5  1105  c4c17b10410f   vmovsd xmm0,[r9+0xf]
0x19db000954cb  110b  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db000954cf  110f  448b4e0f       movl r9,[rsi+0xf]
0x19db000954d3  1113  4d03cd         REX.W addq r9,r13
0x19db000954d6  1116  41f6c101       testb r9,0x1
0x19db000954da  111a  0f8419260000   jz 0x19db00097af9  <+0x3739>
0x19db000954e0  1120  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db000954e6  1126  453959ff       cmpl [r9-0x1],r11
0x19db000954ea  112a  0f8510260000   jnz 0x19db00097b00  <+0x3740>
0x19db000954f0  1130  458b6107       movl r12,[r9+0x7]
0x19db000954f4  1134  4d03e5         REX.W addq r12,r13
0x19db000954f7  1137  458b490b       movl r9,[r9+0xb]
0x19db000954fb  113b  41d1f9         sarl r9, 1
0x19db000954fe  113e  4183f908       cmpl r9,0x8
0x19db00095502  1142  0f86ff250000   jna 0x19db00097b07  <+0x3747>
0x19db00095508  1148  418b542427     movl rdx,[r12+0x27]
0x19db0009550d  114d  4903d5         REX.W addq rdx,r13
0x19db00095510  1150  c5fb1145b8     vmovsd [rbp-0x48],xmm0
0x19db00095515  1155  b870000000     movl rax,0x70
0x19db0009551a  115a  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db00095524  1164  4c8bce         REX.W movq r9,rsi
0x19db00095527  1167  4c8b15e1f0ffff REX.W movq r10,[rip+0xfffff0e1]
0x19db0009552e  116e  41ffd2         call r10
0x19db00095531  1171  a801           test al,0x1
0x19db00095533  1173  0f84dc250000   jz 0x19db00097b15  <+0x3755>
0x19db00095539  1179  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00095543  1183  443940ff       cmpl [rax-0x1],r8
0x19db00095547  1187  0f85cf250000   jnz 0x19db00097b1c  <+0x375c>
0x19db0009554d  118d  448b4807       movl r9,[rax+0x7]
0x19db00095551  1191  4d03cd         REX.W addq r9,r13
0x19db00095554  1194  448b600b       movl r12,[rax+0xb]
0x19db00095558  1198  41d1fc         sarl r12, 1
0x19db0009555b  119b  4183fc02       cmpl r12,0x2
0x19db0009555f  119f  0f86be250000   jna 0x19db00097b23  <+0x3763>
0x19db00095565  11a5  c4c17b104117   vmovsd xmm0,[r9+0x17]
0x19db0009556b  11ab  f645d001       testb [rbp-0x30],0x1
0x19db0009556f  11af  0f84b5250000   jz 0x19db00097b2a  <+0x376a>
0x19db00095575  11b5  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db00095579  11b9  458b61ff       movl r12,[r9-0x1]
0x19db0009557d  11bd  4d03e5         REX.W addq r12,r13
0x19db00095580  11c0  6641817c24072c04 cmpw [r12+0x7],0x42c
0x19db00095588  11c8  0f85a3250000   jnz 0x19db00097b31  <+0x3771>
0x19db0009558e  11ce  458b6113       movl r12,[r9+0x13]
0x19db00095592  11d2  4d03e5         REX.W addq r12,r13
0x19db00095595  11d5  49bbf5422f08db190000 REX.W movq r11,0x19db082f42f5    ;; object: 0x19db082f42f5 <FeedbackCell[many closures]>
0x19db0009559f  11df  4d39e3         REX.W cmpq r11,r12
0x19db000955a2  11e2  0f8590250000   jnz 0x19db00097b38  <+0x3778>
0x19db000955a8  11e8  458b610f       movl r12,[r9+0xf]
0x19db000955ac  11ec  4d03e5         REX.W addq r12,r13
0x19db000955af  11ef  4c8b1d3ef2ffff REX.W movq r11,[rip+0xfffff23e]
0x19db000955b6  11f6  4d8b33         REX.W movq r14,[r11]
0x19db000955b9  11f9  4d8dbee0000000 REX.W leaq r15,[r14+0xe0]
0x19db000955c0  1200  c5fb1145b0     vmovsd [rbp-0x50],xmm0
0x19db000955c5  1205  4c8965a8       REX.W movq [rbp-0x58],r12
0x19db000955c9  1209  488b053cf2ffff REX.W movq rax,[rip+0xfffff23c]
0x19db000955d0  1210  4c3938         REX.W cmpq [rax],r15
0x19db000955d3  1213  0f867e120000   jna 0x19db00096857  <+0x2497>
0x19db000955d9  1219  4d8d7e10       REX.W leaq r15,[r14+0x10]
0x19db000955dd  121d  4d893b         REX.W movq [r11],r15
0x19db000955e0  1220  4983c601       REX.W addq r14,0x1
0x19db000955e4  1224  bbb59e3008     movl rbx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000955e9  1229  41895eff       movl [r14-0x1],rbx
0x19db000955ed  122d  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db000955f4  1234  41895603       movl [r14+0x3],rdx
0x19db000955f8  1238  b9e5562f08     movl rcx,0x82f56e5      ;; (compressed) object: 0x19db082f56e5 <FixedArray[4]>
0x19db000955fd  123d  41894e07       movl [r14+0x7],rcx
0x19db00095601  1241  41c7460b08000000 movl [r14+0xb],0x8
0x19db00095609  1249  498d4f18       REX.W leaq rcx,[r15+0x18]
0x19db0009560d  124d  49890b         REX.W movq [r11],rcx
0x19db00095610  1250  4983c701       REX.W addq r15,0x1
0x19db00095614  1254  498bb5d0000000 REX.W movq rsi,[r13+0xd0] (root (fixed_array_map))
0x19db0009561b  125b  418977ff       movl [r15-0x1],rsi
0x19db0009561f  125f  41c7470308000000 movl [r15+0x3],0x8
0x19db00095627  1267  41c7470700000000 movl [r15+0x7],0x0
0x19db0009562f  126f  41c7470b00000000 movl [r15+0xb],0x0
0x19db00095637  1277  41c7470f00000000 movl [r15+0xf],0x0
0x19db0009563f  127f  45897713       movl [r15+0x13],r14
0x19db00095643  1283  4c8d7110       REX.W leaq r14,[rcx+0x10]
0x19db00095647  1287  4d8933         REX.W movq [r11],r14
0x19db0009564a  128a  4883c101       REX.W addq rcx,0x1
0x19db0009564e  128e  bfa59f3008     movl rdi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00095653  1293  8979ff         movl [rcx-0x1],rdi
0x19db00095656  1296  895103         movl [rcx+0x3],rdx
0x19db00095659  1299  44897907       movl [rcx+0x7],r15
0x19db0009565d  129d  c7410b08000000 movl [rcx+0xb],0x8
0x19db00095664  12a4  4d8d4e28       REX.W leaq r9,[r14+0x28]
0x19db00095668  12a8  4d890b         REX.W movq [r11],r9
0x19db0009566b  12ab  4983c601       REX.W addq r14,0x1
0x19db0009566f  12af  498b85d8010000 REX.W movq rax,[r13+0x1d8] (root (fixed_double_array_map))
0x19db00095676  12b6  418946ff       movl [r14-0x1],rax
0x19db0009567a  12ba  41c7460308000000 movl [r14+0x3],0x8
0x19db00095682  12c2  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db00095686  12c6  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0009568b  12cb  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db00095690  12d0  c4c17b114e07   vmovsd [r14+0x7],xmm1
0x19db00095696  12d6  c5e957d2       vxorpd xmm2,xmm2,xmm2
0x19db0009569a  12da  c4c17b11560f   vmovsd [r14+0xf],xmm2
0x19db000956a0  12e0  c4c17b115617   vmovsd [r14+0x17],xmm2
0x19db000956a6  12e6  c4c17b11561f   vmovsd [r14+0x1f],xmm2
0x19db000956ac  12ec  498d7110       REX.W leaq rsi,[r9+0x10]
0x19db000956b0  12f0  498933         REX.W movq [r11],rsi
0x19db000956b3  12f3  4983c101       REX.W addq r9,0x1
0x19db000956b7  12f7  458941ff       movl [r9-0x1],r8
0x19db000956bb  12fb  41895103       movl [r9+0x3],rdx
0x19db000956bf  12ff  45897107       movl [r9+0x7],r14
0x19db000956c3  1303  41c7410b08000000 movl [r9+0xb],0x8
0x19db000956cb  130b  c5fb1065c0     vmovsd xmm4,[rbp-0x40]
0x19db000956d0  1310  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db000956d5  1315  c4c15b5ce7     vsubsd xmm4,xmm4,xmm15
0x19db000956da  131a  c4c17b11661f   vmovsd [r14+0x1f],xmm4
0x19db000956e0  1320  45894f07       movl [r15+0x7],r9
0x19db000956e4  1324  4c8d4e28       REX.W leaq r9,[rsi+0x28]
0x19db000956e8  1328  4d890b         REX.W movq [r11],r9
0x19db000956eb  132b  4c8d7601       REX.W leaq r14,[rsi+0x1]
0x19db000956ef  132f  418946ff       movl [r14-0x1],rax
0x19db000956f3  1333  41c7460308000000 movl [r14+0x3],0x8
0x19db000956fb  133b  c4c17b115607   vmovsd [r14+0x7],xmm2
0x19db00095701  1341  c4c17b114e0f   vmovsd [r14+0xf],xmm1
0x19db00095707  1347  c4c17b115617   vmovsd [r14+0x17],xmm2
0x19db0009570d  134d  c4c17b11561f   vmovsd [r14+0x1f],xmm2
0x19db00095713  1353  498d7110       REX.W leaq rsi,[r9+0x10]
0x19db00095717  1357  498933         REX.W movq [r11],rsi
0x19db0009571a  135a  4983c101       REX.W addq r9,0x1
0x19db0009571e  135e  458941ff       movl [r9-0x1],r8
0x19db00095722  1362  41895103       movl [r9+0x3],rdx
0x19db00095726  1366  45897107       movl [r9+0x7],r14
0x19db0009572a  136a  41c7410b08000000 movl [r9+0xb],0x8
0x19db00095732  1372  c5fb1065b8     vmovsd xmm4,[rbp-0x48]
0x19db00095737  1377  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db0009573c  137c  c4c15b5ce7     vsubsd xmm4,xmm4,xmm15
0x19db00095741  1381  c4c17b11661f   vmovsd [r14+0x1f],xmm4
0x19db00095747  1387  45894f0b       movl [r15+0xb],r9
0x19db0009574b  138b  4c8d4e28       REX.W leaq r9,[rsi+0x28]
0x19db0009574f  138f  4d890b         REX.W movq [r11],r9
0x19db00095752  1392  4c8d7601       REX.W leaq r14,[rsi+0x1]
0x19db00095756  1396  418946ff       movl [r14-0x1],rax
0x19db0009575a  139a  41c7460308000000 movl [r14+0x3],0x8
0x19db00095762  13a2  c4c17b115607   vmovsd [r14+0x7],xmm2
0x19db00095768  13a8  c4c17b11560f   vmovsd [r14+0xf],xmm2
0x19db0009576e  13ae  c4c17b114e17   vmovsd [r14+0x17],xmm1
0x19db00095774  13b4  c4c17b11561f   vmovsd [r14+0x1f],xmm2
0x19db0009577a  13ba  498d7110       REX.W leaq rsi,[r9+0x10]
0x19db0009577e  13be  498933         REX.W movq [r11],rsi
0x19db00095781  13c1  4983c101       REX.W addq r9,0x1
0x19db00095785  13c5  458941ff       movl [r9-0x1],r8
0x19db00095789  13c9  41895103       movl [r9+0x3],rdx
0x19db0009578d  13cd  45897107       movl [r9+0x7],r14
0x19db00095791  13d1  41c7410b08000000 movl [r9+0xb],0x8
0x19db00095799  13d9  c5f928c8       vmovapd xmm1,xmm0
0x19db0009579d  13dd  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db000957a2  13e2  c4c1735ccf     vsubsd xmm1,xmm1,xmm15
0x19db000957a7  13e7  c4c17b114e1f   vmovsd [r14+0x1f],xmm1
0x19db000957ad  13ed  45894f0f       movl [r15+0xf],r9
0x19db000957b1  13f1  458b4c243b     movl r9,[r12+0x3b]
0x19db000957b6  13f6  4d03cd         REX.W addq r9,r13
0x19db000957b9  13f9  41f6c101       testb r9,0x1
0x19db000957bd  13fd  0f847c230000   jz 0x19db00097b3f  <+0x377f>
0x19db000957c3  1403  458b71ff       movl r14,[r9-0x1]
0x19db000957c7  1407  4d03f5         REX.W addq r14,r13
0x19db000957ca  140a  6641817e072c04 cmpw [r14+0x7],0x42c
0x19db000957d1  1411  0f856f230000   jnz 0x19db00097b46  <+0x3786>
0x19db000957d7  1417  458b7113       movl r14,[r9+0x13]
0x19db000957db  141b  4d03f5         REX.W addq r14,r13
0x19db000957de  141e  49bfd1422f08db190000 REX.W movq r15,0x19db082f42d1    ;; object: 0x19db082f42d1 <FeedbackCell[many closures]>
0x19db000957e8  1428  4d3bf7         REX.W cmpq r14,r15
0x19db000957eb  142b  0f855c230000   jnz 0x19db00097b4d  <+0x378d>
0x19db000957f1  1431  ff75c8         push [rbp-0x38]
0x19db000957f4  1434  51             push rcx
0x19db000957f5  1435  4d8bb590000000 REX.W movq r14,[r13+0x90] (root (undefined_value))
0x19db000957fc  143c  4156           push r14
0x19db000957fe  143e  498bf9         REX.W movq rdi,r9
0x19db00095801  1441  b802000000     movl rax,0x2
0x19db00095806  1446  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00095810  1450  4c8b0df5efffff REX.W movq r9,[rip+0xffffeff5]
0x19db00095817  1457  498b8dd0000000 REX.W movq rcx,[r13+0xd0] (root (fixed_array_map))
0x19db0009581e  145e  4c8b1543f2ffff REX.W movq r10,[rip+0xfffff243]
0x19db00095825  1465  41ffd2         call r10
0x19db00095828  1468  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009582c  146c  894613         movl [rsi+0x13],rax
0x19db0009582f  146f  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db00095836  1476  4c23c6         REX.W andq r8,rsi
0x19db00095839  1479  41f6400804     testb [r8+0x8],0x4
0x19db0009583e  147e  0f85281f0000   jnz 0x19db0009776c  <+0x33ac>
0x19db00095844  1484  448b463b       movl r8,[rsi+0x3b]
0x19db00095848  1488  4d03c5         REX.W addq r8,r13
0x19db0009584b  148b  448b4e17       movl r9,[rsi+0x17]
0x19db0009584f  148f  4d03cd         REX.W addq r9,r13
0x19db00095852  1492  41f6c001       testb r8,0x1
0x19db00095856  1496  0f84ff220000   jz 0x19db00097b5b  <+0x379b>
0x19db0009585c  149c  458b60ff       movl r12,[r8-0x1]
0x19db00095860  14a0  4d03e5         REX.W addq r12,r13
0x19db00095863  14a3  6641817c24072c04 cmpw [r12+0x7],0x42c
0x19db0009586b  14ab  0f85f1220000   jnz 0x19db00097b62  <+0x37a2>
0x19db00095871  14b1  458b6013       movl r12,[r8+0x13]
0x19db00095875  14b5  4d03e5         REX.W addq r12,r13
0x19db00095878  14b8  49bbd1422f08db190000 REX.W movq r11,0x19db082f42d1    ;; object: 0x19db082f42d1 <FeedbackCell[many closures]>
0x19db00095882  14c2  4d39e3         REX.W cmpq r11,r12
0x19db00095885  14c5  0f85de220000   jnz 0x19db00097b69  <+0x37a9>
0x19db0009588b  14cb  458b600f       movl r12,[r8+0xf]
0x19db0009588f  14cf  4c8b15fcebffff REX.W movq r10,[rip+0xffffebfc]
0x19db00095896  14d6  4d39e2         REX.W cmpq r10,r12
0x19db00095899  14d9  7712           ja 0x19db000958ad  <+0x14ed>
0x19db0009589b  14db  488b15ffebffff REX.W movq rdx,[rip+0xffffebff]
0x19db000958a2  14e2  4c8b152febffff REX.W movq r10,[rip+0xffffeb2f]
0x19db000958a9  14e9  41ffd2         call r10
0x19db000958ac  14ec  cc             int3l
0x19db000958ad  14ed  4c8b1d40efffff REX.W movq r11,[rip+0xffffef40]
0x19db000958b4  14f4  4d8b33         REX.W movq r14,[r11]
0x19db000958b7  14f7  4d8d7e68       REX.W leaq r15,[r14+0x68]
0x19db000958bb  14fb  488945c0       REX.W movq [rbp-0x40],rax
0x19db000958bf  14ff  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db000958c3  1503  4c894db8       REX.W movq [rbp-0x48],r9
0x19db000958c7  1507  4c8965b0       REX.W movq [rbp-0x50],r12
0x19db000958cb  150b  488b1d3aefffff REX.W movq rbx,[rip+0xffffef3a]
0x19db000958d2  1512  4c393b         REX.W cmpq [rbx],r15
0x19db000958d5  1515  0f86ae0f0000   jna 0x19db00096889  <+0x24c9>
0x19db000958db  151b  4d8d7e10       REX.W leaq r15,[r14+0x10]
0x19db000958df  151f  4d893b         REX.W movq [r11],r15
0x19db000958e2  1522  4983c601       REX.W addq r14,0x1
0x19db000958e6  1526  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000958f0  1530  418956ff       movl [r14-0x1],rdx
0x19db000958f4  1534  498b8d58010000 REX.W movq rcx,[r13+0x158] (root (empty_fixed_array))
0x19db000958fb  153b  41894e03       movl [r14+0x3],rcx
0x19db000958ff  153f  41894e07       movl [r14+0x7],rcx
0x19db00095903  1543  41c7460b00000000 movl [r14+0xb],0x0
0x19db0009590b  154b  498d7f10       REX.W leaq rdi,[r15+0x10]
0x19db0009590f  154f  49893b         REX.W movq [r11],rdi
0x19db00095912  1552  4983c701       REX.W addq r15,0x1
0x19db00095916  1556  418957ff       movl [r15-0x1],rdx
0x19db0009591a  155a  41894f03       movl [r15+0x3],rcx
0x19db0009591e  155e  41894f07       movl [r15+0x7],rcx
0x19db00095922  1562  41c7470b00000000 movl [r15+0xb],0x0
0x19db0009592a  156a  4c8d4710       REX.W leaq r8,[rdi+0x10]
0x19db0009592e  156e  4d8903         REX.W movq [r11],r8
0x19db00095931  1571  4883c701       REX.W addq rdi,0x1
0x19db00095935  1575  8957ff         movl [rdi-0x1],rdx
0x19db00095938  1578  894f03         movl [rdi+0x3],rcx
0x19db0009593b  157b  894f07         movl [rdi+0x7],rcx
0x19db0009593e  157e  c7470b00000000 movl [rdi+0xb],0x0
0x19db00095945  1585  4d8d6010       REX.W leaq r12,[r8+0x10]
0x19db00095949  1589  4d8923         REX.W movq [r11],r12
0x19db0009594c  158c  4983c001       REX.W addq r8,0x1
0x19db00095950  1590  418950ff       movl [r8-0x1],rdx
0x19db00095954  1594  41894803       movl [r8+0x3],rcx
0x19db00095958  1598  41894807       movl [r8+0x7],rcx
0x19db0009595c  159c  41c7400b00000000 movl [r8+0xb],0x0
0x19db00095964  15a4  498d542418     REX.W leaq rdx,[r12+0x18]
0x19db00095969  15a9  498913         REX.W movq [r11],rdx
0x19db0009596c  15ac  4983c401       REX.W addq r12,0x1
0x19db00095970  15b0  4c89e6         REX.W movq rsi,r12
0x19db00095973  15b3  4d8ba5d0000000 REX.W movq r12,[r13+0xd0] (root (fixed_array_map))
0x19db0009597a  15ba  448966ff       movl [rsi-0x1],r12
0x19db0009597e  15be  c7460308000000 movl [rsi+0x3],0x8
0x19db00095985  15c5  44897607       movl [rsi+0x7],r14
0x19db00095989  15c9  44897e0b       movl [rsi+0xb],r15
0x19db0009598d  15cd  897e0f         movl [rsi+0xf],rdi
0x19db00095990  15d0  44894613       movl [rsi+0x13],r8
0x19db00095994  15d4  4c8d4210       REX.W leaq r8,[rdx+0x10]
0x19db00095998  15d8  4d8903         REX.W movq [r11],r8
0x19db0009599b  15db  4c8d4201       REX.W leaq r8,[rdx+0x1]
0x19db0009599f  15df  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db000959a5  15e5  458960ff       movl [r8-0x1],r12
0x19db000959a9  15e9  41894803       movl [r8+0x3],rcx
0x19db000959ad  15ed  41897007       movl [r8+0x7],rsi
0x19db000959b1  15f1  41c7400b08000000 movl [r8+0xb],0x8
0x19db000959b9  15f9  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db000959bd  15fd  4533f6         xorl r14,r14
0x19db000959c0  1600  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000959ca  160a  48be9061fef6ff7f0000 REX.W movq rsi,0x7ffff6fe6190    ;; external reference (Runtime::TransitionElementsKind)
0x19db000959d4  1614  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000959da  161a  e90d000000     jmp 0x19db000959ec  <+0x162c>
0x19db000959df  161f  90             nop
0x19db000959e0  1620  4d8bc1         REX.W movq r8,r9
0x19db000959e3  1623  4d89e1         REX.W movq r9,r12
0x19db000959e6  1626  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db000959ec  162c  4183fe04       cmpl r14,0x4
0x19db000959f0  1630  0f8398060000   jnc 0x19db0009608e  <+0x1cce>
0x19db000959f6  1636  418b4807       movl rcx,[r8+0x7]
0x19db000959fa  163a  4903cd         REX.W addq rcx,r13
0x19db000959fd  163d  418b780b       movl rdi,[r8+0xb]
0x19db00095a01  1641  d1ff           sarl rdi, 1
0x19db00095a03  1643  443bf7         cmpl r14,rdi
0x19db00095a06  1646  0f8364210000   jnc 0x19db00097b70  <+0x37b0>
0x19db00095a0c  164c  428b4cb107     movl rcx,[rcx+r14*4+0x7]
0x19db00095a11  1651  4903cd         REX.W addq rcx,r13
0x19db00095a14  1654  a801           test al,0x1
0x19db00095a16  1656  0f845b210000   jz 0x19db00097b77  <+0x37b7>
0x19db00095a1c  165c  443960ff       cmpl [rax-0x1],r12
0x19db00095a20  1660  0f8558210000   jnz 0x19db00097b7e  <+0x37be>
0x19db00095a26  1666  8b7807         movl rdi,[rax+0x7]
0x19db00095a29  1669  4903fd         REX.W addq rdi,r13
0x19db00095a2c  166c  448b400b       movl r8,[rax+0xb]
0x19db00095a30  1670  41d1f8         sarl r8, 1
0x19db00095a33  1673  453bf0         cmpl r14,r8
0x19db00095a36  1676  0f8349210000   jnc 0x19db00097b85  <+0x37c5>
0x19db00095a3c  167c  468b44b707     movl r8,[rdi+r14*4+0x7]
0x19db00095a41  1681  4d03c5         REX.W addq r8,r13
0x19db00095a44  1684  41f6c001       testb r8,0x1
0x19db00095a48  1688  0f843e210000   jz 0x19db00097b8c  <+0x37cc>
0x19db00095a4e  168e  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db00095a52  1692  48898d60ffffff REX.W movq [rbp-0xa0],rcx
0x19db00095a59  1699  453978ff       cmpl [r8-0x1],r15
0x19db00095a5d  169d  0f84540e0000   jz 0x19db000968b7  <+0x24f7>
0x19db00095a63  16a3  413950ff       cmpl [r8-0x1],rdx
0x19db00095a67  16a7  0f8526210000   jnz 0x19db00097b93  <+0x37d3>
0x19db00095a6d  16ad  418b4007       movl rax,[r8+0x7]
0x19db00095a71  16b1  4903c5         REX.W addq rax,r13
0x19db00095a74  16b4  458b400b       movl r8,[r8+0xb]
0x19db00095a78  16b8  41d1f8         sarl r8, 1
0x19db00095a7b  16bb  4183f800       cmpl r8,0x0
0x19db00095a7f  16bf  0f8615210000   jna 0x19db00097b9a  <+0x37da>
0x19db00095a85  16c5  c5fb104007     vmovsd xmm0,[rax+0x7]
0x19db00095a8a  16ca  41f6c101       testb r9,0x1
0x19db00095a8e  16ce  0f840d210000   jz 0x19db00097ba1  <+0x37e1>
0x19db00095a94  16d4  453961ff       cmpl [r9-0x1],r12
0x19db00095a98  16d8  0f850a210000   jnz 0x19db00097ba8  <+0x37e8>
0x19db00095a9e  16de  458b6107       movl r12,[r9+0x7]
0x19db00095aa2  16e2  4d03e5         REX.W addq r12,r13
0x19db00095aa5  16e5  418b490b       movl rcx,[r9+0xb]
0x19db00095aa9  16e9  d1f9           sarl rcx, 1
0x19db00095aab  16eb  83f900         cmpl rcx,0x0
0x19db00095aae  16ee  0f86fb200000   jna 0x19db00097baf  <+0x37ef>
0x19db00095ab4  16f4  458b4c2407     movl r9,[r12+0x7]
0x19db00095ab9  16f9  4d03cd         REX.W addq r9,r13
0x19db00095abc  16fc  41f6c101       testb r9,0x1
0x19db00095ac0  1700  0f84f0200000   jz 0x19db00097bb6  <+0x37f6>
0x19db00095ac6  1706  453979ff       cmpl [r9-0x1],r15
0x19db00095aca  170a  0f844a0e0000   jz 0x19db0009691a  <+0x255a>
0x19db00095ad0  1710  413951ff       cmpl [r9-0x1],rdx
0x19db00095ad4  1714  0f85e3200000   jnz 0x19db00097bbd  <+0x37fd>
0x19db00095ada  171a  458b7107       movl r14,[r9+0x7]
0x19db00095ade  171e  4d03f5         REX.W addq r14,r13
0x19db00095ae1  1721  458b490b       movl r9,[r9+0xb]
0x19db00095ae5  1725  41d1f9         sarl r9, 1
0x19db00095ae8  1728  4183f900       cmpl r9,0x0
0x19db00095aec  172c  0f86d2200000   jna 0x19db00097bc4  <+0x3804>
0x19db00095af2  1732  c4c17b104e07   vmovsd xmm1,[r14+0x7]
0x19db00095af8  1738  4183f801       cmpl r8,0x1
0x19db00095afc  173c  0f86c9200000   jna 0x19db00097bcb  <+0x380b>
0x19db00095b02  1742  c5fb10500f     vmovsd xmm2,[rax+0xf]
0x19db00095b07  1747  83f901         cmpl rcx,0x1
0x19db00095b0a  174a  0f86c2200000   jna 0x19db00097bd2  <+0x3812>
0x19db00095b10  1750  458b4c240b     movl r9,[r12+0xb]
0x19db00095b15  1755  4d03cd         REX.W addq r9,r13
0x19db00095b18  1758  41f6c101       testb r9,0x1
0x19db00095b1c  175c  0f84b7200000   jz 0x19db00097bd9  <+0x3819>
0x19db00095b22  1762  453979ff       cmpl [r9-0x1],r15
0x19db00095b26  1766  0f84790e0000   jz 0x19db000969a5  <+0x25e5>
0x19db00095b2c  176c  413951ff       cmpl [r9-0x1],rdx
0x19db00095b30  1770  0f85aa200000   jnz 0x19db00097be0  <+0x3820>
0x19db00095b36  1776  458b7107       movl r14,[r9+0x7]
0x19db00095b3a  177a  4d03f5         REX.W addq r14,r13
0x19db00095b3d  177d  458b490b       movl r9,[r9+0xb]
0x19db00095b41  1781  41d1f9         sarl r9, 1
0x19db00095b44  1784  4183f900       cmpl r9,0x0
0x19db00095b48  1788  0f8699200000   jna 0x19db00097be7  <+0x3827>
0x19db00095b4e  178e  c4c17b106607   vmovsd xmm4,[r14+0x7]
0x19db00095b54  1794  4183f802       cmpl r8,0x2
0x19db00095b58  1798  0f8690200000   jna 0x19db00097bee  <+0x382e>
0x19db00095b5e  179e  4c8bc0         REX.W movq r8,rax
0x19db00095b61  17a1  c4c17b106817   vmovsd xmm5,[r8+0x17]
0x19db00095b67  17a7  83f902         cmpl rcx,0x2
0x19db00095b6a  17aa  0f8685200000   jna 0x19db00097bf5  <+0x3835>
0x19db00095b70  17b0  458b44240f     movl r8,[r12+0xf]
0x19db00095b75  17b5  4d03c5         REX.W addq r8,r13
0x19db00095b78  17b8  41f6c001       testb r8,0x1
0x19db00095b7c  17bc  0f847a200000   jz 0x19db00097bfc  <+0x383c>
0x19db00095b82  17c2  453978ff       cmpl [r8-0x1],r15
0x19db00095b86  17c6  0f84c30e0000   jz 0x19db00096a4f  <+0x268f>
0x19db00095b8c  17cc  413950ff       cmpl [r8-0x1],rdx
0x19db00095b90  17d0  0f856d200000   jnz 0x19db00097c03  <+0x3843>
0x19db00095b96  17d6  458b4807       movl r9,[r8+0x7]
0x19db00095b9a  17da  4d03cd         REX.W addq r9,r13
0x19db00095b9d  17dd  458b400b       movl r8,[r8+0xb]
0x19db00095ba1  17e1  41d1f8         sarl r8, 1
0x19db00095ba4  17e4  4183f800       cmpl r8,0x0
0x19db00095ba8  17e8  0f865c200000   jna 0x19db00097c0a  <+0x384a>
0x19db00095bae  17ee  c4c17b107107   vmovsd xmm6,[r9+0x7]
0x19db00095bb4  17f4  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00095bb8  17f8  468b44b707     movl r8,[rdi+r14*4+0x7]
0x19db00095bbd  17fd  4d03c5         REX.W addq r8,r13
0x19db00095bc0  1800  41f6c001       testb r8,0x1
0x19db00095bc4  1804  0f8447200000   jz 0x19db00097c11  <+0x3851>
0x19db00095bca  180a  453978ff       cmpl [r8-0x1],r15
0x19db00095bce  180e  0f842c0f0000   jz 0x19db00096b00  <+0x2740>
0x19db00095bd4  1814  413950ff       cmpl [r8-0x1],rdx
0x19db00095bd8  1818  0f853a200000   jnz 0x19db00097c18  <+0x3858>
0x19db00095bde  181e  458b4807       movl r9,[r8+0x7]
0x19db00095be2  1822  4d03cd         REX.W addq r9,r13
0x19db00095be5  1825  458b400b       movl r8,[r8+0xb]
0x19db00095be9  1829  41d1f8         sarl r8, 1
0x19db00095bec  182c  4183f803       cmpl r8,0x3
0x19db00095bf0  1830  0f8629200000   jna 0x19db00097c1f  <+0x385f>
0x19db00095bf6  1836  c4c17b10791f   vmovsd xmm7,[r9+0x1f]
0x19db00095bfc  183c  83f903         cmpl rcx,0x3
0x19db00095bff  183f  0f8621200000   jna 0x19db00097c26  <+0x3866>
0x19db00095c05  1845  458b442413     movl r8,[r12+0x13]
0x19db00095c0a  184a  4d03c5         REX.W addq r8,r13
0x19db00095c0d  184d  41f6c001       testb r8,0x1
0x19db00095c11  1851  0f8416200000   jz 0x19db00097c2d  <+0x386d>
0x19db00095c17  1857  453978ff       cmpl [r8-0x1],r15
0x19db00095c1b  185b  0f84960f0000   jz 0x19db00096bb7  <+0x27f7>
0x19db00095c21  1861  413950ff       cmpl [r8-0x1],rdx
0x19db00095c25  1865  0f8509200000   jnz 0x19db00097c34  <+0x3874>
0x19db00095c2b  186b  458b4807       movl r9,[r8+0x7]
0x19db00095c2f  186f  4d03cd         REX.W addq r9,r13
0x19db00095c32  1872  458b400b       movl r8,[r8+0xb]
0x19db00095c36  1876  41d1f8         sarl r8, 1
0x19db00095c39  1879  4183f800       cmpl r8,0x0
0x19db00095c3d  187d  0f86f81f0000   jna 0x19db00097c3b  <+0x387b>
0x19db00095c43  1883  c4417b104107   vmovsd xmm8,[r9+0x7]
0x19db00095c49  1889  f68560ffffff01 testb [rbp-0xa0],0x1
0x19db00095c50  1890  0f84ec1f0000   jz 0x19db00097c42  <+0x3882>
0x19db00095c56  1896  488b8d60ffffff REX.W movq rcx,[rbp-0xa0]
0x19db00095c5d  189d  443979ff       cmpl [rcx-0x1],r15
0x19db00095c61  18a1  0f84fb0f0000   jz 0x19db00096c62  <+0x28a2>
0x19db00095c67  18a7  3951ff         cmpl [rcx-0x1],rdx
0x19db00095c6a  18aa  0f85d91f0000   jnz 0x19db00097c49  <+0x3889>
0x19db00095c70  18b0  448b4107       movl r8,[rcx+0x7]
0x19db00095c74  18b4  4d03c5         REX.W addq r8,r13
0x19db00095c77  18b7  448b490b       movl r9,[rcx+0xb]
0x19db00095c7b  18bb  458b6003       movl r12,[r8+0x3]
0x19db00095c7f  18bf  41d1f9         sarl r9, 1
0x19db00095c82  18c2  418d4101       leal rax,[r9+0x1]
0x19db00095c86  18c6  4c8b1505e8ffff REX.W movq r10,[rip+0xffffe805]
0x19db00095c8d  18cd  4c3bd0         REX.W cmpq r10,rax
0x19db00095c90  18d0  7712           ja 0x19db00095ca4  <+0x18e4>
0x19db00095c92  18d2  488b1508e8ffff REX.W movq rdx,[rip+0xffffe808]
0x19db00095c99  18d9  4c8b1538e7ffff REX.W movq r10,[rip+0xffffe738]
0x19db00095ca0  18e0  41ffd2         call r10
0x19db00095ca3  18e3  cc             int3l
0x19db00095ca4  18e4  83f800         cmpl rax,0x0
0x19db00095ca7  18e7  0f86741a0000   jna 0x19db00097721  <+0x3361>
0x19db00095cad  18ed  41d1fc         sarl r12, 1
0x19db00095cb0  18f0  4183fc00       cmpl r12,0x0
0x19db00095cb4  18f4  0f865b100000   jna 0x19db00096d15  <+0x2955>
0x19db00095cba  18fa  4183f900       cmpl r9,0x0
0x19db00095cbe  18fe  0f8707000000   ja 0x19db00095ccb  <+0x190b>
0x19db00095cc4  1904  c7410b02000000 movl [rcx+0xb],0x2
0x19db00095ccb  190b  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db00095ccf  190f  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db00095cd3  1913  c5cb59cd       vmulsd xmm1,xmm6,xmm5
0x19db00095cd7  1917  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00095cdb  191b  c5bb59d7       vmulsd xmm2,xmm8,xmm7
0x19db00095cdf  191f  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db00095ce3  1923  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00095ce7  1927  c4c17b114007   vmovsd [r8+0x7],xmm0
0x19db00095ced  192d  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00095cf1  1931  0f86e8100000   jna 0x19db00096ddf  <+0x2a1f>
0x19db00095cf7  1937  41b801000000   movl r8,0x1
0x19db00095cfd  193d  e917000000     jmp 0x19db00095d19  <+0x1959>
0x19db00095d02  1942  660f1f840000000000 nop
0x19db00095d0b  194b  0f1f440000     nop
0x19db00095d10  1950  4c8bc2         REX.W movq r8,rdx
0x19db00095d13  1953  4c89e2         REX.W movq rdx,r12
0x19db00095d16  1956  4d8bf1         REX.W movq r14,r9
0x19db00095d19  1959  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db00095d1d  195d  488b45c0       REX.W movq rax,[rbp-0x40]
0x19db00095d21  1961  4c8b65b8       REX.W movq r12,[rbp-0x48]
0x19db00095d25  1965  4183f804       cmpl r8,0x4
0x19db00095d29  1969  0f832b030000   jnc 0x19db0009605a  <+0x1c9a>
0x19db00095d2f  196f  418b4907       movl rcx,[r9+0x7]
0x19db00095d33  1973  4903cd         REX.W addq rcx,r13
0x19db00095d36  1976  418b790b       movl rdi,[r9+0xb]
0x19db00095d3a  197a  d1ff           sarl rdi, 1
0x19db00095d3c  197c  443bf7         cmpl r14,rdi
0x19db00095d3f  197f  0f830b1f0000   jnc 0x19db00097c50  <+0x3890>
0x19db00095d45  1985  428b4cb107     movl rcx,[rcx+r14*4+0x7]
0x19db00095d4a  198a  4903cd         REX.W addq rcx,r13
0x19db00095d4d  198d  8b7807         movl rdi,[rax+0x7]
0x19db00095d50  1990  4903fd         REX.W addq rdi,r13
0x19db00095d53  1993  448b480b       movl r9,[rax+0xb]
0x19db00095d57  1997  41d1f9         sarl r9, 1
0x19db00095d5a  199a  453bf1         cmpl r14,r9
0x19db00095d5d  199d  0f83f41e0000   jnc 0x19db00097c57  <+0x3897>
0x19db00095d63  19a3  468b4cb707     movl r9,[rdi+r14*4+0x7]
0x19db00095d68  19a8  4d03cd         REX.W addq r9,r13
0x19db00095d6b  19ab  41f6c101       testb r9,0x1
0x19db00095d6f  19af  0f84e91e0000   jz 0x19db00097c5e  <+0x389e>
0x19db00095d75  19b5  48898d58ffffff REX.W movq [rbp-0xa8],rcx
0x19db00095d7c  19bc  453979ff       cmpl [r9-0x1],r15
0x19db00095d80  19c0  0f84aa100000   jz 0x19db00096e30  <+0x2a70>
0x19db00095d86  19c6  413951ff       cmpl [r9-0x1],rdx
0x19db00095d8a  19ca  0f85d51e0000   jnz 0x19db00097c65  <+0x38a5>
0x19db00095d90  19d0  418b4107       movl rax,[r9+0x7]
0x19db00095d94  19d4  4903c5         REX.W addq rax,r13
0x19db00095d97  19d7  458b490b       movl r9,[r9+0xb]
0x19db00095d9b  19db  41d1f9         sarl r9, 1
0x19db00095d9e  19de  4183f900       cmpl r9,0x0
0x19db00095da2  19e2  0f86c41e0000   jna 0x19db00097c6c  <+0x38ac>
0x19db00095da8  19e8  c5fb104007     vmovsd xmm0,[rax+0x7]
0x19db00095dad  19ed  418b4c2407     movl rcx,[r12+0x7]
0x19db00095db2  19f2  4903cd         REX.W addq rcx,r13
0x19db00095db5  19f5  458b74240b     movl r14,[r12+0xb]
0x19db00095dba  19fa  41d1fe         sarl r14, 1
0x19db00095dbd  19fd  4183fe00       cmpl r14,0x0
0x19db00095dc1  1a01  0f86ac1e0000   jna 0x19db00097c73  <+0x38b3>
0x19db00095dc7  1a07  448b6107       movl r12,[rcx+0x7]
0x19db00095dcb  1a0b  4d03e5         REX.W addq r12,r13
0x19db00095dce  1a0e  41f6c401       testb r12,0x1
0x19db00095dd2  1a12  0f84a21e0000   jz 0x19db00097c7a  <+0x38ba>
0x19db00095dd8  1a18  45397c24ff     cmpl [r12-0x1],r15
0x19db00095ddd  1a1d  0f84b8100000   jz 0x19db00096e9b  <+0x2adb>
0x19db00095de3  1a23  41395424ff     cmpl [r12-0x1],rdx
0x19db00095de8  1a28  0f85931e0000   jnz 0x19db00097c81  <+0x38c1>
0x19db00095dee  1a2e  418b542407     movl rdx,[r12+0x7]
0x19db00095df3  1a33  4903d5         REX.W addq rdx,r13
0x19db00095df6  1a36  458b64240b     movl r12,[r12+0xb]
0x19db00095dfb  1a3b  41d1fc         sarl r12, 1
0x19db00095dfe  1a3e  4539e0         cmpl r8,r12
0x19db00095e01  1a41  0f83811e0000   jnc 0x19db00097c88  <+0x38c8>
0x19db00095e07  1a47  c4a17b104cc207 vmovsd xmm1,[rdx+r8*8+0x7]
0x19db00095e0e  1a4e  4183f901       cmpl r9,0x1
0x19db00095e12  1a52  0f86771e0000   jna 0x19db00097c8f  <+0x38cf>
0x19db00095e18  1a58  c5fb10500f     vmovsd xmm2,[rax+0xf]
0x19db00095e1d  1a5d  4183fe01       cmpl r14,0x1
0x19db00095e21  1a61  0f866f1e0000   jna 0x19db00097c96  <+0x38d6>
0x19db00095e27  1a67  448b610b       movl r12,[rcx+0xb]
0x19db00095e2b  1a6b  4d03e5         REX.W addq r12,r13
0x19db00095e2e  1a6e  41f6c401       testb r12,0x1
0x19db00095e32  1a72  0f84651e0000   jz 0x19db00097c9d  <+0x38dd>
0x19db00095e38  1a78  45397c24ff     cmpl [r12-0x1],r15
0x19db00095e3d  1a7d  0f84ed100000   jz 0x19db00096f30  <+0x2b70>
0x19db00095e43  1a83  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00095e4d  1a8d  41395424ff     cmpl [r12-0x1],rdx
0x19db00095e52  1a92  0f854c1e0000   jnz 0x19db00097ca4  <+0x38e4>
0x19db00095e58  1a98  418b542407     movl rdx,[r12+0x7]
0x19db00095e5d  1a9d  4903d5         REX.W addq rdx,r13
0x19db00095e60  1aa0  458b64240b     movl r12,[r12+0xb]
0x19db00095e65  1aa5  41d1fc         sarl r12, 1
0x19db00095e68  1aa8  4539e0         cmpl r8,r12
0x19db00095e6b  1aab  0f833a1e0000   jnc 0x19db00097cab  <+0x38eb>
0x19db00095e71  1ab1  c4a17b1064c207 vmovsd xmm4,[rdx+r8*8+0x7]
0x19db00095e78  1ab8  4183f902       cmpl r9,0x2
0x19db00095e7c  1abc  0f86301e0000   jna 0x19db00097cb2  <+0x38f2>
0x19db00095e82  1ac2  c5fb106817     vmovsd xmm5,[rax+0x17]
0x19db00095e87  1ac7  4183fe02       cmpl r14,0x2
0x19db00095e8b  1acb  0f86281e0000   jna 0x19db00097cb9  <+0x38f9>
0x19db00095e91  1ad1  448b490f       movl r9,[rcx+0xf]
0x19db00095e95  1ad5  4d03cd         REX.W addq r9,r13
0x19db00095e98  1ad8  41f6c101       testb r9,0x1
0x19db00095e9c  1adc  0f841e1e0000   jz 0x19db00097cc0  <+0x3900>
0x19db00095ea2  1ae2  453979ff       cmpl [r9-0x1],r15
0x19db00095ea6  1ae6  0f8439110000   jz 0x19db00096fe5  <+0x2c25>
0x19db00095eac  1aec  49bc559f3008db190000 REX.W movq r12,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00095eb6  1af6  453961ff       cmpl [r9-0x1],r12
0x19db00095eba  1afa  0f85071e0000   jnz 0x19db00097cc7  <+0x3907>
0x19db00095ec0  1b00  418b4107       movl rax,[r9+0x7]
0x19db00095ec4  1b04  4903c5         REX.W addq rax,r13
0x19db00095ec7  1b07  458b490b       movl r9,[r9+0xb]
0x19db00095ecb  1b0b  41d1f9         sarl r9, 1
0x19db00095ece  1b0e  453bc1         cmpl r8,r9
0x19db00095ed1  1b11  0f83f71d0000   jnc 0x19db00097cce  <+0x390e>
0x19db00095ed7  1b17  c4217b1044c007 vmovsd xmm8,[rax+r8*8+0x7]
0x19db00095ede  1b1e  4c8b4da8       REX.W movq r9,[rbp-0x58]
0x19db00095ee2  1b22  428b448f07     movl rax,[rdi+r9*4+0x7]
0x19db00095ee7  1b27  4903c5         REX.W addq rax,r13
0x19db00095eea  1b2a  a801           test al,0x1
0x19db00095eec  1b2c  0f84e31d0000   jz 0x19db00097cd5  <+0x3915>
0x19db00095ef2  1b32  443978ff       cmpl [rax-0x1],r15
0x19db00095ef6  1b36  0f84a6110000   jz 0x19db000970a2  <+0x2ce2>
0x19db00095efc  1b3c  443960ff       cmpl [rax-0x1],r12
0x19db00095f00  1b40  0f85d61d0000   jnz 0x19db00097cdc  <+0x391c>
0x19db00095f06  1b46  8b5007         movl rdx,[rax+0x7]
0x19db00095f09  1b49  4903d5         REX.W addq rdx,r13
0x19db00095f0c  1b4c  8b400b         movl rax,[rax+0xb]
0x19db00095f0f  1b4f  d1f8           sarl rax, 1
0x19db00095f11  1b51  83f803         cmpl rax,0x3
0x19db00095f14  1b54  0f86c91d0000   jna 0x19db00097ce3  <+0x3923>
0x19db00095f1a  1b5a  c5fb10721f     vmovsd xmm6,[rdx+0x1f]
0x19db00095f1f  1b5f  4183fe03       cmpl r14,0x3
0x19db00095f23  1b63  0f86c11d0000   jna 0x19db00097cea  <+0x392a>
0x19db00095f29  1b69  448b7113       movl r14,[rcx+0x13]
0x19db00095f2d  1b6d  4d03f5         REX.W addq r14,r13
0x19db00095f30  1b70  41f6c601       testb r14,0x1
0x19db00095f34  1b74  0f84b71d0000   jz 0x19db00097cf1  <+0x3931>
0x19db00095f3a  1b7a  45397eff       cmpl [r14-0x1],r15
0x19db00095f3e  1b7e  0f8423120000   jz 0x19db00097167  <+0x2da7>
0x19db00095f44  1b84  453966ff       cmpl [r14-0x1],r12
0x19db00095f48  1b88  0f85aa1d0000   jnz 0x19db00097cf8  <+0x3938>
0x19db00095f4e  1b8e  418b4607       movl rax,[r14+0x7]
0x19db00095f52  1b92  4903c5         REX.W addq rax,r13
0x19db00095f55  1b95  458b760b       movl r14,[r14+0xb]
0x19db00095f59  1b99  41d1fe         sarl r14, 1
0x19db00095f5c  1b9c  453bc6         cmpl r8,r14
0x19db00095f5f  1b9f  0f839a1d0000   jnc 0x19db00097cff  <+0x393f>
0x19db00095f65  1ba5  c4217b104cc007 vmovsd xmm9,[rax+r8*8+0x7]
0x19db00095f6c  1bac  f68558ffffff01 testb [rbp-0xa8],0x1
0x19db00095f73  1bb3  0f848d1d0000   jz 0x19db00097d06  <+0x3946>
0x19db00095f79  1bb9  488b8d58ffffff REX.W movq rcx,[rbp-0xa8]
0x19db00095f80  1bc0  443979ff       cmpl [rcx-0x1],r15
0x19db00095f84  1bc4  0f849d120000   jz 0x19db00097227  <+0x2e67>
0x19db00095f8a  1bca  443961ff       cmpl [rcx-0x1],r12
0x19db00095f8e  1bce  0f85791d0000   jnz 0x19db00097d0d  <+0x394d>
0x19db00095f94  1bd4  448b7107       movl r14,[rcx+0x7]
0x19db00095f98  1bd8  4d03f5         REX.W addq r14,r13
0x19db00095f9b  1bdb  8b410b         movl rax,[rcx+0xb]
0x19db00095f9e  1bde  d1f8           sarl rax, 1
0x19db00095fa0  1be0  418b5603       movl rdx,[r14+0x3]
0x19db00095fa4  1be4  d1fa           sarl rdx, 1
0x19db00095fa6  1be6  8d7801         leal rdi,[rax+0x1]
0x19db00095fa9  1be9  4c8b15e2e4ffff REX.W movq r10,[rip+0xffffe4e2]
0x19db00095fb0  1bf0  4c3bd7         REX.W cmpq r10,rdi
0x19db00095fb3  1bf3  7712           ja 0x19db00095fc7  <+0x1c07>
0x19db00095fb5  1bf5  488b15e5e4ffff REX.W movq rdx,[rip+0xffffe4e5]
0x19db00095fbc  1bfc  4c8b1515e4ffff REX.W movq r10,[rip+0xffffe415]
0x19db00095fc3  1c03  41ffd2         call r10
0x19db00095fc6  1c06  cc             int3l
0x19db00095fc7  1c07  443bc7         cmpl r8,rdi
0x19db00095fca  1c0a  0f83441d0000   jnc 0x19db00097d14  <+0x3954>
0x19db00095fd0  1c10  443bc2         cmpl r8,rdx
0x19db00095fd3  1c13  0f8316130000   jnc 0x19db000972ef  <+0x2f2f>
0x19db00095fd9  1c19  418d5001       leal rdx,[r8+0x1]
0x19db00095fdd  1c1d  4c8b15aee4ffff REX.W movq r10,[rip+0xffffe4ae]
0x19db00095fe4  1c24  4c3bd2         REX.W cmpq r10,rdx
0x19db00095fe7  1c27  7712           ja 0x19db00095ffb  <+0x1c3b>
0x19db00095fe9  1c29  488b15b1e4ffff REX.W movq rdx,[rip+0xffffe4b1]
0x19db00095ff0  1c30  4c8b15e1e3ffff REX.W movq r10,[rip+0xffffe3e1]
0x19db00095ff7  1c37  41ffd2         call r10
0x19db00095ffa  1c3a  cc             int3l
0x19db00095ffb  1c3b  443bc0         cmpl r8,rax
0x19db00095ffe  1c3e  0f8224000000   jc 0x19db00096028  <+0x1c68>
0x19db00096004  1c44  8d0412         leal rax,[rdx+rdx*1]
0x19db00096007  1c47  4c8b1584e4ffff REX.W movq r10,[rip+0xffffe484]
0x19db0009600e  1c4e  4c3bd0         REX.W cmpq r10,rax
0x19db00096011  1c51  7712           ja 0x19db00096025  <+0x1c65>
0x19db00096013  1c53  488b1587e4ffff REX.W movq rdx,[rip+0xffffe487]
0x19db0009601a  1c5a  4c8b15b7e3ffff REX.W movq r10,[rip+0xffffe3b7]
0x19db00096021  1c61  41ffd2         call r10
0x19db00096024  1c64  cc             int3l
0x19db00096025  1c65  89410b         movl [rcx+0xb],rax
0x19db00096028  1c68  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db0009602c  1c6c  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db00096030  1c70  c5bb59cd       vmulsd xmm1,xmm8,xmm5
0x19db00096034  1c74  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00096038  1c78  c5b359d6       vmulsd xmm2,xmm9,xmm6
0x19db0009603c  1c7c  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db00096040  1c80  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00096044  1c84  c4817b1144c607 vmovsd [r14+r8*8+0x7],xmm0
0x19db0009604b  1c8b  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009604f  1c8f  0f87bbfcffff   ja 0x19db00095d10  <+0x1950>
0x19db00096055  1c95  e996130000     jmp 0x19db000973f0  <+0x3030>
0x19db0009605a  1c9a  4d8bc6         REX.W movq r8,r14
0x19db0009605d  1c9d  458d7001       leal r14,[r8+0x1]
0x19db00096061  1ca1  4c8b152ae4ffff REX.W movq r10,[rip+0xffffe42a]
0x19db00096068  1ca8  4d3bd6         REX.W cmpq r10,r14
0x19db0009606b  1cab  7712           ja 0x19db0009607f  <+0x1cbf>
0x19db0009606d  1cad  488b152de4ffff REX.W movq rdx,[rip+0xffffe42d]
0x19db00096074  1cb4  4c8b155de3ffff REX.W movq r10,[rip+0xffffe35d]
0x19db0009607b  1cbb  41ffd2         call r10
0x19db0009607e  1cbe  cc             int3l
0x19db0009607f  1cbf  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00096083  1cc3  0f8757f9ffff   ja 0x19db000959e0  <+0x1620>
0x19db00096089  1cc9  e9bb130000     jmp 0x19db00097449  <+0x3089>
0x19db0009608e  1cce  4d8bc8         REX.W movq r9,r8
0x19db00096091  1cd1  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db00096095  1cd5  45894817       movl [r8+0x17],r9
0x19db00096099  1cd9  49c7c60000fcff REX.W movq r14,0xfffc0000
0x19db000960a0  1ce0  4d23f0         REX.W andq r14,r8
0x19db000960a3  1ce3  41f6460804     testb [r14+0x8],0x4
0x19db000960a8  1ce8  0f8574160000   jnz 0x19db00097722  <+0x3362>
0x19db000960ae  1cee  41b908000000   movl r9,0x8
0x19db000960b4  1cf4  e92f000000     jmp 0x19db000960e8  <+0x1d28>
0x19db000960b9  1cf9  0f1f8000000000 nop
0x19db000960c0  1d00  488b1d45e7ffff REX.W movq rbx,[rip+0xffffe745]
0x19db000960c7  1d07  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db000960cb  1d0b  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000960d5  1d15  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000960db  1d1b  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db000960e1  1d21  4c8b1d0ce7ffff REX.W movq r11,[rip+0xffffe70c]
0x19db000960e8  1d28  498b85d8010000 REX.W movq rax,[r13+0x1d8] (root (fixed_double_array_map))
0x19db000960ef  1d2f  41be6ddc3008   movl r14,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db000960f5  1d35  4183f9ff       cmpl r9,0xff
0x19db000960f9  1d39  0f8eb3040000   jle 0x19db000965b2  <+0x21f2>
0x19db000960ff  1d3f  418b480f       movl rcx,[r8+0xf]
0x19db00096103  1d43  4903cd         REX.W addq rcx,r13
0x19db00096106  1d46  f6c101         testb rcx,0x1
0x19db00096109  1d49  0f840c1c0000   jz 0x19db00097d1b  <+0x395b>
0x19db0009610f  1d4f  443971ff       cmpl [rcx-0x1],r14
0x19db00096113  1d53  0f85091c0000   jnz 0x19db00097d22  <+0x3962>
0x19db00096119  1d59  8b7907         movl rdi,[rcx+0x7]
0x19db0009611c  1d5c  4903fd         REX.W addq rdi,r13
0x19db0009611f  1d5f  8b490b         movl rcx,[rcx+0xb]
0x19db00096122  1d62  d1f9           sarl rcx, 1
0x19db00096124  1d64  443bc9         cmpl r9,rcx
0x19db00096127  1d67  0f83fc1b0000   jnc 0x19db00097d29  <+0x3969>
0x19db0009612d  1d6d  428b4c8f07     movl rcx,[rdi+r9*4+0x7]
0x19db00096132  1d72  4903cd         REX.W addq rcx,r13
0x19db00096135  1d75  418b783f       movl rdi,[r8+0x3f]
0x19db00096139  1d79  4903fd         REX.W addq rdi,r13
0x19db0009613c  1d7c  4c894dd0       REX.W movq [rbp-0x30],r9
0x19db00096140  1d80  458b4813       movl r9,[r8+0x13]
0x19db00096144  1d84  4d03cd         REX.W addq r9,r13
0x19db00096147  1d87  48894dc8       REX.W movq [rbp-0x38],rcx
0x19db0009614b  1d8b  48897db8       REX.W movq [rbp-0x48],rdi
0x19db0009614f  1d8f  4c894db0       REX.W movq [rbp-0x50],r9
0x19db00096153  1d93  488bd1         REX.W movq rdx,rcx
0x19db00096156  1d96  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db00096160  1da0  b88a000000     movl rax,0x8a
0x19db00096165  1da5  498bf0         REX.W movq rsi,r8
0x19db00096168  1da8  4c8b15a0e4ffff REX.W movq r10,[rip+0xffffe4a0]
0x19db0009616f  1daf  41ffd2         call r10
0x19db00096172  1db2  f645b801       testb [rbp-0x48],0x1
0x19db00096176  1db6  0f84bb1b0000   jz 0x19db00097d37  <+0x3977>
0x19db0009617c  1dbc  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db00096180  1dc0  458b48ff       movl r9,[r8-0x1]
0x19db00096184  1dc4  4d03cd         REX.W addq r9,r13
0x19db00096187  1dc7  66418179072c04 cmpw [r9+0x7],0x42c
0x19db0009618e  1dce  0f85aa1b0000   jnz 0x19db00097d3e  <+0x397e>
0x19db00096194  1dd4  458b4813       movl r9,[r8+0x13]
0x19db00096198  1dd8  4d03cd         REX.W addq r9,r13
0x19db0009619b  1ddb  49bbdd422f08db190000 REX.W movq r11,0x19db082f42dd    ;; object: 0x19db082f42dd <FeedbackCell[many closures]>
0x19db000961a5  1de5  4d3bd9         REX.W cmpq r11,r9
0x19db000961a8  1de8  0f85971b0000   jnz 0x19db00097d45  <+0x3985>
0x19db000961ae  1dee  458b480f       movl r9,[r8+0xf]
0x19db000961b2  1df2  4c8b15d9e2ffff REX.W movq r10,[rip+0xffffe2d9]
0x19db000961b9  1df9  4d3bd1         REX.W cmpq r10,r9
0x19db000961bc  1dfc  7712           ja 0x19db000961d0  <+0x1e10>
0x19db000961be  1dfe  488b15dce2ffff REX.W movq rdx,[rip+0xffffe2dc]
0x19db000961c5  1e05  4c8b150ce2ffff REX.W movq r10,[rip+0xffffe20c]
0x19db000961cc  1e0c  41ffd2         call r10
0x19db000961cf  1e0f  cc             int3l
0x19db000961d0  1e10  4c894da0       REX.W movq [rbp-0x60],r9
0x19db000961d4  1e14  4d8b9d98000000 REX.W movq r11,[r13+0x98] (root (the_hole_value))
0x19db000961db  1e1b  41f6c301       testb r11,0x1
0x19db000961df  1e1f  0f85c8120000   jnz 0x19db000974ad  <+0x30ed>
0x19db000961e5  1e25  41d1fb         sarl r11, 1
0x19db000961e8  1e28  c4c1032ac3     vcvtlsi2sd xmm0,xmm15,r11
0x19db000961ed  1e2d  4c8b1d00e6ffff REX.W movq r11,[rip+0xffffe600]
0x19db000961f4  1e34  4d8b23         REX.W movq r12,[r11]
0x19db000961f7  1e37  498d542438     REX.W leaq rdx,[r12+0x38]
0x19db000961fc  1e3c  4c8b3509e6ffff REX.W movq r14,[rip+0xffffe609]
0x19db00096203  1e43  493916         REX.W cmpq [r14],rdx
0x19db00096206  1e46  0f86ac120000   jna 0x19db000974b8  <+0x30f8>
0x19db0009620c  1e4c  498d542428     REX.W leaq rdx,[r12+0x28]
0x19db00096211  1e51  498913         REX.W movq [r11],rdx
0x19db00096214  1e54  4983c401       REX.W addq r12,0x1
0x19db00096218  1e58  4d8bbdd8010000 REX.W movq r15,[r13+0x1d8] (root (fixed_double_array_map))
0x19db0009621f  1e5f  45897c24ff     movl [r12-0x1],r15
0x19db00096224  1e64  41c744240308000000 movl [r12+0x3],0x8
0x19db0009622d  1e6d  c4c17b11442407 vmovsd [r12+0x7],xmm0
0x19db00096234  1e74  c4c17b1144240f vmovsd [r12+0xf],xmm0
0x19db0009623b  1e7b  c4c17b11442417 vmovsd [r12+0x17],xmm0
0x19db00096242  1e82  c4c17b1144241f vmovsd [r12+0x1f],xmm0
0x19db00096249  1e89  488d4a10       REX.W leaq rcx,[rdx+0x10]
0x19db0009624d  1e8d  49890b         REX.W movq [r11],rcx
0x19db00096250  1e90  4883c201       REX.W addq rdx,0x1
0x19db00096254  1e94  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009625e  1e9e  895aff         movl [rdx-0x1],rbx
0x19db00096261  1ea1  498b8d58010000 REX.W movq rcx,[r13+0x158] (root (empty_fixed_array))
0x19db00096268  1ea8  894a03         movl [rdx+0x3],rcx
0x19db0009626b  1eab  44896207       movl [rdx+0x7],r12
0x19db0009626f  1eaf  c7420b00000000 movl [rdx+0xb],0x0
0x19db00096276  1eb6  f645b001       testb [rbp-0x50],0x1
0x19db0009627a  1eba  0f84cc1a0000   jz 0x19db00097d4c  <+0x398c>
0x19db00096280  1ec0  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db00096284  1ec4  bfa59f3008     movl rdi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00096289  1ec9  397eff         cmpl [rsi-0x1],rdi
0x19db0009628c  1ecc  0f85c11a0000   jnz 0x19db00097d53  <+0x3993>
0x19db00096292  1ed2  448b7607       movl r14,[rsi+0x7]
0x19db00096296  1ed6  4d03f5         REX.W addq r14,r13
0x19db00096299  1ed9  448b7e0b       movl r15,[rsi+0xb]
0x19db0009629d  1edd  41d1ff         sarl r15, 1
0x19db000962a0  1ee0  4183ff00       cmpl r15,0x0
0x19db000962a4  1ee4  0f86b01a0000   jna 0x19db00097d5a  <+0x399a>
0x19db000962aa  1eea  458b7607       movl r14,[r14+0x7]
0x19db000962ae  1eee  4d03f5         REX.W addq r14,r13
0x19db000962b1  1ef1  41f6c601       testb r14,0x1
0x19db000962b5  1ef5  0f84a61a0000   jz 0x19db00097d61  <+0x39a1>
0x19db000962bb  1efb  41395eff       cmpl [r14-0x1],rbx
0x19db000962bf  1eff  0f85a31a0000   jnz 0x19db00097d68  <+0x39a8>
0x19db000962c5  1f05  458b7e07       movl r15,[r14+0x7]
0x19db000962c9  1f09  4d03fd         REX.W addq r15,r13
0x19db000962cc  1f0c  458b760b       movl r14,[r14+0xb]
0x19db000962d0  1f10  41d1fe         sarl r14, 1
0x19db000962d3  1f13  4183fe00       cmpl r14,0x0
0x19db000962d7  1f17  0f86921a0000   jna 0x19db00097d6f  <+0x39af>
0x19db000962dd  1f1d  c4c17b104707   vmovsd xmm0,[r15+0x7]
0x19db000962e3  1f23  a801           test al,0x1
0x19db000962e5  1f25  0f848b1a0000   jz 0x19db00097d76  <+0x39b6>
0x19db000962eb  1f2b  41bbb59e3008   movl r11,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000962f1  1f31  443958ff       cmpl [rax-0x1],r11
0x19db000962f5  1f35  0f84f6110000   jz 0x19db000974f1  <+0x3131>
0x19db000962fb  1f3b  3958ff         cmpl [rax-0x1],rbx
0x19db000962fe  1f3e  0f85791a0000   jnz 0x19db00097d7d  <+0x39bd>
0x19db00096304  1f44  8b4807         movl rcx,[rax+0x7]
0x19db00096307  1f47  4903cd         REX.W addq rcx,r13
0x19db0009630a  1f4a  8b780b         movl rdi,[rax+0xb]
0x19db0009630d  1f4d  d1ff           sarl rdi, 1
0x19db0009630f  1f4f  83ff00         cmpl rdi,0x0
0x19db00096312  1f52  0f866c1a0000   jna 0x19db00097d84  <+0x39c4>
0x19db00096318  1f58  4183fe01       cmpl r14,0x1
0x19db0009631c  1f5c  0f86691a0000   jna 0x19db00097d8b  <+0x39cb>
0x19db00096322  1f62  c4c17b104f0f   vmovsd xmm1,[r15+0xf]
0x19db00096328  1f68  83ff01         cmpl rdi,0x1
0x19db0009632b  1f6b  0f86611a0000   jna 0x19db00097d92  <+0x39d2>
0x19db00096331  1f71  4183fe02       cmpl r14,0x2
0x19db00096335  1f75  0f865e1a0000   jna 0x19db00097d99  <+0x39d9>
0x19db0009633b  1f7b  c4c17b105717   vmovsd xmm2,[r15+0x17]
0x19db00096341  1f81  83ff02         cmpl rdi,0x2
0x19db00096344  1f84  0f86561a0000   jna 0x19db00097da0  <+0x39e0>
0x19db0009634a  1f8a  4183fe03       cmpl r14,0x3
0x19db0009634e  1f8e  0f86531a0000   jna 0x19db00097da7  <+0x39e7>
0x19db00096354  1f94  c4c17b10671f   vmovsd xmm4,[r15+0x1f]
0x19db0009635a  1f9a  83ff03         cmpl rdi,0x3
0x19db0009635d  1f9d  0f864b1a0000   jna 0x19db00097dae  <+0x39ee>
0x19db00096363  1fa3  c5f359490f     vmulsd xmm1,xmm1,[rcx+0xf]
0x19db00096368  1fa8  c5fb594107     vmulsd xmm0,xmm0,[rcx+0x7]
0x19db0009636d  1fad  c5eb595117     vmulsd xmm2,xmm2,[rcx+0x17]
0x19db00096372  1fb2  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db00096376  1fb6  c5db59491f     vmulsd xmm1,xmm4,[rcx+0x1f]
0x19db0009637b  1fbb  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db0009637f  1fbf  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db00096383  1fc3  c7420b02000000 movl [rdx+0xb],0x2
0x19db0009638a  1fca  c4c17b11442407 vmovsd [r12+0x7],xmm0
0x19db00096391  1fd1  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00096395  1fd5  0f86c3110000   jna 0x19db0009755e  <+0x319e>
0x19db0009639b  1fdb  41bc01000000   movl r12,0x1
0x19db000963a1  1fe1  4c8bf0         REX.W movq r14,rax
0x19db000963a4  1fe4  4c8bfb         REX.W movq r15,rbx
0x19db000963a7  1fe7  e911000000     jmp 0x19db000963bd  <+0x1ffd>
0x19db000963ac  1fec  0f1f4000       nop
0x19db000963b0  1ff0  4c8be1         REX.W movq r12,rcx
0x19db000963b3  1ff3  49bf559f3008db190000 REX.W movq r15,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000963bd  1ffd  4183fc04       cmpl r12,0x4
0x19db000963c1  2001  0f8382010000   jnc 0x19db00096549  <+0x2189>
0x19db000963c7  2007  8b4607         movl rax,[rsi+0x7]
0x19db000963ca  200a  4903c5         REX.W addq rax,r13
0x19db000963cd  200d  8b4e0b         movl rcx,[rsi+0xb]
0x19db000963d0  2010  d1f9           sarl rcx, 1
0x19db000963d2  2012  443be1         cmpl r12,rcx
0x19db000963d5  2015  0f83da190000   jnc 0x19db00097db5  <+0x39f5>
0x19db000963db  201b  428b44a007     movl rax,[rax+r12*4+0x7]
0x19db000963e0  2020  4903c5         REX.W addq rax,r13
0x19db000963e3  2023  a801           test al,0x1
0x19db000963e5  2025  0f84d1190000   jz 0x19db00097dbc  <+0x39fc>
0x19db000963eb  202b  443978ff       cmpl [rax-0x1],r15
0x19db000963ef  202f  0f85ce190000   jnz 0x19db00097dc3  <+0x3a03>
0x19db000963f5  2035  8b4807         movl rcx,[rax+0x7]
0x19db000963f8  2038  4903cd         REX.W addq rcx,r13
0x19db000963fb  203b  8b400b         movl rax,[rax+0xb]
0x19db000963fe  203e  d1f8           sarl rax, 1
0x19db00096400  2040  83f800         cmpl rax,0x0
0x19db00096403  2043  0f86c1190000   jna 0x19db00097dca  <+0x3a0a>
0x19db00096409  2049  c5fb104107     vmovsd xmm0,[rcx+0x7]
0x19db0009640e  204e  418b7e07       movl rdi,[r14+0x7]
0x19db00096412  2052  4903fd         REX.W addq rdi,r13
0x19db00096415  2055  458b7e0b       movl r15,[r14+0xb]
0x19db00096419  2059  41d1ff         sarl r15, 1
0x19db0009641c  205c  4183ff00       cmpl r15,0x0
0x19db00096420  2060  0f86ab190000   jna 0x19db00097dd1  <+0x3a11>
0x19db00096426  2066  c5fb104f07     vmovsd xmm1,[rdi+0x7]
0x19db0009642b  206b  83f801         cmpl rax,0x1
0x19db0009642e  206e  0f86a4190000   jna 0x19db00097dd8  <+0x3a18>
0x19db00096434  2074  c5fb10510f     vmovsd xmm2,[rcx+0xf]
0x19db00096439  2079  4183ff01       cmpl r15,0x1
0x19db0009643d  207d  0f869c190000   jna 0x19db00097ddf  <+0x3a1f>
0x19db00096443  2083  c5fb10670f     vmovsd xmm4,[rdi+0xf]
0x19db00096448  2088  83f802         cmpl rax,0x2
0x19db0009644b  208b  0f8695190000   jna 0x19db00097de6  <+0x3a26>
0x19db00096451  2091  c5fb106917     vmovsd xmm5,[rcx+0x17]
0x19db00096456  2096  4183ff02       cmpl r15,0x2
0x19db0009645a  209a  0f868d190000   jna 0x19db00097ded  <+0x3a2d>
0x19db00096460  20a0  c5fb107717     vmovsd xmm6,[rdi+0x17]
0x19db00096465  20a5  83f803         cmpl rax,0x3
0x19db00096468  20a8  0f8686190000   jna 0x19db00097df4  <+0x3a34>
0x19db0009646e  20ae  c5fb10791f     vmovsd xmm7,[rcx+0x1f]
0x19db00096473  20b3  4183ff03       cmpl r15,0x3
0x19db00096477  20b7  0f867e190000   jna 0x19db00097dfb  <+0x3a3b>
0x19db0009647d  20bd  c57b10471f     vmovsd xmm8,[rdi+0x1f]
0x19db00096482  20c2  448b7a07       movl r15,[rdx+0x7]
0x19db00096486  20c6  4d03fd         REX.W addq r15,r13
0x19db00096489  20c9  8b420b         movl rax,[rdx+0xb]
0x19db0009648c  20cc  418b4f03       movl rcx,[r15+0x3]
0x19db00096490  20d0  d1f9           sarl rcx, 1
0x19db00096492  20d2  d1f8           sarl rax, 1
0x19db00096494  20d4  8d7801         leal rdi,[rax+0x1]
0x19db00096497  20d7  4c8b15f4dfffff REX.W movq r10,[rip+0xffffdff4]
0x19db0009649e  20de  4c3bd7         REX.W cmpq r10,rdi
0x19db000964a1  20e1  7712           ja 0x19db000964b5  <+0x20f5>
0x19db000964a3  20e3  488b15f7dfffff REX.W movq rdx,[rip+0xffffdff7]
0x19db000964aa  20ea  4c8b1527dfffff REX.W movq r10,[rip+0xffffdf27]
0x19db000964b1  20f1  41ffd2         call r10
0x19db000964b4  20f4  cc             int3l
0x19db000964b5  20f5  443be7         cmpl r12,rdi
0x19db000964b8  20f8  0f8372180000   jnc 0x19db00097d30  <+0x3970>
0x19db000964be  20fe  443be1         cmpl r12,rcx
0x19db000964c1  2101  0f83ee100000   jnc 0x19db000975b5  <+0x31f5>
0x19db000964c7  2107  418d4c2401     leal rcx,[r12+0x1]
0x19db000964cc  210c  4c8b15bfdfffff REX.W movq r10,[rip+0xffffdfbf]
0x19db000964d3  2113  4c3bd1         REX.W cmpq r10,rcx
0x19db000964d6  2116  7712           ja 0x19db000964ea  <+0x212a>
0x19db000964d8  2118  488b15c2dfffff REX.W movq rdx,[rip+0xffffdfc2]
0x19db000964df  211f  4c8b15f2deffff REX.W movq r10,[rip+0xffffdef2]
0x19db000964e6  2126  41ffd2         call r10
0x19db000964e9  2129  cc             int3l
0x19db000964ea  212a  443be0         cmpl r12,rax
0x19db000964ed  212d  0f8224000000   jc 0x19db00096517  <+0x2157>
0x19db000964f3  2133  8d0409         leal rax,[rcx+rcx*1]
0x19db000964f6  2136  4c8b1595dfffff REX.W movq r10,[rip+0xffffdf95]
0x19db000964fd  213d  4c3bd0         REX.W cmpq r10,rax
0x19db00096500  2140  7712           ja 0x19db00096514  <+0x2154>
0x19db00096502  2142  488b1598dfffff REX.W movq rdx,[rip+0xffffdf98]
0x19db00096509  2149  4c8b15c8deffff REX.W movq r10,[rip+0xffffdec8]
0x19db00096510  2150  41ffd2         call r10
0x19db00096513  2153  cc             int3l
0x19db00096514  2154  89420b         movl [rdx+0xb],rax
0x19db00096517  2157  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db0009651b  215b  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db0009651f  215f  c5cb59cd       vmulsd xmm1,xmm6,xmm5
0x19db00096523  2163  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00096527  2167  c5bb59d7       vmulsd xmm2,xmm8,xmm7
0x19db0009652b  216b  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db0009652f  216f  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db00096533  2173  c4817b1144e707 vmovsd [r15+r12*8+0x7],xmm0
0x19db0009653a  217a  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009653e  217e  0f876cfeffff   ja 0x19db000963b0  <+0x1ff0>
0x19db00096544  2184  e95f110000     jmp 0x19db000976a8  <+0x32e8>
0x19db00096549  2189  bf92000000     movl rdi,0x92
0x19db0009654e  218e  488bc2         REX.W movq rax,rdx
0x19db00096551  2191  488b55c8       REX.W movq rdx,[rbp-0x38]
0x19db00096555  2195  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0009655f  219f  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00096563  21a3  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00096569  21a9  4d8b8d58010000 REX.W movq r9,[r13+0x158] (root (empty_fixed_array))
0x19db00096570  21b0  49bae0e6d1f5ff7f0000 REX.W movq r10,0x7ffff5d1e6e0  (StoreICTrampoline)    ;; off heap target
0x19db0009657a  21ba  41ffd2         call r10
0x19db0009657d  21bd  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db00096581  21c1  4183e901       subl r9,0x1
0x19db00096585  21c5  4c8b1506dfffff REX.W movq r10,[rip+0xffffdf06]
0x19db0009658c  21cc  4d3bd1         REX.W cmpq r10,r9
0x19db0009658f  21cf  7712           ja 0x19db000965a3  <+0x21e3>
0x19db00096591  21d1  488b1509dfffff REX.W movq rdx,[rip+0xffffdf09]
0x19db00096598  21d8  4c8b1539deffff REX.W movq r10,[rip+0xffffde39]
0x19db0009659f  21df  41ffd2         call r10
0x19db000965a2  21e2  cc             int3l
0x19db000965a3  21e3  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db000965a7  21e7  0f8713fbffff   ja 0x19db000960c0  <+0x1d00>
0x19db000965ad  21ed  e945110000     jmp 0x19db000976f7  <+0x3337>
0x19db000965b2  21f2  418b7857       movl rdi,[r8+0x57]
0x19db000965b6  21f6  4903fd         REX.W addq rdi,r13
0x19db000965b9  21f9  40f6c701       testb rdi,0x1
0x19db000965bd  21fd  0f8491150000   jz 0x19db00097b54  <+0x3794>
0x19db000965c3  2203  448b67ff       movl r12,[rdi-0x1]
0x19db000965c7  2207  4d03e5         REX.W addq r12,r13
0x19db000965ca  220a  6641817c24072c04 cmpw [r12+0x7],0x42c
0x19db000965d2  2212  0f8536150000   jnz 0x19db00097b0e  <+0x374e>
0x19db000965d8  2218  448b6713       movl r12,[rdi+0x13]
0x19db000965dc  221c  4d03e5         REX.W addq r12,r13
0x19db000965df  221f  49bb25432f08db190000 REX.W movq r11,0x19db082f4325    ;; object: 0x19db082f4325 <FeedbackCell[many closures]>
0x19db000965e9  2229  4d39e3         REX.W cmpq r11,r12
0x19db000965ec  222c  0f85eb140000   jnz 0x19db00097add  <+0x371d>
0x19db000965f2  2232  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db000965f9  2239  50             push rax
0x19db000965fa  223a  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00096604  2244  4c8bc8         REX.W movq r9,rax
0x19db00096607  2247  33c0           xorl rax,rax
0x19db00096609  2249  4c8bde         REX.W movq r11,rsi
0x19db0009660c  224c  4c8b1555e4ffff REX.W movq r10,[rip+0xffffe455]
0x19db00096613  2253  41ffd2         call r10
0x19db00096616  2256  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db0009661a  225a  458b4823       movl r9,[r8+0x23]
0x19db0009661e  225e  4d03cd         REX.W addq r9,r13
0x19db00096621  2261  41f6c101       testb r9,0x1
0x19db00096625  2265  0f8481140000   jz 0x19db00097aac  <+0x36ec>
0x19db0009662b  226b  41bbb5da3008   movl r11,0x830dab5      ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db00096631  2271  453959ff       cmpl [r9-0x1],r11
0x19db00096635  2275  0f8555140000   jnz 0x19db00097a90  <+0x36d0>
0x19db0009663b  227b  458b610b       movl r12,[r9+0xb]
0x19db0009663f  227f  41d1fc         sarl r12, 1
0x19db00096642  2282  4183c401       addl r12,0x1
0x19db00096646  2286  4c8b1545deffff REX.W movq r10,[rip+0xffffde45]
0x19db0009664d  228d  4d39e2         REX.W cmpq r10,r12
0x19db00096650  2290  7712           ja 0x19db00096664  <+0x22a4>
0x19db00096652  2292  488b1548deffff REX.W movq rdx,[rip+0xffffde48]
0x19db00096659  2299  4c8b1578ddffff REX.W movq r10,[rip+0xffffdd78]
0x19db00096660  22a0  41ffd2         call r10
0x19db00096663  22a3  cc             int3l
0x19db00096664  22a4  4d89e3         REX.W movq r11,r12
0x19db00096667  22a7  4501e3         addl r11,r12
0x19db0009666a  22aa  0f80e1130000   jo 0x19db00097a51  <+0x3691>
0x19db00096670  22b0  4d8be3         REX.W movq r12,r11
0x19db00096673  22b3  4589610b       movl [r9+0xb],r12
0x19db00096677  22b7  418b785b       movl rdi,[r8+0x5b]
0x19db0009667b  22bb  4903fd         REX.W addq rdi,r13
0x19db0009667e  22be  40f6c701       testb rdi,0x1
0x19db00096682  22c2  0f848a130000   jz 0x19db00097a12  <+0x3652>
0x19db00096688  22c8  448b4fff       movl r9,[rdi-0x1]
0x19db0009668c  22cc  4d03cd         REX.W addq r9,r13
0x19db0009668f  22cf  66418179072c04 cmpw [r9+0x7],0x42c
0x19db00096696  22d6  0f8537130000   jnz 0x19db000979d3  <+0x3613>
0x19db0009669c  22dc  448b4f13       movl r9,[rdi+0x13]
0x19db000966a0  22e0  4d03cd         REX.W addq r9,r13
0x19db000966a3  22e3  49bb31432f08db190000 REX.W movq r11,0x19db082f4331    ;; object: 0x19db082f4331 <FeedbackCell[many closures]>
0x19db000966ad  22ed  4d3bd9         REX.W cmpq r11,r9
0x19db000966b0  22f0  0f85d7120000   jnz 0x19db0009798d  <+0x35cd>
0x19db000966b6  22f6  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db000966bd  22fd  50             push rax
0x19db000966be  22fe  4c8bc8         REX.W movq r9,rax
0x19db000966c1  2301  33c0           xorl rax,rax
0x19db000966c3  2303  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000966cd  230d  4c8b1594e3ffff REX.W movq r10,[rip+0xffffe394]
0x19db000966d4  2314  41ffd2         call r10
0x19db000966d7  2317  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db000966de  231e  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db000966e2  2322  488be5         REX.W movq rsp,rbp
0x19db000966e5  2325  5d             pop rbp
0x19db000966e6  2326  4883f900       REX.W cmpq rcx,0x0
0x19db000966ea  232a  7f03           jg 0x19db000966ef  <+0x232f>
0x19db000966ec  232c  c20800         ret 0x8
0x19db000966ef  232f  415a           pop r10
0x19db000966f1  2331  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db000966f6  2336  4152           push r10
0x19db000966f8  2338  c3             retl
0x19db000966f9  2339  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db00096700  2340  ebdc           jmp 0x19db000966de  <+0x231e>
0x19db00096702  2342  49b8a000000000000000 REX.W movq r8,0xa0
0x19db0009670c  234c  4150           push r8
0x19db0009670e  234e  b801000000     movl rax,0x1
0x19db00096713  2353  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db0009671d  235d  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00096727  2367  4c8bc0         REX.W movq r8,rax
0x19db0009672a  236a  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db00096734  2374  41ffd2         call r10
0x19db00096737  2377  e9e1dcffff     jmp 0x19db0009441d  <+0x5d>
0x19db0009673c  237c  488945d0       REX.W movq [rbp-0x30],rax
0x19db00096740  2380  4c8bc8         REX.W movq r9,rax
0x19db00096743  2383  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db0009674d  238d  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00096757  2397  33c0           xorl rax,rax
0x19db00096759  2399  4c8bc0         REX.W movq r8,rax
0x19db0009675c  239c  4c8b15c9ffffff REX.W movq r10,[rip+0xffffffc9]
0x19db00096763  23a3  41ffd2         call r10
0x19db00096766  23a6  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009676a  23aa  e9b1ddffff     jmp 0x19db00094520  <+0x160>
0x19db0009676f  23af  488945d0       REX.W movq [rbp-0x30],rax
0x19db00096773  23b3  488b1dcbffffff REX.W movq rbx,[rip+0xffffffcb]
0x19db0009677a  23ba  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00096784  23c4  4c8bc0         REX.W movq r8,rax
0x19db00096787  23c7  33c0           xorl rax,rax
0x19db00096789  23c9  4c8b159cffffff REX.W movq r10,[rip+0xffffff9c]
0x19db00096790  23d0  41ffd2         call r10
0x19db00096793  23d3  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db00096797  23d7  e984ddffff     jmp 0x19db00094520  <+0x160>
0x19db0009679c  23dc  c5fb1145a0     vmovsd [rbp-0x60],xmm0
0x19db000967a1  23e1  bae0000000     movl rdx,0xe0
0x19db000967a6  23e6  4c8bfa         REX.W movq r15,rdx
0x19db000967a9  23e9  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db000967b3  23f3  41ffd2         call r10
0x19db000967b6  23f6  4c8d78ff       REX.W leaq r15,[rax-0x1]
0x19db000967ba  23fa  c5fb1045a0     vmovsd xmm0,[rbp-0x60]
0x19db000967bf  23ff  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000967c9  2409  4c8b3524e0ffff REX.W movq r14,[rip+0xffffe024]
0x19db000967d0  2410  4c8b65a8       REX.W movq r12,[rbp-0x58]
0x19db000967d4  2414  e944e0ffff     jmp 0x19db0009481d  <+0x45d>
0x19db000967d9  2419  4c8bfa         REX.W movq r15,rdx
0x19db000967dc  241c  bab8000000     movl rdx,0xb8
0x19db000967e1  2421  4c8bf2         REX.W movq r14,rdx
0x19db000967e4  2424  4c8b15c0ffffff REX.W movq r10,[rip+0xffffffc0]
0x19db000967eb  242b  41ffd2         call r10
0x19db000967ee  242e  4c8d70ff       REX.W leaq r14,[rax-0x1]
0x19db000967f2  2432  4c8b4dc0       REX.W movq r9,[rbp-0x40]
0x19db000967f6  2436  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db000967fa  243a  4c8b25f3dfffff REX.W movq r12,[rip+0xffffdff3]
0x19db00096801  2441  e92ee3ffff     jmp 0x19db00094b34  <+0x774>
0x19db00096806  2446  bab8000000     movl rdx,0xb8
0x19db0009680b  244b  4c8b1599ffffff REX.W movq r10,[rip+0xffffff99]
0x19db00096812  2452  41ffd2         call r10
0x19db00096815  2455  4c8d40ff       REX.W leaq r8,[rax-0x1]
0x19db00096819  2459  498bd8         REX.W movq rbx,r8
0x19db0009681c  245c  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00096820  2460  4c8b25cddfffff REX.W movq r12,[rip+0xffffdfcd]
0x19db00096827  2467  4c8b4dc0       REX.W movq r9,[rbp-0x40]
0x19db0009682b  246b  e9fde5ffff     jmp 0x19db00094e2d  <+0xa6d>
0x19db00096830  2470  bab8000000     movl rdx,0xb8
0x19db00096835  2475  4c8b156fffffff REX.W movq r10,[rip+0xffffff6f]
0x19db0009683c  247c  41ffd2         call r10
0x19db0009683f  247f  4c8d60ff       REX.W leaq r12,[rax-0x1]
0x19db00096843  2483  4c8b4dc0       REX.W movq r9,[rbp-0x40]
0x19db00096847  2487  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009684b  248b  4c8b1da2dfffff REX.W movq r11,[rip+0xffffdfa2]
0x19db00096852  2492  e9c6e8ffff     jmp 0x19db0009511d  <+0xd5d>
0x19db00096857  2497  bae0000000     movl rdx,0xe0
0x19db0009685c  249c  4c8b1548ffffff REX.W movq r10,[rip+0xffffff48]
0x19db00096863  24a3  41ffd2         call r10
0x19db00096866  24a6  4c8d70ff       REX.W leaq r14,[rax-0x1]
0x19db0009686a  24aa  4c8b65a8       REX.W movq r12,[rbp-0x58]
0x19db0009686e  24ae  49b8559f3008db190000 REX.W movq r8,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00096878  24b8  4c8b1d75dfffff REX.W movq r11,[rip+0xffffdf75]
0x19db0009687f  24bf  c5fb1045b0     vmovsd xmm0,[rbp-0x50]
0x19db00096884  24c4  e950edffff     jmp 0x19db000955d9  <+0x1219>
0x19db00096889  24c9  ba68000000     movl rdx,0x68
0x19db0009688e  24ce  4c8b1516ffffff REX.W movq r10,[rip+0xffffff16]
0x19db00096895  24d5  41ffd2         call r10
0x19db00096898  24d8  4c8d70ff       REX.W leaq r14,[rax-0x1]
0x19db0009689c  24dc  4c8b4db8       REX.W movq r9,[rbp-0x48]
0x19db000968a0  24e0  4c8b1d4ddfffff REX.W movq r11,[rip+0xffffdf4d]
0x19db000968a7  24e7  488b1d5edfffff REX.W movq rbx,[rip+0xffffdf5e]
0x19db000968ae  24ee  488b45c0       REX.W movq rax,[rbp-0x40]
0x19db000968b2  24f2  e924f0ffff     jmp 0x19db000958db  <+0x151b>
0x19db000968b7  24f7  4150           push r8
0x19db000968b9  24f9  52             push rdx
0x19db000968ba  24fa  48897d98       REX.W movq [rbp-0x68],rdi
0x19db000968be  24fe  4c8945a0       REX.W movq [rbp-0x60],r8
0x19db000968c2  2502  488bde         REX.W movq rbx,rsi
0x19db000968c5  2505  b802000000     movl rax,0x2
0x19db000968ca  250a  33f6           xorl rsi,rsi
0x19db000968cc  250c  4c8b1559feffff REX.W movq r10,[rip+0xfffffe59]
0x19db000968d3  2513  41ffd2         call r10
0x19db000968d6  2516  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000968e0  2520  488b35e5f0ffff REX.W movq rsi,[rip+0xfffff0e5]
0x19db000968e7  2527  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000968ed  252d  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db000968f3  2533  4c8b1dfadeffff REX.W movq r11,[rip+0xffffdefa]
0x19db000968fa  253a  488b1d0bdfffff REX.W movq rbx,[rip+0xffffdf0b]
0x19db00096901  2541  488b45c0       REX.W movq rax,[rbp-0x40]
0x19db00096905  2545  4c8b4db8       REX.W movq r9,[rbp-0x48]
0x19db00096909  2549  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db0009690d  254d  488b7d98       REX.W movq rdi,[rbp-0x68]
0x19db00096911  2551  4c8b45a0       REX.W movq r8,[rbp-0x60]
0x19db00096915  2555  e949f1ffff     jmp 0x19db00095a63  <+0x16a3>
0x19db0009691a  255a  4151           push r9
0x19db0009691c  255c  52             push rdx
0x19db0009691d  255d  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db00096925  2565  4c8965a0       REX.W movq [rbp-0x60],r12
0x19db00096929  2569  48898d58ffffff REX.W movq [rbp-0xa8],rcx
0x19db00096930  2570  48897d98       REX.W movq [rbp-0x68],rdi
0x19db00096934  2574  48894590       REX.W movq [rbp-0x70],rax
0x19db00096938  2578  4c894588       REX.W movq [rbp-0x78],r8
0x19db0009693c  257c  4c894d80       REX.W movq [rbp-0x80],r9
0x19db00096940  2580  488bde         REX.W movq rbx,rsi
0x19db00096943  2583  b802000000     movl rax,0x2
0x19db00096948  2588  33f6           xorl rsi,rsi
0x19db0009694a  258a  4c8b15dbfdffff REX.W movq r10,[rip+0xfffffddb]
0x19db00096951  2591  41ffd2         call r10
0x19db00096954  2594  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009695e  259e  488b3567f0ffff REX.W movq rsi,[rip+0xfffff067]
0x19db00096965  25a5  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009696b  25ab  4c8b1d82deffff REX.W movq r11,[rip+0xffffde82]
0x19db00096972  25b2  488b1d93deffff REX.W movq rbx,[rip+0xffffde93]
0x19db00096979  25b9  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db0009697d  25bd  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db00096985  25c5  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db00096989  25c9  488b8d58ffffff REX.W movq rcx,[rbp-0xa8]
0x19db00096990  25d0  488b7d98       REX.W movq rdi,[rbp-0x68]
0x19db00096994  25d4  488b4590       REX.W movq rax,[rbp-0x70]
0x19db00096998  25d8  4c8b4588       REX.W movq r8,[rbp-0x78]
0x19db0009699c  25dc  4c8b4d80       REX.W movq r9,[rbp-0x80]
0x19db000969a0  25e0  e92bf1ffff     jmp 0x19db00095ad0  <+0x1710>
0x19db000969a5  25e5  4151           push r9
0x19db000969a7  25e7  52             push rdx
0x19db000969a8  25e8  c5fb114d80     vmovsd [rbp-0x80],xmm1
0x19db000969ad  25ed  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db000969b5  25f5  c5fb119568ffffff vmovsd [rbp-0x98],xmm2
0x19db000969bd  25fd  4c8965a0       REX.W movq [rbp-0x60],r12
0x19db000969c1  2601  48898d58ffffff REX.W movq [rbp-0xa8],rcx
0x19db000969c8  2608  48897d98       REX.W movq [rbp-0x68],rdi
0x19db000969cc  260c  48894590       REX.W movq [rbp-0x70],rax
0x19db000969d0  2610  4c894588       REX.W movq [rbp-0x78],r8
0x19db000969d4  2614  4c898d70ffffff REX.W movq [rbp-0x90],r9
0x19db000969db  261b  488bde         REX.W movq rbx,rsi
0x19db000969de  261e  4c8bf0         REX.W movq r14,rax
0x19db000969e1  2621  b802000000     movl rax,0x2
0x19db000969e6  2626  33f6           xorl rsi,rsi
0x19db000969e8  2628  4c8b153dfdffff REX.W movq r10,[rip+0xfffffd3d]
0x19db000969ef  262f  41ffd2         call r10
0x19db000969f2  2632  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000969fc  263c  488b35c9efffff REX.W movq rsi,[rip+0xffffefc9]
0x19db00096a03  2643  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00096a09  2649  4c8b1de4ddffff REX.W movq r11,[rip+0xffffdde4]
0x19db00096a10  2650  488b1df5ddffff REX.W movq rbx,[rip+0xffffddf5]
0x19db00096a17  2657  c5fb104d80     vmovsd xmm1,[rbp-0x80]
0x19db00096a1c  265c  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db00096a24  2664  c5fb109568ffffff vmovsd xmm2,[rbp-0x98]
0x19db00096a2c  266c  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db00096a30  2670  488b8d58ffffff REX.W movq rcx,[rbp-0xa8]
0x19db00096a37  2677  488b7d98       REX.W movq rdi,[rbp-0x68]
0x19db00096a3b  267b  488b4590       REX.W movq rax,[rbp-0x70]
0x19db00096a3f  267f  4c8b4588       REX.W movq r8,[rbp-0x78]
0x19db00096a43  2683  4c8b8d70ffffff REX.W movq r9,[rbp-0x90]
0x19db00096a4a  268a  e9ddf0ffff     jmp 0x19db00095b2c  <+0x176c>
0x19db00096a4f  268f  4150           push r8
0x19db00096a51  2691  52             push rdx
0x19db00096a52  2692  c5fb116d88     vmovsd [rbp-0x78],xmm5
0x19db00096a57  2697  c5fb114d80     vmovsd [rbp-0x80],xmm1
0x19db00096a5c  269c  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db00096a64  26a4  c5fb11a570ffffff vmovsd [rbp-0x90],xmm4
0x19db00096a6c  26ac  c5fb119568ffffff vmovsd [rbp-0x98],xmm2
0x19db00096a74  26b4  4c8965a0       REX.W movq [rbp-0x60],r12
0x19db00096a78  26b8  48898d58ffffff REX.W movq [rbp-0xa8],rcx
0x19db00096a7f  26bf  48897d98       REX.W movq [rbp-0x68],rdi
0x19db00096a83  26c3  4c894590       REX.W movq [rbp-0x70],r8
0x19db00096a87  26c7  4c8bcb         REX.W movq r9,rbx
0x19db00096a8a  26ca  488bde         REX.W movq rbx,rsi
0x19db00096a8d  26cd  b802000000     movl rax,0x2
0x19db00096a92  26d2  4c8bf6         REX.W movq r14,rsi
0x19db00096a95  26d5  33f6           xorl rsi,rsi
0x19db00096a97  26d7  4c8b158efcffff REX.W movq r10,[rip+0xfffffc8e]
0x19db00096a9e  26de  41ffd2         call r10
0x19db00096aa1  26e1  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00096aab  26eb  488b351aefffff REX.W movq rsi,[rip+0xffffef1a]
0x19db00096ab2  26f2  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00096ab8  26f8  4c8b1d35ddffff REX.W movq r11,[rip+0xffffdd35]
0x19db00096abf  26ff  488b1d46ddffff REX.W movq rbx,[rip+0xffffdd46]
0x19db00096ac6  2706  c5fb106d88     vmovsd xmm5,[rbp-0x78]
0x19db00096acb  270b  c5fb104d80     vmovsd xmm1,[rbp-0x80]
0x19db00096ad0  2710  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db00096ad8  2718  c5fb10a570ffffff vmovsd xmm4,[rbp-0x90]
0x19db00096ae0  2720  c5fb109568ffffff vmovsd xmm2,[rbp-0x98]
0x19db00096ae8  2728  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db00096aec  272c  488b8d58ffffff REX.W movq rcx,[rbp-0xa8]
0x19db00096af3  2733  488b7d98       REX.W movq rdi,[rbp-0x68]
0x19db00096af7  2737  4c8b4590       REX.W movq r8,[rbp-0x70]
0x19db00096afb  273b  e98cf0ffff     jmp 0x19db00095b8c  <+0x17cc>
0x19db00096b00  2740  4150           push r8
0x19db00096b02  2742  52             push rdx
0x19db00096b03  2743  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db00096b08  2748  c5fb116d88     vmovsd [rbp-0x78],xmm5
0x19db00096b0d  274d  c5fb114d80     vmovsd [rbp-0x80],xmm1
0x19db00096b12  2752  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db00096b1a  275a  c5fb11a570ffffff vmovsd [rbp-0x90],xmm4
0x19db00096b22  2762  c5fb119568ffffff vmovsd [rbp-0x98],xmm2
0x19db00096b2a  276a  4c8965a0       REX.W movq [rbp-0x60],r12
0x19db00096b2e  276e  48898d58ffffff REX.W movq [rbp-0xa8],rcx
0x19db00096b35  2775  4c894598       REX.W movq [rbp-0x68],r8
0x19db00096b39  2779  4c8bcb         REX.W movq r9,rbx
0x19db00096b3c  277c  488bde         REX.W movq rbx,rsi
0x19db00096b3f  277f  b802000000     movl rax,0x2
0x19db00096b44  2784  488bfe         REX.W movq rdi,rsi
0x19db00096b47  2787  33f6           xorl rsi,rsi
0x19db00096b49  2789  4c8b15dcfbffff REX.W movq r10,[rip+0xfffffbdc]
0x19db00096b50  2790  41ffd2         call r10
0x19db00096b53  2793  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00096b5d  279d  488b3568eeffff REX.W movq rsi,[rip+0xffffee68]
0x19db00096b64  27a4  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00096b6a  27aa  4c8b1d83dcffff REX.W movq r11,[rip+0xffffdc83]
0x19db00096b71  27b1  488b1d94dcffff REX.W movq rbx,[rip+0xffffdc94]
0x19db00096b78  27b8  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00096b7c  27bc  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db00096b81  27c1  c5fb106d88     vmovsd xmm5,[rbp-0x78]
0x19db00096b86  27c6  c5fb104d80     vmovsd xmm1,[rbp-0x80]
0x19db00096b8b  27cb  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db00096b93  27d3  c5fb10a570ffffff vmovsd xmm4,[rbp-0x90]
0x19db00096b9b  27db  c5fb109568ffffff vmovsd xmm2,[rbp-0x98]
0x19db00096ba3  27e3  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db00096ba7  27e7  488b8d58ffffff REX.W movq rcx,[rbp-0xa8]
0x19db00096bae  27ee  4c8b4598       REX.W movq r8,[rbp-0x68]
0x19db00096bb2  27f2  e91df0ffff     jmp 0x19db00095bd4  <+0x1814>
0x19db00096bb7  27f7  4150           push r8
0x19db00096bb9  27f9  52             push rdx
0x19db00096bba  27fa  c5fb117d98     vmovsd [rbp-0x68],xmm7
0x19db00096bbf  27ff  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db00096bc4  2804  c5fb116d88     vmovsd [rbp-0x78],xmm5
0x19db00096bc9  2809  c5fb114d80     vmovsd [rbp-0x80],xmm1
0x19db00096bce  280e  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db00096bd6  2816  c5fb11a570ffffff vmovsd [rbp-0x90],xmm4
0x19db00096bde  281e  c5fb119568ffffff vmovsd [rbp-0x98],xmm2
0x19db00096be6  2826  4c8945a0       REX.W movq [rbp-0x60],r8
0x19db00096bea  282a  4c8bcb         REX.W movq r9,rbx
0x19db00096bed  282d  488bde         REX.W movq rbx,rsi
0x19db00096bf0  2830  b802000000     movl rax,0x2
0x19db00096bf5  2835  4c8be6         REX.W movq r12,rsi
0x19db00096bf8  2838  33f6           xorl rsi,rsi
0x19db00096bfa  283a  4c8b152bfbffff REX.W movq r10,[rip+0xfffffb2b]
0x19db00096c01  2841  41ffd2         call r10
0x19db00096c04  2844  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00096c0e  284e  488b35b7edffff REX.W movq rsi,[rip+0xffffedb7]
0x19db00096c15  2855  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00096c1b  285b  4c8b1dd2dbffff REX.W movq r11,[rip+0xffffdbd2]
0x19db00096c22  2862  488b1de3dbffff REX.W movq rbx,[rip+0xffffdbe3]
0x19db00096c29  2869  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00096c2d  286d  c5fb107d98     vmovsd xmm7,[rbp-0x68]
0x19db00096c32  2872  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db00096c37  2877  c5fb106d88     vmovsd xmm5,[rbp-0x78]
0x19db00096c3c  287c  c5fb104d80     vmovsd xmm1,[rbp-0x80]
0x19db00096c41  2881  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db00096c49  2889  c5fb10a570ffffff vmovsd xmm4,[rbp-0x90]
0x19db00096c51  2891  c5fb109568ffffff vmovsd xmm2,[rbp-0x98]
0x19db00096c59  2899  4c8b45a0       REX.W movq r8,[rbp-0x60]
0x19db00096c5d  289d  e9bfefffff     jmp 0x19db00095c21  <+0x1861>
0x19db00096c62  28a2  51             push rcx
0x19db00096c63  28a3  52             push rdx
0x19db00096c64  28a4  c57b1145a0     vmovsd [rbp-0x60],xmm8
0x19db00096c69  28a9  c5fb117d98     vmovsd [rbp-0x68],xmm7
0x19db00096c6e  28ae  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db00096c73  28b3  c5fb116d88     vmovsd [rbp-0x78],xmm5
0x19db00096c78  28b8  c5fb114d80     vmovsd [rbp-0x80],xmm1
0x19db00096c7d  28bd  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db00096c85  28c5  c5fb11a570ffffff vmovsd [rbp-0x90],xmm4
0x19db00096c8d  28cd  c5fb119568ffffff vmovsd [rbp-0x98],xmm2
0x19db00096c95  28d5  4c8bc3         REX.W movq r8,rbx
0x19db00096c98  28d8  488bde         REX.W movq rbx,rsi
0x19db00096c9b  28db  b802000000     movl rax,0x2
0x19db00096ca0  28e0  4c8bce         REX.W movq r9,rsi
0x19db00096ca3  28e3  33f6           xorl rsi,rsi
0x19db00096ca5  28e5  4c8b1580faffff REX.W movq r10,[rip+0xfffffa80]
0x19db00096cac  28ec  41ffd2         call r10
0x19db00096caf  28ef  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00096cb9  28f9  488b350cedffff REX.W movq rsi,[rip+0xffffed0c]
0x19db00096cc0  2900  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00096cc6  2906  4c8b1d27dbffff REX.W movq r11,[rip+0xffffdb27]
0x19db00096ccd  290d  488b1d38dbffff REX.W movq rbx,[rip+0xffffdb38]
0x19db00096cd4  2914  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00096cd8  2918  c57b1045a0     vmovsd xmm8,[rbp-0x60]
0x19db00096cdd  291d  c5fb107d98     vmovsd xmm7,[rbp-0x68]
0x19db00096ce2  2922  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db00096ce7  2927  c5fb106d88     vmovsd xmm5,[rbp-0x78]
0x19db00096cec  292c  c5fb104d80     vmovsd xmm1,[rbp-0x80]
0x19db00096cf1  2931  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db00096cf9  2939  c5fb10a570ffffff vmovsd xmm4,[rbp-0x90]
0x19db00096d01  2941  c5fb109568ffffff vmovsd xmm2,[rbp-0x98]
0x19db00096d09  2949  488b8d60ffffff REX.W movq rcx,[rbp-0xa0]
0x19db00096d10  2950  e952efffff     jmp 0x19db00095c67  <+0x18a7>
0x19db00096d15  2955  c57b1145a0     vmovsd [rbp-0x60],xmm8
0x19db00096d1a  295a  c5fb117d98     vmovsd [rbp-0x68],xmm7
0x19db00096d1f  295f  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db00096d24  2964  c5fb116d88     vmovsd [rbp-0x78],xmm5
0x19db00096d29  2969  c5fb114d80     vmovsd [rbp-0x80],xmm1
0x19db00096d2e  296e  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db00096d36  2976  c5fb11a570ffffff vmovsd [rbp-0x90],xmm4
0x19db00096d3e  297e  c5fb119568ffffff vmovsd [rbp-0x98],xmm2
0x19db00096d46  2986  4c898d58ffffff REX.W movq [rbp-0xa8],r9
0x19db00096d4d  298d  488bc1         REX.W movq rax,rcx
0x19db00096d50  2990  4c8bc3         REX.W movq r8,rbx
0x19db00096d53  2993  33db           xorl rbx,rbx
0x19db00096d55  2995  4c8be6         REX.W movq r12,rsi
0x19db00096d58  2998  33f6           xorl rsi,rsi
0x19db00096d5a  299a  49ba20e7baf5ff7f0000 REX.W movq r10,0x7ffff5bae720  (GrowFastDoubleElements)    ;; off heap target
0x19db00096d64  29a4  41ffd2         call r10
0x19db00096d67  29a7  a801           test al,0x1
0x19db00096d69  29a9  0f84ed0b0000   jz 0x19db0009795c  <+0x359c>
0x19db00096d6f  29af  4c8bc0         REX.W movq r8,rax
0x19db00096d72  29b2  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00096d7c  29bc  488b3549ecffff REX.W movq rsi,[rip+0xffffec49]
0x19db00096d83  29c3  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00096d89  29c9  4c8b1d64daffff REX.W movq r11,[rip+0xffffda64]
0x19db00096d90  29d0  488b1d75daffff REX.W movq rbx,[rip+0xffffda75]
0x19db00096d97  29d7  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00096d9b  29db  c57b1045a0     vmovsd xmm8,[rbp-0x60]
0x19db00096da0  29e0  c5fb107d98     vmovsd xmm7,[rbp-0x68]
0x19db00096da5  29e5  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db00096daa  29ea  c5fb106d88     vmovsd xmm5,[rbp-0x78]
0x19db00096daf  29ef  c5fb104d80     vmovsd xmm1,[rbp-0x80]
0x19db00096db4  29f4  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db00096dbc  29fc  c5fb10a570ffffff vmovsd xmm4,[rbp-0x90]
0x19db00096dc4  2a04  c5fb109568ffffff vmovsd xmm2,[rbp-0x98]
0x19db00096dcc  2a0c  488b8d60ffffff REX.W movq rcx,[rbp-0xa0]
0x19db00096dd3  2a13  4c8b8d58ffffff REX.W movq r9,[rbp-0xa8]
0x19db00096dda  2a1a  e9dbeeffff     jmp 0x19db00095cba  <+0x18fa>
0x19db00096ddf  2a1f  4c8bc3         REX.W movq r8,rbx
0x19db00096de2  2a22  4c8bce         REX.W movq r9,rsi
0x19db00096de5  2a25  488b1d59f9ffff REX.W movq rbx,[rip+0xfffff959]
0x19db00096dec  2a2c  33c0           xorl rax,rax
0x19db00096dee  2a2e  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00096df8  2a38  4c8b152df9ffff REX.W movq r10,[rip+0xfffff92d]
0x19db00096dff  2a3f  41ffd2         call r10
0x19db00096e02  2a42  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00096e0c  2a4c  488b35b9ebffff REX.W movq rsi,[rip+0xffffebb9]
0x19db00096e13  2a53  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00096e19  2a59  4c8b1dd4d9ffff REX.W movq r11,[rip+0xffffd9d4]
0x19db00096e20  2a60  488b1de5d9ffff REX.W movq rbx,[rip+0xffffd9e5]
0x19db00096e27  2a67  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00096e2b  2a6b  e9c7eeffff     jmp 0x19db00095cf7  <+0x1937>
0x19db00096e30  2a70  4151           push r9
0x19db00096e32  2a72  52             push rdx
0x19db00096e33  2a73  4c898550ffffff REX.W movq [rbp-0xb0],r8
0x19db00096e3a  2a7a  48897d90       REX.W movq [rbp-0x70],rdi
0x19db00096e3e  2a7e  4c894da0       REX.W movq [rbp-0x60],r9
0x19db00096e42  2a82  488bde         REX.W movq rbx,rsi
0x19db00096e45  2a85  b802000000     movl rax,0x2
0x19db00096e4a  2a8a  33f6           xorl rsi,rsi
0x19db00096e4c  2a8c  4c8b15d9f8ffff REX.W movq r10,[rip+0xfffff8d9]
0x19db00096e53  2a93  41ffd2         call r10
0x19db00096e56  2a96  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00096e60  2aa0  488b3565ebffff REX.W movq rsi,[rip+0xffffeb65]
0x19db00096e67  2aa7  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00096e6d  2aad  4c8b1d80d9ffff REX.W movq r11,[rip+0xffffd980]
0x19db00096e74  2ab4  488b1d91d9ffff REX.W movq rbx,[rip+0xffffd991]
0x19db00096e7b  2abb  488b45c0       REX.W movq rax,[rbp-0x40]
0x19db00096e7f  2abf  4c8b65b8       REX.W movq r12,[rbp-0x48]
0x19db00096e83  2ac3  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00096e87  2ac7  4c8b8550ffffff REX.W movq r8,[rbp-0xb0]
0x19db00096e8e  2ace  488b7d90       REX.W movq rdi,[rbp-0x70]
0x19db00096e92  2ad2  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db00096e96  2ad6  e9ebeeffff     jmp 0x19db00095d86  <+0x19c6>
0x19db00096e9b  2adb  4154           push r12
0x19db00096e9d  2add  52             push rdx
0x19db00096e9e  2ade  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db00096ea6  2ae6  4c898550ffffff REX.W movq [rbp-0xb0],r8
0x19db00096ead  2aed  48894da0       REX.W movq [rbp-0x60],rcx
0x19db00096eb1  2af1  4c897598       REX.W movq [rbp-0x68],r14
0x19db00096eb5  2af5  48897d90       REX.W movq [rbp-0x70],rdi
0x19db00096eb9  2af9  48894588       REX.W movq [rbp-0x78],rax
0x19db00096ebd  2afd  4c894d80       REX.W movq [rbp-0x80],r9
0x19db00096ec1  2b01  4c89a578ffffff REX.W movq [rbp-0x88],r12
0x19db00096ec8  2b08  488bde         REX.W movq rbx,rsi
0x19db00096ecb  2b0b  b802000000     movl rax,0x2
0x19db00096ed0  2b10  33f6           xorl rsi,rsi
0x19db00096ed2  2b12  4c8b1553f8ffff REX.W movq r10,[rip+0xfffff853]
0x19db00096ed9  2b19  41ffd2         call r10
0x19db00096edc  2b1c  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00096ee6  2b26  488b35dfeaffff REX.W movq rsi,[rip+0xffffeadf]
0x19db00096eed  2b2d  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00096ef3  2b33  4c8b1dfad8ffff REX.W movq r11,[rip+0xffffd8fa]
0x19db00096efa  2b3a  488b1d0bd9ffff REX.W movq rbx,[rip+0xffffd90b]
0x19db00096f01  2b41  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db00096f09  2b49  4c8b8550ffffff REX.W movq r8,[rbp-0xb0]
0x19db00096f10  2b50  488b4da0       REX.W movq rcx,[rbp-0x60]
0x19db00096f14  2b54  4c8b7598       REX.W movq r14,[rbp-0x68]
0x19db00096f18  2b58  488b7d90       REX.W movq rdi,[rbp-0x70]
0x19db00096f1c  2b5c  488b4588       REX.W movq rax,[rbp-0x78]
0x19db00096f20  2b60  4c8b4d80       REX.W movq r9,[rbp-0x80]
0x19db00096f24  2b64  4c8ba578ffffff REX.W movq r12,[rbp-0x88]
0x19db00096f2b  2b6b  e9b3eeffff     jmp 0x19db00095de3  <+0x1a23>
0x19db00096f30  2b70  4154           push r12
0x19db00096f32  2b72  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00096f3c  2b7c  52             push rdx
0x19db00096f3d  2b7d  c5fb118d78ffffff vmovsd [rbp-0x88],xmm1
0x19db00096f45  2b85  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db00096f4d  2b8d  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db00096f55  2b95  4c898550ffffff REX.W movq [rbp-0xb0],r8
0x19db00096f5c  2b9c  48894da0       REX.W movq [rbp-0x60],rcx
0x19db00096f60  2ba0  4c897598       REX.W movq [rbp-0x68],r14
0x19db00096f64  2ba4  48897d90       REX.W movq [rbp-0x70],rdi
0x19db00096f68  2ba8  48894588       REX.W movq [rbp-0x78],rax
0x19db00096f6c  2bac  4c894d80       REX.W movq [rbp-0x80],r9
0x19db00096f70  2bb0  4c89a568ffffff REX.W movq [rbp-0x98],r12
0x19db00096f77  2bb7  488bde         REX.W movq rbx,rsi
0x19db00096f7a  2bba  b802000000     movl rax,0x2
0x19db00096f7f  2bbf  33f6           xorl rsi,rsi
0x19db00096f81  2bc1  4c8b15a4f7ffff REX.W movq r10,[rip+0xfffff7a4]
0x19db00096f88  2bc8  41ffd2         call r10
0x19db00096f8b  2bcb  488b353aeaffff REX.W movq rsi,[rip+0xffffea3a]
0x19db00096f92  2bd2  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00096f98  2bd8  4c8b1d55d8ffff REX.W movq r11,[rip+0xffffd855]
0x19db00096f9f  2bdf  488b1d66d8ffff REX.W movq rbx,[rip+0xffffd866]
0x19db00096fa6  2be6  c5fb108d78ffffff vmovsd xmm1,[rbp-0x88]
0x19db00096fae  2bee  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db00096fb6  2bf6  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db00096fbe  2bfe  4c8b8550ffffff REX.W movq r8,[rbp-0xb0]
0x19db00096fc5  2c05  488b4da0       REX.W movq rcx,[rbp-0x60]
0x19db00096fc9  2c09  4c8b7598       REX.W movq r14,[rbp-0x68]
0x19db00096fcd  2c0d  488b7d90       REX.W movq rdi,[rbp-0x70]
0x19db00096fd1  2c11  488b4588       REX.W movq rax,[rbp-0x78]
0x19db00096fd5  2c15  4c8b4d80       REX.W movq r9,[rbp-0x80]
0x19db00096fd9  2c19  4c8ba568ffffff REX.W movq r12,[rbp-0x98]
0x19db00096fe0  2c20  e95eeeffff     jmp 0x19db00095e43  <+0x1a83>
0x19db00096fe5  2c25  4151           push r9
0x19db00096fe7  2c27  49bc559f3008db190000 REX.W movq r12,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00096ff1  2c31  4154           push r12
0x19db00096ff3  2c33  c5fb116d80     vmovsd [rbp-0x80],xmm5
0x19db00096ff8  2c38  c5fb118d78ffffff vmovsd [rbp-0x88],xmm1
0x19db00097000  2c40  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db00097008  2c48  c5fb11a568ffffff vmovsd [rbp-0x98],xmm4
0x19db00097010  2c50  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db00097018  2c58  4c898550ffffff REX.W movq [rbp-0xb0],r8
0x19db0009701f  2c5f  48894da0       REX.W movq [rbp-0x60],rcx
0x19db00097023  2c63  4c897598       REX.W movq [rbp-0x68],r14
0x19db00097027  2c67  48897d90       REX.W movq [rbp-0x70],rdi
0x19db0009702b  2c6b  4c894d88       REX.W movq [rbp-0x78],r9
0x19db0009702f  2c6f  488bd3         REX.W movq rdx,rbx
0x19db00097032  2c72  488bde         REX.W movq rbx,rsi
0x19db00097035  2c75  b802000000     movl rax,0x2
0x19db0009703a  2c7a  33f6           xorl rsi,rsi
0x19db0009703c  2c7c  4c8b15e9f6ffff REX.W movq r10,[rip+0xfffff6e9]
0x19db00097043  2c83  41ffd2         call r10
0x19db00097046  2c86  488b357fe9ffff REX.W movq rsi,[rip+0xffffe97f]
0x19db0009704d  2c8d  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00097053  2c93  4c8b1d9ad7ffff REX.W movq r11,[rip+0xffffd79a]
0x19db0009705a  2c9a  488b1dabd7ffff REX.W movq rbx,[rip+0xffffd7ab]
0x19db00097061  2ca1  c5fb106d80     vmovsd xmm5,[rbp-0x80]
0x19db00097066  2ca6  c5fb108d78ffffff vmovsd xmm1,[rbp-0x88]
0x19db0009706e  2cae  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db00097076  2cb6  c5fb10a568ffffff vmovsd xmm4,[rbp-0x98]
0x19db0009707e  2cbe  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db00097086  2cc6  4c8b8550ffffff REX.W movq r8,[rbp-0xb0]
0x19db0009708d  2ccd  488b4da0       REX.W movq rcx,[rbp-0x60]
0x19db00097091  2cd1  4c8b7598       REX.W movq r14,[rbp-0x68]
0x19db00097095  2cd5  488b7d90       REX.W movq rdi,[rbp-0x70]
0x19db00097099  2cd9  4c8b4d88       REX.W movq r9,[rbp-0x78]
0x19db0009709d  2cdd  e90aeeffff     jmp 0x19db00095eac  <+0x1aec>
0x19db000970a2  2ce2  50             push rax
0x19db000970a3  2ce3  4154           push r12
0x19db000970a5  2ce5  c57b114588     vmovsd [rbp-0x78],xmm8
0x19db000970aa  2cea  c5fb116d80     vmovsd [rbp-0x80],xmm5
0x19db000970af  2cef  c5fb118d78ffffff vmovsd [rbp-0x88],xmm1
0x19db000970b7  2cf7  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db000970bf  2cff  c5fb11a568ffffff vmovsd [rbp-0x98],xmm4
0x19db000970c7  2d07  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db000970cf  2d0f  4c898550ffffff REX.W movq [rbp-0xb0],r8
0x19db000970d6  2d16  48894da0       REX.W movq [rbp-0x60],rcx
0x19db000970da  2d1a  4c897598       REX.W movq [rbp-0x68],r14
0x19db000970de  2d1e  48894590       REX.W movq [rbp-0x70],rax
0x19db000970e2  2d22  488bfb         REX.W movq rdi,rbx
0x19db000970e5  2d25  488bde         REX.W movq rbx,rsi
0x19db000970e8  2d28  488bd0         REX.W movq rdx,rax
0x19db000970eb  2d2b  b802000000     movl rax,0x2
0x19db000970f0  2d30  33f6           xorl rsi,rsi
0x19db000970f2  2d32  4c8b1533f6ffff REX.W movq r10,[rip+0xfffff633]
0x19db000970f9  2d39  41ffd2         call r10
0x19db000970fc  2d3c  49bc559f3008db190000 REX.W movq r12,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00097106  2d46  488b35bfe8ffff REX.W movq rsi,[rip+0xffffe8bf]
0x19db0009710d  2d4d  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00097113  2d53  4c8b1ddad6ffff REX.W movq r11,[rip+0xffffd6da]
0x19db0009711a  2d5a  488b1debd6ffff REX.W movq rbx,[rip+0xffffd6eb]
0x19db00097121  2d61  4c8b4da8       REX.W movq r9,[rbp-0x58]
0x19db00097125  2d65  c57b104588     vmovsd xmm8,[rbp-0x78]
0x19db0009712a  2d6a  c5fb106d80     vmovsd xmm5,[rbp-0x80]
0x19db0009712f  2d6f  c5fb108d78ffffff vmovsd xmm1,[rbp-0x88]
0x19db00097137  2d77  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db0009713f  2d7f  c5fb10a568ffffff vmovsd xmm4,[rbp-0x98]
0x19db00097147  2d87  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db0009714f  2d8f  4c8b8550ffffff REX.W movq r8,[rbp-0xb0]
0x19db00097156  2d96  488b4da0       REX.W movq rcx,[rbp-0x60]
0x19db0009715a  2d9a  4c8b7598       REX.W movq r14,[rbp-0x68]
0x19db0009715e  2d9e  488b4590       REX.W movq rax,[rbp-0x70]
0x19db00097162  2da2  e995edffff     jmp 0x19db00095efc  <+0x1b3c>
0x19db00097167  2da7  4156           push r14
0x19db00097169  2da9  4154           push r12
0x19db0009716b  2dab  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db00097170  2db0  c57b114588     vmovsd [rbp-0x78],xmm8
0x19db00097175  2db5  c5fb116d80     vmovsd [rbp-0x80],xmm5
0x19db0009717a  2dba  c5fb118d78ffffff vmovsd [rbp-0x88],xmm1
0x19db00097182  2dc2  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db0009718a  2dca  c5fb11a568ffffff vmovsd [rbp-0x98],xmm4
0x19db00097192  2dd2  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db0009719a  2dda  4c898550ffffff REX.W movq [rbp-0xb0],r8
0x19db000971a1  2de1  4c8975a0       REX.W movq [rbp-0x60],r14
0x19db000971a5  2de5  488bd3         REX.W movq rdx,rbx
0x19db000971a8  2de8  488bde         REX.W movq rbx,rsi
0x19db000971ab  2deb  b802000000     movl rax,0x2
0x19db000971b0  2df0  488bce         REX.W movq rcx,rsi
0x19db000971b3  2df3  33f6           xorl rsi,rsi
0x19db000971b5  2df5  4c8b1570f5ffff REX.W movq r10,[rip+0xfffff570]
0x19db000971bc  2dfc  41ffd2         call r10
0x19db000971bf  2dff  49bc559f3008db190000 REX.W movq r12,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000971c9  2e09  488b35fce7ffff REX.W movq rsi,[rip+0xffffe7fc]
0x19db000971d0  2e10  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000971d6  2e16  4c8b1d17d6ffff REX.W movq r11,[rip+0xffffd617]
0x19db000971dd  2e1d  488b1d28d6ffff REX.W movq rbx,[rip+0xffffd628]
0x19db000971e4  2e24  4c8b4da8       REX.W movq r9,[rbp-0x58]
0x19db000971e8  2e28  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db000971ed  2e2d  c57b104588     vmovsd xmm8,[rbp-0x78]
0x19db000971f2  2e32  c5fb106d80     vmovsd xmm5,[rbp-0x80]
0x19db000971f7  2e37  c5fb108d78ffffff vmovsd xmm1,[rbp-0x88]
0x19db000971ff  2e3f  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db00097207  2e47  c5fb10a568ffffff vmovsd xmm4,[rbp-0x98]
0x19db0009720f  2e4f  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db00097217  2e57  4c8b8550ffffff REX.W movq r8,[rbp-0xb0]
0x19db0009721e  2e5e  4c8b75a0       REX.W movq r14,[rbp-0x60]
0x19db00097222  2e62  e91dedffff     jmp 0x19db00095f44  <+0x1b84>
0x19db00097227  2e67  51             push rcx
0x19db00097228  2e68  4154           push r12
0x19db0009722a  2e6a  c57b114d98     vmovsd [rbp-0x68],xmm9
0x19db0009722f  2e6f  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db00097234  2e74  c57b114588     vmovsd [rbp-0x78],xmm8
0x19db00097239  2e79  c5fb116d80     vmovsd [rbp-0x80],xmm5
0x19db0009723e  2e7e  c5fb118d78ffffff vmovsd [rbp-0x88],xmm1
0x19db00097246  2e86  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db0009724e  2e8e  c5fb11a568ffffff vmovsd [rbp-0x98],xmm4
0x19db00097256  2e96  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db0009725e  2e9e  4c898550ffffff REX.W movq [rbp-0xb0],r8
0x19db00097265  2ea5  4c8bf3         REX.W movq r14,rbx
0x19db00097268  2ea8  488bde         REX.W movq rbx,rsi
0x19db0009726b  2eab  b802000000     movl rax,0x2
0x19db00097270  2eb0  488bd6         REX.W movq rdx,rsi
0x19db00097273  2eb3  33f6           xorl rsi,rsi
0x19db00097275  2eb5  4c8b15b0f4ffff REX.W movq r10,[rip+0xfffff4b0]
0x19db0009727c  2ebc  41ffd2         call r10
0x19db0009727f  2ebf  49bc559f3008db190000 REX.W movq r12,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00097289  2ec9  488b353ce7ffff REX.W movq rsi,[rip+0xffffe73c]
0x19db00097290  2ed0  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00097296  2ed6  4c8b1d57d5ffff REX.W movq r11,[rip+0xffffd557]
0x19db0009729d  2edd  488b1d68d5ffff REX.W movq rbx,[rip+0xffffd568]
0x19db000972a4  2ee4  4c8b4da8       REX.W movq r9,[rbp-0x58]
0x19db000972a8  2ee8  c57b104d98     vmovsd xmm9,[rbp-0x68]
0x19db000972ad  2eed  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db000972b2  2ef2  c57b104588     vmovsd xmm8,[rbp-0x78]
0x19db000972b7  2ef7  c5fb106d80     vmovsd xmm5,[rbp-0x80]
0x19db000972bc  2efc  c5fb108d78ffffff vmovsd xmm1,[rbp-0x88]
0x19db000972c4  2f04  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db000972cc  2f0c  c5fb10a568ffffff vmovsd xmm4,[rbp-0x98]
0x19db000972d4  2f14  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db000972dc  2f1c  488b8d58ffffff REX.W movq rcx,[rbp-0xa8]
0x19db000972e3  2f23  4c8b8550ffffff REX.W movq r8,[rbp-0xb0]
0x19db000972ea  2f2a  e99becffff     jmp 0x19db00095f8a  <+0x1bca>
0x19db000972ef  2f2f  478d3400       leal r14,[r8+r8*1]
0x19db000972f3  2f33  4c8b1598d1ffff REX.W movq r10,[rip+0xffffd198]
0x19db000972fa  2f3a  4d3bd6         REX.W cmpq r10,r14
0x19db000972fd  2f3d  7712           ja 0x19db00097311  <+0x2f51>
0x19db000972ff  2f3f  488b159bd1ffff REX.W movq rdx,[rip+0xffffd19b]
0x19db00097306  2f46  4c8b15cbd0ffff REX.W movq r10,[rip+0xffffd0cb]
0x19db0009730d  2f4d  41ffd2         call r10
0x19db00097310  2f50  cc             int3l
0x19db00097311  2f51  c57b114d98     vmovsd [rbp-0x68],xmm9
0x19db00097316  2f56  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db0009731b  2f5b  c57b114588     vmovsd [rbp-0x78],xmm8
0x19db00097320  2f60  c5fb116d80     vmovsd [rbp-0x80],xmm5
0x19db00097325  2f65  c5fb118d78ffffff vmovsd [rbp-0x88],xmm1
0x19db0009732d  2f6d  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db00097335  2f75  c5fb11a568ffffff vmovsd [rbp-0x98],xmm4
0x19db0009733d  2f7d  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db00097345  2f85  4c898550ffffff REX.W movq [rbp-0xb0],r8
0x19db0009734c  2f8c  48898548ffffff REX.W movq [rbp-0xb8],rax
0x19db00097353  2f93  488bd3         REX.W movq rdx,rbx
0x19db00097356  2f96  498bde         REX.W movq rbx,r14
0x19db00097359  2f99  4c8bf0         REX.W movq r14,rax
0x19db0009735c  2f9c  488bc1         REX.W movq rax,rcx
0x19db0009735f  2f9f  488bfe         REX.W movq rdi,rsi
0x19db00097362  2fa2  33f6           xorl rsi,rsi
0x19db00097364  2fa4  4c8b15f1f9ffff REX.W movq r10,[rip+0xfffff9f1]
0x19db0009736b  2fab  41ffd2         call r10
0x19db0009736e  2fae  a801           test al,0x1
0x19db00097370  2fb0  0f84b5050000   jz 0x19db0009792b  <+0x356b>
0x19db00097376  2fb6  4c8bf0         REX.W movq r14,rax
0x19db00097379  2fb9  49bc559f3008db190000 REX.W movq r12,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00097383  2fc3  488b3542e6ffff REX.W movq rsi,[rip+0xffffe642]
0x19db0009738a  2fca  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00097390  2fd0  4c8b1d5dd4ffff REX.W movq r11,[rip+0xffffd45d]
0x19db00097397  2fd7  488b1d6ed4ffff REX.W movq rbx,[rip+0xffffd46e]
0x19db0009739e  2fde  4c8b4da8       REX.W movq r9,[rbp-0x58]
0x19db000973a2  2fe2  c57b104d98     vmovsd xmm9,[rbp-0x68]
0x19db000973a7  2fe7  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db000973ac  2fec  c57b104588     vmovsd xmm8,[rbp-0x78]
0x19db000973b1  2ff1  c5fb106d80     vmovsd xmm5,[rbp-0x80]
0x19db000973b6  2ff6  c5fb108d78ffffff vmovsd xmm1,[rbp-0x88]
0x19db000973be  2ffe  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db000973c6  3006  c5fb10a568ffffff vmovsd xmm4,[rbp-0x98]
0x19db000973ce  300e  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db000973d6  3016  488b8d58ffffff REX.W movq rcx,[rbp-0xa8]
0x19db000973dd  301d  4c8b8550ffffff REX.W movq r8,[rbp-0xb0]
0x19db000973e4  3024  488b8548ffffff REX.W movq rax,[rbp-0xb8]
0x19db000973eb  302b  e9e9ebffff     jmp 0x19db00095fd9  <+0x1c19>
0x19db000973f0  3030  488955a0       REX.W movq [rbp-0x60],rdx
0x19db000973f4  3034  4c8bc3         REX.W movq r8,rbx
0x19db000973f7  3037  488b1d47f3ffff REX.W movq rbx,[rip+0xfffff347]
0x19db000973fe  303e  33c0           xorl rax,rax
0x19db00097400  3040  4c8bf6         REX.W movq r14,rsi
0x19db00097403  3043  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009740d  304d  4c8b1518f3ffff REX.W movq r10,[rip+0xfffff318]
0x19db00097414  3054  41ffd2         call r10
0x19db00097417  3057  49bc559f3008db190000 REX.W movq r12,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00097421  3061  488b35a4e5ffff REX.W movq rsi,[rip+0xffffe5a4]
0x19db00097428  3068  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009742e  306e  4c8b1dbfd3ffff REX.W movq r11,[rip+0xffffd3bf]
0x19db00097435  3075  488b1dd0d3ffff REX.W movq rbx,[rip+0xffffd3d0]
0x19db0009743c  307c  4c8b4da8       REX.W movq r9,[rbp-0x58]
0x19db00097440  3080  488b55a0       REX.W movq rdx,[rbp-0x60]
0x19db00097444  3084  e9c7e8ffff     jmp 0x19db00095d10  <+0x1950>
0x19db00097449  3089  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db0009744d  308d  488bcb         REX.W movq rcx,rbx
0x19db00097450  3090  488b1deef2ffff REX.W movq rbx,[rip+0xfffff2ee]
0x19db00097457  3097  4c8bc0         REX.W movq r8,rax
0x19db0009745a  309a  33c0           xorl rax,rax
0x19db0009745c  309c  488bfe         REX.W movq rdi,rsi
0x19db0009745f  309f  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00097469  30a9  4c8b15bcf2ffff REX.W movq r10,[rip+0xfffff2bc]
0x19db00097470  30b0  41ffd2         call r10
0x19db00097473  30b3  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009747d  30bd  488b3548e5ffff REX.W movq rsi,[rip+0xffffe548]
0x19db00097484  30c4  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009748a  30ca  4c8b1d63d3ffff REX.W movq r11,[rip+0xffffd363]
0x19db00097491  30d1  488b1d74d3ffff REX.W movq rbx,[rip+0xffffd374]
0x19db00097498  30d8  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db0009749c  30dc  488b45c0       REX.W movq rax,[rbp-0x40]
0x19db000974a0  30e0  4c8b65b8       REX.W movq r12,[rbp-0x48]
0x19db000974a4  30e4  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db000974a8  30e8  e933e5ffff     jmp 0x19db000959e0  <+0x1620>
0x19db000974ad  30ed  c4c17b104303   vmovsd xmm0,[r11+0x3]
0x19db000974b3  30f3  e935edffff     jmp 0x19db000961ed  <+0x1e2d>
0x19db000974b8  30f8  488945a8       REX.W movq [rbp-0x58],rax
0x19db000974bc  30fc  c5fb1145c0     vmovsd [rbp-0x40],xmm0
0x19db000974c1  3101  ba38000000     movl rdx,0x38
0x19db000974c6  3106  4c8b15def2ffff REX.W movq r10,[rip+0xfffff2de]
0x19db000974cd  310d  41ffd2         call r10
0x19db000974d0  3110  4c8d60ff       REX.W leaq r12,[rax-0x1]
0x19db000974d4  3114  c5fb1045c0     vmovsd xmm0,[rbp-0x40]
0x19db000974d9  3119  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db000974dd  311d  488b45a8       REX.W movq rax,[rbp-0x58]
0x19db000974e1  3121  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db000974e5  3125  4c8b1d08d3ffff REX.W movq r11,[rip+0xffffd308]
0x19db000974ec  312c  e91bedffff     jmp 0x19db0009620c  <+0x1e4c>
0x19db000974f1  3131  50             push rax
0x19db000974f2  3132  53             push rbx
0x19db000974f3  3133  488955c0       REX.W movq [rbp-0x40],rdx
0x19db000974f7  3137  488945a8       REX.W movq [rbp-0x58],rax
0x19db000974fb  313b  4c896598       REX.W movq [rbp-0x68],r12
0x19db000974ff  313f  c5fb114590     vmovsd [rbp-0x70],xmm0
0x19db00097504  3144  4c897d88       REX.W movq [rbp-0x78],r15
0x19db00097508  3148  4c897580       REX.W movq [rbp-0x80],r14
0x19db0009750c  314c  488b1db9e4ffff REX.W movq rbx,[rip+0xffffe4b9]
0x19db00097513  3153  b802000000     movl rax,0x2
0x19db00097518  3158  33f6           xorl rsi,rsi
0x19db0009751a  315a  4c8b150bf2ffff REX.W movq r10,[rip+0xfffff20b]
0x19db00097521  3161  41ffd2         call r10
0x19db00097524  3164  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db00097528  3168  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db0009752c  316c  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db00097530  3170  488b45a8       REX.W movq rax,[rbp-0x58]
0x19db00097534  3174  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db00097538  3178  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db00097542  3182  4c8b6598       REX.W movq r12,[rbp-0x68]
0x19db00097546  3186  c5fb104590     vmovsd xmm0,[rbp-0x70]
0x19db0009754b  318b  4c8b7d88       REX.W movq r15,[rbp-0x78]
0x19db0009754f  318f  4c8b7580       REX.W movq r14,[rbp-0x80]
0x19db00097553  3193  41bbb59e3008   movl r11,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00097559  3199  e99dedffff     jmp 0x19db000962fb  <+0x1f3b>
0x19db0009755e  319e  488955c0       REX.W movq [rbp-0x40],rdx
0x19db00097562  31a2  488945a8       REX.W movq [rbp-0x58],rax
0x19db00097566  31a6  4c8bf3         REX.W movq r14,rbx
0x19db00097569  31a9  488b1dd5f1ffff REX.W movq rbx,[rip+0xfffff1d5]
0x19db00097570  31b0  4c8be0         REX.W movq r12,rax
0x19db00097573  31b3  33c0           xorl rax,rax
0x19db00097575  31b5  4c8bfe         REX.W movq r15,rsi
0x19db00097578  31b8  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00097582  31c2  4c8b15a3f1ffff REX.W movq r10,[rip+0xfffff1a3]
0x19db00097589  31c9  41ffd2         call r10
0x19db0009758c  31cc  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db00097590  31d0  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db00097594  31d4  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db00097598  31d8  488b45a8       REX.W movq rax,[rbp-0x58]
0x19db0009759c  31dc  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db000975a0  31e0  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db000975aa  31ea  41bbb59e3008   movl r11,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000975b0  31f0  e9e6edffff     jmp 0x19db0009639b  <+0x1fdb>
0x19db000975b5  31f5  438d1c24       leal rbx,[r12+r12*1]
0x19db000975b9  31f9  4c8b15d2ceffff REX.W movq r10,[rip+0xffffced2]
0x19db000975c0  3200  4c3bd3         REX.W cmpq r10,rbx
0x19db000975c3  3203  7712           ja 0x19db000975d7  <+0x3217>
0x19db000975c5  3205  488b15d5ceffff REX.W movq rdx,[rip+0xffffced5]
0x19db000975cc  320c  4c8b1505ceffff REX.W movq r10,[rip+0xffffce05]
0x19db000975d3  3213  41ffd2         call r10
0x19db000975d6  3216  cc             int3l
0x19db000975d7  3217  488955c0       REX.W movq [rbp-0x40],rdx
0x19db000975db  321b  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db000975df  321f  c57b114590     vmovsd [rbp-0x70],xmm8
0x19db000975e4  3224  c5fb117d88     vmovsd [rbp-0x78],xmm7
0x19db000975e9  3229  c5fb117580     vmovsd [rbp-0x80],xmm6
0x19db000975ee  322e  c5fb11ad78ffffff vmovsd [rbp-0x88],xmm5
0x19db000975f6  3236  c5fb118d70ffffff vmovsd [rbp-0x90],xmm1
0x19db000975fe  323e  c5fb118568ffffff vmovsd [rbp-0x98],xmm0
0x19db00097606  3246  c5fb11a560ffffff vmovsd [rbp-0xa0],xmm4
0x19db0009760e  324e  c5fb119558ffffff vmovsd [rbp-0xa8],xmm2
0x19db00097616  3256  4c89a550ffffff REX.W movq [rbp-0xb0],r12
0x19db0009761d  325d  48898548ffffff REX.W movq [rbp-0xb8],rax
0x19db00097624  3264  4c8bf8         REX.W movq r15,rax
0x19db00097627  3267  488bc2         REX.W movq rax,rdx
0x19db0009762a  326a  488bce         REX.W movq rcx,rsi
0x19db0009762d  326d  33f6           xorl rsi,rsi
0x19db0009762f  326f  4c8b1526f7ffff REX.W movq r10,[rip+0xfffff726]
0x19db00097636  3276  41ffd2         call r10
0x19db00097639  3279  a801           test al,0x1
0x19db0009763b  327b  0f84c0020000   jz 0x19db00097901  <+0x3541>
0x19db00097641  3281  4c8bf8         REX.W movq r15,rax
0x19db00097644  3284  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db00097648  3288  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db0009764c  328c  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db00097650  3290  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db00097654  3294  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db00097658  3298  c57b104590     vmovsd xmm8,[rbp-0x70]
0x19db0009765d  329d  c5fb107d88     vmovsd xmm7,[rbp-0x78]
0x19db00097662  32a2  c5fb107580     vmovsd xmm6,[rbp-0x80]
0x19db00097667  32a7  c5fb10ad78ffffff vmovsd xmm5,[rbp-0x88]
0x19db0009766f  32af  c5fb108d70ffffff vmovsd xmm1,[rbp-0x90]
0x19db00097677  32b7  c5fb108568ffffff vmovsd xmm0,[rbp-0x98]
0x19db0009767f  32bf  c5fb10a560ffffff vmovsd xmm4,[rbp-0xa0]
0x19db00097687  32c7  c5fb109558ffffff vmovsd xmm2,[rbp-0xa8]
0x19db0009768f  32cf  4c8ba550ffffff REX.W movq r12,[rbp-0xb0]
0x19db00097696  32d6  488b8548ffffff REX.W movq rax,[rbp-0xb8]
0x19db0009769d  32dd  41bbb59e3008   movl r11,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000976a3  32e3  e91feeffff     jmp 0x19db000964c7  <+0x2107>
0x19db000976a8  32e8  488955c0       REX.W movq [rbp-0x40],rdx
0x19db000976ac  32ec  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db000976b0  32f0  48894d98       REX.W movq [rbp-0x68],rcx
0x19db000976b4  32f4  488b1d8af0ffff REX.W movq rbx,[rip+0xfffff08a]
0x19db000976bb  32fb  33c0           xorl rax,rax
0x19db000976bd  32fd  4c8be6         REX.W movq r12,rsi
0x19db000976c0  3300  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000976ca  330a  4c8b155bf0ffff REX.W movq r10,[rip+0xfffff05b]
0x19db000976d1  3311  41ffd2         call r10
0x19db000976d4  3314  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db000976d8  3318  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db000976dc  331c  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db000976e0  3320  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db000976e4  3324  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db000976e8  3328  488b4d98       REX.W movq rcx,[rbp-0x68]
0x19db000976ec  332c  41bbb59e3008   movl r11,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000976f2  3332  e9b9ecffff     jmp 0x19db000963b0  <+0x1ff0>
0x19db000976f7  3337  4c894dd0       REX.W movq [rbp-0x30],r9
0x19db000976fb  333b  488b1d43f0ffff REX.W movq rbx,[rip+0xfffff043]
0x19db00097702  3342  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009770c  334c  33c0           xorl rax,rax
0x19db0009770e  334e  4c8b1517f0ffff REX.W movq r10,[rip+0xfffff017]
0x19db00097715  3355  41ffd2         call r10
0x19db00097718  3358  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db0009771c  335c  e99fe9ffff     jmp 0x19db000960c0  <+0x1d00>
0x19db00097721  3361  cc             int3l
0x19db00097722  3362  458bc9         movl r9,r9
0x19db00097725  3365  4d03cd         REX.W addq r9,r13
0x19db00097728  3368  49c7c60000fcff REX.W movq r14,0xfffc0000
0x19db0009772f  336f  4d23f1         REX.W andq r14,r9
0x19db00097732  3372  41f6460802     testb [r14+0x8],0x2
0x19db00097737  3377  0f8471e9ffff   jz 0x19db000960ae  <+0x1cee>
0x19db0009773d  337d  498d4017       REX.W leaq rax,[r8+0x17]
0x19db00097741  3381  50             push rax
0x19db00097742  3382  51             push rcx
0x19db00097743  3383  52             push rdx
0x19db00097744  3384  56             push rsi
0x19db00097745  3385  57             push rdi
0x19db00097746  3386  488bf0         REX.W movq rsi,rax
0x19db00097749  3389  498bf8         REX.W movq rdi,r8
0x19db0009774c  338c  33d2           xorl rdx,rdx
0x19db0009774e  338e  488b0d4ccdffff REX.W movq rcx,[rip+0xffffcd4c]
0x19db00097755  3395  49bac065b8f5ff7f0000 REX.W movq r10,0x7ffff5b865c0  (RecordWrite)    ;; off heap target
0x19db0009775f  339f  41ffd2         call r10
0x19db00097762  33a2  5f             pop rdi
0x19db00097763  33a3  5e             pop rsi
0x19db00097764  33a4  5a             pop rdx
0x19db00097765  33a5  59             pop rcx
0x19db00097766  33a6  58             pop rax
0x19db00097767  33a7  e942e9ffff     jmp 0x19db000960ae  <+0x1cee>
0x19db0009776c  33ac  a801           test al,0x1
0x19db0009776e  33ae  0f84d0e0ffff   jz 0x19db00095844  <+0x1484>
0x19db00097774  33b4  8bc0           movl rax,rax
0x19db00097776  33b6  4903c5         REX.W addq rax,r13
0x19db00097779  33b9  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db00097780  33c0  4c23c0         REX.W andq r8,rax
0x19db00097783  33c3  41f6400802     testb [r8+0x8],0x2
0x19db00097788  33c8  0f84b6e0ffff   jz 0x19db00095844  <+0x1484>
0x19db0009778e  33ce  4c8d4e13       REX.W leaq r9,[rsi+0x13]
0x19db00097792  33d2  50             push rax
0x19db00097793  33d3  51             push rcx
0x19db00097794  33d4  52             push rdx
0x19db00097795  33d5  56             push rsi
0x19db00097796  33d6  57             push rdi
0x19db00097797  33d7  488bfe         REX.W movq rdi,rsi
0x19db0009779a  33da  498bf1         REX.W movq rsi,r9
0x19db0009779d  33dd  33d2           xorl rdx,rdx
0x19db0009779f  33df  488b0dfbccffff REX.W movq rcx,[rip+0xffffccfb]
0x19db000977a6  33e6  4c8b15aaffffff REX.W movq r10,[rip+0xffffffaa]
0x19db000977ad  33ed  41ffd2         call r10
0x19db000977b0  33f0  5f             pop rdi
0x19db000977b1  33f1  5e             pop rsi
0x19db000977b2  33f2  5a             pop rdx
0x19db000977b3  33f3  59             pop rcx
0x19db000977b4  33f4  58             pop rax
0x19db000977b5  33f5  e98ae0ffff     jmp 0x19db00095844  <+0x1484>
0x19db000977ba  33fa  a801           test al,0x1
0x19db000977bc  33fc  0f84c0dbffff   jz 0x19db00095382  <+0xfc2>
0x19db000977c2  3402  8bc0           movl rax,rax
0x19db000977c4  3404  4903c5         REX.W addq rax,r13
0x19db000977c7  3407  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db000977ce  340e  4c23c0         REX.W andq r8,rax
0x19db000977d1  3411  41f6400802     testb [r8+0x8],0x2
0x19db000977d6  3416  0f84a6dbffff   jz 0x19db00095382  <+0xfc2>
0x19db000977dc  341c  4c8d4e13       REX.W leaq r9,[rsi+0x13]
0x19db000977e0  3420  50             push rax
0x19db000977e1  3421  51             push rcx
0x19db000977e2  3422  52             push rdx
0x19db000977e3  3423  56             push rsi
0x19db000977e4  3424  57             push rdi
0x19db000977e5  3425  488bfe         REX.W movq rdi,rsi
0x19db000977e8  3428  498bf1         REX.W movq rsi,r9
0x19db000977eb  342b  33d2           xorl rdx,rdx
0x19db000977ed  342d  488b0dadccffff REX.W movq rcx,[rip+0xffffccad]
0x19db000977f4  3434  4c8b155cffffff REX.W movq r10,[rip+0xffffff5c]
0x19db000977fb  343b  41ffd2         call r10
0x19db000977fe  343e  5f             pop rdi
0x19db000977ff  343f  5e             pop rsi
0x19db00097800  3440  5a             pop rdx
0x19db00097801  3441  59             pop rcx
0x19db00097802  3442  58             pop rax
0x19db00097803  3443  e97adbffff     jmp 0x19db00095382  <+0xfc2>
0x19db00097808  3448  a801           test al,0x1
0x19db0009780a  344a  0f8466d8ffff   jz 0x19db00095076  <+0xcb6>
0x19db00097810  3450  8bc0           movl rax,rax
0x19db00097812  3452  4903c5         REX.W addq rax,r13
0x19db00097815  3455  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db0009781c  345c  4c23c0         REX.W andq r8,rax
0x19db0009781f  345f  41f6400802     testb [r8+0x8],0x2
0x19db00097824  3464  0f844cd8ffff   jz 0x19db00095076  <+0xcb6>
0x19db0009782a  346a  4c8d4e13       REX.W leaq r9,[rsi+0x13]
0x19db0009782e  346e  50             push rax
0x19db0009782f  346f  51             push rcx
0x19db00097830  3470  52             push rdx
0x19db00097831  3471  56             push rsi
0x19db00097832  3472  57             push rdi
0x19db00097833  3473  488bfe         REX.W movq rdi,rsi
0x19db00097836  3476  498bf1         REX.W movq rsi,r9
0x19db00097839  3479  33d2           xorl rdx,rdx
0x19db0009783b  347b  488b0d5fccffff REX.W movq rcx,[rip+0xffffcc5f]
0x19db00097842  3482  4c8b150effffff REX.W movq r10,[rip+0xffffff0e]
0x19db00097849  3489  41ffd2         call r10
0x19db0009784c  348c  5f             pop rdi
0x19db0009784d  348d  5e             pop rsi
0x19db0009784e  348e  5a             pop rdx
0x19db0009784f  348f  59             pop rcx
0x19db00097850  3490  58             pop rax
0x19db00097851  3491  e920d8ffff     jmp 0x19db00095076  <+0xcb6>
0x19db00097856  3496  a801           test al,0x1
0x19db00097858  3498  0f8428d5ffff   jz 0x19db00094d86  <+0x9c6>
0x19db0009785e  349e  8bc0           movl rax,rax
0x19db00097860  34a0  4903c5         REX.W addq rax,r13
0x19db00097863  34a3  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db0009786a  34aa  4c23c0         REX.W andq r8,rax
0x19db0009786d  34ad  41f6400802     testb [r8+0x8],0x2
0x19db00097872  34b2  0f840ed5ffff   jz 0x19db00094d86  <+0x9c6>
0x19db00097878  34b8  4c8d4e13       REX.W leaq r9,[rsi+0x13]
0x19db0009787c  34bc  50             push rax
0x19db0009787d  34bd  51             push rcx
0x19db0009787e  34be  52             push rdx
0x19db0009787f  34bf  56             push rsi
0x19db00097880  34c0  57             push rdi
0x19db00097881  34c1  488bfe         REX.W movq rdi,rsi
0x19db00097884  34c4  498bf1         REX.W movq rsi,r9
0x19db00097887  34c7  33d2           xorl rdx,rdx
0x19db00097889  34c9  488b0d11ccffff REX.W movq rcx,[rip+0xffffcc11]
0x19db00097890  34d0  4c8b15c0feffff REX.W movq r10,[rip+0xfffffec0]
0x19db00097897  34d7  41ffd2         call r10
0x19db0009789a  34da  5f             pop rdi
0x19db0009789b  34db  5e             pop rsi
0x19db0009789c  34dc  5a             pop rdx
0x19db0009789d  34dd  59             pop rcx
0x19db0009789e  34de  58             pop rax
0x19db0009789f  34df  e9e2d4ffff     jmp 0x19db00094d86  <+0x9c6>
0x19db000978a4  34e4  a801           test al,0x1
0x19db000978a6  34e6  0f84e3d1ffff   jz 0x19db00094a8f  <+0x6cf>
0x19db000978ac  34ec  8bc0           movl rax,rax
0x19db000978ae  34ee  4903c5         REX.W addq rax,r13
0x19db000978b1  34f1  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db000978b8  34f8  4c23c0         REX.W andq r8,rax
0x19db000978bb  34fb  41f6400802     testb [r8+0x8],0x2
0x19db000978c0  3500  0f84c9d1ffff   jz 0x19db00094a8f  <+0x6cf>
0x19db000978c6  3506  4c8d4e13       REX.W leaq r9,[rsi+0x13]
0x19db000978ca  350a  50             push rax
0x19db000978cb  350b  51             push rcx
0x19db000978cc  350c  52             push rdx
0x19db000978cd  350d  56             push rsi
0x19db000978ce  350e  57             push rdi
0x19db000978cf  350f  488bfe         REX.W movq rdi,rsi
0x19db000978d2  3512  498bf1         REX.W movq rsi,r9
0x19db000978d5  3515  33d2           xorl rdx,rdx
0x19db000978d7  3517  488b0dc3cbffff REX.W movq rcx,[rip+0xffffcbc3]
0x19db000978de  351e  4c8b1572feffff REX.W movq r10,[rip+0xfffffe72]
0x19db000978e5  3525  41ffd2         call r10
0x19db000978e8  3528  5f             pop rdi
0x19db000978e9  3529  5e             pop rsi
0x19db000978ea  352a  5a             pop rdx
0x19db000978eb  352b  59             pop rcx
0x19db000978ec  352c  58             pop rax
0x19db000978ed  352d  e99dd1ffff     jmp 0x19db00094a8f  <+0x6cf>
0x19db000978f2  3532  90             nop
0x19db000978f3  3533  41ff95f8360000 call [r13+0x36f8]
0x19db000978fa  353a  41ff95f8360000 call [r13+0x36f8]
0x19db00097901  3541  41ff95f8360000 call [r13+0x36f8]
0x19db00097908  3548  41ff95f8360000 call [r13+0x36f8]
0x19db0009790f  354f  41ff95f8360000 call [r13+0x36f8]
0x19db00097916  3556  41ff95f8360000 call [r13+0x36f8]
0x19db0009791d  355d  41ff95f8360000 call [r13+0x36f8]
0x19db00097924  3564  41ff95f8360000 call [r13+0x36f8]
0x19db0009792b  356b  41ff95f8360000 call [r13+0x36f8]
0x19db00097932  3572  41ff95f8360000 call [r13+0x36f8]
0x19db00097939  3579  41ff95f8360000 call [r13+0x36f8]
0x19db00097940  3580  41ff95f8360000 call [r13+0x36f8]
0x19db00097947  3587  41ff95f8360000 call [r13+0x36f8]
0x19db0009794e  358e  41ff95f8360000 call [r13+0x36f8]
0x19db00097955  3595  41ff95f8360000 call [r13+0x36f8]
0x19db0009795c  359c  41ff95f8360000 call [r13+0x36f8]
0x19db00097963  35a3  41ff95f8360000 call [r13+0x36f8]
0x19db0009796a  35aa  41ff95f8360000 call [r13+0x36f8]
0x19db00097971  35b1  41ff95f8360000 call [r13+0x36f8]
0x19db00097978  35b8  41ff95f8360000 call [r13+0x36f8]
0x19db0009797f  35bf  41ff95f8360000 call [r13+0x36f8]
0x19db00097986  35c6  41ff95f8360000 call [r13+0x36f8]
0x19db0009798d  35cd  41ff95f8360000 call [r13+0x36f8]
0x19db00097994  35d4  41ff95f8360000 call [r13+0x36f8]
0x19db0009799b  35db  41ff95f8360000 call [r13+0x36f8]
0x19db000979a2  35e2  41ff95f8360000 call [r13+0x36f8]
0x19db000979a9  35e9  41ff95f8360000 call [r13+0x36f8]
0x19db000979b0  35f0  41ff95f8360000 call [r13+0x36f8]
0x19db000979b7  35f7  41ff95f8360000 call [r13+0x36f8]
0x19db000979be  35fe  41ff95f8360000 call [r13+0x36f8]
0x19db000979c5  3605  41ff95f8360000 call [r13+0x36f8]
0x19db000979cc  360c  41ff95f8360000 call [r13+0x36f8]
0x19db000979d3  3613  41ff95f8360000 call [r13+0x36f8]
0x19db000979da  361a  41ff95f8360000 call [r13+0x36f8]
0x19db000979e1  3621  41ff95f8360000 call [r13+0x36f8]
0x19db000979e8  3628  41ff95f8360000 call [r13+0x36f8]
0x19db000979ef  362f  41ff95f8360000 call [r13+0x36f8]
0x19db000979f6  3636  41ff95f8360000 call [r13+0x36f8]
0x19db000979fd  363d  41ff95f8360000 call [r13+0x36f8]
0x19db00097a04  3644  41ff95f8360000 call [r13+0x36f8]
0x19db00097a0b  364b  41ff95f8360000 call [r13+0x36f8]
0x19db00097a12  3652  41ff95f8360000 call [r13+0x36f8]
0x19db00097a19  3659  41ff95f8360000 call [r13+0x36f8]
0x19db00097a20  3660  41ff95f8360000 call [r13+0x36f8]
0x19db00097a27  3667  41ff95f8360000 call [r13+0x36f8]
0x19db00097a2e  366e  41ff95f8360000 call [r13+0x36f8]
0x19db00097a35  3675  41ff95f8360000 call [r13+0x36f8]
0x19db00097a3c  367c  41ff95f8360000 call [r13+0x36f8]
0x19db00097a43  3683  41ff95f8360000 call [r13+0x36f8]
0x19db00097a4a  368a  41ff95f8360000 call [r13+0x36f8]
0x19db00097a51  3691  41ff95f8360000 call [r13+0x36f8]
0x19db00097a58  3698  41ff95f8360000 call [r13+0x36f8]
0x19db00097a5f  369f  41ff95f8360000 call [r13+0x36f8]
0x19db00097a66  36a6  41ff95f8360000 call [r13+0x36f8]
0x19db00097a6d  36ad  41ff95f8360000 call [r13+0x36f8]
0x19db00097a74  36b4  41ff95f8360000 call [r13+0x36f8]
0x19db00097a7b  36bb  41ff95f8360000 call [r13+0x36f8]
0x19db00097a82  36c2  41ff95f8360000 call [r13+0x36f8]
0x19db00097a89  36c9  41ff95f8360000 call [r13+0x36f8]
0x19db00097a90  36d0  41ff95f8360000 call [r13+0x36f8]
0x19db00097a97  36d7  41ff95f8360000 call [r13+0x36f8]
0x19db00097a9e  36de  41ff95f8360000 call [r13+0x36f8]
0x19db00097aa5  36e5  41ff95f8360000 call [r13+0x36f8]
0x19db00097aac  36ec  41ff95f8360000 call [r13+0x36f8]
0x19db00097ab3  36f3  41ff95f8360000 call [r13+0x36f8]
0x19db00097aba  36fa  41ff95f8360000 call [r13+0x36f8]
0x19db00097ac1  3701  41ff95f8360000 call [r13+0x36f8]
0x19db00097ac8  3708  41ff95f8360000 call [r13+0x36f8]
0x19db00097acf  370f  41ff95f8360000 call [r13+0x36f8]
0x19db00097ad6  3716  41ff95f8360000 call [r13+0x36f8]
0x19db00097add  371d  41ff95f8360000 call [r13+0x36f8]
0x19db00097ae4  3724  41ff95f8360000 call [r13+0x36f8]
0x19db00097aeb  372b  41ff95f8360000 call [r13+0x36f8]
0x19db00097af2  3732  41ff95f8360000 call [r13+0x36f8]
0x19db00097af9  3739  41ff95f8360000 call [r13+0x36f8]
0x19db00097b00  3740  41ff95f8360000 call [r13+0x36f8]
0x19db00097b07  3747  41ff95f8360000 call [r13+0x36f8]
0x19db00097b0e  374e  41ff95f8360000 call [r13+0x36f8]
0x19db00097b15  3755  41ff95f8360000 call [r13+0x36f8]
0x19db00097b1c  375c  41ff95f8360000 call [r13+0x36f8]
0x19db00097b23  3763  41ff95f8360000 call [r13+0x36f8]
0x19db00097b2a  376a  41ff95f8360000 call [r13+0x36f8]
0x19db00097b31  3771  41ff95f8360000 call [r13+0x36f8]
0x19db00097b38  3778  41ff95f8360000 call [r13+0x36f8]
0x19db00097b3f  377f  41ff95f8360000 call [r13+0x36f8]
0x19db00097b46  3786  41ff95f8360000 call [r13+0x36f8]
0x19db00097b4d  378d  41ff95f8360000 call [r13+0x36f8]
0x19db00097b54  3794  41ff95f8360000 call [r13+0x36f8]
0x19db00097b5b  379b  41ff95f8360000 call [r13+0x36f8]
0x19db00097b62  37a2  41ff95f8360000 call [r13+0x36f8]
0x19db00097b69  37a9  41ff95f8360000 call [r13+0x36f8]
0x19db00097b70  37b0  41ff95f8360000 call [r13+0x36f8]
0x19db00097b77  37b7  41ff95f8360000 call [r13+0x36f8]
0x19db00097b7e  37be  41ff95f8360000 call [r13+0x36f8]
0x19db00097b85  37c5  41ff95f8360000 call [r13+0x36f8]
0x19db00097b8c  37cc  41ff95f8360000 call [r13+0x36f8]
0x19db00097b93  37d3  41ff95f8360000 call [r13+0x36f8]
0x19db00097b9a  37da  41ff95f8360000 call [r13+0x36f8]
0x19db00097ba1  37e1  41ff95f8360000 call [r13+0x36f8]
0x19db00097ba8  37e8  41ff95f8360000 call [r13+0x36f8]
0x19db00097baf  37ef  41ff95f8360000 call [r13+0x36f8]
0x19db00097bb6  37f6  41ff95f8360000 call [r13+0x36f8]
0x19db00097bbd  37fd  41ff95f8360000 call [r13+0x36f8]
0x19db00097bc4  3804  41ff95f8360000 call [r13+0x36f8]
0x19db00097bcb  380b  41ff95f8360000 call [r13+0x36f8]
0x19db00097bd2  3812  41ff95f8360000 call [r13+0x36f8]
0x19db00097bd9  3819  41ff95f8360000 call [r13+0x36f8]
0x19db00097be0  3820  41ff95f8360000 call [r13+0x36f8]
0x19db00097be7  3827  41ff95f8360000 call [r13+0x36f8]
0x19db00097bee  382e  41ff95f8360000 call [r13+0x36f8]
0x19db00097bf5  3835  41ff95f8360000 call [r13+0x36f8]
0x19db00097bfc  383c  41ff95f8360000 call [r13+0x36f8]
0x19db00097c03  3843  41ff95f8360000 call [r13+0x36f8]
0x19db00097c0a  384a  41ff95f8360000 call [r13+0x36f8]
0x19db00097c11  3851  41ff95f8360000 call [r13+0x36f8]
0x19db00097c18  3858  41ff95f8360000 call [r13+0x36f8]
0x19db00097c1f  385f  41ff95f8360000 call [r13+0x36f8]
0x19db00097c26  3866  41ff95f8360000 call [r13+0x36f8]
0x19db00097c2d  386d  41ff95f8360000 call [r13+0x36f8]
0x19db00097c34  3874  41ff95f8360000 call [r13+0x36f8]
0x19db00097c3b  387b  41ff95f8360000 call [r13+0x36f8]
0x19db00097c42  3882  41ff95f8360000 call [r13+0x36f8]
0x19db00097c49  3889  41ff95f8360000 call [r13+0x36f8]
0x19db00097c50  3890  41ff95f8360000 call [r13+0x36f8]
0x19db00097c57  3897  41ff95f8360000 call [r13+0x36f8]
0x19db00097c5e  389e  41ff95f8360000 call [r13+0x36f8]
0x19db00097c65  38a5  41ff95f8360000 call [r13+0x36f8]
0x19db00097c6c  38ac  41ff95f8360000 call [r13+0x36f8]
0x19db00097c73  38b3  41ff95f8360000 call [r13+0x36f8]
0x19db00097c7a  38ba  41ff95f8360000 call [r13+0x36f8]
0x19db00097c81  38c1  41ff95f8360000 call [r13+0x36f8]
0x19db00097c88  38c8  41ff95f8360000 call [r13+0x36f8]
0x19db00097c8f  38cf  41ff95f8360000 call [r13+0x36f8]
0x19db00097c96  38d6  41ff95f8360000 call [r13+0x36f8]
0x19db00097c9d  38dd  41ff95f8360000 call [r13+0x36f8]
0x19db00097ca4  38e4  41ff95f8360000 call [r13+0x36f8]
0x19db00097cab  38eb  41ff95f8360000 call [r13+0x36f8]
0x19db00097cb2  38f2  41ff95f8360000 call [r13+0x36f8]
0x19db00097cb9  38f9  41ff95f8360000 call [r13+0x36f8]
0x19db00097cc0  3900  41ff95f8360000 call [r13+0x36f8]
0x19db00097cc7  3907  41ff95f8360000 call [r13+0x36f8]
0x19db00097cce  390e  41ff95f8360000 call [r13+0x36f8]
0x19db00097cd5  3915  41ff95f8360000 call [r13+0x36f8]
0x19db00097cdc  391c  41ff95f8360000 call [r13+0x36f8]
0x19db00097ce3  3923  41ff95f8360000 call [r13+0x36f8]
0x19db00097cea  392a  41ff95f8360000 call [r13+0x36f8]
0x19db00097cf1  3931  41ff95f8360000 call [r13+0x36f8]
0x19db00097cf8  3938  41ff95f8360000 call [r13+0x36f8]
0x19db00097cff  393f  41ff95f8360000 call [r13+0x36f8]
0x19db00097d06  3946  41ff95f8360000 call [r13+0x36f8]
0x19db00097d0d  394d  41ff95f8360000 call [r13+0x36f8]
0x19db00097d14  3954  41ff95f8360000 call [r13+0x36f8]
0x19db00097d1b  395b  41ff95f8360000 call [r13+0x36f8]
0x19db00097d22  3962  41ff95f8360000 call [r13+0x36f8]
0x19db00097d29  3969  41ff95f8360000 call [r13+0x36f8]
0x19db00097d30  3970  41ff95f8360000 call [r13+0x36f8]
0x19db00097d37  3977  41ff95f8360000 call [r13+0x36f8]
0x19db00097d3e  397e  41ff95f8360000 call [r13+0x36f8]
0x19db00097d45  3985  41ff95f8360000 call [r13+0x36f8]
0x19db00097d4c  398c  41ff95f8360000 call [r13+0x36f8]
0x19db00097d53  3993  41ff95f8360000 call [r13+0x36f8]
0x19db00097d5a  399a  41ff95f8360000 call [r13+0x36f8]
0x19db00097d61  39a1  41ff95f8360000 call [r13+0x36f8]
0x19db00097d68  39a8  41ff95f8360000 call [r13+0x36f8]
0x19db00097d6f  39af  41ff95f8360000 call [r13+0x36f8]
0x19db00097d76  39b6  41ff95f8360000 call [r13+0x36f8]
0x19db00097d7d  39bd  41ff95f8360000 call [r13+0x36f8]
0x19db00097d84  39c4  41ff95f8360000 call [r13+0x36f8]
0x19db00097d8b  39cb  41ff95f8360000 call [r13+0x36f8]
0x19db00097d92  39d2  41ff95f8360000 call [r13+0x36f8]
0x19db00097d99  39d9  41ff95f8360000 call [r13+0x36f8]
0x19db00097da0  39e0  41ff95f8360000 call [r13+0x36f8]
0x19db00097da7  39e7  41ff95f8360000 call [r13+0x36f8]
0x19db00097dae  39ee  41ff95f8360000 call [r13+0x36f8]
0x19db00097db5  39f5  41ff95f8360000 call [r13+0x36f8]
0x19db00097dbc  39fc  41ff95f8360000 call [r13+0x36f8]
0x19db00097dc3  3a03  41ff95f8360000 call [r13+0x36f8]
0x19db00097dca  3a0a  41ff95f8360000 call [r13+0x36f8]
0x19db00097dd1  3a11  41ff95f8360000 call [r13+0x36f8]
0x19db00097dd8  3a18  41ff95f8360000 call [r13+0x36f8]
0x19db00097ddf  3a1f  41ff95f8360000 call [r13+0x36f8]
0x19db00097de6  3a26  41ff95f8360000 call [r13+0x36f8]
0x19db00097ded  3a2d  41ff95f8360000 call [r13+0x36f8]
0x19db00097df4  3a34  41ff95f8360000 call [r13+0x36f8]
0x19db00097dfb  3a3b  41ff95f8360000 call [r13+0x36f8]
0x19db00097e02  3a42  41ff9510370000 call [r13+0x3710]
0x19db00097e09  3a49  41ff9510370000 call [r13+0x3710]
0x19db00097e10  3a50  41ff9510370000 call [r13+0x3710]
0x19db00097e17  3a57  41ff9510370000 call [r13+0x3710]
0x19db00097e1e  3a5e  41ff9510370000 call [r13+0x3710]
0x19db00097e25  3a65  41ff9510370000 call [r13+0x3710]
0x19db00097e2c  3a6c  41ff9510370000 call [r13+0x3710]
0x19db00097e33  3a73  41ff9510370000 call [r13+0x3710]
0x19db00097e3a  3a7a  41ff9510370000 call [r13+0x3710]
0x19db00097e41  3a81  41ff9510370000 call [r13+0x3710]
0x19db00097e48  3a88  41ff9510370000 call [r13+0x3710]
0x19db00097e4f  3a8f  41ff9510370000 call [r13+0x3710]
0x19db00097e56  3a96  41ff9510370000 call [r13+0x3710]
0x19db00097e5d  3a9d  41ff9510370000 call [r13+0x3710]
0x19db00097e64  3aa4  41ff9510370000 call [r13+0x3710]
0x19db00097e6b  3aab  41ff9510370000 call [r13+0x3710]
0x19db00097e72  3ab2  41ff9510370000 call [r13+0x3710]
0x19db00097e79  3ab9  41ff9510370000 call [r13+0x3710]
0x19db00097e80  3ac0  41ff9510370000 call [r13+0x3710]
0x19db00097e87  3ac7  41ff9510370000 call [r13+0x3710]
0x19db00097e8e  3ace  41ff9510370000 call [r13+0x3710]
0x19db00097e95  3ad5  41ff9510370000 call [r13+0x3710]
0x19db00097e9c  3adc  41ff9510370000 call [r13+0x3710]
0x19db00097ea3  3ae3  41ff9510370000 call [r13+0x3710]
0x19db00097eaa  3aea  41ff9510370000 call [r13+0x3710]
0x19db00097eb1  3af1  0f1f00         nop

Source positions:
 pc offset  position
        ae      6593
       68c      3434
       984      3601
       c74      3870
       f80      4139
      100a      6593
      143e      3434
      1d87      6593
      2a1f      2472
      319e      2798
      3337      6593

Inlined functions (count = 6)
 0x19db082f3e5d <SharedFunctionInfo VMulti>
 0x19db082f3e25 <SharedFunctionInfo MMulti>
 0x19db082f3ecd <SharedFunctionInfo Translate>
 0x19db082f3f75 <SharedFunctionInfo RotateZ>
 0x19db082f3f3d <SharedFunctionInfo RotateY>
 0x19db082f3f05 <SharedFunctionInfo RotateX>

Deoptimization Input Data (deopt points = 210)
 index  bytecode-offset    pc
     0                4    NA 
     1                4    NA 
     2               17    NA 
     3               46    NA 
     4               46    NA 
     5               87    NA 
     6               87    NA 
     7               87    NA 
     8               24    NA 
     9               99    NA 
    10               99    NA 
    11               99    NA 
    12               99    NA 
    13               99    NA 
    14               99    NA 
    15               24    NA 
    16              125    NA 
    17              125    NA 
    18              125    NA 
    19              125    NA 
    20              125    NA 
    21              125    NA 
    22              417    NA 
    23              151    NA 
    24              151    NA 
    25              151    NA 
    26              151    NA 
    27              151    NA 
    28              151    NA 
    29               90    NA 
    30               90    NA 
    31               90    NA 
    32              417    NA 
    33              177    NA 
    34              177    NA 
    35              177    NA 
    36                3    NA 
    37                3    NA 
    38              146    NA 
    39              146    NA 
    40              146    NA 
    41              417    NA 
    42              196    NA 
    43              196    NA 
    44              196    NA 
    45                3    NA 
    46                3    NA 
    47              143    NA 
    48              143    NA 
    49              143    NA 
    50              403    NA 
    51              215    NA 
    52              215    NA 
    53              215    NA 
    54                3    NA 
    55                3    NA 
    56              143    NA 
    57              143    NA 
    58              143    NA 
    59              403    NA 
    60              236    NA 
    61              236    NA 
    62              236    NA 
    63              403    NA 
    64              248    NA 
    65              248    NA 
    66              248    NA 
    67              248    NA 
    68              248    NA 
    69              248    NA 
    70              333    NA 
    71              272    NA 
    72              272    NA 
    73              272    NA 
    74              272    NA 
    75              272    NA 
    76              272    NA 
    77              333    NA 
    78              296    NA 
    79              296    NA 
    80              296    NA 
    81              296    NA 
    82              296    NA 
    83              296    NA 
    84               90    NA 
    85               90    NA 
    86               90    NA 
    87              333    NA 
    88              320    NA 
    89              320    NA 
    90              320    NA 
    91               14    NA 
    92               14    NA 
    93               14    NA 
    94               14    NA 
    95               14    NA 
    96               24    NA 
    97               24    NA 
    98               24    NA 
    99               24    NA 
   100               24    NA 
   101               24    NA 
   102               24    NA 
   103               24    NA 
   104               24    NA 
   105               24    NA 
   106               24    NA 
   107               24    NA 
   108               24    NA 
   109               24    NA 
   110               24    NA 
   111               24    NA 
   112               24    NA 
   113               24    NA 
   114               24    NA 
   115               24    NA 
   116               24    NA 
   117               24    NA 
   118               24    NA 
   119               24    NA 
   120               24    NA 
   121               24    NA 
   122               24    NA 
   123               24    NA 
   124               24    NA 
   125               24    NA 
   126               24    NA 
   127               24    NA 
   128               24    NA 
   129               24    NA 
   130               24    NA 
   131               24    NA 
   132               24    NA 
   133               24    NA 
   134               24    NA 
   135               24    NA 
   136               24    NA 
   137               24    NA 
   138               24    NA 
   139               24    NA 
   140               24    NA 
   141               24    NA 
   142               24    NA 
   143               24    NA 
   144               24    NA 
   145               24    NA 
   146               24    NA 
   147               24    NA 
   148               24    NA 
   149               24    NA 
   150               24    NA 
   151               24    NA 
   152              333    NA 
   153              333    NA 
   154              333    NA 
   155               17    NA 
   156              374    NA 
   157              374    NA 
   158              374    NA 
   159               17    NA 
   160               17    NA 
   161               17    NA 
   162               17    NA 
   163               17    NA 
   164               17    NA 
   165               17    NA 
   166               17    NA 
   167               17    NA 
   168               17    NA 
   169               17    NA 
   170               17    NA 
   171               17    NA 
   172               17    NA 
   173               17    NA 
   174               17    NA 
   175               17    NA 
   176               17    NA 
   177               17    NA 
   178               17    NA 
   179               17    NA 
   180               17    NA 
   181               17    NA 
   182               17    NA 
   183               17    NA 
   184               17    NA 
   185               40    cc 
   186               92   25a 
   187              117   307 
   188              143   3b4 
   189               90   6b3 
   190              146   9aa 
   191              143   c9a 
   192              143   fa6 
   193              241  1031 
   194              264  10d1 
   195              288  1171 
   196               90  1468 
   197              368  1db2 
   198              379  21bd 
   199              396  2256 
   200              417  2317 
   201               -1  2377 
   202               70  23a6 
   203               70  23d3 
   204              175  2a42 
   205              175  3057 
   206              184  30b3 
   207              133  31cc 
   208              133  3314 
   209              389  3358 

Safepoints (size = 840)
0x19db0009448c      cc  3a42  0000000000000000001100000 (sp -> fp)     185
0x19db00094509     149    NA  0000000000000000001100000 (sp -> fp)  <none>
0x19db00094591     1d1    NA  0000000000000000001100000 (sp -> fp)  <none>
0x19db0009461a     25a  3a49  0000000000000000111100000 (sp -> fp)     186
0x19db000946c7     307  3a50  0000000000000000111100000 (sp -> fp)     187
0x19db00094774     3b4  3a57  0000000000000000111100000 (sp -> fp)     188
0x19db00094a73     6b3  3a5e  0000000000001000111100000 (sp -> fp)     189
0x19db00094d6a     9aa  3a65  0000000000000001111100000 (sp -> fp)     190
0x19db0009505a     c9a  3a6c  0000000000000001111100000 (sp -> fp)     191
0x19db00095366     fa6  3a73  0000000000000001111100000 (sp -> fp)     192
0x19db000953f1    1031  3a7a  0000000000000000111100000 (sp -> fp)     193
0x19db00095491    10d1  3a81  0000000000000000111100000 (sp -> fp)     194
0x19db00095531    1171  3a88  0000000000000000111100000 (sp -> fp)     195
0x19db00095828    1468  3a8f  0000000000001000111100000 (sp -> fp)     196
0x19db00096172    1db2  3a96  0000000000000110101100000 (sp -> fp)     197
0x19db0009657d    21bd  3a9d  0000000000000000001100000 (sp -> fp)     198
0x19db00096616    2256  3aa4  0000000000000000001100000 (sp -> fp)     199
0x19db000966d7    2317  3aab  0000000000000000001100000 (sp -> fp)     200
0x19db00096737    2377  3ab2  0000000000000000001100000 (sp -> fp)     201
0x19db00096766    23a6  3ab9  0000000000000000011100000 (sp -> fp)     202
0x19db00096793    23d3  3ac0  0000000000000000011100000 (sp -> fp)     203
0x19db000967b6    23f6    NA  0000000000001000111100000 (sp -> fp)  <none>
0x19db000967ee    242e    NA  0000000000000001111100000 (sp -> fp)  <none>
0x19db00096815    2455    NA  0000000000000001111100000 (sp -> fp)  <none>
0x19db0009683f    247f    NA  0000000000000001111100000 (sp -> fp)  <none>
0x19db00096866    24a6    NA  0000000000001000111100000 (sp -> fp)  <none>
0x19db00096898    24d8    NA  0000000000000111101100000 (sp -> fp)  <none>
0x19db000968d6    2516    NA  0001000000110111111100000 (sp -> fp)  <none>
0x19db00096954    2594    NA  0001000101110111111100000 (sp -> fp)  <none>
0x19db000969f2    2632    NA  0001010001110111111100000 (sp -> fp)  <none>
0x19db00096aa1    26e1    NA  0001000001110111111100000 (sp -> fp)  <none>
0x19db00096b53    2793    NA  0001000000110111111100000 (sp -> fp)  <none>
0x19db00096c04    2844    NA  0001000000010111111100000 (sp -> fp)  <none>
0x19db00096caf    28ef    NA  0001000000000111111100000 (sp -> fp)  <none>
0x19db00096d67    29a7    NA  0001000000000111111100000 (sp -> fp)  <none>
0x19db00096e02    2a42  3ac7  0000000000000111111100000 (sp -> fp)     204
0x19db00096e56    2a96    NA  0010000001010111111100000 (sp -> fp)  <none>
0x19db00096edc    2b1c    NA  0010001011010111111100000 (sp -> fp)  <none>
0x19db00096f8b    2bcb    NA  0010100011010111111100000 (sp -> fp)  <none>
0x19db00097046    2c86    NA  0010000011010111111100000 (sp -> fp)  <none>
0x19db000970fc    2d3c    NA  0010000001010111111100000 (sp -> fp)  <none>
0x19db000971bf    2dff    NA  0010000000010111111100000 (sp -> fp)  <none>
0x19db0009727f    2ebf    NA  0010000000000111111100000 (sp -> fp)  <none>
0x19db0009736e    2fae    NA  0010000000000111111100000 (sp -> fp)  <none>
0x19db00097417    3057  3ace  0000000000000111111100000 (sp -> fp)     205
0x19db00097473    30b3  3ad5  0000000000000111111100000 (sp -> fp)     206
0x19db000974d0    3110    NA  0000000000011110101100000 (sp -> fp)  <none>
0x19db00097524    3164    NA  0000000010111111101100000 (sp -> fp)  <none>
0x19db0009758c    31cc  3adc  0000000000011111101100000 (sp -> fp)     207
0x19db00097639    3279    NA  0000000000011111101100000 (sp -> fp)  <none>
0x19db000976d4    3314  3ae3  0000000000011111101100000 (sp -> fp)     208
0x19db00097718    3358  3aea  0000000000000000001100000 (sp -> fp)     209

RelocInfo (size = 385)
0x19db000943d8  off heap target
0x19db000943f2  off heap target
0x19db00094434  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00094455  full embedded object  (0x19db082e77b5 <JSFunction String (sfi = 0x19db0824c101)>)
0x19db00094481  off heap target
0x19db000944fe  off heap target
0x19db000945c0  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db000945f7  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009460f  off heap target
0x19db00094624  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009466b  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db000946b2  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db000946d1  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00094718  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009475f  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009477e  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000947da  full embedded object  (0x19db082f42f5 <FeedbackCell[many closures]>)
0x19db000947f4  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db0009480c  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db00094829  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009483d  compressed embedded object  (0x19db082f56e5 <FixedArray[4]> compressed)
0x19db00094890  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00094a2e  full embedded object  (0x19db082f42d1 <FeedbackCell[many closures]>)
0x19db00094a5e  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00094a68  off heap target
0x19db00094abd  full embedded object  (0x19db082f4301 <FeedbackCell[many closures]>)
0x19db00094ad7  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db00094ae7  compressed embedded object  (0x19db082e66b5 <JSFunction cos (sfi = 0x19db0824ab11)> compressed)
0x19db00094aff  compressed embedded object  (0x19db082e6891 <JSFunction sin (sfi = 0x19db0824adb9)> compressed)
0x19db00094b41  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00094b55  compressed embedded object  (0x19db082f6dad <FixedArray[4]> compressed)
0x19db00094b7a  compressed embedded object  (0x19db082f6e19 <FixedArray[4]> compressed)
0x19db00094bcb  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00094c2c  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00094d26  full embedded object  (0x19db082f42d1 <FeedbackCell[many closures]>)
0x19db00094d54  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00094db4  full embedded object  (0x19db082f430d <FeedbackCell[many closures]>)
0x19db00094dce  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db00094ddf  compressed embedded object  (0x19db082e66b5 <JSFunction cos (sfi = 0x19db0824ab11)> compressed)
0x19db00094df8  compressed embedded object  (0x19db082e6891 <JSFunction sin (sfi = 0x19db0824adb9)> compressed)
0x19db00094e3a  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00094e4e  compressed embedded object  (0x19db082f6fb9 <FixedArray[4]> compressed)
0x19db00094e72  compressed embedded object  (0x19db082f7001 <FixedArray[4]> compressed)
0x19db00094ec5  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00094f21  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00095016  full embedded object  (0x19db082f42d1 <FeedbackCell[many closures]>)
0x19db00095044  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000950a4  full embedded object  (0x19db082f4319 <FeedbackCell[many closures]>)
0x19db000950be  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db000950cf  compressed embedded object  (0x19db082e66b5 <JSFunction cos (sfi = 0x19db0824ab11)> compressed)
0x19db000950e8  compressed embedded object  (0x19db082e6891 <JSFunction sin (sfi = 0x19db0824adb9)> compressed)
0x19db0009512b  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00095141  compressed embedded object  (0x19db082f71c1 <FixedArray[4]> compressed)
0x19db00095166  compressed embedded object  (0x19db082f71e5 <FixedArray[4]> compressed)
0x19db000951b2  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00095214  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00095322  full embedded object  (0x19db082f42d1 <FeedbackCell[many closures]>)
0x19db00095350  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009539c  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db000953d4  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db000953fb  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00095442  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009547c  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009549b  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000954e2  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009551c  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009553b  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00095597  full embedded object  (0x19db082f42f5 <FeedbackCell[many closures]>)
0x19db000955e5  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000955f9  compressed embedded object  (0x19db082f56e5 <FixedArray[4]> compressed)
0x19db0009564f  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000957e0  full embedded object  (0x19db082f42d1 <FeedbackCell[many closures]>)
0x19db00095808  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009587a  full embedded object  (0x19db082f42d1 <FeedbackCell[many closures]>)
0x19db000958e8  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000959a1  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000959c2  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000959cc  external reference (Runtime::TransitionElementsKind)  (0x7ffff6fe6190)
0x19db000959d6  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000959e8  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00095e45  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00095eae  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000960cd  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000960d7  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000960dd  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000960f1  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00096158  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009619d  full embedded object  (0x19db082f42dd <FeedbackCell[many closures]>)
0x19db00096256  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096285  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000962ed  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000963b5  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096557  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db00096565  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00096572  off heap target
0x19db000965e1  full embedded object  (0x19db082f4325 <FeedbackCell[many closures]>)
0x19db000965fc  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009662d  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db000966a5  full embedded object  (0x19db082f4331 <FeedbackCell[many closures]>)
0x19db000966c5  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00096715  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db0009671f  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009672c  off heap target
0x19db00096745  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db0009674f  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009677c  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000967ab  off heap target
0x19db000967c1  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096870  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000968d8  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000968e9  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000968ef  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00096956  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096967  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000969f4  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096a05  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00096aa3  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096ab4  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00096b55  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096b66  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00096c06  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096c17  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00096cb1  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096cc2  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00096d5c  off heap target
0x19db00096d74  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096d85  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00096df0  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00096e04  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096e15  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00096e58  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096e69  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00096ede  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096eef  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00096f34  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00096f94  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00096fe9  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009704f  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000970fe  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009710f  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000971c1  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000971d2  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00097281  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00097292  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009737b  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009738c  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00097405  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00097419  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009742a  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00097461  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00097475  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00097486  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009753a  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db00097555  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009757a  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000975a2  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db000975ac  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009769f  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000976c2  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000976ee  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00097704  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00097757  off heap target

--- End code ---
--- Raw source ---
(CubeSize) {
      // init/reset vars
      Origin.V = [150,150,20,1];
      Testing.LoopCount = 0;
      Testing.LoopMax = 50;
      Testing.TimeMax = 0;
      Testing.TimeAvg = 0;
      Testing.TimeMin = 0;
      Testing.TimeTemp = 0;
      Testing.TimeTotal = 0;
      Testing.Init = false;

      // transformation matrix
      MTrans = [
      [1,0,0,0],
      [0,1,0,0],
      [0,0,1,0],
      [0,0,0,1]
      ];
      
      // position information of qube
      MQube = [
      [1,0,0,0],
      [0,1,0,0],
      [0,0,1,0],
      [0,0,0,1]
      ];
      
      // entity matrix
      I = [
      [1,0,0,0],
      [0,1,0,0],
      [0,0,1,0],
      [0,0,0,1]
      ];
      
      // create qube
      Q[0] = new CreateP(-CubeSize,-CubeSize, CubeSize);
      Q[1] = new CreateP(-CubeSize, CubeSize, CubeSize);
      Q[2] = new CreateP( CubeSize, CubeSize, CubeSize);
      Q[3] = new CreateP( CubeSize,-CubeSize, CubeSize);
      Q[4] = new CreateP(-CubeSize,-CubeSize,-CubeSize);
      Q[5] = new CreateP(-CubeSize, CubeSize,-CubeSize);
      Q[6] = new CreateP( CubeSize, CubeSize,-CubeSize);
      Q[7] = new CreateP( CubeSize,-CubeSize,-CubeSize);
      
      // center of gravity
      Q[8] = new CreateP(0, 0, 0);
      
      // anti-clockwise edge check
      Q.Edge = [[0,1,2],[3,2,6],[7,6,5],[4,5,1],[4,0,3],[1,5,6]];
      
      // calculate squad normals
      Q.Normal = new Array();
      for (var i = 0; i < Q.Edge.length; i++) Q.Normal[i] = CalcNormal(Q[Q.Edge[i][0]].V, Q[Q.Edge[i][1]].V, Q[Q.Edge[i][2]].V);
      
      // line drawn ?
      Q.Line = [false,false,false,false,false,false,false,false,false,false,false,false];
      
      // create line pixels
      Q.NumPx = 9 * 2 * CubeSize;
      for (var i = 0; i < Q.NumPx; i++) CreateP(0,0,0);
      
      MTrans = Translate(MTrans, Origin.V[0], Origin.V[1], Origin.V[2]);
      MQube = MMulti(MTrans, MQube);

      var i = 0;
      for (; i < 9; i++) {
        Q[i].V = VMulti(MTrans, Q[i].V);
      }
      DrawQube();
      Testing.Init = true;
      Loop();
      
      // Perform a simple sum-based verification.
      var sum = 0;
      for (var i = 0; i < Q.length; ++i) {
        var vector = Q[i].V;
        for (var j = 0; j < vector.length; ++j)
          sum += vector[j];
      }
      if (sum != validation[CubeSize])
        throw "Error: bad vector sum for CubeSize = " + CubeSize + "; expected " + validation[CubeSize] + " but got " + sum;
    }


--- Optimized code ---
optimization_id = 13
source_position = 7221
kind = TURBOFAN
name = Init
stack_slots = 26
compiler = turbofan
address = 0x19db00098201

Instructions (size = 32496)
0x19db00098240     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
0x19db00098247     7  483bd9         REX.W cmpq rbx,rcx
0x19db0009824a     a  7418           jz 0x19db00098264  <+0x24>
0x19db0009824c     c  48ba6c00000000000000 REX.W movq rdx,0x6c
0x19db00098256    16  49bac0a4c7f5ff7f0000 REX.W movq r10,0x7ffff5c7a4c0  (Abort)    ;; off heap target
0x19db00098260    20  41ffd2         call r10
0x19db00098263    23  cc             int3l
0x19db00098264    24  8b59d0         movl rbx,[rcx-0x30]
0x19db00098267    27  4903dd         REX.W addq rbx,r13
0x19db0009826a    2a  f6430701       testb [rbx+0x7],0x1
0x19db0009826e    2e  740d           jz 0x19db0009827d  <+0x3d>
0x19db00098270    30  49ba40c6baf5ff7f0000 REX.W movq r10,0x7ffff5bac640  (CompileLazyDeoptimizedCode)    ;; off heap target
0x19db0009827a    3a  41ffe2         jmp r10
0x19db0009827d    3d  55             push rbp
0x19db0009827e    3e  4889e5         REX.W movq rbp,rsp
0x19db00098281    41  56             push rsi
0x19db00098282    42  57             push rdi
0x19db00098283    43  50             push rax
0x19db00098284    44  4881eca8000000 REX.W subq rsp,0xa8
0x19db0009828b    4b  488975d8       REX.W movq [rbp-0x28],rsi
0x19db0009828f    4f  48897de0       REX.W movq [rbp-0x20],rdi
0x19db00098293    53  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db00098297    57  0f869b450000   jna 0x19db0009c838  <+0x45f8>
0x19db0009829d    5d  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db000982a1    61  448b461f       movl r8,[rsi+0x1f]
0x19db000982a5    65  4d03c5         REX.W addq r8,r13
0x19db000982a8    68  49b9f87d6d5555550000 REX.W movq r9,0x5555556d7df8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
0x19db000982b2    72  4d8b19         REX.W movq r11,[r9]
0x19db000982b5    75  4d8d6310       REX.W leaq r12,[r11+0x10]
0x19db000982b9    79  49be007e6d5555550000 REX.W movq r14,0x5555556d7e00    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
0x19db000982c3    83  4d3926         REX.W cmpq [r14],r12
0x19db000982c6    86  0f86a6450000   jna 0x19db0009c872  <+0x4632>
0x19db000982cc    8c  4d8d6310       REX.W leaq r12,[r11+0x10]
0x19db000982d0    90  4d8921         REX.W movq [r9],r12
0x19db000982d3    93  4d8d6301       REX.W leaq r12,[r11+0x1]
0x19db000982d7    97  b8b59e3008     movl rax,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000982dc    9c  41894424ff     movl [r12-0x1],rax
0x19db000982e1    a1  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db000982e8    a8  4189542403     movl [r12+0x3],rdx
0x19db000982ed    ad  b9fd442f08     movl rcx,0x82f44fd      ;; (compressed) object: 0x19db082f44fd <FixedArray[4]>
0x19db000982f2    b2  41894c2407     movl [r12+0x7],rcx
0x19db000982f7    b7  41c744240b08000000 movl [r12+0xb],0x8
0x19db00098300    c0  41f6c001       testb r8,0x1
0x19db00098304    c4  0f8449750000   jz 0x19db0009f853  <+0x7613>
0x19db0009830a    ca  41bf75d93008   movl r15,0x830d975      ;; (compressed) object: 0x19db0830d975 <Map(HOLEY_ELEMENTS)>
0x19db00098310    d0  453978ff       cmpl [r8-0x1],r15
0x19db00098314    d4  0f8446000000   jz 0x19db00098360  <+0x120>
0x19db0009831a    da  b935883008     movl rcx,0x8308835      ;; (compressed) object: 0x19db08308835 <Map(HOLEY_ELEMENTS)>
0x19db0009831f    df  413948ff       cmpl [r8-0x1],rcx
0x19db00098323    e3  0f8531750000   jnz 0x19db0009f85a  <+0x761a>
0x19db00098329    e9  458978ff       movl [r8-0x1],r15
0x19db0009832d    ed  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db00098334    f4  4d23d8         REX.W andq r11,r8
0x19db00098337    f7  41f6430804     testb [r11+0x8],0x4
0x19db0009833c    fc  0f85c8740000   jnz 0x19db0009f80a  <+0x75ca>
0x19db00098342   102  4589600b       movl [r8+0xb],r12
0x19db00098346   106  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009834d   10d  4d23d8         REX.W andq r11,r8
0x19db00098350   110  41f6430804     testb [r11+0x8],0x4
0x19db00098355   115  0f8568740000   jnz 0x19db0009f7c3  <+0x7583>
0x19db0009835b   11b  e919000000     jmp 0x19db00098379  <+0x139>
0x19db00098360   120  4589600b       movl [r8+0xb],r12
0x19db00098364   124  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009836b   12b  4d23d8         REX.W andq r11,r8
0x19db0009836e   12e  41f6430804     testb [r11+0x8],0x4
0x19db00098373   133  0f8503740000   jnz 0x19db0009f77c  <+0x753c>
0x19db00098379   139  448b4623       movl r8,[rsi+0x23]
0x19db0009837d   13d  4d03c5         REX.W addq r8,r13
0x19db00098380   140  41f6c001       testb r8,0x1
0x19db00098384   144  0f84d7740000   jz 0x19db0009f861  <+0x7621>
0x19db0009838a   14a  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db0009838e   14e  41bcb5da3008   movl r12,0x830dab5      ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db00098394   154  453960ff       cmpl [r8-0x1],r12
0x19db00098398   158  0f843a000000   jz 0x19db000983d8  <+0x198>
0x19db0009839e   15e  b935883008     movl rcx,0x8308835      ;; (compressed) object: 0x19db08308835 <Map(HOLEY_ELEMENTS)>
0x19db000983a3   163  413948ff       cmpl [r8-0x1],rcx
0x19db000983a7   167  0f85bb740000   jnz 0x19db0009f868  <+0x7628>
0x19db000983ad   16d  b99dd93008     movl rcx,0x830d99d      ;; (compressed) object: 0x19db0830d99d <Map(HOLEY_ELEMENTS)>
0x19db000983b2   172  418948ff       movl [r8-0x1],rcx
0x19db000983b6   176  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db000983bd   17d  4d23d8         REX.W andq r11,r8
0x19db000983c0   180  41f6430804     testb [r11+0x8],0x4
0x19db000983c5   185  0f856a730000   jnz 0x19db0009f735  <+0x74f5>
0x19db000983cb   18b  41c7400b00000000 movl [r8+0xb],0x0
0x19db000983d3   193  e908000000     jmp 0x19db000983e0  <+0x1a0>
0x19db000983d8   198  41c7400b00000000 movl [r8+0xb],0x0
0x19db000983e0   1a0  453960ff       cmpl [r8-0x1],r12
0x19db000983e4   1a4  0f843a000000   jz 0x19db00098424  <+0x1e4>
0x19db000983ea   1aa  b99dd93008     movl rcx,0x830d99d      ;; (compressed) object: 0x19db0830d99d <Map(HOLEY_ELEMENTS)>
0x19db000983ef   1af  413948ff       cmpl [r8-0x1],rcx
0x19db000983f3   1b3  0f8576740000   jnz 0x19db0009f86f  <+0x762f>
0x19db000983f9   1b9  b9c5d93008     movl rcx,0x830d9c5      ;; (compressed) object: 0x19db0830d9c5 <Map(HOLEY_ELEMENTS)>
0x19db000983fe   1be  418948ff       movl [r8-0x1],rcx
0x19db00098402   1c2  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db00098409   1c9  4d23d8         REX.W andq r11,r8
0x19db0009840c   1cc  41f6430804     testb [r11+0x8],0x4
0x19db00098411   1d1  0f85d7720000   jnz 0x19db0009f6ee  <+0x74ae>
0x19db00098417   1d7  41c7400f64000000 movl [r8+0xf],0x64
0x19db0009841f   1df  e962000000     jmp 0x19db00098486  <+0x246>
0x19db00098424   1e4  418b480f       movl rcx,[r8+0xf]
0x19db00098428   1e8  488bfa         REX.W movq rdi,rdx
0x19db0009842b   1eb  33db           xorl rbx,rbx
0x19db0009842d   1ed  488bd1         REX.W movq rdx,rcx
0x19db00098430   1f0  488bc8         REX.W movq rcx,rax
0x19db00098433   1f3  b864000000     movl rax,0x64
0x19db00098438   1f8  4c8bde         REX.W movq r11,rsi
0x19db0009843b   1fb  488bf3         REX.W movq rsi,rbx
0x19db0009843e   1fe  49ba20a4d7f5ff7f0000 REX.W movq r10,0x7ffff5d7a420  (SameValueNumbersOnly)    ;; off heap target
0x19db00098448   208  41ffd2         call r10
0x19db0009844b   20b  413985a8000000 cmpl [r13+0xa8] (root (true_value)),rax
0x19db00098452   212  0f851e740000   jnz 0x19db0009f876  <+0x7636>
0x19db00098458   218  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009845c   21c  41bcb5da3008   movl r12,0x830dab5      ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db00098462   222  4c8b0d41feffff REX.W movq r9,[rip+0xfffffe41]
0x19db00098469   229  4c8b354bfeffff REX.W movq r14,[rip+0xfffffe4b]
0x19db00098470   230  b8b59e3008     movl rax,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00098475   235  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db0009847c   23c  41bf75d93008   movl r15,0x830d975      ;; (compressed) object: 0x19db0830d975 <Map(HOLEY_ELEMENTS)>
0x19db00098482   242  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00098486   246  4d8bd8         REX.W movq r11,r8
0x19db00098489   249  4d89e0         REX.W movq r8,r12
0x19db0009848c   24c  453943ff       cmpl [r11-0x1],r8
0x19db00098490   250  0f843b000000   jz 0x19db000984d1  <+0x291>
0x19db00098496   256  41bcc5d93008   movl r12,0x830d9c5      ;; (compressed) object: 0x19db0830d9c5 <Map(HOLEY_ELEMENTS)>
0x19db0009849c   25c  453963ff       cmpl [r11-0x1],r12
0x19db000984a0   260  0f85d7730000   jnz 0x19db0009f87d  <+0x763d>
0x19db000984a6   266  41bcedd93008   movl r12,0x830d9ed      ;; (compressed) object: 0x19db0830d9ed <Map(HOLEY_ELEMENTS)>
0x19db000984ac   26c  458963ff       movl [r11-0x1],r12
0x19db000984b0   270  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db000984b7   277  4923db         REX.W andq rbx,r11
0x19db000984ba   27a  f6430804       testb [rbx+0x8],0x4
0x19db000984be   27e  0f85e3710000   jnz 0x19db0009f6a7  <+0x7467>
0x19db000984c4   284  41c7431300000000 movl [r11+0x13],0x0
0x19db000984cc   28c  e95c000000     jmp 0x19db0009852d  <+0x2ed>
0x19db000984d1   291  458b6313       movl r12,[r11+0x13]
0x19db000984d5   295  488bfa         REX.W movq rdi,rdx
0x19db000984d8   298  488bc8         REX.W movq rcx,rax
0x19db000984db   29b  4c89e2         REX.W movq rdx,r12
0x19db000984de   29e  33c0           xorl rax,rax
0x19db000984e0   2a0  4c8be6         REX.W movq r12,rsi
0x19db000984e3   2a3  33f6           xorl rsi,rsi
0x19db000984e5   2a5  488bd8         REX.W movq rbx,rax
0x19db000984e8   2a8  4c8b1551ffffff REX.W movq r10,[rip+0xffffff51]
0x19db000984ef   2af  41ffd2         call r10
0x19db000984f2   2b2  413985a8000000 cmpl [r13+0xa8] (root (true_value)),rax
0x19db000984f9   2b9  0f8585730000   jnz 0x19db0009f884  <+0x7644>
0x19db000984ff   2bf  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00098503   2c3  41b8b5da3008   movl r8,0x830dab5       ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db00098509   2c9  4c8b0d9afdffff REX.W movq r9,[rip+0xfffffd9a]
0x19db00098510   2d0  4c8b35a4fdffff REX.W movq r14,[rip+0xfffffda4]
0x19db00098517   2d7  b8b59e3008     movl rax,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009851c   2dc  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db00098523   2e3  41bf75d93008   movl r15,0x830d975      ;; (compressed) object: 0x19db0830d975 <Map(HOLEY_ELEMENTS)>
0x19db00098529   2e9  4c8b5dd0       REX.W movq r11,[rbp-0x30]
0x19db0009852d   2ed  453943ff       cmpl [r11-0x1],r8
0x19db00098531   2f1  0f843b000000   jz 0x19db00098572  <+0x332>
0x19db00098537   2f7  41bcedd93008   movl r12,0x830d9ed      ;; (compressed) object: 0x19db0830d9ed <Map(HOLEY_ELEMENTS)>
0x19db0009853d   2fd  453963ff       cmpl [r11-0x1],r12
0x19db00098541   301  0f8544730000   jnz 0x19db0009f88b  <+0x764b>
0x19db00098547   307  41bc15da3008   movl r12,0x830da15      ;; (compressed) object: 0x19db0830da15 <Map(HOLEY_ELEMENTS)>
0x19db0009854d   30d  458963ff       movl [r11-0x1],r12
0x19db00098551   311  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db00098558   318  4923db         REX.W andq rbx,r11
0x19db0009855b   31b  f6430804       testb [rbx+0x8],0x4
0x19db0009855f   31f  0f85fb700000   jnz 0x19db0009f660  <+0x7420>
0x19db00098565   325  41c7431700000000 movl [r11+0x17],0x0
0x19db0009856d   32d  e95c000000     jmp 0x19db000985ce  <+0x38e>
0x19db00098572   332  458b6317       movl r12,[r11+0x17]
0x19db00098576   336  33db           xorl rbx,rbx
0x19db00098578   338  488bfa         REX.W movq rdi,rdx
0x19db0009857b   33b  4c89e2         REX.W movq rdx,r12
0x19db0009857e   33e  488bc8         REX.W movq rcx,rax
0x19db00098581   341  33c0           xorl rax,rax
0x19db00098583   343  4c8be6         REX.W movq r12,rsi
0x19db00098586   346  488bf3         REX.W movq rsi,rbx
0x19db00098589   349  4c8b15b0feffff REX.W movq r10,[rip+0xfffffeb0]
0x19db00098590   350  41ffd2         call r10
0x19db00098593   353  413985a8000000 cmpl [r13+0xa8] (root (true_value)),rax
0x19db0009859a   35a  0f85f2720000   jnz 0x19db0009f892  <+0x7652>
0x19db000985a0   360  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db000985a4   364  41b8b5da3008   movl r8,0x830dab5       ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db000985aa   36a  4c8b0df9fcffff REX.W movq r9,[rip+0xfffffcf9]
0x19db000985b1   371  4c8b3503fdffff REX.W movq r14,[rip+0xfffffd03]
0x19db000985b8   378  b8b59e3008     movl rax,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000985bd   37d  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db000985c4   384  41bf75d93008   movl r15,0x830d975      ;; (compressed) object: 0x19db0830d975 <Map(HOLEY_ELEMENTS)>
0x19db000985ca   38a  4c8b5dd0       REX.W movq r11,[rbp-0x30]
0x19db000985ce   38e  453943ff       cmpl [r11-0x1],r8
0x19db000985d2   392  0f84dc000000   jz 0x19db000986b4  <+0x474>
0x19db000985d8   398  41bc15da3008   movl r12,0x830da15      ;; (compressed) object: 0x19db0830da15 <Map(HOLEY_ELEMENTS)>
0x19db000985de   39e  453963ff       cmpl [r11-0x1],r12
0x19db000985e2   3a2  0f85b1720000   jnz 0x19db0009f899  <+0x7659>
0x19db000985e8   3a8  458b6303       movl r12,[r11+0x3]
0x19db000985ec   3ac  4d03e5         REX.W addq r12,r13
0x19db000985ef   3af  41f6c401       testb r12,0x1
0x19db000985f3   3b3  0f8403000000   jz 0x19db000985fc  <+0x3bc>
0x19db000985f9   3b9  4531e4         xorl r12,r12
0x19db000985fc   3bc  41f6c401       testb r12,0x1
0x19db00098600   3c0  0f85a7420000   jnz 0x19db0009c8ad  <+0x466d>
0x19db00098606   3c6  41d1fc         sarl r12, 1
0x19db00098609   3c9  498b19         REX.W movq rbx,[r9]
0x19db0009860c   3cc  488d4b14       REX.W leaq rcx,[rbx+0x14]
0x19db00098610   3d0  49390e         REX.W cmpq [r14],rcx
0x19db00098613   3d3  0f86a4420000   jna 0x19db0009c8bd  <+0x467d>
0x19db00098619   3d9  488d4b14       REX.W leaq rcx,[rbx+0x14]
0x19db0009861d   3dd  41c1e40a       shll r12, 10
0x19db00098621   3e1  498909         REX.W movq [r9],rcx
0x19db00098624   3e4  488d4b01       REX.W leaq rcx,[rbx+0x1]
0x19db00098628   3e8  4183cc03       orl r12,0x3
0x19db0009862c   3ec  41d1e4         shll r12, 1
0x19db0009862f   3ef  49ba0000000001000000 REX.W movq r10,0x100000000
0x19db00098639   3f9  4d39e2         REX.W cmpq r10,r12
0x19db0009863c   3fc  7715           ja 0x19db00098653  <+0x413>
0x19db0009863e   3fe  48ba0200000000000000 REX.W movq rdx,0x2
0x19db00098648   408  4c8b1509fcffff REX.W movq r10,[rip+0xfffffc09]
0x19db0009864f   40f  41ffd2         call r10
0x19db00098652   412  cc             int3l
0x19db00098653   413  498bbd38020000 REX.W movq rdi,[r13+0x238] (root (property_array_map))
0x19db0009865a   41a  8979ff         movl [rcx-0x1],rdi
0x19db0009865d   41d  44896103       movl [rcx+0x3],r12
0x19db00098661   421  4d8ba590000000 REX.W movq r12,[r13+0x90] (root (undefined_value))
0x19db00098668   428  4489610b       movl [rcx+0xb],r12
0x19db0009866c   42c  4489610f       movl [rcx+0xf],r12
0x19db00098670   430  c7410700000000 movl [rcx+0x7],0x0
0x19db00098677   437  41bc3dda3008   movl r12,0x830da3d      ;; (compressed) object: 0x19db0830da3d <Map(HOLEY_ELEMENTS)>
0x19db0009867d   43d  458963ff       movl [r11-0x1],r12
0x19db00098681   441  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db00098688   448  4923db         REX.W andq rbx,r11
0x19db0009868b   44b  f6430804       testb [rbx+0x8],0x4
0x19db0009868f   44f  0f85846f0000   jnz 0x19db0009f619  <+0x73d9>
0x19db00098695   455  41894b03       movl [r11+0x3],rcx
0x19db00098699   459  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db000986a0   460  4d23e3         REX.W andq r12,r11
0x19db000986a3   463  41f644240804   testb [r12+0x8],0x4
0x19db000986a9   469  0f85236f0000   jnz 0x19db0009f5d2  <+0x7392>
0x19db000986af   46f  e964000000     jmp 0x19db00098718  <+0x4d8>
0x19db000986b4   474  458b6303       movl r12,[r11+0x3]
0x19db000986b8   478  4d03e5         REX.W addq r12,r13
0x19db000986bb   47b  458b642407     movl r12,[r12+0x7]
0x19db000986c0   480  33db           xorl rbx,rbx
0x19db000986c2   482  488bfa         REX.W movq rdi,rdx
0x19db000986c5   485  4c89e2         REX.W movq rdx,r12
0x19db000986c8   488  488bc8         REX.W movq rcx,rax
0x19db000986cb   48b  33c0           xorl rax,rax
0x19db000986cd   48d  4c8be6         REX.W movq r12,rsi
0x19db000986d0   490  488bf3         REX.W movq rsi,rbx
0x19db000986d3   493  4c8b1566fdffff REX.W movq r10,[rip+0xfffffd66]
0x19db000986da   49a  41ffd2         call r10
0x19db000986dd   49d  413985a8000000 cmpl [r13+0xa8] (root (true_value)),rax
0x19db000986e4   4a4  0f85b6710000   jnz 0x19db0009f8a0  <+0x7660>
0x19db000986ea   4aa  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db000986ee   4ae  41b8b5da3008   movl r8,0x830dab5       ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db000986f4   4b4  4c8b0daffbffff REX.W movq r9,[rip+0xfffffbaf]
0x19db000986fb   4bb  4c8b35b9fbffff REX.W movq r14,[rip+0xfffffbb9]
0x19db00098702   4c2  b8b59e3008     movl rax,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00098707   4c7  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db0009870e   4ce  41bf75d93008   movl r15,0x830d975      ;; (compressed) object: 0x19db0830d975 <Map(HOLEY_ELEMENTS)>
0x19db00098714   4d4  4c8b5dd0       REX.W movq r11,[rbp-0x30]
0x19db00098718   4d8  453943ff       cmpl [r11-0x1],r8
0x19db0009871c   4dc  0f8442000000   jz 0x19db00098764  <+0x524>
0x19db00098722   4e2  41bc3dda3008   movl r12,0x830da3d      ;; (compressed) object: 0x19db0830da3d <Map(HOLEY_ELEMENTS)>
0x19db00098728   4e8  453963ff       cmpl [r11-0x1],r12
0x19db0009872c   4ec  0f8575710000   jnz 0x19db0009f8a7  <+0x7667>
0x19db00098732   4f2  458b6303       movl r12,[r11+0x3]
0x19db00098736   4f6  4d03e5         REX.W addq r12,r13
0x19db00098739   4f9  b965da3008     movl rcx,0x830da65      ;; (compressed) object: 0x19db0830da65 <Map(HOLEY_ELEMENTS)>
0x19db0009873e   4fe  41894bff       movl [r11-0x1],rcx
0x19db00098742   502  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db00098749   509  4923db         REX.W andq rbx,r11
0x19db0009874c   50c  f6430804       testb [rbx+0x8],0x4
0x19db00098750   510  0f85366e0000   jnz 0x19db0009f58c  <+0x734c>
0x19db00098756   516  41c744240b00000000 movl [r12+0xb],0x0
0x19db0009875f   51f  e964000000     jmp 0x19db000987c8  <+0x588>
0x19db00098764   524  458b6303       movl r12,[r11+0x3]
0x19db00098768   528  4d03e5         REX.W addq r12,r13
0x19db0009876b   52b  458b64240b     movl r12,[r12+0xb]
0x19db00098770   530  33db           xorl rbx,rbx
0x19db00098772   532  488bfa         REX.W movq rdi,rdx
0x19db00098775   535  4c89e2         REX.W movq rdx,r12
0x19db00098778   538  488bc8         REX.W movq rcx,rax
0x19db0009877b   53b  33c0           xorl rax,rax
0x19db0009877d   53d  4c8be6         REX.W movq r12,rsi
0x19db00098780   540  488bf3         REX.W movq rsi,rbx
0x19db00098783   543  4c8b15b6fcffff REX.W movq r10,[rip+0xfffffcb6]
0x19db0009878a   54a  41ffd2         call r10
0x19db0009878d   54d  413985a8000000 cmpl [r13+0xa8] (root (true_value)),rax
0x19db00098794   554  0f8514710000   jnz 0x19db0009f8ae  <+0x766e>
0x19db0009879a   55a  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009879e   55e  41b8b5da3008   movl r8,0x830dab5       ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db000987a4   564  4c8b0dfffaffff REX.W movq r9,[rip+0xfffffaff]
0x19db000987ab   56b  4c8b3509fbffff REX.W movq r14,[rip+0xfffffb09]
0x19db000987b2   572  b8b59e3008     movl rax,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000987b7   577  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db000987be   57e  41bf75d93008   movl r15,0x830d975      ;; (compressed) object: 0x19db0830d975 <Map(HOLEY_ELEMENTS)>
0x19db000987c4   584  4c8b5dd0       REX.W movq r11,[rbp-0x30]
0x19db000987c8   588  453943ff       cmpl [r11-0x1],r8
0x19db000987cc   58c  0f8442000000   jz 0x19db00098814  <+0x5d4>
0x19db000987d2   592  41bc65da3008   movl r12,0x830da65      ;; (compressed) object: 0x19db0830da65 <Map(HOLEY_ELEMENTS)>
0x19db000987d8   598  453963ff       cmpl [r11-0x1],r12
0x19db000987dc   59c  0f85d3700000   jnz 0x19db0009f8b5  <+0x7675>
0x19db000987e2   5a2  458b6303       movl r12,[r11+0x3]
0x19db000987e6   5a6  4d03e5         REX.W addq r12,r13
0x19db000987e9   5a9  b98dda3008     movl rcx,0x830da8d      ;; (compressed) object: 0x19db0830da8d <Map(HOLEY_ELEMENTS)>
0x19db000987ee   5ae  41894bff       movl [r11-0x1],rcx
0x19db000987f2   5b2  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db000987f9   5b9  4923db         REX.W andq rbx,r11
0x19db000987fc   5bc  f6430804       testb [rbx+0x8],0x4
0x19db00098800   5c0  0f85406d0000   jnz 0x19db0009f546  <+0x7306>
0x19db00098806   5c6  41c744240f00000000 movl [r12+0xf],0x0
0x19db0009880f   5cf  e964000000     jmp 0x19db00098878  <+0x638>
0x19db00098814   5d4  458b6303       movl r12,[r11+0x3]
0x19db00098818   5d8  4d03e5         REX.W addq r12,r13
0x19db0009881b   5db  458b64240f     movl r12,[r12+0xf]
0x19db00098820   5e0  33db           xorl rbx,rbx
0x19db00098822   5e2  488bfa         REX.W movq rdi,rdx
0x19db00098825   5e5  4c89e2         REX.W movq rdx,r12
0x19db00098828   5e8  488bc8         REX.W movq rcx,rax
0x19db0009882b   5eb  33c0           xorl rax,rax
0x19db0009882d   5ed  4c8be6         REX.W movq r12,rsi
0x19db00098830   5f0  488bf3         REX.W movq rsi,rbx
0x19db00098833   5f3  4c8b1506fcffff REX.W movq r10,[rip+0xfffffc06]
0x19db0009883a   5fa  41ffd2         call r10
0x19db0009883d   5fd  413985a8000000 cmpl [r13+0xa8] (root (true_value)),rax
0x19db00098844   604  0f8572700000   jnz 0x19db0009f8bc  <+0x767c>
0x19db0009884a   60a  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009884e   60e  41b8b5da3008   movl r8,0x830dab5       ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db00098854   614  4c8b0d4ffaffff REX.W movq r9,[rip+0xfffffa4f]
0x19db0009885b   61b  4c8b3559faffff REX.W movq r14,[rip+0xfffffa59]
0x19db00098862   622  b8b59e3008     movl rax,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00098867   627  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db0009886e   62e  41bf75d93008   movl r15,0x830d975      ;; (compressed) object: 0x19db0830d975 <Map(HOLEY_ELEMENTS)>
0x19db00098874   634  4c8b5dd0       REX.W movq r11,[rbp-0x30]
0x19db00098878   638  453943ff       cmpl [r11-0x1],r8
0x19db0009887c   63c  0f843e010000   jz 0x19db000989c0  <+0x780>
0x19db00098882   642  41bc8dda3008   movl r12,0x830da8d      ;; (compressed) object: 0x19db0830da8d <Map(HOLEY_ELEMENTS)>
0x19db00098888   648  453963ff       cmpl [r11-0x1],r12
0x19db0009888c   64c  0f8531700000   jnz 0x19db0009f8c3  <+0x7683>
0x19db00098892   652  458b6303       movl r12,[r11+0x3]
0x19db00098896   656  4d03e5         REX.W addq r12,r13
0x19db00098899   659  418b4c2407     movl rcx,[r12+0x7]
0x19db0009889e   65e  4c8b158cfdffff REX.W movq r10,[rip+0xfffffd8c]
0x19db000988a5   665  4c3bd1         REX.W cmpq r10,rcx
0x19db000988a8   668  7712           ja 0x19db000988bc  <+0x67c>
0x19db000988aa   66a  488b158ffdffff REX.W movq rdx,[rip+0xfffffd8f]
0x19db000988b1   671  4c8b15a0f9ffff REX.W movq r10,[rip+0xfffff9a0]
0x19db000988b8   678  41ffd2         call r10
0x19db000988bb   67b  cc             int3l
0x19db000988bc   67c  418b54240b     movl rdx,[r12+0xb]
0x19db000988c1   681  4c8b1569fdffff REX.W movq r10,[rip+0xfffffd69]
0x19db000988c8   688  4c3bd2         REX.W cmpq r10,rdx
0x19db000988cb   68b  7712           ja 0x19db000988df  <+0x69f>
0x19db000988cd   68d  488b156cfdffff REX.W movq rdx,[rip+0xfffffd6c]
0x19db000988d4   694  4c8b157df9ffff REX.W movq r10,[rip+0xfffff97d]
0x19db000988db   69b  41ffd2         call r10
0x19db000988de   69e  cc             int3l
0x19db000988df   69f  418b44240f     movl rax,[r12+0xf]
0x19db000988e4   6a4  4c8b1546fdffff REX.W movq r10,[rip+0xfffffd46]
0x19db000988eb   6ab  4c3bd0         REX.W cmpq r10,rax
0x19db000988ee   6ae  7712           ja 0x19db00098902  <+0x6c2>
0x19db000988f0   6b0  488b1549fdffff REX.W movq rdx,[rip+0xfffffd49]
0x19db000988f7   6b7  4c8b155af9ffff REX.W movq r10,[rip+0xfffff95a]
0x19db000988fe   6be  41ffd2         call r10
0x19db00098901   6c1  cc             int3l
0x19db00098902   6c2  458b642403     movl r12,[r12+0x3]
0x19db00098907   6c7  498b19         REX.W movq rbx,[r9]
0x19db0009890a   6ca  488d7b20       REX.W leaq rdi,[rbx+0x20]
0x19db0009890e   6ce  49393e         REX.W cmpq [r14],rdi
0x19db00098911   6d1  0f86fa3f0000   jna 0x19db0009c911  <+0x46d1>
0x19db00098917   6d7  41d1fc         sarl r12, 1
0x19db0009891a   6da  488d7b20       REX.W leaq rdi,[rbx+0x20]
0x19db0009891e   6de  4181e400fcff3f andl r12,0x3ffffc00
0x19db00098925   6e5  498939         REX.W movq [r9],rdi
0x19db00098928   6e8  488d7b01       REX.W leaq rdi,[rbx+0x1]
0x19db0009892c   6ec  4183cc06       orl r12,0x6
0x19db00098930   6f0  41d1e4         shll r12, 1
0x19db00098933   6f3  4c8b15f7fcffff REX.W movq r10,[rip+0xfffffcf7]
0x19db0009893a   6fa  4d39e2         REX.W cmpq r10,r12
0x19db0009893d   6fd  7712           ja 0x19db00098951  <+0x711>
0x19db0009893f   6ff  488b15fafcffff REX.W movq rdx,[rip+0xfffffcfa]
0x19db00098946   706  4c8b150bf9ffff REX.W movq r10,[rip+0xfffff90b]
0x19db0009894d   70d  41ffd2         call r10
0x19db00098950   710  cc             int3l
0x19db00098951   711  4d8bbd38020000 REX.W movq r15,[r13+0x238] (root (property_array_map))
0x19db00098958   718  44897fff       movl [rdi-0x1],r15
0x19db0009895c   71c  44896703       movl [rdi+0x3],r12
0x19db00098960   720  894f07         movl [rdi+0x7],rcx
0x19db00098963   723  4c8be2         REX.W movq r12,rdx
0x19db00098966   726  4489670b       movl [rdi+0xb],r12
0x19db0009896a   72a  89470f         movl [rdi+0xf],rax
0x19db0009896d   72d  4d8ba590000000 REX.W movq r12,[r13+0x90] (root (undefined_value))
0x19db00098974   734  44896717       movl [rdi+0x17],r12
0x19db00098978   738  4489671b       movl [rdi+0x1b],r12
0x19db0009897c   73c  4d8ba5b0000000 REX.W movq r12,[r13+0xb0] (root (false_value))
0x19db00098983   743  44896713       movl [rdi+0x13],r12
0x19db00098987   747  458943ff       movl [r11-0x1],r8
0x19db0009898b   74b  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db00098992   752  4d23e3         REX.W andq r12,r11
0x19db00098995   755  41f644240804   testb [r12+0x8],0x4
0x19db0009899b   75b  0f855c6b0000   jnz 0x19db0009f4fd  <+0x72bd>
0x19db000989a1   761  41897b03       movl [r11+0x3],rdi
0x19db000989a5   765  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db000989ac   76c  4d23e3         REX.W andq r12,r11
0x19db000989af   76f  41f644240804   testb [r12+0x8],0x4
0x19db000989b5   775  0f85fb6a0000   jnz 0x19db0009f4b6  <+0x7276>
0x19db000989bb   77b  e912000000     jmp 0x19db000989d2  <+0x792>
0x19db000989c0   780  418b4b03       movl rcx,[r11+0x3]
0x19db000989c4   784  4903cd         REX.W addq rcx,r13
0x19db000989c7   787  4d8ba5b0000000 REX.W movq r12,[r13+0xb0] (root (false_value))
0x19db000989ce   78e  44896113       movl [rcx+0x13],r12
0x19db000989d2   792  4d8b19         REX.W movq r11,[r9]
0x19db000989d5   795  4d8da344010000 REX.W leaq r12,[r11+0x144]
0x19db000989dc   79c  4d3926         REX.W cmpq [r14],r12
0x19db000989df   79f  0f86863f0000   jna 0x19db0009c96b  <+0x472b>
0x19db000989e5   7a5  4d8d6310       REX.W leaq r12,[r11+0x10]
0x19db000989e9   7a9  4d8921         REX.W movq [r9],r12
0x19db000989ec   7ac  4d8d7b01       REX.W leaq r15,[r11+0x1]
0x19db000989f0   7b0  41bbb59e3008   movl r11,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db000989f6   7b6  45895fff       movl [r15-0x1],r11
0x19db000989fa   7ba  498b8558010000 REX.W movq rax,[r13+0x158] (root (empty_fixed_array))
0x19db00098a01   7c1  41894703       movl [r15+0x3],rax
0x19db00098a05   7c5  ba39452f08     movl rdx,0x82f4539      ;; (compressed) object: 0x19db082f4539 <FixedArray[4]>
0x19db00098a0a   7ca  41895707       movl [r15+0x7],rdx
0x19db00098a0e   7ce  41c7470b08000000 movl [r15+0xb],0x8
0x19db00098a16   7d6  498d542410     REX.W leaq rdx,[r12+0x10]
0x19db00098a1b   7db  498911         REX.W movq [r9],rdx
0x19db00098a1e   7de  4983c401       REX.W addq r12,0x1
0x19db00098a22   7e2  45895c24ff     movl [r12-0x1],r11
0x19db00098a27   7e7  4189442403     movl [r12+0x3],rax
0x19db00098a2c   7ec  b95d452f08     movl rcx,0x82f455d      ;; (compressed) object: 0x19db082f455d <FixedArray[4]>
0x19db00098a31   7f1  41894c2407     movl [r12+0x7],rcx
0x19db00098a36   7f6  41c744240b08000000 movl [r12+0xb],0x8
0x19db00098a3f   7ff  488d4a10       REX.W leaq rcx,[rdx+0x10]
0x19db00098a43   803  498909         REX.W movq [r9],rcx
0x19db00098a46   806  4883c201       REX.W addq rdx,0x1
0x19db00098a4a   80a  44895aff       movl [rdx-0x1],r11
0x19db00098a4e   80e  894203         movl [rdx+0x3],rax
0x19db00098a51   811  bf81452f08     movl rdi,0x82f4581      ;; (compressed) object: 0x19db082f4581 <FixedArray[4]>
0x19db00098a56   816  897a07         movl [rdx+0x7],rdi
0x19db00098a59   819  c7420b08000000 movl [rdx+0xb],0x8
0x19db00098a60   820  488d7910       REX.W leaq rdi,[rcx+0x10]
0x19db00098a64   824  498939         REX.W movq [r9],rdi
0x19db00098a67   827  4883c101       REX.W addq rcx,0x1
0x19db00098a6b   82b  448959ff       movl [rcx-0x1],r11
0x19db00098a6f   82f  894103         movl [rcx+0x3],rax
0x19db00098a72   832  41b8a5452f08   movl r8,0x82f45a5       ;; (compressed) object: 0x19db082f45a5 <FixedArray[4]>
0x19db00098a78   838  44894107       movl [rcx+0x7],r8
0x19db00098a7c   83c  c7410b08000000 movl [rcx+0xb],0x8
0x19db00098a83   843  4c8d4718       REX.W leaq r8,[rdi+0x18]
0x19db00098a87   847  4d8901         REX.W movq [r9],r8
0x19db00098a8a   84a  4883c701       REX.W addq rdi,0x1
0x19db00098a8e   84e  4d8bb5d0000000 REX.W movq r14,[r13+0xd0] (root (fixed_array_map))
0x19db00098a95   855  448977ff       movl [rdi-0x1],r14
0x19db00098a99   859  c7470308000000 movl [rdi+0x3],0x8
0x19db00098aa0   860  44897f07       movl [rdi+0x7],r15
0x19db00098aa4   864  4489670b       movl [rdi+0xb],r12
0x19db00098aa8   868  89570f         movl [rdi+0xf],rdx
0x19db00098aab   86b  894f13         movl [rdi+0x13],rcx
0x19db00098aae   86e  4d8d6010       REX.W leaq r12,[r8+0x10]
0x19db00098ab2   872  4d8921         REX.W movq [r9],r12
0x19db00098ab5   875  4983c001       REX.W addq r8,0x1
0x19db00098ab9   879  41bfa59f3008   movl r15,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00098abf   87f  458978ff       movl [r8-0x1],r15
0x19db00098ac3   883  41894003       movl [r8+0x3],rax
0x19db00098ac7   887  41897807       movl [r8+0x7],rdi
0x19db00098acb   88b  41c7400b08000000 movl [r8+0xb],0x8
0x19db00098ad3   893  44894613       movl [rsi+0x13],r8
0x19db00098ad7   897  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db00098ade   89e  4823de         REX.W andq rbx,rsi
0x19db00098ae1   8a1  f6430804       testb [rbx+0x8],0x4
0x19db00098ae5   8a5  0f8585690000   jnz 0x19db0009f470  <+0x7230>
0x19db00098aeb   8ab  4d8d442410     REX.W leaq r8,[r12+0x10]
0x19db00098af0   8b0  4d8901         REX.W movq [r9],r8
0x19db00098af3   8b3  4983c401       REX.W addq r12,0x1
0x19db00098af7   8b7  45895c24ff     movl [r12-0x1],r11
0x19db00098afc   8bc  4189442403     movl [r12+0x3],rax
0x19db00098b01   8c1  baed452f08     movl rdx,0x82f45ed      ;; (compressed) object: 0x19db082f45ed <FixedArray[4]>
0x19db00098b06   8c6  4189542407     movl [r12+0x7],rdx
0x19db00098b0b   8cb  41c744240b08000000 movl [r12+0xb],0x8
0x19db00098b14   8d4  498d5010       REX.W leaq rdx,[r8+0x10]
0x19db00098b18   8d8  498911         REX.W movq [r9],rdx
0x19db00098b1b   8db  4983c001       REX.W addq r8,0x1
0x19db00098b1f   8df  458958ff       movl [r8-0x1],r11
0x19db00098b23   8e3  41894003       movl [r8+0x3],rax
0x19db00098b27   8e7  b911462f08     movl rcx,0x82f4611      ;; (compressed) object: 0x19db082f4611 <FixedArray[4]>
0x19db00098b2c   8ec  41894807       movl [r8+0x7],rcx
0x19db00098b30   8f0  41c7400b08000000 movl [r8+0xb],0x8
0x19db00098b38   8f8  488d4a10       REX.W leaq rcx,[rdx+0x10]
0x19db00098b3c   8fc  498909         REX.W movq [r9],rcx
0x19db00098b3f   8ff  4883c201       REX.W addq rdx,0x1
0x19db00098b43   903  44895aff       movl [rdx-0x1],r11
0x19db00098b47   907  894203         movl [rdx+0x3],rax
0x19db00098b4a   90a  bf35462f08     movl rdi,0x82f4635      ;; (compressed) object: 0x19db082f4635 <FixedArray[4]>
0x19db00098b4f   90f  897a07         movl [rdx+0x7],rdi
0x19db00098b52   912  c7420b08000000 movl [rdx+0xb],0x8
0x19db00098b59   919  488d7910       REX.W leaq rdi,[rcx+0x10]
0x19db00098b5d   91d  498939         REX.W movq [r9],rdi
0x19db00098b60   920  4883c101       REX.W addq rcx,0x1
0x19db00098b64   924  448959ff       movl [rcx-0x1],r11
0x19db00098b68   928  894103         movl [rcx+0x3],rax
0x19db00098b6b   92b  be59462f08     movl rsi,0x82f4659      ;; (compressed) object: 0x19db082f4659 <FixedArray[4]>
0x19db00098b70   930  897107         movl [rcx+0x7],rsi
0x19db00098b73   933  c7410b08000000 movl [rcx+0xb],0x8
0x19db00098b7a   93a  488d7718       REX.W leaq rsi,[rdi+0x18]
0x19db00098b7e   93e  498931         REX.W movq [r9],rsi
0x19db00098b81   941  4883c701       REX.W addq rdi,0x1
0x19db00098b85   945  448977ff       movl [rdi-0x1],r14
0x19db00098b89   949  c7470308000000 movl [rdi+0x3],0x8
0x19db00098b90   950  44896707       movl [rdi+0x7],r12
0x19db00098b94   954  4489470b       movl [rdi+0xb],r8
0x19db00098b98   958  89570f         movl [rdi+0xf],rdx
0x19db00098b9b   95b  894f13         movl [rdi+0x13],rcx
0x19db00098b9e   95e  4c8d4610       REX.W leaq r8,[rsi+0x10]
0x19db00098ba2   962  4d8901         REX.W movq [r9],r8
0x19db00098ba5   965  4c8d6601       REX.W leaq r12,[rsi+0x1]
0x19db00098ba9   969  4c89e2         REX.W movq rdx,r12
0x19db00098bac   96c  44897aff       movl [rdx-0x1],r15
0x19db00098bb0   970  894203         movl [rdx+0x3],rax
0x19db00098bb3   973  897a07         movl [rdx+0x7],rdi
0x19db00098bb6   976  c7420b08000000 movl [rdx+0xb],0x8
0x19db00098bbd   97d  4c8b65d8       REX.W movq r12,[rbp-0x28]
0x19db00098bc1   981  4189542417     movl [r12+0x17],rdx
0x19db00098bc6   986  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db00098bcd   98d  4c21e3         REX.W andq rbx,r12
0x19db00098bd0   990  f6430804       testb [rbx+0x8],0x4
0x19db00098bd4   994  0f8550680000   jnz 0x19db0009f42a  <+0x71ea>
0x19db00098bda   99a  498d5010       REX.W leaq rdx,[r8+0x10]
0x19db00098bde   99e  498911         REX.W movq [r9],rdx
0x19db00098be1   9a1  4983c001       REX.W addq r8,0x1
0x19db00098be5   9a5  458958ff       movl [r8-0x1],r11
0x19db00098be9   9a9  41894003       movl [r8+0x3],rax
0x19db00098bed   9ad  b9a1462f08     movl rcx,0x82f46a1      ;; (compressed) object: 0x19db082f46a1 <FixedArray[4]>
0x19db00098bf2   9b2  41894807       movl [r8+0x7],rcx
0x19db00098bf6   9b6  41c7400b08000000 movl [r8+0xb],0x8
0x19db00098bfe   9be  488d4a10       REX.W leaq rcx,[rdx+0x10]
0x19db00098c02   9c2  498909         REX.W movq [r9],rcx
0x19db00098c05   9c5  4883c201       REX.W addq rdx,0x1
0x19db00098c09   9c9  44895aff       movl [rdx-0x1],r11
0x19db00098c0d   9cd  894203         movl [rdx+0x3],rax
0x19db00098c10   9d0  bec5462f08     movl rsi,0x82f46c5      ;; (compressed) object: 0x19db082f46c5 <FixedArray[4]>
0x19db00098c15   9d5  897207         movl [rdx+0x7],rsi
0x19db00098c18   9d8  c7420b08000000 movl [rdx+0xb],0x8
0x19db00098c1f   9df  488d7110       REX.W leaq rsi,[rcx+0x10]
0x19db00098c23   9e3  498931         REX.W movq [r9],rsi
0x19db00098c26   9e6  4883c101       REX.W addq rcx,0x1
0x19db00098c2a   9ea  448959ff       movl [rcx-0x1],r11
0x19db00098c2e   9ee  894103         movl [rcx+0x3],rax
0x19db00098c31   9f1  bfe9462f08     movl rdi,0x82f46e9      ;; (compressed) object: 0x19db082f46e9 <FixedArray[4]>
0x19db00098c36   9f6  897907         movl [rcx+0x7],rdi
0x19db00098c39   9f9  c7410b08000000 movl [rcx+0xb],0x8
0x19db00098c40   a00  488d7e10       REX.W leaq rdi,[rsi+0x10]
0x19db00098c44   a04  498939         REX.W movq [r9],rdi
0x19db00098c47   a07  4883c601       REX.W addq rsi,0x1
0x19db00098c4b   a0b  44895eff       movl [rsi-0x1],r11
0x19db00098c4f   a0f  894603         movl [rsi+0x3],rax
0x19db00098c52   a12  41bc0d472f08   movl r12,0x82f470d      ;; (compressed) object: 0x19db082f470d <FixedArray[4]>
0x19db00098c58   a18  44896607       movl [rsi+0x7],r12
0x19db00098c5c   a1c  c7460b08000000 movl [rsi+0xb],0x8
0x19db00098c63   a23  4c8d6718       REX.W leaq r12,[rdi+0x18]
0x19db00098c67   a27  4d8921         REX.W movq [r9],r12
0x19db00098c6a   a2a  4883c701       REX.W addq rdi,0x1
0x19db00098c6e   a2e  448977ff       movl [rdi-0x1],r14
0x19db00098c72   a32  c7470308000000 movl [rdi+0x3],0x8
0x19db00098c79   a39  44894707       movl [rdi+0x7],r8
0x19db00098c7d   a3d  89570b         movl [rdi+0xb],rdx
0x19db00098c80   a40  894f0f         movl [rdi+0xf],rcx
0x19db00098c83   a43  897713         movl [rdi+0x13],rsi
0x19db00098c86   a46  4d8d442410     REX.W leaq r8,[r12+0x10]
0x19db00098c8b   a4b  4d8901         REX.W movq [r9],r8
0x19db00098c8e   a4e  4983c401       REX.W addq r12,0x1
0x19db00098c92   a52  4c89e2         REX.W movq rdx,r12
0x19db00098c95   a55  44897aff       movl [rdx-0x1],r15
0x19db00098c99   a59  894203         movl [rdx+0x3],rax
0x19db00098c9c   a5c  897a07         movl [rdx+0x7],rdi
0x19db00098c9f   a5f  c7420b08000000 movl [rdx+0xb],0x8
0x19db00098ca6   a66  4c8b65d8       REX.W movq r12,[rbp-0x28]
0x19db00098caa   a6a  418954241b     movl [r12+0x1b],rdx
0x19db00098caf   a6f  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db00098cb6   a76  4c21e3         REX.W andq rbx,r12
0x19db00098cb9   a79  f6430804       testb [rbx+0x8],0x4
0x19db00098cbd   a7d  0f8521670000   jnz 0x19db0009f3e4  <+0x71a4>
0x19db00098cc3   a83  418b54240f     movl rdx,[r12+0xf]
0x19db00098cc8   a88  4903d5         REX.W addq rdx,r13
0x19db00098ccb   a8b  418b4c2437     movl rcx,[r12+0x37]
0x19db00098cd0   a90  4903cd         REX.W addq rcx,r13
0x19db00098cd3   a93  488b5d18       REX.W movq rbx,[rbp+0x18]
0x19db00098cd7   a97  d1fb           sarl rbx, 1
0x19db00098cd9   a99  488b7518       REX.W movq rsi,[rbp+0x18]
0x19db00098cdd   a9d  40f6c601       testb rsi,0x1
0x19db00098ce1   aa1  0f85e36b0000   jnz 0x19db0009f8ca  <+0x768a>
0x19db00098ce7   aa7  48894dc8       REX.W movq [rbp-0x38],rcx
0x19db00098ceb   aab  33c9           xorl rcx,rcx
0x19db00098ced   aad  2bcb           subl rcx,rbx
0x19db00098cef   aaf  0f80dc6b0000   jo 0x19db0009f8d1  <+0x7691>
0x19db00098cf5   ab5  488955d0       REX.W movq [rbp-0x30],rdx
0x19db00098cf9   ab9  48895dc0       REX.W movq [rbp-0x40],rbx
0x19db00098cfd   abd  33ff           xorl rdi,rdi
0x19db00098cff   abf  83f900         cmpl rcx,0x0
0x19db00098d02   ac2  0f84015c0000   jz 0x19db0009e909  <+0x66c9>
0x19db00098d08   ac8  4c8bd9         REX.W movq r11,rcx
0x19db00098d0b   acb  4403d9         addl r11,rcx
0x19db00098d0e   ace  0f807d3c0000   jo 0x19db0009c991  <+0x4751>
0x19db00098d14   ad4  56             push rsi
0x19db00098d15   ad5  4153           push r11
0x19db00098d17   ad7  4153           push r11
0x19db00098d19   ad9  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db00098d20   ae0  4150           push r8
0x19db00098d22   ae2  4c895db8       REX.W movq [rbp-0x48],r11
0x19db00098d26   ae6  4d89e0         REX.W movq r8,r12
0x19db00098d29   ae9  4c8be0         REX.W movq r12,rax
0x19db00098d2c   aec  488b55c8       REX.W movq rdx,[rbp-0x38]
0x19db00098d30   af0  b803000000     movl rax,0x3
0x19db00098d35   af5  488bce         REX.W movq rcx,rsi
0x19db00098d38   af8  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00098d42   b02  488bfa         REX.W movq rdi,rdx
0x19db00098d45   b05  49ba003ab9f5ff7f0000 REX.W movq r10,0x7ffff5b93a00  (Construct)    ;; off heap target
0x19db00098d4f   b0f  41ffd2         call r10
0x19db00098d52   b12  f645d001       testb [rbp-0x30],0x1
0x19db00098d56   b16  0f84836b0000   jz 0x19db0009f8df  <+0x769f>
0x19db00098d5c   b1c  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db00098d60   b20  41b9b59e3008   movl r9,0x8309eb5       ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00098d66   b26  453948ff       cmpl [r8-0x1],r9
0x19db00098d6a   b2a  0f844d3c0000   jz 0x19db0009c9bd  <+0x477d>
0x19db00098d70   b30  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00098d76   b36  453958ff       cmpl [r8-0x1],r11
0x19db00098d7a   b3a  0f84be000000   jz 0x19db00098e3e  <+0xbfe>
0x19db00098d80   b40  41bc6ddc3008   movl r12,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00098d86   b46  453960ff       cmpl [r8-0x1],r12
0x19db00098d8a   b4a  0f85566b0000   jnz 0x19db0009f8e6  <+0x76a6>
0x19db00098d90   b50  458b6007       movl r12,[r8+0x7]
0x19db00098d94   b54  4d03e5         REX.W addq r12,r13
0x19db00098d97   b57  458b700b       movl r14,[r8+0xb]
0x19db00098d9b   b5b  418b542403     movl rdx,[r12+0x3]
0x19db00098da0   b60  41d1fe         sarl r14, 1
0x19db00098da3   b63  458d7e01       leal r15,[r14+0x1]
0x19db00098da7   b67  4c8b1583f8ffff REX.W movq r10,[rip+0xfffff883]
0x19db00098dae   b6e  4d3bd7         REX.W cmpq r10,r15
0x19db00098db1   b71  7712           ja 0x19db00098dc5  <+0xb85>
0x19db00098db3   b73  488b1586f8ffff REX.W movq rdx,[rip+0xfffff886]
0x19db00098dba   b7a  4c8b1597f4ffff REX.W movq r10,[rip+0xfffff497]
0x19db00098dc1   b81  41ffd2         call r10
0x19db00098dc4   b84  cc             int3l
0x19db00098dc5   b85  4183ff00       cmpl r15,0x0
0x19db00098dc9   b89  0f86133c0000   jna 0x19db0009c9e2  <+0x47a2>
0x19db00098dcf   b8f  d1fa           sarl rdx, 1
0x19db00098dd1   b91  83fa00         cmpl rdx,0x0
0x19db00098dd4   b94  0f86093c0000   jna 0x19db0009c9e3  <+0x47a3>
0x19db00098dda   b9a  418b5424ff     movl rdx,[r12-0x1]
0x19db00098ddf   b9f  4c8b154bf8ffff REX.W movq r10,[rip+0xfffff84b]
0x19db00098de6   ba6  4c3bd2         REX.W cmpq r10,rdx
0x19db00098de9   ba9  7712           ja 0x19db00098dfd  <+0xbbd>
0x19db00098deb   bab  488b154ef8ffff REX.W movq rdx,[rip+0xfffff84e]
0x19db00098df2   bb2  4c8b155ff4ffff REX.W movq r10,[rip+0xfffff45f]
0x19db00098df9   bb9  41ffd2         call r10
0x19db00098dfc   bbc  cc             int3l
0x19db00098dfd   bbd  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db00098e04   bc4  0f85203c0000   jnz 0x19db0009ca2a  <+0x47ea>
0x19db00098e0a   bca  4183fe00       cmpl r14,0x0
0x19db00098e0e   bce  0f8708000000   ja 0x19db00098e1c  <+0xbdc>
0x19db00098e14   bd4  41c7400b02000000 movl [r8+0xb],0x2
0x19db00098e1c   bdc  4c8bf0         REX.W movq r14,rax
0x19db00098e1f   bdf  4589742407     movl [r12+0x7],r14
0x19db00098e24   be4  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db00098e2b   beb  4d21e0         REX.W andq r8,r12
0x19db00098e2e   bee  41f6400804     testb [r8+0x8],0x4
0x19db00098e33   bf3  0f8559650000   jnz 0x19db0009f392  <+0x7152>
0x19db00098e39   bf9  e9a9000000     jmp 0x19db00098ee7  <+0xca7>
0x19db00098e3e   bfe  458b6007       movl r12,[r8+0x7]
0x19db00098e42   c02  4d03e5         REX.W addq r12,r13
0x19db00098e45   c05  458b700b       movl r14,[r8+0xb]
0x19db00098e49   c09  418b542403     movl rdx,[r12+0x3]
0x19db00098e4e   c0e  41d1fe         sarl r14, 1
0x19db00098e51   c11  458d7e01       leal r15,[r14+0x1]
0x19db00098e55   c15  4c8b15d5f7ffff REX.W movq r10,[rip+0xfffff7d5]
0x19db00098e5c   c1c  4d3bd7         REX.W cmpq r10,r15
0x19db00098e5f   c1f  7712           ja 0x19db00098e73  <+0xc33>
0x19db00098e61   c21  488b15d8f7ffff REX.W movq rdx,[rip+0xfffff7d8]
0x19db00098e68   c28  4c8b15e9f3ffff REX.W movq r10,[rip+0xfffff3e9]
0x19db00098e6f   c2f  41ffd2         call r10
0x19db00098e72   c32  cc             int3l
0x19db00098e73   c33  4183ff00       cmpl r15,0x0
0x19db00098e77   c37  0f86ea3b0000   jna 0x19db0009ca67  <+0x4827>
0x19db00098e7d   c3d  d1fa           sarl rdx, 1
0x19db00098e7f   c3f  83fa00         cmpl rdx,0x0
0x19db00098e82   c42  0f86e03b0000   jna 0x19db0009ca68  <+0x4828>
0x19db00098e88   c48  418b5424ff     movl rdx,[r12-0x1]
0x19db00098e8d   c4d  4c8b159df7ffff REX.W movq r10,[rip+0xfffff79d]
0x19db00098e94   c54  4c3bd2         REX.W cmpq r10,rdx
0x19db00098e97   c57  7712           ja 0x19db00098eab  <+0xc6b>
0x19db00098e99   c59  488b15a0f7ffff REX.W movq rdx,[rip+0xfffff7a0]
0x19db00098ea0   c60  4c8b15b1f3ffff REX.W movq r10,[rip+0xfffff3b1]
0x19db00098ea7   c67  41ffd2         call r10
0x19db00098eaa   c6a  cc             int3l
0x19db00098eab   c6b  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db00098eb2   c72  0f85f43b0000   jnz 0x19db0009caac  <+0x486c>
0x19db00098eb8   c78  4183fe00       cmpl r14,0x0
0x19db00098ebc   c7c  0f8708000000   ja 0x19db00098eca  <+0xc8a>
0x19db00098ec2   c82  41c7400b02000000 movl [r8+0xb],0x2
0x19db00098eca   c8a  4c8bc0         REX.W movq r8,rax
0x19db00098ecd   c8d  4589442407     movl [r12+0x7],r8
0x19db00098ed2   c92  49c7c60000fcff REX.W movq r14,0xfffc0000
0x19db00098ed9   c99  4d21e6         REX.W andq r14,r12
0x19db00098edc   c9c  41f6460804     testb [r14+0x8],0x4
0x19db00098ee1   ca1  0f8559640000   jnz 0x19db0009f340  <+0x7100>
0x19db00098ee7   ca7  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00098eeb   cab  8b460f         movl rax,[rsi+0xf]
0x19db00098eee   cae  4903c5         REX.W addq rax,r13
0x19db00098ef1   cb1  8b5637         movl rdx,[rsi+0x37]
0x19db00098ef4   cb4  4903d5         REX.W addq rdx,r13
0x19db00098ef7   cb7  ff7518         push [rbp+0x18]
0x19db00098efa   cba  ff7518         push [rbp+0x18]
0x19db00098efd   cbd  ff75b8         push [rbp-0x48]
0x19db00098f00   cc0  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db00098f07   cc7  4150           push r8
0x19db00098f09   cc9  488945c8       REX.W movq [rbp-0x38],rax
0x19db00098f0d   ccd  488bd8         REX.W movq rbx,rax
0x19db00098f10   cd0  4c8bfe         REX.W movq r15,rsi
0x19db00098f13   cd3  488bfa         REX.W movq rdi,rdx
0x19db00098f16   cd6  b803000000     movl rax,0x3
0x19db00098f1b   cdb  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00098f25   ce5  4c8be0         REX.W movq r12,rax
0x19db00098f28   ce8  4c8bf6         REX.W movq r14,rsi
0x19db00098f2b   ceb  4c8b1515feffff REX.W movq r10,[rip+0xfffffe15]
0x19db00098f32   cf2  41ffd2         call r10
0x19db00098f35   cf5  f645c801       testb [rbp-0x38],0x1
0x19db00098f39   cf9  0f84b5690000   jz 0x19db0009f8f4  <+0x76b4>
0x19db00098f3f   cff  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00098f45   d05  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db00098f49   d09  453941ff       cmpl [r9-0x1],r8
0x19db00098f4d   d0d  0f84ba000000   jz 0x19db0009900d  <+0xdcd>
0x19db00098f53   d13  41bc6ddc3008   movl r12,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00098f59   d19  453961ff       cmpl [r9-0x1],r12
0x19db00098f5d   d1d  0f8598690000   jnz 0x19db0009f8fb  <+0x76bb>
0x19db00098f63   d23  458b7107       movl r14,[r9+0x7]
0x19db00098f67   d27  4d03f5         REX.W addq r14,r13
0x19db00098f6a   d2a  458b790b       movl r15,[r9+0xb]
0x19db00098f6e   d2e  41d1ff         sarl r15, 1
0x19db00098f71   d31  418b5603       movl rdx,[r14+0x3]
0x19db00098f75   d35  d1fa           sarl rdx, 1
0x19db00098f77   d37  418d4f01       leal rcx,[r15+0x1]
0x19db00098f7b   d3b  4c8b15aff6ffff REX.W movq r10,[rip+0xfffff6af]
0x19db00098f82   d42  4c3bd1         REX.W cmpq r10,rcx
0x19db00098f85   d45  7712           ja 0x19db00098f99  <+0xd59>
0x19db00098f87   d47  488b15b2f6ffff REX.W movq rdx,[rip+0xfffff6b2]
0x19db00098f8e   d4e  4c8b15c3f2ffff REX.W movq r10,[rip+0xfffff2c3]
0x19db00098f95   d55  41ffd2         call r10
0x19db00098f98   d58  cc             int3l
0x19db00098f99   d59  83f901         cmpl rcx,0x1
0x19db00098f9c   d5c  0f8660690000   jna 0x19db0009f902  <+0x76c2>
0x19db00098fa2   d62  83fa01         cmpl rdx,0x1
0x19db00098fa5   d65  0f863b3b0000   jna 0x19db0009cae6  <+0x48a6>
0x19db00098fab   d6b  418b56ff       movl rdx,[r14-0x1]
0x19db00098faf   d6f  4c8b157bf6ffff REX.W movq r10,[rip+0xfffff67b]
0x19db00098fb6   d76  4c3bd2         REX.W cmpq r10,rdx
0x19db00098fb9   d79  7712           ja 0x19db00098fcd  <+0xd8d>
0x19db00098fbb   d7b  488b157ef6ffff REX.W movq rdx,[rip+0xfffff67e]
0x19db00098fc2   d82  4c8b158ff2ffff REX.W movq r10,[rip+0xfffff28f]
0x19db00098fc9   d89  41ffd2         call r10
0x19db00098fcc   d8c  cc             int3l
0x19db00098fcd   d8d  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db00098fd4   d94  0f85533b0000   jnz 0x19db0009cb2d  <+0x48ed>
0x19db00098fda   d9a  4183ff01       cmpl r15,0x1
0x19db00098fde   d9e  0f8708000000   ja 0x19db00098fec  <+0xdac>
0x19db00098fe4   da4  41c7410b04000000 movl [r9+0xb],0x4
0x19db00098fec   dac  4c8bd8         REX.W movq r11,rax
0x19db00098fef   daf  45895e0b       movl [r14+0xb],r11
0x19db00098ff3   db3  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db00098ffa   dba  4d23ce         REX.W andq r9,r14
0x19db00098ffd   dbd  41f6410804     testb [r9+0x8],0x4
0x19db00099002   dc2  0f85e7620000   jnz 0x19db0009f2ef  <+0x70af>
0x19db00099008   dc8  e9a9000000     jmp 0x19db000990b6  <+0xe76>
0x19db0009900d   dcd  458b6107       movl r12,[r9+0x7]
0x19db00099011   dd1  4d03e5         REX.W addq r12,r13
0x19db00099014   dd4  458b710b       movl r14,[r9+0xb]
0x19db00099018   dd8  41d1fe         sarl r14, 1
0x19db0009901b   ddb  418b542403     movl rdx,[r12+0x3]
0x19db00099020   de0  d1fa           sarl rdx, 1
0x19db00099022   de2  458d7e01       leal r15,[r14+0x1]
0x19db00099026   de6  4c8b1504f6ffff REX.W movq r10,[rip+0xfffff604]
0x19db0009902d   ded  4d3bd7         REX.W cmpq r10,r15
0x19db00099030   df0  7712           ja 0x19db00099044  <+0xe04>
0x19db00099032   df2  488b1507f6ffff REX.W movq rdx,[rip+0xfffff607]
0x19db00099039   df9  4c8b1518f2ffff REX.W movq r10,[rip+0xfffff218]
0x19db00099040   e00  41ffd2         call r10
0x19db00099043   e03  cc             int3l
0x19db00099044   e04  4183ff01       cmpl r15,0x1
0x19db00099048   e08  0f86bb680000   jna 0x19db0009f909  <+0x76c9>
0x19db0009904e   e0e  83fa01         cmpl rdx,0x1
0x19db00099051   e11  0f86103b0000   jna 0x19db0009cb67  <+0x4927>
0x19db00099057   e17  418b5424ff     movl rdx,[r12-0x1]
0x19db0009905c   e1c  4c8b15cef5ffff REX.W movq r10,[rip+0xfffff5ce]
0x19db00099063   e23  4c3bd2         REX.W cmpq r10,rdx
0x19db00099066   e26  7712           ja 0x19db0009907a  <+0xe3a>
0x19db00099068   e28  488b15d1f5ffff REX.W movq rdx,[rip+0xfffff5d1]
0x19db0009906f   e2f  4c8b15e2f1ffff REX.W movq r10,[rip+0xfffff1e2]
0x19db00099076   e36  41ffd2         call r10
0x19db00099079   e39  cc             int3l
0x19db0009907a   e3a  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db00099081   e41  0f85213b0000   jnz 0x19db0009cba8  <+0x4968>
0x19db00099087   e47  4183fe01       cmpl r14,0x1
0x19db0009908b   e4b  0f8708000000   ja 0x19db00099099  <+0xe59>
0x19db00099091   e51  41c7410b04000000 movl [r9+0xb],0x4
0x19db00099099   e59  4c8bc8         REX.W movq r9,rax
0x19db0009909c   e5c  45894c240b     movl [r12+0xb],r9
0x19db000990a1   e61  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db000990a8   e68  4d21e3         REX.W andq r11,r12
0x19db000990ab   e6b  41f6430804     testb [r11+0x8],0x4
0x19db000990b0   e70  0f85e7610000   jnz 0x19db0009f29d  <+0x705d>
0x19db000990b6   e76  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db000990ba   e7a  8b460f         movl rax,[rsi+0xf]
0x19db000990bd   e7d  4903c5         REX.W addq rax,r13
0x19db000990c0   e80  8b5637         movl rdx,[rsi+0x37]
0x19db000990c3   e83  4903d5         REX.W addq rdx,r13
0x19db000990c6   e86  ff7518         push [rbp+0x18]
0x19db000990c9   e89  ff7518         push [rbp+0x18]
0x19db000990cc   e8c  ff7518         push [rbp+0x18]
0x19db000990cf   e8f  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db000990d6   e96  4151           push r9
0x19db000990d8   e98  488945c8       REX.W movq [rbp-0x38],rax
0x19db000990dc   e9c  488bfa         REX.W movq rdi,rdx
0x19db000990df   e9f  4c8bf0         REX.W movq r14,rax
0x19db000990e2   ea2  b803000000     movl rax,0x3
0x19db000990e7   ea7  4c8bde         REX.W movq r11,rsi
0x19db000990ea   eaa  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000990f4   eb4  4c8b154cfcffff REX.W movq r10,[rip+0xfffffc4c]
0x19db000990fb   ebb  41ffd2         call r10
0x19db000990fe   ebe  f645c801       testb [rbp-0x38],0x1
0x19db00099102   ec2  0f840f680000   jz 0x19db0009f917  <+0x76d7>
0x19db00099108   ec8  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009910e   ece  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db00099112   ed2  453941ff       cmpl [r9-0x1],r8
0x19db00099116   ed6  0f84be000000   jz 0x19db000991da  <+0xf9a>
0x19db0009911c   edc  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00099122   ee2  453959ff       cmpl [r9-0x1],r11
0x19db00099126   ee6  0f85f2670000   jnz 0x19db0009f91e  <+0x76de>
0x19db0009912c   eec  458b6107       movl r12,[r9+0x7]
0x19db00099130   ef0  4d03e5         REX.W addq r12,r13
0x19db00099133   ef3  458b710b       movl r14,[r9+0xb]
0x19db00099137   ef7  41d1fe         sarl r14, 1
0x19db0009913a   efa  418b542403     movl rdx,[r12+0x3]
0x19db0009913f   eff  d1fa           sarl rdx, 1
0x19db00099141   f01  458d7e01       leal r15,[r14+0x1]
0x19db00099145   f05  4c8b15e5f4ffff REX.W movq r10,[rip+0xfffff4e5]
0x19db0009914c   f0c  4d3bd7         REX.W cmpq r10,r15
0x19db0009914f   f0f  7712           ja 0x19db00099163  <+0xf23>
0x19db00099151   f11  488b15e8f4ffff REX.W movq rdx,[rip+0xfffff4e8]
0x19db00099158   f18  4c8b15f9f0ffff REX.W movq r10,[rip+0xfffff0f9]
0x19db0009915f   f1f  41ffd2         call r10
0x19db00099162   f22  cc             int3l
0x19db00099163   f23  4183ff02       cmpl r15,0x2
0x19db00099167   f27  0f86b8670000   jna 0x19db0009f925  <+0x76e5>
0x19db0009916d   f2d  83fa02         cmpl rdx,0x2
0x19db00099170   f30  0f86663a0000   jna 0x19db0009cbdc  <+0x499c>
0x19db00099176   f36  418b5424ff     movl rdx,[r12-0x1]
0x19db0009917b   f3b  4c8b15aff4ffff REX.W movq r10,[rip+0xfffff4af]
0x19db00099182   f42  4c3bd2         REX.W cmpq r10,rdx
0x19db00099185   f45  7712           ja 0x19db00099199  <+0xf59>
0x19db00099187   f47  488b15b2f4ffff REX.W movq rdx,[rip+0xfffff4b2]
0x19db0009918e   f4e  4c8b15c3f0ffff REX.W movq r10,[rip+0xfffff0c3]
0x19db00099195   f55  41ffd2         call r10
0x19db00099198   f58  cc             int3l
0x19db00099199   f59  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db000991a0   f60  0f857d3a0000   jnz 0x19db0009cc23  <+0x49e3>
0x19db000991a6   f66  4183fe02       cmpl r14,0x2
0x19db000991aa   f6a  0f8708000000   ja 0x19db000991b8  <+0xf78>
0x19db000991b0   f70  41c7410b06000000 movl [r9+0xb],0x6
0x19db000991b8   f78  4c8bf0         REX.W movq r14,rax
0x19db000991bb   f7b  458974240f     movl [r12+0xf],r14
0x19db000991c0   f80  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db000991c7   f87  4d21e1         REX.W andq r9,r12
0x19db000991ca   f8a  41f6410804     testb [r9+0x8],0x4
0x19db000991cf   f8f  0f8576600000   jnz 0x19db0009f24b  <+0x700b>
0x19db000991d5   f95  e9a9000000     jmp 0x19db00099283  <+0x1043>
0x19db000991da   f9a  458b6107       movl r12,[r9+0x7]
0x19db000991de   f9e  4d03e5         REX.W addq r12,r13
0x19db000991e1   fa1  458b710b       movl r14,[r9+0xb]
0x19db000991e5   fa5  41d1fe         sarl r14, 1
0x19db000991e8   fa8  418b542403     movl rdx,[r12+0x3]
0x19db000991ed   fad  d1fa           sarl rdx, 1
0x19db000991ef   faf  458d7e01       leal r15,[r14+0x1]
0x19db000991f3   fb3  4c8b1537f4ffff REX.W movq r10,[rip+0xfffff437]
0x19db000991fa   fba  4d3bd7         REX.W cmpq r10,r15
0x19db000991fd   fbd  7712           ja 0x19db00099211  <+0xfd1>
0x19db000991ff   fbf  488b153af4ffff REX.W movq rdx,[rip+0xfffff43a]
0x19db00099206   fc6  4c8b154bf0ffff REX.W movq r10,[rip+0xfffff04b]
0x19db0009920d   fcd  41ffd2         call r10
0x19db00099210   fd0  cc             int3l
0x19db00099211   fd1  4183ff02       cmpl r15,0x2
0x19db00099215   fd5  0f8611670000   jna 0x19db0009f92c  <+0x76ec>
0x19db0009921b   fdb  83fa02         cmpl rdx,0x2
0x19db0009921e   fde  0f86393a0000   jna 0x19db0009cc5d  <+0x4a1d>
0x19db00099224   fe4  418b5424ff     movl rdx,[r12-0x1]
0x19db00099229   fe9  4c8b1501f4ffff REX.W movq r10,[rip+0xfffff401]
0x19db00099230   ff0  4c3bd2         REX.W cmpq r10,rdx
0x19db00099233   ff3  7712           ja 0x19db00099247  <+0x1007>
0x19db00099235   ff5  488b1504f4ffff REX.W movq rdx,[rip+0xfffff404]
0x19db0009923c   ffc  4c8b1515f0ffff REX.W movq r10,[rip+0xfffff015]
0x19db00099243  1003  41ffd2         call r10
0x19db00099246  1006  cc             int3l
0x19db00099247  1007  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db0009924e  100e  0f854a3a0000   jnz 0x19db0009cc9e  <+0x4a5e>
0x19db00099254  1014  4183fe02       cmpl r14,0x2
0x19db00099258  1018  0f8708000000   ja 0x19db00099266  <+0x1026>
0x19db0009925e  101e  41c7410b06000000 movl [r9+0xb],0x6
0x19db00099266  1026  4c8bc8         REX.W movq r9,rax
0x19db00099269  1029  45894c240f     movl [r12+0xf],r9
0x19db0009926e  102e  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db00099275  1035  4d21e3         REX.W andq r11,r12
0x19db00099278  1038  41f6430804     testb [r11+0x8],0x4
0x19db0009927d  103d  0f85765f0000   jnz 0x19db0009f1f9  <+0x6fb9>
0x19db00099283  1043  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00099287  1047  8b460f         movl rax,[rsi+0xf]
0x19db0009928a  104a  4903c5         REX.W addq rax,r13
0x19db0009928d  104d  8b5637         movl rdx,[rsi+0x37]
0x19db00099290  1050  4903d5         REX.W addq rdx,r13
0x19db00099293  1053  ff7518         push [rbp+0x18]
0x19db00099296  1056  ff75b8         push [rbp-0x48]
0x19db00099299  1059  ff7518         push [rbp+0x18]
0x19db0009929c  105c  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db000992a3  1063  4151           push r9
0x19db000992a5  1065  488945c8       REX.W movq [rbp-0x38],rax
0x19db000992a9  1069  488bfa         REX.W movq rdi,rdx
0x19db000992ac  106c  4c8bf0         REX.W movq r14,rax
0x19db000992af  106f  b803000000     movl rax,0x3
0x19db000992b4  1074  4c8be6         REX.W movq r12,rsi
0x19db000992b7  1077  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000992c1  1081  4c8b157ffaffff REX.W movq r10,[rip+0xfffffa7f]
0x19db000992c8  1088  41ffd2         call r10
0x19db000992cb  108b  f645c801       testb [rbp-0x38],0x1
0x19db000992cf  108f  0f8465660000   jz 0x19db0009f93a  <+0x76fa>
0x19db000992d5  1095  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db000992db  109b  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db000992df  109f  453941ff       cmpl [r9-0x1],r8
0x19db000992e3  10a3  0f84be000000   jz 0x19db000993a7  <+0x1167>
0x19db000992e9  10a9  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db000992ef  10af  453959ff       cmpl [r9-0x1],r11
0x19db000992f3  10b3  0f8548660000   jnz 0x19db0009f941  <+0x7701>
0x19db000992f9  10b9  458b6107       movl r12,[r9+0x7]
0x19db000992fd  10bd  4d03e5         REX.W addq r12,r13
0x19db00099300  10c0  458b710b       movl r14,[r9+0xb]
0x19db00099304  10c4  41d1fe         sarl r14, 1
0x19db00099307  10c7  418b542403     movl rdx,[r12+0x3]
0x19db0009930c  10cc  d1fa           sarl rdx, 1
0x19db0009930e  10ce  458d7e01       leal r15,[r14+0x1]
0x19db00099312  10d2  4c8b1518f3ffff REX.W movq r10,[rip+0xfffff318]
0x19db00099319  10d9  4d3bd7         REX.W cmpq r10,r15
0x19db0009931c  10dc  7712           ja 0x19db00099330  <+0x10f0>
0x19db0009931e  10de  488b151bf3ffff REX.W movq rdx,[rip+0xfffff31b]
0x19db00099325  10e5  4c8b152cefffff REX.W movq r10,[rip+0xffffef2c]
0x19db0009932c  10ec  41ffd2         call r10
0x19db0009932f  10ef  cc             int3l
0x19db00099330  10f0  4183ff03       cmpl r15,0x3
0x19db00099334  10f4  0f860e660000   jna 0x19db0009f948  <+0x7708>
0x19db0009933a  10fa  83fa03         cmpl rdx,0x3
0x19db0009933d  10fd  0f868f390000   jna 0x19db0009ccd2  <+0x4a92>
0x19db00099343  1103  418b5424ff     movl rdx,[r12-0x1]
0x19db00099348  1108  4c8b15e2f2ffff REX.W movq r10,[rip+0xfffff2e2]
0x19db0009934f  110f  4c3bd2         REX.W cmpq r10,rdx
0x19db00099352  1112  7712           ja 0x19db00099366  <+0x1126>
0x19db00099354  1114  488b15e5f2ffff REX.W movq rdx,[rip+0xfffff2e5]
0x19db0009935b  111b  4c8b15f6eeffff REX.W movq r10,[rip+0xffffeef6]
0x19db00099362  1122  41ffd2         call r10
0x19db00099365  1125  cc             int3l
0x19db00099366  1126  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db0009936d  112d  0f85a6390000   jnz 0x19db0009cd19  <+0x4ad9>
0x19db00099373  1133  4183fe03       cmpl r14,0x3
0x19db00099377  1137  0f8708000000   ja 0x19db00099385  <+0x1145>
0x19db0009937d  113d  41c7410b08000000 movl [r9+0xb],0x8
0x19db00099385  1145  4c8bf0         REX.W movq r14,rax
0x19db00099388  1148  4589742413     movl [r12+0x13],r14
0x19db0009938d  114d  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db00099394  1154  4d21e1         REX.W andq r9,r12
0x19db00099397  1157  41f6410804     testb [r9+0x8],0x4
0x19db0009939c  115c  0f85055e0000   jnz 0x19db0009f1a7  <+0x6f67>
0x19db000993a2  1162  e9a9000000     jmp 0x19db00099450  <+0x1210>
0x19db000993a7  1167  458b6107       movl r12,[r9+0x7]
0x19db000993ab  116b  4d03e5         REX.W addq r12,r13
0x19db000993ae  116e  458b710b       movl r14,[r9+0xb]
0x19db000993b2  1172  41d1fe         sarl r14, 1
0x19db000993b5  1175  418b542403     movl rdx,[r12+0x3]
0x19db000993ba  117a  d1fa           sarl rdx, 1
0x19db000993bc  117c  458d7e01       leal r15,[r14+0x1]
0x19db000993c0  1180  4c8b156af2ffff REX.W movq r10,[rip+0xfffff26a]
0x19db000993c7  1187  4d3bd7         REX.W cmpq r10,r15
0x19db000993ca  118a  7712           ja 0x19db000993de  <+0x119e>
0x19db000993cc  118c  488b156df2ffff REX.W movq rdx,[rip+0xfffff26d]
0x19db000993d3  1193  4c8b157eeeffff REX.W movq r10,[rip+0xffffee7e]
0x19db000993da  119a  41ffd2         call r10
0x19db000993dd  119d  cc             int3l
0x19db000993de  119e  4183ff03       cmpl r15,0x3
0x19db000993e2  11a2  0f8667650000   jna 0x19db0009f94f  <+0x770f>
0x19db000993e8  11a8  83fa03         cmpl rdx,0x3
0x19db000993eb  11ab  0f8662390000   jna 0x19db0009cd53  <+0x4b13>
0x19db000993f1  11b1  418b5424ff     movl rdx,[r12-0x1]
0x19db000993f6  11b6  4c8b1534f2ffff REX.W movq r10,[rip+0xfffff234]
0x19db000993fd  11bd  4c3bd2         REX.W cmpq r10,rdx
0x19db00099400  11c0  7712           ja 0x19db00099414  <+0x11d4>
0x19db00099402  11c2  488b1537f2ffff REX.W movq rdx,[rip+0xfffff237]
0x19db00099409  11c9  4c8b1548eeffff REX.W movq r10,[rip+0xffffee48]
0x19db00099410  11d0  41ffd2         call r10
0x19db00099413  11d3  cc             int3l
0x19db00099414  11d4  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db0009941b  11db  0f8573390000   jnz 0x19db0009cd94  <+0x4b54>
0x19db00099421  11e1  4183fe03       cmpl r14,0x3
0x19db00099425  11e5  0f8708000000   ja 0x19db00099433  <+0x11f3>
0x19db0009942b  11eb  41c7410b08000000 movl [r9+0xb],0x8
0x19db00099433  11f3  4c8bc8         REX.W movq r9,rax
0x19db00099436  11f6  45894c2413     movl [r12+0x13],r9
0x19db0009943b  11fb  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db00099442  1202  4d21e3         REX.W andq r11,r12
0x19db00099445  1205  41f6430804     testb [r11+0x8],0x4
0x19db0009944a  120a  0f85055d0000   jnz 0x19db0009f155  <+0x6f15>
0x19db00099450  1210  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00099454  1214  8b460f         movl rax,[rsi+0xf]
0x19db00099457  1217  4903c5         REX.W addq rax,r13
0x19db0009945a  121a  8b5637         movl rdx,[rsi+0x37]
0x19db0009945d  121d  4903d5         REX.W addq rdx,r13
0x19db00099460  1220  ff75b8         push [rbp-0x48]
0x19db00099463  1223  ff75b8         push [rbp-0x48]
0x19db00099466  1226  ff75b8         push [rbp-0x48]
0x19db00099469  1229  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db00099470  1230  4151           push r9
0x19db00099472  1232  488945c8       REX.W movq [rbp-0x38],rax
0x19db00099476  1236  488bfa         REX.W movq rdi,rdx
0x19db00099479  1239  4c8bf0         REX.W movq r14,rax
0x19db0009947c  123c  b803000000     movl rax,0x3
0x19db00099481  1241  4c8be6         REX.W movq r12,rsi
0x19db00099484  1244  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009948e  124e  4c8b15b2f8ffff REX.W movq r10,[rip+0xfffff8b2]
0x19db00099495  1255  41ffd2         call r10
0x19db00099498  1258  f645c801       testb [rbp-0x38],0x1
0x19db0009949c  125c  0f84bb640000   jz 0x19db0009f95d  <+0x771d>
0x19db000994a2  1262  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db000994a8  1268  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db000994ac  126c  453941ff       cmpl [r9-0x1],r8
0x19db000994b0  1270  0f84be000000   jz 0x19db00099574  <+0x1334>
0x19db000994b6  1276  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db000994bc  127c  453959ff       cmpl [r9-0x1],r11
0x19db000994c0  1280  0f859e640000   jnz 0x19db0009f964  <+0x7724>
0x19db000994c6  1286  458b6107       movl r12,[r9+0x7]
0x19db000994ca  128a  4d03e5         REX.W addq r12,r13
0x19db000994cd  128d  458b710b       movl r14,[r9+0xb]
0x19db000994d1  1291  41d1fe         sarl r14, 1
0x19db000994d4  1294  418b542403     movl rdx,[r12+0x3]
0x19db000994d9  1299  d1fa           sarl rdx, 1
0x19db000994db  129b  458d7e01       leal r15,[r14+0x1]
0x19db000994df  129f  4c8b154bf1ffff REX.W movq r10,[rip+0xfffff14b]
0x19db000994e6  12a6  4d3bd7         REX.W cmpq r10,r15
0x19db000994e9  12a9  7712           ja 0x19db000994fd  <+0x12bd>
0x19db000994eb  12ab  488b154ef1ffff REX.W movq rdx,[rip+0xfffff14e]
0x19db000994f2  12b2  4c8b155fedffff REX.W movq r10,[rip+0xffffed5f]
0x19db000994f9  12b9  41ffd2         call r10
0x19db000994fc  12bc  cc             int3l
0x19db000994fd  12bd  4183ff04       cmpl r15,0x4
0x19db00099501  12c1  0f8664640000   jna 0x19db0009f96b  <+0x772b>
0x19db00099507  12c7  83fa04         cmpl rdx,0x4
0x19db0009950a  12ca  0f86b8380000   jna 0x19db0009cdc8  <+0x4b88>
0x19db00099510  12d0  418b5424ff     movl rdx,[r12-0x1]
0x19db00099515  12d5  4c8b1515f1ffff REX.W movq r10,[rip+0xfffff115]
0x19db0009951c  12dc  4c3bd2         REX.W cmpq r10,rdx
0x19db0009951f  12df  7712           ja 0x19db00099533  <+0x12f3>
0x19db00099521  12e1  488b1518f1ffff REX.W movq rdx,[rip+0xfffff118]
0x19db00099528  12e8  4c8b1529edffff REX.W movq r10,[rip+0xffffed29]
0x19db0009952f  12ef  41ffd2         call r10
0x19db00099532  12f2  cc             int3l
0x19db00099533  12f3  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db0009953a  12fa  0f85cf380000   jnz 0x19db0009ce0f  <+0x4bcf>
0x19db00099540  1300  4183fe04       cmpl r14,0x4
0x19db00099544  1304  0f8708000000   ja 0x19db00099552  <+0x1312>
0x19db0009954a  130a  41c7410b0a000000 movl [r9+0xb],0xa
0x19db00099552  1312  4c8bf0         REX.W movq r14,rax
0x19db00099555  1315  4589742417     movl [r12+0x17],r14
0x19db0009955a  131a  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db00099561  1321  4d21e1         REX.W andq r9,r12
0x19db00099564  1324  41f6410804     testb [r9+0x8],0x4
0x19db00099569  1329  0f85945b0000   jnz 0x19db0009f103  <+0x6ec3>
0x19db0009956f  132f  e9a9000000     jmp 0x19db0009961d  <+0x13dd>
0x19db00099574  1334  458b6107       movl r12,[r9+0x7]
0x19db00099578  1338  4d03e5         REX.W addq r12,r13
0x19db0009957b  133b  458b710b       movl r14,[r9+0xb]
0x19db0009957f  133f  41d1fe         sarl r14, 1
0x19db00099582  1342  418b542403     movl rdx,[r12+0x3]
0x19db00099587  1347  d1fa           sarl rdx, 1
0x19db00099589  1349  458d7e01       leal r15,[r14+0x1]
0x19db0009958d  134d  4c8b159df0ffff REX.W movq r10,[rip+0xfffff09d]
0x19db00099594  1354  4d3bd7         REX.W cmpq r10,r15
0x19db00099597  1357  7712           ja 0x19db000995ab  <+0x136b>
0x19db00099599  1359  488b15a0f0ffff REX.W movq rdx,[rip+0xfffff0a0]
0x19db000995a0  1360  4c8b15b1ecffff REX.W movq r10,[rip+0xffffecb1]
0x19db000995a7  1367  41ffd2         call r10
0x19db000995aa  136a  cc             int3l
0x19db000995ab  136b  4183ff04       cmpl r15,0x4
0x19db000995af  136f  0f86bd630000   jna 0x19db0009f972  <+0x7732>
0x19db000995b5  1375  83fa04         cmpl rdx,0x4
0x19db000995b8  1378  0f868b380000   jna 0x19db0009ce49  <+0x4c09>
0x19db000995be  137e  418b5424ff     movl rdx,[r12-0x1]
0x19db000995c3  1383  4c8b1567f0ffff REX.W movq r10,[rip+0xfffff067]
0x19db000995ca  138a  4c3bd2         REX.W cmpq r10,rdx
0x19db000995cd  138d  7712           ja 0x19db000995e1  <+0x13a1>
0x19db000995cf  138f  488b156af0ffff REX.W movq rdx,[rip+0xfffff06a]
0x19db000995d6  1396  4c8b157becffff REX.W movq r10,[rip+0xffffec7b]
0x19db000995dd  139d  41ffd2         call r10
0x19db000995e0  13a0  cc             int3l
0x19db000995e1  13a1  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db000995e8  13a8  0f859c380000   jnz 0x19db0009ce8a  <+0x4c4a>
0x19db000995ee  13ae  4183fe04       cmpl r14,0x4
0x19db000995f2  13b2  0f8708000000   ja 0x19db00099600  <+0x13c0>
0x19db000995f8  13b8  41c7410b0a000000 movl [r9+0xb],0xa
0x19db00099600  13c0  4c8bc8         REX.W movq r9,rax
0x19db00099603  13c3  45894c2417     movl [r12+0x17],r9
0x19db00099608  13c8  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009960f  13cf  4d21e3         REX.W andq r11,r12
0x19db00099612  13d2  41f6430804     testb [r11+0x8],0x4
0x19db00099617  13d7  0f85945a0000   jnz 0x19db0009f0b1  <+0x6e71>
0x19db0009961d  13dd  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00099621  13e1  8b460f         movl rax,[rsi+0xf]
0x19db00099624  13e4  4903c5         REX.W addq rax,r13
0x19db00099627  13e7  8b5637         movl rdx,[rsi+0x37]
0x19db0009962a  13ea  4903d5         REX.W addq rdx,r13
0x19db0009962d  13ed  ff75b8         push [rbp-0x48]
0x19db00099630  13f0  ff7518         push [rbp+0x18]
0x19db00099633  13f3  ff75b8         push [rbp-0x48]
0x19db00099636  13f6  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db0009963d  13fd  4151           push r9
0x19db0009963f  13ff  488945c8       REX.W movq [rbp-0x38],rax
0x19db00099643  1403  488bfa         REX.W movq rdi,rdx
0x19db00099646  1406  4c8bf0         REX.W movq r14,rax
0x19db00099649  1409  b803000000     movl rax,0x3
0x19db0009964e  140e  4c8be6         REX.W movq r12,rsi
0x19db00099651  1411  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009965b  141b  4c8b15e5f6ffff REX.W movq r10,[rip+0xfffff6e5]
0x19db00099662  1422  41ffd2         call r10
0x19db00099665  1425  f645c801       testb [rbp-0x38],0x1
0x19db00099669  1429  0f8411630000   jz 0x19db0009f980  <+0x7740>
0x19db0009966f  142f  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00099675  1435  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db00099679  1439  453941ff       cmpl [r9-0x1],r8
0x19db0009967d  143d  0f84be000000   jz 0x19db00099741  <+0x1501>
0x19db00099683  1443  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00099689  1449  453959ff       cmpl [r9-0x1],r11
0x19db0009968d  144d  0f85f4620000   jnz 0x19db0009f987  <+0x7747>
0x19db00099693  1453  458b6107       movl r12,[r9+0x7]
0x19db00099697  1457  4d03e5         REX.W addq r12,r13
0x19db0009969a  145a  458b710b       movl r14,[r9+0xb]
0x19db0009969e  145e  41d1fe         sarl r14, 1
0x19db000996a1  1461  418b542403     movl rdx,[r12+0x3]
0x19db000996a6  1466  d1fa           sarl rdx, 1
0x19db000996a8  1468  458d7e01       leal r15,[r14+0x1]
0x19db000996ac  146c  4c8b157eefffff REX.W movq r10,[rip+0xffffef7e]
0x19db000996b3  1473  4d3bd7         REX.W cmpq r10,r15
0x19db000996b6  1476  7712           ja 0x19db000996ca  <+0x148a>
0x19db000996b8  1478  488b1581efffff REX.W movq rdx,[rip+0xffffef81]
0x19db000996bf  147f  4c8b1592ebffff REX.W movq r10,[rip+0xffffeb92]
0x19db000996c6  1486  41ffd2         call r10
0x19db000996c9  1489  cc             int3l
0x19db000996ca  148a  4183ff05       cmpl r15,0x5
0x19db000996ce  148e  0f86ba620000   jna 0x19db0009f98e  <+0x774e>
0x19db000996d4  1494  83fa05         cmpl rdx,0x5
0x19db000996d7  1497  0f86e1370000   jna 0x19db0009cebe  <+0x4c7e>
0x19db000996dd  149d  418b5424ff     movl rdx,[r12-0x1]
0x19db000996e2  14a2  4c8b1548efffff REX.W movq r10,[rip+0xffffef48]
0x19db000996e9  14a9  4c3bd2         REX.W cmpq r10,rdx
0x19db000996ec  14ac  7712           ja 0x19db00099700  <+0x14c0>
0x19db000996ee  14ae  488b154befffff REX.W movq rdx,[rip+0xffffef4b]
0x19db000996f5  14b5  4c8b155cebffff REX.W movq r10,[rip+0xffffeb5c]
0x19db000996fc  14bc  41ffd2         call r10
0x19db000996ff  14bf  cc             int3l
0x19db00099700  14c0  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db00099707  14c7  0f85f8370000   jnz 0x19db0009cf05  <+0x4cc5>
0x19db0009970d  14cd  4183fe05       cmpl r14,0x5
0x19db00099711  14d1  0f8708000000   ja 0x19db0009971f  <+0x14df>
0x19db00099717  14d7  41c7410b0c000000 movl [r9+0xb],0xc
0x19db0009971f  14df  4c8bf0         REX.W movq r14,rax
0x19db00099722  14e2  458974241b     movl [r12+0x1b],r14
0x19db00099727  14e7  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009972e  14ee  4d21e1         REX.W andq r9,r12
0x19db00099731  14f1  41f6410804     testb [r9+0x8],0x4
0x19db00099736  14f6  0f8523590000   jnz 0x19db0009f05f  <+0x6e1f>
0x19db0009973c  14fc  e9a9000000     jmp 0x19db000997ea  <+0x15aa>
0x19db00099741  1501  458b6107       movl r12,[r9+0x7]
0x19db00099745  1505  4d03e5         REX.W addq r12,r13
0x19db00099748  1508  458b710b       movl r14,[r9+0xb]
0x19db0009974c  150c  41d1fe         sarl r14, 1
0x19db0009974f  150f  418b542403     movl rdx,[r12+0x3]
0x19db00099754  1514  d1fa           sarl rdx, 1
0x19db00099756  1516  458d7e01       leal r15,[r14+0x1]
0x19db0009975a  151a  4c8b15d0eeffff REX.W movq r10,[rip+0xffffeed0]
0x19db00099761  1521  4d3bd7         REX.W cmpq r10,r15
0x19db00099764  1524  7712           ja 0x19db00099778  <+0x1538>
0x19db00099766  1526  488b15d3eeffff REX.W movq rdx,[rip+0xffffeed3]
0x19db0009976d  152d  4c8b15e4eaffff REX.W movq r10,[rip+0xffffeae4]
0x19db00099774  1534  41ffd2         call r10
0x19db00099777  1537  cc             int3l
0x19db00099778  1538  4183ff05       cmpl r15,0x5
0x19db0009977c  153c  0f8613620000   jna 0x19db0009f995  <+0x7755>
0x19db00099782  1542  83fa05         cmpl rdx,0x5
0x19db00099785  1545  0f86b4370000   jna 0x19db0009cf3f  <+0x4cff>
0x19db0009978b  154b  418b5424ff     movl rdx,[r12-0x1]
0x19db00099790  1550  4c8b159aeeffff REX.W movq r10,[rip+0xffffee9a]
0x19db00099797  1557  4c3bd2         REX.W cmpq r10,rdx
0x19db0009979a  155a  7712           ja 0x19db000997ae  <+0x156e>
0x19db0009979c  155c  488b159deeffff REX.W movq rdx,[rip+0xffffee9d]
0x19db000997a3  1563  4c8b15aeeaffff REX.W movq r10,[rip+0xffffeaae]
0x19db000997aa  156a  41ffd2         call r10
0x19db000997ad  156d  cc             int3l
0x19db000997ae  156e  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db000997b5  1575  0f85c5370000   jnz 0x19db0009cf80  <+0x4d40>
0x19db000997bb  157b  4183fe05       cmpl r14,0x5
0x19db000997bf  157f  0f8708000000   ja 0x19db000997cd  <+0x158d>
0x19db000997c5  1585  41c7410b0c000000 movl [r9+0xb],0xc
0x19db000997cd  158d  4c8bc8         REX.W movq r9,rax
0x19db000997d0  1590  45894c241b     movl [r12+0x1b],r9
0x19db000997d5  1595  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db000997dc  159c  4d21e3         REX.W andq r11,r12
0x19db000997df  159f  41f6430804     testb [r11+0x8],0x4
0x19db000997e4  15a4  0f8523580000   jnz 0x19db0009f00d  <+0x6dcd>
0x19db000997ea  15aa  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db000997ee  15ae  8b460f         movl rax,[rsi+0xf]
0x19db000997f1  15b1  4903c5         REX.W addq rax,r13
0x19db000997f4  15b4  8b5637         movl rdx,[rsi+0x37]
0x19db000997f7  15b7  4903d5         REX.W addq rdx,r13
0x19db000997fa  15ba  ff75b8         push [rbp-0x48]
0x19db000997fd  15bd  ff7518         push [rbp+0x18]
0x19db00099800  15c0  ff7518         push [rbp+0x18]
0x19db00099803  15c3  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db0009980a  15ca  4151           push r9
0x19db0009980c  15cc  488945c8       REX.W movq [rbp-0x38],rax
0x19db00099810  15d0  488bfa         REX.W movq rdi,rdx
0x19db00099813  15d3  4c8bf0         REX.W movq r14,rax
0x19db00099816  15d6  b803000000     movl rax,0x3
0x19db0009981b  15db  4c8be6         REX.W movq r12,rsi
0x19db0009981e  15de  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00099828  15e8  4c8b1518f5ffff REX.W movq r10,[rip+0xfffff518]
0x19db0009982f  15ef  41ffd2         call r10
0x19db00099832  15f2  f645c801       testb [rbp-0x38],0x1
0x19db00099836  15f6  0f8467610000   jz 0x19db0009f9a3  <+0x7763>
0x19db0009983c  15fc  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00099842  1602  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db00099846  1606  453941ff       cmpl [r9-0x1],r8
0x19db0009984a  160a  0f84be000000   jz 0x19db0009990e  <+0x16ce>
0x19db00099850  1610  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00099856  1616  453959ff       cmpl [r9-0x1],r11
0x19db0009985a  161a  0f854a610000   jnz 0x19db0009f9aa  <+0x776a>
0x19db00099860  1620  458b6107       movl r12,[r9+0x7]
0x19db00099864  1624  4d03e5         REX.W addq r12,r13
0x19db00099867  1627  458b710b       movl r14,[r9+0xb]
0x19db0009986b  162b  41d1fe         sarl r14, 1
0x19db0009986e  162e  418b542403     movl rdx,[r12+0x3]
0x19db00099873  1633  d1fa           sarl rdx, 1
0x19db00099875  1635  458d7e01       leal r15,[r14+0x1]
0x19db00099879  1639  4c8b15b1edffff REX.W movq r10,[rip+0xffffedb1]
0x19db00099880  1640  4d3bd7         REX.W cmpq r10,r15
0x19db00099883  1643  7712           ja 0x19db00099897  <+0x1657>
0x19db00099885  1645  488b15b4edffff REX.W movq rdx,[rip+0xffffedb4]
0x19db0009988c  164c  4c8b15c5e9ffff REX.W movq r10,[rip+0xffffe9c5]
0x19db00099893  1653  41ffd2         call r10
0x19db00099896  1656  cc             int3l
0x19db00099897  1657  4183ff06       cmpl r15,0x6
0x19db0009989b  165b  0f8610610000   jna 0x19db0009f9b1  <+0x7771>
0x19db000998a1  1661  83fa06         cmpl rdx,0x6
0x19db000998a4  1664  0f860a370000   jna 0x19db0009cfb4  <+0x4d74>
0x19db000998aa  166a  418b5424ff     movl rdx,[r12-0x1]
0x19db000998af  166f  4c8b157bedffff REX.W movq r10,[rip+0xffffed7b]
0x19db000998b6  1676  4c3bd2         REX.W cmpq r10,rdx
0x19db000998b9  1679  7712           ja 0x19db000998cd  <+0x168d>
0x19db000998bb  167b  488b157eedffff REX.W movq rdx,[rip+0xffffed7e]
0x19db000998c2  1682  4c8b158fe9ffff REX.W movq r10,[rip+0xffffe98f]
0x19db000998c9  1689  41ffd2         call r10
0x19db000998cc  168c  cc             int3l
0x19db000998cd  168d  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db000998d4  1694  0f8521370000   jnz 0x19db0009cffb  <+0x4dbb>
0x19db000998da  169a  4183fe06       cmpl r14,0x6
0x19db000998de  169e  0f8708000000   ja 0x19db000998ec  <+0x16ac>
0x19db000998e4  16a4  41c7410b0e000000 movl [r9+0xb],0xe
0x19db000998ec  16ac  4c8bf0         REX.W movq r14,rax
0x19db000998ef  16af  458974241f     movl [r12+0x1f],r14
0x19db000998f4  16b4  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db000998fb  16bb  4d21e1         REX.W andq r9,r12
0x19db000998fe  16be  41f6410804     testb [r9+0x8],0x4
0x19db00099903  16c3  0f85b2560000   jnz 0x19db0009efbb  <+0x6d7b>
0x19db00099909  16c9  e9a9000000     jmp 0x19db000999b7  <+0x1777>
0x19db0009990e  16ce  458b6107       movl r12,[r9+0x7]
0x19db00099912  16d2  4d03e5         REX.W addq r12,r13
0x19db00099915  16d5  458b710b       movl r14,[r9+0xb]
0x19db00099919  16d9  41d1fe         sarl r14, 1
0x19db0009991c  16dc  418b542403     movl rdx,[r12+0x3]
0x19db00099921  16e1  d1fa           sarl rdx, 1
0x19db00099923  16e3  458d7e01       leal r15,[r14+0x1]
0x19db00099927  16e7  4c8b1503edffff REX.W movq r10,[rip+0xffffed03]
0x19db0009992e  16ee  4d3bd7         REX.W cmpq r10,r15
0x19db00099931  16f1  7712           ja 0x19db00099945  <+0x1705>
0x19db00099933  16f3  488b1506edffff REX.W movq rdx,[rip+0xffffed06]
0x19db0009993a  16fa  4c8b1517e9ffff REX.W movq r10,[rip+0xffffe917]
0x19db00099941  1701  41ffd2         call r10
0x19db00099944  1704  cc             int3l
0x19db00099945  1705  4183ff06       cmpl r15,0x6
0x19db00099949  1709  0f8669600000   jna 0x19db0009f9b8  <+0x7778>
0x19db0009994f  170f  83fa06         cmpl rdx,0x6
0x19db00099952  1712  0f86dd360000   jna 0x19db0009d035  <+0x4df5>
0x19db00099958  1718  418b5424ff     movl rdx,[r12-0x1]
0x19db0009995d  171d  4c8b15cdecffff REX.W movq r10,[rip+0xffffeccd]
0x19db00099964  1724  4c3bd2         REX.W cmpq r10,rdx
0x19db00099967  1727  7712           ja 0x19db0009997b  <+0x173b>
0x19db00099969  1729  488b15d0ecffff REX.W movq rdx,[rip+0xffffecd0]
0x19db00099970  1730  4c8b15e1e8ffff REX.W movq r10,[rip+0xffffe8e1]
0x19db00099977  1737  41ffd2         call r10
0x19db0009997a  173a  cc             int3l
0x19db0009997b  173b  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db00099982  1742  0f85ee360000   jnz 0x19db0009d076  <+0x4e36>
0x19db00099988  1748  4183fe06       cmpl r14,0x6
0x19db0009998c  174c  0f8708000000   ja 0x19db0009999a  <+0x175a>
0x19db00099992  1752  41c7410b0e000000 movl [r9+0xb],0xe
0x19db0009999a  175a  4c8bc8         REX.W movq r9,rax
0x19db0009999d  175d  45894c241f     movl [r12+0x1f],r9
0x19db000999a2  1762  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db000999a9  1769  4d21e3         REX.W andq r11,r12
0x19db000999ac  176c  41f6430804     testb [r11+0x8],0x4
0x19db000999b1  1771  0f85b2550000   jnz 0x19db0009ef69  <+0x6d29>
0x19db000999b7  1777  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db000999bb  177b  8b460f         movl rax,[rsi+0xf]
0x19db000999be  177e  4903c5         REX.W addq rax,r13
0x19db000999c1  1781  8b5637         movl rdx,[rsi+0x37]
0x19db000999c4  1784  4903d5         REX.W addq rdx,r13
0x19db000999c7  1787  ff75b8         push [rbp-0x48]
0x19db000999ca  178a  ff75b8         push [rbp-0x48]
0x19db000999cd  178d  ff7518         push [rbp+0x18]
0x19db000999d0  1790  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db000999d7  1797  4151           push r9
0x19db000999d9  1799  488945c8       REX.W movq [rbp-0x38],rax
0x19db000999dd  179d  488bfa         REX.W movq rdi,rdx
0x19db000999e0  17a0  4c8bf0         REX.W movq r14,rax
0x19db000999e3  17a3  b803000000     movl rax,0x3
0x19db000999e8  17a8  4c8be6         REX.W movq r12,rsi
0x19db000999eb  17ab  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db000999f5  17b5  4c8b154bf3ffff REX.W movq r10,[rip+0xfffff34b]
0x19db000999fc  17bc  41ffd2         call r10
0x19db000999ff  17bf  f645c801       testb [rbp-0x38],0x1
0x19db00099a03  17c3  0f84bd5f0000   jz 0x19db0009f9c6  <+0x7786>
0x19db00099a09  17c9  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00099a0f  17cf  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db00099a13  17d3  453941ff       cmpl [r9-0x1],r8
0x19db00099a17  17d7  0f84be000000   jz 0x19db00099adb  <+0x189b>
0x19db00099a1d  17dd  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00099a23  17e3  453959ff       cmpl [r9-0x1],r11
0x19db00099a27  17e7  0f85a05f0000   jnz 0x19db0009f9cd  <+0x778d>
0x19db00099a2d  17ed  458b6107       movl r12,[r9+0x7]
0x19db00099a31  17f1  4d03e5         REX.W addq r12,r13
0x19db00099a34  17f4  458b710b       movl r14,[r9+0xb]
0x19db00099a38  17f8  41d1fe         sarl r14, 1
0x19db00099a3b  17fb  418b542403     movl rdx,[r12+0x3]
0x19db00099a40  1800  d1fa           sarl rdx, 1
0x19db00099a42  1802  458d7e01       leal r15,[r14+0x1]
0x19db00099a46  1806  4c8b15e4ebffff REX.W movq r10,[rip+0xffffebe4]
0x19db00099a4d  180d  4d3bd7         REX.W cmpq r10,r15
0x19db00099a50  1810  7712           ja 0x19db00099a64  <+0x1824>
0x19db00099a52  1812  488b15e7ebffff REX.W movq rdx,[rip+0xffffebe7]
0x19db00099a59  1819  4c8b15f8e7ffff REX.W movq r10,[rip+0xffffe7f8]
0x19db00099a60  1820  41ffd2         call r10
0x19db00099a63  1823  cc             int3l
0x19db00099a64  1824  4183ff07       cmpl r15,0x7
0x19db00099a68  1828  0f86665f0000   jna 0x19db0009f9d4  <+0x7794>
0x19db00099a6e  182e  83fa07         cmpl rdx,0x7
0x19db00099a71  1831  0f8633360000   jna 0x19db0009d0aa  <+0x4e6a>
0x19db00099a77  1837  418b5424ff     movl rdx,[r12-0x1]
0x19db00099a7c  183c  4c8b15aeebffff REX.W movq r10,[rip+0xffffebae]
0x19db00099a83  1843  4c3bd2         REX.W cmpq r10,rdx
0x19db00099a86  1846  7712           ja 0x19db00099a9a  <+0x185a>
0x19db00099a88  1848  488b15b1ebffff REX.W movq rdx,[rip+0xffffebb1]
0x19db00099a8f  184f  4c8b15c2e7ffff REX.W movq r10,[rip+0xffffe7c2]
0x19db00099a96  1856  41ffd2         call r10
0x19db00099a99  1859  cc             int3l
0x19db00099a9a  185a  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db00099aa1  1861  0f854a360000   jnz 0x19db0009d0f1  <+0x4eb1>
0x19db00099aa7  1867  4183fe07       cmpl r14,0x7
0x19db00099aab  186b  0f8708000000   ja 0x19db00099ab9  <+0x1879>
0x19db00099ab1  1871  41c7410b10000000 movl [r9+0xb],0x10
0x19db00099ab9  1879  4c8bf0         REX.W movq r14,rax
0x19db00099abc  187c  4589742423     movl [r12+0x23],r14
0x19db00099ac1  1881  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db00099ac8  1888  4d21e1         REX.W andq r9,r12
0x19db00099acb  188b  41f6410804     testb [r9+0x8],0x4
0x19db00099ad0  1890  0f8541540000   jnz 0x19db0009ef17  <+0x6cd7>
0x19db00099ad6  1896  e9a9000000     jmp 0x19db00099b84  <+0x1944>
0x19db00099adb  189b  458b6107       movl r12,[r9+0x7]
0x19db00099adf  189f  4d03e5         REX.W addq r12,r13
0x19db00099ae2  18a2  458b710b       movl r14,[r9+0xb]
0x19db00099ae6  18a6  41d1fe         sarl r14, 1
0x19db00099ae9  18a9  418b542403     movl rdx,[r12+0x3]
0x19db00099aee  18ae  d1fa           sarl rdx, 1
0x19db00099af0  18b0  458d7e01       leal r15,[r14+0x1]
0x19db00099af4  18b4  4c8b1536ebffff REX.W movq r10,[rip+0xffffeb36]
0x19db00099afb  18bb  4d3bd7         REX.W cmpq r10,r15
0x19db00099afe  18be  7712           ja 0x19db00099b12  <+0x18d2>
0x19db00099b00  18c0  488b1539ebffff REX.W movq rdx,[rip+0xffffeb39]
0x19db00099b07  18c7  4c8b154ae7ffff REX.W movq r10,[rip+0xffffe74a]
0x19db00099b0e  18ce  41ffd2         call r10
0x19db00099b11  18d1  cc             int3l
0x19db00099b12  18d2  4183ff07       cmpl r15,0x7
0x19db00099b16  18d6  0f86bf5e0000   jna 0x19db0009f9db  <+0x779b>
0x19db00099b1c  18dc  83fa07         cmpl rdx,0x7
0x19db00099b1f  18df  0f8606360000   jna 0x19db0009d12b  <+0x4eeb>
0x19db00099b25  18e5  418b5424ff     movl rdx,[r12-0x1]
0x19db00099b2a  18ea  4c8b1500ebffff REX.W movq r10,[rip+0xffffeb00]
0x19db00099b31  18f1  4c3bd2         REX.W cmpq r10,rdx
0x19db00099b34  18f4  7712           ja 0x19db00099b48  <+0x1908>
0x19db00099b36  18f6  488b1503ebffff REX.W movq rdx,[rip+0xffffeb03]
0x19db00099b3d  18fd  4c8b1514e7ffff REX.W movq r10,[rip+0xffffe714]
0x19db00099b44  1904  41ffd2         call r10
0x19db00099b47  1907  cc             int3l
0x19db00099b48  1908  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db00099b4f  190f  0f8517360000   jnz 0x19db0009d16c  <+0x4f2c>
0x19db00099b55  1915  4183fe07       cmpl r14,0x7
0x19db00099b59  1919  0f8708000000   ja 0x19db00099b67  <+0x1927>
0x19db00099b5f  191f  41c7410b10000000 movl [r9+0xb],0x10
0x19db00099b67  1927  4c8bc8         REX.W movq r9,rax
0x19db00099b6a  192a  45894c2423     movl [r12+0x23],r9
0x19db00099b6f  192f  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db00099b76  1936  4d21e3         REX.W andq r11,r12
0x19db00099b79  1939  41f6430804     testb [r11+0x8],0x4
0x19db00099b7e  193e  0f8541530000   jnz 0x19db0009eec5  <+0x6c85>
0x19db00099b84  1944  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00099b88  1948  8b460f         movl rax,[rsi+0xf]
0x19db00099b8b  194b  4903c5         REX.W addq rax,r13
0x19db00099b8e  194e  8b5637         movl rdx,[rsi+0x37]
0x19db00099b91  1951  4903d5         REX.W addq rdx,r13
0x19db00099b94  1954  6a00           push 0x0
0x19db00099b96  1956  6a00           push 0x0
0x19db00099b98  1958  6a00           push 0x0
0x19db00099b9a  195a  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db00099ba1  1961  4151           push r9
0x19db00099ba3  1963  488945c8       REX.W movq [rbp-0x38],rax
0x19db00099ba7  1967  488bfa         REX.W movq rdi,rdx
0x19db00099baa  196a  4c8be0         REX.W movq r12,rax
0x19db00099bad  196d  b803000000     movl rax,0x3
0x19db00099bb2  1972  4c8bce         REX.W movq r9,rsi
0x19db00099bb5  1975  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db00099bbf  197f  4c8b1581f1ffff REX.W movq r10,[rip+0xfffff181]
0x19db00099bc6  1986  41ffd2         call r10
0x19db00099bc9  1989  f645c801       testb [rbp-0x38],0x1
0x19db00099bcd  198d  0f84165e0000   jz 0x19db0009f9e9  <+0x77a9>
0x19db00099bd3  1993  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db00099bd9  1999  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db00099bdd  199d  453941ff       cmpl [r9-0x1],r8
0x19db00099be1  19a1  0f84be000000   jz 0x19db00099ca5  <+0x1a65>
0x19db00099be7  19a7  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00099bed  19ad  453959ff       cmpl [r9-0x1],r11
0x19db00099bf1  19b1  0f85f95d0000   jnz 0x19db0009f9f0  <+0x77b0>
0x19db00099bf7  19b7  458b6107       movl r12,[r9+0x7]
0x19db00099bfb  19bb  4d03e5         REX.W addq r12,r13
0x19db00099bfe  19be  458b710b       movl r14,[r9+0xb]
0x19db00099c02  19c2  41d1fe         sarl r14, 1
0x19db00099c05  19c5  418b542403     movl rdx,[r12+0x3]
0x19db00099c0a  19ca  d1fa           sarl rdx, 1
0x19db00099c0c  19cc  458d7e01       leal r15,[r14+0x1]
0x19db00099c10  19d0  4c8b151aeaffff REX.W movq r10,[rip+0xffffea1a]
0x19db00099c17  19d7  4d3bd7         REX.W cmpq r10,r15
0x19db00099c1a  19da  7712           ja 0x19db00099c2e  <+0x19ee>
0x19db00099c1c  19dc  488b151deaffff REX.W movq rdx,[rip+0xffffea1d]
0x19db00099c23  19e3  4c8b152ee6ffff REX.W movq r10,[rip+0xffffe62e]
0x19db00099c2a  19ea  41ffd2         call r10
0x19db00099c2d  19ed  cc             int3l
0x19db00099c2e  19ee  4183ff08       cmpl r15,0x8
0x19db00099c32  19f2  0f86bf5d0000   jna 0x19db0009f9f7  <+0x77b7>
0x19db00099c38  19f8  83fa08         cmpl rdx,0x8
0x19db00099c3b  19fb  0f865f350000   jna 0x19db0009d1a0  <+0x4f60>
0x19db00099c41  1a01  418b5424ff     movl rdx,[r12-0x1]
0x19db00099c46  1a06  4c8b15e4e9ffff REX.W movq r10,[rip+0xffffe9e4]
0x19db00099c4d  1a0d  4c3bd2         REX.W cmpq r10,rdx
0x19db00099c50  1a10  7712           ja 0x19db00099c64  <+0x1a24>
0x19db00099c52  1a12  488b15e7e9ffff REX.W movq rdx,[rip+0xffffe9e7]
0x19db00099c59  1a19  4c8b15f8e5ffff REX.W movq r10,[rip+0xffffe5f8]
0x19db00099c60  1a20  41ffd2         call r10
0x19db00099c63  1a23  cc             int3l
0x19db00099c64  1a24  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db00099c6b  1a2b  0f8576350000   jnz 0x19db0009d1e7  <+0x4fa7>
0x19db00099c71  1a31  4183fe08       cmpl r14,0x8
0x19db00099c75  1a35  0f8708000000   ja 0x19db00099c83  <+0x1a43>
0x19db00099c7b  1a3b  41c7410b12000000 movl [r9+0xb],0x12
0x19db00099c83  1a43  4c8bf0         REX.W movq r14,rax
0x19db00099c86  1a46  4589742427     movl [r12+0x27],r14
0x19db00099c8b  1a4b  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db00099c92  1a52  4d21e1         REX.W andq r9,r12
0x19db00099c95  1a55  41f6410804     testb [r9+0x8],0x4
0x19db00099c9a  1a5a  0f85d3510000   jnz 0x19db0009ee73  <+0x6c33>
0x19db00099ca0  1a60  e9af000000     jmp 0x19db00099d54  <+0x1b14>
0x19db00099ca5  1a65  458b6107       movl r12,[r9+0x7]
0x19db00099ca9  1a69  4d03e5         REX.W addq r12,r13
0x19db00099cac  1a6c  458b710b       movl r14,[r9+0xb]
0x19db00099cb0  1a70  41d1fe         sarl r14, 1
0x19db00099cb3  1a73  418b542403     movl rdx,[r12+0x3]
0x19db00099cb8  1a78  d1fa           sarl rdx, 1
0x19db00099cba  1a7a  458d7e01       leal r15,[r14+0x1]
0x19db00099cbe  1a7e  4c8b156ce9ffff REX.W movq r10,[rip+0xffffe96c]
0x19db00099cc5  1a85  4d3bd7         REX.W cmpq r10,r15
0x19db00099cc8  1a88  7712           ja 0x19db00099cdc  <+0x1a9c>
0x19db00099cca  1a8a  488b156fe9ffff REX.W movq rdx,[rip+0xffffe96f]
0x19db00099cd1  1a91  4c8b1580e5ffff REX.W movq r10,[rip+0xffffe580]
0x19db00099cd8  1a98  41ffd2         call r10
0x19db00099cdb  1a9b  cc             int3l
0x19db00099cdc  1a9c  4183ff08       cmpl r15,0x8
0x19db00099ce0  1aa0  0f86185d0000   jna 0x19db0009f9fe  <+0x77be>
0x19db00099ce6  1aa6  83fa08         cmpl rdx,0x8
0x19db00099ce9  1aa9  0f8632350000   jna 0x19db0009d221  <+0x4fe1>
0x19db00099cef  1aaf  418b5424ff     movl rdx,[r12-0x1]
0x19db00099cf4  1ab4  4c8b1536e9ffff REX.W movq r10,[rip+0xffffe936]
0x19db00099cfb  1abb  4c3bd2         REX.W cmpq r10,rdx
0x19db00099cfe  1abe  7712           ja 0x19db00099d12  <+0x1ad2>
0x19db00099d00  1ac0  488b1539e9ffff REX.W movq rdx,[rip+0xffffe939]
0x19db00099d07  1ac7  4c8b154ae5ffff REX.W movq r10,[rip+0xffffe54a]
0x19db00099d0e  1ace  41ffd2         call r10
0x19db00099d11  1ad1  cc             int3l
0x19db00099d12  1ad2  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db00099d19  1ad9  0f8543350000   jnz 0x19db0009d262  <+0x5022>
0x19db00099d1f  1adf  4183fe08       cmpl r14,0x8
0x19db00099d23  1ae3  0f8708000000   ja 0x19db00099d31  <+0x1af1>
0x19db00099d29  1ae9  41c7410b12000000 movl [r9+0xb],0x12
0x19db00099d31  1af1  4c8bc8         REX.W movq r9,rax
0x19db00099d34  1af4  45894c2427     movl [r12+0x27],r9
0x19db00099d39  1af9  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db00099d40  1b00  4d21e3         REX.W andq r11,r12
0x19db00099d43  1b03  41f6430804     testb [r11+0x8],0x4
0x19db00099d48  1b08  0f85d3500000   jnz 0x19db0009ee21  <+0x6be1>
0x19db00099d4e  1b0e  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db00099d54  1b14  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db00099d58  1b18  448b4e0f       movl r9,[rsi+0xf]
0x19db00099d5c  1b1c  4d03cd         REX.W addq r9,r13
0x19db00099d5f  1b1f  4c8b2544e5ffff REX.W movq r12,[rip+0xffffe544]
0x19db00099d66  1b26  4d8b3424       REX.W movq r14,[r12]
0x19db00099d6a  1b2a  4d8dbea4000000 REX.W leaq r15,[r14+0xa4]
0x19db00099d71  1b31  4c894dd0       REX.W movq [rbp-0x30],r9
0x19db00099d75  1b35  488b053fe5ffff REX.W movq rax,[rip+0xffffe53f]
0x19db00099d7c  1b3c  4c3938         REX.W cmpq [rax],r15
0x19db00099d7f  1b3f  0f8611350000   jna 0x19db0009d296  <+0x5056>
0x19db00099d85  1b45  4d8d7e10       REX.W leaq r15,[r14+0x10]
0x19db00099d89  1b49  4d893c24       REX.W movq [r12],r15
0x19db00099d8d  1b4d  4983c601       REX.W addq r14,0x1
0x19db00099d91  1b51  bbb59e3008     movl rbx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db00099d96  1b56  41895eff       movl [r14-0x1],rbx
0x19db00099d9a  1b5a  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db00099da1  1b61  41895603       movl [r14+0x3],rdx
0x19db00099da5  1b65  b95d472f08     movl rcx,0x82f475d      ;; (compressed) object: 0x19db082f475d <FixedArray[3]>
0x19db00099daa  1b6a  41894e07       movl [r14+0x7],rcx
0x19db00099dae  1b6e  41c7460b06000000 movl [r14+0xb],0x6
0x19db00099db6  1b76  498d4f10       REX.W leaq rcx,[r15+0x10]
0x19db00099dba  1b7a  49890c24       REX.W movq [r12],rcx
0x19db00099dbe  1b7e  4983c701       REX.W addq r15,0x1
0x19db00099dc2  1b82  41895fff       movl [r15-0x1],rbx
0x19db00099dc6  1b86  41895703       movl [r15+0x3],rdx
0x19db00099dca  1b8a  bf7d472f08     movl rdi,0x82f477d      ;; (compressed) object: 0x19db082f477d <FixedArray[3]>
0x19db00099dcf  1b8f  41897f07       movl [r15+0x7],rdi
0x19db00099dd3  1b93  41c7470b06000000 movl [r15+0xb],0x6
0x19db00099ddb  1b9b  488d7910       REX.W leaq rdi,[rcx+0x10]
0x19db00099ddf  1b9f  49893c24       REX.W movq [r12],rdi
0x19db00099de3  1ba3  4883c101       REX.W addq rcx,0x1
0x19db00099de7  1ba7  8959ff         movl [rcx-0x1],rbx
0x19db00099dea  1baa  895103         movl [rcx+0x3],rdx
0x19db00099ded  1bad  be9d472f08     movl rsi,0x82f479d      ;; (compressed) object: 0x19db082f479d <FixedArray[3]>
0x19db00099df2  1bb2  897107         movl [rcx+0x7],rsi
0x19db00099df5  1bb5  c7410b06000000 movl [rcx+0xb],0x6
0x19db00099dfc  1bbc  488d7710       REX.W leaq rsi,[rdi+0x10]
0x19db00099e00  1bc0  49893424       REX.W movq [r12],rsi
0x19db00099e04  1bc4  4883c701       REX.W addq rdi,0x1
0x19db00099e08  1bc8  895fff         movl [rdi-0x1],rbx
0x19db00099e0b  1bcb  895703         movl [rdi+0x3],rdx
0x19db00099e0e  1bce  b8bd472f08     movl rax,0x82f47bd      ;; (compressed) object: 0x19db082f47bd <FixedArray[3]>
0x19db00099e13  1bd3  894707         movl [rdi+0x7],rax
0x19db00099e16  1bd6  c7470b06000000 movl [rdi+0xb],0x6
0x19db00099e1d  1bdd  488d4610       REX.W leaq rax,[rsi+0x10]
0x19db00099e21  1be1  49890424       REX.W movq [r12],rax
0x19db00099e25  1be5  4883c601       REX.W addq rsi,0x1
0x19db00099e29  1be9  895eff         movl [rsi-0x1],rbx
0x19db00099e2c  1bec  895603         movl [rsi+0x3],rdx
0x19db00099e2f  1bef  41b9dd472f08   movl r9,0x82f47dd       ;; (compressed) object: 0x19db082f47dd <FixedArray[3]>
0x19db00099e35  1bf5  44894e07       movl [rsi+0x7],r9
0x19db00099e39  1bf9  c7460b06000000 movl [rsi+0xb],0x6
0x19db00099e40  1c00  4c8d4810       REX.W leaq r9,[rax+0x10]
0x19db00099e44  1c04  4d890c24       REX.W movq [r12],r9
0x19db00099e48  1c08  4883c001       REX.W addq rax,0x1
0x19db00099e4c  1c0c  8958ff         movl [rax-0x1],rbx
0x19db00099e4f  1c0f  895003         movl [rax+0x3],rdx
0x19db00099e52  1c12  bafd472f08     movl rdx,0x82f47fd      ;; (compressed) object: 0x19db082f47fd <FixedArray[3]>
0x19db00099e57  1c17  895007         movl [rax+0x7],rdx
0x19db00099e5a  1c1a  c7400b06000000 movl [rax+0xb],0x6
0x19db00099e61  1c21  498d5120       REX.W leaq rdx,[r9+0x20]
0x19db00099e65  1c25  49891424       REX.W movq [r12],rdx
0x19db00099e69  1c29  4983c101       REX.W addq r9,0x1
0x19db00099e6d  1c2d  498b9dd0000000 REX.W movq rbx,[r13+0xd0] (root (fixed_array_map))
0x19db00099e74  1c34  418959ff       movl [r9-0x1],rbx
0x19db00099e78  1c38  41c741030c000000 movl [r9+0x3],0xc
0x19db00099e80  1c40  45897107       movl [r9+0x7],r14
0x19db00099e84  1c44  4589790b       movl [r9+0xb],r15
0x19db00099e88  1c48  4189490f       movl [r9+0xf],rcx
0x19db00099e8c  1c4c  41897913       movl [r9+0x13],rdi
0x19db00099e90  1c50  41897117       movl [r9+0x17],rsi
0x19db00099e94  1c54  4189411b       movl [r9+0x1b],rax
0x19db00099e98  1c58  4c8d7210       REX.W leaq r14,[rdx+0x10]
0x19db00099e9c  1c5c  4d893424       REX.W movq [r12],r14
0x19db00099ea0  1c60  4c8d7a01       REX.W leaq r15,[rdx+0x1]
0x19db00099ea4  1c64  458947ff       movl [r15-0x1],r8
0x19db00099ea8  1c68  498b8558010000 REX.W movq rax,[r13+0x158] (root (empty_fixed_array))
0x19db00099eaf  1c6f  41894703       movl [r15+0x3],rax
0x19db00099eb3  1c73  45894f07       movl [r15+0x7],r9
0x19db00099eb7  1c77  41c7470b0c000000 movl [r15+0xb],0xc
0x19db00099ebf  1c7f  f645d001       testb [rbp-0x30],0x1
0x19db00099ec3  1c83  0f843c5b0000   jz 0x19db0009fa05  <+0x77c5>
0x19db00099ec9  1c89  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db00099ecd  1c8d  453959ff       cmpl [r9-0x1],r11
0x19db00099ed1  1c91  0f84b7000000   jz 0x19db00099f8e  <+0x1d4e>
0x19db00099ed7  1c97  453941ff       cmpl [r9-0x1],r8
0x19db00099edb  1c9b  0f852b5b0000   jnz 0x19db0009fa0c  <+0x77cc>
0x19db00099ee1  1ca1  418b5103       movl rdx,[r9+0x3]
0x19db00099ee5  1ca5  4903d5         REX.W addq rdx,r13
0x19db00099ee8  1ca8  f6c201         testb rdx,0x1
0x19db00099eeb  1cab  0f8402000000   jz 0x19db00099ef3  <+0x1cb3>
0x19db00099ef1  1cb1  33d2           xorl rdx,rdx
0x19db00099ef3  1cb3  f6c201         testb rdx,0x1
0x19db00099ef6  1cb6  0f85c5330000   jnz 0x19db0009d2c1  <+0x5081>
0x19db00099efc  1cbc  d1fa           sarl rdx, 1
0x19db00099efe  1cbe  498d4e14       REX.W leaq rcx,[r14+0x14]
0x19db00099f02  1cc2  c1e20a         shll rdx, 10
0x19db00099f05  1cc5  49890c24       REX.W movq [r12],rcx
0x19db00099f09  1cc9  4983c601       REX.W addq r14,0x1
0x19db00099f0d  1ccd  83ca03         orl rdx,0x3
0x19db00099f10  1cd0  d1e2           shll rdx, 1
0x19db00099f12  1cd2  4c8b1518e7ffff REX.W movq r10,[rip+0xffffe718]
0x19db00099f19  1cd9  4c3bd2         REX.W cmpq r10,rdx
0x19db00099f1c  1cdc  7712           ja 0x19db00099f30  <+0x1cf0>
0x19db00099f1e  1cde  488b151be7ffff REX.W movq rdx,[rip+0xffffe71b]
0x19db00099f25  1ce5  4c8b152ce3ffff REX.W movq r10,[rip+0xffffe32c]
0x19db00099f2c  1cec  41ffd2         call r10
0x19db00099f2f  1cef  cc             int3l
0x19db00099f30  1cf0  498b8d38020000 REX.W movq rcx,[r13+0x238] (root (property_array_map))
0x19db00099f37  1cf7  41894eff       movl [r14-0x1],rcx
0x19db00099f3b  1cfb  41895603       movl [r14+0x3],rdx
0x19db00099f3f  1cff  498b9590000000 REX.W movq rdx,[r13+0x90] (root (undefined_value))
0x19db00099f46  1d06  4189560b       movl [r14+0xb],rdx
0x19db00099f4a  1d0a  4189560f       movl [r14+0xf],rdx
0x19db00099f4e  1d0e  45897e07       movl [r14+0x7],r15
0x19db00099f52  1d12  41bfcddb3008   movl r15,0x830dbcd      ;; (compressed) object: 0x19db0830dbcd <Map(PACKED_ELEMENTS)>
0x19db00099f58  1d18  458979ff       movl [r9-0x1],r15
0x19db00099f5c  1d1c  48c7c20000fcff REX.W movq rdx,0xfffc0000
0x19db00099f63  1d23  4923d1         REX.W andq rdx,r9
0x19db00099f66  1d26  f6420804       testb [rdx+0x8],0x4
0x19db00099f6a  1d2a  0f856a4e0000   jnz 0x19db0009edda  <+0x6b9a>
0x19db00099f70  1d30  45897103       movl [r9+0x3],r14
0x19db00099f74  1d34  49c7c70000fcff REX.W movq r15,0xfffc0000
0x19db00099f7b  1d3b  4d23f9         REX.W andq r15,r9
0x19db00099f7e  1d3e  41f6470804     testb [r15+0x8],0x4
0x19db00099f83  1d43  0f850a4e0000   jnz 0x19db0009ed93  <+0x6b53>
0x19db00099f89  1d49  e91f000000     jmp 0x19db00099fad  <+0x1d6d>
0x19db00099f8e  1d4e  458b7103       movl r14,[r9+0x3]
0x19db00099f92  1d52  4d03f5         REX.W addq r14,r13
0x19db00099f95  1d55  45897e07       movl [r14+0x7],r15
0x19db00099f99  1d59  48c7c20000fcff REX.W movq rdx,0xfffc0000
0x19db00099fa0  1d60  4923d6         REX.W andq rdx,r14
0x19db00099fa3  1d63  f6420804       testb [rdx+0x8],0x4
0x19db00099fa7  1d67  0f85a04d0000   jnz 0x19db0009ed4d  <+0x6b0d>
0x19db00099fad  1d6d  4d8b3424       REX.W movq r14,[r12]
0x19db00099fb1  1d71  4d8d7e28       REX.W leaq r15,[r14+0x28]
0x19db00099fb5  1d75  488b15ffe2ffff REX.W movq rdx,[rip+0xffffe2ff]
0x19db00099fbc  1d7c  4c393a         REX.W cmpq [rdx],r15
0x19db00099fbf  1d7f  0f860a330000   jna 0x19db0009d2cf  <+0x508f>
0x19db00099fc5  1d85  4d8d7e18       REX.W leaq r15,[r14+0x18]
0x19db00099fc9  1d89  4d893c24       REX.W movq [r12],r15
0x19db00099fcd  1d8d  4983c601       REX.W addq r14,0x1
0x19db00099fd1  1d91  41895eff       movl [r14-0x1],rbx
0x19db00099fd5  1d95  41c7460308000000 movl [r14+0x3],0x8
0x19db00099fdd  1d9d  498b8d98000000 REX.W movq rcx,[r13+0x98] (root (the_hole_value))
0x19db00099fe4  1da4  41894e07       movl [r14+0x7],rcx
0x19db00099fe8  1da8  41894e0b       movl [r14+0xb],rcx
0x19db00099fec  1dac  41894e0f       movl [r14+0xf],rcx
0x19db00099ff0  1db0  41894e13       movl [r14+0x13],rcx
0x19db00099ff4  1db4  498d7710       REX.W leaq rsi,[r15+0x10]
0x19db00099ff8  1db8  49893424       REX.W movq [r12],rsi
0x19db00099ffc  1dbc  4983c701       REX.W addq r15,0x1
0x19db0009a000  1dc0  458947ff       movl [r15-0x1],r8
0x19db0009a004  1dc4  41894703       movl [r15+0x3],rax
0x19db0009a008  1dc8  45897707       movl [r15+0x7],r14
0x19db0009a00c  1dcc  41c7470b00000000 movl [r15+0xb],0x0
0x19db0009a014  1dd4  453959ff       cmpl [r9-0x1],r11
0x19db0009a018  1dd8  0f8452000000   jz 0x19db0009a070  <+0x1e30>
0x19db0009a01e  1dde  41becddb3008   movl r14,0x830dbcd      ;; (compressed) object: 0x19db0830dbcd <Map(PACKED_ELEMENTS)>
0x19db0009a024  1de4  453971ff       cmpl [r9-0x1],r14
0x19db0009a028  1de8  0f85e5590000   jnz 0x19db0009fa13  <+0x77d3>
0x19db0009a02e  1dee  458b7103       movl r14,[r9+0x3]
0x19db0009a032  1df2  4d03f5         REX.W addq r14,r13
0x19db0009a035  1df5  bef5db3008     movl rsi,0x830dbf5      ;; (compressed) object: 0x19db0830dbf5 <Map(PACKED_ELEMENTS)>
0x19db0009a03a  1dfa  418971ff       movl [r9-0x1],rsi
0x19db0009a03e  1dfe  48c7c70000fcff REX.W movq rdi,0xfffc0000
0x19db0009a045  1e05  4923f9         REX.W andq rdi,r9
0x19db0009a048  1e08  f6470804       testb [rdi+0x8],0x4
0x19db0009a04c  1e0c  0f85b54c0000   jnz 0x19db0009ed07  <+0x6ac7>
0x19db0009a052  1e12  45897e0b       movl [r14+0xb],r15
0x19db0009a056  1e16  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009a05d  1e1d  4d23ce         REX.W andq r9,r14
0x19db0009a060  1e20  41f6410804     testb [r9+0x8],0x4
0x19db0009a065  1e25  0f85554c0000   jnz 0x19db0009ecc0  <+0x6a80>
0x19db0009a06b  1e2b  e920000000     jmp 0x19db0009a090  <+0x1e50>
0x19db0009a070  1e30  458b4903       movl r9,[r9+0x3]
0x19db0009a074  1e34  4d03cd         REX.W addq r9,r13
0x19db0009a077  1e37  4589790b       movl [r9+0xb],r15
0x19db0009a07b  1e3b  49c7c60000fcff REX.W movq r14,0xfffc0000
0x19db0009a082  1e42  4d23f1         REX.W andq r14,r9
0x19db0009a085  1e45  41f6460804     testb [r14+0x8],0x4
0x19db0009a08a  1e4a  0f85ec4b0000   jnz 0x19db0009ec7c  <+0x6a3c>
0x19db0009a090  1e50  f6c101         testb rcx,0x1
0x19db0009a093  1e53  0f8580320000   jnz 0x19db0009d319  <+0x50d9>
0x19db0009a099  1e59  4c8bc9         REX.W movq r9,rcx
0x19db0009a09c  1e5c  41d1f9         sarl r9, 1
0x19db0009a09f  1e5f  c4c1032ac1     vcvtlsi2sd xmm0,xmm15,r9
0x19db0009a0a4  1e64  c5fb118540ffffff vmovsd [rbp-0xc0],xmm0
0x19db0009a0ac  1e6c  48c745a800000000 REX.W movq [rbp-0x58],0x0
0x19db0009a0b4  1e74  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0009a0b8  1e78  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0009a0bd  1e7d  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0009a0c2  1e82  e924000000     jmp 0x19db0009a0eb  <+0x1eab>
0x19db0009a0c7  1e87  660f1f840000000000 nop
0x19db0009a0d0  1e90  488955a8       REX.W movq [rbp-0x58],rdx
0x19db0009a0d4  1e94  498b8d98000000 REX.W movq rcx,[r13+0x98] (root (the_hole_value))
0x19db0009a0db  1e9b  488b15d9e1ffff REX.W movq rdx,[rip+0xffffe1d9]
0x19db0009a0e2  1ea2  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009a0e8  1ea8  4d8bc1         REX.W movq r8,r9
0x19db0009a0eb  1eab  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009a0ef  1eaf  448b660f       movl r12,[rsi+0xf]
0x19db0009a0f3  1eb3  4d03e5         REX.W addq r12,r13
0x19db0009a0f6  1eb6  41f6c401       testb r12,0x1
0x19db0009a0fa  1eba  0f841a590000   jz 0x19db0009fa1a  <+0x77da>
0x19db0009a100  1ec0  418b4424ff     movl rax,[r12-0x1]
0x19db0009a105  1ec5  4c8b1525e5ffff REX.W movq r10,[rip+0xffffe525]
0x19db0009a10c  1ecc  4c3bd0         REX.W cmpq r10,rax
0x19db0009a10f  1ecf  7712           ja 0x19db0009a123  <+0x1ee3>
0x19db0009a111  1ed1  488b1528e5ffff REX.W movq rdx,[rip+0xffffe528]
0x19db0009a118  1ed8  4c8b1539e1ffff REX.W movq r10,[rip+0xffffe139]
0x19db0009a11f  1edf  41ffd2         call r10
0x19db0009a122  1ee2  cc             int3l
0x19db0009a123  1ee3  41b9b59e3008   movl r9,0x8309eb5       ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009a129  1ee9  498bbdd8010000 REX.W movq rdi,[r13+0x1d8] (root (fixed_double_array_map))
0x19db0009a130  1ef0  413bc3         cmpl rax,r11
0x19db0009a133  1ef3  0f840f000000   jz 0x19db0009a148  <+0x1f08>
0x19db0009a139  1ef9  41bbf5db3008   movl r11,0x830dbf5      ;; (compressed) object: 0x19db0830dbf5 <Map(PACKED_ELEMENTS)>
0x19db0009a13f  1eff  443bd8         cmpl r11,rax
0x19db0009a142  1f02  0f85d9580000   jnz 0x19db0009fa21  <+0x77e1>
0x19db0009a148  1f08  418b442403     movl rax,[r12+0x3]
0x19db0009a14d  1f0d  4903c5         REX.W addq rax,r13
0x19db0009a150  1f10  448b7007       movl r14,[rax+0x7]
0x19db0009a154  1f14  4d03f5         REX.W addq r14,r13
0x19db0009a157  1f17  41f6c601       testb r14,0x1
0x19db0009a15b  1f1b  0f84c7580000   jz 0x19db0009fa28  <+0x77e8>
0x19db0009a161  1f21  453946ff       cmpl [r14-0x1],r8
0x19db0009a165  1f25  0f85c4580000   jnz 0x19db0009fa2f  <+0x77ef>
0x19db0009a16b  1f2b  458b460b       movl r8,[r14+0xb]
0x19db0009a16f  1f2f  41d1f8         sarl r8, 1
0x19db0009a172  1f32  4c8b5da8       REX.W movq r11,[rbp-0x58]
0x19db0009a176  1f36  453bd8         cmpl r11,r8
0x19db0009a179  1f39  0f83640b0000   jnc 0x19db0009ace3  <+0x2aa3>
0x19db0009a17f  1f3f  8b400b         movl rax,[rax+0xb]
0x19db0009a182  1f42  4903c5         REX.W addq rax,r13
0x19db0009a185  1f45  448b4633       movl r8,[rsi+0x33]
0x19db0009a189  1f49  4d03c5         REX.W addq r8,r13
0x19db0009a18c  1f4c  458b7607       movl r14,[r14+0x7]
0x19db0009a190  1f50  4d03f5         REX.W addq r14,r13
0x19db0009a193  1f53  4c8945a0       REX.W movq [rbp-0x60],r8
0x19db0009a197  1f57  4e8d049d07000000 REX.W leaq r8,[r11*4+0x7]
0x19db0009a19f  1f5f  4c8945b8       REX.W movq [rbp-0x48],r8
0x19db0009a1a3  1f63  478b449e07     movl r8,[r14+r11*4+0x7]
0x19db0009a1a8  1f68  4d03c5         REX.W addq r8,r13
0x19db0009a1ab  1f6b  41f6c001       testb r8,0x1
0x19db0009a1af  1f6f  0f8481580000   jz 0x19db0009fa36  <+0x77f6>
0x19db0009a1b5  1f75  453948ff       cmpl [r8-0x1],r9
0x19db0009a1b9  1f79  0f857e580000   jnz 0x19db0009fa3d  <+0x77fd>
0x19db0009a1bf  1f7f  458b7007       movl r14,[r8+0x7]
0x19db0009a1c3  1f83  4d03f5         REX.W addq r14,r13
0x19db0009a1c6  1f86  458b400b       movl r8,[r8+0xb]
0x19db0009a1ca  1f8a  41d1f8         sarl r8, 1
0x19db0009a1cd  1f8d  4183f800       cmpl r8,0x0
0x19db0009a1d1  1f91  0f866d580000   jna 0x19db0009fa44  <+0x7804>
0x19db0009a1d7  1f97  458b4607       movl r8,[r14+0x7]
0x19db0009a1db  1f9b  458b4c2407     movl r9,[r12+0x7]
0x19db0009a1e0  1fa0  4d03cd         REX.W addq r9,r13
0x19db0009a1e3  1fa3  488945b0       REX.W movq [rbp-0x50],rax
0x19db0009a1e7  1fa7  418b44240b     movl rax,[r12+0xb]
0x19db0009a1ec  1fac  4d8bf0         REX.W movq r14,r8
0x19db0009a1ef  1faf  41d1fe         sarl r14, 1
0x19db0009a1f2  1fb2  443bc0         cmpl r8,rax
0x19db0009a1f5  1fb5  0f8350580000   jnc 0x19db0009fa4b  <+0x780b>
0x19db0009a1fb  1fbb  478b44b107     movl r8,[r9+r14*4+0x7]
0x19db0009a200  1fc0  4d03c5         REX.W addq r8,r13
0x19db0009a203  1fc3  b8b8000000     movl rax,0xb8
0x19db0009a208  1fc8  4c8be2         REX.W movq r12,rdx
0x19db0009a20b  1fcb  498bd0         REX.W movq rdx,r8
0x19db0009a20e  1fce  4c8bf1         REX.W movq r14,rcx
0x19db0009a211  1fd1  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0009a21b  1fdb  4c8bc6         REX.W movq r8,rsi
0x19db0009a21e  1fde  4c8b4db0       REX.W movq r9,[rbp-0x50]
0x19db0009a222  1fe2  49bac00acdf5ff7f0000 REX.W movq r10,0x7ffff5cd0ac0  (LoadICTrampoline_Megamorphic)    ;; off heap target
0x19db0009a22c  1fec  41ffd2         call r10
0x19db0009a22f  1fef  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009a233  1ff3  448b460f       movl r8,[rsi+0xf]
0x19db0009a237  1ff7  4d03c5         REX.W addq r8,r13
0x19db0009a23a  1ffa  48894598       REX.W movq [rbp-0x68],rax
0x19db0009a23e  1ffe  41f6c001       testb r8,0x1
0x19db0009a242  2002  0f8411580000   jz 0x19db0009fa59  <+0x7819>
0x19db0009a248  2008  458b48ff       movl r9,[r8-0x1]
0x19db0009a24c  200c  4c8b15dee3ffff REX.W movq r10,[rip+0xffffe3de]
0x19db0009a253  2013  4d3bd1         REX.W cmpq r10,r9
0x19db0009a256  2016  7712           ja 0x19db0009a26a  <+0x202a>
0x19db0009a258  2018  488b15e1e3ffff REX.W movq rdx,[rip+0xffffe3e1]
0x19db0009a25f  201f  4c8b15f2dfffff REX.W movq r10,[rip+0xffffdff2]
0x19db0009a266  2026  41ffd2         call r10
0x19db0009a269  2029  cc             int3l
0x19db0009a26a  202a  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009a270  2030  453bcb         cmpl r9,r11
0x19db0009a273  2033  0f840f000000   jz 0x19db0009a288  <+0x2048>
0x19db0009a279  2039  41bcf5db3008   movl r12,0x830dbf5      ;; (compressed) object: 0x19db0830dbf5 <Map(PACKED_ELEMENTS)>
0x19db0009a27f  203f  453be1         cmpl r12,r9
0x19db0009a282  2042  0f85d8570000   jnz 0x19db0009fa60  <+0x7820>
0x19db0009a288  2048  458b4803       movl r9,[r8+0x3]
0x19db0009a28c  204c  4d03cd         REX.W addq r9,r13
0x19db0009a28f  204f  458b4907       movl r9,[r9+0x7]
0x19db0009a293  2053  4d03cd         REX.W addq r9,r13
0x19db0009a296  2056  41f6c101       testb r9,0x1
0x19db0009a29a  205a  0f84c7570000   jz 0x19db0009fa67  <+0x7827>
0x19db0009a2a0  2060  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009a2a6  2066  453961ff       cmpl [r9-0x1],r12
0x19db0009a2aa  206a  0f85be570000   jnz 0x19db0009fa6e  <+0x782e>
0x19db0009a2b0  2070  458b7107       movl r14,[r9+0x7]
0x19db0009a2b4  2074  4d03f5         REX.W addq r14,r13
0x19db0009a2b7  2077  458b490b       movl r9,[r9+0xb]
0x19db0009a2bb  207b  41d1f9         sarl r9, 1
0x19db0009a2be  207e  4c8b7da8       REX.W movq r15,[rbp-0x58]
0x19db0009a2c2  2082  453bf9         cmpl r15,r9
0x19db0009a2c5  2085  0f83aa570000   jnc 0x19db0009fa75  <+0x7835>
0x19db0009a2cb  208b  478b4cbe07     movl r9,[r14+r15*4+0x7]
0x19db0009a2d0  2090  4d03cd         REX.W addq r9,r13
0x19db0009a2d3  2093  41f6c101       testb r9,0x1
0x19db0009a2d7  2097  0f849f570000   jz 0x19db0009fa7c  <+0x783c>
0x19db0009a2dd  209d  41beb59e3008   movl r14,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009a2e3  20a3  453971ff       cmpl [r9-0x1],r14
0x19db0009a2e7  20a7  0f8596570000   jnz 0x19db0009fa83  <+0x7843>
0x19db0009a2ed  20ad  418b4107       movl rax,[r9+0x7]
0x19db0009a2f1  20b1  4903c5         REX.W addq rax,r13
0x19db0009a2f4  20b4  458b490b       movl r9,[r9+0xb]
0x19db0009a2f8  20b8  41d1f9         sarl r9, 1
0x19db0009a2fb  20bb  4183f901       cmpl r9,0x1
0x19db0009a2ff  20bf  0f8685570000   jna 0x19db0009fa8a  <+0x784a>
0x19db0009a305  20c5  448b480b       movl r9,[rax+0xb]
0x19db0009a309  20c9  418b4007       movl rax,[r8+0x7]
0x19db0009a30d  20cd  4903c5         REX.W addq rax,r13
0x19db0009a310  20d0  418b500b       movl rdx,[r8+0xb]
0x19db0009a314  20d4  498bd9         REX.W movq rbx,r9
0x19db0009a317  20d7  d1fb           sarl rbx, 1
0x19db0009a319  20d9  443bca         cmpl r9,rdx
0x19db0009a31c  20dc  0f836f570000   jnc 0x19db0009fa91  <+0x7851>
0x19db0009a322  20e2  8b549807       movl rdx,[rax+rbx*4+0x7]
0x19db0009a326  20e6  4903d5         REX.W addq rdx,r13
0x19db0009a329  20e9  b8c8000000     movl rax,0xc8
0x19db0009a32e  20ee  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0009a338  20f8  4c8bc6         REX.W movq r8,rsi
0x19db0009a33b  20fb  4c8b15e2feffff REX.W movq r10,[rip+0xfffffee2]
0x19db0009a342  2102  41ffd2         call r10
0x19db0009a345  2105  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009a349  2109  448b460f       movl r8,[rsi+0xf]
0x19db0009a34d  210d  4d03c5         REX.W addq r8,r13
0x19db0009a350  2110  48894590       REX.W movq [rbp-0x70],rax
0x19db0009a354  2114  41f6c001       testb r8,0x1
0x19db0009a358  2118  0f8441570000   jz 0x19db0009fa9f  <+0x785f>
0x19db0009a35e  211e  458b48ff       movl r9,[r8-0x1]
0x19db0009a362  2122  4c8b15c8e2ffff REX.W movq r10,[rip+0xffffe2c8]
0x19db0009a369  2129  4d3bd1         REX.W cmpq r10,r9
0x19db0009a36c  212c  7712           ja 0x19db0009a380  <+0x2140>
0x19db0009a36e  212e  488b15cbe2ffff REX.W movq rdx,[rip+0xffffe2cb]
0x19db0009a375  2135  4c8b15dcdeffff REX.W movq r10,[rip+0xffffdedc]
0x19db0009a37c  213c  41ffd2         call r10
0x19db0009a37f  213f  cc             int3l
0x19db0009a380  2140  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009a386  2146  453bcb         cmpl r9,r11
0x19db0009a389  2149  0f840f000000   jz 0x19db0009a39e  <+0x215e>
0x19db0009a38f  214f  41bcf5db3008   movl r12,0x830dbf5      ;; (compressed) object: 0x19db0830dbf5 <Map(PACKED_ELEMENTS)>
0x19db0009a395  2155  453be1         cmpl r12,r9
0x19db0009a398  2158  0f8508570000   jnz 0x19db0009faa6  <+0x7866>
0x19db0009a39e  215e  458b4803       movl r9,[r8+0x3]
0x19db0009a3a2  2162  4d03cd         REX.W addq r9,r13
0x19db0009a3a5  2165  458b4907       movl r9,[r9+0x7]
0x19db0009a3a9  2169  4d03cd         REX.W addq r9,r13
0x19db0009a3ac  216c  41f6c101       testb r9,0x1
0x19db0009a3b0  2170  0f84f7560000   jz 0x19db0009faad  <+0x786d>
0x19db0009a3b6  2176  41bca59f3008   movl r12,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009a3bc  217c  453961ff       cmpl [r9-0x1],r12
0x19db0009a3c0  2180  0f85ee560000   jnz 0x19db0009fab4  <+0x7874>
0x19db0009a3c6  2186  458b7107       movl r14,[r9+0x7]
0x19db0009a3ca  218a  4d03f5         REX.W addq r14,r13
0x19db0009a3cd  218d  458b490b       movl r9,[r9+0xb]
0x19db0009a3d1  2191  41d1f9         sarl r9, 1
0x19db0009a3d4  2194  4c8b7da8       REX.W movq r15,[rbp-0x58]
0x19db0009a3d8  2198  453bf9         cmpl r15,r9
0x19db0009a3db  219b  0f83da560000   jnc 0x19db0009fabb  <+0x787b>
0x19db0009a3e1  21a1  478b4cbe07     movl r9,[r14+r15*4+0x7]
0x19db0009a3e6  21a6  4d03cd         REX.W addq r9,r13
0x19db0009a3e9  21a9  41f6c101       testb r9,0x1
0x19db0009a3ed  21ad  0f84cf560000   jz 0x19db0009fac2  <+0x7882>
0x19db0009a3f3  21b3  41beb59e3008   movl r14,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009a3f9  21b9  453971ff       cmpl [r9-0x1],r14
0x19db0009a3fd  21bd  0f85c6560000   jnz 0x19db0009fac9  <+0x7889>
0x19db0009a403  21c3  418b4107       movl rax,[r9+0x7]
0x19db0009a407  21c7  4903c5         REX.W addq rax,r13
0x19db0009a40a  21ca  458b490b       movl r9,[r9+0xb]
0x19db0009a40e  21ce  41d1f9         sarl r9, 1
0x19db0009a411  21d1  4183f902       cmpl r9,0x2
0x19db0009a415  21d5  0f86b5560000   jna 0x19db0009fad0  <+0x7890>
0x19db0009a41b  21db  448b480f       movl r9,[rax+0xf]
0x19db0009a41f  21df  418b4007       movl rax,[r8+0x7]
0x19db0009a423  21e3  4903c5         REX.W addq rax,r13
0x19db0009a426  21e6  418b500b       movl rdx,[r8+0xb]
0x19db0009a42a  21ea  498bd9         REX.W movq rbx,r9
0x19db0009a42d  21ed  d1fb           sarl rbx, 1
0x19db0009a42f  21ef  443bca         cmpl r9,rdx
0x19db0009a432  21f2  0f839f560000   jnc 0x19db0009fad7  <+0x7897>
0x19db0009a438  21f8  8b549807       movl rdx,[rax+rbx*4+0x7]
0x19db0009a43c  21fc  4903d5         REX.W addq rdx,r13
0x19db0009a43f  21ff  b8d8000000     movl rax,0xd8
0x19db0009a444  2204  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0009a44e  220e  4c8bc6         REX.W movq r8,rsi
0x19db0009a451  2211  4c8b15ccfdffff REX.W movq r10,[rip+0xfffffdcc]
0x19db0009a458  2218  41ffd2         call r10
0x19db0009a45b  221b  f645a001       testb [rbp-0x60],0x1
0x19db0009a45f  221f  0f8480560000   jz 0x19db0009fae5  <+0x78a5>
0x19db0009a465  2225  4c8b45a0       REX.W movq r8,[rbp-0x60]
0x19db0009a469  2229  458b48ff       movl r9,[r8-0x1]
0x19db0009a46d  222d  4d03cd         REX.W addq r9,r13
0x19db0009a470  2230  66418179072c04 cmpw [r9+0x7],0x42c
0x19db0009a477  2237  0f856f560000   jnz 0x19db0009faec  <+0x78ac>
0x19db0009a47d  223d  458b4813       movl r9,[r8+0x13]
0x19db0009a481  2241  4d03cd         REX.W addq r9,r13
0x19db0009a484  2244  49bbb9422f08db190000 REX.W movq r11,0x19db082f42b9    ;; object: 0x19db082f42b9 <FeedbackCell[many closures]>
0x19db0009a48e  224e  4d3bd9         REX.W cmpq r11,r9
0x19db0009a491  2251  0f855c560000   jnz 0x19db0009faf3  <+0x78b3>
0x19db0009a497  2257  458b480f       movl r9,[r8+0xf]
0x19db0009a49b  225b  4d03cd         REX.W addq r9,r13
0x19db0009a49e  225e  4c8b1d05deffff REX.W movq r11,[rip+0xffffde05]
0x19db0009a4a5  2265  4d8b23         REX.W movq r12,[r11]
0x19db0009a4a8  2268  498d542450     REX.W leaq rdx,[r12+0x50]
0x19db0009a4ad  226d  48894588       REX.W movq [rbp-0x78],rax
0x19db0009a4b1  2271  4c894d80       REX.W movq [rbp-0x80],r9
0x19db0009a4b5  2275  4c8b35ffddffff REX.W movq r14,[rip+0xffffddff]
0x19db0009a4bc  227c  493916         REX.W cmpq [r14],rdx
0x19db0009a4bf  227f  0f865e2e0000   jna 0x19db0009d323  <+0x50e3>
0x19db0009a4c5  2285  498d542418     REX.W leaq rdx,[r12+0x18]
0x19db0009a4ca  228a  498913         REX.W movq [r11],rdx
0x19db0009a4cd  228d  4983c401       REX.W addq r12,0x1
0x19db0009a4d1  2291  4d89e7         REX.W movq r15,r12
0x19db0009a4d4  2294  498b9dd0000000 REX.W movq rbx,[r13+0xd0] (root (fixed_array_map))
0x19db0009a4db  229b  41895fff       movl [r15-0x1],rbx
0x19db0009a4df  229f  41c7470308000000 movl [r15+0x3],0x8
0x19db0009a4e7  22a7  4d8ba598000000 REX.W movq r12,[r13+0x98] (root (the_hole_value))
0x19db0009a4ee  22ae  45896707       movl [r15+0x7],r12
0x19db0009a4f2  22b2  4589670b       movl [r15+0xb],r12
0x19db0009a4f6  22b6  4589670f       movl [r15+0xf],r12
0x19db0009a4fa  22ba  45896713       movl [r15+0x13],r12
0x19db0009a4fe  22be  488d4a10       REX.W leaq rcx,[rdx+0x10]
0x19db0009a502  22c2  49890b         REX.W movq [r11],rcx
0x19db0009a505  22c5  4883c201       REX.W addq rdx,0x1
0x19db0009a509  22c9  beb59e3008     movl rsi,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009a50e  22ce  8972ff         movl [rdx-0x1],rsi
0x19db0009a511  22d1  498bbd58010000 REX.W movq rdi,[r13+0x158] (root (empty_fixed_array))
0x19db0009a518  22d8  897a03         movl [rdx+0x3],rdi
0x19db0009a51b  22db  44897a07       movl [rdx+0x7],r15
0x19db0009a51f  22df  c7420b00000000 movl [rdx+0xb],0x0
0x19db0009a526  22e6  4c8d4118       REX.W leaq r8,[rcx+0x18]
0x19db0009a52a  22ea  4d8903         REX.W movq [r11],r8
0x19db0009a52d  22ed  4883c101       REX.W addq rcx,0x1
0x19db0009a531  22f1  8959ff         movl [rcx-0x1],rbx
0x19db0009a534  22f4  c7410308000000 movl [rcx+0x3],0x8
0x19db0009a53b  22fb  44896107       movl [rcx+0x7],r12
0x19db0009a53f  22ff  4489610b       movl [rcx+0xb],r12
0x19db0009a543  2303  4489610f       movl [rcx+0xf],r12
0x19db0009a547  2307  44896113       movl [rcx+0x13],r12
0x19db0009a54b  230b  4d8d6010       REX.W leaq r12,[r8+0x10]
0x19db0009a54f  230f  4d8923         REX.W movq [r11],r12
0x19db0009a552  2312  4983c001       REX.W addq r8,0x1
0x19db0009a556  2316  418970ff       movl [r8-0x1],rsi
0x19db0009a55a  231a  41897803       movl [r8+0x3],rdi
0x19db0009a55e  231e  41894807       movl [r8+0x7],rcx
0x19db0009a562  2322  41c7400b00000000 movl [r8+0xb],0x0
0x19db0009a56a  232a  4c8b6598       REX.W movq r12,[rbp-0x68]
0x19db0009a56e  232e  41f6c401       testb r12,0x1
0x19db0009a572  2332  0f8482550000   jz 0x19db0009fafa  <+0x78ba>
0x19db0009a578  2338  41397424ff     cmpl [r12-0x1],rsi
0x19db0009a57d  233d  0f857e550000   jnz 0x19db0009fb01  <+0x78c1>
0x19db0009a583  2343  458b4c2407     movl r9,[r12+0x7]
0x19db0009a588  2348  4d03cd         REX.W addq r9,r13
0x19db0009a58b  234b  48894dd0       REX.W movq [rbp-0x30],rcx
0x19db0009a58f  234f  418b4c240b     movl rcx,[r12+0xb]
0x19db0009a594  2354  d1f9           sarl rcx, 1
0x19db0009a596  2356  83f900         cmpl rcx,0x0
0x19db0009a599  2359  0f8669550000   jna 0x19db0009fb08  <+0x78c8>
0x19db0009a59f  235f  458b4907       movl r9,[r9+0x7]
0x19db0009a5a3  2363  488b4d90       REX.W movq rcx,[rbp-0x70]
0x19db0009a5a7  2367  f6c101         testb rcx,0x1
0x19db0009a5aa  236a  0f845f550000   jz 0x19db0009fb0f  <+0x78cf>
0x19db0009a5b0  2370  3971ff         cmpl [rcx-0x1],rsi
0x19db0009a5b3  2373  0f855d550000   jnz 0x19db0009fb16  <+0x78d6>
0x19db0009a5b9  2379  8b7907         movl rdi,[rcx+0x7]
0x19db0009a5bc  237c  4903fd         REX.W addq rdi,r13
0x19db0009a5bf  237f  448b710b       movl r14,[rcx+0xb]
0x19db0009a5c3  2383  41d1fe         sarl r14, 1
0x19db0009a5c6  2386  4183fe00       cmpl r14,0x0
0x19db0009a5ca  238a  0f864d550000   jna 0x19db0009fb1d  <+0x78dd>
0x19db0009a5d0  2390  448b7707       movl r14,[rdi+0x7]
0x19db0009a5d4  2394  41d1fe         sarl r14, 1
0x19db0009a5d7  2397  41d1f9         sarl r9, 1
0x19db0009a5da  239a  452bce         subl r9,r14
0x19db0009a5dd  239d  4d8bf1         REX.W movq r14,r9
0x19db0009a5e0  23a0  4503f1         addl r14,r9
0x19db0009a5e3  23a3  0f803b550000   jo 0x19db0009fb24  <+0x78e4>
0x19db0009a5e9  23a9  c7420b02000000 movl [rdx+0xb],0x2
0x19db0009a5f0  23b0  45897707       movl [r15+0x7],r14
0x19db0009a5f4  23b4  a801           test al,0x1
0x19db0009a5f6  23b6  0f842f550000   jz 0x19db0009fb2b  <+0x78eb>
0x19db0009a5fc  23bc  3970ff         cmpl [rax-0x1],rsi
0x19db0009a5ff  23bf  0f852d550000   jnz 0x19db0009fb32  <+0x78f2>
0x19db0009a605  23c5  448b4807       movl r9,[rax+0x7]
0x19db0009a609  23c9  4d03cd         REX.W addq r9,r13
0x19db0009a60c  23cc  448b700b       movl r14,[rax+0xb]
0x19db0009a610  23d0  41d1fe         sarl r14, 1
0x19db0009a613  23d3  4183fe00       cmpl r14,0x0
0x19db0009a617  23d7  0f861c550000   jna 0x19db0009fb39  <+0x78f9>
0x19db0009a61d  23dd  458b4907       movl r9,[r9+0x7]
0x19db0009a621  23e1  448b710b       movl r14,[rcx+0xb]
0x19db0009a625  23e5  41d1fe         sarl r14, 1
0x19db0009a628  23e8  4183fe00       cmpl r14,0x0
0x19db0009a62c  23ec  0f860e550000   jna 0x19db0009fb40  <+0x7900>
0x19db0009a632  23f2  448b7707       movl r14,[rdi+0x7]
0x19db0009a636  23f6  41d1fe         sarl r14, 1
0x19db0009a639  23f9  41d1f9         sarl r9, 1
0x19db0009a63c  23fc  452bce         subl r9,r14
0x19db0009a63f  23ff  4d8bf1         REX.W movq r14,r9
0x19db0009a642  2402  4503f1         addl r14,r9
0x19db0009a645  2405  0f80fc540000   jo 0x19db0009fb47  <+0x7907>
0x19db0009a64b  240b  41c7400b02000000 movl [r8+0xb],0x2
0x19db0009a653  2413  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db0009a657  2417  45897107       movl [r9+0x7],r14
0x19db0009a65b  241b  48899570ffffff REX.W movq [rbp-0x90],rdx
0x19db0009a662  2422  4c898568ffffff REX.W movq [rbp-0x98],r8
0x19db0009a669  2429  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009a66d  242d  0f86d32c0000   jna 0x19db0009d346  <+0x5106>
0x19db0009a673  2433  41b901000000   movl r9,0x1
0x19db0009a679  2439  4c8bf0         REX.W movq r14,rax
0x19db0009a67c  243c  e91a000000     jmp 0x19db0009a69b  <+0x245b>
0x19db0009a681  2441  660f1f840000000000 nop
0x19db0009a68a  244a  660f1f440000   nop
0x19db0009a690  2450  4d8bc8         REX.W movq r9,r8
0x19db0009a693  2453  4c8b6598       REX.W movq r12,[rbp-0x68]
0x19db0009a697  2457  4c8b7588       REX.W movq r14,[rbp-0x78]
0x19db0009a69b  245b  4183f903       cmpl r9,0x3
0x19db0009a69f  245f  0f8327020000   jnc 0x19db0009a8cc  <+0x268c>
0x19db0009a6a5  2465  418b442407     movl rax,[r12+0x7]
0x19db0009a6aa  246a  4903c5         REX.W addq rax,r13
0x19db0009a6ad  246d  458b44240b     movl r8,[r12+0xb]
0x19db0009a6b2  2472  41d1f8         sarl r8, 1
0x19db0009a6b5  2475  453bc8         cmpl r9,r8
0x19db0009a6b8  2478  0f8390540000   jnc 0x19db0009fb4e  <+0x790e>
0x19db0009a6be  247e  468b448807     movl r8,[rax+r9*4+0x7]
0x19db0009a6c3  2483  448b7907       movl r15,[rcx+0x7]
0x19db0009a6c7  2487  4d03fd         REX.W addq r15,r13
0x19db0009a6ca  248a  8b410b         movl rax,[rcx+0xb]
0x19db0009a6cd  248d  d1f8           sarl rax, 1
0x19db0009a6cf  248f  443bc8         cmpl r9,rax
0x19db0009a6d2  2492  0f837d540000   jnc 0x19db0009fb55  <+0x7915>
0x19db0009a6d8  2498  438b448f07     movl rax,[r15+r9*4+0x7]
0x19db0009a6dd  249d  d1f8           sarl rax, 1
0x19db0009a6df  249f  41d1f8         sarl r8, 1
0x19db0009a6e2  24a2  442bc0         subl r8,rax
0x19db0009a6e5  24a5  448b7a07       movl r15,[rdx+0x7]
0x19db0009a6e9  24a9  4d03fd         REX.W addq r15,r13
0x19db0009a6ec  24ac  8b420b         movl rax,[rdx+0xb]
0x19db0009a6ef  24af  498bf8         REX.W movq rdi,r8
0x19db0009a6f2  24b2  4103f8         addl rdi,r8
0x19db0009a6f5  24b5  0f8061540000   jo 0x19db0009fb5c  <+0x791c>
0x19db0009a6fb  24bb  458b4703       movl r8,[r15+0x3]
0x19db0009a6ff  24bf  41d1f8         sarl r8, 1
0x19db0009a702  24c2  d1f8           sarl rax, 1
0x19db0009a704  24c4  8d7001         leal rsi,[rax+0x1]
0x19db0009a707  24c7  4c8b1523dfffff REX.W movq r10,[rip+0xffffdf23]
0x19db0009a70e  24ce  4c3bd6         REX.W cmpq r10,rsi
0x19db0009a711  24d1  7712           ja 0x19db0009a725  <+0x24e5>
0x19db0009a713  24d3  488b1526dfffff REX.W movq rdx,[rip+0xffffdf26]
0x19db0009a71a  24da  4c8b1537dbffff REX.W movq r10,[rip+0xffffdb37]
0x19db0009a721  24e1  41ffd2         call r10
0x19db0009a724  24e4  cc             int3l
0x19db0009a725  24e5  443bce         cmpl r9,rsi
0x19db0009a728  24e8  0f8335540000   jnc 0x19db0009fb63  <+0x7923>
0x19db0009a72e  24ee  453bc8         cmpl r9,r8
0x19db0009a731  24f1  0f836a2c0000   jnc 0x19db0009d3a1  <+0x5161>
0x19db0009a737  24f7  458b47ff       movl r8,[r15-0x1]
0x19db0009a73b  24fb  4c8b15efdeffff REX.W movq r10,[rip+0xffffdeef]
0x19db0009a742  2502  4d3bd0         REX.W cmpq r10,r8
0x19db0009a745  2505  7712           ja 0x19db0009a759  <+0x2519>
0x19db0009a747  2507  488b15f2deffff REX.W movq rdx,[rip+0xffffdef2]
0x19db0009a74e  250e  4c8b1503dbffff REX.W movq r10,[rip+0xffffdb03]
0x19db0009a755  2515  41ffd2         call r10
0x19db0009a758  2518  cc             int3l
0x19db0009a759  2519  453985d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r8
0x19db0009a760  2520  0f85ca2c0000   jnz 0x19db0009d430  <+0x51f0>
0x19db0009a766  2526  458d4101       leal r8,[r9+0x1]
0x19db0009a76a  252a  4c8b15c0deffff REX.W movq r10,[rip+0xffffdec0]
0x19db0009a771  2531  4d3bd0         REX.W cmpq r10,r8
0x19db0009a774  2534  7712           ja 0x19db0009a788  <+0x2548>
0x19db0009a776  2536  488b15c3deffff REX.W movq rdx,[rip+0xffffdec3]
0x19db0009a77d  253d  4c8b15d4daffff REX.W movq r10,[rip+0xffffdad4]
0x19db0009a784  2544  41ffd2         call r10
0x19db0009a787  2547  cc             int3l
0x19db0009a788  2548  443bc8         cmpl r9,rax
0x19db0009a78b  254b  0f8225000000   jc 0x19db0009a7b6  <+0x2576>
0x19db0009a791  2551  438d0400       leal rax,[r8+r8*1]
0x19db0009a795  2555  4c8b1595deffff REX.W movq r10,[rip+0xffffde95]
0x19db0009a79c  255c  4c3bd0         REX.W cmpq r10,rax
0x19db0009a79f  255f  7712           ja 0x19db0009a7b3  <+0x2573>
0x19db0009a7a1  2561  488b1598deffff REX.W movq rdx,[rip+0xffffde98]
0x19db0009a7a8  2568  4c8b15a9daffff REX.W movq r10,[rip+0xffffdaa9]
0x19db0009a7af  256f  41ffd2         call r10
0x19db0009a7b2  2572  cc             int3l
0x19db0009a7b3  2573  89420b         movl [rdx+0xb],rax
0x19db0009a7b6  2576  488bc7         REX.W movq rax,rdi
0x19db0009a7b9  2579  4389448f07     movl [r15+r9*4+0x7],rax
0x19db0009a7be  257e  458b7e07       movl r15,[r14+0x7]
0x19db0009a7c2  2582  4d03fd         REX.W addq r15,r13
0x19db0009a7c5  2585  418b460b       movl rax,[r14+0xb]
0x19db0009a7c9  2589  d1f8           sarl rax, 1
0x19db0009a7cb  258b  443bc8         cmpl r9,rax
0x19db0009a7ce  258e  0f8396530000   jnc 0x19db0009fb6a  <+0x792a>
0x19db0009a7d4  2594  438b448f07     movl rax,[r15+r9*4+0x7]
0x19db0009a7d9  2599  448b7907       movl r15,[rcx+0x7]
0x19db0009a7dd  259d  4d03fd         REX.W addq r15,r13
0x19db0009a7e0  25a0  8b710b         movl rsi,[rcx+0xb]
0x19db0009a7e3  25a3  d1fe           sarl rsi, 1
0x19db0009a7e5  25a5  443bce         cmpl r9,rsi
0x19db0009a7e8  25a8  0f8383530000   jnc 0x19db0009fb71  <+0x7931>
0x19db0009a7ee  25ae  478b648f07     movl r12,[r15+r9*4+0x7]
0x19db0009a7f3  25b3  41d1fc         sarl r12, 1
0x19db0009a7f6  25b6  d1f8           sarl rax, 1
0x19db0009a7f8  25b8  4429e0         subl rax,r12
0x19db0009a7fb  25bb  4c8ba568ffffff REX.W movq r12,[rbp-0x98]
0x19db0009a802  25c2  458b7c2407     movl r15,[r12+0x7]
0x19db0009a807  25c7  4d03fd         REX.W addq r15,r13
0x19db0009a80a  25ca  418b74240b     movl rsi,[r12+0xb]
0x19db0009a80f  25cf  488bf8         REX.W movq rdi,rax
0x19db0009a812  25d2  03f8           addl rdi,rax
0x19db0009a814  25d4  0f805e530000   jo 0x19db0009fb78  <+0x7938>
0x19db0009a81a  25da  418b4703       movl rax,[r15+0x3]
0x19db0009a81e  25de  d1f8           sarl rax, 1
0x19db0009a820  25e0  d1fe           sarl rsi, 1
0x19db0009a822  25e2  448d7601       leal r14,[rsi+0x1]
0x19db0009a826  25e6  4c8b1504deffff REX.W movq r10,[rip+0xffffde04]
0x19db0009a82d  25ed  4d3bd6         REX.W cmpq r10,r14
0x19db0009a830  25f0  7712           ja 0x19db0009a844  <+0x2604>
0x19db0009a832  25f2  488b1507deffff REX.W movq rdx,[rip+0xffffde07]
0x19db0009a839  25f9  4c8b1518daffff REX.W movq r10,[rip+0xffffda18]
0x19db0009a840  2600  41ffd2         call r10
0x19db0009a843  2603  cc             int3l
0x19db0009a844  2604  453bce         cmpl r9,r14
0x19db0009a847  2607  0f8332530000   jnc 0x19db0009fb7f  <+0x793f>
0x19db0009a84d  260d  443bc8         cmpl r9,rax
0x19db0009a850  2610  0f83392c0000   jnc 0x19db0009d48f  <+0x524f>
0x19db0009a856  2616  458b77ff       movl r14,[r15-0x1]
0x19db0009a85a  261a  4c8b15d0ddffff REX.W movq r10,[rip+0xffffddd0]
0x19db0009a861  2621  4d3bd6         REX.W cmpq r10,r14
0x19db0009a864  2624  7712           ja 0x19db0009a878  <+0x2638>
0x19db0009a866  2626  488b15d3ddffff REX.W movq rdx,[rip+0xffffddd3]
0x19db0009a86d  262d  4c8b15e4d9ffff REX.W movq r10,[rip+0xffffd9e4]
0x19db0009a874  2634  41ffd2         call r10
0x19db0009a877  2637  cc             int3l
0x19db0009a878  2638  4539b5d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),r14
0x19db0009a87f  263f  0f85a32c0000   jnz 0x19db0009d528  <+0x52e8>
0x19db0009a885  2645  443bce         cmpl r9,rsi
0x19db0009a888  2648  0f8227000000   jc 0x19db0009a8b5  <+0x2675>
0x19db0009a88e  264e  478d3400       leal r14,[r8+r8*1]
0x19db0009a892  2652  4c8b1598ddffff REX.W movq r10,[rip+0xffffdd98]
0x19db0009a899  2659  4d3bd6         REX.W cmpq r10,r14
0x19db0009a89c  265c  7712           ja 0x19db0009a8b0  <+0x2670>
0x19db0009a89e  265e  488b159bddffff REX.W movq rdx,[rip+0xffffdd9b]
0x19db0009a8a5  2665  4c8b15acd9ffff REX.W movq r10,[rip+0xffffd9ac]
0x19db0009a8ac  266c  41ffd2         call r10
0x19db0009a8af  266f  cc             int3l
0x19db0009a8b0  2670  458974240b     movl [r12+0xb],r14
0x19db0009a8b5  2675  488bc7         REX.W movq rax,rdi
0x19db0009a8b8  2678  4389448f07     movl [r15+r9*4+0x7],rax
0x19db0009a8bd  267d  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009a8c1  2681  0f87c9fdffff   ja 0x19db0009a690  <+0x2450>
0x19db0009a8c7  2687  e9c22c0000     jmp 0x19db0009d58e  <+0x534e>
0x19db0009a8cc  268c  4c8b4580       REX.W movq r8,[rbp-0x80]
0x19db0009a8d0  2690  458b782f       movl r15,[r8+0x2f]
0x19db0009a8d4  2694  4d03fd         REX.W addq r15,r13
0x19db0009a8d7  2697  41f6c701       testb r15,0x1
0x19db0009a8db  269b  0f84a5520000   jz 0x19db0009fb86  <+0x7946>
0x19db0009a8e1  26a1  418b47ff       movl rax,[r15-0x1]
0x19db0009a8e5  26a5  4903c5         REX.W addq rax,r13
0x19db0009a8e8  26a8  668178072c04   cmpw [rax+0x7],0x42c
0x19db0009a8ee  26ae  0f8599520000   jnz 0x19db0009fb8d  <+0x794d>
0x19db0009a8f4  26b4  418b4713       movl rax,[r15+0x13]
0x19db0009a8f8  26b8  4903c5         REX.W addq rax,r13
0x19db0009a8fb  26bb  48bead422f08db190000 REX.W movq rsi,0x19db082f42ad    ;; object: 0x19db082f42ad <FeedbackCell[many closures]>
0x19db0009a905  26c5  483bf0         REX.W cmpq rsi,rax
0x19db0009a908  26c8  0f8586520000   jnz 0x19db0009fb94  <+0x7954>
0x19db0009a90e  26ce  458b4f0f       movl r9,[r15+0xf]
0x19db0009a912  26d2  4c8b1518ddffff REX.W movq r10,[rip+0xffffdd18]
0x19db0009a919  26d9  4d3bd1         REX.W cmpq r10,r9
0x19db0009a91c  26dc  7712           ja 0x19db0009a930  <+0x26f0>
0x19db0009a91e  26de  488b151bddffff REX.W movq rdx,[rip+0xffffdd1b]
0x19db0009a925  26e5  4c8b152cd9ffff REX.W movq r10,[rip+0xffffd92c]
0x19db0009a92c  26ec  41ffd2         call r10
0x19db0009a92f  26ef  cc             int3l
0x19db0009a930  26f0  498b03         REX.W movq rax,[r11]
0x19db0009a933  26f3  488d7038       REX.W leaq rsi,[rax+0x38]
0x19db0009a937  26f7  4c89bd78ffffff REX.W movq [rbp-0x88],r15
0x19db0009a93e  26fe  4c898d60ffffff REX.W movq [rbp-0xa0],r9
0x19db0009a945  2705  488b3d6fd9ffff REX.W movq rdi,[rip+0xffffd96f]
0x19db0009a94c  270c  483937         REX.W cmpq [rdi],rsi
0x19db0009a94f  270f  0f86862c0000   jna 0x19db0009d5db  <+0x539b>
0x19db0009a955  2715  488d7028       REX.W leaq rsi,[rax+0x28]
0x19db0009a959  2719  498933         REX.W movq [r11],rsi
0x19db0009a95c  271c  4883c001       REX.W addq rax,0x1
0x19db0009a960  2720  498b9dd8010000 REX.W movq rbx,[r13+0x1d8] (root (fixed_double_array_map))
0x19db0009a967  2727  8958ff         movl [rax-0x1],rbx
0x19db0009a96a  272a  c7400308000000 movl [rax+0x3],0x8
0x19db0009a971  2731  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009a979  2739  c5fb114007     vmovsd [rax+0x7],xmm0
0x19db0009a97e  273e  c5fb11400f     vmovsd [rax+0xf],xmm0
0x19db0009a983  2743  c5fb114017     vmovsd [rax+0x17],xmm0
0x19db0009a988  2748  c5fb11401f     vmovsd [rax+0x1f],xmm0
0x19db0009a98d  274d  488d7e10       REX.W leaq rdi,[rsi+0x10]
0x19db0009a991  2751  49893b         REX.W movq [r11],rdi
0x19db0009a994  2754  4883c601       REX.W addq rsi,0x1
0x19db0009a998  2758  48bf559f3008db190000 REX.W movq rdi,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009a9a2  2762  897eff         movl [rsi-0x1],rdi
0x19db0009a9a5  2765  498b9d58010000 REX.W movq rbx,[r13+0x158] (root (empty_fixed_array))
0x19db0009a9ac  276c  895e03         movl [rsi+0x3],rbx
0x19db0009a9af  276f  894607         movl [rsi+0x7],rax
0x19db0009a9b2  2772  c7460b00000000 movl [rsi+0xb],0x0
0x19db0009a9b9  2779  8b7a07         movl rdi,[rdx+0x7]
0x19db0009a9bc  277c  4903fd         REX.W addq rdi,r13
0x19db0009a9bf  277f  448b420b       movl r8,[rdx+0xb]
0x19db0009a9c3  2783  41d1f8         sarl r8, 1
0x19db0009a9c6  2786  4183f801       cmpl r8,0x1
0x19db0009a9ca  278a  0f86cb510000   jna 0x19db0009fb9b  <+0x795b>
0x19db0009a9d0  2790  448b670b       movl r12,[rdi+0xb]
0x19db0009a9d4  2794  488b9d68ffffff REX.W movq rbx,[rbp-0x98]
0x19db0009a9db  279b  448b7307       movl r14,[rbx+0x7]
0x19db0009a9df  279f  4d03f5         REX.W addq r14,r13
0x19db0009a9e2  27a2  8b4b0b         movl rcx,[rbx+0xb]
0x19db0009a9e5  27a5  d1f9           sarl rcx, 1
0x19db0009a9e7  27a7  83f902         cmpl rcx,0x2
0x19db0009a9ea  27aa  0f86b2510000   jna 0x19db0009fba2  <+0x7962>
0x19db0009a9f0  27b0  458b4e0f       movl r9,[r14+0xf]
0x19db0009a9f4  27b4  4183f802       cmpl r8,0x2
0x19db0009a9f8  27b8  0f86ab510000   jna 0x19db0009fba9  <+0x7969>
0x19db0009a9fe  27be  448b7f0f       movl r15,[rdi+0xf]
0x19db0009aa02  27c2  83f901         cmpl rcx,0x1
0x19db0009aa05  27c5  0f86a5510000   jna 0x19db0009fbb0  <+0x7970>
0x19db0009aa0b  27cb  418b560b       movl rdx,[r14+0xb]
0x19db0009aa0f  27cf  d1fa           sarl rdx, 1
0x19db0009aa11  27d1  41d1ff         sarl r15, 1
0x19db0009aa14  27d4  41d1f9         sarl r9, 1
0x19db0009aa17  27d7  41d1fc         sarl r12, 1
0x19db0009aa1a  27da  c5832aca       vcvtlsi2sd xmm1,xmm15,rdx
0x19db0009aa1e  27de  c4c1032ad7     vcvtlsi2sd xmm2,xmm15,r15
0x19db0009aa23  27e3  c4c1032ad9     vcvtlsi2sd xmm3,xmm15,r9
0x19db0009aa28  27e8  c4c1032ae4     vcvtlsi2sd xmm4,xmm15,r12
0x19db0009aa2d  27ed  c5f359ca       vmulsd xmm1,xmm1,xmm2
0x19db0009aa31  27f1  c5db59e3       vmulsd xmm4,xmm4,xmm3
0x19db0009aa35  27f5  c7460b02000000 movl [rsi+0xb],0x2
0x19db0009aa3c  27fc  c5db5cc9       vsubsd xmm1,xmm4,xmm1
0x19db0009aa40  2800  c5fb114807     vmovsd [rax+0x7],xmm1
0x19db0009aa45  2805  83f900         cmpl rcx,0x0
0x19db0009aa48  2808  0f8669510000   jna 0x19db0009fbb7  <+0x7977>
0x19db0009aa4e  280e  458b4e07       movl r9,[r14+0x7]
0x19db0009aa52  2812  4183f800       cmpl r8,0x0
0x19db0009aa56  2816  0f8662510000   jna 0x19db0009fbbe  <+0x797e>
0x19db0009aa5c  281c  448b4707       movl r8,[rdi+0x7]
0x19db0009aa60  2820  41d1f8         sarl r8, 1
0x19db0009aa63  2823  41d1f9         sarl r9, 1
0x19db0009aa66  2826  c4c1032ac8     vcvtlsi2sd xmm1,xmm15,r8
0x19db0009aa6b  282b  c4c1032ae1     vcvtlsi2sd xmm4,xmm15,r9
0x19db0009aa70  2830  c5e359c9       vmulsd xmm1,xmm3,xmm1
0x19db0009aa74  2834  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db0009aa78  2838  c7460b04000000 movl [rsi+0xb],0x4
0x19db0009aa7f  283f  c5eb5cc9       vsubsd xmm1,xmm2,xmm1
0x19db0009aa83  2843  c5fb11480f     vmovsd [rax+0xf],xmm1
0x19db0009aa88  2848  458b4e0b       movl r9,[r14+0xb]
0x19db0009aa8c  284c  41d1f9         sarl r9, 1
0x19db0009aa8f  284f  4d8be0         REX.W movq r12,r8
0x19db0009aa92  2852  450fafe1       imull r12,r9
0x19db0009aa96  2856  0f8029510000   jo 0x19db0009fbc5  <+0x7985>
0x19db0009aa9c  285c  4183fc00       cmpl r12,0x0
0x19db0009aaa0  2860  0f846a2b0000   jz 0x19db0009d610  <+0x53d0>
0x19db0009aaa6  2866  448b470b       movl r8,[rdi+0xb]
0x19db0009aaaa  286a  458b4e07       movl r9,[r14+0x7]
0x19db0009aaae  286e  41d1f9         sarl r9, 1
0x19db0009aab1  2871  41d1f8         sarl r8, 1
0x19db0009aab4  2874  c4c1032ac9     vcvtlsi2sd xmm1,xmm15,r9
0x19db0009aab9  2879  c4c1032ad0     vcvtlsi2sd xmm2,xmm15,r8
0x19db0009aabe  287e  c5f359ca       vmulsd xmm1,xmm1,xmm2
0x19db0009aac2  2882  c4c1032ad4     vcvtlsi2sd xmm2,xmm15,r12
0x19db0009aac7  2887  c7460b06000000 movl [rsi+0xb],0x6
0x19db0009aace  288e  c5eb5cc9       vsubsd xmm1,xmm2,xmm1
0x19db0009aad2  2892  c5fb114817     vmovsd [rax+0x17],xmm1
0x19db0009aad7  2897  49b809652e08db190000 REX.W movq r8,0x19db082e6509    ;; object: 0x19db082e6509 <Object map = 0x19db08308f65>
0x19db0009aae1  28a1  458b4003       movl r8,[r8+0x3]
0x19db0009aae5  28a5  4d03c5         REX.W addq r8,r13
0x19db0009aae8  28a8  c5fb105007     vmovsd xmm2,[rax+0x7]
0x19db0009aaed  28ad  c5fb10600f     vmovsd xmm4,[rax+0xf]
0x19db0009aaf2  28b2  c5db59dc       vmulsd xmm3,xmm4,xmm4
0x19db0009aaf6  28b6  c5eb59e2       vmulsd xmm4,xmm2,xmm2
0x19db0009aafa  28ba  c5f359c9       vmulsd xmm1,xmm1,xmm1
0x19db0009aafe  28be  c5e358dc       vaddsd xmm3,xmm3,xmm4
0x19db0009ab02  28c2  c5f358cb       vaddsd xmm1,xmm1,xmm3
0x19db0009ab06  28c6  c5f351c9       vsqrtsd xmm1,xmm1,xmm1
0x19db0009ab0a  28ca  c5eb5ed1       vdivsd xmm2,xmm2,xmm1
0x19db0009ab0e  28ce  c5f928d2       vmovapd xmm2,xmm2
0x19db0009ab12  28d2  41b9c9682e08   movl r9,0x82e68c9       ;; (compressed) object: 0x19db082e68c9 <JSFunction sqrt (sfi = 0x19db0824ae09)>
0x19db0009ab18  28d8  45394873       cmpl [r8+0x73],r9
0x19db0009ab1c  28dc  0f85aa500000   jnz 0x19db0009fbcc  <+0x798c>
0x19db0009ab22  28e2  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db0009ab27  28e7  c4c16b5cd7     vsubsd xmm2,xmm2,xmm15
0x19db0009ab2c  28ec  c5fb115007     vmovsd [rax+0x7],xmm2
0x19db0009ab31  28f1  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009ab35  28f5  0f86e72a0000   jna 0x19db0009d622  <+0x53e2>
0x19db0009ab3b  28fb  41b801000000   movl r8,0x1
0x19db0009ab41  2901  4c8bc8         REX.W movq r9,rax
0x19db0009ab44  2904  660f1f840000000000 nop
0x19db0009ab4d  290d  0f1f00         nop
0x19db0009ab50  2910  4183f803       cmpl r8,0x3
0x19db0009ab54  2914  0f834d000000   jnc 0x19db0009aba7  <+0x2967>
0x19db0009ab5a  291a  c4817b1054c107 vmovsd xmm2,[r9+r8*8+0x7]
0x19db0009ab61  2921  c5eb5ed1       vdivsd xmm2,xmm2,xmm1
0x19db0009ab65  2925  c5f928d2       vmovapd xmm2,xmm2
0x19db0009ab69  2929  c4410157ff     vxorpd xmm15,xmm15,xmm15
0x19db0009ab6e  292e  c4c16b5cd7     vsubsd xmm2,xmm2,xmm15
0x19db0009ab73  2933  c4817b1154c107 vmovsd [r9+r8*8+0x7],xmm2
0x19db0009ab7a  293a  4183c001       addl r8,0x1
0x19db0009ab7e  293e  4c8b15acdaffff REX.W movq r10,[rip+0xffffdaac]
0x19db0009ab85  2945  4d3bd0         REX.W cmpq r10,r8
0x19db0009ab88  2948  7712           ja 0x19db0009ab9c  <+0x295c>
0x19db0009ab8a  294a  488b15afdaffff REX.W movq rdx,[rip+0xffffdaaf]
0x19db0009ab91  2951  4c8b15c0d6ffff REX.W movq r10,[rip+0xffffd6c0]
0x19db0009ab98  2958  41ffd2         call r10
0x19db0009ab9b  295b  cc             int3l
0x19db0009ab9c  295c  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009aba0  2960  77ae           ja 0x19db0009ab50  <+0x2910>
0x19db0009aba2  2962  e9d22a0000     jmp 0x19db0009d679  <+0x5439>
0x19db0009aba7  2967  4c8bc6         REX.W movq r8,rsi
0x19db0009abaa  296a  41c7400b08000000 movl [r8+0xb],0x8
0x19db0009abb2  2972  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0009abb6  2976  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0009abbb  297b  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0009abc0  2980  c4c17b11491f   vmovsd [r9+0x1f],xmm1
0x19db0009abc6  2986  f645b001       testb [rbp-0x50],0x1
0x19db0009abca  298a  0f8403500000   jz 0x19db0009fbd3  <+0x7993>
0x19db0009abd0  2990  41b9a59f3008   movl r9,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009abd6  2996  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db0009abda  299a  443948ff       cmpl [rax-0x1],r9
0x19db0009abde  299e  0f85f64f0000   jnz 0x19db0009fbda  <+0x799a>
0x19db0009abe4  29a4  448b6007       movl r12,[rax+0x7]
0x19db0009abe8  29a8  4d03e5         REX.W addq r12,r13
0x19db0009abeb  29ab  448b700b       movl r14,[rax+0xb]
0x19db0009abef  29af  418b542403     movl rdx,[r12+0x3]
0x19db0009abf4  29b4  d1fa           sarl rdx, 1
0x19db0009abf6  29b6  41d1fe         sarl r14, 1
0x19db0009abf9  29b9  458d7e01       leal r15,[r14+0x1]
0x19db0009abfd  29bd  4c8b152ddaffff REX.W movq r10,[rip+0xffffda2d]
0x19db0009ac04  29c4  4d3bd7         REX.W cmpq r10,r15
0x19db0009ac07  29c7  7712           ja 0x19db0009ac1b  <+0x29db>
0x19db0009ac09  29c9  488b1530daffff REX.W movq rdx,[rip+0xffffda30]
0x19db0009ac10  29d0  4c8b1541d6ffff REX.W movq r10,[rip+0xffffd641]
0x19db0009ac17  29d7  41ffd2         call r10
0x19db0009ac1a  29da  cc             int3l
0x19db0009ac1b  29db  488b5da8       REX.W movq rbx,[rbp-0x58]
0x19db0009ac1f  29df  413bdf         cmpl rbx,r15
0x19db0009ac22  29e2  0f83b94f0000   jnc 0x19db0009fbe1  <+0x79a1>
0x19db0009ac28  29e8  3bda           cmpl rbx,rdx
0x19db0009ac2a  29ea  0f83ab2a0000   jnc 0x19db0009d6db  <+0x549b>
0x19db0009ac30  29f0  418b5424ff     movl rdx,[r12-0x1]
0x19db0009ac35  29f5  4c8b15f5d9ffff REX.W movq r10,[rip+0xffffd9f5]
0x19db0009ac3c  29fc  4c3bd2         REX.W cmpq r10,rdx
0x19db0009ac3f  29ff  7712           ja 0x19db0009ac53  <+0x2a13>
0x19db0009ac41  2a01  488b15f8d9ffff REX.W movq rdx,[rip+0xffffd9f8]
0x19db0009ac48  2a08  4c8b1509d6ffff REX.W movq r10,[rip+0xffffd609]
0x19db0009ac4f  2a0f  41ffd2         call r10
0x19db0009ac52  2a12  cc             int3l
0x19db0009ac53  2a13  413995d0000000 cmpl [r13+0xd0] (root (fixed_array_map)),rdx
0x19db0009ac5a  2a1a  0f85fd2a0000   jnz 0x19db0009d75d  <+0x551d>
0x19db0009ac60  2a20  4c8bfb         REX.W movq r15,rbx
0x19db0009ac63  2a23  418d5701       leal rdx,[r15+0x1]
0x19db0009ac67  2a27  4c8b15c3d9ffff REX.W movq r10,[rip+0xffffd9c3]
0x19db0009ac6e  2a2e  4c3bd2         REX.W cmpq r10,rdx
0x19db0009ac71  2a31  7712           ja 0x19db0009ac85  <+0x2a45>
0x19db0009ac73  2a33  488b15c6d9ffff REX.W movq rdx,[rip+0xffffd9c6]
0x19db0009ac7a  2a3a  4c8b15d7d5ffff REX.W movq r10,[rip+0xffffd5d7]
0x19db0009ac81  2a41  41ffd2         call r10
0x19db0009ac84  2a44  cc             int3l
0x19db0009ac85  2a45  453bfe         cmpl r15,r14
0x19db0009ac88  2a48  0f8229000000   jc 0x19db0009acb7  <+0x2a77>
0x19db0009ac8e  2a4e  448d3412       leal r14,[rdx+rdx*1]
0x19db0009ac92  2a52  4c8b1598d9ffff REX.W movq r10,[rip+0xffffd998]
0x19db0009ac99  2a59  4d3bd6         REX.W cmpq r10,r14
0x19db0009ac9c  2a5c  7712           ja 0x19db0009acb0  <+0x2a70>
0x19db0009ac9e  2a5e  488b159bd9ffff REX.W movq rdx,[rip+0xffffd99b]
0x19db0009aca5  2a65  4c8b15acd5ffff REX.W movq r10,[rip+0xffffd5ac]
0x19db0009acac  2a6c  41ffd2         call r10
0x19db0009acaf  2a6f  cc             int3l
0x19db0009acb0  2a70  4c8bf8         REX.W movq r15,rax
0x19db0009acb3  2a73  4589770b       movl [r15+0xb],r14
0x19db0009acb7  2a77  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db0009acbb  2a7b  47890434       movl [r12+r14*1],r8
0x19db0009acbf  2a7f  49c7c70000fcff REX.W movq r15,0xfffc0000
0x19db0009acc6  2a86  4d21e7         REX.W andq r15,r12
0x19db0009acc9  2a89  41f6470804     testb [r15+0x8],0x4
0x19db0009acce  2a8e  0f85613f0000   jnz 0x19db0009ec35  <+0x69f5>
0x19db0009acd4  2a94  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009acd8  2a98  0f87f2f3ffff   ja 0x19db0009a0d0  <+0x1e90>
0x19db0009acde  2a9e  e9cc2a0000     jmp 0x19db0009d7af  <+0x556f>
0x19db0009ace3  2aa3  4c8b1dc0d5ffff REX.W movq r11,[rip+0xffffd5c0]
0x19db0009acea  2aaa  4d8b03         REX.W movq r8,[r11]
0x19db0009aced  2aad  4d8d701c       REX.W leaq r14,[r8+0x1c]
0x19db0009acf1  2ab1  4c8bfa         REX.W movq r15,rdx
0x19db0009acf4  2ab4  4d3937         REX.W cmpq [r15],r14
0x19db0009acf7  2ab7  0f86ff2a0000   jna 0x19db0009d7fc  <+0x55bc>
0x19db0009acfd  2abd  4d8d7010       REX.W leaq r14,[r8+0x10]
0x19db0009ad01  2ac1  4d8933         REX.W movq [r11],r14
0x19db0009ad04  2ac4  4983c001       REX.W addq r8,0x1
0x19db0009ad08  2ac8  bba59f3008     movl rbx,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009ad0d  2acd  418958ff       movl [r8-0x1],rbx
0x19db0009ad11  2ad1  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db0009ad18  2ad8  41895003       movl [r8+0x3],rdx
0x19db0009ad1c  2adc  b929482f08     movl rcx,0x82f4829      ;; (compressed) object: 0x19db082f4829 <FixedArray[12]>
0x19db0009ad21  2ae1  41894807       movl [r8+0x7],rcx
0x19db0009ad25  2ae5  41c7400b18000000 movl [r8+0xb],0x18
0x19db0009ad2d  2aed  b96ddc3008     movl rcx,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009ad32  2af2  41394c24ff     cmpl [r12-0x1],rcx
0x19db0009ad37  2af7  0f844d000000   jz 0x19db0009ad8a  <+0x2b4a>
0x19db0009ad3d  2afd  baf5db3008     movl rdx,0x830dbf5      ;; (compressed) object: 0x19db0830dbf5 <Map(PACKED_ELEMENTS)>
0x19db0009ad42  2b02  41395424ff     cmpl [r12-0x1],rdx
0x19db0009ad47  2b07  0f859b4e0000   jnz 0x19db0009fbe8  <+0x79a8>
0x19db0009ad4d  2b0d  ba1ddc3008     movl rdx,0x830dc1d      ;; (compressed) object: 0x19db0830dc1d <Map(PACKED_ELEMENTS)>
0x19db0009ad52  2b12  41895424ff     movl [r12-0x1],rdx
0x19db0009ad57  2b17  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0009ad5e  2b1e  4c21e3         REX.W andq rbx,r12
0x19db0009ad61  2b21  f6430804       testb [rbx+0x8],0x4
0x19db0009ad65  2b25  0f85833e0000   jnz 0x19db0009ebee  <+0x69ae>
0x19db0009ad6b  2b2b  4489400f       movl [rax+0xf],r8
0x19db0009ad6f  2b2f  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009ad76  2b36  4c23e0         REX.W andq r12,rax
0x19db0009ad79  2b39  41f644240804   testb [r12+0x8],0x4
0x19db0009ad7f  2b3f  0f85213e0000   jnz 0x19db0009eba6  <+0x6966>
0x19db0009ad85  2b45  e91a000000     jmp 0x19db0009ada4  <+0x2b64>
0x19db0009ad8a  2b4a  4489400f       movl [rax+0xf],r8
0x19db0009ad8e  2b4e  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009ad95  2b55  4c23e0         REX.W andq r12,rax
0x19db0009ad98  2b58  41f644240804   testb [r12+0x8],0x4
0x19db0009ad9e  2b5e  0f85ba3d0000   jnz 0x19db0009eb5e  <+0x691e>
0x19db0009ada4  2b64  448b460f       movl r8,[rsi+0xf]
0x19db0009ada8  2b68  4d03c5         REX.W addq r8,r13
0x19db0009adab  2b6b  4c8b65c0       REX.W movq r12,[rbp-0x40]
0x19db0009adaf  2b6f  456be412       imull r12,r12,0x12
0x19db0009adb3  2b73  0f80364e0000   jo 0x19db0009fbef  <+0x79af>
0x19db0009adb9  2b79  4c89e0         REX.W movq rax,r12
0x19db0009adbc  2b7c  4401e0         addl rax,r12
0x19db0009adbf  2b7f  0f80942a0000   jo 0x19db0009d859  <+0x5619>
0x19db0009adc5  2b85  41f6c001       testb r8,0x1
0x19db0009adc9  2b89  0f84274e0000   jz 0x19db0009fbf6  <+0x79b6>
0x19db0009adcf  2b8f  413948ff       cmpl [r8-0x1],rcx
0x19db0009add3  2b93  0f843e010000   jz 0x19db0009af17  <+0x2cd7>
0x19db0009add9  2b99  41bc1ddc3008   movl r12,0x830dc1d      ;; (compressed) object: 0x19db0830dc1d <Map(PACKED_ELEMENTS)>
0x19db0009addf  2b9f  453960ff       cmpl [r8-0x1],r12
0x19db0009ade3  2ba3  0f85144e0000   jnz 0x19db0009fbfd  <+0x79bd>
0x19db0009ade9  2ba9  458b6003       movl r12,[r8+0x3]
0x19db0009aded  2bad  4d03e5         REX.W addq r12,r13
0x19db0009adf0  2bb0  418b542407     movl rdx,[r12+0x7]
0x19db0009adf5  2bb5  4c8b1535d8ffff REX.W movq r10,[rip+0xffffd835]
0x19db0009adfc  2bbc  4c3bd2         REX.W cmpq r10,rdx
0x19db0009adff  2bbf  7712           ja 0x19db0009ae13  <+0x2bd3>
0x19db0009ae01  2bc1  488b1538d8ffff REX.W movq rdx,[rip+0xffffd838]
0x19db0009ae08  2bc8  4c8b1549d4ffff REX.W movq r10,[rip+0xffffd449]
0x19db0009ae0f  2bcf  41ffd2         call r10
0x19db0009ae12  2bd2  cc             int3l
0x19db0009ae13  2bd3  458b4c240b     movl r9,[r12+0xb]
0x19db0009ae18  2bd8  4c8b1512d8ffff REX.W movq r10,[rip+0xffffd812]
0x19db0009ae1f  2bdf  4d3bd1         REX.W cmpq r10,r9
0x19db0009ae22  2be2  7712           ja 0x19db0009ae36  <+0x2bf6>
0x19db0009ae24  2be4  488b1515d8ffff REX.W movq rdx,[rip+0xffffd815]
0x19db0009ae2b  2beb  4c8b1526d4ffff REX.W movq r10,[rip+0xffffd426]
0x19db0009ae32  2bf2  41ffd2         call r10
0x19db0009ae35  2bf5  cc             int3l
0x19db0009ae36  2bf6  418b4c240f     movl rcx,[r12+0xf]
0x19db0009ae3b  2bfb  4c8b15efd7ffff REX.W movq r10,[rip+0xffffd7ef]
0x19db0009ae42  2c02  4c3bd1         REX.W cmpq r10,rcx
0x19db0009ae45  2c05  7712           ja 0x19db0009ae59  <+0x2c19>
0x19db0009ae47  2c07  488b15f2d7ffff REX.W movq rdx,[rip+0xffffd7f2]
0x19db0009ae4e  2c0e  4c8b1503d4ffff REX.W movq r10,[rip+0xffffd403]
0x19db0009ae55  2c15  41ffd2         call r10
0x19db0009ae58  2c18  cc             int3l
0x19db0009ae59  2c19  458b642403     movl r12,[r12+0x3]
0x19db0009ae5e  2c1e  4d8b33         REX.W movq r14,[r11]
0x19db0009ae61  2c21  498d7e20       REX.W leaq rdi,[r14+0x20]
0x19db0009ae65  2c25  49393f         REX.W cmpq [r15],rdi
0x19db0009ae68  2c28  0f86142a0000   jna 0x19db0009d882  <+0x5642>
0x19db0009ae6e  2c2e  41d1fc         sarl r12, 1
0x19db0009ae71  2c31  498d7e20       REX.W leaq rdi,[r14+0x20]
0x19db0009ae75  2c35  4181e400fcff3f andl r12,0x3ffffc00
0x19db0009ae7c  2c3c  49893b         REX.W movq [r11],rdi
0x19db0009ae7f  2c3f  4983c601       REX.W addq r14,0x1
0x19db0009ae83  2c43  4183cc06       orl r12,0x6
0x19db0009ae87  2c47  41d1e4         shll r12, 1
0x19db0009ae8a  2c4a  4c8b15a0d7ffff REX.W movq r10,[rip+0xffffd7a0]
0x19db0009ae91  2c51  4d39e2         REX.W cmpq r10,r12
0x19db0009ae94  2c54  7712           ja 0x19db0009aea8  <+0x2c68>
0x19db0009ae96  2c56  488b15a3d7ffff REX.W movq rdx,[rip+0xffffd7a3]
0x19db0009ae9d  2c5d  4c8b15b4d3ffff REX.W movq r10,[rip+0xffffd3b4]
0x19db0009aea4  2c64  41ffd2         call r10
0x19db0009aea7  2c67  cc             int3l
0x19db0009aea8  2c68  498bbd38020000 REX.W movq rdi,[r13+0x238] (root (property_array_map))
0x19db0009aeaf  2c6f  41897eff       movl [r14-0x1],rdi
0x19db0009aeb3  2c73  45896603       movl [r14+0x3],r12
0x19db0009aeb7  2c77  4c8be2         REX.W movq r12,rdx
0x19db0009aeba  2c7a  45896607       movl [r14+0x7],r12
0x19db0009aebe  2c7e  45894e0b       movl [r14+0xb],r9
0x19db0009aec2  2c82  41894e0f       movl [r14+0xf],rcx
0x19db0009aec6  2c86  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db0009aecd  2c8d  45894e17       movl [r14+0x17],r9
0x19db0009aed1  2c91  45894e1b       movl [r14+0x1b],r9
0x19db0009aed5  2c95  41894613       movl [r14+0x13],rax
0x19db0009aed9  2c99  41b945dc3008   movl r9,0x830dc45       ;; (compressed) object: 0x19db0830dc45 <Map(PACKED_ELEMENTS)>
0x19db0009aedf  2c9f  458948ff       movl [r8-0x1],r9
0x19db0009aee3  2ca3  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009aeea  2caa  4d23e0         REX.W andq r12,r8
0x19db0009aeed  2cad  41f644240804   testb [r12+0x8],0x4
0x19db0009aef3  2cb3  0f851c3c0000   jnz 0x19db0009eb15  <+0x68d5>
0x19db0009aef9  2cb9  45897003       movl [r8+0x3],r14
0x19db0009aefd  2cbd  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009af04  2cc4  4d23c8         REX.W andq r9,r8
0x19db0009af07  2cc7  41f6410804     testb [r9+0x8],0x4
0x19db0009af0c  2ccc  0f85bc3b0000   jnz 0x19db0009eace  <+0x688e>
0x19db0009af12  2cd2  e921000000     jmp 0x19db0009af38  <+0x2cf8>
0x19db0009af17  2cd7  458b6003       movl r12,[r8+0x3]
0x19db0009af1b  2cdb  4d03e5         REX.W addq r12,r13
0x19db0009af1e  2cde  4189442413     movl [r12+0x13],rax
0x19db0009af23  2ce3  49c7c60000fcff REX.W movq r14,0xfffc0000
0x19db0009af2a  2cea  4d21e6         REX.W andq r14,r12
0x19db0009af2d  2ced  41f6460804     testb [r14+0x8],0x4
0x19db0009af32  2cf2  0f85473b0000   jnz 0x19db0009ea7f  <+0x683f>
0x19db0009af38  2cf8  458b48ff       movl r9,[r8-0x1]
0x19db0009af3c  2cfc  4c8b15eed6ffff REX.W movq r10,[rip+0xffffd6ee]
0x19db0009af43  2d03  4d3bd1         REX.W cmpq r10,r9
0x19db0009af46  2d06  7712           ja 0x19db0009af5a  <+0x2d1a>
0x19db0009af48  2d08  488b15f1d6ffff REX.W movq rdx,[rip+0xffffd6f1]
0x19db0009af4f  2d0f  4c8b1502d3ffff REX.W movq r10,[rip+0xffffd302]
0x19db0009af56  2d16  41ffd2         call r10
0x19db0009af59  2d19  cc             int3l
0x19db0009af5a  2d1a  41bc6ddc3008   movl r12,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009af60  2d20  453be1         cmpl r12,r9
0x19db0009af63  2d23  0f840f000000   jz 0x19db0009af78  <+0x2d38>
0x19db0009af69  2d29  41bc45dc3008   movl r12,0x830dc45      ;; (compressed) object: 0x19db0830dc45 <Map(PACKED_ELEMENTS)>
0x19db0009af6f  2d2f  453be1         cmpl r12,r9
0x19db0009af72  2d32  0f858c4c0000   jnz 0x19db0009fc04  <+0x79c4>
0x19db0009af78  2d38  458b4803       movl r9,[r8+0x3]
0x19db0009af7c  2d3c  4d03cd         REX.W addq r9,r13
0x19db0009af7f  2d3f  458b4913       movl r9,[r9+0x13]
0x19db0009af83  2d43  4c8b15a7d6ffff REX.W movq r10,[rip+0xffffd6a7]
0x19db0009af8a  2d4a  4d3bd1         REX.W cmpq r10,r9
0x19db0009af8d  2d4d  7712           ja 0x19db0009afa1  <+0x2d61>
0x19db0009af8f  2d4f  488b15aad6ffff REX.W movq rdx,[rip+0xffffd6aa]
0x19db0009af96  2d56  4c8b15bbd2ffff REX.W movq r10,[rip+0xffffd2bb]
0x19db0009af9d  2d5d  41ffd2         call r10
0x19db0009afa0  2d60  cc             int3l
0x19db0009afa1  2d61  41f6c101       testb r9,0x1
0x19db0009afa5  2d65  0f85604c0000   jnz 0x19db0009fc0b  <+0x79cb>
0x19db0009afab  2d6b  4183f900       cmpl r9,0x0
0x19db0009afaf  2d6f  0f8e0d030000   jle 0x19db0009b2c2  <+0x3082>
0x19db0009afb5  2d75  448b4e37       movl r9,[rsi+0x37]
0x19db0009afb9  2d79  4d03cd         REX.W addq r9,r13
0x19db0009afbc  2d7c  41f6c101       testb r9,0x1
0x19db0009afc0  2d80  0f844c4c0000   jz 0x19db0009fc12  <+0x79d2>
0x19db0009afc6  2d86  458b61ff       movl r12,[r9-0x1]
0x19db0009afca  2d8a  4d03e5         REX.W addq r12,r13
0x19db0009afcd  2d8d  6641817c24072c04 cmpw [r12+0x7],0x42c
0x19db0009afd5  2d95  0f853e4c0000   jnz 0x19db0009fc19  <+0x79d9>
0x19db0009afdb  2d9b  458b6113       movl r12,[r9+0x13]
0x19db0009afdf  2d9f  4d03e5         REX.W addq r12,r13
0x19db0009afe2  2da2  49bec5422f08db190000 REX.W movq r14,0x19db082f42c5    ;; object: 0x19db082f42c5 <FeedbackCell[many closures]>
0x19db0009afec  2dac  4d3be6         REX.W cmpq r12,r14
0x19db0009afef  2daf  0f852b4c0000   jnz 0x19db0009fc20  <+0x79e0>
0x19db0009aff5  2db5  458b410f       movl r8,[r9+0xf]
0x19db0009aff9  2db9  4d03c5         REX.W addq r8,r13
0x19db0009affc  2dbc  4d8b23         REX.W movq r12,[r11]
0x19db0009afff  2dbf  498d442428     REX.W leaq rax,[r12+0x28]
0x19db0009b004  2dc4  4c894dd0       REX.W movq [rbp-0x30],r9
0x19db0009b008  2dc8  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db0009b00c  2dcc  493907         REX.W cmpq [r15],rax
0x19db0009b00f  2dcf  0f86e0280000   jna 0x19db0009d8f5  <+0x56b5>
0x19db0009b015  2dd5  498d442418     REX.W leaq rax,[r12+0x18]
0x19db0009b01a  2dda  498903         REX.W movq [r11],rax
0x19db0009b01d  2ddd  4983c401       REX.W addq r12,0x1
0x19db0009b021  2de1  4c89e2         REX.W movq rdx,r12
0x19db0009b024  2de4  4d8ba5d0000000 REX.W movq r12,[r13+0xd0] (root (fixed_array_map))
0x19db0009b02b  2deb  448962ff       movl [rdx-0x1],r12
0x19db0009b02f  2def  c7420308000000 movl [rdx+0x3],0x8
0x19db0009b036  2df6  c7420700000000 movl [rdx+0x7],0x0
0x19db0009b03d  2dfd  c7420b00000000 movl [rdx+0xb],0x0
0x19db0009b044  2e04  c7420f00000000 movl [rdx+0xf],0x0
0x19db0009b04b  2e0b  c7421302000000 movl [rdx+0x13],0x2
0x19db0009b052  2e12  488d4810       REX.W leaq rcx,[rax+0x10]
0x19db0009b056  2e16  49890b         REX.W movq [r11],rcx
0x19db0009b059  2e19  4883c001       REX.W addq rax,0x1
0x19db0009b05d  2e1d  bbb59e3008     movl rbx,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009b062  2e22  8958ff         movl [rax-0x1],rbx
0x19db0009b065  2e25  498b8d58010000 REX.W movq rcx,[r13+0x158] (root (empty_fixed_array))
0x19db0009b06c  2e2c  894803         movl [rax+0x3],rcx
0x19db0009b06f  2e2f  895007         movl [rax+0x7],rdx
0x19db0009b072  2e32  c7400b08000000 movl [rax+0xb],0x8
0x19db0009b079  2e39  c7420700000000 movl [rdx+0x7],0x0
0x19db0009b080  2e40  c7420b00000000 movl [rdx+0xb],0x0
0x19db0009b087  2e47  c7420f00000000 movl [rdx+0xf],0x0
0x19db0009b08e  2e4e  48bafd352e08db190000 REX.W movq rdx,0x19db082e35fd    ;; object: 0x19db082e35fd <JSGlobal Object>
0x19db0009b098  2e58  bf06000000     movl rdi,0x6
0x19db0009b09d  2e5d  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0009b0a7  2e67  48bbd5552f08db190000 REX.W movq rbx,0x19db082f55d5    ;; object: 0x19db082f55d5 <FeedbackVector[5]>
0x19db0009b0b1  2e71  4d89e7         REX.W movq r15,r12
0x19db0009b0b4  2e74  4c8be6         REX.W movq r12,rsi
0x19db0009b0b7  2e77  498bf0         REX.W movq rsi,r8
0x19db0009b0ba  2e7a  49ba6046d1f5ff7f0000 REX.W movq r10,0x7ffff5d14660  (StoreIC)    ;; off heap target
0x19db0009b0c4  2e84  41ffd2         call r10
0x19db0009b0c7  2e87  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009b0cb  2e8b  0f864b280000   jna 0x19db0009d91c  <+0x56dc>
0x19db0009b0d1  2e91  48c745d001000000 REX.W movq [rbp-0x30],0x1
0x19db0009b0d9  2e99  e906000000     jmp 0x19db0009b0e4  <+0x2ea4>
0x19db0009b0de  2e9e  6690           nop
0x19db0009b0e0  2ea0  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db0009b0e4  2ea4  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009b0e8  2ea8  8b560f         movl rdx,[rsi+0xf]
0x19db0009b0eb  2eab  4903d5         REX.W addq rdx,r13
0x19db0009b0ee  2eae  f6c201         testb rdx,0x1
0x19db0009b0f1  2eb1  0f84374b0000   jz 0x19db0009fc2e  <+0x79ee>
0x19db0009b0f7  2eb7  8b4aff         movl rcx,[rdx-0x1]
0x19db0009b0fa  2eba  4c8b1530d5ffff REX.W movq r10,[rip+0xffffd530]
0x19db0009b101  2ec1  4c3bd1         REX.W cmpq r10,rcx
0x19db0009b104  2ec4  7712           ja 0x19db0009b118  <+0x2ed8>
0x19db0009b106  2ec6  488b1533d5ffff REX.W movq rdx,[rip+0xffffd533]
0x19db0009b10d  2ecd  4c8b1544d1ffff REX.W movq r10,[rip+0xffffd144]
0x19db0009b114  2ed4  41ffd2         call r10
0x19db0009b117  2ed7  cc             int3l
0x19db0009b118  2ed8  4c8b1d8bd1ffff REX.W movq r11,[rip+0xffffd18b]
0x19db0009b11f  2edf  4c8b2595d1ffff REX.W movq r12,[rip+0xffffd195]
0x19db0009b126  2ee6  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009b12c  2eec  498b8558010000 REX.W movq rax,[r13+0x158] (root (empty_fixed_array))
0x19db0009b133  2ef3  4d8bb5d0000000 REX.W movq r14,[r13+0xd0] (root (fixed_array_map))
0x19db0009b13a  2efa  49b9c5422f08db190000 REX.W movq r9,0x19db082f42c5    ;; object: 0x19db082f42c5 <FeedbackCell[many closures]>
0x19db0009b144  2f04  41b86ddc3008   movl r8,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009b14a  2f0a  443bc1         cmpl r8,rcx
0x19db0009b14d  2f0d  0f840d000000   jz 0x19db0009b160  <+0x2f20>
0x19db0009b153  2f13  bb45dc3008     movl rbx,0x830dc45      ;; (compressed) object: 0x19db0830dc45 <Map(PACKED_ELEMENTS)>
0x19db0009b158  2f18  3bd9           cmpl rbx,rcx
0x19db0009b15a  2f1a  0f85d54a0000   jnz 0x19db0009fc35  <+0x79f5>
0x19db0009b160  2f20  8b4a03         movl rcx,[rdx+0x3]
0x19db0009b163  2f23  4903cd         REX.W addq rcx,r13
0x19db0009b166  2f26  8b4913         movl rcx,[rcx+0x13]
0x19db0009b169  2f29  4c8b15c1d4ffff REX.W movq r10,[rip+0xffffd4c1]
0x19db0009b170  2f30  4c3bd1         REX.W cmpq r10,rcx
0x19db0009b173  2f33  7712           ja 0x19db0009b187  <+0x2f47>
0x19db0009b175  2f35  488b15c4d4ffff REX.W movq rdx,[rip+0xffffd4c4]
0x19db0009b17c  2f3c  4c8b15d5d0ffff REX.W movq r10,[rip+0xffffd0d5]
0x19db0009b183  2f43  41ffd2         call r10
0x19db0009b186  2f46  cc             int3l
0x19db0009b187  2f47  f6c101         testb rcx,0x1
0x19db0009b18a  2f4a  0f85ac4a0000   jnz 0x19db0009fc3c  <+0x79fc>
0x19db0009b190  2f50  d1f9           sarl rcx, 1
0x19db0009b192  2f52  488b5dd0       REX.W movq rbx,[rbp-0x30]
0x19db0009b196  2f56  3bd9           cmpl rbx,rcx
0x19db0009b198  2f58  0f8d0b010000   jge 0x19db0009b2a9  <+0x3069>
0x19db0009b19e  2f5e  8b4e37         movl rcx,[rsi+0x37]
0x19db0009b1a1  2f61  4903cd         REX.W addq rcx,r13
0x19db0009b1a4  2f64  f6c101         testb rcx,0x1
0x19db0009b1a7  2f67  0f84964a0000   jz 0x19db0009fc43  <+0x7a03>
0x19db0009b1ad  2f6d  8b79ff         movl rdi,[rcx-0x1]
0x19db0009b1b0  2f70  4903fd         REX.W addq rdi,r13
0x19db0009b1b3  2f73  66817f072c04   cmpw [rdi+0x7],0x42c
0x19db0009b1b9  2f79  0f858b4a0000   jnz 0x19db0009fc4a  <+0x7a0a>
0x19db0009b1bf  2f7f  8b7913         movl rdi,[rcx+0x13]
0x19db0009b1c2  2f82  4903fd         REX.W addq rdi,r13
0x19db0009b1c5  2f85  4c3bcf         REX.W cmpq r9,rdi
0x19db0009b1c8  2f88  0f85834a0000   jnz 0x19db0009fc51  <+0x7a11>
0x19db0009b1ce  2f8e  8b510f         movl rdx,[rcx+0xf]
0x19db0009b1d1  2f91  4903d5         REX.W addq rdx,r13
0x19db0009b1d4  2f94  498b3b         REX.W movq rdi,[r11]
0x19db0009b1d7  2f97  4c8d4728       REX.W leaq r8,[rdi+0x28]
0x19db0009b1db  2f9b  48894dc8       REX.W movq [rbp-0x38],rcx
0x19db0009b1df  2f9f  488955c0       REX.W movq [rbp-0x40],rdx
0x19db0009b1e3  2fa3  4d390424       REX.W cmpq [r12],r8
0x19db0009b1e7  2fa7  0f8651270000   jna 0x19db0009d93e  <+0x56fe>
0x19db0009b1ed  2fad  4c8d4718       REX.W leaq r8,[rdi+0x18]
0x19db0009b1f1  2fb1  4d8903         REX.W movq [r11],r8
0x19db0009b1f4  2fb4  4883c701       REX.W addq rdi,0x1
0x19db0009b1f8  2fb8  448977ff       movl [rdi-0x1],r14
0x19db0009b1fc  2fbc  c7470308000000 movl [rdi+0x3],0x8
0x19db0009b203  2fc3  c7470700000000 movl [rdi+0x7],0x0
0x19db0009b20a  2fca  c7470b00000000 movl [rdi+0xb],0x0
0x19db0009b211  2fd1  c7470f00000000 movl [rdi+0xf],0x0
0x19db0009b218  2fd8  c7471302000000 movl [rdi+0x13],0x2
0x19db0009b21f  2fdf  4d8d4810       REX.W leaq r9,[r8+0x10]
0x19db0009b223  2fe3  4d890b         REX.W movq [r11],r9
0x19db0009b226  2fe6  4983c001       REX.W addq r8,0x1
0x19db0009b22a  2fea  458978ff       movl [r8-0x1],r15
0x19db0009b22e  2fee  41894003       movl [r8+0x3],rax
0x19db0009b232  2ff2  41897807       movl [r8+0x7],rdi
0x19db0009b236  2ff6  41c7400b08000000 movl [r8+0xb],0x8
0x19db0009b23e  2ffe  c7470700000000 movl [rdi+0x7],0x0
0x19db0009b245  3005  c7470b00000000 movl [rdi+0xb],0x0
0x19db0009b24c  300c  c7470f00000000 movl [rdi+0xf],0x0
0x19db0009b253  3013  498bc0         REX.W movq rax,r8
0x19db0009b256  3016  4c8bc6         REX.W movq r8,rsi
0x19db0009b259  3019  488bf2         REX.W movq rsi,rdx
0x19db0009b25c  301c  48bafd352e08db190000 REX.W movq rdx,0x19db082e35fd    ;; object: 0x19db082e35fd <JSGlobal Object>
0x19db0009b266  3026  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0009b270  3030  bf06000000     movl rdi,0x6
0x19db0009b275  3035  4c8bcb         REX.W movq r9,rbx
0x19db0009b278  3038  48bbd5552f08db190000 REX.W movq rbx,0x19db082f55d5    ;; object: 0x19db082f55d5 <FeedbackVector[5]>
0x19db0009b282  3042  4c8b1533feffff REX.W movq r10,[rip+0xfffffe33]
0x19db0009b289  3049  41ffd2         call r10
0x19db0009b28c  304c  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0009b290  3050  4183c001       addl r8,0x1
0x19db0009b294  3054  0f80c5490000   jo 0x19db0009fc5f  <+0x7a1f>
0x19db0009b29a  305a  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009b29e  305e  0f873cfeffff   ja 0x19db0009b0e0  <+0x2ea0>
0x19db0009b2a4  3064  e9d7260000     jmp 0x19db0009d980  <+0x5740>
0x19db0009b2a9  3069  4d89e7         REX.W movq r15,r12
0x19db0009b2ac  306c  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009b2b4  3074  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0009b2b8  3078  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0009b2bd  307d  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0009b2c2  3082  448b4647       movl r8,[rsi+0x47]
0x19db0009b2c6  3086  4d03c5         REX.W addq r8,r13
0x19db0009b2c9  3089  448b4e13       movl r9,[rsi+0x13]
0x19db0009b2cd  308d  4d03cd         REX.W addq r9,r13
0x19db0009b2d0  3090  448b661f       movl r12,[rsi+0x1f]
0x19db0009b2d4  3094  4d03e5         REX.W addq r12,r13
0x19db0009b2d7  3097  41f6c401       testb r12,0x1
0x19db0009b2db  309b  0f8485490000   jz 0x19db0009fc66  <+0x7a26>
0x19db0009b2e1  30a1  41be75d93008   movl r14,0x830d975      ;; (compressed) object: 0x19db0830d975 <Map(HOLEY_ELEMENTS)>
0x19db0009b2e7  30a7  45397424ff     cmpl [r12-0x1],r14
0x19db0009b2ec  30ac  0f857b490000   jnz 0x19db0009fc6d  <+0x7a2d>
0x19db0009b2f2  30b2  418b44240b     movl rax,[r12+0xb]
0x19db0009b2f7  30b7  4903c5         REX.W addq rax,r13
0x19db0009b2fa  30ba  41beb59e3008   movl r14,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009b300  30c0  443970ff       cmpl [rax-0x1],r14
0x19db0009b304  30c4  0f856a490000   jnz 0x19db0009fc74  <+0x7a34>
0x19db0009b30a  30ca  8b5007         movl rdx,[rax+0x7]
0x19db0009b30d  30cd  4903d5         REX.W addq rdx,r13
0x19db0009b310  30d0  8b400b         movl rax,[rax+0xb]
0x19db0009b313  30d3  d1f8           sarl rax, 1
0x19db0009b315  30d5  83f800         cmpl rax,0x0
0x19db0009b318  30d8  0f865d490000   jna 0x19db0009fc7b  <+0x7a3b>
0x19db0009b31e  30de  8b4a07         movl rcx,[rdx+0x7]
0x19db0009b321  30e1  83f801         cmpl rax,0x1
0x19db0009b324  30e4  0f8658490000   jna 0x19db0009fc82  <+0x7a42>
0x19db0009b32a  30ea  8b7a0b         movl rdi,[rdx+0xb]
0x19db0009b32d  30ed  83f802         cmpl rax,0x2
0x19db0009b330  30f0  0f8653490000   jna 0x19db0009fc89  <+0x7a49>
0x19db0009b336  30f6  8b420f         movl rax,[rdx+0xf]
0x19db0009b339  30f9  41f6c001       testb r8,0x1
0x19db0009b33d  30fd  0f844d490000   jz 0x19db0009fc90  <+0x7a50>
0x19db0009b343  3103  418b50ff       movl rdx,[r8-0x1]
0x19db0009b347  3107  4903d5         REX.W addq rdx,r13
0x19db0009b34a  310a  66817a072c04   cmpw [rdx+0x7],0x42c
0x19db0009b350  3110  0f8541490000   jnz 0x19db0009fc97  <+0x7a57>
0x19db0009b356  3116  418b5013       movl rdx,[r8+0x13]
0x19db0009b35a  311a  4903d5         REX.W addq rdx,r13
0x19db0009b35d  311d  48bbf5422f08db190000 REX.W movq rbx,0x19db082f42f5    ;; object: 0x19db082f42f5 <FeedbackCell[many closures]>
0x19db0009b367  3127  483bda         REX.W cmpq rbx,rdx
0x19db0009b36a  312a  0f852e490000   jnz 0x19db0009fc9e  <+0x7a5e>
0x19db0009b370  3130  458b600f       movl r12,[r8+0xf]
0x19db0009b374  3134  4d03e5         REX.W addq r12,r13
0x19db0009b377  3137  498b1b         REX.W movq rbx,[r11]
0x19db0009b37a  313a  488d93e0000000 REX.W leaq rdx,[rbx+0xe0]
0x19db0009b381  3141  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db0009b385  3145  4c894dc8       REX.W movq [rbp-0x38],r9
0x19db0009b389  3149  48894dc0       REX.W movq [rbp-0x40],rcx
0x19db0009b38d  314d  48897db8       REX.W movq [rbp-0x48],rdi
0x19db0009b391  3151  488945b0       REX.W movq [rbp-0x50],rax
0x19db0009b395  3155  4c8965a8       REX.W movq [rbp-0x58],r12
0x19db0009b399  3159  493917         REX.W cmpq [r15],rdx
0x19db0009b39c  315c  0f8608260000   jna 0x19db0009d9aa  <+0x576a>
0x19db0009b3a2  3162  488d5310       REX.W leaq rdx,[rbx+0x10]
0x19db0009b3a6  3166  498913         REX.W movq [r11],rdx
0x19db0009b3a9  3169  4c8d4301       REX.W leaq r8,[rbx+0x1]
0x19db0009b3ad  316d  458970ff       movl [r8-0x1],r14
0x19db0009b3b1  3171  498b9d58010000 REX.W movq rbx,[r13+0x158] (root (empty_fixed_array))
0x19db0009b3b8  3178  41895803       movl [r8+0x3],rbx
0x19db0009b3bc  317c  41b9e5562f08   movl r9,0x82f56e5       ;; (compressed) object: 0x19db082f56e5 <FixedArray[4]>
0x19db0009b3c2  3182  45894807       movl [r8+0x7],r9
0x19db0009b3c6  3186  41c7400b08000000 movl [r8+0xb],0x8
0x19db0009b3ce  318e  4c8d4a18       REX.W leaq r9,[rdx+0x18]
0x19db0009b3d2  3192  4d890b         REX.W movq [r11],r9
0x19db0009b3d5  3195  4883c201       REX.W addq rdx,0x1
0x19db0009b3d9  3199  4d8bb5d0000000 REX.W movq r14,[r13+0xd0] (root (fixed_array_map))
0x19db0009b3e0  31a0  448972ff       movl [rdx-0x1],r14
0x19db0009b3e4  31a4  c7420308000000 movl [rdx+0x3],0x8
0x19db0009b3eb  31ab  c7420700000000 movl [rdx+0x7],0x0
0x19db0009b3f2  31b2  c7420b00000000 movl [rdx+0xb],0x0
0x19db0009b3f9  31b9  c7420f00000000 movl [rdx+0xf],0x0
0x19db0009b400  31c0  44894213       movl [rdx+0x13],r8
0x19db0009b404  31c4  4d8d4110       REX.W leaq r8,[r9+0x10]
0x19db0009b408  31c8  4d8903         REX.W movq [r11],r8
0x19db0009b40b  31cb  4983c101       REX.W addq r9,0x1
0x19db0009b40f  31cf  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009b415  31d5  458971ff       movl [r9-0x1],r14
0x19db0009b419  31d9  41895903       movl [r9+0x3],rbx
0x19db0009b41d  31dd  41895107       movl [r9+0x7],rdx
0x19db0009b421  31e1  41c7410b08000000 movl [r9+0xb],0x8
0x19db0009b429  31e9  4d8d7028       REX.W leaq r14,[r8+0x28]
0x19db0009b42d  31ed  4d8933         REX.W movq [r11],r14
0x19db0009b430  31f0  4983c001       REX.W addq r8,0x1
0x19db0009b434  31f4  4d8bbdd8010000 REX.W movq r15,[r13+0x1d8] (root (fixed_double_array_map))
0x19db0009b43b  31fb  458978ff       movl [r8-0x1],r15
0x19db0009b43f  31ff  41c7400308000000 movl [r8+0x3],0x8
0x19db0009b447  3207  c4c17b114807   vmovsd [r8+0x7],xmm1
0x19db0009b44d  320d  c5e957d2       vxorpd xmm2,xmm2,xmm2
0x19db0009b451  3211  c4c17b11500f   vmovsd [r8+0xf],xmm2
0x19db0009b457  3217  c4c17b115017   vmovsd [r8+0x17],xmm2
0x19db0009b45d  321d  c4c17b11501f   vmovsd [r8+0x1f],xmm2
0x19db0009b463  3223  498d4610       REX.W leaq rax,[r14+0x10]
0x19db0009b467  3227  498903         REX.W movq [r11],rax
0x19db0009b46a  322a  4983c601       REX.W addq r14,0x1
0x19db0009b46e  322e  48b9559f3008db190000 REX.W movq rcx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009b478  3238  41894eff       movl [r14-0x1],rcx
0x19db0009b47c  323c  41895e03       movl [r14+0x3],rbx
0x19db0009b480  3240  45894607       movl [r14+0x7],r8
0x19db0009b484  3244  488b75c0       REX.W movq rsi,[rbp-0x40]
0x19db0009b488  3248  d1fe           sarl rsi, 1
0x19db0009b48a  324a  41c7460b08000000 movl [r14+0xb],0x8
0x19db0009b492  3252  c5832ae6       vcvtlsi2sd xmm4,xmm15,rsi
0x19db0009b496  3256  c4c17b11601f   vmovsd [r8+0x1f],xmm4
0x19db0009b49c  325c  44897207       movl [rdx+0x7],r14
0x19db0009b4a0  3260  4c8d4028       REX.W leaq r8,[rax+0x28]
0x19db0009b4a4  3264  4d8903         REX.W movq [r11],r8
0x19db0009b4a7  3267  4c8d7001       REX.W leaq r14,[rax+0x1]
0x19db0009b4ab  326b  45897eff       movl [r14-0x1],r15
0x19db0009b4af  326f  41c7460308000000 movl [r14+0x3],0x8
0x19db0009b4b7  3277  c4c17b115607   vmovsd [r14+0x7],xmm2
0x19db0009b4bd  327d  c4c17b114e0f   vmovsd [r14+0xf],xmm1
0x19db0009b4c3  3283  c4c17b115617   vmovsd [r14+0x17],xmm2
0x19db0009b4c9  3289  c4c17b11561f   vmovsd [r14+0x1f],xmm2
0x19db0009b4cf  328f  498d4010       REX.W leaq rax,[r8+0x10]
0x19db0009b4d3  3293  498903         REX.W movq [r11],rax
0x19db0009b4d6  3296  4983c001       REX.W addq r8,0x1
0x19db0009b4da  329a  418948ff       movl [r8-0x1],rcx
0x19db0009b4de  329e  41895803       movl [r8+0x3],rbx
0x19db0009b4e2  32a2  45897007       movl [r8+0x7],r14
0x19db0009b4e6  32a6  488bf7         REX.W movq rsi,rdi
0x19db0009b4e9  32a9  d1fe           sarl rsi, 1
0x19db0009b4eb  32ab  41c7400b08000000 movl [r8+0xb],0x8
0x19db0009b4f3  32b3  c5832ae6       vcvtlsi2sd xmm4,xmm15,rsi
0x19db0009b4f7  32b7  c4c17b11661f   vmovsd [r14+0x1f],xmm4
0x19db0009b4fd  32bd  4489420b       movl [rdx+0xb],r8
0x19db0009b501  32c1  4c8d4028       REX.W leaq r8,[rax+0x28]
0x19db0009b505  32c5  4d8903         REX.W movq [r11],r8
0x19db0009b508  32c8  4c8d7001       REX.W leaq r14,[rax+0x1]
0x19db0009b50c  32cc  45897eff       movl [r14-0x1],r15
0x19db0009b510  32d0  41c7460308000000 movl [r14+0x3],0x8
0x19db0009b518  32d8  c4c17b115607   vmovsd [r14+0x7],xmm2
0x19db0009b51e  32de  c4c17b11560f   vmovsd [r14+0xf],xmm2
0x19db0009b524  32e4  c4c17b114e17   vmovsd [r14+0x17],xmm1
0x19db0009b52a  32ea  c4c17b11561f   vmovsd [r14+0x1f],xmm2
0x19db0009b530  32f0  498d4010       REX.W leaq rax,[r8+0x10]
0x19db0009b534  32f4  498903         REX.W movq [r11],rax
0x19db0009b537  32f7  4983c001       REX.W addq r8,0x1
0x19db0009b53b  32fb  418948ff       movl [r8-0x1],rcx
0x19db0009b53f  32ff  41895803       movl [r8+0x3],rbx
0x19db0009b543  3303  45897007       movl [r8+0x7],r14
0x19db0009b547  3307  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db0009b54b  330b  d1f8           sarl rax, 1
0x19db0009b54d  330d  41c7400b08000000 movl [r8+0xb],0x8
0x19db0009b555  3315  c5832ac8       vcvtlsi2sd xmm1,xmm15,rax
0x19db0009b559  3319  c4c17b114e1f   vmovsd [r14+0x1f],xmm1
0x19db0009b55f  331f  4489420f       movl [rdx+0xf],r8
0x19db0009b563  3323  458b44243b     movl r8,[r12+0x3b]
0x19db0009b568  3328  4d03c5         REX.W addq r8,r13
0x19db0009b56b  332b  41f6c001       testb r8,0x1
0x19db0009b56f  332f  0f8430470000   jz 0x19db0009fca5  <+0x7a65>
0x19db0009b575  3335  458b70ff       movl r14,[r8-0x1]
0x19db0009b579  3339  4d03f5         REX.W addq r14,r13
0x19db0009b57c  333c  6641817e072c04 cmpw [r14+0x7],0x42c
0x19db0009b583  3343  0f8523470000   jnz 0x19db0009fcac  <+0x7a6c>
0x19db0009b589  3349  458b7013       movl r14,[r8+0x13]
0x19db0009b58d  334d  4d03f5         REX.W addq r14,r13
0x19db0009b590  3350  48b8d1422f08db190000 REX.W movq rax,0x19db082f42d1    ;; object: 0x19db082f42d1 <FeedbackCell[many closures]>
0x19db0009b59a  335a  4c3bf0         REX.W cmpq r14,rax
0x19db0009b59d  335d  0f8510470000   jnz 0x19db0009fcb3  <+0x7a73>
0x19db0009b5a3  3363  ff75c8         push [rbp-0x38]
0x19db0009b5a6  3366  4151           push r9
0x19db0009b5a8  3368  4d8b8d90000000 REX.W movq r9,[r13+0x90] (root (undefined_value))
0x19db0009b5af  336f  4151           push r9
0x19db0009b5b1  3371  488b55b0       REX.W movq rdx,[rbp-0x50]
0x19db0009b5b5  3375  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009b5bf  337f  4c8bf7         REX.W movq r14,rdi
0x19db0009b5c2  3382  498bf8         REX.W movq rdi,r8
0x19db0009b5c5  3385  b802000000     movl rax,0x2
0x19db0009b5ca  338a  4c8b45d8       REX.W movq r8,[rbp-0x28]
0x19db0009b5ce  338e  4c8bc8         REX.W movq r9,rax
0x19db0009b5d1  3391  49ba8079b8f5ff7f0000 REX.W movq r10,0x7ffff5b87980  (Call_ReceiverIsNullOrUndefined)    ;; off heap target
0x19db0009b5db  339b  41ffd2         call r10
0x19db0009b5de  339e  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009b5e2  33a2  894613         movl [rsi+0x13],rax
0x19db0009b5e5  33a5  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db0009b5ec  33ac  4c23c6         REX.W andq r8,rsi
0x19db0009b5ef  33af  41f6400804     testb [r8+0x8],0x4
0x19db0009b5f4  33b4  0f8537340000   jnz 0x19db0009ea31  <+0x67f1>
0x19db0009b5fa  33ba  448b463b       movl r8,[rsi+0x3b]
0x19db0009b5fe  33be  4d03c5         REX.W addq r8,r13
0x19db0009b601  33c1  448b4e17       movl r9,[rsi+0x17]
0x19db0009b605  33c5  4d03cd         REX.W addq r9,r13
0x19db0009b608  33c8  41f6c001       testb r8,0x1
0x19db0009b60c  33cc  0f84af460000   jz 0x19db0009fcc1  <+0x7a81>
0x19db0009b612  33d2  458b60ff       movl r12,[r8-0x1]
0x19db0009b616  33d6  4d03e5         REX.W addq r12,r13
0x19db0009b619  33d9  6641817c24072c04 cmpw [r12+0x7],0x42c
0x19db0009b621  33e1  0f85a1460000   jnz 0x19db0009fcc8  <+0x7a88>
0x19db0009b627  33e7  458b6013       movl r12,[r8+0x13]
0x19db0009b62b  33eb  4d03e5         REX.W addq r12,r13
0x19db0009b62e  33ee  49bbd1422f08db190000 REX.W movq r11,0x19db082f42d1    ;; object: 0x19db082f42d1 <FeedbackCell[many closures]>
0x19db0009b638  33f8  4d39e3         REX.W cmpq r11,r12
0x19db0009b63b  33fb  0f858e460000   jnz 0x19db0009fccf  <+0x7a8f>
0x19db0009b641  3401  458b600f       movl r12,[r8+0xf]
0x19db0009b645  3405  4c8b15e5cfffff REX.W movq r10,[rip+0xffffcfe5]
0x19db0009b64c  340c  4d39e2         REX.W cmpq r10,r12
0x19db0009b64f  340f  7712           ja 0x19db0009b663  <+0x3423>
0x19db0009b651  3411  488b15e8cfffff REX.W movq rdx,[rip+0xffffcfe8]
0x19db0009b658  3418  4c8b15f9cbffff REX.W movq r10,[rip+0xffffcbf9]
0x19db0009b65f  341f  41ffd2         call r10
0x19db0009b662  3422  cc             int3l
0x19db0009b663  3423  4c8b1d40ccffff REX.W movq r11,[rip+0xffffcc40]
0x19db0009b66a  342a  4d8b33         REX.W movq r14,[r11]
0x19db0009b66d  342d  4d8d7e68       REX.W leaq r15,[r14+0x68]
0x19db0009b671  3431  488945c0       REX.W movq [rbp-0x40],rax
0x19db0009b675  3435  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db0009b679  3439  4c894db8       REX.W movq [rbp-0x48],r9
0x19db0009b67d  343d  4c8965b0       REX.W movq [rbp-0x50],r12
0x19db0009b681  3441  488b1d33ccffff REX.W movq rbx,[rip+0xffffcc33]
0x19db0009b688  3448  4c393b         REX.W cmpq [rbx],r15
0x19db0009b68b  344b  0f8657230000   jna 0x19db0009d9e8  <+0x57a8>
0x19db0009b691  3451  4d8d7e10       REX.W leaq r15,[r14+0x10]
0x19db0009b695  3455  4d893b         REX.W movq [r11],r15
0x19db0009b698  3458  4983c601       REX.W addq r14,0x1
0x19db0009b69c  345c  48ba559f3008db190000 REX.W movq rdx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009b6a6  3466  418956ff       movl [r14-0x1],rdx
0x19db0009b6aa  346a  498b8d58010000 REX.W movq rcx,[r13+0x158] (root (empty_fixed_array))
0x19db0009b6b1  3471  41894e03       movl [r14+0x3],rcx
0x19db0009b6b5  3475  41894e07       movl [r14+0x7],rcx
0x19db0009b6b9  3479  41c7460b00000000 movl [r14+0xb],0x0
0x19db0009b6c1  3481  498d7f10       REX.W leaq rdi,[r15+0x10]
0x19db0009b6c5  3485  49893b         REX.W movq [r11],rdi
0x19db0009b6c8  3488  4983c701       REX.W addq r15,0x1
0x19db0009b6cc  348c  418957ff       movl [r15-0x1],rdx
0x19db0009b6d0  3490  41894f03       movl [r15+0x3],rcx
0x19db0009b6d4  3494  41894f07       movl [r15+0x7],rcx
0x19db0009b6d8  3498  41c7470b00000000 movl [r15+0xb],0x0
0x19db0009b6e0  34a0  488d7710       REX.W leaq rsi,[rdi+0x10]
0x19db0009b6e4  34a4  498933         REX.W movq [r11],rsi
0x19db0009b6e7  34a7  4883c701       REX.W addq rdi,0x1
0x19db0009b6eb  34ab  8957ff         movl [rdi-0x1],rdx
0x19db0009b6ee  34ae  894f03         movl [rdi+0x3],rcx
0x19db0009b6f1  34b1  894f07         movl [rdi+0x7],rcx
0x19db0009b6f4  34b4  c7470b00000000 movl [rdi+0xb],0x0
0x19db0009b6fb  34bb  4c8d4610       REX.W leaq r8,[rsi+0x10]
0x19db0009b6ff  34bf  4d8903         REX.W movq [r11],r8
0x19db0009b702  34c2  4883c601       REX.W addq rsi,0x1
0x19db0009b706  34c6  8956ff         movl [rsi-0x1],rdx
0x19db0009b709  34c9  894e03         movl [rsi+0x3],rcx
0x19db0009b70c  34cc  894e07         movl [rsi+0x7],rcx
0x19db0009b70f  34cf  c7460b00000000 movl [rsi+0xb],0x0
0x19db0009b716  34d6  4d8d6018       REX.W leaq r12,[r8+0x18]
0x19db0009b71a  34da  4d8923         REX.W movq [r11],r12
0x19db0009b71d  34dd  4983c001       REX.W addq r8,0x1
0x19db0009b721  34e1  498b9dd0000000 REX.W movq rbx,[r13+0xd0] (root (fixed_array_map))
0x19db0009b728  34e8  418958ff       movl [r8-0x1],rbx
0x19db0009b72c  34ec  41c7400308000000 movl [r8+0x3],0x8
0x19db0009b734  34f4  45897007       movl [r8+0x7],r14
0x19db0009b738  34f8  4589780b       movl [r8+0xb],r15
0x19db0009b73c  34fc  4189780f       movl [r8+0xf],rdi
0x19db0009b740  3500  41897013       movl [r8+0x13],rsi
0x19db0009b744  3504  498d542410     REX.W leaq rdx,[r12+0x10]
0x19db0009b749  3509  498913         REX.W movq [r11],rdx
0x19db0009b74c  350c  4983c401       REX.W addq r12,0x1
0x19db0009b750  3510  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009b756  3516  45897424ff     movl [r12-0x1],r14
0x19db0009b75b  351b  41894c2403     movl [r12+0x3],rcx
0x19db0009b760  3520  4589442407     movl [r12+0x7],r8
0x19db0009b765  3525  41c744240b08000000 movl [r12+0xb],0x8
0x19db0009b76e  352e  4c8965d0       REX.W movq [rbp-0x30],r12
0x19db0009b772  3532  4533c0         xorl r8,r8
0x19db0009b775  3535  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009b77f  353f  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009b785  3545  e90f000000     jmp 0x19db0009b799  <+0x3559>
0x19db0009b78a  354a  660f1f440000   nop
0x19db0009b790  3550  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009b796  3556  498bd9         REX.W movq rbx,r9
0x19db0009b799  3559  4183f804       cmpl r8,0x4
0x19db0009b79d  355d  0f8370060000   jnc 0x19db0009be13  <+0x3bd3>
0x19db0009b7a3  3563  418b4c2407     movl rcx,[r12+0x7]
0x19db0009b7a8  3568  4903cd         REX.W addq rcx,r13
0x19db0009b7ab  356b  458b4c240b     movl r9,[r12+0xb]
0x19db0009b7b0  3570  41d1f9         sarl r9, 1
0x19db0009b7b3  3573  453bc1         cmpl r8,r9
0x19db0009b7b6  3576  0f831a450000   jnc 0x19db0009fcd6  <+0x7a96>
0x19db0009b7bc  357c  468b4c8107     movl r9,[rcx+r8*4+0x7]
0x19db0009b7c1  3581  4d03cd         REX.W addq r9,r13
0x19db0009b7c4  3584  a801           test al,0x1
0x19db0009b7c6  3586  0f8411450000   jz 0x19db0009fcdd  <+0x7a9d>
0x19db0009b7cc  358c  443970ff       cmpl [rax-0x1],r14
0x19db0009b7d0  3590  0f850e450000   jnz 0x19db0009fce4  <+0x7aa4>
0x19db0009b7d6  3596  8b4807         movl rcx,[rax+0x7]
0x19db0009b7d9  3599  4903cd         REX.W addq rcx,r13
0x19db0009b7dc  359c  8b700b         movl rsi,[rax+0xb]
0x19db0009b7df  359f  d1fe           sarl rsi, 1
0x19db0009b7e1  35a1  443bc6         cmpl r8,rsi
0x19db0009b7e4  35a4  0f8301450000   jnc 0x19db0009fceb  <+0x7aab>
0x19db0009b7ea  35aa  428b448107     movl rax,[rcx+r8*4+0x7]
0x19db0009b7ef  35af  4903c5         REX.W addq rax,r13
0x19db0009b7f2  35b2  a801           test al,0x1
0x19db0009b7f4  35b4  0f84f8440000   jz 0x19db0009fcf2  <+0x7ab2>
0x19db0009b7fa  35ba  4c8945a8       REX.W movq [rbp-0x58],r8
0x19db0009b7fe  35be  4c898d60ffffff REX.W movq [rbp-0xa0],r9
0x19db0009b805  35c5  443978ff       cmpl [rax-0x1],r15
0x19db0009b809  35c9  0f8400220000   jz 0x19db0009da0f  <+0x57cf>
0x19db0009b80f  35cf  3958ff         cmpl [rax-0x1],rbx
0x19db0009b812  35d2  0f85e1440000   jnz 0x19db0009fcf9  <+0x7ab9>
0x19db0009b818  35d8  8b7007         movl rsi,[rax+0x7]
0x19db0009b81b  35db  4903f5         REX.W addq rsi,r13
0x19db0009b81e  35de  8b400b         movl rax,[rax+0xb]
0x19db0009b821  35e1  d1f8           sarl rax, 1
0x19db0009b823  35e3  83f800         cmpl rax,0x0
0x19db0009b826  35e6  0f86d4440000   jna 0x19db0009fd00  <+0x7ac0>
0x19db0009b82c  35ec  c5fb104607     vmovsd xmm0,[rsi+0x7]
0x19db0009b831  35f1  f645b801       testb [rbp-0x48],0x1
0x19db0009b835  35f5  0f84cc440000   jz 0x19db0009fd07  <+0x7ac7>
0x19db0009b83b  35fb  488b7db8       REX.W movq rdi,[rbp-0x48]
0x19db0009b83f  35ff  443977ff       cmpl [rdi-0x1],r14
0x19db0009b843  3603  0f85c5440000   jnz 0x19db0009fd0e  <+0x7ace>
0x19db0009b849  3609  448b7707       movl r14,[rdi+0x7]
0x19db0009b84d  360d  4d03f5         REX.W addq r14,r13
0x19db0009b850  3610  448b670b       movl r12,[rdi+0xb]
0x19db0009b854  3614  41d1fc         sarl r12, 1
0x19db0009b857  3617  4183fc00       cmpl r12,0x0
0x19db0009b85b  361b  0f86b4440000   jna 0x19db0009fd15  <+0x7ad5>
0x19db0009b861  3621  418b7e07       movl rdi,[r14+0x7]
0x19db0009b865  3625  4903fd         REX.W addq rdi,r13
0x19db0009b868  3628  40f6c701       testb rdi,0x1
0x19db0009b86c  362c  0f84aa440000   jz 0x19db0009fd1c  <+0x7adc>
0x19db0009b872  3632  44397fff       cmpl [rdi-0x1],r15
0x19db0009b876  3636  0f84f4210000   jz 0x19db0009da70  <+0x5830>
0x19db0009b87c  363c  395fff         cmpl [rdi-0x1],rbx
0x19db0009b87f  363f  0f859e440000   jnz 0x19db0009fd23  <+0x7ae3>
0x19db0009b885  3645  448b4f07       movl r9,[rdi+0x7]
0x19db0009b889  3649  4d03cd         REX.W addq r9,r13
0x19db0009b88c  364c  8b7f0b         movl rdi,[rdi+0xb]
0x19db0009b88f  364f  d1ff           sarl rdi, 1
0x19db0009b891  3651  83ff00         cmpl rdi,0x0
0x19db0009b894  3654  0f8690440000   jna 0x19db0009fd2a  <+0x7aea>
0x19db0009b89a  365a  c4c17b104907   vmovsd xmm1,[r9+0x7]
0x19db0009b8a0  3660  83f801         cmpl rax,0x1
0x19db0009b8a3  3663  0f8688440000   jna 0x19db0009fd31  <+0x7af1>
0x19db0009b8a9  3669  c5fb10560f     vmovsd xmm2,[rsi+0xf]
0x19db0009b8ae  366e  4183fc01       cmpl r12,0x1
0x19db0009b8b2  3672  0f8680440000   jna 0x19db0009fd38  <+0x7af8>
0x19db0009b8b8  3678  458b4e0b       movl r9,[r14+0xb]
0x19db0009b8bc  367c  4d03cd         REX.W addq r9,r13
0x19db0009b8bf  367f  41f6c101       testb r9,0x1
0x19db0009b8c3  3683  0f8476440000   jz 0x19db0009fd3f  <+0x7aff>
0x19db0009b8c9  3689  453979ff       cmpl [r9-0x1],r15
0x19db0009b8cd  368d  0f841d220000   jz 0x19db0009daf0  <+0x58b0>
0x19db0009b8d3  3693  413959ff       cmpl [r9-0x1],rbx
0x19db0009b8d7  3697  0f8569440000   jnz 0x19db0009fd46  <+0x7b06>
0x19db0009b8dd  369d  418b7907       movl rdi,[r9+0x7]
0x19db0009b8e1  36a1  4903fd         REX.W addq rdi,r13
0x19db0009b8e4  36a4  458b490b       movl r9,[r9+0xb]
0x19db0009b8e8  36a8  41d1f9         sarl r9, 1
0x19db0009b8eb  36ab  4183f900       cmpl r9,0x0
0x19db0009b8ef  36af  0f8658440000   jna 0x19db0009fd4d  <+0x7b0d>
0x19db0009b8f5  36b5  c5fb106707     vmovsd xmm4,[rdi+0x7]
0x19db0009b8fa  36ba  83f802         cmpl rax,0x2
0x19db0009b8fd  36bd  0f8651440000   jna 0x19db0009fd54  <+0x7b14>
0x19db0009b903  36c3  c5fb106e17     vmovsd xmm5,[rsi+0x17]
0x19db0009b908  36c8  4183fc02       cmpl r12,0x2
0x19db0009b90c  36cc  0f8649440000   jna 0x19db0009fd5b  <+0x7b1b>
0x19db0009b912  36d2  458b4e0f       movl r9,[r14+0xf]
0x19db0009b916  36d6  4d03cd         REX.W addq r9,r13
0x19db0009b919  36d9  41f6c101       testb r9,0x1
0x19db0009b91d  36dd  0f843f440000   jz 0x19db0009fd62  <+0x7b22>
0x19db0009b923  36e3  453979ff       cmpl [r9-0x1],r15
0x19db0009b927  36e7  0f8467220000   jz 0x19db0009db94  <+0x5954>
0x19db0009b92d  36ed  488bc3         REX.W movq rax,rbx
0x19db0009b930  36f0  413941ff       cmpl [r9-0x1],rax
0x19db0009b934  36f4  0f852f440000   jnz 0x19db0009fd69  <+0x7b29>
0x19db0009b93a  36fa  418b7107       movl rsi,[r9+0x7]
0x19db0009b93e  36fe  4903f5         REX.W addq rsi,r13
0x19db0009b941  3701  458b490b       movl r9,[r9+0xb]
0x19db0009b945  3705  41d1f9         sarl r9, 1
0x19db0009b948  3708  4183f900       cmpl r9,0x0
0x19db0009b94c  370c  0f861e440000   jna 0x19db0009fd70  <+0x7b30>
0x19db0009b952  3712  c5fb107607     vmovsd xmm6,[rsi+0x7]
0x19db0009b957  3717  468b4c8107     movl r9,[rcx+r8*4+0x7]
0x19db0009b95c  371c  4d03cd         REX.W addq r9,r13
0x19db0009b95f  371f  41f6c101       testb r9,0x1
0x19db0009b963  3723  0f840e440000   jz 0x19db0009fd77  <+0x7b37>
0x19db0009b969  3729  453979ff       cmpl [r9-0x1],r15
0x19db0009b96d  372d  0f84c9220000   jz 0x19db0009dc3c  <+0x59fc>
0x19db0009b973  3733  413941ff       cmpl [r9-0x1],rax
0x19db0009b977  3737  0f8501440000   jnz 0x19db0009fd7e  <+0x7b3e>
0x19db0009b97d  373d  418b4907       movl rcx,[r9+0x7]
0x19db0009b981  3741  4903cd         REX.W addq rcx,r13
0x19db0009b984  3744  458b490b       movl r9,[r9+0xb]
0x19db0009b988  3748  41d1f9         sarl r9, 1
0x19db0009b98b  374b  4183f903       cmpl r9,0x3
0x19db0009b98f  374f  0f86f0430000   jna 0x19db0009fd85  <+0x7b45>
0x19db0009b995  3755  c5fb10791f     vmovsd xmm7,[rcx+0x1f]
0x19db0009b99a  375a  4183fc03       cmpl r12,0x3
0x19db0009b99e  375e  0f86e8430000   jna 0x19db0009fd8c  <+0x7b4c>
0x19db0009b9a4  3764  458b4e13       movl r9,[r14+0x13]
0x19db0009b9a8  3768  4d03cd         REX.W addq r9,r13
0x19db0009b9ab  376b  41f6c101       testb r9,0x1
0x19db0009b9af  376f  0f84de430000   jz 0x19db0009fd93  <+0x7b53>
0x19db0009b9b5  3775  453979ff       cmpl [r9-0x1],r15
0x19db0009b9b9  3779  0f8427230000   jz 0x19db0009dce6  <+0x5aa6>
0x19db0009b9bf  377f  4c8be0         REX.W movq r12,rax
0x19db0009b9c2  3782  453961ff       cmpl [r9-0x1],r12
0x19db0009b9c6  3786  0f85ce430000   jnz 0x19db0009fd9a  <+0x7b5a>
0x19db0009b9cc  378c  458b7107       movl r14,[r9+0x7]
0x19db0009b9d0  3790  4d03f5         REX.W addq r14,r13
0x19db0009b9d3  3793  458b490b       movl r9,[r9+0xb]
0x19db0009b9d7  3797  41d1f9         sarl r9, 1
0x19db0009b9da  379a  4183f900       cmpl r9,0x0
0x19db0009b9de  379e  0f86bd430000   jna 0x19db0009fda1  <+0x7b61>
0x19db0009b9e4  37a4  c4417b104607   vmovsd xmm8,[r14+0x7]
0x19db0009b9ea  37aa  f68560ffffff01 testb [rbp-0xa0],0x1
0x19db0009b9f1  37b1  0f84b1430000   jz 0x19db0009fda8  <+0x7b68>
0x19db0009b9f7  37b7  4c8b8d60ffffff REX.W movq r9,[rbp-0xa0]
0x19db0009b9fe  37be  453979ff       cmpl [r9-0x1],r15
0x19db0009ba02  37c2  0f847c230000   jz 0x19db0009dd84  <+0x5b44>
0x19db0009ba08  37c8  453961ff       cmpl [r9-0x1],r12
0x19db0009ba0c  37cc  0f859d430000   jnz 0x19db0009fdaf  <+0x7b6f>
0x19db0009ba12  37d2  458b7107       movl r14,[r9+0x7]
0x19db0009ba16  37d6  4d03f5         REX.W addq r14,r13
0x19db0009ba19  37d9  418b410b       movl rax,[r9+0xb]
0x19db0009ba1d  37dd  418b4e03       movl rcx,[r14+0x3]
0x19db0009ba21  37e1  d1f8           sarl rax, 1
0x19db0009ba23  37e3  8d7001         leal rsi,[rax+0x1]
0x19db0009ba26  37e6  4c8b1504ccffff REX.W movq r10,[rip+0xffffcc04]
0x19db0009ba2d  37ed  4c3bd6         REX.W cmpq r10,rsi
0x19db0009ba30  37f0  7712           ja 0x19db0009ba44  <+0x3804>
0x19db0009ba32  37f2  488b1507ccffff REX.W movq rdx,[rip+0xffffcc07]
0x19db0009ba39  37f9  4c8b1518c8ffff REX.W movq r10,[rip+0xffffc818]
0x19db0009ba40  3800  41ffd2         call r10
0x19db0009ba43  3803  cc             int3l
0x19db0009ba44  3804  83fe00         cmpl rsi,0x0
0x19db0009ba47  3807  0f86bb2e0000   jna 0x19db0009e908  <+0x66c8>
0x19db0009ba4d  380d  d1f9           sarl rcx, 1
0x19db0009ba4f  380f  83f900         cmpl rcx,0x0
0x19db0009ba52  3812  0f86d1230000   jna 0x19db0009de29  <+0x5be9>
0x19db0009ba58  3818  83f800         cmpl rax,0x0
0x19db0009ba5b  381b  0f8708000000   ja 0x19db0009ba69  <+0x3829>
0x19db0009ba61  3821  41c7410b02000000 movl [r9+0xb],0x2
0x19db0009ba69  3829  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db0009ba6d  382d  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db0009ba71  3831  c5cb59cd       vmulsd xmm1,xmm6,xmm5
0x19db0009ba75  3835  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db0009ba79  3839  c5bb59d7       vmulsd xmm2,xmm8,xmm7
0x19db0009ba7d  383d  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db0009ba81  3841  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db0009ba85  3845  c4c17b114607   vmovsd [r14+0x7],xmm0
0x19db0009ba8b  384b  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009ba8f  384f  0f864d240000   jna 0x19db0009dee2  <+0x5ca2>
0x19db0009ba95  3855  41be01000000   movl r14,0x1
0x19db0009ba9b  385b  4d89e1         REX.W movq r9,r12
0x19db0009ba9e  385e  488b5db8       REX.W movq rbx,[rbp-0x48]
0x19db0009baa2  3862  e90c000000     jmp 0x19db0009bab3  <+0x3873>
0x19db0009baa7  3867  660f1f840000000000 nop
0x19db0009bab0  3870  4c8bf1         REX.W movq r14,rcx
0x19db0009bab3  3873  4c8b65d0       REX.W movq r12,[rbp-0x30]
0x19db0009bab7  3877  488b45c0       REX.W movq rax,[rbp-0x40]
0x19db0009babb  387b  4183fe04       cmpl r14,0x4
0x19db0009babf  387f  0f831d030000   jnc 0x19db0009bde2  <+0x3ba2>
0x19db0009bac5  3885  418b4c2407     movl rcx,[r12+0x7]
0x19db0009baca  388a  4903cd         REX.W addq rcx,r13
0x19db0009bacd  388d  418b54240b     movl rdx,[r12+0xb]
0x19db0009bad2  3892  d1fa           sarl rdx, 1
0x19db0009bad4  3894  443bc2         cmpl r8,rdx
0x19db0009bad7  3897  0f83d9420000   jnc 0x19db0009fdb6  <+0x7b76>
0x19db0009badd  389d  428b548107     movl rdx,[rcx+r8*4+0x7]
0x19db0009bae2  38a2  4903d5         REX.W addq rdx,r13
0x19db0009bae5  38a5  8b4807         movl rcx,[rax+0x7]
0x19db0009bae8  38a8  4903cd         REX.W addq rcx,r13
0x19db0009baeb  38ab  8b700b         movl rsi,[rax+0xb]
0x19db0009baee  38ae  d1fe           sarl rsi, 1
0x19db0009baf0  38b0  443bc6         cmpl r8,rsi
0x19db0009baf3  38b3  0f83c4420000   jnc 0x19db0009fdbd  <+0x7b7d>
0x19db0009baf9  38b9  468b648107     movl r12,[rcx+r8*4+0x7]
0x19db0009bafe  38be  4d03e5         REX.W addq r12,r13
0x19db0009bb01  38c1  41f6c401       testb r12,0x1
0x19db0009bb05  38c5  0f84b9420000   jz 0x19db0009fdc4  <+0x7b84>
0x19db0009bb0b  38cb  48899558ffffff REX.W movq [rbp-0xa8],rdx
0x19db0009bb12  38d2  45397c24ff     cmpl [r12-0x1],r15
0x19db0009bb17  38d7  0f8402240000   jz 0x19db0009df1f  <+0x5cdf>
0x19db0009bb1d  38dd  45394c24ff     cmpl [r12-0x1],r9
0x19db0009bb22  38e2  0f85a3420000   jnz 0x19db0009fdcb  <+0x7b8b>
0x19db0009bb28  38e8  418b442407     movl rax,[r12+0x7]
0x19db0009bb2d  38ed  4903c5         REX.W addq rax,r13
0x19db0009bb30  38f0  458b64240b     movl r12,[r12+0xb]
0x19db0009bb35  38f5  41d1fc         sarl r12, 1
0x19db0009bb38  38f8  4183fc00       cmpl r12,0x0
0x19db0009bb3c  38fc  0f8690420000   jna 0x19db0009fdd2  <+0x7b92>
0x19db0009bb42  3902  c5fb104007     vmovsd xmm0,[rax+0x7]
0x19db0009bb47  3907  8b7307         movl rsi,[rbx+0x7]
0x19db0009bb4a  390a  4903f5         REX.W addq rsi,r13
0x19db0009bb4d  390d  8b7b0b         movl rdi,[rbx+0xb]
0x19db0009bb50  3910  d1ff           sarl rdi, 1
0x19db0009bb52  3912  83ff00         cmpl rdi,0x0
0x19db0009bb55  3915  0f867e420000   jna 0x19db0009fdd9  <+0x7b99>
0x19db0009bb5b  391b  8b5607         movl rdx,[rsi+0x7]
0x19db0009bb5e  391e  4903d5         REX.W addq rdx,r13
0x19db0009bb61  3921  f6c201         testb rdx,0x1
0x19db0009bb64  3924  0f8476420000   jz 0x19db0009fde0  <+0x7ba0>
0x19db0009bb6a  392a  44397aff       cmpl [rdx-0x1],r15
0x19db0009bb6e  392e  0f8410240000   jz 0x19db0009df84  <+0x5d44>
0x19db0009bb74  3934  44394aff       cmpl [rdx-0x1],r9
0x19db0009bb78  3938  0f8569420000   jnz 0x19db0009fde7  <+0x7ba7>
0x19db0009bb7e  393e  448b4207       movl r8,[rdx+0x7]
0x19db0009bb82  3942  4d03c5         REX.W addq r8,r13
0x19db0009bb85  3945  8b520b         movl rdx,[rdx+0xb]
0x19db0009bb88  3948  d1fa           sarl rdx, 1
0x19db0009bb8a  394a  443bf2         cmpl r14,rdx
0x19db0009bb8d  394d  0f835b420000   jnc 0x19db0009fdee  <+0x7bae>
0x19db0009bb93  3953  c4817b104cf007 vmovsd xmm1,[r8+r14*8+0x7]
0x19db0009bb9a  395a  4183fc01       cmpl r12,0x1
0x19db0009bb9e  395e  0f8651420000   jna 0x19db0009fdf5  <+0x7bb5>
0x19db0009bba4  3964  c5fb10500f     vmovsd xmm2,[rax+0xf]
0x19db0009bba9  3969  83ff01         cmpl rdi,0x1
0x19db0009bbac  396c  0f864a420000   jna 0x19db0009fdfc  <+0x7bbc>
0x19db0009bbb2  3972  448b460b       movl r8,[rsi+0xb]
0x19db0009bbb6  3976  4d03c5         REX.W addq r8,r13
0x19db0009bbb9  3979  41f6c001       testb r8,0x1
0x19db0009bbbd  397d  0f8440420000   jz 0x19db0009fe03  <+0x7bc3>
0x19db0009bbc3  3983  453978ff       cmpl [r8-0x1],r15
0x19db0009bbc7  3987  0f844a240000   jz 0x19db0009e017  <+0x5dd7>
0x19db0009bbcd  398d  453948ff       cmpl [r8-0x1],r9
0x19db0009bbd1  3991  0f8533420000   jnz 0x19db0009fe0a  <+0x7bca>
0x19db0009bbd7  3997  418b5007       movl rdx,[r8+0x7]
0x19db0009bbdb  399b  4903d5         REX.W addq rdx,r13
0x19db0009bbde  399e  458b400b       movl r8,[r8+0xb]
0x19db0009bbe2  39a2  41d1f8         sarl r8, 1
0x19db0009bbe5  39a5  453bf0         cmpl r14,r8
0x19db0009bbe8  39a8  0f8323420000   jnc 0x19db0009fe11  <+0x7bd1>
0x19db0009bbee  39ae  c4a17b1064f207 vmovsd xmm4,[rdx+r14*8+0x7]
0x19db0009bbf5  39b5  4183fc02       cmpl r12,0x2
0x19db0009bbf9  39b9  0f8619420000   jna 0x19db0009fe18  <+0x7bd8>
0x19db0009bbff  39bf  4c8bc0         REX.W movq r8,rax
0x19db0009bc02  39c2  c4c17b106817   vmovsd xmm5,[r8+0x17]
0x19db0009bc08  39c8  83ff02         cmpl rdi,0x2
0x19db0009bc0b  39cb  0f860e420000   jna 0x19db0009fe1f  <+0x7bdf>
0x19db0009bc11  39d1  448b460f       movl r8,[rsi+0xf]
0x19db0009bc15  39d5  4d03c5         REX.W addq r8,r13
0x19db0009bc18  39d8  41f6c001       testb r8,0x1
0x19db0009bc1c  39dc  0f8404420000   jz 0x19db0009fe26  <+0x7be6>
0x19db0009bc22  39e2  453978ff       cmpl [r8-0x1],r15
0x19db0009bc26  39e6  0f849e240000   jz 0x19db0009e0ca  <+0x5e8a>
0x19db0009bc2c  39ec  453948ff       cmpl [r8-0x1],r9
0x19db0009bc30  39f0  0f85f7410000   jnz 0x19db0009fe2d  <+0x7bed>
0x19db0009bc36  39f6  458b6007       movl r12,[r8+0x7]
0x19db0009bc3a  39fa  4d03e5         REX.W addq r12,r13
0x19db0009bc3d  39fd  458b400b       movl r8,[r8+0xb]
0x19db0009bc41  3a01  41d1f8         sarl r8, 1
0x19db0009bc44  3a04  453bf0         cmpl r14,r8
0x19db0009bc47  3a07  0f83e7410000   jnc 0x19db0009fe34  <+0x7bf4>
0x19db0009bc4d  3a0d  c4017b1044f407 vmovsd xmm8,[r12+r14*8+0x7]
0x19db0009bc54  3a14  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009bc58  3a18  468b648107     movl r12,[rcx+r8*4+0x7]
0x19db0009bc5d  3a1d  4d03e5         REX.W addq r12,r13
0x19db0009bc60  3a20  41f6c401       testb r12,0x1
0x19db0009bc64  3a24  0f84d1410000   jz 0x19db0009fe3b  <+0x7bfb>
0x19db0009bc6a  3a2a  45397c24ff     cmpl [r12-0x1],r15
0x19db0009bc6f  3a2f  0f840f250000   jz 0x19db0009e184  <+0x5f44>
0x19db0009bc75  3a35  45394c24ff     cmpl [r12-0x1],r9
0x19db0009bc7a  3a3a  0f85c2410000   jnz 0x19db0009fe42  <+0x7c02>
0x19db0009bc80  3a40  418b442407     movl rax,[r12+0x7]
0x19db0009bc85  3a45  4903c5         REX.W addq rax,r13
0x19db0009bc88  3a48  458b64240b     movl r12,[r12+0xb]
0x19db0009bc8d  3a4d  41d1fc         sarl r12, 1
0x19db0009bc90  3a50  4183fc03       cmpl r12,0x3
0x19db0009bc94  3a54  0f86af410000   jna 0x19db0009fe49  <+0x7c09>
0x19db0009bc9a  3a5a  c5fb10701f     vmovsd xmm6,[rax+0x1f]
0x19db0009bc9f  3a5f  83ff03         cmpl rdi,0x3
0x19db0009bca2  3a62  0f86a8410000   jna 0x19db0009fe50  <+0x7c10>
0x19db0009bca8  3a68  4c8be6         REX.W movq r12,rsi
0x19db0009bcab  3a6b  458b642413     movl r12,[r12+0x13]
0x19db0009bcb0  3a70  4d03e5         REX.W addq r12,r13
0x19db0009bcb3  3a73  41f6c401       testb r12,0x1
0x19db0009bcb7  3a77  0f849a410000   jz 0x19db0009fe57  <+0x7c17>
0x19db0009bcbd  3a7d  45397c24ff     cmpl [r12-0x1],r15
0x19db0009bcc2  3a82  0f847c250000   jz 0x19db0009e244  <+0x6004>
0x19db0009bcc8  3a88  45394c24ff     cmpl [r12-0x1],r9
0x19db0009bccd  3a8d  0f858b410000   jnz 0x19db0009fe5e  <+0x7c1e>
0x19db0009bcd3  3a93  418b442407     movl rax,[r12+0x7]
0x19db0009bcd8  3a98  4903c5         REX.W addq rax,r13
0x19db0009bcdb  3a9b  458b64240b     movl r12,[r12+0xb]
0x19db0009bce0  3aa0  41d1fc         sarl r12, 1
0x19db0009bce3  3aa3  4539e6         cmpl r14,r12
0x19db0009bce6  3aa6  0f8379410000   jnc 0x19db0009fe65  <+0x7c25>
0x19db0009bcec  3aac  c4217b104cf007 vmovsd xmm9,[rax+r14*8+0x7]
0x19db0009bcf3  3ab3  f68558ffffff01 testb [rbp-0xa8],0x1
0x19db0009bcfa  3aba  0f846c410000   jz 0x19db0009fe6c  <+0x7c2c>
0x19db0009bd00  3ac0  488b9558ffffff REX.W movq rdx,[rbp-0xa8]
0x19db0009bd07  3ac7  44397aff       cmpl [rdx-0x1],r15
0x19db0009bd0b  3acb  0f84ea250000   jz 0x19db0009e2fb  <+0x60bb>
0x19db0009bd11  3ad1  44394aff       cmpl [rdx-0x1],r9
0x19db0009bd15  3ad5  0f8558410000   jnz 0x19db0009fe73  <+0x7c33>
0x19db0009bd1b  3adb  448b6207       movl r12,[rdx+0x7]
0x19db0009bd1f  3adf  4d03e5         REX.W addq r12,r13
0x19db0009bd22  3ae2  8b420b         movl rax,[rdx+0xb]
0x19db0009bd25  3ae5  d1f8           sarl rax, 1
0x19db0009bd27  3ae7  418b4c2403     movl rcx,[r12+0x3]
0x19db0009bd2c  3aec  d1f9           sarl rcx, 1
0x19db0009bd2e  3aee  8d7001         leal rsi,[rax+0x1]
0x19db0009bd31  3af1  4c8b15f9c8ffff REX.W movq r10,[rip+0xffffc8f9]
0x19db0009bd38  3af8  4c3bd6         REX.W cmpq r10,rsi
0x19db0009bd3b  3afb  7712           ja 0x19db0009bd4f  <+0x3b0f>
0x19db0009bd3d  3afd  488b15fcc8ffff REX.W movq rdx,[rip+0xffffc8fc]
0x19db0009bd44  3b04  4c8b150dc5ffff REX.W movq r10,[rip+0xffffc50d]
0x19db0009bd4b  3b0b  41ffd2         call r10
0x19db0009bd4e  3b0e  cc             int3l
0x19db0009bd4f  3b0f  443bf6         cmpl r14,rsi
0x19db0009bd52  3b12  0f8322410000   jnc 0x19db0009fe7a  <+0x7c3a>
0x19db0009bd58  3b18  443bf1         cmpl r14,rcx
0x19db0009bd5b  3b1b  0f8359260000   jnc 0x19db0009e3ba  <+0x617a>
0x19db0009bd61  3b21  418d4e01       leal rcx,[r14+0x1]
0x19db0009bd65  3b25  4c8b15c5c8ffff REX.W movq r10,[rip+0xffffc8c5]
0x19db0009bd6c  3b2c  4c3bd1         REX.W cmpq r10,rcx
0x19db0009bd6f  3b2f  7712           ja 0x19db0009bd83  <+0x3b43>
0x19db0009bd71  3b31  488b15c8c8ffff REX.W movq rdx,[rip+0xffffc8c8]
0x19db0009bd78  3b38  4c8b15d9c4ffff REX.W movq r10,[rip+0xffffc4d9]
0x19db0009bd7f  3b3f  41ffd2         call r10
0x19db0009bd82  3b42  cc             int3l
0x19db0009bd83  3b43  443bf0         cmpl r14,rax
0x19db0009bd86  3b46  0f8224000000   jc 0x19db0009bdb0  <+0x3b70>
0x19db0009bd8c  3b4c  8d0409         leal rax,[rcx+rcx*1]
0x19db0009bd8f  3b4f  4c8b159bc8ffff REX.W movq r10,[rip+0xffffc89b]
0x19db0009bd96  3b56  4c3bd0         REX.W cmpq r10,rax
0x19db0009bd99  3b59  7712           ja 0x19db0009bdad  <+0x3b6d>
0x19db0009bd9b  3b5b  488b159ec8ffff REX.W movq rdx,[rip+0xffffc89e]
0x19db0009bda2  3b62  4c8b15afc4ffff REX.W movq r10,[rip+0xffffc4af]
0x19db0009bda9  3b69  41ffd2         call r10
0x19db0009bdac  3b6c  cc             int3l
0x19db0009bdad  3b6d  89420b         movl [rdx+0xb],rax
0x19db0009bdb0  3b70  c5db59d2       vmulsd xmm2,xmm4,xmm2
0x19db0009bdb4  3b74  c5f359c0       vmulsd xmm0,xmm1,xmm0
0x19db0009bdb8  3b78  c5bb59cd       vmulsd xmm1,xmm8,xmm5
0x19db0009bdbc  3b7c  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db0009bdc0  3b80  c5b359d6       vmulsd xmm2,xmm9,xmm6
0x19db0009bdc4  3b84  c5f358c0       vaddsd xmm0,xmm1,xmm0
0x19db0009bdc8  3b88  c5eb58c0       vaddsd xmm0,xmm2,xmm0
0x19db0009bdcc  3b8c  c4817b1144f407 vmovsd [r12+r14*8+0x7],xmm0
0x19db0009bdd3  3b93  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009bdd7  3b97  0f87d3fcffff   ja 0x19db0009bab0  <+0x3870>
0x19db0009bddd  3b9d  e9cc260000     jmp 0x19db0009e4ae  <+0x626e>
0x19db0009bde2  3ba2  4183c001       addl r8,0x1
0x19db0009bde6  3ba6  4c8b1544c8ffff REX.W movq r10,[rip+0xffffc844]
0x19db0009bded  3bad  4d3bd0         REX.W cmpq r10,r8
0x19db0009bdf0  3bb0  7712           ja 0x19db0009be04  <+0x3bc4>
0x19db0009bdf2  3bb2  488b1547c8ffff REX.W movq rdx,[rip+0xffffc847]
0x19db0009bdf9  3bb9  4c8b1558c4ffff REX.W movq r10,[rip+0xffffc458]
0x19db0009be00  3bc0  41ffd2         call r10
0x19db0009be03  3bc3  cc             int3l
0x19db0009be04  3bc4  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009be08  3bc8  0f8782f9ffff   ja 0x19db0009b790  <+0x3550>
0x19db0009be0e  3bce  e9e7260000     jmp 0x19db0009e4fa  <+0x62ba>
0x19db0009be13  3bd3  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009be17  3bd7  4d89e0         REX.W movq r8,r12
0x19db0009be1a  3bda  44894617       movl [rsi+0x17],r8
0x19db0009be1e  3bde  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009be25  3be5  4c23ce         REX.W andq r9,rsi
0x19db0009be28  3be8  41f6410804     testb [r9+0x8],0x4
0x19db0009be2d  3bed  0f85b72b0000   jnz 0x19db0009e9ea  <+0x67aa>
0x19db0009be33  3bf3  4533c0         xorl r8,r8
0x19db0009be36  3bf6  e926000000     jmp 0x19db0009be61  <+0x3c21>
0x19db0009be3b  3bfb  0f1f440000     nop
0x19db0009be40  3c00  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009be46  3c06  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009be4a  3c0a  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009be54  3c14  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009be5a  3c1a  4c8b1d49c4ffff REX.W movq r11,[rip+0xffffc449]
0x19db0009be61  3c21  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009be67  3c27  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009be6f  3c2f  4d8ba5d8010000 REX.W movq r12,[r13+0x1d8] (root (fixed_double_array_map))
0x19db0009be76  3c36  4183f809       cmpl r8,0x9
0x19db0009be7a  3c3a  0f83d3040000   jnc 0x19db0009c353  <+0x4113>
0x19db0009be80  3c40  8b460f         movl rax,[rsi+0xf]
0x19db0009be83  3c43  4903c5         REX.W addq rax,r13
0x19db0009be86  3c46  a801           test al,0x1
0x19db0009be88  3c48  0f84f33f0000   jz 0x19db0009fe81  <+0x7c41>
0x19db0009be8e  3c4e  8b50ff         movl rdx,[rax-0x1]
0x19db0009be91  3c51  4c8b1599c7ffff REX.W movq r10,[rip+0xffffc799]
0x19db0009be98  3c58  4c3bd2         REX.W cmpq r10,rdx
0x19db0009be9b  3c5b  7712           ja 0x19db0009beaf  <+0x3c6f>
0x19db0009be9d  3c5d  488b159cc7ffff REX.W movq rdx,[rip+0xffffc79c]
0x19db0009bea4  3c64  4c8b15adc3ffff REX.W movq r10,[rip+0xffffc3ad]
0x19db0009beab  3c6b  41ffd2         call r10
0x19db0009beae  3c6e  cc             int3l
0x19db0009beaf  3c6f  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db0009beb3  3c73  413bd1         cmpl rdx,r9
0x19db0009beb6  3c76  0f840d000000   jz 0x19db0009bec9  <+0x3c89>
0x19db0009bebc  3c7c  b945dc3008     movl rcx,0x830dc45      ;; (compressed) object: 0x19db0830dc45 <Map(PACKED_ELEMENTS)>
0x19db0009bec1  3c81  3bca           cmpl rcx,rdx
0x19db0009bec3  3c83  0f85bf3f0000   jnz 0x19db0009fe88  <+0x7c48>
0x19db0009bec9  3c89  8b5007         movl rdx,[rax+0x7]
0x19db0009becc  3c8c  4903d5         REX.W addq rdx,r13
0x19db0009becf  3c8f  8b400b         movl rax,[rax+0xb]
0x19db0009bed2  3c92  d1f8           sarl rax, 1
0x19db0009bed4  3c94  443bc0         cmpl r8,rax
0x19db0009bed7  3c97  0f83b23f0000   jnc 0x19db0009fe8f  <+0x7c4f>
0x19db0009bedd  3c9d  428b548207     movl rdx,[rdx+r8*4+0x7]
0x19db0009bee2  3ca2  4903d5         REX.W addq rdx,r13
0x19db0009bee5  3ca5  8b463f         movl rax,[rsi+0x3f]
0x19db0009bee8  3ca8  4903c5         REX.W addq rax,r13
0x19db0009beeb  3cab  8b4e13         movl rcx,[rsi+0x13]
0x19db0009beee  3cae  4903cd         REX.W addq rcx,r13
0x19db0009bef1  3cb1  488955c8       REX.W movq [rbp-0x38],rdx
0x19db0009bef5  3cb5  488945b8       REX.W movq [rbp-0x48],rax
0x19db0009bef9  3cb9  48894db0       REX.W movq [rbp-0x50],rcx
0x19db0009befd  3cbd  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0009bf07  3cc7  b820010000     movl rax,0x120
0x19db0009bf0c  3ccc  488bde         REX.W movq rbx,rsi
0x19db0009bf0f  3ccf  488bfa         REX.W movq rdi,rdx
0x19db0009bf12  3cd2  4c8b150be3ffff REX.W movq r10,[rip+0xffffe30b]
0x19db0009bf19  3cd9  41ffd2         call r10
0x19db0009bf1c  3cdc  f645b801       testb [rbp-0x48],0x1
0x19db0009bf20  3ce0  0f84773f0000   jz 0x19db0009fe9d  <+0x7c5d>
0x19db0009bf26  3ce6  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db0009bf2a  3cea  458b48ff       movl r9,[r8-0x1]
0x19db0009bf2e  3cee  4d03cd         REX.W addq r9,r13
0x19db0009bf31  3cf1  66418179072c04 cmpw [r9+0x7],0x42c
0x19db0009bf38  3cf8  0f85663f0000   jnz 0x19db0009fea4  <+0x7c64>
0x19db0009bf3e  3cfe  458b4813       movl r9,[r8+0x13]
0x19db0009bf42  3d02  4d03cd         REX.W addq r9,r13
0x19db0009bf45  3d05  49bbdd422f08db190000 REX.W movq r11,0x19db082f42dd    ;; object: 0x19db082f42dd <FeedbackCell[many closures]>
0x19db0009bf4f  3d0f  4d3bd9         REX.W cmpq r11,r9
0x19db0009bf52  3d12  0f85533f0000   jnz 0x19db0009feab  <+0x7c6b>
0x19db0009bf58  3d18  458b480f       movl r9,[r8+0xf]
0x19db0009bf5c  3d1c  4c8b15cec6ffff REX.W movq r10,[rip+0xffffc6ce]
0x19db0009bf63  3d23  4d3bd1         REX.W cmpq r10,r9
0x19db0009bf66  3d26  7712           ja 0x19db0009bf7a  <+0x3d3a>
0x19db0009bf68  3d28  488b15d1c6ffff REX.W movq rdx,[rip+0xffffc6d1]
0x19db0009bf6f  3d2f  4c8b15e2c2ffff REX.W movq r10,[rip+0xffffc2e2]
0x19db0009bf76  3d36  41ffd2         call r10
0x19db0009bf79  3d39  cc             int3l
0x19db0009bf7a  3d3a  4c8b1d29c3ffff REX.W movq r11,[rip+0xffffc329]
0x19db0009bf81  3d41  4d8b23         REX.W movq r12,[r11]
0x19db0009bf84  3d44  498d542438     REX.W leaq rdx,[r12+0x38]
0x19db0009bf89  3d49  4c894da0       REX.W movq [rbp-0x60],r9
0x19db0009bf8d  3d4d  4c8b3527c3ffff REX.W movq r14,[rip+0xffffc327]
0x19db0009bf94  3d54  493916         REX.W cmpq [r14],rdx
0x19db0009bf97  3d57  0f86b0250000   jna 0x19db0009e54d  <+0x630d>
0x19db0009bf9d  3d5d  498d542428     REX.W leaq rdx,[r12+0x28]
0x19db0009bfa2  3d62  498913         REX.W movq [r11],rdx
0x19db0009bfa5  3d65  4983c401       REX.W addq r12,0x1
0x19db0009bfa9  3d69  4d8bbdd8010000 REX.W movq r15,[r13+0x1d8] (root (fixed_double_array_map))
0x19db0009bfb0  3d70  45897c24ff     movl [r12-0x1],r15
0x19db0009bfb5  3d75  41c744240308000000 movl [r12+0x3],0x8
0x19db0009bfbe  3d7e  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009bfc6  3d86  c4c17b11442407 vmovsd [r12+0x7],xmm0
0x19db0009bfcd  3d8d  c4c17b1144240f vmovsd [r12+0xf],xmm0
0x19db0009bfd4  3d94  c4c17b11442417 vmovsd [r12+0x17],xmm0
0x19db0009bfdb  3d9b  c4c17b1144241f vmovsd [r12+0x1f],xmm0
0x19db0009bfe2  3da2  488d4a10       REX.W leaq rcx,[rdx+0x10]
0x19db0009bfe6  3da6  49890b         REX.W movq [r11],rcx
0x19db0009bfe9  3da9  4883c201       REX.W addq rdx,0x1
0x19db0009bfed  3dad  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009bff7  3db7  895aff         movl [rdx-0x1],rbx
0x19db0009bffa  3dba  498b8d58010000 REX.W movq rcx,[r13+0x158] (root (empty_fixed_array))
0x19db0009c001  3dc1  894a03         movl [rdx+0x3],rcx
0x19db0009c004  3dc4  44896207       movl [rdx+0x7],r12
0x19db0009c008  3dc8  c7420b00000000 movl [rdx+0xb],0x0
0x19db0009c00f  3dcf  f645b001       testb [rbp-0x50],0x1
0x19db0009c013  3dd3  0f84993e0000   jz 0x19db0009feb2  <+0x7c72>
0x19db0009c019  3dd9  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db0009c01d  3ddd  bfa59f3008     movl rdi,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009c022  3de2  397eff         cmpl [rsi-0x1],rdi
0x19db0009c025  3de5  0f858e3e0000   jnz 0x19db0009feb9  <+0x7c79>
0x19db0009c02b  3deb  448b7607       movl r14,[rsi+0x7]
0x19db0009c02f  3def  4d03f5         REX.W addq r14,r13
0x19db0009c032  3df2  448b7e0b       movl r15,[rsi+0xb]
0x19db0009c036  3df6  41d1ff         sarl r15, 1
0x19db0009c039  3df9  4183ff00       cmpl r15,0x0
0x19db0009c03d  3dfd  0f867d3e0000   jna 0x19db0009fec0  <+0x7c80>
0x19db0009c043  3e03  458b7607       movl r14,[r14+0x7]
0x19db0009c047  3e07  4d03f5         REX.W addq r14,r13
0x19db0009c04a  3e0a  41f6c601       testb r14,0x1
0x19db0009c04e  3e0e  0f84733e0000   jz 0x19db0009fec7  <+0x7c87>
0x19db0009c054  3e14  41395eff       cmpl [r14-0x1],rbx
0x19db0009c058  3e18  0f85703e0000   jnz 0x19db0009fece  <+0x7c8e>
0x19db0009c05e  3e1e  458b7e07       movl r15,[r14+0x7]
0x19db0009c062  3e22  4d03fd         REX.W addq r15,r13
0x19db0009c065  3e25  458b760b       movl r14,[r14+0xb]
0x19db0009c069  3e29  41d1fe         sarl r14, 1
0x19db0009c06c  3e2c  4183fe00       cmpl r14,0x0
0x19db0009c070  3e30  0f865f3e0000   jna 0x19db0009fed5  <+0x7c95>
0x19db0009c076  3e36  c4c17b104f07   vmovsd xmm1,[r15+0x7]
0x19db0009c07c  3e3c  a801           test al,0x1
0x19db0009c07e  3e3e  0f84583e0000   jz 0x19db0009fedc  <+0x7c9c>
0x19db0009c084  3e44  41bbb59e3008   movl r11,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009c08a  3e4a  443958ff       cmpl [rax-0x1],r11
0x19db0009c08e  3e4e  0f84e8240000   jz 0x19db0009e57c  <+0x633c>
0x19db0009c094  3e54  3958ff         cmpl [rax-0x1],rbx
0x19db0009c097  3e57  0f85463e0000   jnz 0x19db0009fee3  <+0x7ca3>
0x19db0009c09d  3e5d  8b4807         movl rcx,[rax+0x7]
0x19db0009c0a0  3e60  4903cd         REX.W addq rcx,r13
0x19db0009c0a3  3e63  8b780b         movl rdi,[rax+0xb]
0x19db0009c0a6  3e66  d1ff           sarl rdi, 1
0x19db0009c0a8  3e68  83ff00         cmpl rdi,0x0
0x19db0009c0ab  3e6b  0f86393e0000   jna 0x19db0009feea  <+0x7caa>
0x19db0009c0b1  3e71  4183fe01       cmpl r14,0x1
0x19db0009c0b5  3e75  0f86363e0000   jna 0x19db0009fef1  <+0x7cb1>
0x19db0009c0bb  3e7b  c4c17b10570f   vmovsd xmm2,[r15+0xf]
0x19db0009c0c1  3e81  83ff01         cmpl rdi,0x1
0x19db0009c0c4  3e84  0f862e3e0000   jna 0x19db0009fef8  <+0x7cb8>
0x19db0009c0ca  3e8a  4183fe02       cmpl r14,0x2
0x19db0009c0ce  3e8e  0f862b3e0000   jna 0x19db0009feff  <+0x7cbf>
0x19db0009c0d4  3e94  c4c17b106717   vmovsd xmm4,[r15+0x17]
0x19db0009c0da  3e9a  83ff02         cmpl rdi,0x2
0x19db0009c0dd  3e9d  0f86233e0000   jna 0x19db0009ff06  <+0x7cc6>
0x19db0009c0e3  3ea3  4183fe03       cmpl r14,0x3
0x19db0009c0e7  3ea7  0f86203e0000   jna 0x19db0009ff0d  <+0x7ccd>
0x19db0009c0ed  3ead  c4c17b106f1f   vmovsd xmm5,[r15+0x1f]
0x19db0009c0f3  3eb3  83ff03         cmpl rdi,0x3
0x19db0009c0f6  3eb6  0f86183e0000   jna 0x19db0009ff14  <+0x7cd4>
0x19db0009c0fc  3ebc  c5eb59510f     vmulsd xmm2,xmm2,[rcx+0xf]
0x19db0009c101  3ec1  c5f3594907     vmulsd xmm1,xmm1,[rcx+0x7]
0x19db0009c106  3ec6  c5db595917     vmulsd xmm3,xmm4,[rcx+0x17]
0x19db0009c10b  3ecb  c5eb58c9       vaddsd xmm1,xmm2,xmm1
0x19db0009c10f  3ecf  c5d359511f     vmulsd xmm2,xmm5,[rcx+0x1f]
0x19db0009c114  3ed4  c5e358c9       vaddsd xmm1,xmm3,xmm1
0x19db0009c118  3ed8  c5eb58c9       vaddsd xmm1,xmm2,xmm1
0x19db0009c11c  3edc  c7420b02000000 movl [rdx+0xb],0x2
0x19db0009c123  3ee3  c4c17b114c2407 vmovsd [r12+0x7],xmm1
0x19db0009c12a  3eea  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009c12e  3eee  0f86bd240000   jna 0x19db0009e5f1  <+0x63b1>
0x19db0009c134  3ef4  41bc01000000   movl r12,0x1
0x19db0009c13a  3efa  4c8bfb         REX.W movq r15,rbx
0x19db0009c13d  3efd  4c8bf0         REX.W movq r14,rax
0x19db0009c140  3f00  e918000000     jmp 0x19db0009c15d  <+0x3f1d>
0x19db0009c145  3f05  660f1f840000000000 nop
0x19db0009c14e  3f0e  6690           nop
0x19db0009c150  3f10  4c8be1         REX.W movq r12,rcx
0x19db0009c153  3f13  49bf559f3008db190000 REX.W movq r15,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009c15d  3f1d  4183fc04       cmpl r12,0x4
0x19db0009c161  3f21  0f8383010000   jnc 0x19db0009c2ea  <+0x40aa>
0x19db0009c167  3f27  8b4607         movl rax,[rsi+0x7]
0x19db0009c16a  3f2a  4903c5         REX.W addq rax,r13
0x19db0009c16d  3f2d  8b4e0b         movl rcx,[rsi+0xb]
0x19db0009c170  3f30  d1f9           sarl rcx, 1
0x19db0009c172  3f32  443be1         cmpl r12,rcx
0x19db0009c175  3f35  0f83a03d0000   jnc 0x19db0009ff1b  <+0x7cdb>
0x19db0009c17b  3f3b  428b44a007     movl rax,[rax+r12*4+0x7]
0x19db0009c180  3f40  4903c5         REX.W addq rax,r13
0x19db0009c183  3f43  a801           test al,0x1
0x19db0009c185  3f45  0f84973d0000   jz 0x19db0009ff22  <+0x7ce2>
0x19db0009c18b  3f4b  443978ff       cmpl [rax-0x1],r15
0x19db0009c18f  3f4f  0f85943d0000   jnz 0x19db0009ff29  <+0x7ce9>
0x19db0009c195  3f55  8b4807         movl rcx,[rax+0x7]
0x19db0009c198  3f58  4903cd         REX.W addq rcx,r13
0x19db0009c19b  3f5b  8b400b         movl rax,[rax+0xb]
0x19db0009c19e  3f5e  d1f8           sarl rax, 1
0x19db0009c1a0  3f60  83f800         cmpl rax,0x0
0x19db0009c1a3  3f63  0f86873d0000   jna 0x19db0009ff30  <+0x7cf0>
0x19db0009c1a9  3f69  c5fb104907     vmovsd xmm1,[rcx+0x7]
0x19db0009c1ae  3f6e  418b7e07       movl rdi,[r14+0x7]
0x19db0009c1b2  3f72  4903fd         REX.W addq rdi,r13
0x19db0009c1b5  3f75  458b7e0b       movl r15,[r14+0xb]
0x19db0009c1b9  3f79  41d1ff         sarl r15, 1
0x19db0009c1bc  3f7c  4183ff00       cmpl r15,0x0
0x19db0009c1c0  3f80  0f86713d0000   jna 0x19db0009ff37  <+0x7cf7>
0x19db0009c1c6  3f86  c5fb105707     vmovsd xmm2,[rdi+0x7]
0x19db0009c1cb  3f8b  83f801         cmpl rax,0x1
0x19db0009c1ce  3f8e  0f866a3d0000   jna 0x19db0009ff3e  <+0x7cfe>
0x19db0009c1d4  3f94  c5fb10610f     vmovsd xmm4,[rcx+0xf]
0x19db0009c1d9  3f99  4183ff01       cmpl r15,0x1
0x19db0009c1dd  3f9d  0f86623d0000   jna 0x19db0009ff45  <+0x7d05>
0x19db0009c1e3  3fa3  c5fb106f0f     vmovsd xmm5,[rdi+0xf]
0x19db0009c1e8  3fa8  83f802         cmpl rax,0x2
0x19db0009c1eb  3fab  0f865b3d0000   jna 0x19db0009ff4c  <+0x7d0c>
0x19db0009c1f1  3fb1  c5fb107117     vmovsd xmm6,[rcx+0x17]
0x19db0009c1f6  3fb6  4183ff02       cmpl r15,0x2
0x19db0009c1fa  3fba  0f86533d0000   jna 0x19db0009ff53  <+0x7d13>
0x19db0009c200  3fc0  c5fb107f17     vmovsd xmm7,[rdi+0x17]
0x19db0009c205  3fc5  83f803         cmpl rax,0x3
0x19db0009c208  3fc8  0f864c3d0000   jna 0x19db0009ff5a  <+0x7d1a>
0x19db0009c20e  3fce  c57b10411f     vmovsd xmm8,[rcx+0x1f]
0x19db0009c213  3fd3  4183ff03       cmpl r15,0x3
0x19db0009c217  3fd7  0f86443d0000   jna 0x19db0009ff61  <+0x7d21>
0x19db0009c21d  3fdd  c57b104f1f     vmovsd xmm9,[rdi+0x1f]
0x19db0009c222  3fe2  448b7a07       movl r15,[rdx+0x7]
0x19db0009c226  3fe6  4d03fd         REX.W addq r15,r13
0x19db0009c229  3fe9  8b420b         movl rax,[rdx+0xb]
0x19db0009c22c  3fec  418b4f03       movl rcx,[r15+0x3]
0x19db0009c230  3ff0  d1f9           sarl rcx, 1
0x19db0009c232  3ff2  d1f8           sarl rax, 1
0x19db0009c234  3ff4  8d7801         leal rdi,[rax+0x1]
0x19db0009c237  3ff7  4c8b15f3c3ffff REX.W movq r10,[rip+0xffffc3f3]
0x19db0009c23e  3ffe  4c3bd7         REX.W cmpq r10,rdi
0x19db0009c241  4001  7712           ja 0x19db0009c255  <+0x4015>
0x19db0009c243  4003  488b15f6c3ffff REX.W movq rdx,[rip+0xffffc3f6]
0x19db0009c24a  400a  4c8b1507c0ffff REX.W movq r10,[rip+0xffffc007]
0x19db0009c251  4011  41ffd2         call r10
0x19db0009c254  4014  cc             int3l
0x19db0009c255  4015  443be7         cmpl r12,rdi
0x19db0009c258  4018  0f830a3d0000   jnc 0x19db0009ff68  <+0x7d28>
0x19db0009c25e  401e  443be1         cmpl r12,rcx
0x19db0009c261  4021  0f83e9230000   jnc 0x19db0009e650  <+0x6410>
0x19db0009c267  4027  418d4c2401     leal rcx,[r12+0x1]
0x19db0009c26c  402c  4c8b15bec3ffff REX.W movq r10,[rip+0xffffc3be]
0x19db0009c273  4033  4c3bd1         REX.W cmpq r10,rcx
0x19db0009c276  4036  7712           ja 0x19db0009c28a  <+0x404a>
0x19db0009c278  4038  488b15c1c3ffff REX.W movq rdx,[rip+0xffffc3c1]
0x19db0009c27f  403f  4c8b15d2bfffff REX.W movq r10,[rip+0xffffbfd2]
0x19db0009c286  4046  41ffd2         call r10
0x19db0009c289  4049  cc             int3l
0x19db0009c28a  404a  443be0         cmpl r12,rax
0x19db0009c28d  404d  0f8224000000   jc 0x19db0009c2b7  <+0x4077>
0x19db0009c293  4053  8d0409         leal rax,[rcx+rcx*1]
0x19db0009c296  4056  4c8b1594c3ffff REX.W movq r10,[rip+0xffffc394]
0x19db0009c29d  405d  4c3bd0         REX.W cmpq r10,rax
0x19db0009c2a0  4060  7712           ja 0x19db0009c2b4  <+0x4074>
0x19db0009c2a2  4062  488b1597c3ffff REX.W movq rdx,[rip+0xffffc397]
0x19db0009c2a9  4069  4c8b15a8bfffff REX.W movq r10,[rip+0xffffbfa8]
0x19db0009c2b0  4070  41ffd2         call r10
0x19db0009c2b3  4073  cc             int3l
0x19db0009c2b4  4074  89420b         movl [rdx+0xb],rax
0x19db0009c2b7  4077  c5d359dc       vmulsd xmm3,xmm5,xmm4
0x19db0009c2bb  407b  c5eb59c9       vmulsd xmm1,xmm2,xmm1
0x19db0009c2bf  407f  c5c359d6       vmulsd xmm2,xmm7,xmm6
0x19db0009c2c3  4083  c5e358c9       vaddsd xmm1,xmm3,xmm1
0x19db0009c2c7  4087  c4c13359d8     vmulsd xmm3,xmm9,xmm8
0x19db0009c2cc  408c  c5eb58c9       vaddsd xmm1,xmm2,xmm1
0x19db0009c2d0  4090  c5e358c9       vaddsd xmm1,xmm3,xmm1
0x19db0009c2d4  4094  c4817b114ce707 vmovsd [r15+r12*8+0x7],xmm1
0x19db0009c2db  409b  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009c2df  409f  0f876bfeffff   ja 0x19db0009c150  <+0x3f10>
0x19db0009c2e5  40a5  e961240000     jmp 0x19db0009e74b  <+0x650b>
0x19db0009c2ea  40aa  bf28010000     movl rdi,0x128
0x19db0009c2ef  40af  488bc2         REX.W movq rax,rdx
0x19db0009c2f2  40b2  488b55c8       REX.W movq rdx,[rbp-0x38]
0x19db0009c2f6  40b6  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0009c300  40c0  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009c304  40c4  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009c30a  40ca  4d8b8d58010000 REX.W movq r9,[r13+0x158] (root (empty_fixed_array))
0x19db0009c311  40d1  49bae0e6d1f5ff7f0000 REX.W movq r10,0x7ffff5d1e6e0  (StoreICTrampoline)    ;; off heap target
0x19db0009c31b  40db  41ffd2         call r10
0x19db0009c31e  40de  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0009c322  40e2  4183c001       addl r8,0x1
0x19db0009c326  40e6  4c8b1504c3ffff REX.W movq r10,[rip+0xffffc304]
0x19db0009c32d  40ed  4d3bd0         REX.W cmpq r10,r8
0x19db0009c330  40f0  7712           ja 0x19db0009c344  <+0x4104>
0x19db0009c332  40f2  488b1507c3ffff REX.W movq rdx,[rip+0xffffc307]
0x19db0009c339  40f9  4c8b1518bfffff REX.W movq r10,[rip+0xffffbf18]
0x19db0009c340  4100  41ffd2         call r10
0x19db0009c343  4103  cc             int3l
0x19db0009c344  4104  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009c348  4108  0f87f2faffff   ja 0x19db0009be40  <+0x3c00>
0x19db0009c34e  410e  e94f240000     jmp 0x19db0009e7a2  <+0x6562>
0x19db0009c353  4113  8b7e57         movl rdi,[rsi+0x57]
0x19db0009c356  4116  4903fd         REX.W addq rdi,r13
0x19db0009c359  4119  40f6c701       testb rdi,0x1
0x19db0009c35d  411d  0f84133c0000   jz 0x19db0009ff76  <+0x7d36>
0x19db0009c363  4123  448b67ff       movl r12,[rdi-0x1]
0x19db0009c367  4127  4d03e5         REX.W addq r12,r13
0x19db0009c36a  412a  6641817c24072c04 cmpw [r12+0x7],0x42c
0x19db0009c372  4132  0f85053c0000   jnz 0x19db0009ff7d  <+0x7d3d>
0x19db0009c378  4138  448b6713       movl r12,[rdi+0x13]
0x19db0009c37c  413c  4d03e5         REX.W addq r12,r13
0x19db0009c37f  413f  49be25432f08db190000 REX.W movq r14,0x19db082f4325    ;; object: 0x19db082f4325 <FeedbackCell[many closures]>
0x19db0009c389  4149  4d39e6         REX.W cmpq r14,r12
0x19db0009c38c  414c  0f85f23b0000   jnz 0x19db0009ff84  <+0x7d44>
0x19db0009c392  4152  4d8b8590000000 REX.W movq r8,[r13+0x90] (root (undefined_value))
0x19db0009c399  4159  4150           push r8
0x19db0009c39b  415b  4c8bf6         REX.W movq r14,rsi
0x19db0009c39e  415e  33c0           xorl rax,rax
0x19db0009c3a0  4160  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009c3aa  416a  4c8be6         REX.W movq r12,rsi
0x19db0009c3ad  416d  4c8b151ff2ffff REX.W movq r10,[rip+0xfffff21f]
0x19db0009c3b4  4174  41ffd2         call r10
0x19db0009c3b7  4177  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009c3bb  417b  448b4623       movl r8,[rsi+0x23]
0x19db0009c3bf  417f  4d03c5         REX.W addq r8,r13
0x19db0009c3c2  4182  41f6c001       testb r8,0x1
0x19db0009c3c6  4186  0f84c63b0000   jz 0x19db0009ff92  <+0x7d52>
0x19db0009c3cc  418c  41b9b5da3008   movl r9,0x830dab5       ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db0009c3d2  4192  453948ff       cmpl [r8-0x1],r9
0x19db0009c3d6  4196  0f844d010000   jz 0x19db0009c529  <+0x42e9>
0x19db0009c3dc  419c  41bc8dda3008   movl r12,0x830da8d      ;; (compressed) object: 0x19db0830da8d <Map(HOLEY_ELEMENTS)>
0x19db0009c3e2  41a2  453960ff       cmpl [r8-0x1],r12
0x19db0009c3e6  41a6  0f85ad3b0000   jnz 0x19db0009ff99  <+0x7d59>
0x19db0009c3ec  41ac  458b6003       movl r12,[r8+0x3]
0x19db0009c3f0  41b0  4d03e5         REX.W addq r12,r13
0x19db0009c3f3  41b3  418b442407     movl rax,[r12+0x7]
0x19db0009c3f8  41b8  4c8b1532c2ffff REX.W movq r10,[rip+0xffffc232]
0x19db0009c3ff  41bf  4c3bd0         REX.W cmpq r10,rax
0x19db0009c402  41c2  7712           ja 0x19db0009c416  <+0x41d6>
0x19db0009c404  41c4  488b1535c2ffff REX.W movq rdx,[rip+0xffffc235]
0x19db0009c40b  41cb  4c8b1546beffff REX.W movq r10,[rip+0xffffbe46]
0x19db0009c412  41d2  41ffd2         call r10
0x19db0009c415  41d5  cc             int3l
0x19db0009c416  41d6  418b54240b     movl rdx,[r12+0xb]
0x19db0009c41b  41db  4c8b150fc2ffff REX.W movq r10,[rip+0xffffc20f]
0x19db0009c422  41e2  4c3bd2         REX.W cmpq r10,rdx
0x19db0009c425  41e5  7712           ja 0x19db0009c439  <+0x41f9>
0x19db0009c427  41e7  488b1512c2ffff REX.W movq rdx,[rip+0xffffc212]
0x19db0009c42e  41ee  4c8b1523beffff REX.W movq r10,[rip+0xffffbe23]
0x19db0009c435  41f5  41ffd2         call r10
0x19db0009c438  41f8  cc             int3l
0x19db0009c439  41f9  418b4c240f     movl rcx,[r12+0xf]
0x19db0009c43e  41fe  4c8b15ecc1ffff REX.W movq r10,[rip+0xffffc1ec]
0x19db0009c445  4205  4c3bd1         REX.W cmpq r10,rcx
0x19db0009c448  4208  7712           ja 0x19db0009c45c  <+0x421c>
0x19db0009c44a  420a  488b15efc1ffff REX.W movq rdx,[rip+0xffffc1ef]
0x19db0009c451  4211  4c8b1500beffff REX.W movq r10,[rip+0xffffbe00]
0x19db0009c458  4218  41ffd2         call r10
0x19db0009c45b  421b  cc             int3l
0x19db0009c45c  421c  458b642403     movl r12,[r12+0x3]
0x19db0009c461  4221  4c8b1d42beffff REX.W movq r11,[rip+0xffffbe42]
0x19db0009c468  4228  4d8b33         REX.W movq r14,[r11]
0x19db0009c46b  422b  4d8d7e20       REX.W leaq r15,[r14+0x20]
0x19db0009c46f  422f  488b1d45beffff REX.W movq rbx,[rip+0xffffbe45]
0x19db0009c476  4236  4c393b         REX.W cmpq [rbx],r15
0x19db0009c479  4239  0f864d230000   jna 0x19db0009e7cc  <+0x658c>
0x19db0009c47f  423f  41d1fc         sarl r12, 1
0x19db0009c482  4242  4d8d7e20       REX.W leaq r15,[r14+0x20]
0x19db0009c486  4246  4181e400fcff3f andl r12,0x3ffffc00
0x19db0009c48d  424d  4d893b         REX.W movq [r11],r15
0x19db0009c490  4250  4983c601       REX.W addq r14,0x1
0x19db0009c494  4254  4183cc06       orl r12,0x6
0x19db0009c498  4258  41d1e4         shll r12, 1
0x19db0009c49b  425b  4c8b158fc1ffff REX.W movq r10,[rip+0xffffc18f]
0x19db0009c4a2  4262  4d39e2         REX.W cmpq r10,r12
0x19db0009c4a5  4265  7712           ja 0x19db0009c4b9  <+0x4279>
0x19db0009c4a7  4267  488b1592c1ffff REX.W movq rdx,[rip+0xffffc192]
0x19db0009c4ae  426e  4c8b15a3bdffff REX.W movq r10,[rip+0xffffbda3]
0x19db0009c4b5  4275  41ffd2         call r10
0x19db0009c4b8  4278  cc             int3l
0x19db0009c4b9  4279  4d8bbd38020000 REX.W movq r15,[r13+0x238] (root (property_array_map))
0x19db0009c4c0  4280  45897eff       movl [r14-0x1],r15
0x19db0009c4c4  4284  45896603       movl [r14+0x3],r12
0x19db0009c4c8  4288  41894607       movl [r14+0x7],rax
0x19db0009c4cc  428c  4c8bda         REX.W movq r11,rdx
0x19db0009c4cf  428f  45895e0b       movl [r14+0xb],r11
0x19db0009c4d3  4293  41894e0f       movl [r14+0xf],rcx
0x19db0009c4d7  4297  4d8b9d90000000 REX.W movq r11,[r13+0x90] (root (undefined_value))
0x19db0009c4de  429e  45895e17       movl [r14+0x17],r11
0x19db0009c4e2  42a2  45895e1b       movl [r14+0x1b],r11
0x19db0009c4e6  42a6  4d8ba5a8000000 REX.W movq r12,[r13+0xa8] (root (true_value))
0x19db0009c4ed  42ad  45896613       movl [r14+0x13],r12
0x19db0009c4f1  42b1  458948ff       movl [r8-0x1],r9
0x19db0009c4f5  42b5  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009c4fc  42bc  4d23e0         REX.W andq r12,r8
0x19db0009c4ff  42bf  41f644240804   testb [r12+0x8],0x4
0x19db0009c505  42c5  0f8596240000   jnz 0x19db0009e9a1  <+0x6761>
0x19db0009c50b  42cb  45897003       movl [r8+0x3],r14
0x19db0009c50f  42cf  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009c516  42d6  4d23c8         REX.W andq r9,r8
0x19db0009c519  42d9  41f6410804     testb [r9+0x8],0x4
0x19db0009c51e  42de  0f8536240000   jnz 0x19db0009e95a  <+0x671a>
0x19db0009c524  42e4  e919000000     jmp 0x19db0009c542  <+0x4302>
0x19db0009c529  42e9  458b4003       movl r8,[r8+0x3]
0x19db0009c52d  42ed  4d03c5         REX.W addq r8,r13
0x19db0009c530  42f0  4d8b8da8000000 REX.W movq r9,[r13+0xa8] (root (true_value))
0x19db0009c537  42f7  45894813       movl [r8+0x13],r9
0x19db0009c53b  42fb  4d8b9d90000000 REX.W movq r11,[r13+0x90] (root (undefined_value))
0x19db0009c542  4302  8b7e5b         movl rdi,[rsi+0x5b]
0x19db0009c545  4305  4903fd         REX.W addq rdi,r13
0x19db0009c548  4308  40f6c701       testb rdi,0x1
0x19db0009c54c  430c  0f844e3a0000   jz 0x19db0009ffa0  <+0x7d60>
0x19db0009c552  4312  448b47ff       movl r8,[rdi-0x1]
0x19db0009c556  4316  4d03c5         REX.W addq r8,r13
0x19db0009c559  4319  66418178072c04 cmpw [r8+0x7],0x42c
0x19db0009c560  4320  0f85413a0000   jnz 0x19db0009ffa7  <+0x7d67>
0x19db0009c566  4326  448b4713       movl r8,[rdi+0x13]
0x19db0009c56a  432a  4d03c5         REX.W addq r8,r13
0x19db0009c56d  432d  49b931432f08db190000 REX.W movq r9,0x19db082f4331    ;; object: 0x19db082f4331 <FeedbackCell[many closures]>
0x19db0009c577  4337  4d3bc8         REX.W cmpq r9,r8
0x19db0009c57a  433a  0f852e3a0000   jnz 0x19db0009ffae  <+0x7d6e>
0x19db0009c580  4340  4153           push r11
0x19db0009c582  4342  4c8bc6         REX.W movq r8,rsi
0x19db0009c585  4345  33c0           xorl rax,rax
0x19db0009c587  4347  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009c591  4351  4c8b153bf0ffff REX.W movq r10,[rip+0xfffff03b]
0x19db0009c598  4358  41ffd2         call r10
0x19db0009c59b  435b  49ba0000000000000000 REX.W movq r10,(nil)
0x19db0009c5a5  4365  4c8955d0       REX.W movq [rbp-0x30],r10
0x19db0009c5a9  4369  48c745c800000000 REX.W movq [rbp-0x38],0x0
0x19db0009c5b1  4371  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009c5bb  437b  e909000000     jmp 0x19db0009c5c9  <+0x4389>
0x19db0009c5c0  4380  c5fb1155d0     vmovsd [rbp-0x30],xmm2
0x19db0009c5c5  4385  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db0009c5c9  4389  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009c5cd  438d  448b660f       movl r12,[rsi+0xf]
0x19db0009c5d1  4391  4d03e5         REX.W addq r12,r13
0x19db0009c5d4  4394  41f6c401       testb r12,0x1
0x19db0009c5d8  4398  0f84de390000   jz 0x19db0009ffbc  <+0x7d7c>
0x19db0009c5de  439e  418b4424ff     movl rax,[r12-0x1]
0x19db0009c5e3  43a3  4c8b1547c0ffff REX.W movq r10,[rip+0xffffc047]
0x19db0009c5ea  43aa  4c3bd0         REX.W cmpq r10,rax
0x19db0009c5ed  43ad  7712           ja 0x19db0009c601  <+0x43c1>
0x19db0009c5ef  43af  488b154ac0ffff REX.W movq rdx,[rip+0xffffc04a]
0x19db0009c5f6  43b6  4c8b155bbcffff REX.W movq r10,[rip+0xffffbc5b]
0x19db0009c5fd  43bd  41ffd2         call r10
0x19db0009c600  43c0  cc             int3l
0x19db0009c601  43c1  41b86ddc3008   movl r8,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009c607  43c7  443bc0         cmpl r8,rax
0x19db0009c60a  43ca  0f8409000000   jz 0x19db0009c619  <+0x43d9>
0x19db0009c610  43d0  413bc1         cmpl rax,r9
0x19db0009c613  43d3  0f85aa390000   jnz 0x19db0009ffc3  <+0x7d83>
0x19db0009c619  43d9  418b44240b     movl rax,[r12+0xb]
0x19db0009c61e  43de  d1f8           sarl rax, 1
0x19db0009c620  43e0  4c8b5dc8       REX.W movq r11,[rbp-0x38]
0x19db0009c624  43e4  443bd8         cmpl r11,rax
0x19db0009c627  43e7  0f836c010000   jnc 0x19db0009c799  <+0x4559>
0x19db0009c62d  43ed  b86ddc3008     movl rax,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009c632  43f2  41394424ff     cmpl [r12-0x1],rax
0x19db0009c637  43f7  0f858d390000   jnz 0x19db0009ffca  <+0x7d8a>
0x19db0009c63d  43fd  458b642407     movl r12,[r12+0x7]
0x19db0009c642  4402  4d03e5         REX.W addq r12,r13
0x19db0009c645  4405  438b549c07     movl rdx,[r12+r11*4+0x7]
0x19db0009c64a  440a  4903d5         REX.W addq rdx,r13
0x19db0009c64d  440d  4c8bf0         REX.W movq r14,rax
0x19db0009c650  4410  48b919302f08db190000 REX.W movq rcx,0x19db082f3019    ;; object: 0x19db082f3019 <String[1]: #V>
0x19db0009c65a  441a  b840010000     movl rax,0x140
0x19db0009c65f  441f  4c8be6         REX.W movq r12,rsi
0x19db0009c662  4422  4c8b15bbdbffff REX.W movq r10,[rip+0xffffdbbb]
0x19db0009c669  4429  41ffd2         call r10
0x19db0009c66c  442c  a801           test al,0x1
0x19db0009c66e  442e  0f8464390000   jz 0x19db0009ffd8  <+0x7d98>
0x19db0009c674  4434  448b40ff       movl r8,[rax-0x1]
0x19db0009c678  4438  4c8b15b2bfffff REX.W movq r10,[rip+0xffffbfb2]
0x19db0009c67f  443f  4d3bd0         REX.W cmpq r10,r8
0x19db0009c682  4442  7712           ja 0x19db0009c696  <+0x4456>
0x19db0009c684  4444  488b15b5bfffff REX.W movq rdx,[rip+0xffffbfb5]
0x19db0009c68b  444b  4c8b15c6bbffff REX.W movq r10,[rip+0xffffbbc6]
0x19db0009c692  4452  41ffd2         call r10
0x19db0009c695  4455  cc             int3l
0x19db0009c696  4456  41b96ddc3008   movl r9,0x830dc6d       ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009c69c  445c  453bc8         cmpl r9,r8
0x19db0009c69f  445f  0f8418000000   jz 0x19db0009c6bd  <+0x447d>
0x19db0009c6a5  4465  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009c6af  446f  453bc1         cmpl r8,r9
0x19db0009c6b2  4472  0f8527390000   jnz 0x19db0009ffdf  <+0x7d9f>
0x19db0009c6b8  4478  e90a000000     jmp 0x19db0009c6c7  <+0x4487>
0x19db0009c6bd  447d  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009c6c7  4487  448b400b       movl r8,[rax+0xb]
0x19db0009c6cb  448b  41d1f8         sarl r8, 1
0x19db0009c6ce  448e  4183f800       cmpl r8,0x0
0x19db0009c6d2  4492  0f870a000000   ja 0x19db0009c6e2  <+0x44a2>
0x19db0009c6d8  4498  c5fb1055d0     vmovsd xmm2,[rbp-0x30]
0x19db0009c6dd  449d  e982000000     jmp 0x19db0009c764  <+0x4524>
0x19db0009c6e2  44a2  443948ff       cmpl [rax-0x1],r9
0x19db0009c6e6  44a6  0f85fa380000   jnz 0x19db0009ffe6  <+0x7da6>
0x19db0009c6ec  44ac  448b6007       movl r12,[rax+0x7]
0x19db0009c6f0  44b0  4d03e5         REX.W addq r12,r13
0x19db0009c6f3  44b3  c4c17b10442407 vmovsd xmm0,[r12+0x7]
0x19db0009c6fa  44ba  c5fb1055d0     vmovsd xmm2,[rbp-0x30]
0x19db0009c6ff  44bf  c5fb58d2       vaddsd xmm2,xmm0,xmm2
0x19db0009c703  44c3  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009c707  44c7  0f8613210000   jna 0x19db0009e820  <+0x65e0>
0x19db0009c70d  44cd  41bb01000000   movl r11,0x1
0x19db0009c713  44d3  e90b000000     jmp 0x19db0009c723  <+0x44e3>
0x19db0009c718  44d8  0f1f840000000000 nop
0x19db0009c720  44e0  4d8bde         REX.W movq r11,r14
0x19db0009c723  44e3  453bd8         cmpl r11,r8
0x19db0009c726  44e6  0f8338000000   jnc 0x19db0009c764  <+0x4524>
0x19db0009c72c  44ec  c4817b1044dc07 vmovsd xmm0,[r12+r11*8+0x7]
0x19db0009c733  44f3  458d7301       leal r14,[r11+0x1]
0x19db0009c737  44f7  4c8b15f3beffff REX.W movq r10,[rip+0xffffbef3]
0x19db0009c73e  44fe  4d3bd6         REX.W cmpq r10,r14
0x19db0009c741  4501  7712           ja 0x19db0009c755  <+0x4515>
0x19db0009c743  4503  488b15f6beffff REX.W movq rdx,[rip+0xffffbef6]
0x19db0009c74a  450a  4c8b1507bbffff REX.W movq r10,[rip+0xffffbb07]
0x19db0009c751  4511  41ffd2         call r10
0x19db0009c754  4514  cc             int3l
0x19db0009c755  4515  c5fb58d2       vaddsd xmm2,xmm0,xmm2
0x19db0009c759  4519  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009c75d  451d  77c1           ja 0x19db0009c720  <+0x44e0>
0x19db0009c75f  451f  e90d210000     jmp 0x19db0009e871  <+0x6631>
0x19db0009c764  4524  4c8b5dc8       REX.W movq r11,[rbp-0x38]
0x19db0009c768  4528  458d4301       leal r8,[r11+0x1]
0x19db0009c76c  452c  4c8b15bebeffff REX.W movq r10,[rip+0xffffbebe]
0x19db0009c773  4533  4d3bd0         REX.W cmpq r10,r8
0x19db0009c776  4536  7712           ja 0x19db0009c78a  <+0x454a>
0x19db0009c778  4538  488b15c1beffff REX.W movq rdx,[rip+0xffffbec1]
0x19db0009c77f  453f  4c8b15d2baffff REX.W movq r10,[rip+0xffffbad2]
0x19db0009c786  4546  41ffd2         call r10
0x19db0009c789  4549  cc             int3l
0x19db0009c78a  454a  493b6550       REX.W cmpq rsp,[r13+0x50] (external value (StackGuard::address_of_jslimit()))
0x19db0009c78e  454e  0f872cfeffff   ja 0x19db0009c5c0  <+0x4380>
0x19db0009c794  4554  e931210000     jmp 0x19db0009e8ca  <+0x668a>
0x19db0009c799  4559  8b5627         movl rdx,[rsi+0x27]
0x19db0009c79c  455c  4903d5         REX.W addq rdx,r13
0x19db0009c79f  455f  b850010000     movl rax,0x150
0x19db0009c7a4  4564  488b4d18       REX.W movq rcx,[rbp+0x18]
0x19db0009c7a8  4568  4c8bc6         REX.W movq r8,rsi
0x19db0009c7ab  456b  49ba00b0d0f5ff7f0000 REX.W movq r10,0x7ffff5d0b000  (KeyedLoadICTrampoline_Megamorphic)    ;; off heap target
0x19db0009c7b5  4575  41ffd2         call r10
0x19db0009c7b8  4578  a801           test al,0x1
0x19db0009c7ba  457a  0f8439000000   jz 0x19db0009c7f9  <+0x45b9>
0x19db0009c7c0  4580  448b40ff       movl r8,[rax-0x1]
0x19db0009c7c4  4584  4c8b1566beffff REX.W movq r10,[rip+0xffffbe66]
0x19db0009c7cb  458b  4d3bd0         REX.W cmpq r10,r8
0x19db0009c7ce  458e  7712           ja 0x19db0009c7e2  <+0x45a2>
0x19db0009c7d0  4590  488b1569beffff REX.W movq rdx,[rip+0xffffbe69]
0x19db0009c7d7  4597  4c8b157abaffff REX.W movq r10,[rip+0xffffba7a]
0x19db0009c7de  459e  41ffd2         call r10
0x19db0009c7e1  45a1  cc             int3l
0x19db0009c7e2  45a2  45398530010000 cmpl [r13+0x130] (root (heap_number_map)),r8
0x19db0009c7e9  45a9  0f8505380000   jnz 0x19db0009fff4  <+0x7db4>
0x19db0009c7ef  45af  c5fb104003     vmovsd xmm0,[rax+0x3]
0x19db0009c7f4  45b4  e90b000000     jmp 0x19db0009c804  <+0x45c4>
0x19db0009c7f9  45b9  4c8bc0         REX.W movq r8,rax
0x19db0009c7fc  45bc  41d1f8         sarl r8, 1
0x19db0009c7ff  45bf  c4c1032ac0     vcvtlsi2sd xmm0,xmm15,r8
0x19db0009c804  45c4  c5f92e45d0     vucomisd xmm0,[rbp-0x30]
0x19db0009c809  45c9  7a06           jpe 0x19db0009c811  <+0x45d1>
0x19db0009c80b  45cb  0f8405000000   jz 0x19db0009c816  <+0x45d6>
0x19db0009c811  45d1  e908380000     jmp 0x19db000a001e  <+0x7dde>
0x19db0009c816  45d6  498b8590000000 REX.W movq rax,[r13+0x90] (root (undefined_value))
0x19db0009c81d  45dd  488b4de8       REX.W movq rcx,[rbp-0x18]
0x19db0009c821  45e1  488be5         REX.W movq rsp,rbp
0x19db0009c824  45e4  5d             pop rbp
0x19db0009c825  45e5  4883f901       REX.W cmpq rcx,0x1
0x19db0009c829  45e9  7f03           jg 0x19db0009c82e  <+0x45ee>
0x19db0009c82b  45eb  c21000         ret 0x10
0x19db0009c82e  45ee  415a           pop r10
0x19db0009c830  45f0  488d64cc08     REX.W leaq rsp,[rsp+rcx*8+0x8]
0x19db0009c835  45f5  4152           push r10
0x19db0009c837  45f7  c3             retl
0x19db0009c838  45f8  49b8f001000000000000 REX.W movq r8,0x1f0
0x19db0009c842  4602  4150           push r8
0x19db0009c844  4604  b801000000     movl rax,0x1
0x19db0009c849  4609  48bb80b402f7ff7f0000 REX.W movq rbx,0x7ffff702b480    ;; external reference (Runtime::StackGuardWithGap)
0x19db0009c853  4613  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009c85d  461d  4c8bc0         REX.W movq r8,rax
0x19db0009c860  4620  49ba8028e4f5ff7f0000 REX.W movq r10,0x7ffff5e42880  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
0x19db0009c86a  462a  41ffd2         call r10
0x19db0009c86d  462d  e92bbaffff     jmp 0x19db0009829d  <+0x5d>
0x19db0009c872  4632  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db0009c876  4636  ba10000000     movl rdx,0x10
0x19db0009c87b  463b  488bda         REX.W movq rbx,rdx
0x19db0009c87e  463e  49ba40debaf5ff7f0000 REX.W movq r10,0x7ffff5bade40  (AllocateRegularInYoungGeneration)    ;; off heap target
0x19db0009c888  4648  41ffd2         call r10
0x19db0009c88b  464b  4c8d40ff       REX.W leaq r8,[rax-0x1]
0x19db0009c88f  464f  4d8bd8         REX.W movq r11,r8
0x19db0009c892  4652  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009c896  4656  4c8b0d0dbaffff REX.W movq r9,[rip+0xffffba0d]
0x19db0009c89d  465d  4c8b3517baffff REX.W movq r14,[rip+0xffffba17]
0x19db0009c8a4  4664  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0009c8a8  4668  e91fbaffff     jmp 0x19db000982cc  <+0x8c>
0x19db0009c8ad  466d  c4c17b10442403 vmovsd xmm0,[r12+0x3]
0x19db0009c8b4  4674  c57b2ce0       vcvttsd2si r12,xmm0
0x19db0009c8b8  4678  e94cbdffff     jmp 0x19db00098609  <+0x3c9>
0x19db0009c8bd  467d  4c8965c8       REX.W movq [rbp-0x38],r12
0x19db0009c8c1  4681  488bda         REX.W movq rbx,rdx
0x19db0009c8c4  4684  ba14000000     movl rdx,0x14
0x19db0009c8c9  4689  4c8b15b0ffffff REX.W movq r10,[rip+0xffffffb0]
0x19db0009c8d0  4690  41ffd2         call r10
0x19db0009c8d3  4693  4c8d40ff       REX.W leaq r8,[rax-0x1]
0x19db0009c8d7  4697  498bd8         REX.W movq rbx,r8
0x19db0009c8da  469a  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009c8de  469e  41b8b5da3008   movl r8,0x830dab5       ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db0009c8e4  46a4  4c8b0dbfb9ffff REX.W movq r9,[rip+0xffffb9bf]
0x19db0009c8eb  46ab  4c8b35c9b9ffff REX.W movq r14,[rip+0xffffb9c9]
0x19db0009c8f2  46b2  b8b59e3008     movl rax,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009c8f7  46b7  498b9558010000 REX.W movq rdx,[r13+0x158] (root (empty_fixed_array))
0x19db0009c8fe  46be  41bf75d93008   movl r15,0x830d975      ;; (compressed) object: 0x19db0830d975 <Map(HOLEY_ELEMENTS)>
0x19db0009c904  46c4  4c8b5dd0       REX.W movq r11,[rbp-0x30]
0x19db0009c908  46c8  4c8b65c8       REX.W movq r12,[rbp-0x38]
0x19db0009c90c  46cc  e908bdffff     jmp 0x19db00098619  <+0x3d9>
0x19db0009c911  46d1  488945c8       REX.W movq [rbp-0x38],rax
0x19db0009c915  46d5  488955c0       REX.W movq [rbp-0x40],rdx
0x19db0009c919  46d9  48894db8       REX.W movq [rbp-0x48],rcx
0x19db0009c91d  46dd  4c8965b0       REX.W movq [rbp-0x50],r12
0x19db0009c921  46e1  488bda         REX.W movq rbx,rdx
0x19db0009c924  46e4  ba20000000     movl rdx,0x20
0x19db0009c929  46e9  4c8b1550ffffff REX.W movq r10,[rip+0xffffff50]
0x19db0009c930  46f0  41ffd2         call r10
0x19db0009c933  46f3  4c8d40ff       REX.W leaq r8,[rax-0x1]
0x19db0009c937  46f7  498bd8         REX.W movq rbx,r8
0x19db0009c93a  46fa  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009c93e  46fe  41b8b5da3008   movl r8,0x830dab5       ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db0009c944  4704  4c8b0d5fb9ffff REX.W movq r9,[rip+0xffffb95f]
0x19db0009c94b  470b  4c8b3569b9ffff REX.W movq r14,[rip+0xffffb969]
0x19db0009c952  4712  4c8b5dd0       REX.W movq r11,[rbp-0x30]
0x19db0009c956  4716  488b45c8       REX.W movq rax,[rbp-0x38]
0x19db0009c95a  471a  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db0009c95e  471e  488b4db8       REX.W movq rcx,[rbp-0x48]
0x19db0009c962  4722  4c8b65b0       REX.W movq r12,[rbp-0x50]
0x19db0009c966  4726  e9acbfffff     jmp 0x19db00098917  <+0x6d7>
0x19db0009c96b  472b  ba44010000     movl rdx,0x144
0x19db0009c970  4730  4c8b1509ffffff REX.W movq r10,[rip+0xffffff09]
0x19db0009c977  4737  41ffd2         call r10
0x19db0009c97a  473a  4c8d40ff       REX.W leaq r8,[rax-0x1]
0x19db0009c97e  473e  4d8bd8         REX.W movq r11,r8
0x19db0009c981  4741  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009c985  4745  4c8b0d1eb9ffff REX.W movq r9,[rip+0xffffb91e]
0x19db0009c98c  474c  e954c0ffff     jmp 0x19db000989e5  <+0x7a5>
0x19db0009c991  4751  4d8d600c       REX.W leaq r12,[r8+0xc]
0x19db0009c995  4755  4d8921         REX.W movq [r9],r12
0x19db0009c998  4758  4983c001       REX.W addq r8,0x1
0x19db0009c99c  475c  4d8ba530010000 REX.W movq r12,[r13+0x130] (root (heap_number_map))
0x19db0009c9a3  4763  458960ff       movl [r8-0x1],r12
0x19db0009c9a7  4767  c5832ac1       vcvtlsi2sd xmm0,xmm15,rcx
0x19db0009c9ab  476b  c4c17b114003   vmovsd [r8+0x3],xmm0
0x19db0009c9b1  4771  4d8bd8         REX.W movq r11,r8
0x19db0009c9b4  4774  4c8b65d8       REX.W movq r12,[rbp-0x28]
0x19db0009c9b8  4778  e957c3ffff     jmp 0x19db00098d14  <+0xad4>
0x19db0009c9bd  477d  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009c9c3  4783  458958ff       movl [r8-0x1],r11
0x19db0009c9c7  4787  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009c9ce  478e  4d23e0         REX.W andq r12,r8
0x19db0009c9d1  4791  41f644240804   testb [r12+0x8],0x4
0x19db0009c9d7  4797  0f85311f0000   jnz 0x19db0009e90e  <+0x66ce>
0x19db0009c9dd  479d  e994c3ffff     jmp 0x19db00098d76  <+0xb36>
0x19db0009c9e2  47a2  cc             int3l
0x19db0009c9e3  47a3  488945c8       REX.W movq [rbp-0x38],rax
0x19db0009c9e7  47a7  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009c9eb  47ab  33f6           xorl rsi,rsi
0x19db0009c9ed  47ad  4c8be0         REX.W movq r12,rax
0x19db0009c9f0  47b0  498bc0         REX.W movq rax,r8
0x19db0009c9f3  47b3  33db           xorl rbx,rbx
0x19db0009c9f5  47b5  49bae0eebaf5ff7f0000 REX.W movq r10,0x7ffff5baeee0  (GrowFastSmiOrObjectElements)    ;; off heap target
0x19db0009c9ff  47bf  41ffd2         call r10
0x19db0009ca02  47c2  a801           test al,0x1
0x19db0009ca04  47c4  0f84ff350000   jz 0x19db000a0009  <+0x7dc9>
0x19db0009ca0a  47ca  4c8be0         REX.W movq r12,rax
0x19db0009ca0d  47cd  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0009ca11  47d1  41b9b59e3008   movl r9,0x8309eb5       ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009ca17  47d7  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009ca1d  47dd  488b45c8       REX.W movq rax,[rbp-0x38]
0x19db0009ca21  47e1  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009ca25  47e5  e9b0c3ffff     jmp 0x19db00098dda  <+0xb9a>
0x19db0009ca2a  47ea  488945c8       REX.W movq [rbp-0x38],rax
0x19db0009ca2e  47ee  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009ca32  47f2  33f6           xorl rsi,rsi
0x19db0009ca34  47f4  4c8be0         REX.W movq r12,rax
0x19db0009ca37  47f7  498bc0         REX.W movq rax,r8
0x19db0009ca3a  47fa  49bac0dfbaf5ff7f0000 REX.W movq r10,0x7ffff5badfc0  (CopyFastSmiOrObjectElements)    ;; off heap target
0x19db0009ca44  4804  41ffd2         call r10
0x19db0009ca47  4807  4c8be0         REX.W movq r12,rax
0x19db0009ca4a  480a  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0009ca4e  480e  41b9b59e3008   movl r9,0x8309eb5       ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009ca54  4814  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009ca5a  481a  488b45c8       REX.W movq rax,[rbp-0x38]
0x19db0009ca5e  481e  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009ca62  4822  e9a3c3ffff     jmp 0x19db00098e0a  <+0xbca>
0x19db0009ca67  4827  cc             int3l
0x19db0009ca68  4828  488945c8       REX.W movq [rbp-0x38],rax
0x19db0009ca6c  482c  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009ca70  4830  33f6           xorl rsi,rsi
0x19db0009ca72  4832  4c8be0         REX.W movq r12,rax
0x19db0009ca75  4835  498bc0         REX.W movq rax,r8
0x19db0009ca78  4838  33db           xorl rbx,rbx
0x19db0009ca7a  483a  4c8b1576ffffff REX.W movq r10,[rip+0xffffff76]
0x19db0009ca81  4841  41ffd2         call r10
0x19db0009ca84  4844  a801           test al,0x1
0x19db0009ca86  4846  0f8484350000   jz 0x19db000a0010  <+0x7dd0>
0x19db0009ca8c  484c  4c8be0         REX.W movq r12,rax
0x19db0009ca8f  484f  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0009ca93  4853  41b9b59e3008   movl r9,0x8309eb5       ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009ca99  4859  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009ca9f  485f  488b45c8       REX.W movq rax,[rbp-0x38]
0x19db0009caa3  4863  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009caa7  4867  e9dcc3ffff     jmp 0x19db00098e88  <+0xc48>
0x19db0009caac  486c  488945c8       REX.W movq [rbp-0x38],rax
0x19db0009cab0  4870  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cab4  4874  33f6           xorl rsi,rsi
0x19db0009cab6  4876  4c8be0         REX.W movq r12,rax
0x19db0009cab9  4879  498bc0         REX.W movq rax,r8
0x19db0009cabc  487c  4c8b1579ffffff REX.W movq r10,[rip+0xffffff79]
0x19db0009cac3  4883  41ffd2         call r10
0x19db0009cac6  4886  4c8be0         REX.W movq r12,rax
0x19db0009cac9  4889  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0009cacd  488d  41b9b59e3008   movl r9,0x8309eb5       ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009cad3  4893  41bba59f3008   movl r11,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cad9  4899  488b45c8       REX.W movq rax,[rbp-0x38]
0x19db0009cadd  489d  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cae1  48a1  e9d2c3ffff     jmp 0x19db00098eb8  <+0xc78>
0x19db0009cae6  48a6  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009caea  48aa  4c897db0       REX.W movq [rbp-0x50],r15
0x19db0009caee  48ae  bb02000000     movl rbx,0x2
0x19db0009caf3  48b3  33f6           xorl rsi,rsi
0x19db0009caf5  48b5  4c8bd8         REX.W movq r11,rax
0x19db0009caf8  48b8  498bc1         REX.W movq rax,r9
0x19db0009cafb  48bb  4c8b15f5feffff REX.W movq r10,[rip+0xfffffef5]
0x19db0009cb02  48c2  41ffd2         call r10
0x19db0009cb05  48c5  a801           test al,0x1
0x19db0009cb07  48c7  0f840a350000   jz 0x19db000a0017  <+0x7dd7>
0x19db0009cb0d  48cd  4c8bf0         REX.W movq r14,rax
0x19db0009cb10  48d0  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cb16  48d6  41bc6ddc3008   movl r12,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009cb1c  48dc  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cb20  48e0  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cb24  48e4  4c8b7db0       REX.W movq r15,[rbp-0x50]
0x19db0009cb28  48e8  e97ec4ffff     jmp 0x19db00098fab  <+0xd6b>
0x19db0009cb2d  48ed  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cb31  48f1  4c897db0       REX.W movq [rbp-0x50],r15
0x19db0009cb35  48f5  33f6           xorl rsi,rsi
0x19db0009cb37  48f7  4c8bd8         REX.W movq r11,rax
0x19db0009cb3a  48fa  498bc1         REX.W movq rax,r9
0x19db0009cb3d  48fd  4c8b15f8feffff REX.W movq r10,[rip+0xfffffef8]
0x19db0009cb44  4904  41ffd2         call r10
0x19db0009cb47  4907  4c8bf0         REX.W movq r14,rax
0x19db0009cb4a  490a  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cb50  4910  41bc6ddc3008   movl r12,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009cb56  4916  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cb5a  491a  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cb5e  491e  4c8b7db0       REX.W movq r15,[rbp-0x50]
0x19db0009cb62  4922  e973c4ffff     jmp 0x19db00098fda  <+0xd9a>
0x19db0009cb67  4927  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cb6b  492b  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cb6f  492f  bb02000000     movl rbx,0x2
0x19db0009cb74  4934  33f6           xorl rsi,rsi
0x19db0009cb76  4936  4c8bd8         REX.W movq r11,rax
0x19db0009cb79  4939  498bc1         REX.W movq rax,r9
0x19db0009cb7c  493c  4c8b1574feffff REX.W movq r10,[rip+0xfffffe74]
0x19db0009cb83  4943  41ffd2         call r10
0x19db0009cb86  4946  a801           test al,0x1
0x19db0009cb88  4948  0f8474340000   jz 0x19db000a0002  <+0x7dc2>
0x19db0009cb8e  494e  4c8be0         REX.W movq r12,rax
0x19db0009cb91  4951  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cb97  4957  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cb9b  495b  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cb9f  495f  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cba3  4963  e9afc4ffff     jmp 0x19db00099057  <+0xe17>
0x19db0009cba8  4968  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cbac  496c  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cbb0  4970  33f6           xorl rsi,rsi
0x19db0009cbb2  4972  4c8bd8         REX.W movq r11,rax
0x19db0009cbb5  4975  498bc1         REX.W movq rax,r9
0x19db0009cbb8  4978  4c8b157dfeffff REX.W movq r10,[rip+0xfffffe7d]
0x19db0009cbbf  497f  41ffd2         call r10
0x19db0009cbc2  4982  4c8be0         REX.W movq r12,rax
0x19db0009cbc5  4985  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cbcb  498b  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cbcf  498f  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cbd3  4993  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cbd7  4997  e9abc4ffff     jmp 0x19db00099087  <+0xe47>
0x19db0009cbdc  499c  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cbe0  49a0  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cbe4  49a4  bb04000000     movl rbx,0x4
0x19db0009cbe9  49a9  33f6           xorl rsi,rsi
0x19db0009cbeb  49ab  4c8be0         REX.W movq r12,rax
0x19db0009cbee  49ae  498bc1         REX.W movq rax,r9
0x19db0009cbf1  49b1  4c8b15fffdffff REX.W movq r10,[rip+0xfffffdff]
0x19db0009cbf8  49b8  41ffd2         call r10
0x19db0009cbfb  49bb  a801           test al,0x1
0x19db0009cbfd  49bd  0f84f8330000   jz 0x19db0009fffb  <+0x7dbb>
0x19db0009cc03  49c3  4c8be0         REX.W movq r12,rax
0x19db0009cc06  49c6  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cc0c  49cc  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009cc12  49d2  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cc16  49d6  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cc1a  49da  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cc1e  49de  e953c5ffff     jmp 0x19db00099176  <+0xf36>
0x19db0009cc23  49e3  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cc27  49e7  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cc2b  49eb  33f6           xorl rsi,rsi
0x19db0009cc2d  49ed  4c8be0         REX.W movq r12,rax
0x19db0009cc30  49f0  498bc1         REX.W movq rax,r9
0x19db0009cc33  49f3  4c8b1502feffff REX.W movq r10,[rip+0xfffffe02]
0x19db0009cc3a  49fa  41ffd2         call r10
0x19db0009cc3d  49fd  4c8be0         REX.W movq r12,rax
0x19db0009cc40  4a00  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cc46  4a06  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009cc4c  4a0c  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cc50  4a10  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cc54  4a14  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cc58  4a18  e949c5ffff     jmp 0x19db000991a6  <+0xf66>
0x19db0009cc5d  4a1d  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cc61  4a21  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cc65  4a25  33f6           xorl rsi,rsi
0x19db0009cc67  4a27  4c8bd8         REX.W movq r11,rax
0x19db0009cc6a  4a2a  498bc1         REX.W movq rax,r9
0x19db0009cc6d  4a2d  bb04000000     movl rbx,0x4
0x19db0009cc72  4a32  4c8b157efdffff REX.W movq r10,[rip+0xfffffd7e]
0x19db0009cc79  4a39  41ffd2         call r10
0x19db0009cc7c  4a3c  a801           test al,0x1
0x19db0009cc7e  4a3e  0f8469330000   jz 0x19db0009ffed  <+0x7dad>
0x19db0009cc84  4a44  4c8be0         REX.W movq r12,rax
0x19db0009cc87  4a47  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cc8d  4a4d  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cc91  4a51  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cc95  4a55  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cc99  4a59  e986c5ffff     jmp 0x19db00099224  <+0xfe4>
0x19db0009cc9e  4a5e  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cca2  4a62  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cca6  4a66  33f6           xorl rsi,rsi
0x19db0009cca8  4a68  4c8bd8         REX.W movq r11,rax
0x19db0009ccab  4a6b  498bc1         REX.W movq rax,r9
0x19db0009ccae  4a6e  4c8b1587fdffff REX.W movq r10,[rip+0xfffffd87]
0x19db0009ccb5  4a75  41ffd2         call r10
0x19db0009ccb8  4a78  4c8be0         REX.W movq r12,rax
0x19db0009ccbb  4a7b  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009ccc1  4a81  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009ccc5  4a85  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009ccc9  4a89  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cccd  4a8d  e982c5ffff     jmp 0x19db00099254  <+0x1014>
0x19db0009ccd2  4a92  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009ccd6  4a96  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009ccda  4a9a  bb06000000     movl rbx,0x6
0x19db0009ccdf  4a9f  33f6           xorl rsi,rsi
0x19db0009cce1  4aa1  4c8be0         REX.W movq r12,rax
0x19db0009cce4  4aa4  498bc1         REX.W movq rax,r9
0x19db0009cce7  4aa7  4c8b1509fdffff REX.W movq r10,[rip+0xfffffd09]
0x19db0009ccee  4aae  41ffd2         call r10
0x19db0009ccf1  4ab1  a801           test al,0x1
0x19db0009ccf3  4ab3  0f84d8320000   jz 0x19db0009ffd1  <+0x7d91>
0x19db0009ccf9  4ab9  4c8be0         REX.W movq r12,rax
0x19db0009ccfc  4abc  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cd02  4ac2  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009cd08  4ac8  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cd0c  4acc  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cd10  4ad0  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cd14  4ad4  e92ac6ffff     jmp 0x19db00099343  <+0x1103>
0x19db0009cd19  4ad9  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cd1d  4add  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cd21  4ae1  33f6           xorl rsi,rsi
0x19db0009cd23  4ae3  4c8be0         REX.W movq r12,rax
0x19db0009cd26  4ae6  498bc1         REX.W movq rax,r9
0x19db0009cd29  4ae9  4c8b150cfdffff REX.W movq r10,[rip+0xfffffd0c]
0x19db0009cd30  4af0  41ffd2         call r10
0x19db0009cd33  4af3  4c8be0         REX.W movq r12,rax
0x19db0009cd36  4af6  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cd3c  4afc  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009cd42  4b02  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cd46  4b06  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cd4a  4b0a  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cd4e  4b0e  e920c6ffff     jmp 0x19db00099373  <+0x1133>
0x19db0009cd53  4b13  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cd57  4b17  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cd5b  4b1b  33f6           xorl rsi,rsi
0x19db0009cd5d  4b1d  4c8bd8         REX.W movq r11,rax
0x19db0009cd60  4b20  498bc1         REX.W movq rax,r9
0x19db0009cd63  4b23  bb06000000     movl rbx,0x6
0x19db0009cd68  4b28  4c8b1588fcffff REX.W movq r10,[rip+0xfffffc88]
0x19db0009cd6f  4b2f  41ffd2         call r10
0x19db0009cd72  4b32  a801           test al,0x1
0x19db0009cd74  4b34  0f843b320000   jz 0x19db0009ffb5  <+0x7d75>
0x19db0009cd7a  4b3a  4c8be0         REX.W movq r12,rax
0x19db0009cd7d  4b3d  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cd83  4b43  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cd87  4b47  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cd8b  4b4b  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cd8f  4b4f  e95dc6ffff     jmp 0x19db000993f1  <+0x11b1>
0x19db0009cd94  4b54  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cd98  4b58  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cd9c  4b5c  33f6           xorl rsi,rsi
0x19db0009cd9e  4b5e  4c8bd8         REX.W movq r11,rax
0x19db0009cda1  4b61  498bc1         REX.W movq rax,r9
0x19db0009cda4  4b64  4c8b1591fcffff REX.W movq r10,[rip+0xfffffc91]
0x19db0009cdab  4b6b  41ffd2         call r10
0x19db0009cdae  4b6e  4c8be0         REX.W movq r12,rax
0x19db0009cdb1  4b71  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cdb7  4b77  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cdbb  4b7b  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cdbf  4b7f  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cdc3  4b83  e959c6ffff     jmp 0x19db00099421  <+0x11e1>
0x19db0009cdc8  4b88  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cdcc  4b8c  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cdd0  4b90  bb08000000     movl rbx,0x8
0x19db0009cdd5  4b95  33f6           xorl rsi,rsi
0x19db0009cdd7  4b97  4c8be0         REX.W movq r12,rax
0x19db0009cdda  4b9a  498bc1         REX.W movq rax,r9
0x19db0009cddd  4b9d  4c8b1513fcffff REX.W movq r10,[rip+0xfffffc13]
0x19db0009cde4  4ba4  41ffd2         call r10
0x19db0009cde7  4ba7  a801           test al,0x1
0x19db0009cde9  4ba9  0f849c310000   jz 0x19db0009ff8b  <+0x7d4b>
0x19db0009cdef  4baf  4c8be0         REX.W movq r12,rax
0x19db0009cdf2  4bb2  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cdf8  4bb8  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009cdfe  4bbe  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009ce02  4bc2  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009ce06  4bc6  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009ce0a  4bca  e901c7ffff     jmp 0x19db00099510  <+0x12d0>
0x19db0009ce0f  4bcf  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009ce13  4bd3  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009ce17  4bd7  33f6           xorl rsi,rsi
0x19db0009ce19  4bd9  4c8be0         REX.W movq r12,rax
0x19db0009ce1c  4bdc  498bc1         REX.W movq rax,r9
0x19db0009ce1f  4bdf  4c8b1516fcffff REX.W movq r10,[rip+0xfffffc16]
0x19db0009ce26  4be6  41ffd2         call r10
0x19db0009ce29  4be9  4c8be0         REX.W movq r12,rax
0x19db0009ce2c  4bec  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009ce32  4bf2  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009ce38  4bf8  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009ce3c  4bfc  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009ce40  4c00  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009ce44  4c04  e9f7c6ffff     jmp 0x19db00099540  <+0x1300>
0x19db0009ce49  4c09  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009ce4d  4c0d  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009ce51  4c11  33f6           xorl rsi,rsi
0x19db0009ce53  4c13  4c8bd8         REX.W movq r11,rax
0x19db0009ce56  4c16  498bc1         REX.W movq rax,r9
0x19db0009ce59  4c19  bb08000000     movl rbx,0x8
0x19db0009ce5e  4c1e  4c8b1592fbffff REX.W movq r10,[rip+0xfffffb92]
0x19db0009ce65  4c25  41ffd2         call r10
0x19db0009ce68  4c28  a801           test al,0x1
0x19db0009ce6a  4c2a  0f84ff300000   jz 0x19db0009ff6f  <+0x7d2f>
0x19db0009ce70  4c30  4c8be0         REX.W movq r12,rax
0x19db0009ce73  4c33  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009ce79  4c39  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009ce7d  4c3d  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009ce81  4c41  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009ce85  4c45  e934c7ffff     jmp 0x19db000995be  <+0x137e>
0x19db0009ce8a  4c4a  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009ce8e  4c4e  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009ce92  4c52  33f6           xorl rsi,rsi
0x19db0009ce94  4c54  4c8bd8         REX.W movq r11,rax
0x19db0009ce97  4c57  498bc1         REX.W movq rax,r9
0x19db0009ce9a  4c5a  4c8b159bfbffff REX.W movq r10,[rip+0xfffffb9b]
0x19db0009cea1  4c61  41ffd2         call r10
0x19db0009cea4  4c64  4c8be0         REX.W movq r12,rax
0x19db0009cea7  4c67  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cead  4c6d  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009ceb1  4c71  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009ceb5  4c75  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009ceb9  4c79  e930c7ffff     jmp 0x19db000995ee  <+0x13ae>
0x19db0009cebe  4c7e  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cec2  4c82  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cec6  4c86  bb0a000000     movl rbx,0xa
0x19db0009cecb  4c8b  33f6           xorl rsi,rsi
0x19db0009cecd  4c8d  4c8be0         REX.W movq r12,rax
0x19db0009ced0  4c90  498bc1         REX.W movq rax,r9
0x19db0009ced3  4c93  4c8b151dfbffff REX.W movq r10,[rip+0xfffffb1d]
0x19db0009ceda  4c9a  41ffd2         call r10
0x19db0009cedd  4c9d  a801           test al,0x1
0x19db0009cedf  4c9f  0f84b12f0000   jz 0x19db0009fe96  <+0x7c56>
0x19db0009cee5  4ca5  4c8be0         REX.W movq r12,rax
0x19db0009cee8  4ca8  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009ceee  4cae  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009cef4  4cb4  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cef8  4cb8  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cefc  4cbc  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cf00  4cc0  e9d8c7ffff     jmp 0x19db000996dd  <+0x149d>
0x19db0009cf05  4cc5  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cf09  4cc9  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cf0d  4ccd  33f6           xorl rsi,rsi
0x19db0009cf0f  4ccf  4c8be0         REX.W movq r12,rax
0x19db0009cf12  4cd2  498bc1         REX.W movq rax,r9
0x19db0009cf15  4cd5  4c8b1520fbffff REX.W movq r10,[rip+0xfffffb20]
0x19db0009cf1c  4cdc  41ffd2         call r10
0x19db0009cf1f  4cdf  4c8be0         REX.W movq r12,rax
0x19db0009cf22  4ce2  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cf28  4ce8  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009cf2e  4cee  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cf32  4cf2  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cf36  4cf6  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cf3a  4cfa  e9cec7ffff     jmp 0x19db0009970d  <+0x14cd>
0x19db0009cf3f  4cff  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cf43  4d03  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cf47  4d07  33f6           xorl rsi,rsi
0x19db0009cf49  4d09  4c8bd8         REX.W movq r11,rax
0x19db0009cf4c  4d0c  498bc1         REX.W movq rax,r9
0x19db0009cf4f  4d0f  bb0a000000     movl rbx,0xa
0x19db0009cf54  4d14  4c8b159cfaffff REX.W movq r10,[rip+0xfffffa9c]
0x19db0009cf5b  4d1b  41ffd2         call r10
0x19db0009cf5e  4d1e  a801           test al,0x1
0x19db0009cf60  4d20  0f84542d0000   jz 0x19db0009fcba  <+0x7a7a>
0x19db0009cf66  4d26  4c8be0         REX.W movq r12,rax
0x19db0009cf69  4d29  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cf6f  4d2f  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cf73  4d33  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cf77  4d37  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cf7b  4d3b  e90bc8ffff     jmp 0x19db0009978b  <+0x154b>
0x19db0009cf80  4d40  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cf84  4d44  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cf88  4d48  33f6           xorl rsi,rsi
0x19db0009cf8a  4d4a  4c8bd8         REX.W movq r11,rax
0x19db0009cf8d  4d4d  498bc1         REX.W movq rax,r9
0x19db0009cf90  4d50  4c8b15a5faffff REX.W movq r10,[rip+0xfffffaa5]
0x19db0009cf97  4d57  41ffd2         call r10
0x19db0009cf9a  4d5a  4c8be0         REX.W movq r12,rax
0x19db0009cf9d  4d5d  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cfa3  4d63  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cfa7  4d67  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cfab  4d6b  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cfaf  4d6f  e907c8ffff     jmp 0x19db000997bb  <+0x157b>
0x19db0009cfb4  4d74  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cfb8  4d78  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009cfbc  4d7c  bb0c000000     movl rbx,0xc
0x19db0009cfc1  4d81  33f6           xorl rsi,rsi
0x19db0009cfc3  4d83  4c8be0         REX.W movq r12,rax
0x19db0009cfc6  4d86  498bc1         REX.W movq rax,r9
0x19db0009cfc9  4d89  4c8b1527faffff REX.W movq r10,[rip+0xfffffa27]
0x19db0009cfd0  4d90  41ffd2         call r10
0x19db0009cfd3  4d93  a801           test al,0x1
0x19db0009cfd5  4d95  0f847d2c0000   jz 0x19db0009fc58  <+0x7a18>
0x19db0009cfdb  4d9b  4c8be0         REX.W movq r12,rax
0x19db0009cfde  4d9e  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009cfe4  4da4  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009cfea  4daa  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009cfee  4dae  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009cff2  4db2  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009cff6  4db6  e9afc8ffff     jmp 0x19db000998aa  <+0x166a>
0x19db0009cffb  4dbb  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009cfff  4dbf  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009d003  4dc3  33f6           xorl rsi,rsi
0x19db0009d005  4dc5  4c8be0         REX.W movq r12,rax
0x19db0009d008  4dc8  498bc1         REX.W movq rax,r9
0x19db0009d00b  4dcb  4c8b152afaffff REX.W movq r10,[rip+0xfffffa2a]
0x19db0009d012  4dd2  41ffd2         call r10
0x19db0009d015  4dd5  4c8be0         REX.W movq r12,rax
0x19db0009d018  4dd8  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d01e  4dde  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009d024  4de4  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d028  4de8  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009d02c  4dec  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009d030  4df0  e9a5c8ffff     jmp 0x19db000998da  <+0x169a>
0x19db0009d035  4df5  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d039  4df9  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009d03d  4dfd  33f6           xorl rsi,rsi
0x19db0009d03f  4dff  4c8bd8         REX.W movq r11,rax
0x19db0009d042  4e02  498bc1         REX.W movq rax,r9
0x19db0009d045  4e05  bb0c000000     movl rbx,0xc
0x19db0009d04a  4e0a  4c8b15a6f9ffff REX.W movq r10,[rip+0xfffff9a6]
0x19db0009d051  4e11  41ffd2         call r10
0x19db0009d054  4e14  a801           test al,0x1
0x19db0009d056  4e16  0f84cb2b0000   jz 0x19db0009fc27  <+0x79e7>
0x19db0009d05c  4e1c  4c8be0         REX.W movq r12,rax
0x19db0009d05f  4e1f  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d065  4e25  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d069  4e29  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009d06d  4e2d  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009d071  4e31  e9e2c8ffff     jmp 0x19db00099958  <+0x1718>
0x19db0009d076  4e36  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d07a  4e3a  4c8975b0       REX.W movq [rbp-0x50],r14
0x19db0009d07e  4e3e  33f6           xorl rsi,rsi
0x19db0009d080  4e40  4c8bd8         REX.W movq r11,rax
0x19db0009d083  4e43  498bc1         REX.W movq rax,r9
0x19db0009d086  4e46  4c8b15aff9ffff REX.W movq r10,[rip+0xfffff9af]
0x19db0009d08d  4e4d  41ffd2         call r10
0x19db0009d090  4e50  4c8be0         REX.W movq r12,rax
0x19db0009d093  4e53  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d099  4e59  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d09d  4e5d  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009d0a1  4e61  4c8b75b0       REX.W movq r14,[rbp-0x50]
0x19db0009d0a5  4e65  e9dec8ffff     jmp 0x19db00099988  <+0x1748>
0x19db0009d0aa  4e6a  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d0ae  4e6e  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db0009d0b2  4e72  bb0e000000     movl rbx,0xe
0x19db0009d0b7  4e77  33f6           xorl rsi,rsi
0x19db0009d0b9  4e79  4c8be0         REX.W movq r12,rax
0x19db0009d0bc  4e7c  498bc1         REX.W movq rax,r9
0x19db0009d0bf  4e7f  4c8b1531f9ffff REX.W movq r10,[rip+0xfffff931]
0x19db0009d0c6  4e86  41ffd2         call r10
0x19db0009d0c9  4e89  a801           test al,0x1
0x19db0009d0cb  4e8b  0f840d2a0000   jz 0x19db0009fade  <+0x789e>
0x19db0009d0d1  4e91  4c8be0         REX.W movq r12,rax
0x19db0009d0d4  4e94  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d0da  4e9a  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009d0e0  4ea0  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d0e4  4ea4  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009d0e8  4ea8  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db0009d0ec  4eac  e986c9ffff     jmp 0x19db00099a77  <+0x1837>
0x19db0009d0f1  4eb1  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d0f5  4eb5  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db0009d0f9  4eb9  33f6           xorl rsi,rsi
0x19db0009d0fb  4ebb  4c8be0         REX.W movq r12,rax
0x19db0009d0fe  4ebe  498bc1         REX.W movq rax,r9
0x19db0009d101  4ec1  4c8b1534f9ffff REX.W movq r10,[rip+0xfffff934]
0x19db0009d108  4ec8  41ffd2         call r10
0x19db0009d10b  4ecb  4c8be0         REX.W movq r12,rax
0x19db0009d10e  4ece  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d114  4ed4  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009d11a  4eda  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d11e  4ede  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009d122  4ee2  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db0009d126  4ee6  e97cc9ffff     jmp 0x19db00099aa7  <+0x1867>
0x19db0009d12b  4eeb  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d12f  4eef  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db0009d133  4ef3  33f6           xorl rsi,rsi
0x19db0009d135  4ef5  4c8bd8         REX.W movq r11,rax
0x19db0009d138  4ef8  498bc1         REX.W movq rax,r9
0x19db0009d13b  4efb  bb0e000000     movl rbx,0xe
0x19db0009d140  4f00  4c8b15b0f8ffff REX.W movq r10,[rip+0xfffff8b0]
0x19db0009d147  4f07  41ffd2         call r10
0x19db0009d14a  4f0a  a801           test al,0x1
0x19db0009d14c  4f0c  0f8446290000   jz 0x19db0009fa98  <+0x7858>
0x19db0009d152  4f12  4c8be0         REX.W movq r12,rax
0x19db0009d155  4f15  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d15b  4f1b  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d15f  4f1f  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009d163  4f23  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db0009d167  4f27  e9b9c9ffff     jmp 0x19db00099b25  <+0x18e5>
0x19db0009d16c  4f2c  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d170  4f30  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db0009d174  4f34  33f6           xorl rsi,rsi
0x19db0009d176  4f36  4c8bd8         REX.W movq r11,rax
0x19db0009d179  4f39  498bc1         REX.W movq rax,r9
0x19db0009d17c  4f3c  4c8b15b9f8ffff REX.W movq r10,[rip+0xfffff8b9]
0x19db0009d183  4f43  41ffd2         call r10
0x19db0009d186  4f46  4c8be0         REX.W movq r12,rax
0x19db0009d189  4f49  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d18f  4f4f  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d193  4f53  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009d197  4f57  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db0009d19b  4f5b  e9b5c9ffff     jmp 0x19db00099b55  <+0x1915>
0x19db0009d1a0  4f60  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d1a4  4f64  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db0009d1a8  4f68  33f6           xorl rsi,rsi
0x19db0009d1aa  4f6a  4c8be0         REX.W movq r12,rax
0x19db0009d1ad  4f6d  498bc1         REX.W movq rax,r9
0x19db0009d1b0  4f70  bb10000000     movl rbx,0x10
0x19db0009d1b5  4f75  4c8b153bf8ffff REX.W movq r10,[rip+0xfffff83b]
0x19db0009d1bc  4f7c  41ffd2         call r10
0x19db0009d1bf  4f7f  a801           test al,0x1
0x19db0009d1c1  4f81  0f848b280000   jz 0x19db0009fa52  <+0x7812>
0x19db0009d1c7  4f87  4c8be0         REX.W movq r12,rax
0x19db0009d1ca  4f8a  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d1d0  4f90  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009d1d6  4f96  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d1da  4f9a  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009d1de  4f9e  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db0009d1e2  4fa2  e95acaffff     jmp 0x19db00099c41  <+0x1a01>
0x19db0009d1e7  4fa7  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d1eb  4fab  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db0009d1ef  4faf  33f6           xorl rsi,rsi
0x19db0009d1f1  4fb1  4c8be0         REX.W movq r12,rax
0x19db0009d1f4  4fb4  498bc1         REX.W movq rax,r9
0x19db0009d1f7  4fb7  4c8b153ef8ffff REX.W movq r10,[rip+0xfffff83e]
0x19db0009d1fe  4fbe  41ffd2         call r10
0x19db0009d201  4fc1  4c8be0         REX.W movq r12,rax
0x19db0009d204  4fc4  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d20a  4fca  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009d210  4fd0  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d214  4fd4  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009d218  4fd8  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db0009d21c  4fdc  e950caffff     jmp 0x19db00099c71  <+0x1a31>
0x19db0009d221  4fe1  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d225  4fe5  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db0009d229  4fe9  33f6           xorl rsi,rsi
0x19db0009d22b  4feb  4c8bd8         REX.W movq r11,rax
0x19db0009d22e  4fee  498bc1         REX.W movq rax,r9
0x19db0009d231  4ff1  bb10000000     movl rbx,0x10
0x19db0009d236  4ff6  4c8b15baf7ffff REX.W movq r10,[rip+0xfffff7ba]
0x19db0009d23d  4ffd  41ffd2         call r10
0x19db0009d240  5000  a801           test al,0x1
0x19db0009d242  5002  0f849a270000   jz 0x19db0009f9e2  <+0x77a2>
0x19db0009d248  5008  4c8be0         REX.W movq r12,rax
0x19db0009d24b  500b  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d251  5011  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d255  5015  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009d259  5019  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db0009d25d  501d  e98dcaffff     jmp 0x19db00099cef  <+0x1aaf>
0x19db0009d262  5022  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d266  5026  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db0009d26a  502a  33f6           xorl rsi,rsi
0x19db0009d26c  502c  4c8bd8         REX.W movq r11,rax
0x19db0009d26f  502f  498bc1         REX.W movq rax,r9
0x19db0009d272  5032  4c8b15c3f7ffff REX.W movq r10,[rip+0xfffff7c3]
0x19db0009d279  5039  41ffd2         call r10
0x19db0009d27c  503c  4c8be0         REX.W movq r12,rax
0x19db0009d27f  503f  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d285  5045  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d289  5049  4c8b4dc8       REX.W movq r9,[rbp-0x38]
0x19db0009d28d  504d  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db0009d291  5051  e989caffff     jmp 0x19db00099d1f  <+0x1adf>
0x19db0009d296  5056  baa4000000     movl rdx,0xa4
0x19db0009d29b  505b  4c8b15def5ffff REX.W movq r10,[rip+0xfffff5de]
0x19db0009d2a2  5062  41ffd2         call r10
0x19db0009d2a5  5065  4c8d70ff       REX.W leaq r14,[rax-0x1]
0x19db0009d2a9  5069  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009d2af  506f  4c8b25f4afffff REX.W movq r12,[rip+0xffffaff4]
0x19db0009d2b6  5076  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d2bc  507c  e9c4caffff     jmp 0x19db00099d85  <+0x1b45>
0x19db0009d2c1  5081  c5fb104203     vmovsd xmm0,[rdx+0x3]
0x19db0009d2c6  5086  c5fb2cd0       vcvttsd2si rdx,xmm0
0x19db0009d2ca  508a  e92fccffff     jmp 0x19db00099efe  <+0x1cbe>
0x19db0009d2cf  508f  4c8bfa         REX.W movq r15,rdx
0x19db0009d2d2  5092  ba28000000     movl rdx,0x28
0x19db0009d2d7  5097  4c8bf2         REX.W movq r14,rdx
0x19db0009d2da  509a  4c8b159ff5ffff REX.W movq r10,[rip+0xfffff59f]
0x19db0009d2e1  50a1  41ffd2         call r10
0x19db0009d2e4  50a4  4c8d70ff       REX.W leaq r14,[rax-0x1]
0x19db0009d2e8  50a8  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db0009d2ec  50ac  4c8b25b7afffff REX.W movq r12,[rip+0xffffafb7]
0x19db0009d2f3  50b3  488b15c1afffff REX.W movq rdx,[rip+0xffffafc1]
0x19db0009d2fa  50ba  41b8a59f3008   movl r8,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d300  50c0  498b8558010000 REX.W movq rax,[r13+0x158] (root (empty_fixed_array))
0x19db0009d307  50c7  498b9dd0000000 REX.W movq rbx,[r13+0xd0] (root (fixed_array_map))
0x19db0009d30e  50ce  41bb6ddc3008   movl r11,0x830dc6d      ;; (compressed) object: 0x19db0830dc6d <Map(PACKED_ELEMENTS)>
0x19db0009d314  50d4  e9acccffff     jmp 0x19db00099fc5  <+0x1d85>
0x19db0009d319  50d9  c5fb104103     vmovsd xmm0,[rcx+0x3]
0x19db0009d31e  50de  e981cdffff     jmp 0x19db0009a0a4  <+0x1e64>
0x19db0009d323  50e3  ba50000000     movl rdx,0x50
0x19db0009d328  50e8  4c8b1551f5ffff REX.W movq r10,[rip+0xfffff551]
0x19db0009d32f  50ef  41ffd2         call r10
0x19db0009d332  50f2  4c8d60ff       REX.W leaq r12,[rax-0x1]
0x19db0009d336  50f6  488b4588       REX.W movq rax,[rbp-0x78]
0x19db0009d33a  50fa  4c8b1d69afffff REX.W movq r11,[rip+0xffffaf69]
0x19db0009d341  5101  e97fd1ffff     jmp 0x19db0009a4c5  <+0x2285>
0x19db0009d346  5106  4c8bc8         REX.W movq r9,rax
0x19db0009d349  5109  4c8bf3         REX.W movq r14,rbx
0x19db0009d34c  510c  48bbb0ae02f7ff7f0000 REX.W movq rbx,0x7ffff702aeb0    ;; external reference (Runtime::StackGuard)
0x19db0009d356  5116  33c0           xorl rax,rax
0x19db0009d358  5118  4c8bfe         REX.W movq r15,rsi
0x19db0009d35b  511b  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009d365  5125  4c8b15f6f4ffff REX.W movq r10,[rip+0xfffff4f6]
0x19db0009d36c  512c  41ffd2         call r10
0x19db0009d36f  512f  4c8b1d34afffff REX.W movq r11,[rip+0xffffaf34]
0x19db0009d376  5136  beb59e3008     movl rsi,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009d37b  513b  498b9dd0000000 REX.W movq rbx,[r13+0xd0] (root (fixed_array_map))
0x19db0009d382  5142  4c8b6598       REX.W movq r12,[rbp-0x68]
0x19db0009d386  5146  488b4d90       REX.W movq rcx,[rbp-0x70]
0x19db0009d38a  514a  488b4588       REX.W movq rax,[rbp-0x78]
0x19db0009d38e  514e  488b9570ffffff REX.W movq rdx,[rbp-0x90]
0x19db0009d395  5155  4c8b8568ffffff REX.W movq r8,[rbp-0x98]
0x19db0009d39c  515c  e9d2d2ffff     jmp 0x19db0009a673  <+0x2433>
0x19db0009d3a1  5161  478d0409       leal r8,[r9+r9*1]
0x19db0009d3a5  5165  4c8b1585b2ffff REX.W movq r10,[rip+0xffffb285]
0x19db0009d3ac  516c  4d3bd0         REX.W cmpq r10,r8
0x19db0009d3af  516f  7712           ja 0x19db0009d3c3  <+0x5183>
0x19db0009d3b1  5171  488b1588b2ffff REX.W movq rdx,[rip+0xffffb288]
0x19db0009d3b8  5178  4c8b1599aeffff REX.W movq r10,[rip+0xffffae99]
0x19db0009d3bf  517f  41ffd2         call r10
0x19db0009d3c2  5182  cc             int3l
0x19db0009d3c3  5183  4c894dd0       REX.W movq [rbp-0x30],r9
0x19db0009d3c7  5187  4889bd78ffffff REX.W movq [rbp-0x88],rdi
0x19db0009d3ce  518e  48898560ffffff REX.W movq [rbp-0xa0],rax
0x19db0009d3d5  5195  33f6           xorl rsi,rsi
0x19db0009d3d7  5197  4c8bfb         REX.W movq r15,rbx
0x19db0009d3da  519a  498bd8         REX.W movq rbx,r8
0x19db0009d3dd  519d  4c8bc0         REX.W movq r8,rax
0x19db0009d3e0  51a0  488bc2         REX.W movq rax,rdx
0x19db0009d3e3  51a3  4c8b150df6ffff REX.W movq r10,[rip+0xfffff60d]
0x19db0009d3ea  51aa  41ffd2         call r10
0x19db0009d3ed  51ad  a801           test al,0x1
0x19db0009d3ef  51af  0f84ca250000   jz 0x19db0009f9bf  <+0x777f>
0x19db0009d3f5  51b5  4c8bf8         REX.W movq r15,rax
0x19db0009d3f8  51b8  4c8b1dabaeffff REX.W movq r11,[rip+0xffffaeab]
0x19db0009d3ff  51bf  498b9dd0000000 REX.W movq rbx,[r13+0xd0] (root (fixed_array_map))
0x19db0009d406  51c6  4c8b6598       REX.W movq r12,[rbp-0x68]
0x19db0009d40a  51ca  488b4d90       REX.W movq rcx,[rbp-0x70]
0x19db0009d40e  51ce  4c8b7588       REX.W movq r14,[rbp-0x78]
0x19db0009d412  51d2  488b9570ffffff REX.W movq rdx,[rbp-0x90]
0x19db0009d419  51d9  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db0009d41d  51dd  488bbd78ffffff REX.W movq rdi,[rbp-0x88]
0x19db0009d424  51e4  488b8560ffffff REX.W movq rax,[rbp-0xa0]
0x19db0009d42b  51eb  e907d3ffff     jmp 0x19db0009a737  <+0x24f7>
0x19db0009d430  51f0  4c894dd0       REX.W movq [rbp-0x30],r9
0x19db0009d434  51f4  4889bd78ffffff REX.W movq [rbp-0x88],rdi
0x19db0009d43b  51fb  48898560ffffff REX.W movq [rbp-0xa0],rax
0x19db0009d442  5202  33f6           xorl rsi,rsi
0x19db0009d444  5204  4c8bc0         REX.W movq r8,rax
0x19db0009d447  5207  488bc2         REX.W movq rax,rdx
0x19db0009d44a  520a  4c8b15ebf5ffff REX.W movq r10,[rip+0xfffff5eb]
0x19db0009d451  5211  41ffd2         call r10
0x19db0009d454  5214  4c8bf8         REX.W movq r15,rax
0x19db0009d457  5217  4c8b1d4caeffff REX.W movq r11,[rip+0xffffae4c]
0x19db0009d45e  521e  498b9dd0000000 REX.W movq rbx,[r13+0xd0] (root (fixed_array_map))
0x19db0009d465  5225  4c8b6598       REX.W movq r12,[rbp-0x68]
0x19db0009d469  5229  488b4d90       REX.W movq rcx,[rbp-0x70]
0x19db0009d46d  522d  4c8b7588       REX.W movq r14,[rbp-0x78]
0x19db0009d471  5231  488b9570ffffff REX.W movq rdx,[rbp-0x90]
0x19db0009d478  5238  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db0009d47c  523c  488bbd78ffffff REX.W movq rdi,[rbp-0x88]
0x19db0009d483  5243  488b8560ffffff REX.W movq rax,[rbp-0xa0]
0x19db0009d48a  524a  e9d7d2ffff     jmp 0x19db0009a766  <+0x2526>
0x19db0009d48f  524f  478d3409       leal r14,[r9+r9*1]
0x19db0009d493  5253  4c8b1597b1ffff REX.W movq r10,[rip+0xffffb197]
0x19db0009d49a  525a  4d3bd6         REX.W cmpq r10,r14
0x19db0009d49d  525d  7712           ja 0x19db0009d4b1  <+0x5271>
0x19db0009d49f  525f  488b159ab1ffff REX.W movq rdx,[rip+0xffffb19a]
0x19db0009d4a6  5266  4c8b15abadffff REX.W movq r10,[rip+0xffffadab]
0x19db0009d4ad  526d  41ffd2         call r10
0x19db0009d4b0  5270  cc             int3l
0x19db0009d4b1  5271  4c894dd0       REX.W movq [rbp-0x30],r9
0x19db0009d4b5  5275  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db0009d4b9  5279  4889bd78ffffff REX.W movq [rbp-0x88],rdi
0x19db0009d4c0  5280  4889b560ffffff REX.W movq [rbp-0xa0],rsi
0x19db0009d4c7  5287  4c89e0         REX.W movq rax,r12
0x19db0009d4ca  528a  4c8bd3         REX.W movq r10,rbx
0x19db0009d4cd  528d  498bde         REX.W movq rbx,r14
0x19db0009d4d0  5290  4d8bf2         REX.W movq r14,r10
0x19db0009d4d3  5293  4c8bfe         REX.W movq r15,rsi
0x19db0009d4d6  5296  33f6           xorl rsi,rsi
0x19db0009d4d8  5298  4c8b1518f5ffff REX.W movq r10,[rip+0xfffff518]
0x19db0009d4df  529f  41ffd2         call r10
0x19db0009d4e2  52a2  a801           test al,0x1
0x19db0009d4e4  52a4  0f84b2240000   jz 0x19db0009f99c  <+0x775c>
0x19db0009d4ea  52aa  4c8bf8         REX.W movq r15,rax
0x19db0009d4ed  52ad  4c8b1db6adffff REX.W movq r11,[rip+0xffffadb6]
0x19db0009d4f4  52b4  498b9dd0000000 REX.W movq rbx,[r13+0xd0] (root (fixed_array_map))
0x19db0009d4fb  52bb  488b4d90       REX.W movq rcx,[rbp-0x70]
0x19db0009d4ff  52bf  488b9570ffffff REX.W movq rdx,[rbp-0x90]
0x19db0009d506  52c6  4c8ba568ffffff REX.W movq r12,[rbp-0x98]
0x19db0009d50d  52cd  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db0009d511  52d1  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db0009d515  52d5  488bbd78ffffff REX.W movq rdi,[rbp-0x88]
0x19db0009d51c  52dc  488bb560ffffff REX.W movq rsi,[rbp-0xa0]
0x19db0009d523  52e3  e92ed3ffff     jmp 0x19db0009a856  <+0x2616>
0x19db0009d528  52e8  4c894dd0       REX.W movq [rbp-0x30],r9
0x19db0009d52c  52ec  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db0009d530  52f0  4889bd78ffffff REX.W movq [rbp-0x88],rdi
0x19db0009d537  52f7  4889b560ffffff REX.W movq [rbp-0xa0],rsi
0x19db0009d53e  52fe  4c89e0         REX.W movq rax,r12
0x19db0009d541  5301  4c8bf6         REX.W movq r14,rsi
0x19db0009d544  5304  33f6           xorl rsi,rsi
0x19db0009d546  5306  4c8b15eff4ffff REX.W movq r10,[rip+0xfffff4ef]
0x19db0009d54d  530d  41ffd2         call r10
0x19db0009d550  5310  4c8bf8         REX.W movq r15,rax
0x19db0009d553  5313  4c8b1d50adffff REX.W movq r11,[rip+0xffffad50]
0x19db0009d55a  531a  498b9dd0000000 REX.W movq rbx,[r13+0xd0] (root (fixed_array_map))
0x19db0009d561  5321  488b4d90       REX.W movq rcx,[rbp-0x70]
0x19db0009d565  5325  488b9570ffffff REX.W movq rdx,[rbp-0x90]
0x19db0009d56c  532c  4c8ba568ffffff REX.W movq r12,[rbp-0x98]
0x19db0009d573  5333  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db0009d577  5337  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db0009d57b  533b  488bbd78ffffff REX.W movq rdi,[rbp-0x88]
0x19db0009d582  5342  488bb560ffffff REX.W movq rsi,[rbp-0xa0]
0x19db0009d589  5349  e9f7d2ffff     jmp 0x19db0009a885  <+0x2645>
0x19db0009d58e  534e  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db0009d592  5352  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009d59c  535c  4c8bcb         REX.W movq r9,rbx
0x19db0009d59f  535f  488b1da8fdffff REX.W movq rbx,[rip+0xfffffda8]
0x19db0009d5a6  5366  33c0           xorl rax,rax
0x19db0009d5a8  5368  4c8b15b3f2ffff REX.W movq r10,[rip+0xfffff2b3]
0x19db0009d5af  536f  41ffd2         call r10
0x19db0009d5b2  5372  4c8b1df1acffff REX.W movq r11,[rip+0xffffacf1]
0x19db0009d5b9  5379  498b9dd0000000 REX.W movq rbx,[r13+0xd0] (root (fixed_array_map))
0x19db0009d5c0  5380  488b4d90       REX.W movq rcx,[rbp-0x70]
0x19db0009d5c4  5384  488b9570ffffff REX.W movq rdx,[rbp-0x90]
0x19db0009d5cb  538b  4c8ba568ffffff REX.W movq r12,[rbp-0x98]
0x19db0009d5d2  5392  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db0009d5d6  5396  e9b5d0ffff     jmp 0x19db0009a690  <+0x2450>
0x19db0009d5db  539b  488bc2         REX.W movq rax,rdx
0x19db0009d5de  539e  ba38000000     movl rdx,0x38
0x19db0009d5e3  53a3  4c8b1596f2ffff REX.W movq r10,[rip+0xfffff296]
0x19db0009d5ea  53aa  41ffd2         call r10
0x19db0009d5ed  53ad  4883e801       REX.W subq rax,0x1
0x19db0009d5f1  53b1  488b9570ffffff REX.W movq rdx,[rbp-0x90]
0x19db0009d5f8  53b8  4c8b1dabacffff REX.W movq r11,[rip+0xffffacab]
0x19db0009d5ff  53bf  4c8b6598       REX.W movq r12,[rbp-0x68]
0x19db0009d603  53c3  488b4d90       REX.W movq rcx,[rbp-0x70]
0x19db0009d607  53c7  4c8b7588       REX.W movq r14,[rbp-0x78]
0x19db0009d60b  53cb  e945d3ffff     jmp 0x19db0009a955  <+0x2715>
0x19db0009d610  53d0  450bc8         orl r9,r8
0x19db0009d613  53d3  4183f900       cmpl r9,0x0
0x19db0009d617  53d7  0f8c5c230000   jl 0x19db0009f979  <+0x7739>
0x19db0009d61d  53dd  e984d4ffff     jmp 0x19db0009aaa6  <+0x2866>
0x19db0009d622  53e2  488975c8       REX.W movq [rbp-0x38],rsi
0x19db0009d626  53e6  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d62a  53ea  c5fb118d70ffffff vmovsd [rbp-0x90],xmm1
0x19db0009d632  53f2  488b1d15fdffff REX.W movq rbx,[rip+0xfffffd15]
0x19db0009d639  53f9  4c8bc0         REX.W movq r8,rax
0x19db0009d63c  53fc  33c0           xorl rax,rax
0x19db0009d63e  53fe  4c8bce         REX.W movq r9,rsi
0x19db0009d641  5401  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009d64b  540b  4c8b1510f2ffff REX.W movq r10,[rip+0xfffff210]
0x19db0009d652  5412  41ffd2         call r10
0x19db0009d655  5415  4c8b1d4eacffff REX.W movq r11,[rip+0xffffac4e]
0x19db0009d65c  541c  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009d664  5424  488b75c8       REX.W movq rsi,[rbp-0x38]
0x19db0009d668  5428  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d66c  542c  c5fb108d70ffffff vmovsd xmm1,[rbp-0x90]
0x19db0009d674  5434  e9c2d4ffff     jmp 0x19db0009ab3b  <+0x28fb>
0x19db0009d679  5439  488975c8       REX.W movq [rbp-0x38],rsi
0x19db0009d67d  543d  4c894dd0       REX.W movq [rbp-0x30],r9
0x19db0009d681  5441  4c898578ffffff REX.W movq [rbp-0x88],r8
0x19db0009d688  5448  c5fb118d70ffffff vmovsd [rbp-0x90],xmm1
0x19db0009d690  5450  488b1db7fcffff REX.W movq rbx,[rip+0xfffffcb7]
0x19db0009d697  5457  33c0           xorl rax,rax
0x19db0009d699  5459  4c8be6         REX.W movq r12,rsi
0x19db0009d69c  545c  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009d6a6  5466  4c8b15b5f1ffff REX.W movq r10,[rip+0xfffff1b5]
0x19db0009d6ad  546d  41ffd2         call r10
0x19db0009d6b0  5470  4c8b1df3abffff REX.W movq r11,[rip+0xffffabf3]
0x19db0009d6b7  5477  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009d6bf  547f  488b75c8       REX.W movq rsi,[rbp-0x38]
0x19db0009d6c3  5483  4c8b4dd0       REX.W movq r9,[rbp-0x30]
0x19db0009d6c7  5487  4c8b8578ffffff REX.W movq r8,[rbp-0x88]
0x19db0009d6ce  548e  c5fb108d70ffffff vmovsd xmm1,[rbp-0x90]
0x19db0009d6d6  5496  e975d4ffff     jmp 0x19db0009ab50  <+0x2910>
0x19db0009d6db  549b  448d241b       leal r12,[rbx+rbx*1]
0x19db0009d6df  549f  4c8b154bafffff REX.W movq r10,[rip+0xffffaf4b]
0x19db0009d6e6  54a6  4d39e2         REX.W cmpq r10,r12
0x19db0009d6e9  54a9  7712           ja 0x19db0009d6fd  <+0x54bd>
0x19db0009d6eb  54ab  488b154eafffff REX.W movq rdx,[rip+0xffffaf4e]
0x19db0009d6f2  54b2  4c8b155fabffff REX.W movq r10,[rip+0xffffab5f]
0x19db0009d6f9  54b9  41ffd2         call r10
0x19db0009d6fc  54bc  cc             int3l
0x19db0009d6fd  54bd  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db0009d701  54c1  4c8975a0       REX.W movq [rbp-0x60],r14
0x19db0009d705  54c5  33f6           xorl rsi,rsi
0x19db0009d707  54c7  4c8bfb         REX.W movq r15,rbx
0x19db0009d70a  54ca  4c89e3         REX.W movq rbx,r12
0x19db0009d70d  54cd  4c8be0         REX.W movq r12,rax
0x19db0009d710  54d0  4c8b15e0f2ffff REX.W movq r10,[rip+0xfffff2e0]
0x19db0009d717  54d7  41ffd2         call r10
0x19db0009d71a  54da  a801           test al,0x1
0x19db0009d71c  54dc  0f8434220000   jz 0x19db0009f956  <+0x7716>
0x19db0009d722  54e2  4c8be0         REX.W movq r12,rax
0x19db0009d725  54e5  4c8b1d7eabffff REX.W movq r11,[rip+0xffffab7e]
0x19db0009d72c  54ec  41b9a59f3008   movl r9,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d732  54f2  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009d73a  54fa  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0009d73e  54fe  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0009d743  5503  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0009d748  5508  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db0009d74c  550c  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db0009d750  5510  488b5da8       REX.W movq rbx,[rbp-0x58]
0x19db0009d754  5514  4c8b75a0       REX.W movq r14,[rbp-0x60]
0x19db0009d758  5518  e9d3d4ffff     jmp 0x19db0009ac30  <+0x29f0>
0x19db0009d75d  551d  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db0009d761  5521  4c8975a0       REX.W movq [rbp-0x60],r14
0x19db0009d765  5525  33f6           xorl rsi,rsi
0x19db0009d767  5527  4c8be0         REX.W movq r12,rax
0x19db0009d76a  552a  4c8b15cbf2ffff REX.W movq r10,[rip+0xfffff2cb]
0x19db0009d771  5531  41ffd2         call r10
0x19db0009d774  5534  4c8be0         REX.W movq r12,rax
0x19db0009d777  5537  4c8b1d2cabffff REX.W movq r11,[rip+0xffffab2c]
0x19db0009d77e  553e  41b9a59f3008   movl r9,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d784  5544  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009d78c  554c  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0009d790  5550  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0009d795  5555  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0009d79a  555a  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db0009d79e  555e  488b45b0       REX.W movq rax,[rbp-0x50]
0x19db0009d7a2  5562  488b5da8       REX.W movq rbx,[rbp-0x58]
0x19db0009d7a6  5566  4c8b75a0       REX.W movq r14,[rbp-0x60]
0x19db0009d7aa  556a  e9b1d4ffff     jmp 0x19db0009ac60  <+0x2a20>
0x19db0009d7af  556f  488955d0       REX.W movq [rbp-0x30],rdx
0x19db0009d7b3  5573  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009d7bd  557d  488b1d8afbffff REX.W movq rbx,[rip+0xfffffb8a]
0x19db0009d7c4  5584  33c0           xorl rax,rax
0x19db0009d7c6  5586  4c8b1595f0ffff REX.W movq r10,[rip+0xfffff095]
0x19db0009d7cd  558d  41ffd2         call r10
0x19db0009d7d0  5590  4c8b1dd3aaffff REX.W movq r11,[rip+0xffffaad3]
0x19db0009d7d7  5597  41b9a59f3008   movl r9,0x8309fa5       ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009d7dd  559d  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009d7e5  55a5  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0009d7e9  55a9  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0009d7ee  55ae  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0009d7f3  55b3  488b55d0       REX.W movq rdx,[rbp-0x30]
0x19db0009d7f7  55b7  e9d4c8ffff     jmp 0x19db0009a0d0  <+0x1e90>
0x19db0009d7fc  55bc  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d800  55c0  4c8965c8       REX.W movq [rbp-0x38],r12
0x19db0009d804  55c4  ba1c000000     movl rdx,0x1c
0x19db0009d809  55c9  4c8b1570f0ffff REX.W movq r10,[rip+0xfffff070]
0x19db0009d810  55d0  41ffd2         call r10
0x19db0009d813  55d3  4c8d40ff       REX.W leaq r8,[rax-0x1]
0x19db0009d817  55d7  4c8b65c8       REX.W movq r12,[rbp-0x38]
0x19db0009d81b  55db  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009d81f  55df  4c8b1d84aaffff REX.W movq r11,[rip+0xffffaa84]
0x19db0009d826  55e6  4c8b3d8eaaffff REX.W movq r15,[rip+0xffffaa8e]
0x19db0009d82d  55ed  41b9b59e3008   movl r9,0x8309eb5       ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009d833  55f3  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009d83b  55fb  498bbdd8010000 REX.W movq rdi,[r13+0x1d8] (root (fixed_double_array_map))
0x19db0009d842  5602  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0009d846  5606  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0009d84b  560b  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0009d850  5610  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d854  5614  e9a4d4ffff     jmp 0x19db0009acfd  <+0x2abd>
0x19db0009d859  5619  498d460c       REX.W leaq rax,[r14+0xc]
0x19db0009d85d  561d  498903         REX.W movq [r11],rax
0x19db0009d860  5620  4983c601       REX.W addq r14,0x1
0x19db0009d864  5624  498b8530010000 REX.W movq rax,[r13+0x130] (root (heap_number_map))
0x19db0009d86b  562b  418946ff       movl [r14-0x1],rax
0x19db0009d86f  562f  c4c1032ad4     vcvtlsi2sd xmm2,xmm15,r12
0x19db0009d874  5634  c4c17b115603   vmovsd [r14+0x3],xmm2
0x19db0009d87a  563a  498bc6         REX.W movq rax,r14
0x19db0009d87d  563d  e943d5ffff     jmp 0x19db0009adc5  <+0x2b85>
0x19db0009d882  5642  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db0009d886  5646  488945d0       REX.W movq [rbp-0x30],rax
0x19db0009d88a  564a  48894dc0       REX.W movq [rbp-0x40],rcx
0x19db0009d88e  564e  4c894db8       REX.W movq [rbp-0x48],r9
0x19db0009d892  5652  488955b0       REX.W movq [rbp-0x50],rdx
0x19db0009d896  5656  4c8965a8       REX.W movq [rbp-0x58],r12
0x19db0009d89a  565a  4c8bf2         REX.W movq r14,rdx
0x19db0009d89d  565d  ba20000000     movl rdx,0x20
0x19db0009d8a2  5662  4c8b15d7efffff REX.W movq r10,[rip+0xffffefd7]
0x19db0009d8a9  5669  41ffd2         call r10
0x19db0009d8ac  566c  4c8d70ff       REX.W leaq r14,[rax-0x1]
0x19db0009d8b0  5670  4c8b65a8       REX.W movq r12,[rbp-0x58]
0x19db0009d8b4  5674  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009d8b8  5678  4c8b1deba9ffff REX.W movq r11,[rip+0xffffa9eb]
0x19db0009d8bf  567f  4c8b3df5a9ffff REX.W movq r15,[rip+0xffffa9f5]
0x19db0009d8c6  5686  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009d8ce  568e  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0009d8d2  5692  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0009d8d7  5697  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0009d8dc  569c  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db0009d8e0  56a0  488b45d0       REX.W movq rax,[rbp-0x30]
0x19db0009d8e4  56a4  488b4dc0       REX.W movq rcx,[rbp-0x40]
0x19db0009d8e8  56a8  4c8b4db8       REX.W movq r9,[rbp-0x48]
0x19db0009d8ec  56ac  488b55b0       REX.W movq rdx,[rbp-0x50]
0x19db0009d8f0  56b0  e979d5ffff     jmp 0x19db0009ae6e  <+0x2c2e>
0x19db0009d8f5  56b5  ba28000000     movl rdx,0x28
0x19db0009d8fa  56ba  4c8b157fefffff REX.W movq r10,[rip+0xffffef7f]
0x19db0009d901  56c1  41ffd2         call r10
0x19db0009d904  56c4  4c8d60ff       REX.W leaq r12,[rax-0x1]
0x19db0009d908  56c8  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db0009d90c  56cc  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009d910  56d0  4c8b1d93a9ffff REX.W movq r11,[rip+0xffffa993]
0x19db0009d917  56d7  e9f9d6ffff     jmp 0x19db0009b015  <+0x2dd5>
0x19db0009d91c  56dc  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009d926  56e6  488b1d21faffff REX.W movq rbx,[rip+0xfffffa21]
0x19db0009d92d  56ed  33c0           xorl rax,rax
0x19db0009d92f  56ef  4c8b152cefffff REX.W movq r10,[rip+0xffffef2c]
0x19db0009d936  56f6  41ffd2         call r10
0x19db0009d939  56f9  e993d7ffff     jmp 0x19db0009b0d1  <+0x2e91>
0x19db0009d93e  56fe  4c8bc2         REX.W movq r8,rdx
0x19db0009d941  5701  ba28000000     movl rdx,0x28
0x19db0009d946  5706  4c8b1533efffff REX.W movq r10,[rip+0xffffef33]
0x19db0009d94d  570d  41ffd2         call r10
0x19db0009d950  5710  488d78ff       REX.W leaq rdi,[rax-0x1]
0x19db0009d954  5714  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db0009d958  5718  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009d95c  571c  4c8b1d47a9ffff REX.W movq r11,[rip+0xffffa947]
0x19db0009d963  5723  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009d969  5729  498b8558010000 REX.W movq rax,[r13+0x158] (root (empty_fixed_array))
0x19db0009d970  5730  4d8bb5d0000000 REX.W movq r14,[r13+0xd0] (root (fixed_array_map))
0x19db0009d977  5737  488b5dd0       REX.W movq rbx,[rbp-0x30]
0x19db0009d97b  573b  e96dd8ffff     jmp 0x19db0009b1ed  <+0x2fad>
0x19db0009d980  5740  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db0009d984  5744  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009d98e  574e  488b1db9f9ffff REX.W movq rbx,[rip+0xfffff9b9]
0x19db0009d995  5755  33c0           xorl rax,rax
0x19db0009d997  5757  4c8b15c4eeffff REX.W movq r10,[rip+0xffffeec4]
0x19db0009d99e  575e  41ffd2         call r10
0x19db0009d9a1  5761  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0009d9a5  5765  e936d7ffff     jmp 0x19db0009b0e0  <+0x2ea0>
0x19db0009d9aa  576a  bae0000000     movl rdx,0xe0
0x19db0009d9af  576f  4c8b15caeeffff REX.W movq r10,[rip+0xffffeeca]
0x19db0009d9b6  5776  41ffd2         call r10
0x19db0009d9b9  5779  4c8d40ff       REX.W leaq r8,[rax-0x1]
0x19db0009d9bd  577d  498bd8         REX.W movq rbx,r8
0x19db0009d9c0  5780  4c8b1de3a8ffff REX.W movq r11,[rip+0xffffa8e3]
0x19db0009d9c7  5787  41beb59e3008   movl r14,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009d9cd  578d  488b7db8       REX.W movq rdi,[rbp-0x48]
0x19db0009d9d1  5791  4c8b65a8       REX.W movq r12,[rbp-0x58]
0x19db0009d9d5  5795  c5f176c9       vpcmpeqd xmm1,xmm1,xmm1
0x19db0009d9d9  5799  c5f173f136     vpsllq xmm1,xmm1,54
0x19db0009d9de  579e  c5f173d102     vpsrlq xmm1,xmm1,2
0x19db0009d9e3  57a3  e9bad9ffff     jmp 0x19db0009b3a2  <+0x3162>
0x19db0009d9e8  57a8  ba68000000     movl rdx,0x68
0x19db0009d9ed  57ad  4c8b158ceeffff REX.W movq r10,[rip+0xffffee8c]
0x19db0009d9f4  57b4  41ffd2         call r10
0x19db0009d9f7  57b7  4c8d70ff       REX.W leaq r14,[rax-0x1]
0x19db0009d9fb  57bb  4c8b4db8       REX.W movq r9,[rbp-0x48]
0x19db0009d9ff  57bf  4c8b1da4a8ffff REX.W movq r11,[rip+0xffffa8a4]
0x19db0009da06  57c6  488b45c0       REX.W movq rax,[rbp-0x40]
0x19db0009da0a  57ca  e982dcffff     jmp 0x19db0009b691  <+0x3451>
0x19db0009da0f  57cf  50             push rax
0x19db0009da10  57d0  53             push rbx
0x19db0009da11  57d1  48894d98       REX.W movq [rbp-0x68],rcx
0x19db0009da15  57d5  488945a0       REX.W movq [rbp-0x60],rax
0x19db0009da19  57d9  33f6           xorl rsi,rsi
0x19db0009da1b  57db  48bb9061fef6ff7f0000 REX.W movq rbx,0x7ffff6fe6190    ;; external reference (Runtime::TransitionElementsKind)
0x19db0009da25  57e5  488bf8         REX.W movq rdi,rax
0x19db0009da28  57e8  b802000000     movl rax,0x2
0x19db0009da2d  57ed  4c8b152eeeffff REX.W movq r10,[rip+0xffffee2e]
0x19db0009da34  57f4  41ffd2         call r10
0x19db0009da37  57f7  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009da41  5801  4c8b1d62a8ffff REX.W movq r11,[rip+0xffffa862]
0x19db0009da48  5808  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009da4e  580e  41bea59f3008   movl r14,0x8309fa5      ;; (compressed) object: 0x19db08309fa5 <Map(PACKED_ELEMENTS)>
0x19db0009da54  5814  4c8b65d0       REX.W movq r12,[rbp-0x30]
0x19db0009da58  5818  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009da5c  581c  4c8b8d60ffffff REX.W movq r9,[rbp-0xa0]
0x19db0009da63  5823  488b4d98       REX.W movq rcx,[rbp-0x68]
0x19db0009da67  5827  488b45a0       REX.W movq rax,[rbp-0x60]
0x19db0009da6b  582b  e99fddffff     jmp 0x19db0009b80f  <+0x35cf>
0x19db0009da70  5830  57             push rdi
0x19db0009da71  5831  53             push rbx
0x19db0009da72  5832  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db0009da7a  583a  4c8975a0       REX.W movq [rbp-0x60],r14
0x19db0009da7e  583e  4c89a558ffffff REX.W movq [rbp-0xa8],r12
0x19db0009da85  5845  48894d98       REX.W movq [rbp-0x68],rcx
0x19db0009da89  5849  48897590       REX.W movq [rbp-0x70],rsi
0x19db0009da8d  584d  48894588       REX.W movq [rbp-0x78],rax
0x19db0009da91  5851  48897d80       REX.W movq [rbp-0x80],rdi
0x19db0009da95  5855  488b1d81ffffff REX.W movq rbx,[rip+0xffffff81]
0x19db0009da9c  585c  b802000000     movl rax,0x2
0x19db0009daa1  5861  33f6           xorl rsi,rsi
0x19db0009daa3  5863  4c8b15b8edffff REX.W movq r10,[rip+0xffffedb8]
0x19db0009daaa  586a  41ffd2         call r10
0x19db0009daad  586d  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009dab7  5877  4c8b1deca7ffff REX.W movq r11,[rip+0xffffa7ec]
0x19db0009dabe  587e  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009dac4  5884  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009dac8  5888  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db0009dad0  5890  4c8b75a0       REX.W movq r14,[rbp-0x60]
0x19db0009dad4  5894  4c8ba558ffffff REX.W movq r12,[rbp-0xa8]
0x19db0009dadb  589b  488b4d98       REX.W movq rcx,[rbp-0x68]
0x19db0009dadf  589f  488b7590       REX.W movq rsi,[rbp-0x70]
0x19db0009dae3  58a3  488b4588       REX.W movq rax,[rbp-0x78]
0x19db0009dae7  58a7  488b7d80       REX.W movq rdi,[rbp-0x80]
0x19db0009daeb  58ab  e98cddffff     jmp 0x19db0009b87c  <+0x363c>
0x19db0009daf0  58b0  4151           push r9
0x19db0009daf2  58b2  53             push rbx
0x19db0009daf3  58b3  c5fb114d80     vmovsd [rbp-0x80],xmm1
0x19db0009daf8  58b8  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db0009db00  58c0  c5fb119568ffffff vmovsd [rbp-0x98],xmm2
0x19db0009db08  58c8  4c8975a0       REX.W movq [rbp-0x60],r14
0x19db0009db0c  58cc  4c89a558ffffff REX.W movq [rbp-0xa8],r12
0x19db0009db13  58d3  48894d98       REX.W movq [rbp-0x68],rcx
0x19db0009db17  58d7  48897590       REX.W movq [rbp-0x70],rsi
0x19db0009db1b  58db  48894588       REX.W movq [rbp-0x78],rax
0x19db0009db1f  58df  4c898d70ffffff REX.W movq [rbp-0x90],r9
0x19db0009db26  58e6  488b1df0feffff REX.W movq rbx,[rip+0xfffffef0]
0x19db0009db2d  58ed  488bf8         REX.W movq rdi,rax
0x19db0009db30  58f0  b802000000     movl rax,0x2
0x19db0009db35  58f5  33f6           xorl rsi,rsi
0x19db0009db37  58f7  4c8b1524edffff REX.W movq r10,[rip+0xffffed24]
0x19db0009db3e  58fe  41ffd2         call r10
0x19db0009db41  5901  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009db4b  590b  4c8b1d58a7ffff REX.W movq r11,[rip+0xffffa758]
0x19db0009db52  5912  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009db58  5918  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009db5c  591c  c5fb104d80     vmovsd xmm1,[rbp-0x80]
0x19db0009db61  5921  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db0009db69  5929  c5fb109568ffffff vmovsd xmm2,[rbp-0x98]
0x19db0009db71  5931  4c8b75a0       REX.W movq r14,[rbp-0x60]
0x19db0009db75  5935  4c8ba558ffffff REX.W movq r12,[rbp-0xa8]
0x19db0009db7c  593c  488b4d98       REX.W movq rcx,[rbp-0x68]
0x19db0009db80  5940  488b7590       REX.W movq rsi,[rbp-0x70]
0x19db0009db84  5944  488b4588       REX.W movq rax,[rbp-0x78]
0x19db0009db88  5948  4c8b8d70ffffff REX.W movq r9,[rbp-0x90]
0x19db0009db8f  594f  e93fddffff     jmp 0x19db0009b8d3  <+0x3693>
0x19db0009db94  5954  4151           push r9
0x19db0009db96  5956  53             push rbx
0x19db0009db97  5957  c5fb116d88     vmovsd [rbp-0x78],xmm5
0x19db0009db9c  595c  c5fb114d80     vmovsd [rbp-0x80],xmm1
0x19db0009dba1  5961  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db0009dba9  5969  c5fb11a570ffffff vmovsd [rbp-0x90],xmm4
0x19db0009dbb1  5971  c5fb119568ffffff vmovsd [rbp-0x98],xmm2
0x19db0009dbb9  5979  4c8975a0       REX.W movq [rbp-0x60],r14
0x19db0009dbbd  597d  4c89a558ffffff REX.W movq [rbp-0xa8],r12
0x19db0009dbc4  5984  48894d98       REX.W movq [rbp-0x68],rcx
0x19db0009dbc8  5988  4c894d90       REX.W movq [rbp-0x70],r9
0x19db0009dbcc  598c  33f6           xorl rsi,rsi
0x19db0009dbce  598e  488bfb         REX.W movq rdi,rbx
0x19db0009dbd1  5991  488b1d45feffff REX.W movq rbx,[rip+0xfffffe45]
0x19db0009dbd8  5998  b802000000     movl rax,0x2
0x19db0009dbdd  599d  4c8b157eecffff REX.W movq r10,[rip+0xffffec7e]
0x19db0009dbe4  59a4  41ffd2         call r10
0x19db0009dbe7  59a7  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009dbf1  59b1  4c8b1db2a6ffff REX.W movq r11,[rip+0xffffa6b2]
0x19db0009dbf8  59b8  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009dbfe  59be  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009dc02  59c2  c5fb106d88     vmovsd xmm5,[rbp-0x78]
0x19db0009dc07  59c7  c5fb104d80     vmovsd xmm1,[rbp-0x80]
0x19db0009dc0c  59cc  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db0009dc14  59d4  c5fb10a570ffffff vmovsd xmm4,[rbp-0x90]
0x19db0009dc1c  59dc  c5fb109568ffffff vmovsd xmm2,[rbp-0x98]
0x19db0009dc24  59e4  4c8b75a0       REX.W movq r14,[rbp-0x60]
0x19db0009dc28  59e8  4c8ba558ffffff REX.W movq r12,[rbp-0xa8]
0x19db0009dc2f  59ef  488b4d98       REX.W movq rcx,[rbp-0x68]
0x19db0009dc33  59f3  4c8b4d90       REX.W movq r9,[rbp-0x70]
0x19db0009dc37  59f7  e9f1dcffff     jmp 0x19db0009b92d  <+0x36ed>
0x19db0009dc3c  59fc  4151           push r9
0x19db0009dc3e  59fe  50             push rax
0x19db0009dc3f  59ff  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db0009dc44  5a04  c5fb116d88     vmovsd [rbp-0x78],xmm5
0x19db0009dc49  5a09  c5fb114d80     vmovsd [rbp-0x80],xmm1
0x19db0009dc4e  5a0e  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db0009dc56  5a16  c5fb11a570ffffff vmovsd [rbp-0x90],xmm4
0x19db0009dc5e  5a1e  c5fb119568ffffff vmovsd [rbp-0x98],xmm2
0x19db0009dc66  5a26  4c8975a0       REX.W movq [rbp-0x60],r14
0x19db0009dc6a  5a2a  4c89a558ffffff REX.W movq [rbp-0xa8],r12
0x19db0009dc71  5a31  4c894d98       REX.W movq [rbp-0x68],r9
0x19db0009dc75  5a35  33f6           xorl rsi,rsi
0x19db0009dc77  5a37  488b1d9ffdffff REX.W movq rbx,[rip+0xfffffd9f]
0x19db0009dc7e  5a3e  488bc8         REX.W movq rcx,rax
0x19db0009dc81  5a41  b802000000     movl rax,0x2
0x19db0009dc86  5a46  4c8b15d5ebffff REX.W movq r10,[rip+0xffffebd5]
0x19db0009dc8d  5a4d  41ffd2         call r10
0x19db0009dc90  5a50  48b8559f3008db190000 REX.W movq rax,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009dc9a  5a5a  4c8b1d09a6ffff REX.W movq r11,[rip+0xffffa609]
0x19db0009dca1  5a61  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009dca7  5a67  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009dcab  5a6b  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db0009dcb0  5a70  c5fb106d88     vmovsd xmm5,[rbp-0x78]
0x19db0009dcb5  5a75  c5fb104d80     vmovsd xmm1,[rbp-0x80]
0x19db0009dcba  5a7a  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db0009dcc2  5a82  c5fb10a570ffffff vmovsd xmm4,[rbp-0x90]
0x19db0009dcca  5a8a  c5fb109568ffffff vmovsd xmm2,[rbp-0x98]
0x19db0009dcd2  5a92  4c8b75a0       REX.W movq r14,[rbp-0x60]
0x19db0009dcd6  5a96  4c8ba558ffffff REX.W movq r12,[rbp-0xa8]
0x19db0009dcdd  5a9d  4c8b4d98       REX.W movq r9,[rbp-0x68]
0x19db0009dce1  5aa1  e98ddcffff     jmp 0x19db0009b973  <+0x3733>
0x19db0009dce6  5aa6  4151           push r9
0x19db0009dce8  5aa8  50             push rax
0x19db0009dce9  5aa9  c5fb117d98     vmovsd [rbp-0x68],xmm7
0x19db0009dcee  5aae  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db0009dcf3  5ab3  c5fb116d88     vmovsd [rbp-0x78],xmm5
0x19db0009dcf8  5ab8  c5fb114d80     vmovsd [rbp-0x80],xmm1
0x19db0009dcfd  5abd  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db0009dd05  5ac5  c5fb11a570ffffff vmovsd [rbp-0x90],xmm4
0x19db0009dd0d  5acd  c5fb119568ffffff vmovsd [rbp-0x98],xmm2
0x19db0009dd15  5ad5  4c894da0       REX.W movq [rbp-0x60],r9
0x19db0009dd19  5ad9  33f6           xorl rsi,rsi
0x19db0009dd1b  5adb  488b1dfbfcffff REX.W movq rbx,[rip+0xfffffcfb]
0x19db0009dd22  5ae2  4c8be0         REX.W movq r12,rax
0x19db0009dd25  5ae5  b802000000     movl rax,0x2
0x19db0009dd2a  5aea  4c8b1531ebffff REX.W movq r10,[rip+0xffffeb31]
0x19db0009dd31  5af1  41ffd2         call r10
0x19db0009dd34  5af4  48b8559f3008db190000 REX.W movq rax,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009dd3e  5afe  4c8b1d65a5ffff REX.W movq r11,[rip+0xffffa565]
0x19db0009dd45  5b05  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009dd4b  5b0b  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009dd4f  5b0f  c5fb107d98     vmovsd xmm7,[rbp-0x68]
0x19db0009dd54  5b14  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db0009dd59  5b19  c5fb106d88     vmovsd xmm5,[rbp-0x78]
0x19db0009dd5e  5b1e  c5fb104d80     vmovsd xmm1,[rbp-0x80]
0x19db0009dd63  5b23  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db0009dd6b  5b2b  c5fb10a570ffffff vmovsd xmm4,[rbp-0x90]
0x19db0009dd73  5b33  c5fb109568ffffff vmovsd xmm2,[rbp-0x98]
0x19db0009dd7b  5b3b  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0009dd7f  5b3f  e93bdcffff     jmp 0x19db0009b9bf  <+0x377f>
0x19db0009dd84  5b44  4151           push r9
0x19db0009dd86  5b46  4154           push r12
0x19db0009dd88  5b48  c57b1145a0     vmovsd [rbp-0x60],xmm8
0x19db0009dd8d  5b4d  c5fb117d98     vmovsd [rbp-0x68],xmm7
0x19db0009dd92  5b52  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db0009dd97  5b57  c5fb116d88     vmovsd [rbp-0x78],xmm5
0x19db0009dd9c  5b5c  c5fb114d80     vmovsd [rbp-0x80],xmm1
0x19db0009dda1  5b61  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db0009dda9  5b69  c5fb11a570ffffff vmovsd [rbp-0x90],xmm4
0x19db0009ddb1  5b71  c5fb119568ffffff vmovsd [rbp-0x98],xmm2
0x19db0009ddb9  5b79  33f6           xorl rsi,rsi
0x19db0009ddbb  5b7b  488b1d5bfcffff REX.W movq rbx,[rip+0xfffffc5b]
0x19db0009ddc2  5b82  b802000000     movl rax,0x2
0x19db0009ddc7  5b87  4c8b1594eaffff REX.W movq r10,[rip+0xffffea94]
0x19db0009ddce  5b8e  41ffd2         call r10
0x19db0009ddd1  5b91  49bc559f3008db190000 REX.W movq r12,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009dddb  5b9b  4c8b1dc8a4ffff REX.W movq r11,[rip+0xffffa4c8]
0x19db0009dde2  5ba2  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009dde8  5ba8  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009ddec  5bac  c57b1045a0     vmovsd xmm8,[rbp-0x60]
0x19db0009ddf1  5bb1  c5fb107d98     vmovsd xmm7,[rbp-0x68]
0x19db0009ddf6  5bb6  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db0009ddfb  5bbb  c5fb106d88     vmovsd xmm5,[rbp-0x78]
0x19db0009de00  5bc0  c5fb104d80     vmovsd xmm1,[rbp-0x80]
0x19db0009de05  5bc5  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db0009de0d  5bcd  c5fb10a570ffffff vmovsd xmm4,[rbp-0x90]
0x19db0009de15  5bd5  c5fb109568ffffff vmovsd xmm2,[rbp-0x98]
0x19db0009de1d  5bdd  4c8b8d60ffffff REX.W movq r9,[rbp-0xa0]
0x19db0009de24  5be4  e9dfdbffff     jmp 0x19db0009ba08  <+0x37c8>
0x19db0009de29  5be9  c57b1145a0     vmovsd [rbp-0x60],xmm8
0x19db0009de2e  5bee  c5fb117d98     vmovsd [rbp-0x68],xmm7
0x19db0009de33  5bf3  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db0009de38  5bf8  c5fb116d88     vmovsd [rbp-0x78],xmm5
0x19db0009de3d  5bfd  c5fb114d80     vmovsd [rbp-0x80],xmm1
0x19db0009de42  5c02  c5fb118578ffffff vmovsd [rbp-0x88],xmm0
0x19db0009de4a  5c0a  c5fb11a570ffffff vmovsd [rbp-0x90],xmm4
0x19db0009de52  5c12  c5fb119568ffffff vmovsd [rbp-0x98],xmm2
0x19db0009de5a  5c1a  48898558ffffff REX.W movq [rbp-0xa8],rax
0x19db0009de61  5c21  33f6           xorl rsi,rsi
0x19db0009de63  5c23  4c8bf0         REX.W movq r14,rax
0x19db0009de66  5c26  498bc1         REX.W movq rax,r9
0x19db0009de69  5c29  33db           xorl rbx,rbx
0x19db0009de6b  5c2b  49ba20e7baf5ff7f0000 REX.W movq r10,0x7ffff5bae720  (GrowFastDoubleElements)    ;; off heap target
0x19db0009de75  5c35  41ffd2         call r10
0x19db0009de78  5c38  a801           test al,0x1
0x19db0009de7a  5c3a  0f84b31a0000   jz 0x19db0009f933  <+0x76f3>
0x19db0009de80  5c40  4c8bf0         REX.W movq r14,rax
0x19db0009de83  5c43  49bc559f3008db190000 REX.W movq r12,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009de8d  5c4d  4c8b1d16a4ffff REX.W movq r11,[rip+0xffffa416]
0x19db0009de94  5c54  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009de9a  5c5a  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009de9e  5c5e  c57b1045a0     vmovsd xmm8,[rbp-0x60]
0x19db0009dea3  5c63  c5fb107d98     vmovsd xmm7,[rbp-0x68]
0x19db0009dea8  5c68  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db0009dead  5c6d  c5fb106d88     vmovsd xmm5,[rbp-0x78]
0x19db0009deb2  5c72  c5fb104d80     vmovsd xmm1,[rbp-0x80]
0x19db0009deb7  5c77  c5fb108578ffffff vmovsd xmm0,[rbp-0x88]
0x19db0009debf  5c7f  c5fb10a570ffffff vmovsd xmm4,[rbp-0x90]
0x19db0009dec7  5c87  c5fb109568ffffff vmovsd xmm2,[rbp-0x98]
0x19db0009decf  5c8f  4c8b8d60ffffff REX.W movq r9,[rbp-0xa0]
0x19db0009ded6  5c96  488b8558ffffff REX.W movq rax,[rbp-0xa8]
0x19db0009dedd  5c9d  e976dbffff     jmp 0x19db0009ba58  <+0x3818>
0x19db0009dee2  5ca2  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009deec  5cac  488b1d5bf4ffff REX.W movq rbx,[rip+0xfffff45b]
0x19db0009def3  5cb3  33c0           xorl rax,rax
0x19db0009def5  5cb5  4c8b1566e9ffff REX.W movq r10,[rip+0xffffe966]
0x19db0009defc  5cbc  41ffd2         call r10
0x19db0009deff  5cbf  49bc559f3008db190000 REX.W movq r12,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009df09  5cc9  4c8b1d9aa3ffff REX.W movq r11,[rip+0xffffa39a]
0x19db0009df10  5cd0  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009df16  5cd6  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009df1a  5cda  e976dbffff     jmp 0x19db0009ba95  <+0x3855>
0x19db0009df1f  5cdf  4154           push r12
0x19db0009df21  5ce1  4151           push r9
0x19db0009df23  5ce3  4c89b550ffffff REX.W movq [rbp-0xb0],r14
0x19db0009df2a  5cea  48894d90       REX.W movq [rbp-0x70],rcx
0x19db0009df2e  5cee  4c8965a0       REX.W movq [rbp-0x60],r12
0x19db0009df32  5cf2  33f6           xorl rsi,rsi
0x19db0009df34  5cf4  488b1de2faffff REX.W movq rbx,[rip+0xfffffae2]
0x19db0009df3b  5cfb  488bf8         REX.W movq rdi,rax
0x19db0009df3e  5cfe  b802000000     movl rax,0x2
0x19db0009df43  5d03  4c8b1518e9ffff REX.W movq r10,[rip+0xffffe918]
0x19db0009df4a  5d0a  41ffd2         call r10
0x19db0009df4d  5d0d  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009df57  5d17  4c8b1d4ca3ffff REX.W movq r11,[rip+0xffffa34c]
0x19db0009df5e  5d1e  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009df64  5d24  488b45c0       REX.W movq rax,[rbp-0x40]
0x19db0009df68  5d28  488b5db8       REX.W movq rbx,[rbp-0x48]
0x19db0009df6c  5d2c  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009df70  5d30  4c8bb550ffffff REX.W movq r14,[rbp-0xb0]
0x19db0009df77  5d37  488b4d90       REX.W movq rcx,[rbp-0x70]
0x19db0009df7b  5d3b  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db0009df7f  5d3f  e999dbffff     jmp 0x19db0009bb1d  <+0x38dd>
0x19db0009df84  5d44  52             push rdx
0x19db0009df85  5d45  4151           push r9
0x19db0009df87  5d47  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db0009df8f  5d4f  4c89b550ffffff REX.W movq [rbp-0xb0],r14
0x19db0009df96  5d56  488975a0       REX.W movq [rbp-0x60],rsi
0x19db0009df9a  5d5a  48897d98       REX.W movq [rbp-0x68],rdi
0x19db0009df9e  5d5e  48894d90       REX.W movq [rbp-0x70],rcx
0x19db0009dfa2  5d62  48894588       REX.W movq [rbp-0x78],rax
0x19db0009dfa6  5d66  4c896580       REX.W movq [rbp-0x80],r12
0x19db0009dfaa  5d6a  48899578ffffff REX.W movq [rbp-0x88],rdx
0x19db0009dfb1  5d71  488b1d65faffff REX.W movq rbx,[rip+0xfffffa65]
0x19db0009dfb8  5d78  b802000000     movl rax,0x2
0x19db0009dfbd  5d7d  33f6           xorl rsi,rsi
0x19db0009dfbf  5d7f  4c8b159ce8ffff REX.W movq r10,[rip+0xffffe89c]
0x19db0009dfc6  5d86  41ffd2         call r10
0x19db0009dfc9  5d89  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009dfd3  5d93  4c8b1dd0a2ffff REX.W movq r11,[rip+0xffffa2d0]
0x19db0009dfda  5d9a  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009dfe0  5da0  488b5db8       REX.W movq rbx,[rbp-0x48]
0x19db0009dfe4  5da4  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009dfe8  5da8  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db0009dff0  5db0  4c8bb550ffffff REX.W movq r14,[rbp-0xb0]
0x19db0009dff7  5db7  488b75a0       REX.W movq rsi,[rbp-0x60]
0x19db0009dffb  5dbb  488b7d98       REX.W movq rdi,[rbp-0x68]
0x19db0009dfff  5dbf  488b4d90       REX.W movq rcx,[rbp-0x70]
0x19db0009e003  5dc3  488b4588       REX.W movq rax,[rbp-0x78]
0x19db0009e007  5dc7  4c8b6580       REX.W movq r12,[rbp-0x80]
0x19db0009e00b  5dcb  488b9578ffffff REX.W movq rdx,[rbp-0x88]
0x19db0009e012  5dd2  e95ddbffff     jmp 0x19db0009bb74  <+0x3934>
0x19db0009e017  5dd7  4150           push r8
0x19db0009e019  5dd9  4151           push r9
0x19db0009e01b  5ddb  c5fb118d78ffffff vmovsd [rbp-0x88],xmm1
0x19db0009e023  5de3  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db0009e02b  5deb  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db0009e033  5df3  4c89b550ffffff REX.W movq [rbp-0xb0],r14
0x19db0009e03a  5dfa  488975a0       REX.W movq [rbp-0x60],rsi
0x19db0009e03e  5dfe  48897d98       REX.W movq [rbp-0x68],rdi
0x19db0009e042  5e02  48894d90       REX.W movq [rbp-0x70],rcx
0x19db0009e046  5e06  48894588       REX.W movq [rbp-0x78],rax
0x19db0009e04a  5e0a  4c896580       REX.W movq [rbp-0x80],r12
0x19db0009e04e  5e0e  4c898568ffffff REX.W movq [rbp-0x98],r8
0x19db0009e055  5e15  488b1dc1f9ffff REX.W movq rbx,[rip+0xfffff9c1]
0x19db0009e05c  5e1c  488bd0         REX.W movq rdx,rax
0x19db0009e05f  5e1f  b802000000     movl rax,0x2
0x19db0009e064  5e24  33f6           xorl rsi,rsi
0x19db0009e066  5e26  4c8b15f5e7ffff REX.W movq r10,[rip+0xffffe7f5]
0x19db0009e06d  5e2d  41ffd2         call r10
0x19db0009e070  5e30  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e07a  5e3a  4c8b1d29a2ffff REX.W movq r11,[rip+0xffffa229]
0x19db0009e081  5e41  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009e087  5e47  488b5db8       REX.W movq rbx,[rbp-0x48]
0x19db0009e08b  5e4b  c5fb108d78ffffff vmovsd xmm1,[rbp-0x88]
0x19db0009e093  5e53  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db0009e09b  5e5b  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db0009e0a3  5e63  4c8bb550ffffff REX.W movq r14,[rbp-0xb0]
0x19db0009e0aa  5e6a  488b75a0       REX.W movq rsi,[rbp-0x60]
0x19db0009e0ae  5e6e  488b7d98       REX.W movq rdi,[rbp-0x68]
0x19db0009e0b2  5e72  488b4d90       REX.W movq rcx,[rbp-0x70]
0x19db0009e0b6  5e76  488b4588       REX.W movq rax,[rbp-0x78]
0x19db0009e0ba  5e7a  4c8b6580       REX.W movq r12,[rbp-0x80]
0x19db0009e0be  5e7e  4c8b8568ffffff REX.W movq r8,[rbp-0x98]
0x19db0009e0c5  5e85  e903dbffff     jmp 0x19db0009bbcd  <+0x398d>
0x19db0009e0ca  5e8a  4150           push r8
0x19db0009e0cc  5e8c  4151           push r9
0x19db0009e0ce  5e8e  c5fb116d80     vmovsd [rbp-0x80],xmm5
0x19db0009e0d3  5e93  c5fb118d78ffffff vmovsd [rbp-0x88],xmm1
0x19db0009e0db  5e9b  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db0009e0e3  5ea3  c5fb11a568ffffff vmovsd [rbp-0x98],xmm4
0x19db0009e0eb  5eab  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db0009e0f3  5eb3  4c89b550ffffff REX.W movq [rbp-0xb0],r14
0x19db0009e0fa  5eba  488975a0       REX.W movq [rbp-0x60],rsi
0x19db0009e0fe  5ebe  48897d98       REX.W movq [rbp-0x68],rdi
0x19db0009e102  5ec2  48894d90       REX.W movq [rbp-0x70],rcx
0x19db0009e106  5ec6  4c894588       REX.W movq [rbp-0x78],r8
0x19db0009e10a  5eca  4c8be3         REX.W movq r12,rbx
0x19db0009e10d  5ecd  488b1d09f9ffff REX.W movq rbx,[rip+0xfffff909]
0x19db0009e114  5ed4  b802000000     movl rax,0x2
0x19db0009e119  5ed9  488bd6         REX.W movq rdx,rsi
0x19db0009e11c  5edc  33f6           xorl rsi,rsi
0x19db0009e11e  5ede  4c8b153de7ffff REX.W movq r10,[rip+0xffffe73d]
0x19db0009e125  5ee5  41ffd2         call r10
0x19db0009e128  5ee8  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e132  5ef2  4c8b1d71a1ffff REX.W movq r11,[rip+0xffffa171]
0x19db0009e139  5ef9  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009e13f  5eff  488b5db8       REX.W movq rbx,[rbp-0x48]
0x19db0009e143  5f03  c5fb106d80     vmovsd xmm5,[rbp-0x80]
0x19db0009e148  5f08  c5fb108d78ffffff vmovsd xmm1,[rbp-0x88]
0x19db0009e150  5f10  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db0009e158  5f18  c5fb10a568ffffff vmovsd xmm4,[rbp-0x98]
0x19db0009e160  5f20  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db0009e168  5f28  4c8bb550ffffff REX.W movq r14,[rbp-0xb0]
0x19db0009e16f  5f2f  488b75a0       REX.W movq rsi,[rbp-0x60]
0x19db0009e173  5f33  488b7d98       REX.W movq rdi,[rbp-0x68]
0x19db0009e177  5f37  488b4d90       REX.W movq rcx,[rbp-0x70]
0x19db0009e17b  5f3b  4c8b4588       REX.W movq r8,[rbp-0x78]
0x19db0009e17f  5f3f  e9a8daffff     jmp 0x19db0009bc2c  <+0x39ec>
0x19db0009e184  5f44  4154           push r12
0x19db0009e186  5f46  4151           push r9
0x19db0009e188  5f48  c57b114588     vmovsd [rbp-0x78],xmm8
0x19db0009e18d  5f4d  c5fb116d80     vmovsd [rbp-0x80],xmm5
0x19db0009e192  5f52  c5fb118d78ffffff vmovsd [rbp-0x88],xmm1
0x19db0009e19a  5f5a  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db0009e1a2  5f62  c5fb11a568ffffff vmovsd [rbp-0x98],xmm4
0x19db0009e1aa  5f6a  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db0009e1b2  5f72  4c89b550ffffff REX.W movq [rbp-0xb0],r14
0x19db0009e1b9  5f79  488975a0       REX.W movq [rbp-0x60],rsi
0x19db0009e1bd  5f7d  48897d98       REX.W movq [rbp-0x68],rdi
0x19db0009e1c1  5f81  4c896590       REX.W movq [rbp-0x70],r12
0x19db0009e1c5  5f85  488bd3         REX.W movq rdx,rbx
0x19db0009e1c8  5f88  488b1d4ef8ffff REX.W movq rbx,[rip+0xfffff84e]
0x19db0009e1cf  5f8f  b802000000     movl rax,0x2
0x19db0009e1d4  5f94  488bce         REX.W movq rcx,rsi
0x19db0009e1d7  5f97  33f6           xorl rsi,rsi
0x19db0009e1d9  5f99  4c8b1582e6ffff REX.W movq r10,[rip+0xffffe682]
0x19db0009e1e0  5fa0  41ffd2         call r10
0x19db0009e1e3  5fa3  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e1ed  5fad  4c8b1db6a0ffff REX.W movq r11,[rip+0xffffa0b6]
0x19db0009e1f4  5fb4  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009e1fa  5fba  488b5db8       REX.W movq rbx,[rbp-0x48]
0x19db0009e1fe  5fbe  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009e202  5fc2  c57b104588     vmovsd xmm8,[rbp-0x78]
0x19db0009e207  5fc7  c5fb106d80     vmovsd xmm5,[rbp-0x80]
0x19db0009e20c  5fcc  c5fb108d78ffffff vmovsd xmm1,[rbp-0x88]
0x19db0009e214  5fd4  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db0009e21c  5fdc  c5fb10a568ffffff vmovsd xmm4,[rbp-0x98]
0x19db0009e224  5fe4  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db0009e22c  5fec  4c8bb550ffffff REX.W movq r14,[rbp-0xb0]
0x19db0009e233  5ff3  488b75a0       REX.W movq rsi,[rbp-0x60]
0x19db0009e237  5ff7  488b7d98       REX.W movq rdi,[rbp-0x68]
0x19db0009e23b  5ffb  4c8b6590       REX.W movq r12,[rbp-0x70]
0x19db0009e23f  5fff  e931daffff     jmp 0x19db0009bc75  <+0x3a35>
0x19db0009e244  6004  4154           push r12
0x19db0009e246  6006  4151           push r9
0x19db0009e248  6008  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db0009e24d  600d  c57b114588     vmovsd [rbp-0x78],xmm8
0x19db0009e252  6012  c5fb116d80     vmovsd [rbp-0x80],xmm5
0x19db0009e257  6017  c5fb118d78ffffff vmovsd [rbp-0x88],xmm1
0x19db0009e25f  601f  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db0009e267  6027  c5fb11a568ffffff vmovsd [rbp-0x98],xmm4
0x19db0009e26f  602f  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db0009e277  6037  4c89b550ffffff REX.W movq [rbp-0xb0],r14
0x19db0009e27e  603e  4c8965a0       REX.W movq [rbp-0x60],r12
0x19db0009e282  6042  33f6           xorl rsi,rsi
0x19db0009e284  6044  488bd3         REX.W movq rdx,rbx
0x19db0009e287  6047  488b1d8ff7ffff REX.W movq rbx,[rip+0xfffff78f]
0x19db0009e28e  604e  b802000000     movl rax,0x2
0x19db0009e293  6053  4c8b15c8e5ffff REX.W movq r10,[rip+0xffffe5c8]
0x19db0009e29a  605a  41ffd2         call r10
0x19db0009e29d  605d  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e2a7  6067  4c8b1dfc9fffff REX.W movq r11,[rip+0xffff9ffc]
0x19db0009e2ae  606e  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009e2b4  6074  488b5db8       REX.W movq rbx,[rbp-0x48]
0x19db0009e2b8  6078  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009e2bc  607c  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db0009e2c1  6081  c57b104588     vmovsd xmm8,[rbp-0x78]
0x19db0009e2c6  6086  c5fb106d80     vmovsd xmm5,[rbp-0x80]
0x19db0009e2cb  608b  c5fb108d78ffffff vmovsd xmm1,[rbp-0x88]
0x19db0009e2d3  6093  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db0009e2db  609b  c5fb10a568ffffff vmovsd xmm4,[rbp-0x98]
0x19db0009e2e3  60a3  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db0009e2eb  60ab  4c8bb550ffffff REX.W movq r14,[rbp-0xb0]
0x19db0009e2f2  60b2  4c8b65a0       REX.W movq r12,[rbp-0x60]
0x19db0009e2f6  60b6  e9cdd9ffff     jmp 0x19db0009bcc8  <+0x3a88>
0x19db0009e2fb  60bb  52             push rdx
0x19db0009e2fc  60bc  4151           push r9
0x19db0009e2fe  60be  c57b114d98     vmovsd [rbp-0x68],xmm9
0x19db0009e303  60c3  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db0009e308  60c8  c57b114588     vmovsd [rbp-0x78],xmm8
0x19db0009e30d  60cd  c5fb116d80     vmovsd [rbp-0x80],xmm5
0x19db0009e312  60d2  c5fb118d78ffffff vmovsd [rbp-0x88],xmm1
0x19db0009e31a  60da  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db0009e322  60e2  c5fb11a568ffffff vmovsd [rbp-0x98],xmm4
0x19db0009e32a  60ea  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db0009e332  60f2  4c89b550ffffff REX.W movq [rbp-0xb0],r14
0x19db0009e339  60f9  33f6           xorl rsi,rsi
0x19db0009e33b  60fb  4c8be3         REX.W movq r12,rbx
0x19db0009e33e  60fe  488b1dd8f6ffff REX.W movq rbx,[rip+0xfffff6d8]
0x19db0009e345  6105  b802000000     movl rax,0x2
0x19db0009e34a  610a  4c8b1511e5ffff REX.W movq r10,[rip+0xffffe511]
0x19db0009e351  6111  41ffd2         call r10
0x19db0009e354  6114  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e35e  611e  4c8b1d459fffff REX.W movq r11,[rip+0xffff9f45]
0x19db0009e365  6125  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009e36b  612b  488b5db8       REX.W movq rbx,[rbp-0x48]
0x19db0009e36f  612f  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009e373  6133  c57b104d98     vmovsd xmm9,[rbp-0x68]
0x19db0009e378  6138  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db0009e37d  613d  c57b104588     vmovsd xmm8,[rbp-0x78]
0x19db0009e382  6142  c5fb106d80     vmovsd xmm5,[rbp-0x80]
0x19db0009e387  6147  c5fb108d78ffffff vmovsd xmm1,[rbp-0x88]
0x19db0009e38f  614f  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db0009e397  6157  c5fb10a568ffffff vmovsd xmm4,[rbp-0x98]
0x19db0009e39f  615f  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db0009e3a7  6167  488b9558ffffff REX.W movq rdx,[rbp-0xa8]
0x19db0009e3ae  616e  4c8bb550ffffff REX.W movq r14,[rbp-0xb0]
0x19db0009e3b5  6175  e957d9ffff     jmp 0x19db0009bd11  <+0x3ad1>
0x19db0009e3ba  617a  478d2436       leal r12,[r14+r14*1]
0x19db0009e3be  617e  4c8b156ca2ffff REX.W movq r10,[rip+0xffffa26c]
0x19db0009e3c5  6185  4d39e2         REX.W cmpq r10,r12
0x19db0009e3c8  6188  7712           ja 0x19db0009e3dc  <+0x619c>
0x19db0009e3ca  618a  488b156fa2ffff REX.W movq rdx,[rip+0xffffa26f]
0x19db0009e3d1  6191  4c8b15809effff REX.W movq r10,[rip+0xffff9e80]
0x19db0009e3d8  6198  41ffd2         call r10
0x19db0009e3db  619b  cc             int3l
0x19db0009e3dc  619c  c57b114d98     vmovsd [rbp-0x68],xmm9
0x19db0009e3e1  61a1  c5fb117590     vmovsd [rbp-0x70],xmm6
0x19db0009e3e6  61a6  c57b114588     vmovsd [rbp-0x78],xmm8
0x19db0009e3eb  61ab  c5fb116d80     vmovsd [rbp-0x80],xmm5
0x19db0009e3f0  61b0  c5fb118d78ffffff vmovsd [rbp-0x88],xmm1
0x19db0009e3f8  61b8  c5fb118570ffffff vmovsd [rbp-0x90],xmm0
0x19db0009e400  61c0  c5fb11a568ffffff vmovsd [rbp-0x98],xmm4
0x19db0009e408  61c8  c5fb119560ffffff vmovsd [rbp-0xa0],xmm2
0x19db0009e410  61d0  4c89b550ffffff REX.W movq [rbp-0xb0],r14
0x19db0009e417  61d7  48898548ffffff REX.W movq [rbp-0xb8],rax
0x19db0009e41e  61de  33f6           xorl rsi,rsi
0x19db0009e420  61e0  488bcb         REX.W movq rcx,rbx
0x19db0009e423  61e3  4c89e3         REX.W movq rbx,r12
0x19db0009e426  61e6  4c8be0         REX.W movq r12,rax
0x19db0009e429  61e9  488bc2         REX.W movq rax,rdx
0x19db0009e42c  61ec  4c8b153afaffff REX.W movq r10,[rip+0xfffffa3a]
0x19db0009e433  61f3  41ffd2         call r10
0x19db0009e436  61f6  a801           test al,0x1
0x19db0009e438  61f8  0f84d2140000   jz 0x19db0009f910  <+0x76d0>
0x19db0009e43e  61fe  4c8be0         REX.W movq r12,rax
0x19db0009e441  6201  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e44b  620b  4c8b1d589effff REX.W movq r11,[rip+0xffff9e58]
0x19db0009e452  6212  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009e458  6218  488b5db8       REX.W movq rbx,[rbp-0x48]
0x19db0009e45c  621c  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009e460  6220  c57b104d98     vmovsd xmm9,[rbp-0x68]
0x19db0009e465  6225  c5fb107590     vmovsd xmm6,[rbp-0x70]
0x19db0009e46a  622a  c57b104588     vmovsd xmm8,[rbp-0x78]
0x19db0009e46f  622f  c5fb106d80     vmovsd xmm5,[rbp-0x80]
0x19db0009e474  6234  c5fb108d78ffffff vmovsd xmm1,[rbp-0x88]
0x19db0009e47c  623c  c5fb108570ffffff vmovsd xmm0,[rbp-0x90]
0x19db0009e484  6244  c5fb10a568ffffff vmovsd xmm4,[rbp-0x98]
0x19db0009e48c  624c  c5fb109560ffffff vmovsd xmm2,[rbp-0xa0]
0x19db0009e494  6254  488b9558ffffff REX.W movq rdx,[rbp-0xa8]
0x19db0009e49b  625b  4c8bb550ffffff REX.W movq r14,[rbp-0xb0]
0x19db0009e4a2  6262  488b8548ffffff REX.W movq rax,[rbp-0xb8]
0x19db0009e4a9  6269  e9b3d8ffff     jmp 0x19db0009bd61  <+0x3b21>
0x19db0009e4ae  626e  48894da0       REX.W movq [rbp-0x60],rcx
0x19db0009e4b2  6272  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009e4bc  627c  4c8be3         REX.W movq r12,rbx
0x19db0009e4bf  627f  488b1d88eeffff REX.W movq rbx,[rip+0xffffee88]
0x19db0009e4c6  6286  33c0           xorl rax,rax
0x19db0009e4c8  6288  4c8b1593e3ffff REX.W movq r10,[rip+0xffffe393]
0x19db0009e4cf  628f  41ffd2         call r10
0x19db0009e4d2  6292  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e4dc  629c  4c8b1dc79dffff REX.W movq r11,[rip+0xffff9dc7]
0x19db0009e4e3  62a3  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009e4e9  62a9  488b5db8       REX.W movq rbx,[rbp-0x48]
0x19db0009e4ed  62ad  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009e4f1  62b1  488b4da0       REX.W movq rcx,[rbp-0x60]
0x19db0009e4f5  62b5  e9b6d5ffff     jmp 0x19db0009bab0  <+0x3870>
0x19db0009e4fa  62ba  4c8945a8       REX.W movq [rbp-0x58],r8
0x19db0009e4fe  62be  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009e508  62c8  488bd3         REX.W movq rdx,rbx
0x19db0009e50b  62cb  488b1d3ceeffff REX.W movq rbx,[rip+0xffffee3c]
0x19db0009e512  62d2  4c8bf0         REX.W movq r14,rax
0x19db0009e515  62d5  33c0           xorl rax,rax
0x19db0009e517  62d7  4c8b1544e3ffff REX.W movq r10,[rip+0xffffe344]
0x19db0009e51e  62de  41ffd2         call r10
0x19db0009e521  62e1  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e52b  62eb  4c8b1d789dffff REX.W movq r11,[rip+0xffff9d78]
0x19db0009e532  62f2  41bfb59e3008   movl r15,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009e538  62f8  4c8b65d0       REX.W movq r12,[rbp-0x30]
0x19db0009e53c  62fc  488b45c0       REX.W movq rax,[rbp-0x40]
0x19db0009e540  6300  488b5db8       REX.W movq rbx,[rbp-0x48]
0x19db0009e544  6304  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009e548  6308  e943d2ffff     jmp 0x19db0009b790  <+0x3550>
0x19db0009e54d  630d  488945a8       REX.W movq [rbp-0x58],rax
0x19db0009e551  6311  ba38000000     movl rdx,0x38
0x19db0009e556  6316  4c8b1523e3ffff REX.W movq r10,[rip+0xffffe323]
0x19db0009e55d  631d  41ffd2         call r10
0x19db0009e560  6320  4c8d60ff       REX.W leaq r12,[rax-0x1]
0x19db0009e564  6324  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0009e568  6328  4c8b1d3b9dffff REX.W movq r11,[rip+0xffff9d3b]
0x19db0009e56f  632f  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db0009e573  6333  488b45a8       REX.W movq rax,[rbp-0x58]
0x19db0009e577  6337  e921daffff     jmp 0x19db0009bf9d  <+0x3d5d>
0x19db0009e57c  633c  50             push rax
0x19db0009e57d  633d  53             push rbx
0x19db0009e57e  633e  488955c0       REX.W movq [rbp-0x40],rdx
0x19db0009e582  6342  488945a8       REX.W movq [rbp-0x58],rax
0x19db0009e586  6346  4c896598       REX.W movq [rbp-0x68],r12
0x19db0009e58a  634a  c5fb114d90     vmovsd [rbp-0x70],xmm1
0x19db0009e58f  634f  4c897d88       REX.W movq [rbp-0x78],r15
0x19db0009e593  6353  4c897580       REX.W movq [rbp-0x80],r14
0x19db0009e597  6357  488b1d7ff4ffff REX.W movq rbx,[rip+0xfffff47f]
0x19db0009e59e  635e  b802000000     movl rax,0x2
0x19db0009e5a3  6363  33f6           xorl rsi,rsi
0x19db0009e5a5  6365  4c8b15b6e2ffff REX.W movq r10,[rip+0xffffe2b6]
0x19db0009e5ac  636c  41ffd2         call r10
0x19db0009e5af  636f  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e5b9  6379  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db0009e5bd  637d  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db0009e5c1  6381  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db0009e5c5  6385  488b45a8       REX.W movq rax,[rbp-0x58]
0x19db0009e5c9  6389  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0009e5cd  638d  4c8b6598       REX.W movq r12,[rbp-0x68]
0x19db0009e5d1  6391  c5fb104d90     vmovsd xmm1,[rbp-0x70]
0x19db0009e5d6  6396  4c8b7d88       REX.W movq r15,[rbp-0x78]
0x19db0009e5da  639a  4c8b7580       REX.W movq r14,[rbp-0x80]
0x19db0009e5de  639e  41bbb59e3008   movl r11,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009e5e4  63a4  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009e5ec  63ac  e9a3daffff     jmp 0x19db0009c094  <+0x3e54>
0x19db0009e5f1  63b1  488955c0       REX.W movq [rbp-0x40],rdx
0x19db0009e5f5  63b5  488945a8       REX.W movq [rbp-0x58],rax
0x19db0009e5f9  63b9  4c8bf3         REX.W movq r14,rbx
0x19db0009e5fc  63bc  488b1d4bedffff REX.W movq rbx,[rip+0xffffed4b]
0x19db0009e603  63c3  4c8be0         REX.W movq r12,rax
0x19db0009e606  63c6  33c0           xorl rax,rax
0x19db0009e608  63c8  4c8bfe         REX.W movq r15,rsi
0x19db0009e60b  63cb  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009e615  63d5  4c8b1546e2ffff REX.W movq r10,[rip+0xffffe246]
0x19db0009e61c  63dc  41ffd2         call r10
0x19db0009e61f  63df  48bb559f3008db190000 REX.W movq rbx,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e629  63e9  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db0009e62d  63ed  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db0009e631  63f1  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db0009e635  63f5  488b45a8       REX.W movq rax,[rbp-0x58]
0x19db0009e639  63f9  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0009e63d  63fd  41bbb59e3008   movl r11,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009e643  6403  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009e64b  640b  e9e4daffff     jmp 0x19db0009c134  <+0x3ef4>
0x19db0009e650  6410  438d1c24       leal rbx,[r12+r12*1]
0x19db0009e654  6414  4c8b15d69fffff REX.W movq r10,[rip+0xffff9fd6]
0x19db0009e65b  641b  4c3bd3         REX.W cmpq r10,rbx
0x19db0009e65e  641e  7712           ja 0x19db0009e672  <+0x6432>
0x19db0009e660  6420  488b15d99fffff REX.W movq rdx,[rip+0xffff9fd9]
0x19db0009e667  6427  4c8b15ea9bffff REX.W movq r10,[rip+0xffff9bea]
0x19db0009e66e  642e  41ffd2         call r10
0x19db0009e671  6431  cc             int3l
0x19db0009e672  6432  488955c0       REX.W movq [rbp-0x40],rdx
0x19db0009e676  6436  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db0009e67a  643a  c57b114d90     vmovsd [rbp-0x70],xmm9
0x19db0009e67f  643f  c57b114588     vmovsd [rbp-0x78],xmm8
0x19db0009e684  6444  c5fb117d80     vmovsd [rbp-0x80],xmm7
0x19db0009e689  6449  c5fb11b578ffffff vmovsd [rbp-0x88],xmm6
0x19db0009e691  6451  c5fb119570ffffff vmovsd [rbp-0x90],xmm2
0x19db0009e699  6459  c5fb118d68ffffff vmovsd [rbp-0x98],xmm1
0x19db0009e6a1  6461  c5fb11ad60ffffff vmovsd [rbp-0xa0],xmm5
0x19db0009e6a9  6469  c5fb11a558ffffff vmovsd [rbp-0xa8],xmm4
0x19db0009e6b1  6471  4c89a550ffffff REX.W movq [rbp-0xb0],r12
0x19db0009e6b8  6478  48898548ffffff REX.W movq [rbp-0xb8],rax
0x19db0009e6bf  647f  4c8bf8         REX.W movq r15,rax
0x19db0009e6c2  6482  488bc2         REX.W movq rax,rdx
0x19db0009e6c5  6485  488bce         REX.W movq rcx,rsi
0x19db0009e6c8  6488  33f6           xorl rsi,rsi
0x19db0009e6ca  648a  4c8b159cf7ffff REX.W movq r10,[rip+0xfffff79c]
0x19db0009e6d1  6491  41ffd2         call r10
0x19db0009e6d4  6494  a801           test al,0x1
0x19db0009e6d6  6496  0f8411120000   jz 0x19db0009f8ed  <+0x76ad>
0x19db0009e6dc  649c  4c8bf8         REX.W movq r15,rax
0x19db0009e6df  649f  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db0009e6e3  64a3  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db0009e6e7  64a7  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db0009e6eb  64ab  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db0009e6ef  64af  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0009e6f3  64b3  c57b104d90     vmovsd xmm9,[rbp-0x70]
0x19db0009e6f8  64b8  c57b104588     vmovsd xmm8,[rbp-0x78]
0x19db0009e6fd  64bd  c5fb107d80     vmovsd xmm7,[rbp-0x80]
0x19db0009e702  64c2  c5fb10b578ffffff vmovsd xmm6,[rbp-0x88]
0x19db0009e70a  64ca  c5fb109570ffffff vmovsd xmm2,[rbp-0x90]
0x19db0009e712  64d2  c5fb108d68ffffff vmovsd xmm1,[rbp-0x98]
0x19db0009e71a  64da  c5fb10ad60ffffff vmovsd xmm5,[rbp-0xa0]
0x19db0009e722  64e2  c5fb10a558ffffff vmovsd xmm4,[rbp-0xa8]
0x19db0009e72a  64ea  4c8ba550ffffff REX.W movq r12,[rbp-0xb0]
0x19db0009e731  64f1  488b8548ffffff REX.W movq rax,[rbp-0xb8]
0x19db0009e738  64f8  41bbb59e3008   movl r11,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009e73e  64fe  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009e746  6506  e91cdbffff     jmp 0x19db0009c267  <+0x4027>
0x19db0009e74b  650b  488955c0       REX.W movq [rbp-0x40],rdx
0x19db0009e74f  650f  4c8975a8       REX.W movq [rbp-0x58],r14
0x19db0009e753  6513  48894d98       REX.W movq [rbp-0x68],rcx
0x19db0009e757  6517  488b1df0ebffff REX.W movq rbx,[rip+0xffffebf0]
0x19db0009e75e  651e  33c0           xorl rax,rax
0x19db0009e760  6520  4c8be6         REX.W movq r12,rsi
0x19db0009e763  6523  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009e76d  652d  4c8b15eee0ffff REX.W movq r10,[rip+0xffffe0ee]
0x19db0009e774  6534  41ffd2         call r10
0x19db0009e777  6537  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db0009e77b  653b  4c8b45b8       REX.W movq r8,[rbp-0x48]
0x19db0009e77f  653f  488b75b0       REX.W movq rsi,[rbp-0x50]
0x19db0009e783  6543  4c8b75a8       REX.W movq r14,[rbp-0x58]
0x19db0009e787  6547  4c8b4da0       REX.W movq r9,[rbp-0x60]
0x19db0009e78b  654b  488b4d98       REX.W movq rcx,[rbp-0x68]
0x19db0009e78f  654f  41bbb59e3008   movl r11,0x8309eb5      ;; (compressed) object: 0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)>
0x19db0009e795  6555  c5fb108540ffffff vmovsd xmm0,[rbp-0xc0]
0x19db0009e79d  655d  e9aed9ffff     jmp 0x19db0009c150  <+0x3f10>
0x19db0009e7a2  6562  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db0009e7a6  6566  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009e7b0  6570  488b1d97ebffff REX.W movq rbx,[rip+0xffffeb97]
0x19db0009e7b7  6577  33c0           xorl rax,rax
0x19db0009e7b9  6579  4c8b15a2e0ffff REX.W movq r10,[rip+0xffffe0a2]
0x19db0009e7c0  6580  41ffd2         call r10
0x19db0009e7c3  6583  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0009e7c7  6587  e974d6ffff     jmp 0x19db0009be40  <+0x3c00>
0x19db0009e7cc  658c  4c8945d0       REX.W movq [rbp-0x30],r8
0x19db0009e7d0  6590  48894dc8       REX.W movq [rbp-0x38],rcx
0x19db0009e7d4  6594  488955c0       REX.W movq [rbp-0x40],rdx
0x19db0009e7d8  6598  488945b8       REX.W movq [rbp-0x48],rax
0x19db0009e7dc  659c  4c8965b0       REX.W movq [rbp-0x50],r12
0x19db0009e7e0  65a0  4c8bf2         REX.W movq r14,rdx
0x19db0009e7e3  65a3  ba20000000     movl rdx,0x20
0x19db0009e7e8  65a8  4c8b1591e0ffff REX.W movq r10,[rip+0xffffe091]
0x19db0009e7ef  65af  41ffd2         call r10
0x19db0009e7f2  65b2  4c8d70ff       REX.W leaq r14,[rax-0x1]
0x19db0009e7f6  65b6  4c8b65b0       REX.W movq r12,[rbp-0x50]
0x19db0009e7fa  65ba  488b75d8       REX.W movq rsi,[rbp-0x28]
0x19db0009e7fe  65be  4c8b45d0       REX.W movq r8,[rbp-0x30]
0x19db0009e802  65c2  41b9b5da3008   movl r9,0x830dab5       ;; (compressed) object: 0x19db0830dab5 <Map(HOLEY_ELEMENTS)>
0x19db0009e808  65c8  488b4dc8       REX.W movq rcx,[rbp-0x38]
0x19db0009e80c  65cc  488b55c0       REX.W movq rdx,[rbp-0x40]
0x19db0009e810  65d0  488b45b8       REX.W movq rax,[rbp-0x48]
0x19db0009e814  65d4  4c8b1d8f9affff REX.W movq r11,[rip+0xffff9a8f]
0x19db0009e81b  65db  e95fdcffff     jmp 0x19db0009c47f  <+0x423f>
0x19db0009e820  65e0  488945c0       REX.W movq [rbp-0x40],rax
0x19db0009e824  65e4  4c8965b0       REX.W movq [rbp-0x50],r12
0x19db0009e828  65e8  4c8945a8       REX.W movq [rbp-0x58],r8
0x19db0009e82c  65ec  c5fb1155d0     vmovsd [rbp-0x30],xmm2
0x19db0009e831  65f1  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009e83b  65fb  488b1d0cebffff REX.W movq rbx,[rip+0xffffeb0c]
0x19db0009e842  6602  4c8bd8         REX.W movq r11,rax
0x19db0009e845  6605  33c0           xorl rax,rax
0x19db0009e847  6607  4c8b1514e0ffff REX.W movq r10,[rip+0xffffe014]
0x19db0009e84e  660e  41ffd2         call r10
0x19db0009e851  6611  488b45c0       REX.W movq rax,[rbp-0x40]
0x19db0009e855  6615  4c8b65b0       REX.W movq r12,[rbp-0x50]
0x19db0009e859  6619  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009e85d  661d  c5fb1055d0     vmovsd xmm2,[rbp-0x30]
0x19db0009e862  6622  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e86c  662c  e99cdeffff     jmp 0x19db0009c70d  <+0x44cd>
0x19db0009e871  6631  c5fb1155d0     vmovsd [rbp-0x30],xmm2
0x19db0009e876  6636  488945c0       REX.W movq [rbp-0x40],rax
0x19db0009e87a  663a  4c8975b8       REX.W movq [rbp-0x48],r14
0x19db0009e87e  663e  4c8965b0       REX.W movq [rbp-0x50],r12
0x19db0009e882  6642  4c8945a8       REX.W movq [rbp-0x58],r8
0x19db0009e886  6646  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009e890  6650  488b1db7eaffff REX.W movq rbx,[rip+0xffffeab7]
0x19db0009e897  6657  4c8bd8         REX.W movq r11,rax
0x19db0009e89a  665a  33c0           xorl rax,rax
0x19db0009e89c  665c  4c8b15bfdfffff REX.W movq r10,[rip+0xffffdfbf]
0x19db0009e8a3  6663  41ffd2         call r10
0x19db0009e8a6  6666  c5fb1055d0     vmovsd xmm2,[rbp-0x30]
0x19db0009e8ab  666b  488b45c0       REX.W movq rax,[rbp-0x40]
0x19db0009e8af  666f  4c8b75b8       REX.W movq r14,[rbp-0x48]
0x19db0009e8b3  6673  4c8b65b0       REX.W movq r12,[rbp-0x50]
0x19db0009e8b7  6677  4c8b45a8       REX.W movq r8,[rbp-0x58]
0x19db0009e8bb  667b  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e8c5  6685  e956deffff     jmp 0x19db0009c720  <+0x44e0>
0x19db0009e8ca  668a  4c8945c8       REX.W movq [rbp-0x38],r8
0x19db0009e8ce  668e  c5fb1155d0     vmovsd [rbp-0x30],xmm2
0x19db0009e8d3  6693  48be0d362e08db190000 REX.W movq rsi,0x19db082e360d    ;; object: 0x19db082e360d <NativeContext[243]>
0x19db0009e8dd  669d  488b1d6aeaffff REX.W movq rbx,[rip+0xffffea6a]
0x19db0009e8e4  66a4  33c0           xorl rax,rax
0x19db0009e8e6  66a6  4c8b1575dfffff REX.W movq r10,[rip+0xffffdf75]
0x19db0009e8ed  66ad  41ffd2         call r10
0x19db0009e8f0  66b0  4c8b45c8       REX.W movq r8,[rbp-0x38]
0x19db0009e8f4  66b4  c5fb1055d0     vmovsd xmm2,[rbp-0x30]
0x19db0009e8f9  66b9  49b9559f3008db190000 REX.W movq r9,0x19db08309f55    ;; object: 0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>
0x19db0009e903  66c3  e9b8dcffff     jmp 0x19db0009c5c0  <+0x4380>
0x19db0009e908  66c8  cc             int3l
0x19db0009e909  66c9  e9ca0f0000     jmp 0x19db0009f8d8  <+0x7698>
0x19db0009e90e  66ce  458bdb         movl r11,r11
0x19db0009e911  66d1  4d03dd         REX.W addq r11,r13
0x19db0009e914  66d4  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009e91b  66db  4d23e3         REX.W andq r12,r11
0x19db0009e91e  66de  41f644240802   testb [r12+0x8],0x2
0x19db0009e924  66e4  0f84b3e0ffff   jz 0x19db0009c9dd  <+0x479d>
0x19db0009e92a  66ea  4d8d70ff       REX.W leaq r14,[r8-0x1]
0x19db0009e92e  66ee  50             push rax
0x19db0009e92f  66ef  51             push rcx
0x19db0009e930  66f0  52             push rdx
0x19db0009e931  66f1  56             push rsi
0x19db0009e932  66f2  57             push rdi
0x19db0009e933  66f3  498bf6         REX.W movq rsi,r14
0x19db0009e936  66f6  498bf8         REX.W movq rdi,r8
0x19db0009e939  66f9  488b15009dffff REX.W movq rdx,[rip+0xffff9d00]
0x19db0009e940  6700  488bca         REX.W movq rcx,rdx
0x19db0009e943  6703  49bac065b8f5ff7f0000 REX.W movq r10,0x7ffff5b865c0  (RecordWrite)    ;; off heap target
0x19db0009e94d  670d  41ffd2         call r10
0x19db0009e950  6710  5f             pop rdi
0x19db0009e951  6711  5e             pop rsi
0x19db0009e952  6712  5a             pop rdx
0x19db0009e953  6713  59             pop rcx
0x19db0009e954  6714  58             pop rax
0x19db0009e955  6715  e983e0ffff     jmp 0x19db0009c9dd  <+0x479d>
0x19db0009e95a  671a  458bf6         movl r14,r14
0x19db0009e95d  671d  4d03f5         REX.W addq r14,r13
0x19db0009e960  6720  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009e967  6727  4d23ce         REX.W andq r9,r14
0x19db0009e96a  672a  41f6410802     testb [r9+0x8],0x2
0x19db0009e96f  672f  0f84afdbffff   jz 0x19db0009c524  <+0x42e4>
0x19db0009e975  6735  4d8d6003       REX.W leaq r12,[r8+0x3]
0x19db0009e979  6739  50             push rax
0x19db0009e97a  673a  51             push rcx
0x19db0009e97b  673b  52             push rdx
0x19db0009e97c  673c  56             push rsi
0x19db0009e97d  673d  57             push rdi
0x19db0009e97e  673e  4c89e6         REX.W movq rsi,r12
0x19db0009e981  6741  498bf8         REX.W movq rdi,r8
0x19db0009e984  6744  33d2           xorl rdx,rdx
0x19db0009e986  6746  488b0db39cffff REX.W movq rcx,[rip+0xffff9cb3]
0x19db0009e98d  674d  4c8b15b1ffffff REX.W movq r10,[rip+0xffffffb1]
0x19db0009e994  6754  41ffd2         call r10
0x19db0009e997  6757  5f             pop rdi
0x19db0009e998  6758  5e             pop rsi
0x19db0009e999  6759  5a             pop rdx
0x19db0009e99a  675a  59             pop rcx
0x19db0009e99b  675b  58             pop rax
0x19db0009e99c  675c  e983dbffff     jmp 0x19db0009c524  <+0x42e4>
0x19db0009e9a1  6761  458bc9         movl r9,r9
0x19db0009e9a4  6764  4d03cd         REX.W addq r9,r13
0x19db0009e9a7  6767  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009e9ae  676e  4d23e1         REX.W andq r12,r9
0x19db0009e9b1  6771  41f644240802   testb [r12+0x8],0x2
0x19db0009e9b7  6777  0f844edbffff   jz 0x19db0009c50b  <+0x42cb>
0x19db0009e9bd  677d  4d8d78ff       REX.W leaq r15,[r8-0x1]
0x19db0009e9c1  6781  50             push rax
0x19db0009e9c2  6782  51             push rcx
0x19db0009e9c3  6783  52             push rdx
0x19db0009e9c4  6784  56             push rsi
0x19db0009e9c5  6785  57             push rdi
0x19db0009e9c6  6786  498bf7         REX.W movq rsi,r15
0x19db0009e9c9  6789  498bf8         REX.W movq rdi,r8
0x19db0009e9cc  678c  488b156d9cffff REX.W movq rdx,[rip+0xffff9c6d]
0x19db0009e9d3  6793  488bca         REX.W movq rcx,rdx
0x19db0009e9d6  6796  4c8b1568ffffff REX.W movq r10,[rip+0xffffff68]
0x19db0009e9dd  679d  41ffd2         call r10
0x19db0009e9e0  67a0  5f             pop rdi
0x19db0009e9e1  67a1  5e             pop rsi
0x19db0009e9e2  67a2  5a             pop rdx
0x19db0009e9e3  67a3  59             pop rcx
0x19db0009e9e4  67a4  58             pop rax
0x19db0009e9e5  67a5  e921dbffff     jmp 0x19db0009c50b  <+0x42cb>
0x19db0009e9ea  67aa  458bc0         movl r8,r8
0x19db0009e9ed  67ad  4d03c5         REX.W addq r8,r13
0x19db0009e9f0  67b0  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009e9f7  67b7  4d23c8         REX.W andq r9,r8
0x19db0009e9fa  67ba  41f6410802     testb [r9+0x8],0x2
0x19db0009e9ff  67bf  0f842ed4ffff   jz 0x19db0009be33  <+0x3bf3>
0x19db0009ea05  67c5  4c8d6617       REX.W leaq r12,[rsi+0x17]
0x19db0009ea09  67c9  50             push rax
0x19db0009ea0a  67ca  51             push rcx
0x19db0009ea0b  67cb  52             push rdx
0x19db0009ea0c  67cc  56             push rsi
0x19db0009ea0d  67cd  57             push rdi
0x19db0009ea0e  67ce  488bfe         REX.W movq rdi,rsi
0x19db0009ea11  67d1  4c89e6         REX.W movq rsi,r12
0x19db0009ea14  67d4  33d2           xorl rdx,rdx
0x19db0009ea16  67d6  488b0d239cffff REX.W movq rcx,[rip+0xffff9c23]
0x19db0009ea1d  67dd  4c8b1521ffffff REX.W movq r10,[rip+0xffffff21]
0x19db0009ea24  67e4  41ffd2         call r10
0x19db0009ea27  67e7  5f             pop rdi
0x19db0009ea28  67e8  5e             pop rsi
0x19db0009ea29  67e9  5a             pop rdx
0x19db0009ea2a  67ea  59             pop rcx
0x19db0009ea2b  67eb  58             pop rax
0x19db0009ea2c  67ec  e902d4ffff     jmp 0x19db0009be33  <+0x3bf3>
0x19db0009ea31  67f1  a801           test al,0x1
0x19db0009ea33  67f3  0f84c1cbffff   jz 0x19db0009b5fa  <+0x33ba>
0x19db0009ea39  67f9  8bc0           movl rax,rax
0x19db0009ea3b  67fb  4903c5         REX.W addq rax,r13
0x19db0009ea3e  67fe  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db0009ea45  6805  4c23c0         REX.W andq r8,rax
0x19db0009ea48  6808  41f6400802     testb [r8+0x8],0x2
0x19db0009ea4d  680d  0f84a7cbffff   jz 0x19db0009b5fa  <+0x33ba>
0x19db0009ea53  6813  4c8d4e13       REX.W leaq r9,[rsi+0x13]
0x19db0009ea57  6817  50             push rax
0x19db0009ea58  6818  51             push rcx
0x19db0009ea59  6819  52             push rdx
0x19db0009ea5a  681a  56             push rsi
0x19db0009ea5b  681b  57             push rdi
0x19db0009ea5c  681c  488bfe         REX.W movq rdi,rsi
0x19db0009ea5f  681f  498bf1         REX.W movq rsi,r9
0x19db0009ea62  6822  33d2           xorl rdx,rdx
0x19db0009ea64  6824  488b0dd59bffff REX.W movq rcx,[rip+0xffff9bd5]
0x19db0009ea6b  682b  4c8b15d3feffff REX.W movq r10,[rip+0xfffffed3]
0x19db0009ea72  6832  41ffd2         call r10
0x19db0009ea75  6835  5f             pop rdi
0x19db0009ea76  6836  5e             pop rsi
0x19db0009ea77  6837  5a             pop rdx
0x19db0009ea78  6838  59             pop rcx
0x19db0009ea79  6839  58             pop rax
0x19db0009ea7a  683a  e97bcbffff     jmp 0x19db0009b5fa  <+0x33ba>
0x19db0009ea7f  683f  a801           test al,0x1
0x19db0009ea81  6841  0f84b1c4ffff   jz 0x19db0009af38  <+0x2cf8>
0x19db0009ea87  6847  8bc0           movl rax,rax
0x19db0009ea89  6849  4903c5         REX.W addq rax,r13
0x19db0009ea8c  684c  49c7c60000fcff REX.W movq r14,0xfffc0000
0x19db0009ea93  6853  4c23f0         REX.W andq r14,rax
0x19db0009ea96  6856  41f6460802     testb [r14+0x8],0x2
0x19db0009ea9b  685b  0f8497c4ffff   jz 0x19db0009af38  <+0x2cf8>
0x19db0009eaa1  6861  498d5c2413     REX.W leaq rbx,[r12+0x13]
0x19db0009eaa6  6866  50             push rax
0x19db0009eaa7  6867  51             push rcx
0x19db0009eaa8  6868  52             push rdx
0x19db0009eaa9  6869  56             push rsi
0x19db0009eaaa  686a  57             push rdi
0x19db0009eaab  686b  488bf3         REX.W movq rsi,rbx
0x19db0009eaae  686e  4c89e7         REX.W movq rdi,r12
0x19db0009eab1  6871  33d2           xorl rdx,rdx
0x19db0009eab3  6873  488b0d869bffff REX.W movq rcx,[rip+0xffff9b86]
0x19db0009eaba  687a  4c8b1584feffff REX.W movq r10,[rip+0xfffffe84]
0x19db0009eac1  6881  41ffd2         call r10
0x19db0009eac4  6884  5f             pop rdi
0x19db0009eac5  6885  5e             pop rsi
0x19db0009eac6  6886  5a             pop rdx
0x19db0009eac7  6887  59             pop rcx
0x19db0009eac8  6888  58             pop rax
0x19db0009eac9  6889  e96ac4ffff     jmp 0x19db0009af38  <+0x2cf8>
0x19db0009eace  688e  458bf6         movl r14,r14
0x19db0009ead1  6891  4d03f5         REX.W addq r14,r13
0x19db0009ead4  6894  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009eadb  689b  4d23ce         REX.W andq r9,r14
0x19db0009eade  689e  41f6410802     testb [r9+0x8],0x2
0x19db0009eae3  68a3  0f8429c4ffff   jz 0x19db0009af12  <+0x2cd2>
0x19db0009eae9  68a9  4d8d6003       REX.W leaq r12,[r8+0x3]
0x19db0009eaed  68ad  50             push rax
0x19db0009eaee  68ae  51             push rcx
0x19db0009eaef  68af  52             push rdx
0x19db0009eaf0  68b0  56             push rsi
0x19db0009eaf1  68b1  57             push rdi
0x19db0009eaf2  68b2  4c89e6         REX.W movq rsi,r12
0x19db0009eaf5  68b5  498bf8         REX.W movq rdi,r8
0x19db0009eaf8  68b8  33d2           xorl rdx,rdx
0x19db0009eafa  68ba  488b0d3f9bffff REX.W movq rcx,[rip+0xffff9b3f]
0x19db0009eb01  68c1  4c8b153dfeffff REX.W movq r10,[rip+0xfffffe3d]
0x19db0009eb08  68c8  41ffd2         call r10
0x19db0009eb0b  68cb  5f             pop rdi
0x19db0009eb0c  68cc  5e             pop rsi
0x19db0009eb0d  68cd  5a             pop rdx
0x19db0009eb0e  68ce  59             pop rcx
0x19db0009eb0f  68cf  58             pop rax
0x19db0009eb10  68d0  e9fdc3ffff     jmp 0x19db0009af12  <+0x2cd2>
0x19db0009eb15  68d5  458bc9         movl r9,r9
0x19db0009eb18  68d8  4d03cd         REX.W addq r9,r13
0x19db0009eb1b  68db  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009eb22  68e2  4d23e1         REX.W andq r12,r9
0x19db0009eb25  68e5  41f644240802   testb [r12+0x8],0x2
0x19db0009eb2b  68eb  0f84c8c3ffff   jz 0x19db0009aef9  <+0x2cb9>
0x19db0009eb31  68f1  498d40ff       REX.W leaq rax,[r8-0x1]
0x19db0009eb35  68f5  50             push rax
0x19db0009eb36  68f6  51             push rcx
0x19db0009eb37  68f7  52             push rdx
0x19db0009eb38  68f8  56             push rsi
0x19db0009eb39  68f9  57             push rdi
0x19db0009eb3a  68fa  488bf0         REX.W movq rsi,rax
0x19db0009eb3d  68fd  498bf8         REX.W movq rdi,r8
0x19db0009eb40  6900  488b15f99affff REX.W movq rdx,[rip+0xffff9af9]
0x19db0009eb47  6907  488bca         REX.W movq rcx,rdx
0x19db0009eb4a  690a  4c8b15f4fdffff REX.W movq r10,[rip+0xfffffdf4]
0x19db0009eb51  6911  41ffd2         call r10
0x19db0009eb54  6914  5f             pop rdi
0x19db0009eb55  6915  5e             pop rsi
0x19db0009eb56  6916  5a             pop rdx
0x19db0009eb57  6917  59             pop rcx
0x19db0009eb58  6918  58             pop rax
0x19db0009eb59  6919  e99bc3ffff     jmp 0x19db0009aef9  <+0x2cb9>
0x19db0009eb5e  691e  458bc0         movl r8,r8
0x19db0009eb61  6921  4d03c5         REX.W addq r8,r13
0x19db0009eb64  6924  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009eb6b  692b  4d23e0         REX.W andq r12,r8
0x19db0009eb6e  692e  41f644240802   testb [r12+0x8],0x2
0x19db0009eb74  6934  0f842ac2ffff   jz 0x19db0009ada4  <+0x2b64>
0x19db0009eb7a  693a  488d580f       REX.W leaq rbx,[rax+0xf]
0x19db0009eb7e  693e  50             push rax
0x19db0009eb7f  693f  51             push rcx
0x19db0009eb80  6940  52             push rdx
0x19db0009eb81  6941  56             push rsi
0x19db0009eb82  6942  57             push rdi
0x19db0009eb83  6943  488bf3         REX.W movq rsi,rbx
0x19db0009eb86  6946  488bf8         REX.W movq rdi,rax
0x19db0009eb89  6949  33d2           xorl rdx,rdx
0x19db0009eb8b  694b  488b0dae9affff REX.W movq rcx,[rip+0xffff9aae]
0x19db0009eb92  6952  4c8b15acfdffff REX.W movq r10,[rip+0xfffffdac]
0x19db0009eb99  6959  41ffd2         call r10
0x19db0009eb9c  695c  5f             pop rdi
0x19db0009eb9d  695d  5e             pop rsi
0x19db0009eb9e  695e  5a             pop rdx
0x19db0009eb9f  695f  59             pop rcx
0x19db0009eba0  6960  58             pop rax
0x19db0009eba1  6961  e9fec1ffff     jmp 0x19db0009ada4  <+0x2b64>
0x19db0009eba6  6966  458bc0         movl r8,r8
0x19db0009eba9  6969  4d03c5         REX.W addq r8,r13
0x19db0009ebac  696c  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009ebb3  6973  4d23e0         REX.W andq r12,r8
0x19db0009ebb6  6976  41f644240802   testb [r12+0x8],0x2
0x19db0009ebbc  697c  0f84c3c1ffff   jz 0x19db0009ad85  <+0x2b45>
0x19db0009ebc2  6982  488d580f       REX.W leaq rbx,[rax+0xf]
0x19db0009ebc6  6986  50             push rax
0x19db0009ebc7  6987  51             push rcx
0x19db0009ebc8  6988  52             push rdx
0x19db0009ebc9  6989  56             push rsi
0x19db0009ebca  698a  57             push rdi
0x19db0009ebcb  698b  488bf3         REX.W movq rsi,rbx
0x19db0009ebce  698e  488bf8         REX.W movq rdi,rax
0x19db0009ebd1  6991  33d2           xorl rdx,rdx
0x19db0009ebd3  6993  488b0d669affff REX.W movq rcx,[rip+0xffff9a66]
0x19db0009ebda  699a  4c8b1564fdffff REX.W movq r10,[rip+0xfffffd64]
0x19db0009ebe1  69a1  41ffd2         call r10
0x19db0009ebe4  69a4  5f             pop rdi
0x19db0009ebe5  69a5  5e             pop rsi
0x19db0009ebe6  69a6  5a             pop rdx
0x19db0009ebe7  69a7  59             pop rcx
0x19db0009ebe8  69a8  58             pop rax
0x19db0009ebe9  69a9  e997c1ffff     jmp 0x19db0009ad85  <+0x2b45>
0x19db0009ebee  69ae  8bd2           movl rdx,rdx
0x19db0009ebf0  69b0  4903d5         REX.W addq rdx,r13
0x19db0009ebf3  69b3  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0009ebfa  69ba  4823da         REX.W andq rbx,rdx
0x19db0009ebfd  69bd  f6430802       testb [rbx+0x8],0x2
0x19db0009ec01  69c1  0f8464c1ffff   jz 0x19db0009ad6b  <+0x2b2b>
0x19db0009ec07  69c7  498d7c24ff     REX.W leaq rdi,[r12-0x1]
0x19db0009ec0c  69cc  50             push rax
0x19db0009ec0d  69cd  51             push rcx
0x19db0009ec0e  69ce  52             push rdx
0x19db0009ec0f  69cf  56             push rsi
0x19db0009ec10  69d0  57             push rdi
0x19db0009ec11  69d1  488bf7         REX.W movq rsi,rdi
0x19db0009ec14  69d4  4c89e7         REX.W movq rdi,r12
0x19db0009ec17  69d7  488b15229affff REX.W movq rdx,[rip+0xffff9a22]
0x19db0009ec1e  69de  488bca         REX.W movq rcx,rdx
0x19db0009ec21  69e1  4c8b151dfdffff REX.W movq r10,[rip+0xfffffd1d]
0x19db0009ec28  69e8  41ffd2         call r10
0x19db0009ec2b  69eb  5f             pop rdi
0x19db0009ec2c  69ec  5e             pop rsi
0x19db0009ec2d  69ed  5a             pop rdx
0x19db0009ec2e  69ee  59             pop rcx
0x19db0009ec2f  69ef  58             pop rax
0x19db0009ec30  69f0  e936c1ffff     jmp 0x19db0009ad6b  <+0x2b2b>
0x19db0009ec35  69f5  458bc0         movl r8,r8
0x19db0009ec38  69f8  4d03c5         REX.W addq r8,r13
0x19db0009ec3b  69fb  49c7c70000fcff REX.W movq r15,0xfffc0000
0x19db0009ec42  6a02  4d23f8         REX.W andq r15,r8
0x19db0009ec45  6a05  41f6470802     testb [r15+0x8],0x2
0x19db0009ec4a  6a0a  0f8484c0ffff   jz 0x19db0009acd4  <+0x2a94>
0x19db0009ec50  6a10  4b8d0434       REX.W leaq rax,[r12+r14*1]
0x19db0009ec54  6a14  50             push rax
0x19db0009ec55  6a15  51             push rcx
0x19db0009ec56  6a16  52             push rdx
0x19db0009ec57  6a17  56             push rsi
0x19db0009ec58  6a18  57             push rdi
0x19db0009ec59  6a19  488bf0         REX.W movq rsi,rax
0x19db0009ec5c  6a1c  4c89e7         REX.W movq rdi,r12
0x19db0009ec5f  6a1f  33d2           xorl rdx,rdx
0x19db0009ec61  6a21  488b0dd899ffff REX.W movq rcx,[rip+0xffff99d8]
0x19db0009ec68  6a28  4c8b15d6fcffff REX.W movq r10,[rip+0xfffffcd6]
0x19db0009ec6f  6a2f  41ffd2         call r10
0x19db0009ec72  6a32  5f             pop rdi
0x19db0009ec73  6a33  5e             pop rsi
0x19db0009ec74  6a34  5a             pop rdx
0x19db0009ec75  6a35  59             pop rcx
0x19db0009ec76  6a36  58             pop rax
0x19db0009ec77  6a37  e958c0ffff     jmp 0x19db0009acd4  <+0x2a94>
0x19db0009ec7c  6a3c  458bff         movl r15,r15
0x19db0009ec7f  6a3f  4d03fd         REX.W addq r15,r13
0x19db0009ec82  6a42  49c7c60000fcff REX.W movq r14,0xfffc0000
0x19db0009ec89  6a49  4d23f7         REX.W andq r14,r15
0x19db0009ec8c  6a4c  41f6460802     testb [r14+0x8],0x2
0x19db0009ec91  6a51  0f84f9b3ffff   jz 0x19db0009a090  <+0x1e50>
0x19db0009ec97  6a57  498d710b       REX.W leaq rsi,[r9+0xb]
0x19db0009ec9b  6a5b  50             push rax
0x19db0009ec9c  6a5c  51             push rcx
0x19db0009ec9d  6a5d  52             push rdx
0x19db0009ec9e  6a5e  56             push rsi
0x19db0009ec9f  6a5f  57             push rdi
0x19db0009eca0  6a60  498bf9         REX.W movq rdi,r9
0x19db0009eca3  6a63  33d2           xorl rdx,rdx
0x19db0009eca5  6a65  488b0d9499ffff REX.W movq rcx,[rip+0xffff9994]
0x19db0009ecac  6a6c  4c8b1592fcffff REX.W movq r10,[rip+0xfffffc92]
0x19db0009ecb3  6a73  41ffd2         call r10
0x19db0009ecb6  6a76  5f             pop rdi
0x19db0009ecb7  6a77  5e             pop rsi
0x19db0009ecb8  6a78  5a             pop rdx
0x19db0009ecb9  6a79  59             pop rcx
0x19db0009ecba  6a7a  58             pop rax
0x19db0009ecbb  6a7b  e9d0b3ffff     jmp 0x19db0009a090  <+0x1e50>
0x19db0009ecc0  6a80  458bff         movl r15,r15
0x19db0009ecc3  6a83  4d03fd         REX.W addq r15,r13
0x19db0009ecc6  6a86  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009eccd  6a8d  4d23cf         REX.W andq r9,r15
0x19db0009ecd0  6a90  41f6410802     testb [r9+0x8],0x2
0x19db0009ecd5  6a95  0f8490b3ffff   jz 0x19db0009a06b  <+0x1e2b>
0x19db0009ecdb  6a9b  4d8d660b       REX.W leaq r12,[r14+0xb]
0x19db0009ecdf  6a9f  50             push rax
0x19db0009ece0  6aa0  51             push rcx
0x19db0009ece1  6aa1  52             push rdx
0x19db0009ece2  6aa2  56             push rsi
0x19db0009ece3  6aa3  57             push rdi
0x19db0009ece4  6aa4  4c89e6         REX.W movq rsi,r12
0x19db0009ece7  6aa7  498bfe         REX.W movq rdi,r14
0x19db0009ecea  6aaa  33d2           xorl rdx,rdx
0x19db0009ecec  6aac  488b0d4d99ffff REX.W movq rcx,[rip+0xffff994d]
0x19db0009ecf3  6ab3  4c8b154bfcffff REX.W movq r10,[rip+0xfffffc4b]
0x19db0009ecfa  6aba  41ffd2         call r10
0x19db0009ecfd  6abd  5f             pop rdi
0x19db0009ecfe  6abe  5e             pop rsi
0x19db0009ecff  6abf  5a             pop rdx
0x19db0009ed00  6ac0  59             pop rcx
0x19db0009ed01  6ac1  58             pop rax
0x19db0009ed02  6ac2  e964b3ffff     jmp 0x19db0009a06b  <+0x1e2b>
0x19db0009ed07  6ac7  8bf6           movl rsi,rsi
0x19db0009ed09  6ac9  4903f5         REX.W addq rsi,r13
0x19db0009ed0c  6acc  48c7c70000fcff REX.W movq rdi,0xfffc0000
0x19db0009ed13  6ad3  4823fe         REX.W andq rdi,rsi
0x19db0009ed16  6ad6  f6470802       testb [rdi+0x8],0x2
0x19db0009ed1a  6ada  0f8432b3ffff   jz 0x19db0009a052  <+0x1e12>
0x19db0009ed20  6ae0  4d8d61ff       REX.W leaq r12,[r9-0x1]
0x19db0009ed24  6ae4  50             push rax
0x19db0009ed25  6ae5  51             push rcx
0x19db0009ed26  6ae6  52             push rdx
0x19db0009ed27  6ae7  56             push rsi
0x19db0009ed28  6ae8  57             push rdi
0x19db0009ed29  6ae9  4c89e6         REX.W movq rsi,r12
0x19db0009ed2c  6aec  498bf9         REX.W movq rdi,r9
0x19db0009ed2f  6aef  488b150a99ffff REX.W movq rdx,[rip+0xffff990a]
0x19db0009ed36  6af6  488bca         REX.W movq rcx,rdx
0x19db0009ed39  6af9  4c8b1505fcffff REX.W movq r10,[rip+0xfffffc05]
0x19db0009ed40  6b00  41ffd2         call r10
0x19db0009ed43  6b03  5f             pop rdi
0x19db0009ed44  6b04  5e             pop rsi
0x19db0009ed45  6b05  5a             pop rdx
0x19db0009ed46  6b06  59             pop rcx
0x19db0009ed47  6b07  58             pop rax
0x19db0009ed48  6b08  e905b3ffff     jmp 0x19db0009a052  <+0x1e12>
0x19db0009ed4d  6b0d  458bff         movl r15,r15
0x19db0009ed50  6b10  4d03fd         REX.W addq r15,r13
0x19db0009ed53  6b13  48c7c20000fcff REX.W movq rdx,0xfffc0000
0x19db0009ed5a  6b1a  4923d7         REX.W andq rdx,r15
0x19db0009ed5d  6b1d  f6420802       testb [rdx+0x8],0x2
0x19db0009ed61  6b21  0f8446b2ffff   jz 0x19db00099fad  <+0x1d6d>
0x19db0009ed67  6b27  498d4e07       REX.W leaq rcx,[r14+0x7]
0x19db0009ed6b  6b2b  50             push rax
0x19db0009ed6c  6b2c  51             push rcx
0x19db0009ed6d  6b2d  52             push rdx
0x19db0009ed6e  6b2e  56             push rsi
0x19db0009ed6f  6b2f  57             push rdi
0x19db0009ed70  6b30  488bf1         REX.W movq rsi,rcx
0x19db0009ed73  6b33  498bfe         REX.W movq rdi,r14
0x19db0009ed76  6b36  33d2           xorl rdx,rdx
0x19db0009ed78  6b38  488b0dc198ffff REX.W movq rcx,[rip+0xffff98c1]
0x19db0009ed7f  6b3f  4c8b15bffbffff REX.W movq r10,[rip+0xfffffbbf]
0x19db0009ed86  6b46  41ffd2         call r10
0x19db0009ed89  6b49  5f             pop rdi
0x19db0009ed8a  6b4a  5e             pop rsi
0x19db0009ed8b  6b4b  5a             pop rdx
0x19db0009ed8c  6b4c  59             pop rcx
0x19db0009ed8d  6b4d  58             pop rax
0x19db0009ed8e  6b4e  e91ab2ffff     jmp 0x19db00099fad  <+0x1d6d>
0x19db0009ed93  6b53  458bf6         movl r14,r14
0x19db0009ed96  6b56  4d03f5         REX.W addq r14,r13
0x19db0009ed99  6b59  49c7c70000fcff REX.W movq r15,0xfffc0000
0x19db0009eda0  6b60  4d23fe         REX.W andq r15,r14
0x19db0009eda3  6b63  41f6470802     testb [r15+0x8],0x2
0x19db0009eda8  6b68  0f84dbb1ffff   jz 0x19db00099f89  <+0x1d49>
0x19db0009edae  6b6e  498d5103       REX.W leaq rdx,[r9+0x3]
0x19db0009edb2  6b72  50             push rax
0x19db0009edb3  6b73  51             push rcx
0x19db0009edb4  6b74  52             push rdx
0x19db0009edb5  6b75  56             push rsi
0x19db0009edb6  6b76  57             push rdi
0x19db0009edb7  6b77  488bf2         REX.W movq rsi,rdx
0x19db0009edba  6b7a  498bf9         REX.W movq rdi,r9
0x19db0009edbd  6b7d  33d2           xorl rdx,rdx
0x19db0009edbf  6b7f  488b0d7a98ffff REX.W movq rcx,[rip+0xffff987a]
0x19db0009edc6  6b86  4c8b1578fbffff REX.W movq r10,[rip+0xfffffb78]
0x19db0009edcd  6b8d  41ffd2         call r10
0x19db0009edd0  6b90  5f             pop rdi
0x19db0009edd1  6b91  5e             pop rsi
0x19db0009edd2  6b92  5a             pop rdx
0x19db0009edd3  6b93  59             pop rcx
0x19db0009edd4  6b94  58             pop rax
0x19db0009edd5  6b95  e9afb1ffff     jmp 0x19db00099f89  <+0x1d49>
0x19db0009edda  6b9a  458bff         movl r15,r15
0x19db0009eddd  6b9d  4d03fd         REX.W addq r15,r13
0x19db0009ede0  6ba0  48c7c20000fcff REX.W movq rdx,0xfffc0000
0x19db0009ede7  6ba7  4923d7         REX.W andq rdx,r15
0x19db0009edea  6baa  f6420802       testb [rdx+0x8],0x2
0x19db0009edee  6bae  0f847cb1ffff   jz 0x19db00099f70  <+0x1d30>
0x19db0009edf4  6bb4  498d49ff       REX.W leaq rcx,[r9-0x1]
0x19db0009edf8  6bb8  50             push rax
0x19db0009edf9  6bb9  51             push rcx
0x19db0009edfa  6bba  52             push rdx
0x19db0009edfb  6bbb  56             push rsi
0x19db0009edfc  6bbc  57             push rdi
0x19db0009edfd  6bbd  488bf1         REX.W movq rsi,rcx
0x19db0009ee00  6bc0  498bf9         REX.W movq rdi,r9
0x19db0009ee03  6bc3  488b153698ffff REX.W movq rdx,[rip+0xffff9836]
0x19db0009ee0a  6bca  488bca         REX.W movq rcx,rdx
0x19db0009ee0d  6bcd  4c8b1531fbffff REX.W movq r10,[rip+0xfffffb31]
0x19db0009ee14  6bd4  41ffd2         call r10
0x19db0009ee17  6bd7  5f             pop rdi
0x19db0009ee18  6bd8  5e             pop rsi
0x19db0009ee19  6bd9  5a             pop rdx
0x19db0009ee1a  6bda  59             pop rcx
0x19db0009ee1b  6bdb  58             pop rax
0x19db0009ee1c  6bdc  e94fb1ffff     jmp 0x19db00099f70  <+0x1d30>
0x19db0009ee21  6be1  41f6c101       testb r9,0x1
0x19db0009ee25  6be5  0f8423afffff   jz 0x19db00099d4e  <+0x1b0e>
0x19db0009ee2b  6beb  458bc9         movl r9,r9
0x19db0009ee2e  6bee  4d03cd         REX.W addq r9,r13
0x19db0009ee31  6bf1  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009ee38  6bf8  4d23d9         REX.W andq r11,r9
0x19db0009ee3b  6bfb  41f6430802     testb [r11+0x8],0x2
0x19db0009ee40  6c00  0f8408afffff   jz 0x19db00099d4e  <+0x1b0e>
0x19db0009ee46  6c06  4d8d742427     REX.W leaq r14,[r12+0x27]
0x19db0009ee4b  6c0b  50             push rax
0x19db0009ee4c  6c0c  51             push rcx
0x19db0009ee4d  6c0d  52             push rdx
0x19db0009ee4e  6c0e  56             push rsi
0x19db0009ee4f  6c0f  57             push rdi
0x19db0009ee50  6c10  498bf6         REX.W movq rsi,r14
0x19db0009ee53  6c13  4c89e7         REX.W movq rdi,r12
0x19db0009ee56  6c16  33d2           xorl rdx,rdx
0x19db0009ee58  6c18  488b0de197ffff REX.W movq rcx,[rip+0xffff97e1]
0x19db0009ee5f  6c1f  4c8b15dffaffff REX.W movq r10,[rip+0xfffffadf]
0x19db0009ee66  6c26  41ffd2         call r10
0x19db0009ee69  6c29  5f             pop rdi
0x19db0009ee6a  6c2a  5e             pop rsi
0x19db0009ee6b  6c2b  5a             pop rdx
0x19db0009ee6c  6c2c  59             pop rcx
0x19db0009ee6d  6c2d  58             pop rax
0x19db0009ee6e  6c2e  e9dbaeffff     jmp 0x19db00099d4e  <+0x1b0e>
0x19db0009ee73  6c33  41f6c601       testb r14,0x1
0x19db0009ee77  6c37  0f8423aeffff   jz 0x19db00099ca0  <+0x1a60>
0x19db0009ee7d  6c3d  458bf6         movl r14,r14
0x19db0009ee80  6c40  4d03f5         REX.W addq r14,r13
0x19db0009ee83  6c43  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009ee8a  6c4a  4d23ce         REX.W andq r9,r14
0x19db0009ee8d  6c4d  41f6410802     testb [r9+0x8],0x2
0x19db0009ee92  6c52  0f8408aeffff   jz 0x19db00099ca0  <+0x1a60>
0x19db0009ee98  6c58  4d8d7c2427     REX.W leaq r15,[r12+0x27]
0x19db0009ee9d  6c5d  50             push rax
0x19db0009ee9e  6c5e  51             push rcx
0x19db0009ee9f  6c5f  52             push rdx
0x19db0009eea0  6c60  56             push rsi
0x19db0009eea1  6c61  57             push rdi
0x19db0009eea2  6c62  498bf7         REX.W movq rsi,r15
0x19db0009eea5  6c65  4c89e7         REX.W movq rdi,r12
0x19db0009eea8  6c68  33d2           xorl rdx,rdx
0x19db0009eeaa  6c6a  488b0d8f97ffff REX.W movq rcx,[rip+0xffff978f]
0x19db0009eeb1  6c71  4c8b158dfaffff REX.W movq r10,[rip+0xfffffa8d]
0x19db0009eeb8  6c78  41ffd2         call r10
0x19db0009eebb  6c7b  5f             pop rdi
0x19db0009eebc  6c7c  5e             pop rsi
0x19db0009eebd  6c7d  5a             pop rdx
0x19db0009eebe  6c7e  59             pop rcx
0x19db0009eebf  6c7f  58             pop rax
0x19db0009eec0  6c80  e9dbadffff     jmp 0x19db00099ca0  <+0x1a60>
0x19db0009eec5  6c85  41f6c101       testb r9,0x1
0x19db0009eec9  6c89  0f84b5acffff   jz 0x19db00099b84  <+0x1944>
0x19db0009eecf  6c8f  458bc9         movl r9,r9
0x19db0009eed2  6c92  4d03cd         REX.W addq r9,r13
0x19db0009eed5  6c95  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009eedc  6c9c  4d23d9         REX.W andq r11,r9
0x19db0009eedf  6c9f  41f6430802     testb [r11+0x8],0x2
0x19db0009eee4  6ca4  0f849aacffff   jz 0x19db00099b84  <+0x1944>
0x19db0009eeea  6caa  4d8d742423     REX.W leaq r14,[r12+0x23]
0x19db0009eeef  6caf  50             push rax
0x19db0009eef0  6cb0  51             push rcx
0x19db0009eef1  6cb1  52             push rdx
0x19db0009eef2  6cb2  56             push rsi
0x19db0009eef3  6cb3  57             push rdi
0x19db0009eef4  6cb4  498bf6         REX.W movq rsi,r14
0x19db0009eef7  6cb7  4c89e7         REX.W movq rdi,r12
0x19db0009eefa  6cba  33d2           xorl rdx,rdx
0x19db0009eefc  6cbc  488b0d3d97ffff REX.W movq rcx,[rip+0xffff973d]
0x19db0009ef03  6cc3  4c8b153bfaffff REX.W movq r10,[rip+0xfffffa3b]
0x19db0009ef0a  6cca  41ffd2         call r10
0x19db0009ef0d  6ccd  5f             pop rdi
0x19db0009ef0e  6cce  5e             pop rsi
0x19db0009ef0f  6ccf  5a             pop rdx
0x19db0009ef10  6cd0  59             pop rcx
0x19db0009ef11  6cd1  58             pop rax
0x19db0009ef12  6cd2  e96dacffff     jmp 0x19db00099b84  <+0x1944>
0x19db0009ef17  6cd7  41f6c601       testb r14,0x1
0x19db0009ef1b  6cdb  0f84b5abffff   jz 0x19db00099ad6  <+0x1896>
0x19db0009ef21  6ce1  458bf6         movl r14,r14
0x19db0009ef24  6ce4  4d03f5         REX.W addq r14,r13
0x19db0009ef27  6ce7  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009ef2e  6cee  4d23ce         REX.W andq r9,r14
0x19db0009ef31  6cf1  41f6410802     testb [r9+0x8],0x2
0x19db0009ef36  6cf6  0f849aabffff   jz 0x19db00099ad6  <+0x1896>
0x19db0009ef3c  6cfc  4d8d7c2423     REX.W leaq r15,[r12+0x23]
0x19db0009ef41  6d01  50             push rax
0x19db0009ef42  6d02  51             push rcx
0x19db0009ef43  6d03  52             push rdx
0x19db0009ef44  6d04  56             push rsi
0x19db0009ef45  6d05  57             push rdi
0x19db0009ef46  6d06  498bf7         REX.W movq rsi,r15
0x19db0009ef49  6d09  4c89e7         REX.W movq rdi,r12
0x19db0009ef4c  6d0c  33d2           xorl rdx,rdx
0x19db0009ef4e  6d0e  488b0deb96ffff REX.W movq rcx,[rip+0xffff96eb]
0x19db0009ef55  6d15  4c8b15e9f9ffff REX.W movq r10,[rip+0xfffff9e9]
0x19db0009ef5c  6d1c  41ffd2         call r10
0x19db0009ef5f  6d1f  5f             pop rdi
0x19db0009ef60  6d20  5e             pop rsi
0x19db0009ef61  6d21  5a             pop rdx
0x19db0009ef62  6d22  59             pop rcx
0x19db0009ef63  6d23  58             pop rax
0x19db0009ef64  6d24  e96dabffff     jmp 0x19db00099ad6  <+0x1896>
0x19db0009ef69  6d29  41f6c101       testb r9,0x1
0x19db0009ef6d  6d2d  0f8444aaffff   jz 0x19db000999b7  <+0x1777>
0x19db0009ef73  6d33  458bc9         movl r9,r9
0x19db0009ef76  6d36  4d03cd         REX.W addq r9,r13
0x19db0009ef79  6d39  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009ef80  6d40  4d23d9         REX.W andq r11,r9
0x19db0009ef83  6d43  41f6430802     testb [r11+0x8],0x2
0x19db0009ef88  6d48  0f8429aaffff   jz 0x19db000999b7  <+0x1777>
0x19db0009ef8e  6d4e  4d8d74241f     REX.W leaq r14,[r12+0x1f]
0x19db0009ef93  6d53  50             push rax
0x19db0009ef94  6d54  51             push rcx
0x19db0009ef95  6d55  52             push rdx
0x19db0009ef96  6d56  56             push rsi
0x19db0009ef97  6d57  57             push rdi
0x19db0009ef98  6d58  498bf6         REX.W movq rsi,r14
0x19db0009ef9b  6d5b  4c89e7         REX.W movq rdi,r12
0x19db0009ef9e  6d5e  33d2           xorl rdx,rdx
0x19db0009efa0  6d60  488b0d9996ffff REX.W movq rcx,[rip+0xffff9699]
0x19db0009efa7  6d67  4c8b1597f9ffff REX.W movq r10,[rip+0xfffff997]
0x19db0009efae  6d6e  41ffd2         call r10
0x19db0009efb1  6d71  5f             pop rdi
0x19db0009efb2  6d72  5e             pop rsi
0x19db0009efb3  6d73  5a             pop rdx
0x19db0009efb4  6d74  59             pop rcx
0x19db0009efb5  6d75  58             pop rax
0x19db0009efb6  6d76  e9fca9ffff     jmp 0x19db000999b7  <+0x1777>
0x19db0009efbb  6d7b  41f6c601       testb r14,0x1
0x19db0009efbf  6d7f  0f8444a9ffff   jz 0x19db00099909  <+0x16c9>
0x19db0009efc5  6d85  458bf6         movl r14,r14
0x19db0009efc8  6d88  4d03f5         REX.W addq r14,r13
0x19db0009efcb  6d8b  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009efd2  6d92  4d23ce         REX.W andq r9,r14
0x19db0009efd5  6d95  41f6410802     testb [r9+0x8],0x2
0x19db0009efda  6d9a  0f8429a9ffff   jz 0x19db00099909  <+0x16c9>
0x19db0009efe0  6da0  4d8d7c241f     REX.W leaq r15,[r12+0x1f]
0x19db0009efe5  6da5  50             push rax
0x19db0009efe6  6da6  51             push rcx
0x19db0009efe7  6da7  52             push rdx
0x19db0009efe8  6da8  56             push rsi
0x19db0009efe9  6da9  57             push rdi
0x19db0009efea  6daa  498bf7         REX.W movq rsi,r15
0x19db0009efed  6dad  4c89e7         REX.W movq rdi,r12
0x19db0009eff0  6db0  33d2           xorl rdx,rdx
0x19db0009eff2  6db2  488b0d4796ffff REX.W movq rcx,[rip+0xffff9647]
0x19db0009eff9  6db9  4c8b1545f9ffff REX.W movq r10,[rip+0xfffff945]
0x19db0009f000  6dc0  41ffd2         call r10
0x19db0009f003  6dc3  5f             pop rdi
0x19db0009f004  6dc4  5e             pop rsi
0x19db0009f005  6dc5  5a             pop rdx
0x19db0009f006  6dc6  59             pop rcx
0x19db0009f007  6dc7  58             pop rax
0x19db0009f008  6dc8  e9fca8ffff     jmp 0x19db00099909  <+0x16c9>
0x19db0009f00d  6dcd  41f6c101       testb r9,0x1
0x19db0009f011  6dd1  0f84d3a7ffff   jz 0x19db000997ea  <+0x15aa>
0x19db0009f017  6dd7  458bc9         movl r9,r9
0x19db0009f01a  6dda  4d03cd         REX.W addq r9,r13
0x19db0009f01d  6ddd  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009f024  6de4  4d23d9         REX.W andq r11,r9
0x19db0009f027  6de7  41f6430802     testb [r11+0x8],0x2
0x19db0009f02c  6dec  0f84b8a7ffff   jz 0x19db000997ea  <+0x15aa>
0x19db0009f032  6df2  4d8d74241b     REX.W leaq r14,[r12+0x1b]
0x19db0009f037  6df7  50             push rax
0x19db0009f038  6df8  51             push rcx
0x19db0009f039  6df9  52             push rdx
0x19db0009f03a  6dfa  56             push rsi
0x19db0009f03b  6dfb  57             push rdi
0x19db0009f03c  6dfc  498bf6         REX.W movq rsi,r14
0x19db0009f03f  6dff  4c89e7         REX.W movq rdi,r12
0x19db0009f042  6e02  33d2           xorl rdx,rdx
0x19db0009f044  6e04  488b0df595ffff REX.W movq rcx,[rip+0xffff95f5]
0x19db0009f04b  6e0b  4c8b15f3f8ffff REX.W movq r10,[rip+0xfffff8f3]
0x19db0009f052  6e12  41ffd2         call r10
0x19db0009f055  6e15  5f             pop rdi
0x19db0009f056  6e16  5e             pop rsi
0x19db0009f057  6e17  5a             pop rdx
0x19db0009f058  6e18  59             pop rcx
0x19db0009f059  6e19  58             pop rax
0x19db0009f05a  6e1a  e98ba7ffff     jmp 0x19db000997ea  <+0x15aa>
0x19db0009f05f  6e1f  41f6c601       testb r14,0x1
0x19db0009f063  6e23  0f84d3a6ffff   jz 0x19db0009973c  <+0x14fc>
0x19db0009f069  6e29  458bf6         movl r14,r14
0x19db0009f06c  6e2c  4d03f5         REX.W addq r14,r13
0x19db0009f06f  6e2f  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009f076  6e36  4d23ce         REX.W andq r9,r14
0x19db0009f079  6e39  41f6410802     testb [r9+0x8],0x2
0x19db0009f07e  6e3e  0f84b8a6ffff   jz 0x19db0009973c  <+0x14fc>
0x19db0009f084  6e44  4d8d7c241b     REX.W leaq r15,[r12+0x1b]
0x19db0009f089  6e49  50             push rax
0x19db0009f08a  6e4a  51             push rcx
0x19db0009f08b  6e4b  52             push rdx
0x19db0009f08c  6e4c  56             push rsi
0x19db0009f08d  6e4d  57             push rdi
0x19db0009f08e  6e4e  498bf7         REX.W movq rsi,r15
0x19db0009f091  6e51  4c89e7         REX.W movq rdi,r12
0x19db0009f094  6e54  33d2           xorl rdx,rdx
0x19db0009f096  6e56  488b0da395ffff REX.W movq rcx,[rip+0xffff95a3]
0x19db0009f09d  6e5d  4c8b15a1f8ffff REX.W movq r10,[rip+0xfffff8a1]
0x19db0009f0a4  6e64  41ffd2         call r10
0x19db0009f0a7  6e67  5f             pop rdi
0x19db0009f0a8  6e68  5e             pop rsi
0x19db0009f0a9  6e69  5a             pop rdx
0x19db0009f0aa  6e6a  59             pop rcx
0x19db0009f0ab  6e6b  58             pop rax
0x19db0009f0ac  6e6c  e98ba6ffff     jmp 0x19db0009973c  <+0x14fc>
0x19db0009f0b1  6e71  41f6c101       testb r9,0x1
0x19db0009f0b5  6e75  0f8462a5ffff   jz 0x19db0009961d  <+0x13dd>
0x19db0009f0bb  6e7b  458bc9         movl r9,r9
0x19db0009f0be  6e7e  4d03cd         REX.W addq r9,r13
0x19db0009f0c1  6e81  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009f0c8  6e88  4d23d9         REX.W andq r11,r9
0x19db0009f0cb  6e8b  41f6430802     testb [r11+0x8],0x2
0x19db0009f0d0  6e90  0f8447a5ffff   jz 0x19db0009961d  <+0x13dd>
0x19db0009f0d6  6e96  4d8d742417     REX.W leaq r14,[r12+0x17]
0x19db0009f0db  6e9b  50             push rax
0x19db0009f0dc  6e9c  51             push rcx
0x19db0009f0dd  6e9d  52             push rdx
0x19db0009f0de  6e9e  56             push rsi
0x19db0009f0df  6e9f  57             push rdi
0x19db0009f0e0  6ea0  498bf6         REX.W movq rsi,r14
0x19db0009f0e3  6ea3  4c89e7         REX.W movq rdi,r12
0x19db0009f0e6  6ea6  33d2           xorl rdx,rdx
0x19db0009f0e8  6ea8  488b0d5195ffff REX.W movq rcx,[rip+0xffff9551]
0x19db0009f0ef  6eaf  4c8b154ff8ffff REX.W movq r10,[rip+0xfffff84f]
0x19db0009f0f6  6eb6  41ffd2         call r10
0x19db0009f0f9  6eb9  5f             pop rdi
0x19db0009f0fa  6eba  5e             pop rsi
0x19db0009f0fb  6ebb  5a             pop rdx
0x19db0009f0fc  6ebc  59             pop rcx
0x19db0009f0fd  6ebd  58             pop rax
0x19db0009f0fe  6ebe  e91aa5ffff     jmp 0x19db0009961d  <+0x13dd>
0x19db0009f103  6ec3  41f6c601       testb r14,0x1
0x19db0009f107  6ec7  0f8462a4ffff   jz 0x19db0009956f  <+0x132f>
0x19db0009f10d  6ecd  458bf6         movl r14,r14
0x19db0009f110  6ed0  4d03f5         REX.W addq r14,r13
0x19db0009f113  6ed3  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009f11a  6eda  4d23ce         REX.W andq r9,r14
0x19db0009f11d  6edd  41f6410802     testb [r9+0x8],0x2
0x19db0009f122  6ee2  0f8447a4ffff   jz 0x19db0009956f  <+0x132f>
0x19db0009f128  6ee8  4d8d7c2417     REX.W leaq r15,[r12+0x17]
0x19db0009f12d  6eed  50             push rax
0x19db0009f12e  6eee  51             push rcx
0x19db0009f12f  6eef  52             push rdx
0x19db0009f130  6ef0  56             push rsi
0x19db0009f131  6ef1  57             push rdi
0x19db0009f132  6ef2  498bf7         REX.W movq rsi,r15
0x19db0009f135  6ef5  4c89e7         REX.W movq rdi,r12
0x19db0009f138  6ef8  33d2           xorl rdx,rdx
0x19db0009f13a  6efa  488b0dff94ffff REX.W movq rcx,[rip+0xffff94ff]
0x19db0009f141  6f01  4c8b15fdf7ffff REX.W movq r10,[rip+0xfffff7fd]
0x19db0009f148  6f08  41ffd2         call r10
0x19db0009f14b  6f0b  5f             pop rdi
0x19db0009f14c  6f0c  5e             pop rsi
0x19db0009f14d  6f0d  5a             pop rdx
0x19db0009f14e  6f0e  59             pop rcx
0x19db0009f14f  6f0f  58             pop rax
0x19db0009f150  6f10  e91aa4ffff     jmp 0x19db0009956f  <+0x132f>
0x19db0009f155  6f15  41f6c101       testb r9,0x1
0x19db0009f159  6f19  0f84f1a2ffff   jz 0x19db00099450  <+0x1210>
0x19db0009f15f  6f1f  458bc9         movl r9,r9
0x19db0009f162  6f22  4d03cd         REX.W addq r9,r13
0x19db0009f165  6f25  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009f16c  6f2c  4d23d9         REX.W andq r11,r9
0x19db0009f16f  6f2f  41f6430802     testb [r11+0x8],0x2
0x19db0009f174  6f34  0f84d6a2ffff   jz 0x19db00099450  <+0x1210>
0x19db0009f17a  6f3a  4d8d742413     REX.W leaq r14,[r12+0x13]
0x19db0009f17f  6f3f  50             push rax
0x19db0009f180  6f40  51             push rcx
0x19db0009f181  6f41  52             push rdx
0x19db0009f182  6f42  56             push rsi
0x19db0009f183  6f43  57             push rdi
0x19db0009f184  6f44  498bf6         REX.W movq rsi,r14
0x19db0009f187  6f47  4c89e7         REX.W movq rdi,r12
0x19db0009f18a  6f4a  33d2           xorl rdx,rdx
0x19db0009f18c  6f4c  488b0dad94ffff REX.W movq rcx,[rip+0xffff94ad]
0x19db0009f193  6f53  4c8b15abf7ffff REX.W movq r10,[rip+0xfffff7ab]
0x19db0009f19a  6f5a  41ffd2         call r10
0x19db0009f19d  6f5d  5f             pop rdi
0x19db0009f19e  6f5e  5e             pop rsi
0x19db0009f19f  6f5f  5a             pop rdx
0x19db0009f1a0  6f60  59             pop rcx
0x19db0009f1a1  6f61  58             pop rax
0x19db0009f1a2  6f62  e9a9a2ffff     jmp 0x19db00099450  <+0x1210>
0x19db0009f1a7  6f67  41f6c601       testb r14,0x1
0x19db0009f1ab  6f6b  0f84f1a1ffff   jz 0x19db000993a2  <+0x1162>
0x19db0009f1b1  6f71  458bf6         movl r14,r14
0x19db0009f1b4  6f74  4d03f5         REX.W addq r14,r13
0x19db0009f1b7  6f77  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009f1be  6f7e  4d23ce         REX.W andq r9,r14
0x19db0009f1c1  6f81  41f6410802     testb [r9+0x8],0x2
0x19db0009f1c6  6f86  0f84d6a1ffff   jz 0x19db000993a2  <+0x1162>
0x19db0009f1cc  6f8c  4d8d7c2413     REX.W leaq r15,[r12+0x13]
0x19db0009f1d1  6f91  50             push rax
0x19db0009f1d2  6f92  51             push rcx
0x19db0009f1d3  6f93  52             push rdx
0x19db0009f1d4  6f94  56             push rsi
0x19db0009f1d5  6f95  57             push rdi
0x19db0009f1d6  6f96  498bf7         REX.W movq rsi,r15
0x19db0009f1d9  6f99  4c89e7         REX.W movq rdi,r12
0x19db0009f1dc  6f9c  33d2           xorl rdx,rdx
0x19db0009f1de  6f9e  488b0d5b94ffff REX.W movq rcx,[rip+0xffff945b]
0x19db0009f1e5  6fa5  4c8b1559f7ffff REX.W movq r10,[rip+0xfffff759]
0x19db0009f1ec  6fac  41ffd2         call r10
0x19db0009f1ef  6faf  5f             pop rdi
0x19db0009f1f0  6fb0  5e             pop rsi
0x19db0009f1f1  6fb1  5a             pop rdx
0x19db0009f1f2  6fb2  59             pop rcx
0x19db0009f1f3  6fb3  58             pop rax
0x19db0009f1f4  6fb4  e9a9a1ffff     jmp 0x19db000993a2  <+0x1162>
0x19db0009f1f9  6fb9  41f6c101       testb r9,0x1
0x19db0009f1fd  6fbd  0f8480a0ffff   jz 0x19db00099283  <+0x1043>
0x19db0009f203  6fc3  458bc9         movl r9,r9
0x19db0009f206  6fc6  4d03cd         REX.W addq r9,r13
0x19db0009f209  6fc9  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009f210  6fd0  4d23d9         REX.W andq r11,r9
0x19db0009f213  6fd3  41f6430802     testb [r11+0x8],0x2
0x19db0009f218  6fd8  0f8465a0ffff   jz 0x19db00099283  <+0x1043>
0x19db0009f21e  6fde  4d8d74240f     REX.W leaq r14,[r12+0xf]
0x19db0009f223  6fe3  50             push rax
0x19db0009f224  6fe4  51             push rcx
0x19db0009f225  6fe5  52             push rdx
0x19db0009f226  6fe6  56             push rsi
0x19db0009f227  6fe7  57             push rdi
0x19db0009f228  6fe8  498bf6         REX.W movq rsi,r14
0x19db0009f22b  6feb  4c89e7         REX.W movq rdi,r12
0x19db0009f22e  6fee  33d2           xorl rdx,rdx
0x19db0009f230  6ff0  488b0d0994ffff REX.W movq rcx,[rip+0xffff9409]
0x19db0009f237  6ff7  4c8b1507f7ffff REX.W movq r10,[rip+0xfffff707]
0x19db0009f23e  6ffe  41ffd2         call r10
0x19db0009f241  7001  5f             pop rdi
0x19db0009f242  7002  5e             pop rsi
0x19db0009f243  7003  5a             pop rdx
0x19db0009f244  7004  59             pop rcx
0x19db0009f245  7005  58             pop rax
0x19db0009f246  7006  e938a0ffff     jmp 0x19db00099283  <+0x1043>
0x19db0009f24b  700b  41f6c601       testb r14,0x1
0x19db0009f24f  700f  0f84809fffff   jz 0x19db000991d5  <+0xf95>
0x19db0009f255  7015  458bf6         movl r14,r14
0x19db0009f258  7018  4d03f5         REX.W addq r14,r13
0x19db0009f25b  701b  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009f262  7022  4d23ce         REX.W andq r9,r14
0x19db0009f265  7025  41f6410802     testb [r9+0x8],0x2
0x19db0009f26a  702a  0f84659fffff   jz 0x19db000991d5  <+0xf95>
0x19db0009f270  7030  4d8d7c240f     REX.W leaq r15,[r12+0xf]
0x19db0009f275  7035  50             push rax
0x19db0009f276  7036  51             push rcx
0x19db0009f277  7037  52             push rdx
0x19db0009f278  7038  56             push rsi
0x19db0009f279  7039  57             push rdi
0x19db0009f27a  703a  498bf7         REX.W movq rsi,r15
0x19db0009f27d  703d  4c89e7         REX.W movq rdi,r12
0x19db0009f280  7040  33d2           xorl rdx,rdx
0x19db0009f282  7042  488b0db793ffff REX.W movq rcx,[rip+0xffff93b7]
0x19db0009f289  7049  4c8b15b5f6ffff REX.W movq r10,[rip+0xfffff6b5]
0x19db0009f290  7050  41ffd2         call r10
0x19db0009f293  7053  5f             pop rdi
0x19db0009f294  7054  5e             pop rsi
0x19db0009f295  7055  5a             pop rdx
0x19db0009f296  7056  59             pop rcx
0x19db0009f297  7057  58             pop rax
0x19db0009f298  7058  e9389fffff     jmp 0x19db000991d5  <+0xf95>
0x19db0009f29d  705d  41f6c101       testb r9,0x1
0x19db0009f2a1  7061  0f840f9effff   jz 0x19db000990b6  <+0xe76>
0x19db0009f2a7  7067  458bc9         movl r9,r9
0x19db0009f2aa  706a  4d03cd         REX.W addq r9,r13
0x19db0009f2ad  706d  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009f2b4  7074  4d23d9         REX.W andq r11,r9
0x19db0009f2b7  7077  41f6430802     testb [r11+0x8],0x2
0x19db0009f2bc  707c  0f84f49dffff   jz 0x19db000990b6  <+0xe76>
0x19db0009f2c2  7082  4d8d74240b     REX.W leaq r14,[r12+0xb]
0x19db0009f2c7  7087  50             push rax
0x19db0009f2c8  7088  51             push rcx
0x19db0009f2c9  7089  52             push rdx
0x19db0009f2ca  708a  56             push rsi
0x19db0009f2cb  708b  57             push rdi
0x19db0009f2cc  708c  498bf6         REX.W movq rsi,r14
0x19db0009f2cf  708f  4c89e7         REX.W movq rdi,r12
0x19db0009f2d2  7092  33d2           xorl rdx,rdx
0x19db0009f2d4  7094  488b0d6593ffff REX.W movq rcx,[rip+0xffff9365]
0x19db0009f2db  709b  4c8b1563f6ffff REX.W movq r10,[rip+0xfffff663]
0x19db0009f2e2  70a2  41ffd2         call r10
0x19db0009f2e5  70a5  5f             pop rdi
0x19db0009f2e6  70a6  5e             pop rsi
0x19db0009f2e7  70a7  5a             pop rdx
0x19db0009f2e8  70a8  59             pop rcx
0x19db0009f2e9  70a9  58             pop rax
0x19db0009f2ea  70aa  e9c79dffff     jmp 0x19db000990b6  <+0xe76>
0x19db0009f2ef  70af  41f6c301       testb r11,0x1
0x19db0009f2f3  70b3  0f840f9dffff   jz 0x19db00099008  <+0xdc8>
0x19db0009f2f9  70b9  458bdb         movl r11,r11
0x19db0009f2fc  70bc  4d03dd         REX.W addq r11,r13
0x19db0009f2ff  70bf  49c7c10000fcff REX.W movq r9,0xfffc0000
0x19db0009f306  70c6  4d23cb         REX.W andq r9,r11
0x19db0009f309  70c9  41f6410802     testb [r9+0x8],0x2
0x19db0009f30e  70ce  0f84f49cffff   jz 0x19db00099008  <+0xdc8>
0x19db0009f314  70d4  4d8d7e0b       REX.W leaq r15,[r14+0xb]
0x19db0009f318  70d8  50             push rax
0x19db0009f319  70d9  51             push rcx
0x19db0009f31a  70da  52             push rdx
0x19db0009f31b  70db  56             push rsi
0x19db0009f31c  70dc  57             push rdi
0x19db0009f31d  70dd  498bf7         REX.W movq rsi,r15
0x19db0009f320  70e0  498bfe         REX.W movq rdi,r14
0x19db0009f323  70e3  33d2           xorl rdx,rdx
0x19db0009f325  70e5  488b0d1493ffff REX.W movq rcx,[rip+0xffff9314]
0x19db0009f32c  70ec  4c8b1512f6ffff REX.W movq r10,[rip+0xfffff612]
0x19db0009f333  70f3  41ffd2         call r10
0x19db0009f336  70f6  5f             pop rdi
0x19db0009f337  70f7  5e             pop rsi
0x19db0009f338  70f8  5a             pop rdx
0x19db0009f339  70f9  59             pop rcx
0x19db0009f33a  70fa  58             pop rax
0x19db0009f33b  70fb  e9c89cffff     jmp 0x19db00099008  <+0xdc8>
0x19db0009f340  7100  41f6c001       testb r8,0x1
0x19db0009f344  7104  0f849d9bffff   jz 0x19db00098ee7  <+0xca7>
0x19db0009f34a  710a  458bc0         movl r8,r8
0x19db0009f34d  710d  4d03c5         REX.W addq r8,r13
0x19db0009f350  7110  49c7c60000fcff REX.W movq r14,0xfffc0000
0x19db0009f357  7117  4d23f0         REX.W andq r14,r8
0x19db0009f35a  711a  41f6460802     testb [r14+0x8],0x2
0x19db0009f35f  711f  0f84829bffff   jz 0x19db00098ee7  <+0xca7>
0x19db0009f365  7125  4d8d7c2407     REX.W leaq r15,[r12+0x7]
0x19db0009f36a  712a  50             push rax
0x19db0009f36b  712b  51             push rcx
0x19db0009f36c  712c  52             push rdx
0x19db0009f36d  712d  56             push rsi
0x19db0009f36e  712e  57             push rdi
0x19db0009f36f  712f  498bf7         REX.W movq rsi,r15
0x19db0009f372  7132  4c89e7         REX.W movq rdi,r12
0x19db0009f375  7135  33d2           xorl rdx,rdx
0x19db0009f377  7137  488b0dc292ffff REX.W movq rcx,[rip+0xffff92c2]
0x19db0009f37e  713e  4c8b15c0f5ffff REX.W movq r10,[rip+0xfffff5c0]
0x19db0009f385  7145  41ffd2         call r10
0x19db0009f388  7148  5f             pop rdi
0x19db0009f389  7149  5e             pop rsi
0x19db0009f38a  714a  5a             pop rdx
0x19db0009f38b  714b  59             pop rcx
0x19db0009f38c  714c  58             pop rax
0x19db0009f38d  714d  e9559bffff     jmp 0x19db00098ee7  <+0xca7>
0x19db0009f392  7152  41f6c601       testb r14,0x1
0x19db0009f396  7156  0f849d9affff   jz 0x19db00098e39  <+0xbf9>
0x19db0009f39c  715c  458bf6         movl r14,r14
0x19db0009f39f  715f  4d03f5         REX.W addq r14,r13
0x19db0009f3a2  7162  49c7c00000fcff REX.W movq r8,0xfffc0000
0x19db0009f3a9  7169  4d23c6         REX.W andq r8,r14
0x19db0009f3ac  716c  41f6400802     testb [r8+0x8],0x2
0x19db0009f3b1  7171  0f84829affff   jz 0x19db00098e39  <+0xbf9>
0x19db0009f3b7  7177  4d8d7c2407     REX.W leaq r15,[r12+0x7]
0x19db0009f3bc  717c  50             push rax
0x19db0009f3bd  717d  51             push rcx
0x19db0009f3be  717e  52             push rdx
0x19db0009f3bf  717f  56             push rsi
0x19db0009f3c0  7180  57             push rdi
0x19db0009f3c1  7181  498bf7         REX.W movq rsi,r15
0x19db0009f3c4  7184  4c89e7         REX.W movq rdi,r12
0x19db0009f3c7  7187  33d2           xorl rdx,rdx
0x19db0009f3c9  7189  488b0d7092ffff REX.W movq rcx,[rip+0xffff9270]
0x19db0009f3d0  7190  4c8b156ef5ffff REX.W movq r10,[rip+0xfffff56e]
0x19db0009f3d7  7197  41ffd2         call r10
0x19db0009f3da  719a  5f             pop rdi
0x19db0009f3db  719b  5e             pop rsi
0x19db0009f3dc  719c  5a             pop rdx
0x19db0009f3dd  719d  59             pop rcx
0x19db0009f3de  719e  58             pop rax
0x19db0009f3df  719f  e9559affff     jmp 0x19db00098e39  <+0xbf9>
0x19db0009f3e4  71a4  8bd2           movl rdx,rdx
0x19db0009f3e6  71a6  4903d5         REX.W addq rdx,r13
0x19db0009f3e9  71a9  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0009f3f0  71b0  4823da         REX.W andq rbx,rdx
0x19db0009f3f3  71b3  f6430802       testb [rbx+0x8],0x2
0x19db0009f3f7  71b7  0f84c698ffff   jz 0x19db00098cc3  <+0xa83>
0x19db0009f3fd  71bd  498d4c241b     REX.W leaq rcx,[r12+0x1b]
0x19db0009f402  71c2  50             push rax
0x19db0009f403  71c3  51             push rcx
0x19db0009f404  71c4  52             push rdx
0x19db0009f405  71c5  56             push rsi
0x19db0009f406  71c6  57             push rdi
0x19db0009f407  71c7  488bf1         REX.W movq rsi,rcx
0x19db0009f40a  71ca  4c89e7         REX.W movq rdi,r12
0x19db0009f40d  71cd  33d2           xorl rdx,rdx
0x19db0009f40f  71cf  488b0d2a92ffff REX.W movq rcx,[rip+0xffff922a]
0x19db0009f416  71d6  4c8b1528f5ffff REX.W movq r10,[rip+0xfffff528]
0x19db0009f41d  71dd  41ffd2         call r10
0x19db0009f420  71e0  5f             pop rdi
0x19db0009f421  71e1  5e             pop rsi
0x19db0009f422  71e2  5a             pop rdx
0x19db0009f423  71e3  59             pop rcx
0x19db0009f424  71e4  58             pop rax
0x19db0009f425  71e5  e99998ffff     jmp 0x19db00098cc3  <+0xa83>
0x19db0009f42a  71ea  8bd2           movl rdx,rdx
0x19db0009f42c  71ec  4903d5         REX.W addq rdx,r13
0x19db0009f42f  71ef  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0009f436  71f6  4823da         REX.W andq rbx,rdx
0x19db0009f439  71f9  f6430802       testb [rbx+0x8],0x2
0x19db0009f43d  71fd  0f849797ffff   jz 0x19db00098bda  <+0x99a>
0x19db0009f443  7203  498d4c2417     REX.W leaq rcx,[r12+0x17]
0x19db0009f448  7208  50             push rax
0x19db0009f449  7209  51             push rcx
0x19db0009f44a  720a  52             push rdx
0x19db0009f44b  720b  56             push rsi
0x19db0009f44c  720c  57             push rdi
0x19db0009f44d  720d  488bf1         REX.W movq rsi,rcx
0x19db0009f450  7210  4c89e7         REX.W movq rdi,r12
0x19db0009f453  7213  33d2           xorl rdx,rdx
0x19db0009f455  7215  488b0de491ffff REX.W movq rcx,[rip+0xffff91e4]
0x19db0009f45c  721c  4c8b15e2f4ffff REX.W movq r10,[rip+0xfffff4e2]
0x19db0009f463  7223  41ffd2         call r10
0x19db0009f466  7226  5f             pop rdi
0x19db0009f467  7227  5e             pop rsi
0x19db0009f468  7228  5a             pop rdx
0x19db0009f469  7229  59             pop rcx
0x19db0009f46a  722a  58             pop rax
0x19db0009f46b  722b  e96a97ffff     jmp 0x19db00098bda  <+0x99a>
0x19db0009f470  7230  458bc0         movl r8,r8
0x19db0009f473  7233  4d03c5         REX.W addq r8,r13
0x19db0009f476  7236  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0009f47d  723d  4923d8         REX.W andq rbx,r8
0x19db0009f480  7240  f6430802       testb [rbx+0x8],0x2
0x19db0009f484  7244  0f846196ffff   jz 0x19db00098aeb  <+0x8ab>
0x19db0009f48a  724a  488d5613       REX.W leaq rdx,[rsi+0x13]
0x19db0009f48e  724e  50             push rax
0x19db0009f48f  724f  51             push rcx
0x19db0009f490  7250  52             push rdx
0x19db0009f491  7251  56             push rsi
0x19db0009f492  7252  57             push rdi
0x19db0009f493  7253  488bfe         REX.W movq rdi,rsi
0x19db0009f496  7256  488bf2         REX.W movq rsi,rdx
0x19db0009f499  7259  33d2           xorl rdx,rdx
0x19db0009f49b  725b  488b0d9e91ffff REX.W movq rcx,[rip+0xffff919e]
0x19db0009f4a2  7262  4c8b159cf4ffff REX.W movq r10,[rip+0xfffff49c]
0x19db0009f4a9  7269  41ffd2         call r10
0x19db0009f4ac  726c  5f             pop rdi
0x19db0009f4ad  726d  5e             pop rsi
0x19db0009f4ae  726e  5a             pop rdx
0x19db0009f4af  726f  59             pop rcx
0x19db0009f4b0  7270  58             pop rax
0x19db0009f4b1  7271  e93596ffff     jmp 0x19db00098aeb  <+0x8ab>
0x19db0009f4b6  7276  8bff           movl rdi,rdi
0x19db0009f4b8  7278  4903fd         REX.W addq rdi,r13
0x19db0009f4bb  727b  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009f4c2  7282  4c23e7         REX.W andq r12,rdi
0x19db0009f4c5  7285  41f644240802   testb [r12+0x8],0x2
0x19db0009f4cb  728b  0f84ea94ffff   jz 0x19db000989bb  <+0x77b>
0x19db0009f4d1  7291  4d8d7b03       REX.W leaq r15,[r11+0x3]
0x19db0009f4d5  7295  50             push rax
0x19db0009f4d6  7296  51             push rcx
0x19db0009f4d7  7297  52             push rdx
0x19db0009f4d8  7298  56             push rsi
0x19db0009f4d9  7299  57             push rdi
0x19db0009f4da  729a  498bf7         REX.W movq rsi,r15
0x19db0009f4dd  729d  498bfb         REX.W movq rdi,r11
0x19db0009f4e0  72a0  33d2           xorl rdx,rdx
0x19db0009f4e2  72a2  488b0d5791ffff REX.W movq rcx,[rip+0xffff9157]
0x19db0009f4e9  72a9  4c8b1555f4ffff REX.W movq r10,[rip+0xfffff455]
0x19db0009f4f0  72b0  41ffd2         call r10
0x19db0009f4f3  72b3  5f             pop rdi
0x19db0009f4f4  72b4  5e             pop rsi
0x19db0009f4f5  72b5  5a             pop rdx
0x19db0009f4f6  72b6  59             pop rcx
0x19db0009f4f7  72b7  58             pop rax
0x19db0009f4f8  72b8  e9be94ffff     jmp 0x19db000989bb  <+0x77b>
0x19db0009f4fd  72bd  458bc0         movl r8,r8
0x19db0009f500  72c0  4d03c5         REX.W addq r8,r13
0x19db0009f503  72c3  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009f50a  72ca  4d23e0         REX.W andq r12,r8
0x19db0009f50d  72cd  41f644240802   testb [r12+0x8],0x2
0x19db0009f513  72d3  0f848894ffff   jz 0x19db000989a1  <+0x761>
0x19db0009f519  72d9  4d8d7bff       REX.W leaq r15,[r11-0x1]
0x19db0009f51d  72dd  50             push rax
0x19db0009f51e  72de  51             push rcx
0x19db0009f51f  72df  52             push rdx
0x19db0009f520  72e0  56             push rsi
0x19db0009f521  72e1  57             push rdi
0x19db0009f522  72e2  498bf7         REX.W movq rsi,r15
0x19db0009f525  72e5  498bfb         REX.W movq rdi,r11
0x19db0009f528  72e8  488b151191ffff REX.W movq rdx,[rip+0xffff9111]
0x19db0009f52f  72ef  488bca         REX.W movq rcx,rdx
0x19db0009f532  72f2  4c8b150cf4ffff REX.W movq r10,[rip+0xfffff40c]
0x19db0009f539  72f9  41ffd2         call r10
0x19db0009f53c  72fc  5f             pop rdi
0x19db0009f53d  72fd  5e             pop rsi
0x19db0009f53e  72fe  5a             pop rdx
0x19db0009f53f  72ff  59             pop rcx
0x19db0009f540  7300  58             pop rax
0x19db0009f541  7301  e95b94ffff     jmp 0x19db000989a1  <+0x761>
0x19db0009f546  7306  8bc9           movl rcx,rcx
0x19db0009f548  7308  4903cd         REX.W addq rcx,r13
0x19db0009f54b  730b  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0009f552  7312  4823d9         REX.W andq rbx,rcx
0x19db0009f555  7315  f6430802       testb [rbx+0x8],0x2
0x19db0009f559  7319  0f84a792ffff   jz 0x19db00098806  <+0x5c6>
0x19db0009f55f  731f  498d7bff       REX.W leaq rdi,[r11-0x1]
0x19db0009f563  7323  50             push rax
0x19db0009f564  7324  51             push rcx
0x19db0009f565  7325  52             push rdx
0x19db0009f566  7326  56             push rsi
0x19db0009f567  7327  57             push rdi
0x19db0009f568  7328  488bf7         REX.W movq rsi,rdi
0x19db0009f56b  732b  498bfb         REX.W movq rdi,r11
0x19db0009f56e  732e  488b15cb90ffff REX.W movq rdx,[rip+0xffff90cb]
0x19db0009f575  7335  488bca         REX.W movq rcx,rdx
0x19db0009f578  7338  4c8b15c6f3ffff REX.W movq r10,[rip+0xfffff3c6]
0x19db0009f57f  733f  41ffd2         call r10
0x19db0009f582  7342  5f             pop rdi
0x19db0009f583  7343  5e             pop rsi
0x19db0009f584  7344  5a             pop rdx
0x19db0009f585  7345  59             pop rcx
0x19db0009f586  7346  58             pop rax
0x19db0009f587  7347  e97a92ffff     jmp 0x19db00098806  <+0x5c6>
0x19db0009f58c  734c  8bc9           movl rcx,rcx
0x19db0009f58e  734e  4903cd         REX.W addq rcx,r13
0x19db0009f591  7351  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0009f598  7358  4823d9         REX.W andq rbx,rcx
0x19db0009f59b  735b  f6430802       testb [rbx+0x8],0x2
0x19db0009f59f  735f  0f84b191ffff   jz 0x19db00098756  <+0x516>
0x19db0009f5a5  7365  498d7bff       REX.W leaq rdi,[r11-0x1]
0x19db0009f5a9  7369  50             push rax
0x19db0009f5aa  736a  51             push rcx
0x19db0009f5ab  736b  52             push rdx
0x19db0009f5ac  736c  56             push rsi
0x19db0009f5ad  736d  57             push rdi
0x19db0009f5ae  736e  488bf7         REX.W movq rsi,rdi
0x19db0009f5b1  7371  498bfb         REX.W movq rdi,r11
0x19db0009f5b4  7374  488b158590ffff REX.W movq rdx,[rip+0xffff9085]
0x19db0009f5bb  737b  488bca         REX.W movq rcx,rdx
0x19db0009f5be  737e  4c8b1580f3ffff REX.W movq r10,[rip+0xfffff380]
0x19db0009f5c5  7385  41ffd2         call r10
0x19db0009f5c8  7388  5f             pop rdi
0x19db0009f5c9  7389  5e             pop rsi
0x19db0009f5ca  738a  5a             pop rdx
0x19db0009f5cb  738b  59             pop rcx
0x19db0009f5cc  738c  58             pop rax
0x19db0009f5cd  738d  e98491ffff     jmp 0x19db00098756  <+0x516>
0x19db0009f5d2  7392  8bc9           movl rcx,rcx
0x19db0009f5d4  7394  4903cd         REX.W addq rcx,r13
0x19db0009f5d7  7397  49c7c40000fcff REX.W movq r12,0xfffc0000
0x19db0009f5de  739e  4c23e1         REX.W andq r12,rcx
0x19db0009f5e1  73a1  41f644240802   testb [r12+0x8],0x2
0x19db0009f5e7  73a7  0f84c290ffff   jz 0x19db000986af  <+0x46f>
0x19db0009f5ed  73ad  498d5b03       REX.W leaq rbx,[r11+0x3]
0x19db0009f5f1  73b1  50             push rax
0x19db0009f5f2  73b2  51             push rcx
0x19db0009f5f3  73b3  52             push rdx
0x19db0009f5f4  73b4  56             push rsi
0x19db0009f5f5  73b5  57             push rdi
0x19db0009f5f6  73b6  488bf3         REX.W movq rsi,rbx
0x19db0009f5f9  73b9  498bfb         REX.W movq rdi,r11
0x19db0009f5fc  73bc  33d2           xorl rdx,rdx
0x19db0009f5fe  73be  488b0d3b90ffff REX.W movq rcx,[rip+0xffff903b]
0x19db0009f605  73c5  4c8b1539f3ffff REX.W movq r10,[rip+0xfffff339]
0x19db0009f60c  73cc  41ffd2         call r10
0x19db0009f60f  73cf  5f             pop rdi
0x19db0009f610  73d0  5e             pop rsi
0x19db0009f611  73d1  5a             pop rdx
0x19db0009f612  73d2  59             pop rcx
0x19db0009f613  73d3  58             pop rax
0x19db0009f614  73d4  e99690ffff     jmp 0x19db000986af  <+0x46f>
0x19db0009f619  73d9  4589e4         movl r12,r12
0x19db0009f61c  73dc  4d03e5         REX.W addq r12,r13
0x19db0009f61f  73df  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0009f626  73e6  4c21e3         REX.W andq rbx,r12
0x19db0009f629  73e9  f6430802       testb [rbx+0x8],0x2
0x19db0009f62d  73ed  0f846290ffff   jz 0x19db00098695  <+0x455>
0x19db0009f633  73f3  498d7bff       REX.W leaq rdi,[r11-0x1]
0x19db0009f637  73f7  50             push rax
0x19db0009f638  73f8  51             push rcx
0x19db0009f639  73f9  52             push rdx
0x19db0009f63a  73fa  56             push rsi
0x19db0009f63b  73fb  57             push rdi
0x19db0009f63c  73fc  488bf7         REX.W movq rsi,rdi
0x19db0009f63f  73ff  498bfb         REX.W movq rdi,r11
0x19db0009f642  7402  488b15f78fffff REX.W movq rdx,[rip+0xffff8ff7]
0x19db0009f649  7409  488bca         REX.W movq rcx,rdx
0x19db0009f64c  740c  4c8b15f2f2ffff REX.W movq r10,[rip+0xfffff2f2]
0x19db0009f653  7413  41ffd2         call r10
0x19db0009f656  7416  5f             pop rdi
0x19db0009f657  7417  5e             pop rsi
0x19db0009f658  7418  5a             pop rdx
0x19db0009f659  7419  59             pop rcx
0x19db0009f65a  741a  58             pop rax
0x19db0009f65b  741b  e93590ffff     jmp 0x19db00098695  <+0x455>
0x19db0009f660  7420  4589e4         movl r12,r12
0x19db0009f663  7423  4d03e5         REX.W addq r12,r13
0x19db0009f666  7426  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0009f66d  742d  4c21e3         REX.W andq rbx,r12
0x19db0009f670  7430  f6430802       testb [rbx+0x8],0x2
0x19db0009f674  7434  0f84eb8effff   jz 0x19db00098565  <+0x325>
0x19db0009f67a  743a  498d4bff       REX.W leaq rcx,[r11-0x1]
0x19db0009f67e  743e  50             push rax
0x19db0009f67f  743f  51             push rcx
0x19db0009f680  7440  52             push rdx
0x19db0009f681  7441  56             push rsi
0x19db0009f682  7442  57             push rdi
0x19db0009f683  7443  488bf1         REX.W movq rsi,rcx
0x19db0009f686  7446  498bfb         REX.W movq rdi,r11
0x19db0009f689  7449  488b15b08fffff REX.W movq rdx,[rip+0xffff8fb0]
0x19db0009f690  7450  488bca         REX.W movq rcx,rdx
0x19db0009f693  7453  4c8b15abf2ffff REX.W movq r10,[rip+0xfffff2ab]
0x19db0009f69a  745a  41ffd2         call r10
0x19db0009f69d  745d  5f             pop rdi
0x19db0009f69e  745e  5e             pop rsi
0x19db0009f69f  745f  5a             pop rdx
0x19db0009f6a0  7460  59             pop rcx
0x19db0009f6a1  7461  58             pop rax
0x19db0009f6a2  7462  e9be8effff     jmp 0x19db00098565  <+0x325>
0x19db0009f6a7  7467  4589e4         movl r12,r12
0x19db0009f6aa  746a  4d03e5         REX.W addq r12,r13
0x19db0009f6ad  746d  48c7c30000fcff REX.W movq rbx,0xfffc0000
0x19db0009f6b4  7474  4c21e3         REX.W andq rbx,r12
0x19db0009f6b7  7477  f6430802       testb [rbx+0x8],0x2
0x19db0009f6bb  747b  0f84038effff   jz 0x19db000984c4  <+0x284>
0x19db0009f6c1  7481  498d4bff       REX.W leaq rcx,[r11-0x1]
0x19db0009f6c5  7485  50             push rax
0x19db0009f6c6  7486  51             push rcx
0x19db0009f6c7  7487  52             push rdx
0x19db0009f6c8  7488  56             push rsi
0x19db0009f6c9  7489  57             push rdi
0x19db0009f6ca  748a  488bf1         REX.W movq rsi,rcx
0x19db0009f6cd  748d  498bfb         REX.W movq rdi,r11
0x19db0009f6d0  7490  488b15698fffff REX.W movq rdx,[rip+0xffff8f69]
0x19db0009f6d7  7497  488bca         REX.W movq rcx,rdx
0x19db0009f6da  749a  4c8b1564f2ffff REX.W movq r10,[rip+0xfffff264]
0x19db0009f6e1  74a1  41ffd2         call r10
0x19db0009f6e4  74a4  5f             pop rdi
0x19db0009f6e5  74a5  5e             pop rsi
0x19db0009f6e6  74a6  5a             pop rdx
0x19db0009f6e7  74a7  59             pop rcx
0x19db0009f6e8  74a8  58             pop rax
0x19db0009f6e9  74a9  e9d68dffff     jmp 0x19db000984c4  <+0x284>
0x19db0009f6ee  74ae  8bc9           movl rcx,rcx
0x19db0009f6f0  74b0  4903cd         REX.W addq rcx,r13
0x19db0009f6f3  74b3  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009f6fa  74ba  4c23d9         REX.W andq r11,rcx
0x19db0009f6fd  74bd  41f6430802     testb [r11+0x8],0x2
0x19db0009f702  74c2  0f840f8dffff   jz 0x19db00098417  <+0x1d7>
0x19db0009f708  74c8  498d58ff       REX.W leaq rbx,[r8-0x1]
0x19db0009f70c  74cc  50             push rax
0x19db0009f70d  74cd  51             push rcx
0x19db0009f70e  74ce  52             push rdx
0x19db0009f70f  74cf  56             push rsi
0x19db0009f710  74d0  57             push rdi
0x19db0009f711  74d1  488bf3         REX.W movq rsi,rbx
0x19db0009f714  74d4  498bf8         REX.W movq rdi,r8
0x19db0009f717  74d7  488b15228fffff REX.W movq rdx,[rip+0xffff8f22]
0x19db0009f71e  74de  488bca         REX.W movq rcx,rdx
0x19db0009f721  74e1  4c8b151df2ffff REX.W movq r10,[rip+0xfffff21d]
0x19db0009f728  74e8  41ffd2         call r10
0x19db0009f72b  74eb  5f             pop rdi
0x19db0009f72c  74ec  5e             pop rsi
0x19db0009f72d  74ed  5a             pop rdx
0x19db0009f72e  74ee  59             pop rcx
0x19db0009f72f  74ef  58             pop rax
0x19db0009f730  74f0  e9e28cffff     jmp 0x19db00098417  <+0x1d7>
0x19db0009f735  74f5  8bc9           movl rcx,rcx
0x19db0009f737  74f7  4903cd         REX.W addq rcx,r13
0x19db0009f73a  74fa  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009f741  7501  4c23d9         REX.W andq r11,rcx
0x19db0009f744  7504  41f6430802     testb [r11+0x8],0x2
0x19db0009f749  7509  0f847c8cffff   jz 0x19db000983cb  <+0x18b>
0x19db0009f74f  750f  498d58ff       REX.W leaq rbx,[r8-0x1]
0x19db0009f753  7513  50             push rax
0x19db0009f754  7514  51             push rcx
0x19db0009f755  7515  52             push rdx
0x19db0009f756  7516  56             push rsi
0x19db0009f757  7517  57             push rdi
0x19db0009f758  7518  488bf3         REX.W movq rsi,rbx
0x19db0009f75b  751b  498bf8         REX.W movq rdi,r8
0x19db0009f75e  751e  488b15db8effff REX.W movq rdx,[rip+0xffff8edb]
0x19db0009f765  7525  488bca         REX.W movq rcx,rdx
0x19db0009f768  7528  4c8b15d6f1ffff REX.W movq r10,[rip+0xfffff1d6]
0x19db0009f76f  752f  41ffd2         call r10
0x19db0009f772  7532  5f             pop rdi
0x19db0009f773  7533  5e             pop rsi
0x19db0009f774  7534  5a             pop rdx
0x19db0009f775  7535  59             pop rcx
0x19db0009f776  7536  58             pop rax
0x19db0009f777  7537  e94f8cffff     jmp 0x19db000983cb  <+0x18b>
0x19db0009f77c  753c  4589e4         movl r12,r12
0x19db0009f77f  753f  4d03e5         REX.W addq r12,r13
0x19db0009f782  7542  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009f789  7549  4d21e3         REX.W andq r11,r12
0x19db0009f78c  754c  41f6430802     testb [r11+0x8],0x2
0x19db0009f791  7551  0f84e28bffff   jz 0x19db00098379  <+0x139>
0x19db0009f797  7557  498d580b       REX.W leaq rbx,[r8+0xb]
0x19db0009f79b  755b  50             push rax
0x19db0009f79c  755c  51             push rcx
0x19db0009f79d  755d  52             push rdx
0x19db0009f79e  755e  56             push rsi
0x19db0009f79f  755f  57             push rdi
0x19db0009f7a0  7560  488bf3         REX.W movq rsi,rbx
0x19db0009f7a3  7563  498bf8         REX.W movq rdi,r8
0x19db0009f7a6  7566  33d2           xorl rdx,rdx
0x19db0009f7a8  7568  488b0d918effff REX.W movq rcx,[rip+0xffff8e91]
0x19db0009f7af  756f  4c8b158ff1ffff REX.W movq r10,[rip+0xfffff18f]
0x19db0009f7b6  7576  41ffd2         call r10
0x19db0009f7b9  7579  5f             pop rdi
0x19db0009f7ba  757a  5e             pop rsi
0x19db0009f7bb  757b  5a             pop rdx
0x19db0009f7bc  757c  59             pop rcx
0x19db0009f7bd  757d  58             pop rax
0x19db0009f7be  757e  e9b68bffff     jmp 0x19db00098379  <+0x139>
0x19db0009f7c3  7583  4589e4         movl r12,r12
0x19db0009f7c6  7586  4d03e5         REX.W addq r12,r13
0x19db0009f7c9  7589  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009f7d0  7590  4d21e3         REX.W andq r11,r12
0x19db0009f7d3  7593  41f6430802     testb [r11+0x8],0x2
0x19db0009f7d8  7598  0f847d8bffff   jz 0x19db0009835b  <+0x11b>
0x19db0009f7de  759e  498d580b       REX.W leaq rbx,[r8+0xb]
0x19db0009f7e2  75a2  50             push rax
0x19db0009f7e3  75a3  51             push rcx
0x19db0009f7e4  75a4  52             push rdx
0x19db0009f7e5  75a5  56             push rsi
0x19db0009f7e6  75a6  57             push rdi
0x19db0009f7e7  75a7  488bf3         REX.W movq rsi,rbx
0x19db0009f7ea  75aa  498bf8         REX.W movq rdi,r8
0x19db0009f7ed  75ad  33d2           xorl rdx,rdx
0x19db0009f7ef  75af  488b0d4a8effff REX.W movq rcx,[rip+0xffff8e4a]
0x19db0009f7f6  75b6  4c8b1548f1ffff REX.W movq r10,[rip+0xfffff148]
0x19db0009f7fd  75bd  41ffd2         call r10
0x19db0009f800  75c0  5f             pop rdi
0x19db0009f801  75c1  5e             pop rsi
0x19db0009f802  75c2  5a             pop rdx
0x19db0009f803  75c3  59             pop rcx
0x19db0009f804  75c4  58             pop rax
0x19db0009f805  75c5  e9518bffff     jmp 0x19db0009835b  <+0x11b>
0x19db0009f80a  75ca  458bff         movl r15,r15
0x19db0009f80d  75cd  4d03fd         REX.W addq r15,r13
0x19db0009f810  75d0  49c7c30000fcff REX.W movq r11,0xfffc0000
0x19db0009f817  75d7  4d23df         REX.W andq r11,r15
0x19db0009f81a  75da  41f6430802     testb [r11+0x8],0x2
0x19db0009f81f  75df  0f841d8bffff   jz 0x19db00098342  <+0x102>
0x19db0009f825  75e5  498d58ff       REX.W leaq rbx,[r8-0x1]
0x19db0009f829  75e9  50             push rax
0x19db0009f82a  75ea  51             push rcx
0x19db0009f82b  75eb  52             push rdx
0x19db0009f82c  75ec  56             push rsi
0x19db0009f82d  75ed  57             push rdi
0x19db0009f82e  75ee  488bf3         REX.W movq rsi,rbx
0x19db0009f831  75f1  498bf8         REX.W movq rdi,r8
0x19db0009f834  75f4  488b15058effff REX.W movq rdx,[rip+0xffff8e05]
0x19db0009f83b  75fb  488bca         REX.W movq rcx,rdx
0x19db0009f83e  75fe  4c8b1500f1ffff REX.W movq r10,[rip+0xfffff100]
0x19db0009f845  7605  41ffd2         call r10
0x19db0009f848  7608  5f             pop rdi
0x19db0009f849  7609  5e             pop rsi
0x19db0009f84a  760a  5a             pop rdx
0x19db0009f84b  760b  59             pop rcx
0x19db0009f84c  760c  58             pop rax
0x19db0009f84d  760d  e9f08affff     jmp 0x19db00098342  <+0x102>
0x19db0009f852  7612  90             nop
0x19db0009f853  7613  41ff95f8360000 call [r13+0x36f8]
0x19db0009f85a  761a  41ff95f8360000 call [r13+0x36f8]
0x19db0009f861  7621  41ff95f8360000 call [r13+0x36f8]
0x19db0009f868  7628  41ff95f8360000 call [r13+0x36f8]
0x19db0009f86f  762f  41ff95f8360000 call [r13+0x36f8]
0x19db0009f876  7636  41ff95f8360000 call [r13+0x36f8]
0x19db0009f87d  763d  41ff95f8360000 call [r13+0x36f8]
0x19db0009f884  7644  41ff95f8360000 call [r13+0x36f8]
0x19db0009f88b  764b  41ff95f8360000 call [r13+0x36f8]
0x19db0009f892  7652  41ff95f8360000 call [r13+0x36f8]
0x19db0009f899  7659  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8a0  7660  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8a7  7667  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8ae  766e  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8b5  7675  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8bc  767c  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8c3  7683  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8ca  768a  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8d1  7691  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8d8  7698  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8df  769f  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8e6  76a6  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8ed  76ad  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8f4  76b4  41ff95f8360000 call [r13+0x36f8]
0x19db0009f8fb  76bb  41ff95f8360000 call [r13+0x36f8]
0x19db0009f902  76c2  41ff95f8360000 call [r13+0x36f8]
0x19db0009f909  76c9  41ff95f8360000 call [r13+0x36f8]
0x19db0009f910  76d0  41ff95f8360000 call [r13+0x36f8]
0x19db0009f917  76d7  41ff95f8360000 call [r13+0x36f8]
0x19db0009f91e  76de  41ff95f8360000 call [r13+0x36f8]
0x19db0009f925  76e5  41ff95f8360000 call [r13+0x36f8]
0x19db0009f92c  76ec  41ff95f8360000 call [r13+0x36f8]
0x19db0009f933  76f3  41ff95f8360000 call [r13+0x36f8]
0x19db0009f93a  76fa  41ff95f8360000 call [r13+0x36f8]
0x19db0009f941  7701  41ff95f8360000 call [r13+0x36f8]
0x19db0009f948  7708  41ff95f8360000 call [r13+0x36f8]
0x19db0009f94f  770f  41ff95f8360000 call [r13+0x36f8]
0x19db0009f956  7716  41ff95f8360000 call [r13+0x36f8]
0x19db0009f95d  771d  41ff95f8360000 call [r13+0x36f8]
0x19db0009f964  7724  41ff95f8360000 call [r13+0x36f8]
0x19db0009f96b  772b  41ff95f8360000 call [r13+0x36f8]
0x19db0009f972  7732  41ff95f8360000 call [r13+0x36f8]
0x19db0009f979  7739  41ff95f8360000 call [r13+0x36f8]
0x19db0009f980  7740  41ff95f8360000 call [r13+0x36f8]
0x19db0009f987  7747  41ff95f8360000 call [r13+0x36f8]
0x19db0009f98e  774e  41ff95f8360000 call [r13+0x36f8]
0x19db0009f995  7755  41ff95f8360000 call [r13+0x36f8]
0x19db0009f99c  775c  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9a3  7763  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9aa  776a  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9b1  7771  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9b8  7778  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9bf  777f  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9c6  7786  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9cd  778d  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9d4  7794  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9db  779b  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9e2  77a2  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9e9  77a9  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9f0  77b0  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9f7  77b7  41ff95f8360000 call [r13+0x36f8]
0x19db0009f9fe  77be  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa05  77c5  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa0c  77cc  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa13  77d3  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa1a  77da  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa21  77e1  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa28  77e8  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa2f  77ef  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa36  77f6  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa3d  77fd  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa44  7804  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa4b  780b  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa52  7812  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa59  7819  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa60  7820  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa67  7827  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa6e  782e  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa75  7835  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa7c  783c  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa83  7843  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa8a  784a  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa91  7851  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa98  7858  41ff95f8360000 call [r13+0x36f8]
0x19db0009fa9f  785f  41ff95f8360000 call [r13+0x36f8]
0x19db0009faa6  7866  41ff95f8360000 call [r13+0x36f8]
0x19db0009faad  786d  41ff95f8360000 call [r13+0x36f8]
0x19db0009fab4  7874  41ff95f8360000 call [r13+0x36f8]
0x19db0009fabb  787b  41ff95f8360000 call [r13+0x36f8]
0x19db0009fac2  7882  41ff95f8360000 call [r13+0x36f8]
0x19db0009fac9  7889  41ff95f8360000 call [r13+0x36f8]
0x19db0009fad0  7890  41ff95f8360000 call [r13+0x36f8]
0x19db0009fad7  7897  41ff95f8360000 call [r13+0x36f8]
0x19db0009fade  789e  41ff95f8360000 call [r13+0x36f8]
0x19db0009fae5  78a5  41ff95f8360000 call [r13+0x36f8]
0x19db0009faec  78ac  41ff95f8360000 call [r13+0x36f8]
0x19db0009faf3  78b3  41ff95f8360000 call [r13+0x36f8]
0x19db0009fafa  78ba  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb01  78c1  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb08  78c8  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb0f  78cf  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb16  78d6  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb1d  78dd  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb24  78e4  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb2b  78eb  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb32  78f2  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb39  78f9  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb40  7900  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb47  7907  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb4e  790e  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb55  7915  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb5c  791c  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb63  7923  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb6a  792a  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb71  7931  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb78  7938  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb7f  793f  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb86  7946  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb8d  794d  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb94  7954  41ff95f8360000 call [r13+0x36f8]
0x19db0009fb9b  795b  41ff95f8360000 call [r13+0x36f8]
0x19db0009fba2  7962  41ff95f8360000 call [r13+0x36f8]
0x19db0009fba9  7969  41ff95f8360000 call [r13+0x36f8]
0x19db0009fbb0  7970  41ff95f8360000 call [r13+0x36f8]
0x19db0009fbb7  7977  41ff95f8360000 call [r13+0x36f8]
0x19db0009fbbe  797e  41ff95f8360000 call [r13+0x36f8]
0x19db0009fbc5  7985  41ff95f8360000 call [r13+0x36f8]
0x19db0009fbcc  798c  41ff95f8360000 call [r13+0x36f8]
0x19db0009fbd3  7993  41ff95f8360000 call [r13+0x36f8]
0x19db0009fbda  799a  41ff95f8360000 call [r13+0x36f8]
0x19db0009fbe1  79a1  41ff95f8360000 call [r13+0x36f8]
0x19db0009fbe8  79a8  41ff95f8360000 call [r13+0x36f8]
0x19db0009fbef  79af  41ff95f8360000 call [r13+0x36f8]
0x19db0009fbf6  79b6  41ff95f8360000 call [r13+0x36f8]
0x19db0009fbfd  79bd  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc04  79c4  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc0b  79cb  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc12  79d2  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc19  79d9  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc20  79e0  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc27  79e7  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc2e  79ee  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc35  79f5  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc3c  79fc  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc43  7a03  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc4a  7a0a  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc51  7a11  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc58  7a18  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc5f  7a1f  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc66  7a26  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc6d  7a2d  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc74  7a34  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc7b  7a3b  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc82  7a42  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc89  7a49  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc90  7a50  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc97  7a57  41ff95f8360000 call [r13+0x36f8]
0x19db0009fc9e  7a5e  41ff95f8360000 call [r13+0x36f8]
0x19db0009fca5  7a65  41ff95f8360000 call [r13+0x36f8]
0x19db0009fcac  7a6c  41ff95f8360000 call [r13+0x36f8]
0x19db0009fcb3  7a73  41ff95f8360000 call [r13+0x36f8]
0x19db0009fcba  7a7a  41ff95f8360000 call [r13+0x36f8]
0x19db0009fcc1  7a81  41ff95f8360000 call [r13+0x36f8]
0x19db0009fcc8  7a88  41ff95f8360000 call [r13+0x36f8]
0x19db0009fccf  7a8f  41ff95f8360000 call [r13+0x36f8]
0x19db0009fcd6  7a96  41ff95f8360000 call [r13+0x36f8]
0x19db0009fcdd  7a9d  41ff95f8360000 call [r13+0x36f8]
0x19db0009fce4  7aa4  41ff95f8360000 call [r13+0x36f8]
0x19db0009fceb  7aab  41ff95f8360000 call [r13+0x36f8]
0x19db0009fcf2  7ab2  41ff95f8360000 call [r13+0x36f8]
0x19db0009fcf9  7ab9  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd00  7ac0  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd07  7ac7  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd0e  7ace  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd15  7ad5  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd1c  7adc  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd23  7ae3  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd2a  7aea  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd31  7af1  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd38  7af8  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd3f  7aff  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd46  7b06  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd4d  7b0d  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd54  7b14  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd5b  7b1b  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd62  7b22  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd69  7b29  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd70  7b30  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd77  7b37  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd7e  7b3e  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd85  7b45  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd8c  7b4c  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd93  7b53  41ff95f8360000 call [r13+0x36f8]
0x19db0009fd9a  7b5a  41ff95f8360000 call [r13+0x36f8]
0x19db0009fda1  7b61  41ff95f8360000 call [r13+0x36f8]
0x19db0009fda8  7b68  41ff95f8360000 call [r13+0x36f8]
0x19db0009fdaf  7b6f  41ff95f8360000 call [r13+0x36f8]
0x19db0009fdb6  7b76  41ff95f8360000 call [r13+0x36f8]
0x19db0009fdbd  7b7d  41ff95f8360000 call [r13+0x36f8]
0x19db0009fdc4  7b84  41ff95f8360000 call [r13+0x36f8]
0x19db0009fdcb  7b8b  41ff95f8360000 call [r13+0x36f8]
0x19db0009fdd2  7b92  41ff95f8360000 call [r13+0x36f8]
0x19db0009fdd9  7b99  41ff95f8360000 call [r13+0x36f8]
0x19db0009fde0  7ba0  41ff95f8360000 call [r13+0x36f8]
0x19db0009fde7  7ba7  41ff95f8360000 call [r13+0x36f8]
0x19db0009fdee  7bae  41ff95f8360000 call [r13+0x36f8]
0x19db0009fdf5  7bb5  41ff95f8360000 call [r13+0x36f8]
0x19db0009fdfc  7bbc  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe03  7bc3  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe0a  7bca  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe11  7bd1  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe18  7bd8  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe1f  7bdf  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe26  7be6  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe2d  7bed  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe34  7bf4  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe3b  7bfb  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe42  7c02  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe49  7c09  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe50  7c10  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe57  7c17  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe5e  7c1e  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe65  7c25  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe6c  7c2c  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe73  7c33  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe7a  7c3a  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe81  7c41  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe88  7c48  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe8f  7c4f  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe96  7c56  41ff95f8360000 call [r13+0x36f8]
0x19db0009fe9d  7c5d  41ff95f8360000 call [r13+0x36f8]
0x19db0009fea4  7c64  41ff95f8360000 call [r13+0x36f8]
0x19db0009feab  7c6b  41ff95f8360000 call [r13+0x36f8]
0x19db0009feb2  7c72  41ff95f8360000 call [r13+0x36f8]
0x19db0009feb9  7c79  41ff95f8360000 call [r13+0x36f8]
0x19db0009fec0  7c80  41ff95f8360000 call [r13+0x36f8]
0x19db0009fec7  7c87  41ff95f8360000 call [r13+0x36f8]
0x19db0009fece  7c8e  41ff95f8360000 call [r13+0x36f8]
0x19db0009fed5  7c95  41ff95f8360000 call [r13+0x36f8]
0x19db0009fedc  7c9c  41ff95f8360000 call [r13+0x36f8]
0x19db0009fee3  7ca3  41ff95f8360000 call [r13+0x36f8]
0x19db0009feea  7caa  41ff95f8360000 call [r13+0x36f8]
0x19db0009fef1  7cb1  41ff95f8360000 call [r13+0x36f8]
0x19db0009fef8  7cb8  41ff95f8360000 call [r13+0x36f8]
0x19db0009feff  7cbf  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff06  7cc6  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff0d  7ccd  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff14  7cd4  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff1b  7cdb  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff22  7ce2  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff29  7ce9  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff30  7cf0  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff37  7cf7  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff3e  7cfe  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff45  7d05  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff4c  7d0c  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff53  7d13  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff5a  7d1a  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff61  7d21  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff68  7d28  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff6f  7d2f  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff76  7d36  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff7d  7d3d  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff84  7d44  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff8b  7d4b  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff92  7d52  41ff95f8360000 call [r13+0x36f8]
0x19db0009ff99  7d59  41ff95f8360000 call [r13+0x36f8]
0x19db0009ffa0  7d60  41ff95f8360000 call [r13+0x36f8]
0x19db0009ffa7  7d67  41ff95f8360000 call [r13+0x36f8]
0x19db0009ffae  7d6e  41ff95f8360000 call [r13+0x36f8]
0x19db0009ffb5  7d75  41ff95f8360000 call [r13+0x36f8]
0x19db0009ffbc  7d7c  41ff95f8360000 call [r13+0x36f8]
0x19db0009ffc3  7d83  41ff95f8360000 call [r13+0x36f8]
0x19db0009ffca  7d8a  41ff95f8360000 call [r13+0x36f8]
0x19db0009ffd1  7d91  41ff95f8360000 call [r13+0x36f8]
0x19db0009ffd8  7d98  41ff95f8360000 call [r13+0x36f8]
0x19db0009ffdf  7d9f  41ff95f8360000 call [r13+0x36f8]
0x19db0009ffe6  7da6  41ff95f8360000 call [r13+0x36f8]
0x19db0009ffed  7dad  41ff95f8360000 call [r13+0x36f8]
0x19db0009fff4  7db4  41ff95f8360000 call [r13+0x36f8]
0x19db0009fffb  7dbb  41ff95f8360000 call [r13+0x36f8]
0x19db000a0002  7dc2  41ff95f8360000 call [r13+0x36f8]
0x19db000a0009  7dc9  41ff95f8360000 call [r13+0x36f8]
0x19db000a0010  7dd0  41ff95f8360000 call [r13+0x36f8]
0x19db000a0017  7dd7  41ff95f8360000 call [r13+0x36f8]
0x19db000a001e  7dde  41ff9500370000 call [r13+0x3700]
0x19db000a0025  7de5  41ff9510370000 call [r13+0x3710]
0x19db000a002c  7dec  41ff9510370000 call [r13+0x3710]
0x19db000a0033  7df3  41ff9510370000 call [r13+0x3710]
0x19db000a003a  7dfa  41ff9510370000 call [r13+0x3710]
0x19db000a0041  7e01  41ff9510370000 call [r13+0x3710]
0x19db000a0048  7e08  41ff9510370000 call [r13+0x3710]
0x19db000a004f  7e0f  41ff9510370000 call [r13+0x3710]
0x19db000a0056  7e16  41ff9510370000 call [r13+0x3710]
0x19db000a005d  7e1d  41ff9510370000 call [r13+0x3710]
0x19db000a0064  7e24  41ff9510370000 call [r13+0x3710]
0x19db000a006b  7e2b  41ff9510370000 call [r13+0x3710]
0x19db000a0072  7e32  41ff9510370000 call [r13+0x3710]
0x19db000a0079  7e39  41ff9510370000 call [r13+0x3710]
0x19db000a0080  7e40  41ff9510370000 call [r13+0x3710]
0x19db000a0087  7e47  41ff9510370000 call [r13+0x3710]
0x19db000a008e  7e4e  41ff9510370000 call [r13+0x3710]
0x19db000a0095  7e55  41ff9510370000 call [r13+0x3710]
0x19db000a009c  7e5c  41ff9510370000 call [r13+0x3710]
0x19db000a00a3  7e63  41ff9510370000 call [r13+0x3710]
0x19db000a00aa  7e6a  41ff9510370000 call [r13+0x3710]
0x19db000a00b1  7e71  41ff9510370000 call [r13+0x3710]
0x19db000a00b8  7e78  41ff9510370000 call [r13+0x3710]
0x19db000a00bf  7e7f  41ff9510370000 call [r13+0x3710]
0x19db000a00c6  7e86  41ff9510370000 call [r13+0x3710]
0x19db000a00cd  7e8d  41ff9510370000 call [r13+0x3710]
0x19db000a00d4  7e94  41ff9510370000 call [r13+0x3710]
0x19db000a00db  7e9b  41ff9510370000 call [r13+0x3710]
0x19db000a00e2  7ea2  41ff9510370000 call [r13+0x3710]
0x19db000a00e9  7ea9  41ff9510370000 call [r13+0x3710]
0x19db000a00f0  7eb0  41ff9510370000 call [r13+0x3710]
0x19db000a00f7  7eb7  41ff9510370000 call [r13+0x3710]
0x19db000a00fe  7ebe  41ff9510370000 call [r13+0x3710]
0x19db000a0105  7ec5  41ff9510370000 call [r13+0x3710]
0x19db000a010c  7ecc  41ff9510370000 call [r13+0x3710]
0x19db000a0113  7ed3  41ff9510370000 call [r13+0x3710]
0x19db000a011a  7eda  41ff9510370000 call [r13+0x3710]
0x19db000a0121  7ee1  41ff9510370000 call [r13+0x3710]
0x19db000a0128  7ee8  41ff9510370000 call [r13+0x3710]
0x19db000a012f  7eef  90             nop

Source positions:
 pc offset  position
       ae2      7221
      2e4e      2379
      3371      3434
      3cb1      7221
      5106      2001
      556f      7221
      5ca2      2472
      63b1      2798
      6562      7221

Inlined functions (count = 6)
 0x19db082f3ded <SharedFunctionInfo CreateP>
 0x19db082f3e5d <SharedFunctionInfo VMulti>
 0x19db082f3db5 <SharedFunctionInfo CalcNormal>
 0x19db082f3d7d <SharedFunctionInfo CalcCross>
 0x19db082f3e25 <SharedFunctionInfo MMulti>
 0x19db082f3ecd <SharedFunctionInfo Translate>

Deoptimization Input Data (deopt points = 324)
 index  bytecode-offset    pc
     0                8    NA 
     1                8    NA 
     2               17    NA 
     3               17    NA 
     4               27    NA 
     5               27    NA 
     6               36    NA 
     7               36    NA 
     8               45    NA 
     9               45    NA 
    10               54    NA 
    11               54    NA 
    12               63    NA 
    13               63    NA 
    14               72    NA 
    15               72    NA 
    16               81    NA 
    17              116    NA 
    18              116    NA 
    19              116    NA 
    20              136    NA 
    21              136    NA 
    22               17    NA 
    23              171    NA 
    24              171    NA 
    25              171    NA 
    26              171    NA 
    27               24    NA 
    28              203    NA 
    29              203    NA 
    30              203    NA 
    31              203    NA 
    32               24    NA 
    33              238    NA 
    34              238    NA 
    35              238    NA 
    36              238    NA 
    37              607    NA 
    38              279    NA 
    39              279    NA 
    40              279    NA 
    41              279    NA 
    42              100    NA 
    43              317    NA 
    44              317    NA 
    45              317    NA 
    46              317    NA 
    47               55    NA 
    48              352    NA 
    49              352    NA 
    50              352    NA 
    51              352    NA 
    52               29    NA 
    53              390    NA 
    54              390    NA 
    55              390    NA 
    56              390    NA 
    57              422    NA 
    58              422    NA 
    59              422    NA 
    60              422    NA 
    61              422    NA 
    62              434    NA 
    63              434    NA 
    64              452    NA 
    65              463    NA 
    66              463    NA 
    67              463    NA 
    68              463    NA 
    69              463    NA 
    70              463    NA 
    71              463    NA 
    72              463    NA 
    73              422    NA 
    74              536    NA 
    75              536    NA 
    76              536    NA 
    77              536    NA 
    78              536    NA 
    79              536    NA 
    80              536    NA 
    81              536    NA 
    82              536    NA 
    83              390    NA 
    84              573    NA 
    85              573    NA 
    86              573    NA 
    87              573    NA 
    88              573    NA 
    89              573    NA 
    90              573    NA 
    91              573    NA 
    92              573    NA 
    93              390    NA 
    94              602    NA 
    95              602    NA 
    96              602    NA 
    97               29    NA 
    98               29    NA 
    99               29    NA 
   100               29    NA 
   101               29    NA 
   102               29    NA 
   103               29    NA 
   104               55    NA 
   105               55    NA 
   106               55    NA 
   107               55    NA 
   108               55    NA 
   109               29    NA 
   110               29    NA 
   111               29    NA 
   112               29    NA 
   113               55    NA 
   114               55    NA 
   115               55    NA 
   116               55    NA 
   117               29    NA 
   118               29    NA 
   119               29    NA 
   120               17    NA 
   121               17    NA 
   122               17    NA 
   123               17    NA 
   124               60    NA 
   125               60    NA 
   126              100    NA 
   127               92    NA 
   128              607    NA 
   129              607    NA 
   130              607    NA 
   131              628    NA 
   132              638    NA 
   133              638    NA 
   134              638    NA 
   135              652    NA 
   136              652    NA 
   137              652    NA 
   138              652    NA 
   139              652    NA 
   140              352    NA 
   141              652    NA 
   142              652    NA 
   143              652    NA 
   144              652    NA 
   145              652    NA 
   146              652    NA 
   147              352    NA 
   148              681    NA 
   149              700    NA 
   150              700    NA 
   151              700    NA 
   152              700    NA 
   153              700    NA 
   154              700    NA 
   155              700    NA 
   156              700    NA 
   157              700    NA 
   158               90    NA 
   159               90    NA 
   160               90    NA 
   161              317    NA 
   162              765    NA 
   163              765    NA 
   164              765    NA 
   165               14    NA 
   166               14    NA 
   167               14    NA 
   168               14    NA 
   169               14    NA 
   170               24    NA 
   171               24    NA 
   172               24    NA 
   173               24    NA 
   174               24    NA 
   175               24    NA 
   176               24    NA 
   177               24    NA 
   178               24    NA 
   179               24    NA 
   180               24    NA 
   181               24    NA 
   182               24    NA 
   183               24    NA 
   184               24    NA 
   185               24    NA 
   186               24    NA 
   187               24    NA 
   188               24    NA 
   189               24    NA 
   190               24    NA 
   191               24    NA 
   192               24    NA 
   193               24    NA 
   194               24    NA 
   195               24    NA 
   196               24    NA 
   197               24    NA 
   198               24    NA 
   199               24    NA 
   200               24    NA 
   201               24    NA 
   202               24    NA 
   203               24    NA 
   204               24    NA 
   205               24    NA 
   206               24    NA 
   207               24    NA 
   208               24    NA 
   209               24    NA 
   210               24    NA 
   211               24    NA 
   212               24    NA 
   213               24    NA 
   214               24    NA 
   215               24    NA 
   216               24    NA 
   217               24    NA 
   218               24    NA 
   219               24    NA 
   220               24    NA 
   221               24    NA 
   222               24    NA 
   223               24    NA 
   224               24    NA 
   225               24    NA 
   226              777    NA 
   227              777    NA 
   228              777    NA 
   229              317    NA 
   230              818    NA 
   231              818    NA 
   232              818    NA 
   233               17    NA 
   234               17    NA 
   235               17    NA 
   236               17    NA 
   237               17    NA 
   238               17    NA 
   239               17    NA 
   240               17    NA 
   241               17    NA 
   242               17    NA 
   243               17    NA 
   244               17    NA 
   245               17    NA 
   246               17    NA 
   247               17    NA 
   248               17    NA 
   249               17    NA 
   250               17    NA 
   251               17    NA 
   252               17    NA 
   253               17    NA 
   254               17    NA 
   255               17    NA 
   256               17    NA 
   257               17    NA 
   258               17    NA 
   259               17    NA 
   260              279    NA 
   261              777    NA 
   262              777    NA 
   263              777    NA 
   264              279    NA 
   265              848    NA 
   266              848    NA 
   267              856    NA 
   268              856    NA 
   269              856    NA 
   270              238    NA 
   271              869    NA 
   272              869    NA 
   273              869    NA 
   274              238    NA 
   275              898    NA 
   276              898    NA 
   277              898    NA 
   278              203    NA 
   279              947    NA 
   280              203    NA 
   281              171    NA 
   282              136    NA 
   283              136    NA 
   284              171    NA 
   285              947    NA 
   286              131   b12 
   287              166   cf5 
   288              198   ebe 
   289              233  108b 
   290              274  1258 
   291              312  1425 
   292              347  15f2 
   293              385  17bf 
   294              417  1989 
   295              522  1fef 
   296              559  2105 
   297              596  221b 
   298               37  2e87 
   299               37  304c 
   300               90  339e 
   301              812  3cdc 
   302              823  40de 
   303              840  4177 
   304              856  435b 
   305              889  442c 
   306              944  4578 
   307               -1  462d 
   308               78  512f 
   309               78  5372 
   310              197  5415 
   311              197  5470 
   312              617  5590 
   313              685  56f9 
   314              685  5761 
   315              175  5cbf 
   316              175  6292 
   317              184  62e1 
   318              133  63df 
   319              133  6537 
   320              833  6583 
   321              926  6611 
   322              926  6666 
   323              935  66b0 

Safepoints (size = 1928)
0x19db0009844b     20b    NA  00000000000000000011100000 (sp -> fp)  <none>
0x19db000984f2     2b2    NA  00000000000000000011100000 (sp -> fp)  <none>
0x19db00098593     353    NA  00000000000000000011100000 (sp -> fp)  <none>
0x19db000986dd     49d    NA  00000000000000000011100000 (sp -> fp)  <none>
0x19db0009878d     54d    NA  00000000000000000011100000 (sp -> fp)  <none>
0x19db0009883d     5fd    NA  00000000000000000011100000 (sp -> fp)  <none>
0x19db00098d52     b12  7de5  00000000000000010011100000 (sp -> fp)     286
0x19db00098f35     cf5  7dec  00000000000000010101100000 (sp -> fp)     287
0x19db000990fe     ebe  7df3  00000000000000010101100000 (sp -> fp)     288
0x19db000992cb    108b  7dfa  00000000000000010101100000 (sp -> fp)     289
0x19db00099498    1258  7e01  00000000000000010101100000 (sp -> fp)     290
0x19db00099665    1425  7e08  00000000000000010101100000 (sp -> fp)     291
0x19db00099832    15f2  7e0f  00000000000000010101100000 (sp -> fp)     292
0x19db000999ff    17bf  7e16  00000000000000000101100000 (sp -> fp)     293
0x19db00099bc9    1989  7e1d  00000000000000000101100000 (sp -> fp)     294
0x19db0009a22f    1fef  7e24  00000000000010100001100000 (sp -> fp)     295
0x19db0009a345    2105  7e2b  00000000000110100001100000 (sp -> fp)     296
0x19db0009a45b    221b  7e32  00000000001110100001100000 (sp -> fp)     297
0x19db0009b0c7    2e87  7e39  00000000000000000111100000 (sp -> fp)     298
0x19db0009b28c    304c  7e40  00000000000000001101100000 (sp -> fp)     299
0x19db0009b5de    339e  7e47  00000000000001000111100000 (sp -> fp)     300
0x19db0009bf1c    3cdc  7e4e  00000000000000110101100000 (sp -> fp)     301
0x19db0009c31e    40de  7e55  00000000000000000001100000 (sp -> fp)     302
0x19db0009c3b7    4177  7e5c  00000000000000000001100000 (sp -> fp)     303
0x19db0009c59b    435b  7e63  00000000000000000001100000 (sp -> fp)     304
0x19db0009c66c    442c  7e6a  00000000000000000001100000 (sp -> fp)     305
0x19db0009c7b8    4578  7e71  00000000000000000001100000 (sp -> fp)     306
0x19db0009c86d    462d  7e78  00000000000000000001100000 (sp -> fp)     307
0x19db0009c88b    464b    NA  00000000000000000011100000 (sp -> fp)  <none>
0x19db0009c8d3    4693    NA  00000000000000000011100000 (sp -> fp)  <none>
0x19db0009c933    46f3    NA  00000000000000011111100000 (sp -> fp)  <none>
0x19db0009c97a    473a    NA  00000000000000000001100000 (sp -> fp)  <none>
0x19db0009ca02    47c2    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009ca47    4807    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009ca84    4844    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cac6    4886    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cb05    48c5    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cb47    4907    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cb86    4946    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cbc2    4982    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cbfb    49bb    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cc3d    49fd    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cc7c    4a3c    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009ccb8    4a78    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009ccf1    4ab1    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cd33    4af3    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cd72    4b32    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cdae    4b6e    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cde7    4ba7    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009ce29    4be9    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009ce68    4c28    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cea4    4c64    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cedd    4c9d    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cf1f    4cdf    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cf5e    4d1e    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cf9a    4d5a    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009cfd3    4d93    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009d015    4dd5    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009d054    4e14    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009d090    4e50    NA  00000000000000010111100000 (sp -> fp)  <none>
0x19db0009d0c9    4e89    NA  00000000000000000111100000 (sp -> fp)  <none>
0x19db0009d10b    4ecb    NA  00000000000000000111100000 (sp -> fp)  <none>
0x19db0009d14a    4f0a    NA  00000000000000000111100000 (sp -> fp)  <none>
0x19db0009d186    4f46    NA  00000000000000000111100000 (sp -> fp)  <none>
0x19db0009d1bf    4f7f    NA  00000000000000000111100000 (sp -> fp)  <none>
0x19db0009d201    4fc1    NA  00000000000000000111100000 (sp -> fp)  <none>
0x19db0009d240    5000    NA  00000000000000000111100000 (sp -> fp)  <none>
0x19db0009d27c    503c    NA  00000000000000000111100000 (sp -> fp)  <none>
0x19db0009d2a5    5065    NA  00000000000000000011100000 (sp -> fp)  <none>
0x19db0009d2e4    50a4    NA  00000000000000000011100000 (sp -> fp)  <none>
0x19db0009d332    50f2    NA  00000000111110100001100000 (sp -> fp)  <none>
0x19db0009d36f    512f  7e7f  00000110111110100001100000 (sp -> fp)     308
0x19db0009d3ed    51ad    NA  00000110111110100001100000 (sp -> fp)  <none>
0x19db0009d454    5214    NA  00000110111110100001100000 (sp -> fp)  <none>
0x19db0009d4e2    52a2    NA  00000110111110100001100000 (sp -> fp)  <none>
0x19db0009d550    5310    NA  00000110111110100001100000 (sp -> fp)  <none>
0x19db0009d5b2    5372  7e86  00000110111110100001100000 (sp -> fp)     309
0x19db0009d5ed    53ad    NA  00001111111110100001100000 (sp -> fp)  <none>
0x19db0009d655    5415  7e8d  00000000111110100111100000 (sp -> fp)     310
0x19db0009d6b0    5470  7e94  00000000111110100111100000 (sp -> fp)     311
0x19db0009d71a    54da    NA  00000000000000100101100000 (sp -> fp)  <none>
0x19db0009d774    5534    NA  00000000000000100101100000 (sp -> fp)  <none>
0x19db0009d7d0    5590  7e9b  00000000000000000001100000 (sp -> fp)     312
0x19db0009d813    55d3    NA  00000000000000000111100000 (sp -> fp)  <none>
0x19db0009d8ac    566c    NA  00000000000000111111100000 (sp -> fp)  <none>
0x19db0009d904    56c4    NA  00000000000000000111100000 (sp -> fp)  <none>
0x19db0009d939    56f9  7ea2  00000000000000000001100000 (sp -> fp)     313
0x19db0009d950    5710    NA  00000000000000001101100000 (sp -> fp)  <none>
0x19db0009d9a1    5761  7ea9  00000000000000000001100000 (sp -> fp)     314
0x19db0009d9b9    5779    NA  00000000000001000111100000 (sp -> fp)  <none>
0x19db0009d9f7    57b7    NA  00000000000000111101100000 (sp -> fp)  <none>
0x19db0009da37    57f7    NA  00001000000110111111100000 (sp -> fp)  <none>
0x19db0009daad    586d    NA  00001000101110111111100000 (sp -> fp)  <none>
0x19db0009db41    5901    NA  00001010001110111111100000 (sp -> fp)  <none>
0x19db0009dbe7    59a7    NA  00001000001110111111100000 (sp -> fp)  <none>
0x19db0009dc90    5a50    NA  00001000000110111111100000 (sp -> fp)  <none>
0x19db0009dd34    5af4    NA  00001000000010111111100000 (sp -> fp)  <none>
0x19db0009ddd1    5b91    NA  00001000000000111111100000 (sp -> fp)  <none>
0x19db0009de78    5c38    NA  00001000000000111111100000 (sp -> fp)  <none>
0x19db0009deff    5cbf  7eb0  00000000000000111111100000 (sp -> fp)     315
0x19db0009df4d    5d0d    NA  00010000001010111111100000 (sp -> fp)  <none>
0x19db0009dfc9    5d89    NA  00010001011010111111100000 (sp -> fp)  <none>
0x19db0009e070    5e30    NA  00010100011010111111100000 (sp -> fp)  <none>
0x19db0009e128    5ee8    NA  00010000011010111111100000 (sp -> fp)  <none>
0x19db0009e1e3    5fa3    NA  00010000001010111111100000 (sp -> fp)  <none>
0x19db0009e29d    605d    NA  00010000000010111111100000 (sp -> fp)  <none>
0x19db0009e354    6114    NA  00010000000000111111100000 (sp -> fp)  <none>
0x19db0009e436    61f6    NA  00010000000000111111100000 (sp -> fp)  <none>
0x19db0009e4d2    6292  7eb7  00000000000000111111100000 (sp -> fp)     316
0x19db0009e521    62e1  7ebe  00000000000000111111100000 (sp -> fp)     317
0x19db0009e560    6320    NA  00000000000011110101100000 (sp -> fp)  <none>
0x19db0009e5af    636f    NA  00000000010111111101100000 (sp -> fp)  <none>
0x19db0009e61f    63df  7ec5  00000000000011111101100000 (sp -> fp)     318
0x19db0009e6d4    6494    NA  00000000000011111101100000 (sp -> fp)  <none>
0x19db0009e777    6537  7ecc  00000000000011111101100000 (sp -> fp)     319
0x19db0009e7c3    6583  7ed3  00000000000000000001100000 (sp -> fp)     320
0x19db0009e7f2    65b2    NA  00000000000000011111100000 (sp -> fp)  <none>
0x19db0009e851    6611  7eda  00000000000000101001100000 (sp -> fp)     321
0x19db0009e8a6    6666  7ee1  00000000000000101001100000 (sp -> fp)     322
0x19db0009e8f0    66b0  7ee8  00000000000000000001100000 (sp -> fp)     323

RelocInfo (size = 812)
0x19db00098258  off heap target
0x19db00098272  off heap target
0x19db000982aa  external reference (Heap::NewSpaceAllocationTopAddress())  (0x5555556d7df8)
0x19db000982bb  external reference (Heap::NewSpaceAllocationLimitAddress())  (0x5555556d7e00)
0x19db000982d8  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000982ee  compressed embedded object  (0x19db082f44fd <FixedArray[4]> compressed)
0x19db0009830c  compressed embedded object  (0x19db0830d975 <Map(HOLEY_ELEMENTS)> compressed)
0x19db0009831b  compressed embedded object  (0x19db08308835 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098390  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db0009839f  compressed embedded object  (0x19db08308835 <Map(HOLEY_ELEMENTS)> compressed)
0x19db000983ae  compressed embedded object  (0x19db0830d99d <Map(HOLEY_ELEMENTS)> compressed)
0x19db000983eb  compressed embedded object  (0x19db0830d99d <Map(HOLEY_ELEMENTS)> compressed)
0x19db000983fa  compressed embedded object  (0x19db0830d9c5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098440  off heap target
0x19db0009845e  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098471  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009847e  compressed embedded object  (0x19db0830d975 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098498  compressed embedded object  (0x19db0830d9c5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db000984a8  compressed embedded object  (0x19db0830d9ed <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098505  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098518  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00098525  compressed embedded object  (0x19db0830d975 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098539  compressed embedded object  (0x19db0830d9ed <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098549  compressed embedded object  (0x19db0830da15 <Map(HOLEY_ELEMENTS)> compressed)
0x19db000985a6  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db000985b9  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000985c6  compressed embedded object  (0x19db0830d975 <Map(HOLEY_ELEMENTS)> compressed)
0x19db000985da  compressed embedded object  (0x19db0830da15 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098679  compressed embedded object  (0x19db0830da3d <Map(HOLEY_ELEMENTS)> compressed)
0x19db000986f0  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098703  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00098710  compressed embedded object  (0x19db0830d975 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098724  compressed embedded object  (0x19db0830da3d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0009873a  compressed embedded object  (0x19db0830da65 <Map(HOLEY_ELEMENTS)> compressed)
0x19db000987a0  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db000987b3  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db000987c0  compressed embedded object  (0x19db0830d975 <Map(HOLEY_ELEMENTS)> compressed)
0x19db000987d4  compressed embedded object  (0x19db0830da65 <Map(HOLEY_ELEMENTS)> compressed)
0x19db000987ea  compressed embedded object  (0x19db0830da8d <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098850  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098863  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00098870  compressed embedded object  (0x19db0830d975 <Map(HOLEY_ELEMENTS)> compressed)
0x19db00098884  compressed embedded object  (0x19db0830da8d <Map(HOLEY_ELEMENTS)> compressed)
0x19db000989f2  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00098a06  compressed embedded object  (0x19db082f4539 <FixedArray[4]> compressed)
0x19db00098a2d  compressed embedded object  (0x19db082f455d <FixedArray[4]> compressed)
0x19db00098a52  compressed embedded object  (0x19db082f4581 <FixedArray[4]> compressed)
0x19db00098a74  compressed embedded object  (0x19db082f45a5 <FixedArray[4]> compressed)
0x19db00098abb  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00098b02  compressed embedded object  (0x19db082f45ed <FixedArray[4]> compressed)
0x19db00098b28  compressed embedded object  (0x19db082f4611 <FixedArray[4]> compressed)
0x19db00098b4b  compressed embedded object  (0x19db082f4635 <FixedArray[4]> compressed)
0x19db00098b6c  compressed embedded object  (0x19db082f4659 <FixedArray[4]> compressed)
0x19db00098bee  compressed embedded object  (0x19db082f46a1 <FixedArray[4]> compressed)
0x19db00098c11  compressed embedded object  (0x19db082f46c5 <FixedArray[4]> compressed)
0x19db00098c32  compressed embedded object  (0x19db082f46e9 <FixedArray[4]> compressed)
0x19db00098c54  compressed embedded object  (0x19db082f470d <FixedArray[4]> compressed)
0x19db00098d3a  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00098d47  off heap target
0x19db00098d62  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00098d72  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00098d82  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00098f1d  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00098f41  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00098f55  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db000990ec  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009910a  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009911e  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db000992b9  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000992d7  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000992eb  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00099486  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db000994a4  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db000994b8  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00099653  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00099671  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00099685  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00099820  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009983e  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00099852  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db000999ed  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00099a0b  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00099a1f  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00099bb7  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db00099bd5  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db00099be9  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00099d50  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db00099d92  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db00099da6  compressed embedded object  (0x19db082f475d <FixedArray[3]> compressed)
0x19db00099dcb  compressed embedded object  (0x19db082f477d <FixedArray[3]> compressed)
0x19db00099dee  compressed embedded object  (0x19db082f479d <FixedArray[3]> compressed)
0x19db00099e0f  compressed embedded object  (0x19db082f47bd <FixedArray[3]> compressed)
0x19db00099e31  compressed embedded object  (0x19db082f47dd <FixedArray[3]> compressed)
0x19db00099e53  compressed embedded object  (0x19db082f47fd <FixedArray[3]> compressed)
0x19db00099f54  compressed embedded object  (0x19db0830dbcd <Map(PACKED_ELEMENTS)> compressed)
0x19db0009a020  compressed embedded object  (0x19db0830dbcd <Map(PACKED_ELEMENTS)> compressed)
0x19db0009a036  compressed embedded object  (0x19db0830dbf5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009a0e4  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009a125  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009a13b  compressed embedded object  (0x19db0830dbf5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009a213  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009a224  off heap target
0x19db0009a26c  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009a27b  compressed embedded object  (0x19db0830dbf5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009a2a2  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009a2df  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009a330  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009a382  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009a391  compressed embedded object  (0x19db0830dbf5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009a3b8  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009a3f5  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009a446  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009a486  full embedded object  (0x19db082f42b9 <FeedbackCell[many closures]>)
0x19db0009a50a  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009a8fd  full embedded object  (0x19db082f42ad <FeedbackCell[many closures]>)
0x19db0009a99a  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009aad9  full embedded object  (0x19db082e6509 <Object map = 0x19db08308f65>)
0x19db0009ab14  compressed embedded object  (0x19db082e68c9 <JSFunction sqrt (sfi = 0x19db0824ae09)> compressed)
0x19db0009abd2  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009ad09  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009ad1d  compressed embedded object  (0x19db082f4829 <FixedArray[12]> compressed)
0x19db0009ad2e  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009ad3e  compressed embedded object  (0x19db0830dbf5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009ad4e  compressed embedded object  (0x19db0830dc1d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009addb  compressed embedded object  (0x19db0830dc1d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009aedb  compressed embedded object  (0x19db0830dc45 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009af5c  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009af6b  compressed embedded object  (0x19db0830dc45 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009afe4  full embedded object  (0x19db082f42c5 <FeedbackCell[many closures]>)
0x19db0009b05e  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009b090  full embedded object  (0x19db082e35fd <JSGlobal Object>)
0x19db0009b09f  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009b0a9  full embedded object  (0x19db082f55d5 <FeedbackVector[5]>)
0x19db0009b0bc  off heap target
0x19db0009b128  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009b13c  full embedded object  (0x19db082f42c5 <FeedbackCell[many closures]>)
0x19db0009b146  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009b154  compressed embedded object  (0x19db0830dc45 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009b25e  full embedded object  (0x19db082e35fd <JSGlobal Object>)
0x19db0009b268  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009b27a  full embedded object  (0x19db082f55d5 <FeedbackVector[5]>)
0x19db0009b2e3  compressed embedded object  (0x19db0830d975 <Map(HOLEY_ELEMENTS)> compressed)
0x19db0009b2fc  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009b35f  full embedded object  (0x19db082f42f5 <FeedbackCell[many closures]>)
0x19db0009b3be  compressed embedded object  (0x19db082f56e5 <FixedArray[4]> compressed)
0x19db0009b411  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009b470  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009b592  full embedded object  (0x19db082f42d1 <FeedbackCell[many closures]>)
0x19db0009b5b7  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009b5d3  off heap target
0x19db0009b630  full embedded object  (0x19db082f42d1 <FeedbackCell[many closures]>)
0x19db0009b69e  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009b752  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009b777  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009b781  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009b792  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009be42  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009be4c  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009be56  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009be63  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009bebd  compressed embedded object  (0x19db0830dc45 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009beff  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009bf47  full embedded object  (0x19db082f42dd <FeedbackCell[many closures]>)
0x19db0009bfef  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009c01e  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009c086  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009c155  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009c2f8  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009c306  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009c313  off heap target
0x19db0009c381  full embedded object  (0x19db082f4325 <FeedbackCell[many closures]>)
0x19db0009c3a2  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009c3ce  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db0009c3de  compressed embedded object  (0x19db0830da8d <Map(HOLEY_ELEMENTS)> compressed)
0x19db0009c56f  full embedded object  (0x19db082f4331 <FeedbackCell[many closures]>)
0x19db0009c589  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009c5b3  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009c603  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009c62e  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009c652  full embedded object  (0x19db082f3019 <String[1]: #V>)
0x19db0009c698  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009c6a7  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009c6bf  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009c7ad  off heap target
0x19db0009c84b  external reference (Runtime::StackGuardWithGap)  (0x7ffff702b480)
0x19db0009c855  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009c862  off heap target
0x19db0009c880  off heap target
0x19db0009c8e0  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db0009c8f3  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009c900  compressed embedded object  (0x19db0830d975 <Map(HOLEY_ELEMENTS)> compressed)
0x19db0009c940  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db0009c9bf  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009c9f7  off heap target
0x19db0009ca13  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009ca19  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009ca3c  off heap target
0x19db0009ca50  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009ca56  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009ca95  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009ca9b  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cacf  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009cad5  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cb12  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cb18  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cb4c  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cb52  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cb93  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cbc7  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cc08  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cc0e  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cc42  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cc48  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cc89  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009ccbd  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009ccfe  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cd04  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cd38  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cd3e  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cd7f  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cdb3  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cdf4  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cdfa  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009ce2e  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009ce34  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009ce75  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cea9  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009ceea  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cef0  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cf24  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cf2a  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cf6b  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cf9f  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cfe0  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009cfe6  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d01a  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d020  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d061  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d095  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d0d6  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d0dc  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d110  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d116  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d157  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d18b  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d1cc  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d1d2  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d206  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d20c  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d24d  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d281  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d2ab  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d2b8  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d2fc  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d310  compressed embedded object  (0x19db0830dc6d <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d34e  external reference (Runtime::StackGuard)  (0x7ffff702aeb0)
0x19db0009d35d  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009d377  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009d594  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009d643  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009d69e  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009d72e  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d780  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d7b5  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009d7d9  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009d82f  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009d91e  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009d965  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009d986  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009d9c9  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009da1d  external reference (Runtime::TransitionElementsKind)  (0x7ffff6fe6190)
0x19db0009da39  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009da4a  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009da50  compressed embedded object  (0x19db08309fa5 <Map(PACKED_ELEMENTS)> compressed)
0x19db0009daaf  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009dac0  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009db43  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009db54  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009dbe9  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009dbfa  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009dc92  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009dca3  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009dd36  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009dd47  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009ddd3  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009dde4  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009de6d  off heap target
0x19db0009de85  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009de96  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009dee4  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009df01  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009df12  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009df4f  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009df60  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009dfcb  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009dfdc  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e072  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e083  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e12a  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e13b  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e1e5  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e1f6  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e29f  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e2b0  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e356  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e367  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e443  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e454  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e4b4  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009e4d4  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e4e5  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e500  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009e523  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e534  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e5b1  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e5e0  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e60d  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009e621  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e63f  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e73a  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e765  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009e791  compressed embedded object  (0x19db08309eb5 <Map(PACKED_SMI_ELEMENTS)> compressed)
0x19db0009e7a8  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009e804  compressed embedded object  (0x19db0830dab5 <Map(HOLEY_ELEMENTS)> compressed)
0x19db0009e833  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009e864  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e888  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009e8bd  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e8d5  full embedded object  (0x19db082e360d <NativeContext[243]>)
0x19db0009e8fb  full embedded object  (0x19db08309f55 <Map(PACKED_DOUBLE_ELEMENTS)>)
0x19db0009e945  off heap target

--- End code ---
    Startup: 0.196
    Worst Case: 2.049
    Average: 2.108
    Score: 0.946
    Wall time: 5:07.956


First: 0.196
Worst: 2.049
Average: 2.108

Total Score:  0.946 

